services:
  # Бэкенд сервис
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    container_name: nareshka-backend
    restart: unless-stopped
    group_add:
      - "988" # Добавляем пользователя в группу docker хоста по GID
    environment:
      # База данных
      - DATABASE_URL=${DATABASE_URL}
      # Redis
      - REDIS_URL=${REDIS_URL}
      # JWT и сессии
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      # Сервер
      - PORT=4000
      - HOST=0.0.0.0
      - DEBUG=${DEBUG:-false}
      # WebDAV
      - WEBDAV_URL=${WEBDAV_URL}
      - WEBDAV_USERNAME=${WEBDAV_USERNAME}
      - WEBDAV_PASSWORD=${WEBDAV_PASSWORD}
      # CORS - разрешаем фронтенд и Dokploy домены
      - ALLOWED_ORIGINS=http://frontend,https://${DOKPLOY_DOMAIN:-localhost},https://nareshkamono-nxm1sb-d43bd4-185-21-13-91.traefik.me
    ports:
      - "4000:4000"
    volumes:
      # Пробрасываем Docker сокет для выполнения кода
      - /var/run/docker.sock:/var/run/docker.sock
      # Общая директория для временных файлов с кодом.
      # Путь должен быть одинаковым на хосте и в контейнере.
      - /tmp/nareshka-executions:/tmp/nareshka-executions
      # Используем ../files для персистентности данных как рекомендует Dokploy
      - "../files/backend-logs:/app/logs"
      - "../files/backend-uploads:/app/uploads"
    networks:
      - nareshka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Фронтент сервис
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: nareshka-frontend
    restart: unless-stopped
    ports:
      - "3001:80"
    depends_on:
      - backend
    networks:
      - nareshka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  nareshka-network:
    driver: bridge

volumes:
  # Используем именованные volumes для данных
  backend-logs:
    driver: local
  backend-uploads:
    driver: local
