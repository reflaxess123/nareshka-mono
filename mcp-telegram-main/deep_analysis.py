import asyncio
import logging
import os
import sqlite3
from datetime import datetime

from telethon.errors import AuthKeyUnregisteredError
from telethon.errors.rpcerrorlist import *

from src.mcp_telegram.telegram import create_client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("telegram_debug.log"),
        logging.StreamHandler(),
    ],
)

async def deep_session_analysis():
    """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–∏ Telegram"""

    print("=== –ê–ù–ê–õ–ò–ó –°–ï–°–°–ò–ò TELEGRAM ===\n")

    # 1. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
    session_path = r"C:\Users\refla\.local\state\mcp-telegram\mcp_telegram_session.session"

    if os.path.exists(session_path):
        stat = os.stat(session_path)
        print("üìÅ –§–∞–π–ª —Å–µ—Å—Å–∏–∏:")
        print(f"   –†–∞–∑–º–µ—Ä: {stat.st_size} bytes")
        print(f"   –°–æ–∑–¥–∞–Ω: {datetime.fromtimestamp(stat.st_ctime)}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω: {datetime.fromtimestamp(stat.st_mtime)}")
        print(f"   –î–æ—Å—Ç—É–ø–µ–Ω: {datetime.fromtimestamp(stat.st_atime)}")

        # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ SQLite
        try:
            conn = sqlite3.connect(session_path)
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            print(f"\nüìä –¢–∞–±–ª–∏—Ü—ã –≤ —Å–µ—Å—Å–∏–∏: {[t[0] for t in tables]}")

            # –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä—Å–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("SELECT * FROM version")
            version = cursor.fetchone()
            print(f"   –í–µ—Ä—Å–∏—è: {version}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
            cursor.execute("SELECT * FROM sessions")
            sessions = cursor.fetchall()
            print(f"   –°–µ—Å—Å–∏–∏: {len(sessions)} –∑–∞–ø–∏—Å–µ–π")

            conn.close()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ SQLite: {e}")

    # 2. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    print("\nüîå –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:")

    client = create_client()

    try:
        print("   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        await client.connect()

        print(f"   –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {client.is_connected()}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        print("   –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

        try:
            is_authorized = await client.is_user_authorized()
            print(f"   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {is_authorized}")

            if not is_authorized:
                print("   ‚ö†Ô∏è  –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")

                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                try:
                    user = await client.get_me()
                    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {type(e).__name__}: {e}")

                    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
                    if "AUTH_KEY_UNREGISTERED" in str(e):
                        print("   üîç –î–ò–ê–ì–ù–û–ó: –ö–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–æ–∑–≤–∞–Ω —Å–µ—Ä–≤–µ—Ä–æ–º")
                    elif "SESSION_REVOKED" in str(e):
                        print("   üîç –î–ò–ê–ì–ù–û–ó: –°–µ—Å—Å–∏—è –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    elif "AUTH_KEY_DUPLICATED" in str(e):
                        print("   üîç –î–ò–ê–ì–ù–û–ó: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    elif "SESSION_PASSWORD_NEEDED" in str(e):
                        print("   üîç –î–ò–ê–ì–ù–û–ó: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA")

            else:
                user = await client.get_me()
                print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username})")

        except AuthKeyUnregisteredError:
            print("   ‚ùå AUTH_KEY_UNREGISTERED: –ö–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            print("   üîç –ü–†–ò–ß–ò–ù–ê: Telegram —É–¥–∞–ª–∏–ª –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {type(e).__name__}: {e}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {type(e).__name__}: {e}")

    finally:
        await client.disconnect()

    # 3. –ê–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π
    print("\nüìã –°–†–ê–í–ù–ï–ù–ò–ï –°–ï–°–°–ò–ô:")

    session_dir = r"C:\Users\refla\.local\state\mcp-telegram"
    if os.path.exists(session_dir):
        for file in os.listdir(session_dir):
            if file.endswith(".session"):
                filepath = os.path.join(session_dir, file)
                stat = os.stat(filepath)
                print(f"   {file}: {stat.st_size} bytes, {datetime.fromtimestamp(stat.st_mtime)}")

    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram")
    print("   2. –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
    print("   3. –£–º–µ–Ω—å—à–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É API –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã API –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram")

if __name__ == "__main__":
    asyncio.run(deep_session_analysis())
