"""
–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
"""

import asyncio
from datetime import datetime
from collections import defaultdict

from src.mcp_telegram.robust_client import get_robust_client

class FrontendTopicAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ–ø–∏–∫–∞ Frontend"""
    
    def __init__(self):
        self.dialog_id = -1002208833410  # –û–ú: –ø–∞—Ä–∞–≤–æ–∑–∏–∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
        self.topic_id = 31  # Frontend —Ç–æ–ø–∏–∫
    
    async def analyze_topic(self, limit: int = 500):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ø–∏–∫ Frontend"""
        print("üîç –ê–ù–ê–õ–ò–ó –¢–û–ü–ò–ö–ê FRONTEND")
        print("=" * 50)
        
        messages = []
        media_stats = defaultdict(int)
        users_stats = defaultdict(int)
        dates_stats = defaultdict(int)
        
        async with get_robust_client() as client:
            try:
                print(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞...")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ robust_client –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞
                async def _get_topic_messages(telethon_client, dialog_id, topic_id, limit):
                    messages = []
                    async for message in telethon_client.iter_messages(
                        entity=dialog_id,
                        limit=limit,
                        reply_to=topic_id,
                        reverse=False  # –û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
                    ):
                        messages.append(message)
                        await asyncio.sleep(0.05)  # –ú–∏–∫—Ä–æ-–ø–∞—É–∑–∞
                    return messages
                
                messages = await client._execute_with_retry(_get_topic_messages, self.dialog_id, self.topic_id, limit)
                
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                for message in messages:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ–¥–∏–∞
                    if message.media:
                        media_type = str(type(message.media).__name__)
                        media_stats[media_type] += 1
                    else:
                        media_stats["–ë–µ–∑ –º–µ–¥–∏–∞"] += 1
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    if message.sender:
                        if hasattr(message.sender, 'username') and message.sender.username:
                            users_stats[f"@{message.sender.username}"] += 1
                        elif hasattr(message.sender, 'first_name') and message.sender.first_name:
                            users_stats[message.sender.first_name] += 1
                        else:
                            users_stats[f"ID:{message.sender.id}"] += 1
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
                    if message.date:
                        date_str = message.date.strftime("%Y-%m")
                        dates_stats[date_str] += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.show_statistics(messages, media_stats, users_stats, dates_stats)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞
                self.show_media_examples(messages)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def show_statistics(self, messages, media_stats, users_stats, dates_stats):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        if messages:
            oldest = min(msg.date for msg in messages if msg.date)
            newest = max(msg.date for msg in messages if msg.date)
            print(f"  üìÖ –ü–µ—Ä–∏–æ–¥: {oldest.strftime('%Y-%m-%d')} - {newest.strftime('%Y-%m-%d')}")
        
        print(f"\nüé¨ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–ï–î–ò–ê:")
        for media_type, count in sorted(media_stats.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / len(messages) * 100) if messages else 0
            print(f"  {media_type}: {count} ({percentage:.1f}%)")
        
        print(f"\nüë• –¢–û–ü-10 –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        for user, count in sorted(users_stats.items(), key=lambda x: x[1], reverse=True)[:10]:
            print(f"  {user}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        print(f"\nüìÖ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ú–ï–°–Ø–¶–ê–ú:")
        for date, count in sorted(dates_stats.items(), reverse=True)[:12]:
            print(f"  {date}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    def show_media_examples(self, messages):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞"""
        print(f"\nüé¨ –ü–†–ò–ú–ï–†–´ –°–û–û–ë–©–ï–ù–ò–ô –° –ú–ï–î–ò–ê:")
        
        media_messages = [msg for msg in messages if msg.media][:10]
        
        for i, message in enumerate(media_messages, 1):
            media_type = str(type(message.media).__name__)
            date_str = message.date.strftime("%Y-%m-%d %H:%M") if message.date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            print(f"\n  {i}. ID: {message.id} | –î–∞—Ç–∞: {date_str}")
            print(f"     –¢–∏–ø –º–µ–¥–∏–∞: {media_type}")
            
            if message.text:
                preview = message.text[:150] + "..." if len(message.text) > 150 else message.text
                print(f"     –¢–µ–∫—Å—Ç: {preview}")
            
            if message.sender:
                sender_name = ""
                if hasattr(message.sender, 'username') and message.sender.username:
                    sender_name = f"@{message.sender.username}"
                elif hasattr(message.sender, 'first_name') and message.sender.first_name:
                    sender_name = message.sender.first_name
                else:
                    sender_name = f"ID:{message.sender.id}"
                print(f"     –ê–≤—Ç–æ—Ä: {sender_name}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = FrontendTopicAnalyzer()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        limit = int(input("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 200): ") or "200")
    except ValueError:
        limit = 200
    
    await analyzer.analyze_topic(limit)
    
    print(f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ frontend_video_downloader.py –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ")

if __name__ == "__main__":
    asyncio.run(main()) 