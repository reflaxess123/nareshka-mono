import asyncio
import logging

from telethon.errors import *
from telethon.tl.functions.updates import GetStateRequest
from telethon.tl.functions.users import GetUsersRequest
from telethon.tl.types import InputUserSelf

from src.mcp_telegram.telegram import create_client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_specific_api_calls():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –æ—à–∏–±–∫–∏"""

    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –í–´–ó–û–í–û–í ===\n")

    client = create_client()

    try:
        print("1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        await client.connect()
        print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {client.is_connected()}")

        print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        is_authorized = await client.is_user_authorized()
        print(f"   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {is_authorized}")

        if not is_authorized:
            print("   ‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")

            print("\n3. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
            try:
                state = await client(GetStateRequest())
                print(f"   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {state}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ GetState: {type(e).__name__}: {e}")

            print("\n4. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            try:
                users = await client(GetUsersRequest([InputUserSelf()]))
                print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω: {users}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ GetUsers: {type(e).__name__}: {e}")

                # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
                if isinstance(e, AuthKeyUnregisteredError):
                    print("   üîç –¢–û–ß–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: AUTH_KEY_UNREGISTERED")
                    print("   üìù –û–ü–ò–°–ê–ù–ò–ï: –ö–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–æ–∑–≤–∞–Ω —Å–µ—Ä–≤–µ—Ä–æ–º Telegram")
                    print("   üí° –ü–†–ò–ß–ò–ù–´:")
                    print("      - –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
                    print("      - –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ API")
                    print("      - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏")
                    print("      - –ù–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API")

                elif isinstance(e, AuthKeyDuplicatedError):
                    print("   üîç –¢–û–ß–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: AUTH_KEY_DUPLICATED")
                    print("   üìù –û–ü–ò–°–ê–ù–ò–ï: –ö–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω")

                elif isinstance(e, SessionRevokedError):
                    print("   üîç –¢–û–ß–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: SESSION_REVOKED")
                    print("   üìù –û–ü–ò–°–ê–ù–ò–ï: –°–µ—Å—Å–∏—è –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                elif isinstance(e, UserDeactivatedError):
                    print("   üîç –¢–û–ß–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: USER_DEACTIVATED")
                    print("   üìù –û–ü–ò–°–ê–ù–ò–ï: –ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

                elif isinstance(e, FloodWaitError):
                    print(f"   üîç –¢–û–ß–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: FLOOD_WAIT ({e.seconds} —Å–µ–∫—É–Ω–¥)")
                    print("   üìù –û–ü–ò–°–ê–ù–ò–ï: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")

                else:
                    print(f"   üîç –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê: {type(e).__name__}")
                    print(f"   üìù –û–ü–ò–°–ê–ù–ò–ï: {e!s}")

        else:
            print("   ‚úÖ –°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")

            print("\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
            try:
                user = await client.get_me()
                print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username})")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ get_me: {type(e).__name__}: {e}")

        print("\n5. –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ API –≤—ã–∑–æ–≤–∞...")
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤
            result = await client.get_dialogs(limit=1)
            print(f"   ‚úÖ –î–∏–∞–ª–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(result)} —à—Ç—É–∫")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ get_dialogs: {type(e).__name__}: {e}")

            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
            error_code = getattr(e, "code", None)
            error_message = str(e)

            print(f"   üîç –ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}")
            print(f"   üîç –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")

            if "401" in error_message:
                print("   üéØ –¢–û–ß–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)")
                print("   üìù –†–ï–®–ï–ù–ò–ï: –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            elif "420" in error_message:
                print("   üéØ –¢–û–ß–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (420)")
                print("   üìù –†–ï–®–ï–ù–ò–ï: –û–∂–∏–¥–∞–Ω–∏–µ –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
            elif "403" in error_message:
                print("   üéØ –¢–û–ß–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403)")
                print("   üìù –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()

    finally:
        await client.disconnect()
        print("\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    asyncio.run(test_specific_api_calls())
