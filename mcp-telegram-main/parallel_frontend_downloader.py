"""
–ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û –ò–ó –¢–û–ü–ò–ö–ê FRONTEND
–° –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º, –ø–æ–∫–∞–∑–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
"""

import asyncio
import json
import os
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any
import time
from concurrent.futures import ThreadPoolExecutor

from src.mcp_telegram.simple_video_downloader import simple_download_media
from src.mcp_telegram.robust_client import get_robust_client

class ParallelFrontendDownloader:
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend"""
    
    def __init__(self, max_parallel: int = 3):
        self.dialog_id = -1002208833410  # –û–ú: –ø–∞—Ä–∞–≤–æ–∑–∏–∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
        self.topic_id = 31  # Frontend —Ç–æ–ø–∏–∫
        self.max_parallel = max_parallel  # –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        self.output_dir = Path("./frontend_videos_parallel")
        self.output_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.metadata_file = self.output_dir / "posts_and_videos.json"
        self.progress_file = self.output_dir / "download_progress.json"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_downloaded = 0
        self.total_size = 0
        self.start_time = None
        self.posts_data = []
        
        # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        self.download_semaphore = asyncio.Semaphore(max_parallel)
    
    async def get_messages_with_media_info(self, limit: int = 1000) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞—Ö"""
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend (–ª–∏–º–∏—Ç: {limit})...")
        
        async with get_robust_client() as client:
            try:
                async def _get_topic_messages(telethon_client, dialog_id, topic_id, limit):
                    messages = []
                    async for message in telethon_client.iter_messages(
                        entity=dialog_id,
                        limit=limit,
                        reply_to=topic_id,
                        reverse=False
                    ):
                        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                        message_info = {
                            'message': message,
                            'id': message.id,
                            'date': message.date,
                            'text': message.text or "",
                            'has_media': bool(message.media),
                            'media_type': str(type(message.media).__name__) if message.media else None,
                            'estimated_size': 0
                        }
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞
                        if message.media and hasattr(message.media, 'document'):
                            if hasattr(message.media.document, 'size'):
                                message_info['estimated_size'] = message.media.document.size
                        
                        messages.append(message_info)
                        await asyncio.sleep(0.05)
                    
                    return messages
                
                messages = await client._execute_with_retry(_get_topic_messages, self.dialog_id, self.topic_id, limit)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞
                media_messages = [msg for msg in messages if msg['has_media']]
                
                total_size = sum(msg['estimated_size'] for msg in media_messages)
                
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                print(f"üé¨ –° –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏: {len(media_messages)}")
                print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self.format_size(total_size)}")
                
                return media_messages
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                return []
    
    def format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
        if size_bytes == 0:
            return "0 B"
        
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} TB"
    
    def format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è"""
        if seconds < 60:
            return f"{seconds:.1f}—Å"
        elif seconds < 3600:
            return f"{int(seconds // 60)}–º {int(seconds % 60)}—Å"
        else:
            hours = int(seconds // 3600)
            minutes = int((seconds % 3600) // 60)
            return f"{hours}—á {minutes}–º"
    
    def generate_filename(self, message_info: Dict[str, Any], index: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤–∏–¥–µ–æ"""
        message = message_info['message']
        timestamp = message.date.strftime("%Y%m%d_%H%M%S") if message.date else "unknown"
        return f"frontend_{index:04d}_{timestamp}_{message.id}.mp4"
    
    async def download_single_video(self, message_info: Dict[str, Any], index: int, total: int) -> Dict[str, Any]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–Ω–æ –≤–∏–¥–µ–æ"""
        async with self.download_semaphore:
            message = message_info['message']
            filename = self.generate_filename(message_info, index)
            file_path = self.output_dir / filename
            
            download_start = time.time()
            
            try:
                print(f"üé¨ [{index}/{total}] –°–∫–∞—á–∏–≤–∞—é: {filename}")
                print(f"   üìÑ –¢–µ–∫—Å—Ç: {message_info['text'][:100]}...")
                print(f"   üìä –†–∞–∑–º–µ—Ä: {self.format_size(message_info['estimated_size'])}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞
                result = await simple_download_media(
                    self.dialog_id,
                    message.id,
                    str(file_path)
                )
                
                download_time = time.time() - download_start
                
                if result.get("success"):
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    actual_size = file_path.stat().st_size if file_path.exists() else 0
                    speed = actual_size / download_time if download_time > 0 else 0
                    
                    self.total_downloaded += 1
                    self.total_size += actual_size
                    
                    print(f"   ‚úÖ –°–∫–∞—á–∞–Ω–æ –∑–∞ {self.format_time(download_time)}")
                    print(f"   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {self.format_size(speed)}/—Å")
                    print(f"   üìÅ –†–∞–∑–º–µ—Ä: {self.format_size(actual_size)}")
                    
                    return {
                        'success': True,
                        'filename': filename,
                        'file_path': str(file_path),
                        'size': actual_size,
                        'download_time': download_time,
                        'message_info': message_info
                    }
                else:
                    error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {error_msg}")
                    return {
                        'success': False,
                        'error': error_msg,
                        'message_info': message_info
                    }
                
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                return {
                    'success': False,
                    'error': str(e),
                    'message_info': message_info
                }
    
    def save_progress(self, completed: int, total: int, elapsed: float):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        progress_data = {
            'completed': completed,
            'total': total,
            'percentage': (completed / total * 100) if total > 0 else 0,
            'elapsed_time': elapsed,
            'estimated_remaining': ((total - completed) * elapsed / completed) if completed > 0 else 0,
            'total_downloaded': self.total_downloaded,
            'total_size': self.total_size,
            'average_speed': self.total_size / elapsed if elapsed > 0 else 0,
            'timestamp': datetime.now().isoformat()
        }
        
        with open(self.progress_file, 'w', encoding='utf-8') as f:
            json.dump(progress_data, f, ensure_ascii=False, indent=2)
    
    def save_metadata(self, results: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        metadata = []
        
        for result in results:
            message_info = result['message_info']
            message = message_info['message']
            
            post_data = {
                'message_id': message.id,
                'date': message.date.isoformat() if message.date else None,
                'text': message_info['text'],
                'sender_id': getattr(message.sender, 'id', None) if message.sender else None,
                'sender_username': getattr(message.sender, 'username', None) if message.sender else None,
                'media_type': message_info['media_type'],
                'estimated_size': message_info['estimated_size'],
                'success': result['success'],
                'filename': result.get('filename'),
                'file_path': result.get('file_path'),
                'actual_size': result.get('size'),
                'download_time': result.get('download_time'),
                'error': result.get('error'),
                'download_timestamp': datetime.now().isoformat()
            }
            
            metadata.append(post_data)
        
        with open(self.metadata_file, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
    
    async def download_all_videos(self, messages: List[Dict[str, Any]]):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        if not messages:
            return []
        
        self.start_time = time.time()
        total = len(messages)
        
        print(f"\nüöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï {total} –í–ò–î–ï–û (–º–∞–∫—Å. {self.max_parallel} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)")
        print("=" * 70)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        tasks = []
        for index, message_info in enumerate(messages, 1):
            task = asyncio.create_task(
                self.download_single_video(message_info, index, total)
            )
            tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        results = []
        completed = 0
        
        for task in asyncio.as_completed(tasks):
            result = await task
            results.append(result)
            completed += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            elapsed = time.time() - self.start_time
            self.save_progress(completed, total, elapsed)
            
            print(f"\nüìä –ü–†–û–ì–†–ï–°–°: {completed}/{total} ({completed/total*100:.1f}%)")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {self.format_time(elapsed)}")
            print(f"   ‚úÖ –°–∫–∞—á–∞–Ω–æ: {self.total_downloaded}")
            print(f"   üìä –†–∞–∑–º–µ—Ä: {self.format_size(self.total_size)}")
            
            if completed > 0 and elapsed > 0:
                remaining = (total - completed) * elapsed / completed
                print(f"   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ~{self.format_time(remaining)}")
        
        return results
    
    async def start_download(self, limit: int = 1000):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        print("üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û –ò–ó –¢–û–ü–ò–ö–ê FRONTEND")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞
        messages = await self.get_messages_with_media_info(limit)
        if not messages:
            print("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏")
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await self.download_all_videos(messages)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        self.save_metadata(results)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - self.start_time
        successful = sum(1 for r in results if r['success'])
        failed = len(results) - successful
        average_speed = self.total_size / total_time if total_time > 0 else 0
        
        print(f"\nüèÅ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed}")
        print(f"   üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self.format_size(self.total_size)}")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {self.format_time(total_time)}")
        print(f"   üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {self.format_size(average_speed)}/—Å")
        print(f"   üìÅ –ü–∞–ø–∫–∞: {self.output_dir.absolute()}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫:")
    print("1 - –ë–µ–∑–æ–ø–∞—Å–Ω–æ (1 —Ñ–∞–π–ª)")
    print("2 - –£–º–µ—Ä–µ–Ω–Ω–æ (2 —Ñ–∞–π–ª–∞)")
    print("3 - –ë—ã—Å—Ç—Ä–æ (3 —Ñ–∞–π–ª–∞) - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è")
    print("4 - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ (4 —Ñ–∞–π–ª–∞)")
    
    try:
        parallel_choice = input("–í—ã–±–æ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3): ").strip() or "3"
        max_parallel = int(parallel_choice)
        max_parallel = max(1, min(max_parallel, 5))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 1 –¥–æ 5
    except ValueError:
        max_parallel = 3
    
    try:
        limit = int(input("–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ") or "100")
    except ValueError:
        limit = 100
    
    downloader = ParallelFrontendDownloader(max_parallel=max_parallel)
    await downloader.start_download(limit)

if __name__ == "__main__":
    asyncio.run(main()) 