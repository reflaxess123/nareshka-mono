"""
CLI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö Telegram –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import asyncio
import json
import logging
from functools import wraps

import typer
from rich.console import Console
from rich.json import JSON
from rich.table import Table

from src.mcp_telegram.robust_server import call_tool, list_tools

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)

app = typer.Typer(help="Robust Telegram MCP CLI")
console = Console()

def typer_async(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π typer"""
    @wraps(f)
    def wrapper(*args, **kwargs):
        return asyncio.run(f(*args, **kwargs))
    return wrapper

@app.command()
@typer_async
async def list_robust_tools() -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç–æ–π—á–∏–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""

    console.print("üõ°Ô∏è  [bold green]Robust Telegram MCP Tools[/bold green]")
    console.print()

    try:
        tools = await list_tools()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        table = Table(title="–£—Å—Ç–æ–π—á–∏–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="cyan")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="magenta")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", style="green")

        for tool in tools:
            schema_json = json.dumps(tool.inputSchema.get("properties", {}), indent=2)
            table.add_row(
                tool.name,
                tool.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
                JSON(schema_json),
            )

        console.print(table)
        console.print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tools)} —É—Å—Ç–æ–π—á–∏–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@app.command()
@typer_async
async def call_robust_tool(
    name: str = typer.Argument(help="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"),
    args: str = typer.Option("{}", help="–ê—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"),
) -> None:
    """–í—ã–∑–≤–∞—Ç—å —É—Å—Ç–æ–π—á–∏–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""

    console.print(f"üîß –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: [bold]{name}[/bold]")
    console.print(f"üìã –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args}")
    console.print()

    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        arguments = json.loads(args)

        # –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        console.print("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å...")
        result = await call_tool(name, arguments)

        console.print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        console.print("‚îÄ" * 50)

        for item in result:
            if item.type == "text":
                console.print(item.text)
            else:
                console.print(f"[yellow]–¢–∏–ø: {item.type}[/yellow]")
                console.print(str(item))

        console.print("‚îÄ" * 50)
        console.print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

    except json.JSONDecodeError:
        console.print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö")
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@app.command()
@typer_async
async def test_dialogs() -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""

    console.print("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤...")

    try:
        result = await call_tool("RobustListDialogs", {})

        console.print("‚úÖ –î–∏–∞–ª–æ–≥–∏:")
        for item in result:
            if item.type == "text":
                console.print(f"  ‚Ä¢ {item.text}")

        console.print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(result)} –¥–∏–∞–ª–æ–≥–æ–≤")

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@app.command()
@typer_async
async def test_messages(
    dialog_id: int = typer.Argument(help="ID –¥–∏–∞–ª–æ–≥–∞"),
    limit: int = typer.Option(10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"),
) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""

    console.print(f"üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {dialog_id}...")

    try:
        result = await call_tool("RobustListMessages", {
            "dialog_id": dialog_id,
            "limit": limit,
        })

        console.print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è:")
        for item in result:
            if item.type == "text":
                console.print(f"  ‚Ä¢ {item.text[:100]}{'...' if len(item.text) > 100 else ''}")

        console.print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Å–æ–æ–±—â–µ–Ω–∏–π")

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@app.command()
@typer_async
async def test_forum_topics(
    dialog_id: int = typer.Argument(help="ID –¥–∏–∞–ª–æ–≥–∞"),
    limit: int = typer.Option(10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º"),
) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º —Ñ–æ—Ä—É–º–∞"""

    console.print(f"üóÇÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º —Ñ–æ—Ä—É–º–∞ –∏–∑ {dialog_id}...")

    try:
        result = await call_tool("RobustListForumTopics", {
            "dialog_id": dialog_id,
            "limit": limit,
        })

        console.print("‚úÖ –¢–µ–º—ã —Ñ–æ—Ä—É–º–∞:")
        for item in result:
            if item.type == "text":
                console.print(f"  ‚Ä¢ {item.text}")

        console.print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(result)} —Ç–µ–º")

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@app.command()
@typer_async
async def test_topic_messages(
    dialog_id: int = typer.Argument(help="ID –¥–∏–∞–ª–æ–≥–∞"),
    topic_id: int = typer.Argument(help="ID —Ç–µ–º—ã"),
    limit: int = typer.Option(10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"),
) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–µ–º—ã"""

    console.print(f"üßµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–µ–º—ã {topic_id}...")

    try:
        result = await call_tool("RobustListTopicMessages", {
            "dialog_id": dialog_id,
            "topic_id": topic_id,
            "limit": limit,
        })

        console.print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–º—ã:")
        for item in result:
            if item.type == "text":
                console.print(f"  ‚Ä¢ {item.text[:100]}{'...' if len(item.text) > 100 else ''}")

        console.print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Å–æ–æ–±—â–µ–Ω–∏–π")

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@app.command()
@typer_async
async def find_topic(
    dialog_id: int = typer.Argument(help="ID –¥–∏–∞–ª–æ–≥–∞"),
    topic_name: str = typer.Argument(help="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã"),
) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ç–µ–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""

    console.print(f"üîç –ü–æ–∏—Å–∫ —Ç–µ–º—ã '{topic_name}' –≤ –¥–∏–∞–ª–æ–≥–µ {dialog_id}...")

    try:
        result = await call_tool("RobustFindTopicByName", {
            "dialog_id": dialog_id,
            "topic_name": topic_name,
        })

        console.print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:")
        for item in result:
            if item.type == "text":
                console.print(f"  ‚Ä¢ {item.text}")

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –í–ò–î–ï–û ===

@app.command()
@typer_async
async def scan_media(
    dialog_id: int = typer.Argument(help="ID –¥–∏–∞–ª–æ–≥–∞"),
    limit: int = typer.Option(20, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"),
) -> None:
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ"""

    console.print(f"üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ {dialog_id}...")

    try:
        result = await call_tool("RobustScanMedia", {
            "dialog_id": dialog_id,
            "limit": limit,
        })

        console.print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for item in result:
            if item.type == "text":
                console.print(item.text)

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@app.command()
@typer_async
async def download_video(
    dialog_id: int = typer.Argument(help="ID –¥–∏–∞–ª–æ–≥–∞"),
    message_id: int = typer.Argument(help="ID —Å–æ–æ–±—â–µ–Ω–∏—è"),
    path: str = typer.Option(None, help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"),
) -> None:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    console.print(f"üé¨ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}...")

    try:
        args = {
            "dialog_id": dialog_id,
            "message_id": message_id,
        }
        if path:
            args["custom_path"] = path

        result = await call_tool("RobustDownloadVideo", args)

        console.print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        for item in result:
            if item.type == "text":
                console.print(item.text)

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@app.command()
@typer_async
async def find_videos(
    dialog_id: int = typer.Argument(help="ID –¥–∏–∞–ª–æ–≥–∞"),
    limit: int = typer.Option(5, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–∏—Å–∫–∞"),
    min_duration: int = typer.Option(0, help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)"),
) -> None:
    """–ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ –¥–∏–∞–ª–æ–≥–µ"""

    console.print(f"üîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –≤ –¥–∏–∞–ª–æ–≥–µ {dialog_id}...")

    try:
        result = await call_tool("RobustFindVideos", {
            "dialog_id": dialog_id,
            "limit": limit,
            "min_duration": min_duration,
        })

        console.print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:")
        for item in result:
            if item.type == "text":
                console.print(item.text)

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@app.command()
@typer_async
async def stress_test(
    iterations: int = typer.Option(10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π"),
    delay: float = typer.Option(2.0, help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫)"),
) -> None:
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""

    console.print(f"üß™ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç: {iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay}—Å")
    console.print()

    success_count = 0
    error_count = 0

    for i in range(iterations):
        try:
            console.print(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {i + 1}/{iterations}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
            result = await call_tool("RobustListDialogs", {})

            if result and len(result) > 0:
                success_count += 1
                console.print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(result)} –¥–∏–∞–ª–æ–≥–æ–≤")
            else:
                error_count += 1
                console.print("  ‚ùå –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < iterations - 1:
                await asyncio.sleep(delay)

        except Exception as e:
            error_count += 1
            console.print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

    console.print()
    console.print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:")
    console.print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
    console.print(f"  ‚ùå –û—à–∏–±–æ–∫: {error_count}")
    console.print(f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(success_count / iterations) * 100:.1f}%")

if __name__ == "__main__":
    app()
