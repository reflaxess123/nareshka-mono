"""
–ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend –≤ –û–ú: –ø–∞—Ä–∞–≤–æ–∑–∏–∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
–° —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å—Ç–∞ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
"""

import asyncio
import json
import os
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

from src.mcp_telegram.simple_video_downloader import simple_download_media
from src.mcp_telegram.robust_client import get_robust_client

class FrontendVideoDownloader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend"""
    
    def __init__(self):
        self.dialog_id = -1002208833410  # –û–ú: –ø–∞—Ä–∞–≤–æ–∑–∏–∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
        self.topic_id = 31  # Frontend —Ç–æ–ø–∏–∫
        self.output_dir = Path("./frontend_videos")
        self.output_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª –¥–ª—è —Å–≤—è–∑–∫–∏ –ø–æ—Å—Ç–∞ –∏ –≤–∏–¥–µ–æ
        self.metadata_file = self.output_dir / "posts_and_videos.json"
        self.posts_data = []
        # ID —Å–æ–æ–±—â–µ–Ω–∏–π, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö (—Å–∫–∞—á–∞–Ω—ã –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã –ø–æ —Ç–µ–≥—É)
        self.processed_ids = set()
        self._load_existing_metadata()

    def _load_existing_metadata(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"""
        if not self.metadata_file.exists():
            return

        try:
            with open(self.metadata_file, 'r', encoding='utf-8') as f:
                self.posts_data = json.load(f)

            for item in self.posts_data:
                msg_id = item.get("message_id")
                if msg_id is None:
                    continue
                # –£–∂–µ —Å–∫–∞—á–∞–Ω–æ –∏ —Ñ–∞–π–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                video_path = item.get("video_path")
                if video_path and os.path.exists(video_path):
                    self.processed_ids.add(msg_id)
                    continue
                # –ë—ã–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ —Ç–µ–≥–∞–º
                err = str(item.get("download_error", ""))
                if "Skipped" in err:
                    self.processed_ids.add(msg_id)
        except Exception:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω ‚Äì –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
            self.posts_data = []
            self.processed_ids = set()
    
    async def get_all_topic_messages(self, limit: int = 1000) -> List[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend"""
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend (–ª–∏–º–∏—Ç: {limit})...")
        
        async with get_robust_client() as client:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ robust_client –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞
                async def _get_topic_messages(telethon_client, dialog_id, topic_id, limit):
                    messages = []
                    async for message in telethon_client.iter_messages(
                        entity=dialog_id,
                        limit=limit,
                        reply_to=topic_id,
                        reverse=False  # –û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
                    ):
                        messages.append(message)
                        # –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ —É–±—Ä–∞–Ω–∞ —Ä–∞–¥–∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è
                    return messages
                
                messages = await client._execute_with_retry(_get_topic_messages, self.dialog_id, self.topic_id, limit)
                
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend")
                return messages
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                return []
    
    def save_post_data(self, message, video_path: str = None, error: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–∏–¥–µ–æ"""
        post_data = {
            "message_id": message.id,
            "date": message.date.isoformat() if message.date else None,
            "text": message.text or "",
            "sender_id": getattr(message.sender, 'id', None) if message.sender else None,
            "sender_username": getattr(message.sender, 'username', None) if message.sender else None,
            "sender_first_name": getattr(message.sender, 'first_name', None) if message.sender else None,
            "has_media": bool(message.media),
            "media_type": str(type(message.media).__name__) if message.media else None,
            "video_path": video_path,
            "download_error": error,
            "download_timestamp": datetime.now().isoformat()
        }
        
        self.posts_data.append(post_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        with open(self.metadata_file, 'w', encoding='utf-8') as f:
            json.dump(self.posts_data, f, ensure_ascii=False, indent=2)
    
    def generate_video_filename(self, message, index: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤–∏–¥–µ–æ"""
        timestamp = message.date.strftime("%Y%m%d_%H%M%S") if message.date else "unknown"
        return f"frontend_{index:04d}_{timestamp}_{message.id}.mp4"
    
    async def download_videos_from_messages(self, messages: List[Any]):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ —Å–µ–º–∞—Ñ–æ—Ä—É"""
        print(f"\nüé¨ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        sem = asyncio.Semaphore(12)

        # –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = {
            "downloaded": 0,
            "media": 0,
            "skipped": 0,
            "already": 0,
            "errors": 0,
        }
        counter_lock = asyncio.Lock()

        async def process_message(index: int, message):
            async with sem:
                print(f"\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ {index}/{len(messages)} (ID: {message.id})")

                # –ü—Ä–æ–ø—É—Å–∫, –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                if message.id in self.processed_ids:
                    print("‚è≠Ô∏è –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫")
                    async with counter_lock:
                        stats["already"] += 1
                    return

                # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞
                if message.text:
                    preview_text = message.text[:100] + "..." if len(message.text) > 100 else message.text
                    print(f"üìÑ –¢–µ–∫—Å—Ç: {preview_text}")

                # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º
                if message.text and any(tag in message.text.lower() for tag in ("#vue", "#angular")):
                    print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫: —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥–∏ #vue/#angular")
                    async with counter_lock:
                        stats["skipped"] += 1
                    self.save_post_data(message, error="Skipped due to Vue/Angular tag")
                    return

                # –ù–µ—Ç –º–µ–¥–∏–∞
                if not message.media:
                    print("üìù –ù–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤")
                    self.save_post_data(message)
                    return

                async with counter_lock:
                    stats["media"] += 1

                media_type = str(type(message.media).__name__)
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–µ–¥–∏–∞: {media_type}")

                try:
                    filename = self.generate_video_filename(message, index)
                    file_path = self.output_dir / filename

                    result = await simple_download_media(self.dialog_id, message.id, str(file_path))

                    if result.get("success"):
                        async with counter_lock:
                            stats["downloaded"] += 1
                        print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {filename}")
                        self.save_post_data(message, str(file_path))
                    else:
                        async with counter_lock:
                            stats["errors"] += 1
                        err = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {err}")
                        self.save_post_data(message, error=err)
                except Exception as e:
                    async with counter_lock:
                        stats["errors"] += 1
                    print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
                    self.save_post_data(message, error=str(e))

        # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [process_message(idx, msg) for idx, msg in enumerate(messages, 1)]
        await asyncio.gather(*tasks)

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        print(f"  üé¨ –° –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏: {stats['media']}")
        print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (Vue/Angular): {stats['skipped']}")
        print(f"  üõë –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ: {stats['already']}")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {stats['downloaded']}")
        print(f"  ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
        print(f"  üìÅ –ü–∞–ø–∫–∞: {self.output_dir.absolute()}")
        print(f"  üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {self.metadata_file.absolute()}")
    
    async def start_download(self, limit: int = 1000):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        print("üöÄ –ú–ê–°–°–û–í–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û –ò–ó –¢–û–ü–ò–ö–ê FRONTEND")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await self.get_all_topic_messages(limit)
        if not messages:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        await self.download_videos_from_messages(messages)
        
        print("\nüèÅ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    downloader = FrontendVideoDownloader()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        limit = int(input("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ") or "100")
    except ValueError:
        limit = 100
    
    await downloader.start_download(limit)

if __name__ == "__main__":
    asyncio.run(main()) 