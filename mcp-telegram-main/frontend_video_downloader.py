"""
–ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend –≤ –û–ú: –ø–∞—Ä–∞–≤–æ–∑–∏–∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
–° —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å—Ç–∞ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
"""

import asyncio
import json
import os
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

from src.mcp_telegram.simple_video_downloader import simple_download_media
from src.mcp_telegram.robust_client import get_robust_client

class FrontendVideoDownloader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend"""
    
    def __init__(self):
        self.dialog_id = -1002208833410  # –û–ú: –ø–∞—Ä–∞–≤–æ–∑–∏–∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
        self.topic_id = 31  # Frontend —Ç–æ–ø–∏–∫
        self.output_dir = Path("./frontend_videos")
        self.output_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª –¥–ª—è —Å–≤—è–∑–∫–∏ –ø–æ—Å—Ç–∞ –∏ –≤–∏–¥–µ–æ
        self.metadata_file = self.output_dir / "posts_and_videos.json"
        self.posts_data = []
    
    async def get_all_topic_messages(self, limit: int = 1000) -> List[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend"""
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend (–ª–∏–º–∏—Ç: {limit})...")
        
        async with get_robust_client() as client:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ robust_client –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞
                async def _get_topic_messages(telethon_client, dialog_id, topic_id, limit):
                    messages = []
                    async for message in telethon_client.iter_messages(
                        entity=dialog_id,
                        limit=limit,
                        reply_to=topic_id,
                        reverse=False  # –û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
                    ):
                        messages.append(message)
                        await asyncio.sleep(0.1)  # –ú–∏–∫—Ä–æ-–ø–∞—É–∑–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    return messages
                
                messages = await client._execute_with_retry(_get_topic_messages, self.dialog_id, self.topic_id, limit)
                
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend")
                return messages
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                return []
    
    def save_post_data(self, message, video_path: str = None, error: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–∏–¥–µ–æ"""
        post_data = {
            "message_id": message.id,
            "date": message.date.isoformat() if message.date else None,
            "text": message.text or "",
            "sender_id": getattr(message.sender, 'id', None) if message.sender else None,
            "sender_username": getattr(message.sender, 'username', None) if message.sender else None,
            "sender_first_name": getattr(message.sender, 'first_name', None) if message.sender else None,
            "has_media": bool(message.media),
            "media_type": str(type(message.media).__name__) if message.media else None,
            "video_path": video_path,
            "download_error": error,
            "download_timestamp": datetime.now().isoformat()
        }
        
        self.posts_data.append(post_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        with open(self.metadata_file, 'w', encoding='utf-8') as f:
            json.dump(self.posts_data, f, ensure_ascii=False, indent=2)
    
    def generate_video_filename(self, message, index: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤–∏–¥–µ–æ"""
        timestamp = message.date.strftime("%Y%m%d_%H%M%S") if message.date else "unknown"
        return f"frontend_{index:04d}_{timestamp}_{message.id}.mp4"
    
    async def download_videos_from_messages(self, messages: List[Any]):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print(f"\nüé¨ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        downloaded_count = 0
        media_count = 0
        error_count = 0
        
        for index, message in enumerate(messages, 1):
            print(f"\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ {index}/{len(messages)} (ID: {message.id})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.text:
                preview_text = message.text[:100] + "..." if len(message.text) > 100 else message.text
                print(f"üìÑ –¢–µ–∫—Å—Ç: {preview_text}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞
            if message.media:
                media_count += 1
                media_type = str(type(message.media).__name__)
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–µ–¥–∏–∞: {media_type}")
                
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    filename = self.generate_video_filename(message, index)
                    file_path = self.output_dir / filename
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞
                    result = await simple_download_media(
                        self.dialog_id, 
                        message.id, 
                        str(file_path)
                    )
                    
                    if result.get("success"):
                        downloaded_count += 1
                        print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {filename}")
                        self.save_post_data(message, str(file_path))
                    else:
                        error_count += 1
                        error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {error_msg}")
                        self.save_post_data(message, error=error_msg)
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    error_count += 1
                    print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
                    self.save_post_data(message, error=str(e))
            else:
                print("üìù –ù–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤")
                self.save_post_data(message)
        
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        print(f"  üé¨ –° –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏: {media_count}")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {downloaded_count}")
        print(f"  ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"  üìÅ –ü–∞–ø–∫–∞: {self.output_dir.absolute()}")
        print(f"  üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {self.metadata_file.absolute()}")
    
    async def start_download(self, limit: int = 1000):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        print("üöÄ –ú–ê–°–°–û–í–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û –ò–ó –¢–û–ü–ò–ö–ê FRONTEND")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await self.get_all_topic_messages(limit)
        if not messages:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        await self.download_videos_from_messages(messages)
        
        print("\nüèÅ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    downloader = FrontendVideoDownloader()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        limit = int(input("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ") or "100")
    except ValueError:
        limit = 100
    
    await downloader.start_download(limit)

if __name__ == "__main__":
    asyncio.run(main()) 