import os
import sqlite3
from datetime import datetime


def analyze_session_db():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏"""

    session_path = r"C:\Users\refla\.local\state\mcp-telegram\mcp_telegram_session.session"

    if not os.path.exists(session_path):
        print("‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    print("=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó SQLite –°–ï–°–°–ò–ò ===\n")

    try:
        conn = sqlite3.connect(session_path)
        cursor = conn.cursor()

        # 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("üìä –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶:")
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()

        for table in tables:
            table_name = table[0]
            print(f"\nüîπ –¢–∞–±–ª–∏—Ü–∞: {table_name}")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = cursor.fetchall()

            for col in columns:
                print(f"   {col[1]} ({col[2]})")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            cursor.execute(f"SELECT * FROM {table_name}")
            rows = cursor.fetchall()
            print(f"   –ó–∞–ø–∏—Å–µ–π: {len(rows)}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü
            if table_name == "version":
                print(f"   –í–µ—Ä—Å–∏—è: {rows[0] if rows else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")

            elif table_name == "sessions":
                if rows:
                    print(f"   –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {len(rows)} –∑–∞–ø–∏—Å–µ–π")
                    for i, row in enumerate(rows):
                        print(f"     –ó–∞–ø–∏—Å—å {i+1}: {len(str(row))} —Å–∏–º–≤–æ–ª–æ–≤")
                        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

            elif table_name == "entities":
                print(f"   –°—É—â–Ω–æ—Å—Ç–∏: {len(rows)} –∑–∞–ø–∏—Å–µ–π")
                for row in rows[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"     ID: {row[0]}, Hash: {row[1]}")

            elif table_name == "sent_files":
                print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(rows)} –∑–∞–ø–∏—Å–µ–π")

            elif table_name == "update_state":
                if rows:
                    print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {rows[0] if rows else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò:")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        cursor.execute("SELECT COUNT(*) FROM sessions")
        session_count = cursor.fetchone()[0]
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {session_count}")

        if session_count > 0:
            cursor.execute("SELECT * FROM sessions")
            session_data = cursor.fetchone()
            print(f"   –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏: {len(str(session_data))} —Å–∏–º–≤–æ–ª–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            if session_data:
                print(f"   DC ID: {session_data[0] if len(session_data) > 0 else '–ù–µ—Ç'}")
                print(f"   IP: {session_data[1] if len(session_data) > 1 else '–ù–µ—Ç'}")
                print(f"   –ü–æ—Ä—Ç: {session_data[2] if len(session_data) > 2 else '–ù–µ—Ç'}")
                print(f"   –ö–ª—é—á –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {'–ï—Å—Ç—å' if len(session_data) > 3 and session_data[3] else '–ù–µ—Ç'}")

        # 3. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        print("\n‚è∞ –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ò:")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        stat = os.stat(session_path)
        print(f"   –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {datetime.fromtimestamp(stat.st_ctime)}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {datetime.fromtimestamp(stat.st_mtime)}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø: {datetime.fromtimestamp(stat.st_atime)}")

        # –í—Ä–µ–º—è —Å–µ–π—á–∞—Å
        now = datetime.now()
        modified_ago = now - datetime.fromtimestamp(stat.st_mtime)
        print(f"   –ò–∑–º–µ–Ω–µ–Ω {modified_ago} –Ω–∞–∑–∞–¥")

        conn.close()

        # 4. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
        print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú:")

        if session_count == 0:
            print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏")
            print("   üîß –†–ï–®–ï–ù–ò–ï: –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞")

        elif modified_ago.days > 30:
            print("   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ (>30 –¥–Ω–µ–π)")
            print("   üîß –†–ï–®–ï–ù–ò–ï: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

        else:
            print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Å—Å–∏–∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   üîß –ü–†–û–ë–õ–ï–ú–ê: –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–º")
            print("   üîß –ü–†–ò–ß–ò–ù–ê: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_session_db()
