"""
–ê–ù–ê–õ–ò–ó–ê–¢–û–† –ú–ï–î–ò–ê –§–ê–ô–õ–û–í –í –ß–ê–¢–ï
–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ —Ñ–∞–π–ª—ã, –∏—Ö —Ä–∞–∑–º–µ—Ä –∏ –≤—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
"""

import asyncio
import time
from pathlib import Path
from datetime import datetime


class MediaAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –≤ Telegram —á–∞—Ç–µ"""

    def __init__(self):
        self.dialog_id = -1002208833410
        self.topic_id = 31
        
        # –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ angular/vue
        self.skip_keywords = [
            'angular', 'vue', 'vuejs', 'vue.js', 'nuxt', 
            'angular2', 'angular4', 'angular5', 'angular6', 'angular7', 
            'angular8', 'angular9', 'angular10', 'angular11', 'angular12',
            'angular13', 'angular14', 'angular15', 'angular16', 'angular17',
            'ng-', 'ngrx', 'angular cli', 'angular material'
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_videos = 0
        self.total_audio = 0
        self.total_video_size = 0
        self.total_audio_size = 0
        self.total_other_media = 0
        self.total_other_size = 0
        self.skipped_angular = 0
        
        self.media_files = []
        self.monthly_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        self.company_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        
        self.start_time = None

    def extract_company_from_text(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return "Unknown"
        
        text_lower = text.lower()
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        companies = {
            '—è–Ω–¥–µ–∫—Å': '–Ø–Ω–¥–µ–∫—Å', 'yandex': '–Ø–Ω–¥–µ–∫—Å',
            '—Å–±–µ—Ä': '–°–±–µ—Ä–±–∞–Ω–∫', 'sber': '–°–±–µ—Ä–±–∞–Ω–∫', '—Å–±–µ—Ä–±–∞–Ω–∫': '–°–±–µ—Ä–±–∞–Ω–∫',
            '–∞–≤–∏—Ç–æ': '–ê–≤–∏—Ç–æ', 'avito': '–ê–≤–∏—Ç–æ',
            '–≤–∫': 'VK', 'vk': 'VK', '–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ': 'VK',
            '—Ç–∏–Ω—å–∫–æ—Ñ—Ñ': '–¢–∏–Ω—å–∫–æ—Ñ—Ñ', 'tinkoff': '–¢–∏–Ω—å–∫–æ—Ñ—Ñ',
            'ozon': 'Ozon', '–æ–∑–æ–Ω': 'Ozon',
            'wildberries': 'Wildberries', '–≤–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑': 'Wildberries',
            '–∞–ª—å—Ñ–∞': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫', 'alfa': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
            '–º—Ç—Å': '–ú–¢–°', 'mts': '–ú–¢–°',
            '—Ä–æ—Å—Ç–µ–ª–µ–∫–æ–º': '–†–æ—Å—Ç–µ–ª–µ–∫–æ–º',
            '—Ü–∏–∞–Ω': '–¶–∏–∞–Ω', 'cian': '–¶–∏–∞–Ω',
            'rutube': 'RuTube', '—Ä—É—Ç—É–±': 'RuTube',
            'exness': 'Exness',
            '—Ç–æ—á–∫–∞': '–¢–æ—á–∫–∞ –ë–∞–Ω–∫', '—Ç–æ—á–∫–∞–±–∞–Ω–∫': '–¢–æ—á–∫–∞ –ë–∞–Ω–∫',
            'selecty': 'Selecty',
            '–∏–Ω–Ω–æ—Ç–µ—Ö': '–ò–Ω–Ω–æ—Ç–µ—Ö',
            '—Å–º–∞–π–Ω–µ–∫—Å': 'Sminex', 'sminex': 'Sminex',
            'spotware': 'Spotware',
            '–º—Ç–≥': '–ú–¢–ì',
            '—Ä–æ–∫–µ—Ç': '–†–æ–∫–µ—Ç',
            'exness': 'Exness'
        }
        
        for key, company in companies.items():
            if key in text_lower:
                return company
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ #
        import re
        hashtag_match = re.search(r'#([A-Za-z–ê-–Ø–∞-—è]+)', text)
        if hashtag_match:
            tag = hashtag_match.group(1)
            if tag.lower() not in ['frontend', 'react', 'vue', 'angular', 'javascript', 'typescript', '–∑–∞–ø–∏—Å—å_—Å–æ–±–µ—Å–∞']:
                return tag
        
        return "Other"

    def should_skip(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        if not text:
            return False
        text_lower = text.lower()
        for keyword in self.skip_keywords:
            if keyword in text_lower:
                return True
        return False

    def format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä"""
        if size_bytes == 0:
            return "0 B"
        for unit in ["B", "KB", "MB", "GB", "TB"]:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} PB"

    def format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è"""
        if seconds < 60:
            return f"{seconds:.1f}s"
        elif seconds < 3600:
            minutes = int(seconds // 60)
            secs = int(seconds % 60)
            return f"{minutes}m {secs}s"
        else:
            hours = int(seconds // 3600)
            minutes = int((seconds % 3600) // 60)
            return f"{hours}h {minutes}m"

    async def analyze_all_media(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –≤ —á–∞—Ç–µ"""
        print("üîç –ê–ù–ê–õ–ò–ó –í–°–ï–• –ú–ï–î–ò–ê –§–ê–ô–õ–û–í –í –ß–ê–¢–ï")
        print("=" * 50)
        print("üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
        
        try:
            from src.mcp_telegram.telegram import create_client
            
            client = create_client()
            await client.connect()
            
            print(f"üìä –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {self.dialog_id}, —Ç–æ–ø–∏–∫ {self.topic_id}...")
            print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
            print()
            
            message_count = 0
            
            async for message in client.iter_messages(
                entity=self.dialog_id,
                limit=100000,  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                reply_to=self.topic_id,
                reverse=True,  # –° —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞
            ):
                message_count += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
                if message_count % 100 == 0:
                    print(f"üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
                
                # –¢–æ–ª—å–∫–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
                if not message.media:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ angular/vue
                text = message.text or ""
                if self.should_skip(text):
                    self.skipped_angular += 1
                    continue
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞
                media_info = {
                    "message_id": message.id,
                    "date": message.date,
                    "text": text[:100] + "..." if len(text) > 100 else text,
                    "media_type": str(type(message.media).__name__)
                }
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
                if message.date:
                    month_key = message.date.strftime('%Y-%m')
                    if month_key not in self.monthly_stats:
                        self.monthly_stats[month_key] = {'videos': 0, 'audio': 0, 'size': 0}
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞
                company = self.extract_company_from_text(text)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ —Ç–∏–ø
                size = 0
                file_type = "unknown"
                
                if hasattr(message.media, "document") and message.media.document:
                    size = getattr(message.media.document, "size", 0)
                    mime_type = getattr(message.media.document, "mime_type", "").lower()
                    
                    if mime_type.startswith('video/'):
                        file_type = "video"
                        self.total_videos += 1
                        self.total_video_size += size
                        if message.date:
                            month_key = message.date.strftime('%Y-%m')
                            self.monthly_stats[month_key]['videos'] += 1
                            self.monthly_stats[month_key]['size'] += size
                    elif mime_type.startswith('audio/'):
                        file_type = "audio"
                        self.total_audio += 1
                        self.total_audio_size += size
                        if message.date:
                            month_key = message.date.strftime('%Y-%m')
                            self.monthly_stats[month_key]['audio'] += 1
                            self.monthly_stats[month_key]['size'] += size
                    elif 'video' in mime_type:
                        file_type = "video"
                        self.total_videos += 1
                        self.total_video_size += size
                        if message.date:
                            month_key = message.date.strftime('%Y-%m')
                            self.monthly_stats[month_key]['videos'] += 1
                            self.monthly_stats[month_key]['size'] += size
                    elif 'audio' in mime_type:
                        file_type = "audio"
                        self.total_audio += 1
                        self.total_audio_size += size
                        if message.date:
                            month_key = message.date.strftime('%Y-%m')
                            self.monthly_stats[month_key]['audio'] += 1
                            self.monthly_stats[month_key]['size'] += size
                    else:
                        file_type = "other"
                        self.total_other_media += 1
                        self.total_other_size += size
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
                    if company and file_type in ['video', 'audio']:
                        if company not in self.company_stats:
                            self.company_stats[company] = {'count': 0, 'size': 0}
                        self.company_stats[company]['count'] += 1
                        self.company_stats[company]['size'] += size
                else:
                    # –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Ñ–æ—Ç–æ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø –º–µ–¥–∏–∞
                    file_type = "other"
                    self.total_other_media += 1
                
                media_info.update({
                    "size": size,
                    "file_type": file_type,
                    "mime_type": getattr(getattr(message.media, "document", None), "mime_type", "unknown"),
                    "company": company
                })
                
                self.media_files.append(media_info)
            
            await client.disconnect()
            
            print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {len(self.media_files)}")
            print(f"üé¨ –í–∏–¥–µ–æ: {self.total_videos}, üéµ –ê—É–¥–∏–æ: {self.total_audio}")
            print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")

    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        output = []
        
        output.append("# üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ï–î–ò–ê –§–ê–ô–õ–û–í –í –ß–ê–¢–ï")
        output.append("")
        
        output.append("## üé¨ –í–ò–î–ï–û –§–ê–ô–õ–´")
        output.append(f"- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {self.total_videos}")
        output.append(f"- **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {self.format_size(self.total_video_size)}")
        output.append("")
        
        output.append("## üéµ –ê–£–î–ò–û –§–ê–ô–õ–´")
        output.append(f"- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {self.total_audio}")
        output.append(f"- **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {self.format_size(self.total_audio_size)}")
        output.append("")
        
        output.append("## üìÑ –î–†–£–ì–ò–ï –ú–ï–î–ò–ê")
        output.append(f"- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {self.total_other_media}")
        output.append(f"- **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {self.format_size(self.total_other_size)}")
        output.append("")
        
        output.append(f"## üö´ –ü–†–û–ü–£–©–ï–ù–û (Angular/Vue)")
        output.append(f"- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {self.skipped_angular}")
        output.append("")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_media = self.total_videos + self.total_audio
        total_size = self.total_video_size + self.total_audio_size
        
        output.append("## üìà –ò–¢–û–ì–û (–≤–∏–¥–µ–æ + –∞—É–¥–∏–æ)")
        output.append(f"- **–§–∞–π–ª–æ–≤:** {total_media}")
        output.append(f"- **–†–∞–∑–º–µ—Ä:** {self.format_size(total_size)}")
        output.append("")
        
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        output.append("## ‚è±Ô∏è –û–¶–ï–ù–ö–ê –í–†–ï–ú–ï–ù–ò –°–ö–ê–ß–ò–í–ê–ù–ò–Ø")
        output.append("")
        
        # –ü—Ä–∏ —Ç–µ–∫—É—â–µ–π –º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ 200-250 KB/s
        slow_speed_200 = 200 * 1024  # 200 KB/s –≤ –±–∞–π—Ç–∞—Ö
        slow_speed_250 = 250 * 1024  # 250 KB/s –≤ –±–∞–π—Ç–∞—Ö
        time_200 = total_size / slow_speed_200 if slow_speed_200 > 0 else 0
        time_250 = total_size / slow_speed_250 if slow_speed_250 > 0 else 0
        
        # –ü—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ 1 MB/s
        normal_speed = 1024 * 1024  # 1 MB/s
        time_normal = total_size / normal_speed
        
        # –ü—Ä–∏ –±—ã—Å—Ç—Ä–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ 5 MB/s (–∫–∞–∫ —É –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ Telegram)
        fast_speed = 5 * 1024 * 1024  # 5 MB/s
        time_fast = total_size / fast_speed
        
        output.append("| –°–∫–æ—Ä–æ—Å—Ç—å | –í—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è |")
        output.append("|----------|------------------|")
        output.append(f"| **200 KB/s** (—Ç–µ–∫—É—â–∞—è) | **{self.format_time(time_200)}** |")
        output.append(f"| **250 KB/s** (—Ç–µ–∫—É—â–∞—è) | **{self.format_time(time_250)}** |")
        output.append(f"| 1 MB/s (–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è) | {self.format_time(time_normal)} |")
        output.append(f"| 5 MB/s (–±—ã—Å—Ç—Ä–∞—è) | {self.format_time(time_fast)} |")
        output.append("")
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if total_media > 0:
            avg_size = total_size / total_media
            output.append("## üìä –°–†–ï–î–ù–ò–ô –†–ê–ó–ú–ï–† –§–ê–ô–õ–ê")
            output.append(f"- **–†–∞–∑–º–µ—Ä:** {self.format_size(avg_size)}")
            output.append("")
        
        # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        for line in output:
            print(line)
        
        return output

    def show_largest_files(self, count=10):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã"""
        output = []
        
        output.append(f"## üîù –¢–û–ü {count} –°–ê–ú–´–• –ë–û–õ–¨–®–ò–• –§–ê–ô–õ–û–í")
        output.append("")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
        media_only = [f for f in self.media_files if f['file_type'] in ['video', 'audio']]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
        largest = sorted(media_only, key=lambda x: x['size'], reverse=True)[:count]
        
        output.append("| ‚Ññ | –†–∞–∑–º–µ—Ä | –¢–∏–ø | ID | –ö–æ–º–ø–∞–Ω–∏—è | –û–ø–∏—Å–∞–Ω–∏–µ |")
        output.append("|---|--------|-----|----|---------|---------| ")
        
        for i, file in enumerate(largest, 1):
            company = file.get('company', 'Unknown')
            text_preview = file['text'][:40] + "..." if len(file['text']) > 40 else file['text']
            text_preview = text_preview.replace("|", "\\|").replace("\n", " ")  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã —Ç–∞–±–ª–∏—Ü—ã
            
            output.append(f"| {i} | {self.format_size(file['size'])} | {file['file_type']} | {file['message_id']} | {company} | {text_preview} |")
        
        output.append("")
        
        # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        for line in output:
            print(line)
        
        return output

    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ MD —Ñ–∞–π–ª"""
        report_lines = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_media = self.total_videos + self.total_audio
        total_size = self.total_video_size + self.total_audio_size
        
        # –ü—Ä–∏ —Ç–µ–∫—É—â–µ–π –º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ 200-250 KB/s
        slow_speed_200 = 200 * 1024
        time_200 = total_size / slow_speed_200 if slow_speed_200 > 0 else 0
        
        report_lines.append(f"# –ê–ù–ê–õ–ò–ó –ú–ï–î–ò–ê –§–ê–ô–õ–û–í")
        report_lines.append(f"")
        report_lines.append(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report_lines.append(f"**–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {total_media} (–≤–∏–¥–µ–æ: {self.total_videos}, –∞—É–¥–∏–æ: {self.total_audio})")
        report_lines.append(f"**–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {self.format_size(total_size)}")
        report_lines.append(f"**–í—Ä–µ–º—è —Å–∫–∞—á–∫–∏ (200 KB/s):** {self.format_time(time_200)}")
        report_lines.append("")
        
        # –í–°–ï –ó–ê–ü–ò–°–ò –í –¢–ê–ë–õ–ò–¶–ï
        report_lines.append("## –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –§–ê–ô–õ–û–í")
        report_lines.append("")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
        media_only = [f for f in self.media_files if f['file_type'] in ['video', 'audio']]
        sorted_media = sorted(media_only, key=lambda x: x['size'], reverse=True)
        
        report_lines.append("| ‚Ññ | ID | –¢–∏–ø | –†–∞–∑–º–µ—Ä | –ö–æ–º–ø–∞–Ω–∏—è | –î–∞—Ç–∞ | –û–ø–∏—Å–∞–Ω–∏–µ |")
        report_lines.append("|---|----|----|--------|----------|------|----------|")
        
        for i, file in enumerate(sorted_media, 1):
            company = file.get('company', 'Unknown')
            date_str = file['date'].strftime('%Y-%m-%d') if file['date'] else 'Unknown'
            text_preview = file['text'][:60] + "..." if len(file['text']) > 60 else file['text']
            text_preview = text_preview.replace("|", "\\|").replace("\n", " ").strip()
            
            report_lines.append(f"| {i} | {file['message_id']} | {file['file_type']} | {self.format_size(file['size'])} | {company} | {date_str} | {text_preview} |")
        
        report_lines.append("")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f"media_analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        filepath = Path(filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_lines))
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath.absolute()}")
        return filepath


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = MediaAnalyzer()
    analyzer.start_time = time.time()
    
    try:
        await analyzer.analyze_all_media()
        analyzer.show_statistics()
        analyzer.show_largest_files(15)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_path = analyzer.save_report()
        
        elapsed = time.time() - analyzer.start_time
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analyzer.format_time(elapsed)}")
        
    except KeyboardInterrupt:
        print("\n–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())