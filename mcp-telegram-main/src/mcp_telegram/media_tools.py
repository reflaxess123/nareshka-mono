"""
MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏
"""

import logging
import typing as t

from mcp.types import EmbeddedResource, ImageContent, TextContent

from .media_downloader import download_video_from_message, find_videos_in_dialog, scan_dialog_media
from .robust_tools import RobustToolArgs, robust_tool_runner

logger = logging.getLogger(__name__)

# === –ú–ï–î–ò–ê –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ===

class RobustDownloadVideo(RobustToolArgs):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    dialog_id: int
    message_id: int
    custom_path: str = None

@robust_tool_runner.register
async def robust_download_video(
    args: RobustDownloadVideo,
) -> t.Sequence[TextContent | ImageContent | EmbeddedResource]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    logger.info(f"RobustDownloadVideo: {args}")

    response: list[TextContent] = []

    try:
        result = await download_video_from_message(
            args.dialog_id,
            args.message_id,
            args.custom_path,
        )

        if result.get("success"):
            media_info = result["media_info"]
            file_path = result["file_path"]

            info_text = (
                f"‚úÖ –í–ò–î–ï–û –°–ö–ê–ß–ê–ù–û:\n"
                f"üìÅ –§–∞–π–ª: {file_path}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {media_info['size']} –±–∞–π—Ç\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {media_info['duration']} —Å–µ–∫\n"
                f"üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {media_info['width']}x{media_info['height']}\n"
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {args.message_id}\n"
                f"üó®Ô∏è –î–∏–∞–ª–æ–≥: {args.dialog_id}"
            )
            response.append(TextContent(type="text", text=info_text))
        else:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            response.append(TextContent(type="text", text=error_text))

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {e!s}"
        logger.error(error_msg)
        response.append(TextContent(type="text", text=error_msg))

    return response

class RobustFindVideos(RobustToolArgs):
    """–ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ –¥–∏–∞–ª–æ–≥–µ"""
    dialog_id: int
    limit: int = 5
    min_duration: int = 0

@robust_tool_runner.register
async def robust_find_videos(
    args: RobustFindVideos,
) -> t.Sequence[TextContent | ImageContent | EmbeddedResource]:
    """–ù–∞—Ö–æ–¥–∏—Ç –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
    logger.info(f"RobustFindVideos: {args}")

    response: list[TextContent] = []

    try:
        results = await find_videos_in_dialog(
            args.dialog_id,
            args.limit,
            args.min_duration,
        )

        if not results:
            response.append(TextContent(type="text", text="‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"))
            return response

        response.append(TextContent(type="text", text=f"üé¨ –ù–ê–ô–î–ï–ù–û –ò –°–ö–ê–ß–ê–ù–û {len(results)} –í–ò–î–ï–û:"))

        for i, result in enumerate(results, 1):
            if result.get("success"):
                media_info = result["media_info"]
                file_path = result["file_path"]

                video_text = (
                    f"\nüìπ –í–∏–¥–µ–æ {i}:\n"
                    f"üìÅ {file_path}\n"
                    f"üìä {media_info['size']} –±–∞–π—Ç\n"
                    f"‚è±Ô∏è {media_info['duration']} —Å–µ–∫\n"
                    f"üìê {media_info['width']}x{media_info['height']}\n"
                    f"üí¨ ID: {result['message_id']}"
                )
                response.append(TextContent(type="text", text=video_text))
            else:
                error_text = f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {i}: {result.get('error')}"
                response.append(TextContent(type="text", text=error_text))

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ: {e!s}"
        logger.error(error_msg)
        response.append(TextContent(type="text", text=error_msg))

    return response

class RobustScanMedia(RobustToolArgs):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ"""
    dialog_id: int
    limit: int = 20

@robust_tool_runner.register
async def robust_scan_media(
    args: RobustScanMedia,
) -> t.Sequence[TextContent | ImageContent | EmbeddedResource]:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –≤ –¥–∏–∞–ª–æ–≥–µ"""
    logger.info(f"RobustScanMedia: {args}")

    response: list[TextContent] = []

    try:
        media_list = await scan_dialog_media(args.dialog_id, args.limit)

        if not media_list:
            response.append(TextContent(type="text", text="‚ùå –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"))
            return response

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        media_types = {}
        for media in media_list:
            if media.get("error"):
                continue

            media_type = media["media_info"]["type"]
            if media_type not in media_types:
                media_types[media_type] = []
            media_types[media_type].append(media)

        response.append(TextContent(type="text", text=f"üìÇ –ù–ê–ô–î–ï–ù–û {len(media_list)} –ú–ï–î–ò–ê –§–ê–ô–õ–û–í:"))

        for media_type, files in media_types.items():
            type_emoji = {
                "video": "üé¨",
                "photo": "üñºÔ∏è",
                "audio": "üéµ",
                "document": "üìÑ",
            }

            emoji = type_emoji.get(media_type, "üìÅ")
            response.append(TextContent(type="text", text=f"\n{emoji} {media_type.upper()}: {len(files)} —Ñ–∞–π–ª–æ–≤"))

            for media in files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                media_info = media["media_info"]
                size_mb = media_info["size"] / (1024 * 1024) if media_info["size"] else 0

                details = f"üìä {size_mb:.1f} MB"
                if media_info["duration"]:
                    details += f" ‚è±Ô∏è {media_info['duration']}—Å"
                if media_info["width"] and media_info["height"]:
                    details += f" üìê {media_info['width']}x{media_info['height']}"

                media_text = (
                    f"  üí¨ ID: {media['message_id']} | {details}\n"
                    f"  üí≠ {media['text'][:50]}{'...' if len(media['text']) > 50 else ''}"
                )
                response.append(TextContent(type="text", text=media_text))

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞: {e!s}"
        logger.error(error_msg)
        response.append(TextContent(type="text", text=error_msg))

    return response

# === –û–ë–ù–û–í–õ–Ø–ï–ú –°–ü–ò–°–û–ö –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í ===
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
try:
    from .robust_tools import ROBUST_TOOLS
    ROBUST_TOOLS.extend([
        RobustDownloadVideo,
        RobustFindVideos,
        RobustScanMedia,
    ])
except ImportError:
    pass  # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã
