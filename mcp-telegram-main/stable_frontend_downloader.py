"""
–°–¢–ê–ë–ò–õ–¨–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û –ò–ó –¢–û–ü–ò–ö–ê FRONTEND
–ù–µ–±–æ–ª—å—à–∏–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
"""

import asyncio
import json
import time
from datetime import datetime
from pathlib import Path
from typing import Any

from src.mcp_telegram.robust_client import get_robust_client
from src.mcp_telegram.simple_video_downloader import simple_download_media


class StableFrontendDownloader:
    """–°—Ç–∞–±–∏–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend"""

    def __init__(self, batch_size: int = 5):
        self.dialog_id = -1002208833410  # –û–ú: –ø–∞—Ä–∞–≤–æ–∑–∏–∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
        self.topic_id = 31  # Frontend —Ç–æ–ø–∏–∫
        self.batch_size = batch_size  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        self.output_dir = Path("./frontend_videos_stable")
        self.output_dir.mkdir(exist_ok=True)

        # –§–∞–π–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.metadata_file = self.output_dir / "downloaded_videos.json"
        self.progress_file = self.output_dir / "download_progress.json"
        self.downloaded_ids = set()  # –£–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ ID

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ ID
        self.load_downloaded_ids()

    def load_downloaded_ids(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"""
        if self.metadata_file.exists():
            try:
                with open(self.metadata_file, encoding="utf-8") as f:
                    data = json.load(f)
                    self.downloaded_ids = set(
                        item["message_id"] for item in data
                        if item.get("success", False)
                    )
                print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.downloaded_ids)} —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                self.downloaded_ids = set()

    def save_metadata(self, new_results: list[dict[str, Any]]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º"""
        existing_data = []

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        if self.metadata_file.exists():
            try:
                with open(self.metadata_file, encoding="utf-8") as f:
                    existing_data = json.load(f)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in new_results:
            message_info = result["message_info"]
            message = message_info["message"]

            post_data = {
                "message_id": message.id,
                "date": message.date.isoformat() if message.date else None,
                "text": message_info["text"],
                "sender_id": getattr(message.sender, "id", None) if message.sender else None,
                "sender_username": getattr(message.sender, "username", None) if message.sender else None,
                "media_type": message_info["media_type"],
                "estimated_size": message_info["estimated_size"],
                "success": result["success"],
                "filename": result.get("filename"),
                "file_path": result.get("file_path"),
                "actual_size": result.get("size"),
                "download_time": result.get("download_time"),
                "error": result.get("error"),
                "download_timestamp": datetime.now().isoformat(),
            }

            existing_data.append(post_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(self.metadata_file, "w", encoding="utf-8") as f:
            json.dump(existing_data, f, ensure_ascii=False, indent=2)

    def save_progress(self, current_batch: int, total_batches: int, batch_results: list[dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        successful = sum(1 for r in batch_results if r["success"])
        failed = len(batch_results) - successful

        progress_data = {
            "current_batch": current_batch,
            "total_batches": total_batches,
            "batch_size": self.batch_size,
            "batch_successful": successful,
            "batch_failed": failed,
            "total_downloaded": len(self.downloaded_ids),
            "timestamp": datetime.now().isoformat(),
        }

        with open(self.progress_file, "w", encoding="utf-8") as f:
            json.dump(progress_data, f, ensure_ascii=False, indent=2)

    def format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
        if size_bytes == 0:
            return "0 B"

        for unit in ["B", "KB", "MB", "GB"]:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} TB"

    def format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è"""
        if seconds < 60:
            return f"{seconds:.1f}—Å"
        if seconds < 3600:
            return f"{int(seconds // 60)}–º {int(seconds % 60)}—Å"
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours}—á {minutes}–º"

    def generate_filename(self, message_info: dict[str, Any], index: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤–∏–¥–µ–æ"""
        message = message_info["message"]
        timestamp = message.date.strftime("%Y%m%d_%H%M%S") if message.date else "unknown"
        return f"frontend_{index:04d}_{timestamp}_{message.id}.mp4"

    async def get_messages_batch(self, limit: int = 50) -> list[dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞ Frontend (–ª–∏–º–∏—Ç: {limit})...")

        async with get_robust_client() as client:
            try:
                async def _get_topic_messages(telethon_client, dialog_id, topic_id, limit):
                    messages = []
                    async for message in telethon_client.iter_messages(
                        entity=dialog_id,
                        limit=limit,
                        reply_to=topic_id,
                        reverse=False,
                    ):
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ
                        if message.id in self.downloaded_ids:
                            continue

                        # –¢–æ–ª—å–∫–æ —Å –º–µ–¥–∏–∞
                        if not message.media:
                            continue

                        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                        message_info = {
                            "message": message,
                            "id": message.id,
                            "date": message.date,
                            "text": message.text or "",
                            "has_media": bool(message.media),
                            "media_type": str(type(message.media).__name__) if message.media else None,
                            "estimated_size": 0,
                        }

                        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞
                        if message.media and hasattr(message.media, "document"):
                            if hasattr(message.media.document, "size"):
                                message_info["estimated_size"] = message.media.document.size

                        messages.append(message_info)
                        await asyncio.sleep(0.05)

                    return messages

                messages = await client._execute_with_retry(_get_topic_messages, self.dialog_id, self.topic_id, limit)

                total_size = sum(msg["estimated_size"] for msg in messages)

                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞")
                print(f"üìä –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {self.format_size(total_size)}")

                return messages

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                return []

    async def download_single_video(self, message_info: dict[str, Any], index: int) -> dict[str, Any]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–Ω–æ –≤–∏–¥–µ–æ"""
        message = message_info["message"]
        filename = self.generate_filename(message_info, index)
        file_path = self.output_dir / filename

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if file_path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {filename}")
            return {
                "success": False,
                "error": "–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                "message_info": message_info,
            }

        download_start = time.time()

        try:
            print(f"üé¨ –°–∫–∞—á–∏–≤–∞—é: {filename}")
            preview_text = message_info["text"][:80] + "..." if len(message_info["text"]) > 80 else message_info["text"]
            print(f"   üìÑ {preview_text}")
            print(f"   üìä {self.format_size(message_info['estimated_size'])}")

            # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            result = await asyncio.wait_for(
                simple_download_media(self.dialog_id, message.id, str(file_path)),
                timeout=300,  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )

            download_time = time.time() - download_start

            if result.get("success"):
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                actual_size = file_path.stat().st_size if file_path.exists() else 0
                speed = actual_size / download_time if download_time > 0 else 0

                print(f"   ‚úÖ –°–∫–∞—á–∞–Ω–æ –∑–∞ {self.format_time(download_time)}")
                print(f"   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {self.format_size(speed)}/—Å")
                print(f"   üìÅ –†–∞–∑–º–µ—Ä: {self.format_size(actual_size)}")

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö
                self.downloaded_ids.add(message.id)

                return {
                    "success": True,
                    "filename": filename,
                    "file_path": str(file_path),
                    "size": actual_size,
                    "download_time": download_time,
                    "message_info": message_info,
                }
            error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {error_msg}")
            return {
                "success": False,
                "error": error_msg,
                "message_info": message_info,
            }

        except TimeoutError:
            print("   ‚è∞ –¢–∞–π–º–∞—É—Ç (5 –º–∏–Ω—É—Ç)")
            return {
                "success": False,
                "error": "–¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
                "message_info": message_info,
            }
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return {
                "success": False,
                "error": str(e),
                "message_info": message_info,
            }

    async def download_batch(self, messages: list[dict[str, Any]]) -> list[dict[str, Any]]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
        results = []

        for i, message_info in enumerate(messages):
            result = await self.download_single_video(message_info, i + 1)
            results.append(result)

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
            await asyncio.sleep(1)

        return results

    async def start_download(self, total_limit: int = 50):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏"""
        print("üöÄ –°–¢–ê–ë–ò–õ–¨–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û –ò–ó –¢–û–ü–ò–ö–ê FRONTEND")
        print("=" * 60)

        total_downloaded = 0
        batch_num = 0

        while total_downloaded < total_limit:
            batch_num += 1
            remaining = total_limit - total_downloaded
            batch_limit = min(self.batch_size, remaining)

            print(f"\nüì¶ –ü–ê–ö–ï–¢ {batch_num} (–ª–∏–º–∏—Ç: {batch_limit})")
            print("=" * 40)

            # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = await self.get_messages_batch(batch_limit)

            if not messages:
                print("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                break

            # –°–∫–∞—á–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç
            batch_start = time.time()
            results = await self.download_batch(messages)
            batch_time = time.time() - batch_start

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.save_metadata(results)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–∫–µ—Ç–∞
            successful = sum(1 for r in results if r["success"])
            failed = len(results) - successful
            total_downloaded += successful

            print(f"\nüìä –ü–ê–ö–ï–¢ {batch_num} –ó–ê–í–ï–†–®–ï–ù:")
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
            print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {self.format_time(batch_time)}")
            print(f"   üìà –í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ: {total_downloaded}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.save_progress(batch_num, -1, results)

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            if total_downloaded < total_limit:
                print("‚è∏Ô∏è –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)

        print("\nüèÅ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"   üìä –í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ: {total_downloaded}")
        print(f"   üìÅ –ü–∞–ø–∫–∞: {self.output_dir.absolute()}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé¨ –°–¢–ê–ë–ò–õ–¨–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û –ò–ó –¢–û–ü–ò–ö–ê FRONTEND")
    print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∏–Ω–∞—Ç—å —Å –Ω–µ–±–æ–ª—å—à–∏—Ö –ø–æ—Ä—Ü–∏–π!")

    try:
        batch_size = int(input("–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ") or "5")
        batch_size = max(1, min(batch_size, 10))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 1 –¥–æ 10
    except ValueError:
        batch_size = 5

    try:
        total_limit = int(input("–û–±—â–∏–π –ª–∏–º–∏—Ç –≤–∏–¥–µ–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20): ") or "20")
        total_limit = max(1, min(total_limit, 100))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 1 –¥–æ 100
    except ValueError:
        total_limit = 20

    downloader = StableFrontendDownloader(batch_size=batch_size)
    await downloader.start_download(total_limit)

if __name__ == "__main__":
    asyncio.run(main())
