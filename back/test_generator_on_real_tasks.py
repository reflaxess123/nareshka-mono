#!/usr/bin/env python3
"""
üß™ –°–ö–†–ò–ü–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ì–ï–ù–ï–†–ê–¢–û–†–ê –ù–ê –†–ï–ê–õ–¨–ù–´–• –ó–ê–î–ê–ß–ê–•

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
2. –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –∫–æ–¥–æ–º
3. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ
4. –í—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏ –Ω–µ–¥–æ—á–µ—Ç—ã
5. –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
python test_generator_on_real_tasks.py
"""

import json
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ Python path
sys.path.append(str(Path(__file__).parent))

try:
    from sqlalchemy import and_

    from app.shared.database.connection import get_db
    from app.shared.models.content_models import ContentBlock
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –ø–∞–ø–∫–∏ back/")
    sys.exit(1)


class CodeTemplateTestSuite:
    def __init__(self):
        self.results = {
            "total_tasks": 0,
            "js_tasks": 0,
            "successful": 0,
            "failed": 0,
            "issues": [],
            "statistics": {"languages": {}, "categories": {}, "common_problems": {}},
        }

        # –ü—É—Ç—å –∫ Node.js —Å–∫—Ä–∏–ø—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        self.node_test_script = (
            Path(__file__).parent.parent / "front" / "test_generator.js"
        )

    def create_node_test_script(self):
        """–°–æ–∑–¥–∞–µ—Ç Node.js —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        script_content = """
const fs = require('fs');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (—Å–∏–º—É–ª–∏—Ä—É–µ–º ES6 –∏–º–ø–æ—Ä—Ç)
const codeContent = fs.readFileSync('./src/shared/utils/codeTemplateGenerator.ts', 'utf8');

// –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ (–±–µ–∑ –ø–æ–ª–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript)
eval(`
${codeContent.replace('export class', 'global.CodeTemplateGenerator = class')}
`);

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function testGenerator(sourceCode, language, taskId) {
    try {
        const result = global.CodeTemplateGenerator.generateTemplate(sourceCode, language);

        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —à–∞–±–ª–æ–Ω–∞
        const issues = [];

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—à–Ω–∏–µ —Å–∫–æ–±–∫–∏
        const extraBraces = (result.match(/\\}\\s*\\}/g) || []).length;
        if (extraBraces > 0) {
            issues.push(`Extra closing braces: ${extraBraces}`);
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∏—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        const openBraces = (result.match(/\\{/g) || []).length;
        const closeBraces = (result.match(/\\}/g) || []).length;
        if (openBraces !== closeBraces) {
            issues.push(`Mismatched braces: ${openBraces} open, ${closeBraces} close`);
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã
        if (result.trim().length < 10) {
            issues.push('Template too short, possibly empty');
        }

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏
        if (!result.includes('// Implement') && !result.includes('// Write')) {
            issues.push('No implementation comment found');
        }

        return {
            success: true,
            result: result,
            issues: issues,
            original_length: sourceCode.length,
            template_length: result.length
        };

    } catch (error) {
        return {
            success: false,
            error: error.message,
            issues: [`Generation failed: ${error.message}`]
        };
    }
}

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ stdin –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
const input = JSON.parse(process.argv[2]);
const testResult = testGenerator(input.code, input.language, input.taskId);
console.log(JSON.stringify(testResult));
"""

        with open(self.node_test_script, "w", encoding="utf-8") as f:
            f.write(script_content)

    def test_single_task(self, task):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Node.js —Å–∫—Ä–∏–ø—Ç–∞
            test_data = {
                "code": task.codeContent,
                "language": task.codeLanguage or "javascript",
                "taskId": task.id,
            }

            # –ó–∞–ø—É—Å–∫–∞–µ–º Node.js —Å–∫—Ä–∏–ø—Ç
            result = subprocess.run(
                ["node", str(self.node_test_script)],
                input=json.dumps(test_data),
                capture_output=True,
                text=True,
                cwd=str(self.node_test_script.parent),
                timeout=10,
                check=False,
            )

            if result.returncode != 0:
                return {
                    "success": False,
                    "error": f"Node.js error: {result.stderr}",
                    "issues": ["Script execution failed"],
                }

            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return json.loads(result.stdout)

        except subprocess.TimeoutExpired:
            return {
                "success": False,
                "error": "Test timeout",
                "issues": ["Test execution timeout"],
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "issues": [f"Unexpected error: {str(e)}"],
            }

    def is_js_task(self, task):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ JS/TS/JSX"""
        if not task.codeLanguage and not task.codeContent:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫
        if task.codeLanguage:
            lang = task.codeLanguage.lower()
            if lang in ["javascript", "js", "typescript", "ts", "jsx", "tsx", "react"]:
                return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if task.codeContent:
            js_patterns = [
                "function ",
                "const ",
                "let ",
                "var ",
                "class ",
                "=>",
                "console.log",
                "require(",
                "import ",
                "export ",
                "useState",
                "useEffect",
            ]
            return any(pattern in task.codeContent for pattern in js_patterns)

        return False

    def run_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á–∞—Ö"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö...")

        # –°–æ–∑–¥–∞–µ–º Node.js —Å–∫—Ä–∏–ø—Ç
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...")
        self.create_node_test_script()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        session = next(get_db())

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –∫–æ–¥–æ–º
            tasks = (
                session.query(ContentBlock)
                .filter(
                    and_(
                        ContentBlock.codeContent.isnot(None),
                        ContentBlock.codeContent != "",
                    )
                )
                .all()
            )

            self.results["total_tasks"] = len(tasks)
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á —Å –∫–æ–¥–æ–º: {len(tasks)}")

            # –§–∏–ª—å—Ç—Ä—É–µ–º JS/TS –∑–∞–¥–∞—á–∏
            js_tasks = [task for task in tasks if self.is_js_task(task)]
            self.results["js_tasks"] = len(js_tasks)
            print(f"üü® JS/TS/JSX –∑–∞–¥–∞—á: {len(js_tasks)}")

            if len(js_tasks) == 0:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ JS/TS –∑–∞–¥–∞—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é JS –∑–∞–¥–∞—á—É
            print("\nüß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            for i, task in enumerate(js_tasks, 1):
                print(f"\n--- –ó–∞–¥–∞—á–∞ {i}/{len(js_tasks)} (ID: {task.id}) ---")
                print(f"–Ø–∑—ã–∫: {task.codeLanguage}")
                print(
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task.file.mainCategory if task.file else 'Unknown'}"
                )
                print(f"–î–ª–∏–Ω–∞ –∫–æ–¥–∞: {len(task.codeContent)} —Å–∏–º–≤–æ–ª–æ–≤")

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
                test_result = self.test_single_task(task)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if test_result["success"]:
                    self.results["successful"] += 1
                    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

                    if test_result.get("issues"):
                        print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: {len(test_result['issues'])}")
                        for issue in test_result["issues"]:
                            print(f"   - {issue}")
                else:
                    self.results["failed"] += 1
                    print(f"‚ùå –û—à–∏–±–∫–∞: {test_result.get('error', 'Unknown error')}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
                if test_result.get("issues"):
                    self.results["issues"].append(
                        {
                            "task_id": task.id,
                            "language": task.codeLanguage,
                            "category": task.file.mainCategory
                            if task.file
                            else "Unknown",
                            "issues": test_result["issues"],
                            "original_code_length": len(task.codeContent),
                            "template_length": test_result.get("template_length", 0),
                        }
                    )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —è–∑—ã–∫–∞–º
                lang = task.codeLanguage or "unknown"
                self.results["statistics"]["languages"][lang] = (
                    self.results["statistics"]["languages"].get(lang, 0) + 1
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                category = task.file.mainCategory if task.file else "unknown"
                self.results["statistics"]["categories"][category] = (
                    self.results["statistics"]["categories"].get(category, 0) + 1
                )

                # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
                time.sleep(0.1)

        finally:
            session.close()

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
        if self.node_test_script.exists():
            self.node_test_script.unlink()

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = Path(__file__).parent / f"GENERATOR_TEST_REPORT_{timestamp}.md"

        report = f"""# üß™ –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ì–ï–ù–ï–†–ê–¢–û–†–ê –®–ê–ë–õ–û–ù–û–í

**–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

- **–í—Å–µ–≥–æ –∑–∞–¥–∞—á —Å –∫–æ–¥–æ–º:** {self.results['total_tasks']}
- **JS/TS/JSX –∑–∞–¥–∞—á:** {self.results['js_tasks']}
- **–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {self.results['successful']}
- **–û—à–∏–±–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {self.results['failed']}
- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** {(self.results['successful'] / max(1, self.results['js_tasks']) * 100):.1f}%

## üéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –Ø–ó–´–ö–ê–ú

"""

        for lang, count in sorted(self.results["statistics"]["languages"].items()):
            report += f"- **{lang}:** {count} –∑–∞–¥–∞—á\n"

        report += """

## üìÇ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú

"""

        for category, count in sorted(self.results["statistics"]["categories"].items()):
            report += f"- **{category}:** {count} –∑–∞–¥–∞—á\n"

        report += f"""

## ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´

**–í—Å–µ–≥–æ –∑–∞–¥–∞—á —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏:** {len(self.results['issues'])}

"""

        if self.results["issues"]:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —Ç–∏–ø–∞–º
            problem_types = {}
            for issue_data in self.results["issues"]:
                for issue in issue_data["issues"]:
                    problem_types[issue] = problem_types.get(issue, 0) + 1

            report += "### üî¢ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–±–ª–µ–º:\n\n"
            for problem, count in sorted(
                problem_types.items(), key=lambda x: x[1], reverse=True
            ):
                report += f"- **{problem}:** {count} —Ä–∞–∑\n"

            report += "\n### üìã –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º:\n\n"

            for i, issue_data in enumerate(self.results["issues"], 1):
                report += f"""
#### –ó–∞–¥–∞—á–∞ {i} (ID: {issue_data['task_id']})
- **–Ø–∑—ã–∫:** {issue_data['language']}
- **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {issue_data['category']}
- **–î–ª–∏–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:** {issue_data['original_code_length']} —Å–∏–º–≤–æ–ª–æ–≤
- **–î–ª–∏–Ω–∞ —à–∞–±–ª–æ–Ω–∞:** {issue_data['template_length']} —Å–∏–º–≤–æ–ª–æ–≤
- **–ü—Ä–æ–±–ª–µ–º—ã:**
"""
                for issue in issue_data["issues"]:
                    report += f"  - {issue}\n"
        else:
            report += "‚úÖ **–ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!**\n"

        report += """

## üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

"""

        if self.results["failed"] > 0:
            report += f"### ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ({self.results['failed']} –∑–∞–¥–∞—á)\n"
            report += "- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
            report += "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π\n\n"

        if len(self.results["issues"]) > 0:
            report += f"### ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ ({len(self.results['issues'])} –∑–∞–¥–∞—á)\n"
            report += "- –£–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π\n"
            report += "- –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏\n"
            report += "- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É edge cases\n\n"

        if self.results["successful"] == self.results["js_tasks"]:
            report += "### ‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!\n"
            report += "- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ JS/TS –∑–∞–¥–∞—á–∏\n"
            report += "- –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n\n"

        report += f"""
## üìà –í–´–í–û–î–´

- **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É:** {'‚úÖ –î–∞' if self.results['failed'] == 0 and len(self.results['issues']) < self.results['js_tasks'] * 0.1 else '‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}
- **–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:** {', '.join(list({issue for issue_data in self.results['issues'] for issue in issue_data['issues']})[:3]) if self.results['issues'] else '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã'}
- **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:** {'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ' if self.results['failed'] == 0 else '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º'}

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}*
"""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open(report_file, "w", encoding="utf-8") as f:
            f.write(report)

        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        json_file = report_file.with_suffix(".json")
        with open(json_file, "w", encoding="utf-8") as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)

        print(f"üìä –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {json_file}")


def main():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ì–ï–ù–ï–†–ê–¢–û–†–ê –®–ê–ë–õ–û–ù–û–í")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Node.js
    try:
        subprocess.run(["node", "--version"], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤.")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_suite = CodeTemplateTestSuite()
    test_suite.run_tests()
    test_suite.generate_report()

    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {test_suite.results['successful']}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {test_suite.results['failed']}")
    print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º: {len(test_suite.results['issues'])}")


if __name__ == "__main__":
    main()

