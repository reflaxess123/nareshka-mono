#!/usr/bin/env python3

import psycopg2
from app.config import settings
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü"""
    
    # –ü–∞—Ä—Å–∏–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_url = settings.database_url
    if db_url.startswith("postgres://"):
        db_url = db_url.replace("postgres://", "postgresql://", 1)
    
    logger.info(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_url}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(db_url)
        cursor = conn.cursor()
        
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ö–µ–º
        cursor.execute("""
            SELECT schema_name 
            FROM information_schema.schemata 
            WHERE schema_name NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
            ORDER BY schema_name;
        """)
        
        schemas = cursor.fetchall()
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ö–µ–º: {[s[0] for s in schemas]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤–æ –≤—Å–µ—Ö —Å—Ö–µ–º–∞—Ö
        cursor.execute("""
            SELECT table_schema, table_name 
            FROM information_schema.tables 
            WHERE table_schema NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
            ORDER BY table_schema, table_name;
        """)
        
        all_tables = cursor.fetchall()
        logger.info(f"üìã –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤–æ –≤—Å–µ—Ö —Å—Ö–µ–º–∞—Ö: {len(all_tables)}")
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        tables_with_data = []
        
        for schema, table_name in all_tables:
            try:
                if schema == 'public':
                    query = f'SELECT COUNT(*) FROM "{table_name}"'
                else:
                    query = f'SELECT COUNT(*) FROM "{schema}"."{table_name}"'
                    
                cursor.execute(query)
                count = cursor.fetchone()[0]
                
                full_name = f"{schema}.{table_name}" if schema != 'public' else table_name
                logger.info(f"  üìÑ {full_name} - {count} –∑–∞–ø–∏—Å–µ–π")
                
                if count > 0:
                    tables_with_data.append((full_name, count))
                    
                    # –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä—ã
                    if 'user' in table_name.lower():
                        try:
                            cursor.execute(f'{query.replace("COUNT(*)", "id, email")} LIMIT 3')
                            users = cursor.fetchall()
                            logger.info(f"    üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")
                        except:
                            try:
                                cursor.execute(f'{query.replace("COUNT(*)", "*")} LIMIT 1')
                                sample = cursor.fetchall()
                                logger.info(f"    üìù –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {sample}")
                            except:
                                pass
                    
                    # –ü–æ–∫–∞–∂–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                    cursor.execute("""
                        SELECT column_name, data_type 
                        FROM information_schema.columns 
                        WHERE table_schema = %s AND table_name = %s 
                        ORDER BY ordinal_position
                    """, (schema, table_name))
                    columns = cursor.fetchall()
                    logger.info(f"    üìù –ö–æ–ª–æ–Ω–∫–∏: {[col[0] for col in columns[:10]]}")
                    
            except Exception as e:
                logger.warning(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π {schema}.{table_name}: {e}")
        
        logger.info(f"\nüéØ –¢–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏: {len(tables_with_data)}")
        for table_name, count in tables_with_data:
            logger.info(f"  ‚úÖ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Å–µ–π –±–∞–∑–µ...")
        for schema, table_name in all_tables:
            if 'user' in table_name.lower():
                try:
                    full_table = f'"{schema}"."{table_name}"' if schema != 'public' else f'"{table_name}"'
                    cursor.execute(f'SELECT COUNT(*) FROM {full_table}')
                    count = cursor.fetchone()[0]
                    if count > 0:
                        logger.info(f"  üî• –ù–ê–ô–î–ï–ù–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –≤ {schema}.{table_name}: {count} –∑–∞–ø–∏—Å–µ–π!")
                        cursor.execute(f'SELECT * FROM {full_table} LIMIT 2')
                        users = cursor.fetchall()
                        logger.info(f"    –ü—Ä–∏–º–µ—Ä—ã: {users}")
                except:
                    pass
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    check_database_connection() 