"""
üê≥ –°–µ—Ä–≤–∏—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
"""

import json
import logging
import os
import platform
import re
import tempfile
import time
import uuid
from datetime import datetime
from typing import Any, Dict, List, Optional

import docker
from docker.errors import ContainerError, ImageNotFound

from app.features.code_editor.repositories.code_editor_repository import (
    CodeEditorRepository,
)
from app.shared.models.code_execution_models import CodeExecution, SupportedLanguage
from app.shared.models.enums import CodeLanguage, ExecutionStatus

logger = logging.getLogger(__name__)


# –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –∫ –æ–±—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
def get_shared_exec_dir():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –æ–±—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°"""
    if platform.system() == "Windows":
        # –í Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º C:\temp\nareshka-executions
        base_dir = "C:\\temp\\nareshka-executions"
    else:
        # –í Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º /tmp/nareshka-executions
        base_dir = "/tmp/nareshka-executions"

    os.makedirs(base_dir, exist_ok=True)
    return base_dir


SHARED_EXEC_DIR = get_shared_exec_dir()


class CodeExecutionError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞"""

    pass


class CodeExecutorService:
    """üê≥ –°–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö"""

    def __init__(self, code_editor_repository: CodeEditorRepository):
        self.code_editor_repository = code_editor_repository
        self.docker_client = None
        self.execution_timeout = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.max_memory = "256m"  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å

    def _get_docker_client(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Docker –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.docker_client is None:
            try:
                self.docker_client = docker.from_env()
            except Exception as e:
                # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
                logger.warning(
                    f"Cannot connect to Docker: {str(e)}. Code execution will be disabled."
                )
                raise CodeExecutionError(
                    "Docker service is not available. Please ensure Docker Desktop is running."
                ) from e
        return self.docker_client

    async def execute_code(
        self,
        source_code: str,
        language: SupportedLanguage,
        stdin: Optional[str] = None,
        user_id: Optional[int] = None,
        block_id: Optional[str] = None,
    ) -> CodeExecution:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ

        Args:
            source_code: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            language: –û–±—ä–µ–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
            stdin: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            block_id: ID –±–ª–æ–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            CodeExecution –æ–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        execution_id = str(uuid.uuid4())
        start_time = time.time()

        logger.info(
            f"Starting code execution {execution_id} for language {language.language}"
        )

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç CodeExecution
        execution = CodeExecution(
            id=execution_id,
            userId=user_id,
            blockId=block_id,
            languageId=language.id,
            sourceCode=source_code,
            stdin=stdin,
            status=ExecutionStatus.PENDING,
            stdout=None,
            stderr=None,
            exitCode=None,
            executionTimeMs=None,
            memoryUsedMB=None,
            containerLogs=None,
            errorMessage=None,
            createdAt=datetime.now(),
            completedAt=None,
        )

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            try:
                self._get_docker_client()
            except CodeExecutionError as e:
                execution.status = ExecutionStatus.ERROR
                execution.errorMessage = str(e)
                execution.executionTimeMs = int((time.time() - start_time) * 1000)
                execution.completedAt = datetime.now()
                await self.code_editor_repository.save_execution(execution)
                return execution

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤ –≤ –æ–±—â–µ–º –º–µ—Å—Ç–µ
            with tempfile.TemporaryDirectory(dir=SHARED_EXEC_DIR) as temp_dir:
                # –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö, —á—Ç–æ–±—ã
                # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'nobody' –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø
                os.chmod(temp_dir, 0o777)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –≤ —Ñ–∞–π–ª
                source_file = os.path.join(temp_dir, f"main{language.fileExtension}")
                with open(source_file, "w", encoding="utf-8") as f:
                    f.write(source_code)
                # –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –≤—Å–µ–º
                os.chmod(source_file, 0o666)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                stdin_file = None
                if stdin:
                    stdin_file = os.path.join(temp_dir, "input.txt")
                    with open(stdin_file, "w", encoding="utf-8") as f:
                        f.write(stdin)
                    # –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –≤—Å–µ–º
                    os.chmod(stdin_file, 0o666)

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                result = await self._run_in_container(
                    temp_dir, language, execution_id, stdin_file
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                execution.status = result["status"]
                execution.stdout = result.get("stdout")
                execution.stderr = result.get("stderr")
                execution.exitCode = result.get("exitCode")
                execution.executionTimeMs = int((time.time() - start_time) * 1000)
                execution.memoryUsedMB = result.get("memoryUsedMB")
                execution.containerLogs = result.get("containerLogs")
                execution.errorMessage = result.get("errorMessage")
                execution.completedAt = datetime.now()

                logger.info(
                    f"Code execution {execution_id} completed in {execution.executionTimeMs}ms"
                )

        except Exception as e:
            logger.error(f"Code execution {execution_id} failed: {str(e)}")
            execution.status = ExecutionStatus.ERROR
            execution.errorMessage = str(e)
            execution.executionTimeMs = int((time.time() - start_time) * 1000)
            execution.completedAt = datetime.now()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        await self.code_editor_repository.save_execution(execution)
        return execution

    async def _run_in_container(
        self,
        temp_dir: str,
        language: SupportedLanguage,
        execution_id: str,
        stdin_file: Optional[str] = None,
    ) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–¥ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""

        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            command = self._prepare_command(language, stdin_file)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            container_config = {
                "image": language.dockerImage,
                "command": command,
                "working_dir": "/code",
                "volumes": {temp_dir: {"bind": "/code", "mode": "ro"}},
                "mem_limit": f"{language.memoryLimitMB}m",
                "memswap_limit": f"{language.memoryLimitMB}m",
                "cpu_quota": 50000,  # 50% CPU
                "network_disabled": True,  # –û—Ç–∫–ª—é—á–∞–µ–º —Å–µ—Ç—å
                "read_only": True,  # –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
                "user": "nobody",  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "cap_drop": ["ALL"],  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ capabilities
                "security_opt": ["no-new-privileges"],
                "pids_limit": 50,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                "remove": True,  # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                "detach": False,
                "stdout": True,
                "stderr": True,
            }

            logger.info(
                f"Running container with config: {json.dumps(container_config, indent=2)}"
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            start_time = time.time()
            docker_client = self._get_docker_client()
            container = docker_client.containers.run(**container_config)

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logs = (
                container.decode("utf-8")
                if isinstance(container, bytes)
                else str(container)
            )

            execution_time = int((time.time() - start_time) * 1000)

            return {
                "status": ExecutionStatus.SUCCESS,
                "stdout": logs,
                "stderr": None,
                "exitCode": 0,
                "executionTimeMs": execution_time,
                "containerLogs": f"Container executed successfully in {execution_time}ms",
            }

        except ContainerError as e:
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
            stderr = e.stderr.decode("utf-8") if e.stderr else ""
            stdout = ""

            return {
                "status": ExecutionStatus.ERROR,
                "stdout": stdout,
                "stderr": stderr,
                "exitCode": e.exit_status,
                "errorMessage": f"Runtime error (exit code {e.exit_status})",
                "containerLogs": f"Container error: {str(e)}",
            }

        except ImageNotFound:
            return {
                "status": ExecutionStatus.ERROR,
                "errorMessage": f"Docker image {language.dockerImage} not found",
                "containerLogs": "Docker image not available",
            }

        except Exception as e:
            return {
                "status": ExecutionStatus.ERROR,
                "errorMessage": f"Container execution failed: {str(e)}",
                "containerLogs": f"Unexpected error: {str(e)}",
            }

    def _prepare_command(
        self, language: SupportedLanguage, stdin_file: Optional[str]
    ) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""

        base_command = language.runCommand.replace(
            "{file}", f"main{language.fileExtension}"
        )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–ø–∏–ª—è—Ü–∏—è
        if language.compileCommand:
            compile_cmd = language.compileCommand.replace(
                "{file}", f"main{language.fileExtension}"
            )
            if stdin_file:
                return f"bash -c '{compile_cmd} && {base_command} < input.txt'"
            else:
                return f"bash -c '{compile_cmd} && {base_command}'"
        # –¢–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        elif stdin_file:
            return f"bash -c '{base_command} < input.txt'"
        else:
            return base_command

    def validate_code_safety(self, source_code: str, language: CodeLanguage) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º

        Args:
            source_code: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            language: –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ –∫–æ–¥ –±–µ–∑–æ–ø–∞—Å–µ–Ω, False - –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∞—Å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        """

        # –û–±—â–∏–µ –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        dangerous_patterns = [
            # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            r"\bopen\s*\(",
            r"\bfile\s*\(",
            r"\bwith\s+open",
            r"\.write\s*\(",
            r"\.read\s*\(",
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã
            r"\bos\.",
            r"\bsystem\s*\(",
            r"\bsubprocess\.",
            r"\beval\s*\(",
            r"\bexec\s*\(",
            # –°–µ—Ç—å
            r"\bsocket\.",
            r"\brequests\.",
            r"\burllib\.",
            r"\bhttplib\.",
            # –ò–º–ø–æ—Ä—Ç—ã –æ–ø–∞—Å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            r"import\s+os",
            r"import\s+sys",
            r"import\s+subprocess",
            r"import\s+socket",
            r"from\s+os\s+import",
            r"from\s+sys\s+import",
        ]

        # –Ø–∑—ã–∫–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if language == CodeLanguage.PYTHON:
            dangerous_patterns.extend(
                [
                    r"__import__\s*\(",
                    r"globals\s*\(",
                    r"locals\s*\(",
                    r"vars\s*\(",
                    r"dir\s*\(",
                ]
            )
        elif language == CodeLanguage.JAVASCRIPT:
            dangerous_patterns.extend(
                [
                    r"require\s*\(",
                    r"fs\.",
                    r"process\.",
                    r"child_process",
                ]
            )
        elif language in [CodeLanguage.CPP, CodeLanguage.C]:
            dangerous_patterns.extend(
                [
                    r"#include\s*<fstream>",
                    r"#include\s*<cstdlib>",
                    r"system\s*\(",
                    r"popen\s*\(",
                ]
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for pattern in dangerous_patterns:
            if re.search(pattern, source_code, re.IGNORECASE):
                logger.warning(
                    f"Dangerous code pattern found in user code: '{pattern}'"
                )
                return False

        return True

    async def get_supported_languages(self) -> List[SupportedLanguage]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return await self.code_editor_repository.get_supported_languages()

    async def get_execution_by_id(self, execution_id: str) -> Optional[CodeExecution]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ ID"""
        return await self.code_editor_repository.get_execution_by_id(execution_id)

    async def get_user_executions(
        self,
        user_id: int,
        block_id: Optional[str] = None,
        limit: int = 20,
        offset: int = 0,
    ) -> List[CodeExecution]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.code_editor_repository.get_user_executions(
            user_id, block_id, limit, offset
        )
