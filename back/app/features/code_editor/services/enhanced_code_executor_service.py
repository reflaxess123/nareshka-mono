"""
üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Docker –∏ Judge0
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
"""

import logging
import os
from typing import Optional

from app.features.code_editor.repositories.code_editor_repository import (
    CodeEditorRepository,
)
from app.features.code_editor.services.code_executor_service import CodeExecutorService
# Judge0Service —É–¥–∞–ª–µ–Ω
from app.shared.entities.enums import ExecutionStatus
from app.shared.models.code_execution_models import CodeExecution, SupportedLanguage

logger = logging.getLogger(__name__)


class EnhancedCodeExecutorService:
    """üöÄ –°–µ—Ä–≤–∏—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Docker"""

    def __init__(self, code_editor_repository: CodeEditorRepository):
        self.code_editor_repository = code_editor_repository
        self.docker_service = CodeExecutorService(code_editor_repository)

    async def execute_code(
        self,
        source_code: str,
        language: SupportedLanguage,
        stdin: Optional[str] = None,
        user_id: Optional[int] = None,
        block_id: Optional[str] = None,
    ) -> CodeExecution:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ —á–µ—Ä–µ–∑ Docker

        Args:
            source_code: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            language: –û–±—ä–µ–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
            stdin: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            block_id: ID –±–ª–æ–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            CodeExecution –æ–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        logger.info(
            f"Starting code execution for language {language.language}"
        )

        try:
            return await self.docker_service.execute_code(
                source_code, language, stdin, user_id, block_id
            )
        except Exception as e:
            logger.error(f"Code execution failed: {str(e)}")
            return self._create_error_execution(
                source_code, language, stdin, user_id, block_id, str(e)
            )


    def _create_error_execution(
        self,
        source_code: str,
        language: SupportedLanguage,
        stdin: Optional[str] = None,
        user_id: Optional[int] = None,
        block_id: Optional[str] = None,
        error_message: str = "Execution failed",
    ) -> CodeExecution:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç CodeExecution —Å –æ—à–∏–±–∫–æ–π"""
        import uuid
        from datetime import datetime

        execution = CodeExecution()
        execution.id = str(uuid.uuid4())
        execution.userId = user_id
        execution.blockId = block_id
        execution.languageId = language.id
        execution.sourceCode = source_code
        execution.stdin = stdin
        execution.status = ExecutionStatus.ERROR
        execution.stdout = None
        execution.stderr = None
        execution.exitCode = 1
        execution.executionTimeMs = 0
        execution.memoryUsedMB = None
        execution.containerLogs = None
        execution.errorMessage = error_message
        execution.createdAt = datetime.now()
        execution.completedAt = datetime.now()

        return execution

    async def get_supported_languages(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤"""
        return await self.docker_service.get_supported_languages()

    async def get_execution_by_id(self, execution_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ ID"""
        return await self.docker_service.get_execution_by_id(execution_id)

    async def get_user_executions(
        self,
        user_id: int,
        block_id: Optional[str] = None,
        limit: int = 20,
        offset: int = 0,
    ):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.docker_service.get_user_executions(
            user_id, block_id, limit, offset
        )

    def validate_code_safety(self, source_code: str, language):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞"""
        return self.docker_service.validate_code_safety(source_code, language)

    def get_execution_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return {
            "execution_method": "docker_only",
            "supported_languages_count": 0,  # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ docker_service
        }
