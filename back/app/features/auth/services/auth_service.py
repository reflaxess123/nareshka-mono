"""–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""

import uuid
from datetime import datetime, timedelta
from typing import Optional

import redis
from fastapi import HTTPException, status
from jose import JWTError, jwt
from passlib.context import CryptContext

from app.features.auth.dto.auth_dto import (
    LoginRequest,
    LoginResponse,
    RegisterRequest,
    RegisterResponse,
    TokenData,
    UserResponse,
)
from app.config.settings import settings
from app.core.exceptions import GracefulDegradation
from app.core.logging import get_logger
from app.features.auth.repositories.user_repository import UserRepository
from app.shared.models.enums import UserRole
from app.shared.models.user_models import User

logger = get_logger(__name__)


class AuthService:
    """–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""

    def __init__(self, user_repository: UserRepository):
        self.user_repository = user_repository
        self.pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
        self.redis_client = redis.from_url(
            "redis://127.0.0.1:6379/0", decode_responses=True
        )

    def verify_password(self, plain_password: str, hashed_password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
        return self.pwd_context.verify(plain_password, hashed_password)

    def get_password_hash(self, password: str) -> str:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
        return self.pwd_context.hash(password)

    def create_access_token(
        self, data: dict, expires_delta: Optional[timedelta] = None
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞"""
        to_encode = data.copy()
        if expires_delta:
            expire = datetime.utcnow() + expires_delta
        else:
            expire = datetime.utcnow() + timedelta(
                minutes=settings.access_token_expire_minutes
            )

        to_encode.update({"exp": expire})
        encoded_jwt = jwt.encode(
            to_encode,
            settings.secret_key,
            algorithm=settings.algorithm,
        )
        return encoded_jwt

    def verify_token(self, token: str) -> TokenData:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞"""
        credentials_exception = HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Could not validate credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )

        try:
            payload = jwt.decode(
                token,
                settings.secret_key,
                algorithms=[settings.algorithm],
            )
            email: str = payload.get("sub")
            user_id: int = payload.get("user_id")
            if email is None:
                raise credentials_exception
            return TokenData(email=email, user_id=user_id)
        except JWTError as e:
            raise credentials_exception from e

    async def authenticate_user(self, email: str, password: str) -> Optional[User]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        import time
        
        start_db = time.time()
        user = await self.user_repository.get_by_email(email)
        db_time = time.time() - start_db
        logger.info(f"üîç GET_BY_EMAIL took {db_time:.3f}s")
        
        if not user:
            return None
            
        start_pwd = time.time()
        pwd_valid = self.verify_password(password, user.password)
        pwd_time = time.time() - start_pwd
        logger.info(f"üîç VERIFY_PASSWORD took {pwd_time:.3f}s")
        
        if not pwd_valid:
            return None
        return user

    async def login(self, login_request: LoginRequest) -> LoginResponse:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        import time
        logger.info(f"üîç LOGIN START for {login_request.email}")
        
        start_time = time.time()
        user = await self.authenticate_user(login_request.email, login_request.password)
        auth_time = time.time() - start_time
        logger.info(f"üîç AUTHENTICATE_USER took {auth_time:.3f}s")
        
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Incorrect email or password",
            )

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤–º–µ—Å—Ç–æ JWT —Ç–æ–∫–µ–Ω–∞
        session_id = str(uuid.uuid4())
        
        start_session = time.time()
        self.create_session(user.id, session_id)
        session_time = time.time() - start_session
        logger.info(f"üîç CREATE_SESSION took {session_time:.3f}s")
        
        start_response = time.time()
        response = LoginResponse(
            access_token="session_based",  # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å DTO
            token_type="session",
            user=UserResponse.model_validate(user),
            session_id=session_id,  # –î–æ–±–∞–≤–ª—è–µ–º session_id –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookie
        )
        response_time = time.time() - start_response
        logger.info(f"üîç CREATE_RESPONSE took {response_time:.3f}s")
        
        logger.info(f"üîç LOGIN COMPLETE for {login_request.email}")
        return response

    async def register(self, register_request: RegisterRequest) -> RegisterResponse:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if await self.user_repository.email_exists(register_request.email):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Email already registered",
            )

        hashed_password = self.get_password_hash(register_request.password)

        new_user = User(
            email=register_request.email,
            password=hashed_password,
            role=UserRole.USER,
            totalTasksSolved=0,
            lastActivityDate=None,
        )

        created_user = await self.user_repository.create(new_user)

        return RegisterResponse(
            user=UserResponse.model_validate(created_user),
            message="User registered successfully",
        )

    def create_session(self, user_id: int, session_id: str) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ Redis"""
        try:
            session_key = f"session:{session_id}"
            self.redis_client.setex(
                session_key,
                timedelta(days=settings.refresh_token_expire_days),
                str(user_id),
            )
        except Exception as e:
            GracefulDegradation.handle_redis_error("create_session", e)
            # Graceful degradation - —Å–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞—Å—Ç—Å—è, –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–ø–∞–¥–µ—Ç

    def get_session_user_id(self, session_id: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏"""
        try:
            session_key = f"session:{session_id}"
            user_id = self.redis_client.get(session_key)
            return int(user_id) if user_id else None
        except Exception as e:
            return GracefulDegradation.handle_redis_error(
                "get_session_user_id", e, None
            )

    def delete_session(self, session_id: str) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            session_key = f"session:{session_id}"
            self.redis_client.delete(session_key)
        except Exception as e:
            GracefulDegradation.handle_redis_error("delete_session", e)
            # Graceful degradation - —Å–µ—Å—Å–∏—è –Ω–µ —É–¥–∞–ª–∏—Ç—Å—è, –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–ø–∞–¥–µ—Ç

    async def get_user_by_token(self, token: str) -> User:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É"""
        token_data = self.verify_token(token)
        user = await self.user_repository.get_by_email(token_data.email)
        if user is None:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED, detail="User not found"
            )
        return user

    async def get_user_by_session(self, request) -> User:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–µ—Å—Å–∏–∏"""
        session_id = request.cookies.get("session_id")
        logger.info(f"üîç DEBUG: get_user_by_session called", extra={
            "has_session_id": session_id is not None,
            "session_id_prefix": session_id[:10] + "..." if session_id else None
        })
        
        if not session_id:
            logger.info(f"üîç DEBUG: No session_id cookie found")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED, detail="Not authenticated"
            )

        user_id = self.get_session_user_id(session_id)
        logger.info(f"üîç DEBUG: Session lookup result", extra={
            "session_id_prefix": session_id[:10] + "...",
            "user_id": user_id
        })
        
        if not user_id:
            logger.info(f"üîç DEBUG: Session expired or not found in Redis")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED, detail="Session expired"
            )

        user = await self.user_repository.get_by_id(user_id)
        if not user:
            logger.info(f"üîç DEBUG: User not found in database", extra={
                "user_id": user_id
            })
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED, detail="User not found"
            )
            
        logger.info(f"üîç DEBUG: User successfully retrieved from session", extra={
            "user_id": user.id,
            "user_email": user.email
        })
        return user 


