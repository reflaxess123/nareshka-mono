"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è auth –º–æ–¥—É–ª—è
"""

from unittest.mock import MagicMock
import pytest

from app.features.auth.dto.auth_dto import LoginRequest, RegisterRequest, UserResponse
from app.features.auth.services.auth_service import AuthService
from app.features.auth.repositories.sqlalchemy_user_repository import SQLAlchemyUserRepository
from app.shared.models.user_models import User
from app.shared.models.enums import UserRole


class TestAuthIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã auth –º–æ–¥—É–ª—è"""

    def test_auth_service_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è AuthService"""
        mock_repository = MagicMock()
        service = AuthService(mock_repository)
        
        assert service is not None
        assert service.user_repository == mock_repository
        assert service.pwd_context is not None
        assert service.redis_client is not None

    def test_user_repository_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è SQLAlchemyUserRepository"""
        repository = SQLAlchemyUserRepository()
        assert repository is not None

    def test_password_hashing(self):
        """–¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π"""
        mock_repository = MagicMock()
        service = AuthService(mock_repository)

        password = "test_password_123"
        hashed = service.get_password_hash(password)

        assert hashed != password
        assert len(hashed) > 20
        assert service.verify_password(password, hashed) == True
        assert service.verify_password("wrong_password", hashed) == False

    def test_login_request_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ LoginRequest"""
        # –í–∞–ª–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞
        login_request = LoginRequest(
            email="test@example.com",
            password="SecurePass123!"
        )

        assert login_request.email == "test@example.com"
        assert login_request.password == "SecurePass123!"

    def test_register_request_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ RegisterRequest"""
        # –í–∞–ª–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        register_request = RegisterRequest(
            email="newuser@example.com",
            password="SecurePass123!"
        )

        assert register_request.email == "newuser@example.com"
        assert register_request.password == "SecurePass123!"

    def test_user_response_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è UserResponse –∏–∑ User –º–æ–¥–µ–ª–∏"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ User –æ–±—ä–µ–∫—Ç
        mock_user = MagicMock()
        mock_user.id = 1
        mock_user.email = "test@example.com"
        mock_user.role = UserRole.USER
        mock_user.totalTasksSolved = 5
        mock_user.lastActivityDate = None
        mock_user.createdAt = "2024-01-01T00:00:00Z"
        mock_user.updatedAt = "2024-01-01T00:00:00Z"

        # –ú–æ–∫–∞–µ–º hasattr –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        def mock_hasattr(obj, attr):
            return attr in ['username', 'first_name', 'last_name', 'full_name', 
                          'display_name', 'is_active', 'is_verified', 'updatedAt']
        
        # –ú–æ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        mock_user.username = None
        mock_user.first_name = None
        mock_user.last_name = None
        mock_user.full_name = None
        mock_user.display_name = "test"
        mock_user.is_active = True
        mock_user.is_verified = True

        # –ü–∞—Ç—á–∏–º hasattr
        import builtins
        original_hasattr = builtins.hasattr
        builtins.hasattr = mock_hasattr

        try:
            user_response = UserResponse.from_user(mock_user)
            
            assert user_response.id == 1
            assert user_response.email == "test@example.com"
            assert user_response.role == UserRole.USER
            assert user_response.totalTasksSolved == 5
            assert user_response.display_name == "test"
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π hasattr
            builtins.hasattr = original_hasattr

    def test_session_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ—Å—Å–∏—è–º–∏"""
        mock_repository = MagicMock()
        service = AuthService(mock_repository)

        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        try:
            service.create_session(user_id=123, session_id="test-session-id")
            # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ graceful degradation
        except Exception as e:
            # –û–∂–∏–¥–∞–µ–º —Ç–æ–ª—å–∫–æ Redis-related –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ç–µ—Å—Ç–∞—Ö
            assert "redis" in str(e).lower()

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è user_id –∏–∑ —Å–µ—Å—Å–∏–∏
        user_id = service.get_session_user_id("nonexistent-session")
        # –ü—Ä–∏ graceful degradation –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å None
        assert user_id is None

        # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        try:
            service.delete_session("test-session-id")
            # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ graceful degradation
        except Exception as e:
            # –û–∂–∏–¥–∞–µ–º —Ç–æ–ª—å–∫–æ Redis-related –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ç–µ—Å—Ç–∞—Ö
            assert "redis" in str(e).lower()


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test = TestAuthIntegration()

    print("üß™ Running auth integration tests...")

    try:
        test.test_auth_service_creation()
        print("‚úÖ Auth service creation")

        test.test_user_repository_creation()
        print("‚úÖ User repository creation")

        test.test_password_hashing()
        print("‚úÖ Password hashing")

        test.test_login_request_validation()
        print("‚úÖ Login request validation")

        test.test_register_request_validation()
        print("‚úÖ Register request validation")

        test.test_user_response_creation()
        print("‚úÖ User response creation")

        test.test_session_operations()
        print("‚úÖ Session operations")

        print("\nüéâ All auth tests passed!")

    except Exception as e:
        print(f"\n‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()