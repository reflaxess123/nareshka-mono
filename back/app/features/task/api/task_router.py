"""API —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏"""

import logging
from typing import List, Optional

from fastapi import APIRouter, Depends, HTTPException, Query, status, Request
from sqlalchemy.orm import Session

from app.features.task.services.task_service import TaskService
from app.shared.database import get_session
from app.features.task.dto.requests import TaskAttemptCreateRequest, TaskSolutionCreateRequest
from app.features.task.dto.responses import (
    TasksListResponse,
    TaskCategoriesResponse,
    TaskCompaniesResponse,
    TaskAttemptResponse,
    TaskSolutionResponse,
)
from app.shared.dependencies import (
    get_current_user_optional,
    get_current_user_required,
)

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/tasks", tags=["Tasks"])


def get_task_service(db: Session = Depends(get_session)) -> TaskService:
    """–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ task"""
    from app.features.task.repositories.task_repository import TaskRepository
    task_repository = TaskRepository(db)
    return TaskService(task_repository)


@router.get("/items", response_model=TasksListResponse)
async def get_task_items(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º request –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    limit: int = Query(
        10, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
    ),
    mainCategories: List[str] = Query(
        [], description="–§–∏–ª—å—Ç—Ä –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)"
    ),
    subCategories: List[str] = Query([], description="–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)"),
    q: Optional[str] = Query(None, description="–ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫"),
    sortBy: str = Query("orderInFile", description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
    sortOrder: str = Query("asc", description="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
    itemType: Optional[str] = Query(
        None, description="–¢–∏–ø: content_block, theory_quiz –∏–ª–∏ all"
    ),
    onlyUnsolved: Optional[bool] = Query(None, description="–¢–æ–ª—å–∫–æ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–µ"),
    companies: Optional[str] = Query(
        None, description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, deprecated)"
    ),
    companiesList: List[str] = Query(
        [], description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)"
    ),
    current_user=Depends(get_current_user_optional),
    task_service: TaskService = Depends(get_task_service),
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (content blocks + quiz –∫–∞—Ä—Ç–æ—á–∫–∏)"""
    user_id = current_user.id if current_user else None
    
    # üîç ENHANCED DEBUG LOGGING
    session_id = request.cookies.get("session_id")
    logger.info(f"üîç DEBUG: get_task_items called", extra={
        "current_user": current_user is not None,
        "user_id": user_id,
        "user_email": current_user.email if current_user else None,
        "session_id": session_id[:10] + "..." if session_id else None,
        "cookies": dict(request.cookies),
        "page": page,
        "limit": limit
    })

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º companies –∏ companiesList
    final_companies = list(companiesList) if companiesList else []
    if companies:
        company_list = [c.strip() for c in companies.split(",") if c.strip()]
        for company in company_list:
            if company not in final_companies:
                final_companies.append(company)

    result = await task_service.get_tasks(
        page=page,
        limit=limit,
        main_categories=mainCategories if mainCategories else None,
        sub_categories=subCategories if subCategories else None,
        search_query=q,
        sort_by=sortBy,
        sort_order=sortOrder,
        item_type=itemType,
        only_unsolved=onlyUnsolved,
        companies=final_companies if final_companies else None,
        user_id=user_id,
    )
    
    # üîç DEBUG: Log result details
    if result.data:
        sample_tasks = result.data[:3]  # First 3 tasks
        logger.info(f"üîç DEBUG: Returning {len(result.data)} tasks", extra={
            "user_id": user_id,
            "sample_progress": [
                {
                    "task_id": task.id[:10] + "...",
                    "title": task.title[:20] + "...",
                    "currentUserSolvedCount": task.currentUserSolvedCount
                }
                for task in sample_tasks
            ]
        })
    
    return result


@router.get("/categories", response_model=TaskCategoriesResponse)
async def get_task_categories(task_service: TaskService = Depends(get_task_service)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞–Ω–∏–π —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    return await task_service.get_task_categories()


@router.get("/companies", response_model=TaskCompaniesResponse)
async def get_companies(
    mainCategories: List[str] = Query([], description="–§–∏–ª—å—Ç—Ä –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"),
    subCategories: List[str] = Query([], description="–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"),
    task_service: TaskService = Depends(get_task_service),
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –∑–∞–¥–∞–Ω–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
    return await task_service.get_task_companies(
        main_categories=mainCategories if mainCategories else None,
        sub_categories=subCategories if subCategories else None,
    )


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏

@router.post("/attempts", response_model=TaskAttemptResponse)
async def create_task_attempt(
    request: TaskAttemptCreateRequest,
    current_user=Depends(get_current_user_required),
    task_service: TaskService = Depends(get_task_service),
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        return await task_service.create_task_attempt(current_user.id, request)
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏: {str(e)}",
        )


@router.post("/solutions", response_model=TaskSolutionResponse)
async def create_task_solution(
    request: TaskSolutionCreateRequest,
    current_user=Depends(get_current_user_required),
    task_service: TaskService = Depends(get_task_service),
):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        return await task_service.create_task_solution(current_user.id, request)
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è: {str(e)}",
        )


@router.get("/attempts", response_model=List[TaskAttemptResponse])
async def get_user_task_attempts(
    blockId: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ ID –±–ª–æ–∫–∞"),
    current_user=Depends(get_current_user_required),
    task_service: TaskService = Depends(get_task_service),
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await task_service.get_user_task_attempts(current_user.id, blockId)


@router.get("/solutions", response_model=List[TaskSolutionResponse])
async def get_user_task_solutions(
    blockId: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ ID –±–ª–æ–∫–∞"),
    current_user=Depends(get_current_user_required),
    task_service: TaskService = Depends(get_task_service),
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await task_service.get_user_task_solutions(current_user.id, blockId) 


