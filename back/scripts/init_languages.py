#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import uuid

from sqlalchemy.orm import Session

from app.features.code_editor.models.code_execution_models import SupportedLanguage
from app.shared.database.connection import engine
from app.shared.models.enums import CodeLanguage

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
SUPPORTED_LANGUAGES = [
    {
        "id": str(uuid.uuid4()),
        "name": "Python 3.9",
        "language": CodeLanguage.PYTHON,
        "version": "3.9",
        "dockerImage": "python:3.9-alpine",
        "fileExtension": ".py",
        "compileCommand": None,
        "runCommand": "python main.py",
        "timeoutSeconds": 10,
        "memoryLimitMB": 128,
        "isEnabled": True,
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Node.js 18",
        "language": CodeLanguage.JAVASCRIPT,
        "version": "18",
        "dockerImage": "node:18-alpine",
        "fileExtension": ".js",
        "compileCommand": None,
        "runCommand": "node main.js",
        "timeoutSeconds": 10,
        "memoryLimitMB": 128,
        "isEnabled": True,
    },
    {
        "id": str(uuid.uuid4()),
        "name": "TypeScript 5.0",
        "language": CodeLanguage.TYPESCRIPT,
        "version": "5.0",
        "dockerImage": "node:18-alpine",
        "fileExtension": ".ts",
        "compileCommand": "npx tsc main.ts --target es2020 --module commonjs",
        "runCommand": "node main.js",
        "timeoutSeconds": 15,
        "memoryLimitMB": 256,
        "isEnabled": True,
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Java 17",
        "language": CodeLanguage.JAVA,
        "version": "17",
        "dockerImage": "openjdk:17-alpine",
        "fileExtension": ".java",
        "compileCommand": "javac Main.java",
        "runCommand": "java Main",
        "timeoutSeconds": 15,
        "memoryLimitMB": 256,
        "isEnabled": True,
    },
    {
        "id": str(uuid.uuid4()),
        "name": "C++ (GCC 11)",
        "language": CodeLanguage.CPP,
        "version": "11",
        "dockerImage": "gcc:11-alpine",
        "fileExtension": ".cpp",
        "compileCommand": "g++ -o main main.cpp -std=c++17",
        "runCommand": "./main",
        "timeoutSeconds": 10,
        "memoryLimitMB": 128,
        "isEnabled": True,
    },
    {
        "id": str(uuid.uuid4()),
        "name": "C (GCC 11)",
        "language": CodeLanguage.C,
        "version": "11",
        "dockerImage": "gcc:11-alpine",
        "fileExtension": ".c",
        "compileCommand": "gcc -o main main.c -std=c99",
        "runCommand": "./main",
        "timeoutSeconds": 10,
        "memoryLimitMB": 128,
        "isEnabled": True,
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Go 1.21",
        "language": CodeLanguage.GO,
        "version": "1.21",
        "dockerImage": "golang:1.21-alpine",
        "fileExtension": ".go",
        "compileCommand": None,
        "runCommand": "go run main.go",
        "timeoutSeconds": 10,
        "memoryLimitMB": 128,
        "isEnabled": True,
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Rust 1.70",
        "language": CodeLanguage.RUST,
        "version": "1.70",
        "dockerImage": "rust:1.70-alpine",
        "fileExtension": ".rs",
        "compileCommand": "rustc main.rs -o main",
        "runCommand": "./main",
        "timeoutSeconds": 15,
        "memoryLimitMB": 256,
        "isEnabled": True,
    },
    {
        "id": str(uuid.uuid4()),
        "name": "PHP 8.2",
        "language": CodeLanguage.PHP,
        "version": "8.2",
        "dockerImage": "php:8.2-alpine",
        "fileExtension": ".php",
        "compileCommand": None,
        "runCommand": "php main.php",
        "timeoutSeconds": 10,
        "memoryLimitMB": 128,
        "isEnabled": True,
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Ruby 3.2",
        "language": CodeLanguage.RUBY,
        "version": "3.2",
        "dockerImage": "ruby:3.2-alpine",
        "fileExtension": ".rb",
        "compileCommand": None,
        "runCommand": "ruby main.rb",
        "timeoutSeconds": 10,
        "memoryLimitMB": 128,
        "isEnabled": True,
    },
]


def init_languages():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with Session(engine) as db:
        try:
            print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —è–∑—ã–∫–∏ –≤ –ë–î
            existing_languages = db.query(SupportedLanguage).all()
            if existing_languages:
                print(
                    f"‚ÑπÔ∏è  –ù–∞–π–¥–µ–Ω–æ {len(existing_languages)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —è–∑—ã–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                )

                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å
                response = input(
                    "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ? (y/N): "
                ).lower()
                if response != "y":
                    print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    return

                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —è–∑—ã–∫–∏
                db.query(SupportedLanguage).delete()
                print("üóëÔ∏è  –£–¥–∞–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —è–∑—ã–∫–∏")

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —è–∑—ã–∫–∏
            languages_added = 0
            for lang_config in SUPPORTED_LANGUAGES:
                language = SupportedLanguage(**lang_config)
                db.add(language)
                languages_added += 1
                print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω: {lang_config['name']} ({lang_config['language']})")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.commit()

            print(
                f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {languages_added} —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!"
            )
            print("\nüìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —è–∑—ã–∫–∏:")

            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤
            for lang in SUPPORTED_LANGUAGES:
                status = "üü¢" if lang["isEnabled"] else "üî¥"
                print(f"  {status} {lang['name']} v{lang['version']}")
                print(f"     Docker: {lang['dockerImage']}")
                print(
                    f"     Timeout: {lang['timeoutSeconds']}s, Memory: {lang['memoryLimitMB']}MB"
                )
                print()

            print(
                "üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞."
            )

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–∑—ã–∫–æ–≤: {e}")
            db.rollback()
            sys.exit(1)


def update_language_config(language_name: str, **updates):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞"""

    with Session(engine) as db:
        try:
            language = (
                db.query(SupportedLanguage)
                .filter(SupportedLanguage.name == language_name)
                .first()
            )

            if not language:
                print(f"‚ùå –Ø–∑—ã–∫ '{language_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            for key, value in updates.items():
                if hasattr(language, key):
                    setattr(language, key, value)
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {key}: {value}")
                else:
                    print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ: {key}")

            db.commit()
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —è–∑—ã–∫–∞ '{language_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {e}")
            db.rollback()


def list_languages():
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""

    with Session(engine) as db:
        languages = db.query(SupportedLanguage).all()

        if not languages:
            print("üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤")
            return

        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(languages)} —è–∑—ã–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n")

        for lang in languages:
            status = "üü¢" if lang.isEnabled else "üî¥"
            print(f"{status} {lang.name} v{lang.version}")
            print(f"   ID: {lang.id}")
            print(f"   –Ø–∑—ã–∫: {lang.language}")
            print(f"   Docker: {lang.dockerImage}")
            print(f"   –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {lang.fileExtension}")
            if lang.compileCommand:
                print(f"   –ö–æ–º–ø–∏–ª—è—Ü–∏—è: {lang.compileCommand}")
            print(f"   –ó–∞–ø—É—Å–∫: {lang.runCommand}")
            print(f"   –õ–∏–º–∏—Ç—ã: {lang.timeoutSeconds}s, {lang.memoryLimitMB}MB")
            print(f"   –°–æ–∑–¥–∞–Ω: {lang.createdAt}")
            print()


def toggle_language(language_name: str):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞"""

    with Session(engine) as db:
        language = (
            db.query(SupportedLanguage)
            .filter(SupportedLanguage.name == language_name)
            .first()
        )

        if not language:
            print(f"‚ùå –Ø–∑—ã–∫ '{language_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        language.isEnabled = not language.isEnabled
        status = "–≤–∫–ª—é—á–µ–Ω" if language.isEnabled else "–≤—ã–∫–ª—é—á–µ–Ω"
        emoji = "üü¢" if language.isEnabled else "üî¥"

        db.commit()
        print(f"{emoji} –Ø–∑—ã–∫ '{language_name}' {status}")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(
            "  python init_languages.py init                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–æ–≤"
        )
        print("  python init_languages.py list                    # –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤")
        print(
            "  python init_languages.py toggle <name>           # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫"
        )
        print(
            "  python init_languages.py update <name> key=value # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        )
        sys.exit(1)

    command = sys.argv[1]

    if command == "init":
        init_languages()
    elif command == "list":
        list_languages()
    elif command == "toggle" and len(sys.argv) >= 3:
        toggle_language(sys.argv[2])
    elif command == "update" and len(sys.argv) >= 4:
        language_name = sys.argv[2]
        updates = {}
        for arg in sys.argv[3:]:
            if "=" in arg:
                key, value = arg.split("=", 1)
                # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–∏–ø—ã
                if value.lower() == "true":
                    value = True
                elif value.lower() == "false":
                    value = False
                elif value.isdigit():
                    value = int(value)
                updates[key] = value

        if updates:
            update_language_config(language_name, **updates)
        else:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        sys.exit(1)
