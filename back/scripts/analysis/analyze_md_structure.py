import re
import os

def analyze_md_files():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã .md —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π"""
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    md_files = [
        '../react/–†–µ–∞–∫—Ç –ú–∏–Ω–∏ –ê–ø–ø.md',
        '../react/–†–µ–∞–∫—Ç –†–µ—Ä–µ–Ω–¥–µ—Ä.md', 
        '../react/–†–µ–∞–∫—Ç –†–µ—Ñ–∞–∫—Ç–æ—Ä.md',
        '../react/–†–µ–∞–∫—Ç –•—É–∫–∏.md',
        '../js/–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏/–º–∞—Å—Å–∏–≤—ã.md',
        '../js/–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏/–ø—Ä–æ–º–∏—Å—ã.md',
        '../js/–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏/—Å—Ç—Ä–æ–∫–∏.md',
        '../js/–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏/—á–∏—Å–ª–∞.md'
    ]
    
    print("=== –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ .MD –§–ê–ô–õ–û–í ===\n")
    
    for file_path in md_files:
        if not os.path.exists(file_path):
            continue
            
        print(f"üìÅ –§–∞–π–ª: {file_path}")
        print("-" * 50)
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # 1. –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–¥–∞—á
        task_headers = re.findall(r'^#+\s*(.+)$', content, re.MULTILINE)
        print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–¥–∞—á ({len(task_headers)}):")
        for i, header in enumerate(task_headers[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   {i+1}. {header.strip()}")
        if len(task_headers) > 10:
            print(f"   ... –∏ –µ—â–µ {len(task_headers) - 10} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
        
        # 2. –ò—â–µ–º –±–ª–æ–∫–∏ "–≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –≤"
        company_blocks = re.findall(
            r'–≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –≤.*?(?=\n\S|\n#+|\n```|\Z)', 
            content, 
            re.IGNORECASE | re.DOTALL
        )
        print(f"\nüìã –ë–ª–æ–∫–∏ '–≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –≤' ({len(company_blocks)}):")
        for i, block in enumerate(company_blocks):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±–ª–æ–∫–∞
            companies = []
            lines = block.split('\n')
            for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É "–≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –≤"
                line = line.strip()
                if line.startswith('-') or line.startswith('\t-'):
                    company = re.sub(r'^[\t\s]*-\s*', '', line).strip()
                    if company:
                        companies.append(company)
            
            print(f"   –ë–ª–æ–∫ {i+1}: {companies}")
        
        # 3. –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö (–∫–∞–∫ –≤ –†–µ–∞–∫—Ç –†–µ—Ä–µ–Ω–¥–µ—Ä.md)
        section_companies = []
        lines = content.split('\n')
        for line in lines:
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è 1-3, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–π
            match = re.match(r'^#{1,3}\s*(.+)$', line)
            if match:
                header_text = match.group(1).strip()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
                if (len(header_text) < 30 and 
                    not header_text.lower().startswith(('–∑–∞–¥–∞—á', 'example', '–ø—Ä–∏–º–µ—Ä', 'counter', 'todo'))):
                    section_companies.append(header_text)
        
        print(f"\nüè¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö ({len(section_companies)}):")
        for company in section_companies[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
            print(f"   - {company}")
        
        # 4. –ò—â–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏ (### —Ä–æ—Å–±–∞–Ω–∫)
        subsection_companies = re.findall(r'^###\s*(.+)$', content, re.MULTILINE)
        print(f"\nüè™ –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è 3 ({len(subsection_companies)}):")
        for company in subsection_companies[:10]:
            print(f"   - {company}")
        
        print("\n" + "="*70 + "\n")

if __name__ == "__main__":
    analyze_md_files() 