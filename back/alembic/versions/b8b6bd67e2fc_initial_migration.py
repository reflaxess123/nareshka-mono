"""Initial migration

Revision ID: b8b6bd67e2fc
Revises: 
Create Date: 2025-06-04 13:49:20.091976

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b8b6bd67e2fc'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('_prisma_migrations')
    op.alter_column('ContentBlock', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'fileId',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'pathTitles',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'blockTitle',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'codeLanguage',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('ContentBlock', 'codeFoldTitle',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('ContentBlock', 'extractedUrls',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               nullable=False,
               existing_server_default=sa.text('ARRAY[]::text[]'))
    op.alter_column('ContentBlock', 'rawBlockContentHash',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('ContentBlock_fileId_idx'), table_name='ContentBlock')
    op.create_index('idx_contentblock_fileid', 'ContentBlock', ['fileId'], unique=False)
    op.drop_constraint(op.f('ContentBlock_fileId_fkey'), 'ContentBlock', type_='foreignkey')
    op.create_foreign_key(None, 'ContentBlock', 'ContentFile', ['fileId'], ['id'], ondelete='CASCADE')
    op.alter_column('ContentFile', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'webdavPath',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'mainCategory',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'subCategory',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'lastFileHash',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('ContentFile_webdavPath_key'), table_name='ContentFile')
    op.create_unique_constraint(None, 'ContentFile', ['webdavPath'])
    op.alter_column('TheoryCard', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'ankiGuid',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'cardType',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'deck',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'category',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'subCategory',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('TheoryCard', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               nullable=False,
               existing_server_default=sa.text('ARRAY[]::text[]'))
    op.drop_index(op.f('TheoryCard_ankiGuid_key'), table_name='TheoryCard')
    op.drop_index(op.f('TheoryCard_category_idx'), table_name='TheoryCard')
    op.drop_index(op.f('TheoryCard_deck_idx'), table_name='TheoryCard')
    op.create_index('idx_theorycard_category', 'TheoryCard', ['category'], unique=False)
    op.create_index('idx_theorycard_deck', 'TheoryCard', ['deck'], unique=False)
    op.create_unique_constraint(None, 'TheoryCard', ['ankiGuid'])
    op.alter_column('User', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('User', 'password',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_index(op.f('User_email_key'), table_name='User')
    op.create_unique_constraint(None, 'User', ['email'])
    op.alter_column('UserContentProgress', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('UserContentProgress', 'blockId',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_index(op.f('UserContentProgress_blockId_idx'), table_name='UserContentProgress')
    op.drop_index(op.f('UserContentProgress_userId_blockId_key'), table_name='UserContentProgress')
    op.create_index('idx_usercontentprogress_blockid', 'UserContentProgress', ['blockId'], unique=False)
    op.create_index('idx_usercontentprogress_userid_blockid', 'UserContentProgress', ['userId', 'blockId'], unique=True)
    op.drop_constraint(op.f('UserContentProgress_userId_fkey'), 'UserContentProgress', type_='foreignkey')
    op.drop_constraint(op.f('UserContentProgress_blockId_fkey'), 'UserContentProgress', type_='foreignkey')
    op.create_foreign_key(None, 'UserContentProgress', 'User', ['userId'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'UserContentProgress', 'ContentBlock', ['blockId'], ['id'], ondelete='CASCADE')
    op.alter_column('UserTheoryProgress', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('UserTheoryProgress', 'cardId',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_index(op.f('UserTheoryProgress_cardId_idx'), table_name='UserTheoryProgress')
    op.drop_index(op.f('UserTheoryProgress_cardState_idx'), table_name='UserTheoryProgress')
    op.drop_index(op.f('UserTheoryProgress_dueDate_idx'), table_name='UserTheoryProgress')
    op.drop_index(op.f('UserTheoryProgress_userId_cardId_key'), table_name='UserTheoryProgress')
    op.create_index('idx_usertheoryprogress_cardid', 'UserTheoryProgress', ['cardId'], unique=False)
    op.create_index('idx_usertheoryprogress_cardstate', 'UserTheoryProgress', ['cardState'], unique=False)
    op.create_index('idx_usertheoryprogress_duedate', 'UserTheoryProgress', ['dueDate'], unique=False)
    op.create_index('idx_usertheoryprogress_userid_cardid', 'UserTheoryProgress', ['userId', 'cardId'], unique=True)
    op.drop_constraint(op.f('UserTheoryProgress_userId_fkey'), 'UserTheoryProgress', type_='foreignkey')
    op.drop_constraint(op.f('UserTheoryProgress_cardId_fkey'), 'UserTheoryProgress', type_='foreignkey')
    op.create_foreign_key(None, 'UserTheoryProgress', 'TheoryCard', ['cardId'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'UserTheoryProgress', 'User', ['userId'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'UserTheoryProgress', type_='foreignkey')
    op.drop_constraint(None, 'UserTheoryProgress', type_='foreignkey')
    op.create_foreign_key(op.f('UserTheoryProgress_cardId_fkey'), 'UserTheoryProgress', 'TheoryCard', ['cardId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('UserTheoryProgress_userId_fkey'), 'UserTheoryProgress', 'User', ['userId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index('idx_usertheoryprogress_userid_cardid', table_name='UserTheoryProgress')
    op.drop_index('idx_usertheoryprogress_duedate', table_name='UserTheoryProgress')
    op.drop_index('idx_usertheoryprogress_cardstate', table_name='UserTheoryProgress')
    op.drop_index('idx_usertheoryprogress_cardid', table_name='UserTheoryProgress')
    op.create_index(op.f('UserTheoryProgress_userId_cardId_key'), 'UserTheoryProgress', ['userId', 'cardId'], unique=True)
    op.create_index(op.f('UserTheoryProgress_dueDate_idx'), 'UserTheoryProgress', ['dueDate'], unique=False)
    op.create_index(op.f('UserTheoryProgress_cardState_idx'), 'UserTheoryProgress', ['cardState'], unique=False)
    op.create_index(op.f('UserTheoryProgress_cardId_idx'), 'UserTheoryProgress', ['cardId'], unique=False)
    op.alter_column('UserTheoryProgress', 'cardId',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('UserTheoryProgress', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'UserContentProgress', type_='foreignkey')
    op.drop_constraint(None, 'UserContentProgress', type_='foreignkey')
    op.create_foreign_key(op.f('UserContentProgress_blockId_fkey'), 'UserContentProgress', 'ContentBlock', ['blockId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('UserContentProgress_userId_fkey'), 'UserContentProgress', 'User', ['userId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index('idx_usercontentprogress_userid_blockid', table_name='UserContentProgress')
    op.drop_index('idx_usercontentprogress_blockid', table_name='UserContentProgress')
    op.create_index(op.f('UserContentProgress_userId_blockId_key'), 'UserContentProgress', ['userId', 'blockId'], unique=True)
    op.create_index(op.f('UserContentProgress_blockId_idx'), 'UserContentProgress', ['blockId'], unique=False)
    op.alter_column('UserContentProgress', 'blockId',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('UserContentProgress', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'User', type_='unique')
    op.create_index(op.f('User_email_key'), 'User', ['email'], unique=True)
    op.alter_column('User', 'password',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('User', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'TheoryCard', type_='unique')
    op.drop_index('idx_theorycard_deck', table_name='TheoryCard')
    op.drop_index('idx_theorycard_category', table_name='TheoryCard')
    op.create_index(op.f('TheoryCard_deck_idx'), 'TheoryCard', ['deck'], unique=False)
    op.create_index(op.f('TheoryCard_category_idx'), 'TheoryCard', ['category'], unique=False)
    op.create_index(op.f('TheoryCard_ankiGuid_key'), 'TheoryCard', ['ankiGuid'], unique=True)
    op.alter_column('TheoryCard', 'tags',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               nullable=True,
               existing_server_default=sa.text('ARRAY[]::text[]'))
    op.alter_column('TheoryCard', 'subCategory',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('TheoryCard', 'category',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'deck',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'cardType',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'ankiGuid',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'ContentFile', type_='unique')
    op.create_index(op.f('ContentFile_webdavPath_key'), 'ContentFile', ['webdavPath'], unique=True)
    op.alter_column('ContentFile', 'lastFileHash',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('ContentFile', 'subCategory',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'mainCategory',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'webdavPath',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'ContentBlock', type_='foreignkey')
    op.create_foreign_key(op.f('ContentBlock_fileId_fkey'), 'ContentBlock', 'ContentFile', ['fileId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index('idx_contentblock_fileid', table_name='ContentBlock')
    op.create_index(op.f('ContentBlock_fileId_idx'), 'ContentBlock', ['fileId'], unique=False)
    op.alter_column('ContentBlock', 'rawBlockContentHash',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('ContentBlock', 'extractedUrls',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               nullable=True,
               existing_server_default=sa.text('ARRAY[]::text[]'))
    op.alter_column('ContentBlock', 'codeFoldTitle',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('ContentBlock', 'codeLanguage',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('ContentBlock', 'blockTitle',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'pathTitles',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'fileId',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('_prisma_migrations_pkey'))
    )
    # ### end Alembic commands ### 