"""ensure_user_fields_exist

Revision ID: 5563f9444a1b
Revises: a0677d29a5f7
Create Date: 2025-06-29 15:20:39.644417

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5563f9444a1b'
down_revision = 'a0677d29a5f7'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('LearningPath',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('blockIds', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('prerequisites', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('difficulty', sa.String(), nullable=True),
    sa.Column('estimatedHours', sa.Integer(), nullable=True),
    sa.Column('tags', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('isActive', sa.Boolean(), nullable=False),
    sa.Column('orderIndex', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_learningpath_difficulty', 'LearningPath', ['difficulty'], unique=False)
    op.create_index('idx_learningpath_isactive', 'LearningPath', ['isActive'], unique=False)
    op.create_table('SupportedLanguage',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('language', sa.Enum('PYTHON', 'JAVASCRIPT', 'TYPESCRIPT', 'JAVA', 'CPP', 'C', 'GO', 'RUST', 'PHP', 'RUBY', name='codelanguage'), nullable=False),
    sa.Column('version', sa.String(), nullable=False),
    sa.Column('dockerImage', sa.String(), nullable=False),
    sa.Column('fileExtension', sa.String(), nullable=False),
    sa.Column('compileCommand', sa.String(), nullable=True),
    sa.Column('runCommand', sa.String(), nullable=False),
    sa.Column('timeoutSeconds', sa.Integer(), nullable=False),
    sa.Column('memoryLimitMB', sa.Integer(), nullable=False),
    sa.Column('isEnabled', sa.Boolean(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('language')
    )
    op.create_table('UserCategoryProgress',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('mainCategory', sa.String(), nullable=False),
    sa.Column('subCategory', sa.String(), nullable=True),
    sa.Column('totalTasks', sa.Integer(), nullable=False),
    sa.Column('completedTasks', sa.Integer(), nullable=False),
    sa.Column('attemptedTasks', sa.Integer(), nullable=False),
    sa.Column('averageAttempts', sa.DECIMAL(precision=4, scale=2), nullable=False),
    sa.Column('totalTimeSpentMinutes', sa.Integer(), nullable=False),
    sa.Column('successRate', sa.DECIMAL(precision=5, scale=2), nullable=False),
    sa.Column('firstAttempt', sa.DateTime(), nullable=True),
    sa.Column('lastActivity', sa.DateTime(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_usercategoryprogress_lastactivity', 'UserCategoryProgress', ['lastActivity'], unique=False)
    op.create_index('idx_usercategoryprogress_maincategory', 'UserCategoryProgress', ['mainCategory'], unique=False)
    op.create_index('idx_usercategoryprogress_subcategory', 'UserCategoryProgress', ['subCategory'], unique=False)
    op.create_index('idx_usercategoryprogress_userid', 'UserCategoryProgress', ['userId'], unique=False)
    op.create_index('idx_usercategoryprogress_userid_maincategory_subcategory', 'UserCategoryProgress', ['userId', 'mainCategory', 'subCategory'], unique=True)
    op.create_table('UserPathProgress',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('pathId', sa.String(), nullable=False),
    sa.Column('currentBlockIndex', sa.Integer(), nullable=False),
    sa.Column('completedBlockIds', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('isCompleted', sa.Boolean(), nullable=False),
    sa.Column('startedAt', sa.DateTime(), nullable=False),
    sa.Column('completedAt', sa.DateTime(), nullable=True),
    sa.Column('lastActivity', sa.DateTime(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['pathId'], ['LearningPath.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_userpathprogress_lastactivity', 'UserPathProgress', ['lastActivity'], unique=False)
    op.create_index('idx_userpathprogress_pathid', 'UserPathProgress', ['pathId'], unique=False)
    op.create_index('idx_userpathprogress_userid', 'UserPathProgress', ['userId'], unique=False)
    op.create_index('idx_userpathprogress_userid_pathid', 'UserPathProgress', ['userId', 'pathId'], unique=True)
    op.create_table('CodeExecution',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=True),
    sa.Column('blockId', sa.String(), nullable=True),
    sa.Column('languageId', sa.String(), nullable=False),
    sa.Column('sourceCode', sa.Text(), nullable=False),
    sa.Column('stdin', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'SUCCESS', 'ERROR', 'TIMEOUT', 'MEMORY_LIMIT', name='executionstatus'), nullable=False),
    sa.Column('stdout', sa.Text(), nullable=True),
    sa.Column('stderr', sa.Text(), nullable=True),
    sa.Column('exitCode', sa.Integer(), nullable=True),
    sa.Column('executionTimeMs', sa.Integer(), nullable=True),
    sa.Column('memoryUsedMB', sa.Integer(), nullable=True),
    sa.Column('containerLogs', sa.Text(), nullable=True),
    sa.Column('errorMessage', sa.String(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('completedAt', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['blockId'], ['ContentBlock.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['languageId'], ['SupportedLanguage.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_codeexecution_blockid', 'CodeExecution', ['blockId'], unique=False)
    op.create_index('idx_codeexecution_createdat', 'CodeExecution', ['createdAt'], unique=False)
    op.create_index('idx_codeexecution_status', 'CodeExecution', ['status'], unique=False)
    op.create_index('idx_codeexecution_userid', 'CodeExecution', ['userId'], unique=False)
    op.create_table('TaskAttempt',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('blockId', sa.String(), nullable=False),
    sa.Column('sourceCode', sa.Text(), nullable=False),
    sa.Column('language', sa.String(), nullable=False),
    sa.Column('isSuccessful', sa.Boolean(), nullable=False),
    sa.Column('attemptNumber', sa.Integer(), nullable=False),
    sa.Column('executionTimeMs', sa.Integer(), nullable=True),
    sa.Column('memoryUsedMB', sa.Float(), nullable=True),
    sa.Column('errorMessage', sa.Text(), nullable=True),
    sa.Column('stderr', sa.Text(), nullable=True),
    sa.Column('durationMinutes', sa.Integer(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['blockId'], ['ContentBlock.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_taskattempt_blockid', 'TaskAttempt', ['blockId'], unique=False)
    op.create_index('idx_taskattempt_createdat', 'TaskAttempt', ['createdAt'], unique=False)
    op.create_index('idx_taskattempt_issuccessful', 'TaskAttempt', ['isSuccessful'], unique=False)
    op.create_index('idx_taskattempt_userid', 'TaskAttempt', ['userId'], unique=False)
    op.create_index('idx_taskattempt_userid_blockid', 'TaskAttempt', ['userId', 'blockId'], unique=False)
    op.create_table('TaskSolution',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('blockId', sa.String(), nullable=False),
    sa.Column('finalCode', sa.Text(), nullable=False),
    sa.Column('language', sa.String(), nullable=False),
    sa.Column('totalAttempts', sa.Integer(), nullable=False),
    sa.Column('timeToSolveMinutes', sa.Integer(), nullable=False),
    sa.Column('firstAttempt', sa.DateTime(), nullable=False),
    sa.Column('solvedAt', sa.DateTime(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['blockId'], ['ContentBlock.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_tasksolution_blockid', 'TaskSolution', ['blockId'], unique=False)
    op.create_index('idx_tasksolution_solvedat', 'TaskSolution', ['solvedAt'], unique=False)
    op.create_index('idx_tasksolution_userid', 'TaskSolution', ['userId'], unique=False)
    op.create_index('idx_tasksolution_userid_blockid', 'TaskSolution', ['userId', 'blockId'], unique=True)
    op.create_table('TestCase',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('blockId', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('input', sa.Text(), nullable=False),
    sa.Column('expectedOutput', sa.Text(), nullable=False),
    sa.Column('isPublic', sa.Boolean(), nullable=False),
    sa.Column('difficulty', sa.String(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('timeoutSeconds', sa.Integer(), nullable=False),
    sa.Column('isAIGenerated', sa.Boolean(), nullable=False),
    sa.Column('generationPrompt', sa.Text(), nullable=True),
    sa.Column('generatedAt', sa.DateTime(), nullable=True),
    sa.Column('generationModel', sa.String(), nullable=True),
    sa.Column('executionCount', sa.Integer(), nullable=False),
    sa.Column('passRate', sa.Float(), nullable=False),
    sa.Column('isActive', sa.Boolean(), nullable=False),
    sa.Column('orderIndex', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['blockId'], ['ContentBlock.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_testcase_active', 'TestCase', ['isActive'], unique=False)
    op.create_index('idx_testcase_blockid', 'TestCase', ['blockId'], unique=False)
    op.create_index('idx_testcase_difficulty', 'TestCase', ['difficulty'], unique=False)
    op.create_table('UserCodeSolution',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('blockId', sa.String(), nullable=False),
    sa.Column('languageId', sa.String(), nullable=False),
    sa.Column('sourceCode', sa.Text(), nullable=False),
    sa.Column('isCompleted', sa.Boolean(), nullable=False),
    sa.Column('executionCount', sa.Integer(), nullable=False),
    sa.Column('successfulExecutions', sa.Integer(), nullable=False),
    sa.Column('lastExecutionId', sa.String(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['blockId'], ['ContentBlock.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['languageId'], ['SupportedLanguage.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_usercodesolution_blockid', 'UserCodeSolution', ['blockId'], unique=False)
    op.create_index('idx_usercodesolution_userid', 'UserCodeSolution', ['userId'], unique=False)
    op.create_index('idx_usercodesolution_userid_blockid_languageid', 'UserCodeSolution', ['userId', 'blockId', 'languageId'], unique=True)
    op.create_table('TestValidationResult',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('testCaseId', sa.String(), nullable=False),
    sa.Column('attemptId', sa.String(), nullable=False),
    sa.Column('passed', sa.Boolean(), nullable=False),
    sa.Column('actualOutput', sa.Text(), nullable=True),
    sa.Column('executionTimeMs', sa.Integer(), nullable=True),
    sa.Column('errorMessage', sa.Text(), nullable=True),
    sa.Column('outputMatch', sa.Boolean(), nullable=True),
    sa.Column('outputSimilarity', sa.Float(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['attemptId'], ['TaskAttempt.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['testCaseId'], ['TestCase.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_testvalidation_attemptid', 'TestValidationResult', ['attemptId'], unique=False)
    op.create_index('idx_testvalidation_testcaseid', 'TestValidationResult', ['testCaseId'], unique=False)
    op.drop_table('_prisma_migrations')
    # Add companies column with default empty array
    op.add_column('ContentBlock', sa.Column('companies', sa.ARRAY(sa.String()), nullable=True))
    # Update existing records to have empty array
    op.execute("UPDATE \"ContentBlock\" SET companies = ARRAY[]::varchar[] WHERE companies IS NULL")
    # Make it NOT NULL after setting defaults
    op.alter_column('ContentBlock', 'companies', nullable=False)
    op.alter_column('ContentBlock', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'fileId',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'pathTitles',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'blockTitle',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'codeLanguage',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('ContentBlock', 'codeFoldTitle',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('ContentBlock', 'extractedUrls',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               nullable=False,
               existing_server_default=sa.text('ARRAY[]::text[]'))
    op.alter_column('ContentBlock', 'rawBlockContentHash',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('ContentBlock_fileId_idx'), table_name='ContentBlock')
    op.create_index('idx_contentblock_fileid', 'ContentBlock', ['fileId'], unique=False)
    op.drop_constraint(op.f('ContentBlock_fileId_fkey'), 'ContentBlock', type_='foreignkey')
    op.create_foreign_key(None, 'ContentBlock', 'ContentFile', ['fileId'], ['id'], ondelete='CASCADE')
    op.alter_column('ContentFile', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'webdavPath',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'mainCategory',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'subCategory',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'lastFileHash',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('ContentFile_webdavPath_key'), table_name='ContentFile')
    op.create_unique_constraint(None, 'ContentFile', ['webdavPath'])
    op.alter_column('TheoryCard', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'ankiGuid',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'cardType',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'deck',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'category',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'subCategory',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('TheoryCard', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               nullable=False,
               existing_server_default=sa.text('ARRAY[]::text[]'))
    op.drop_index(op.f('TheoryCard_ankiGuid_key'), table_name='TheoryCard')
    op.drop_index(op.f('TheoryCard_category_idx'), table_name='TheoryCard')
    op.drop_index(op.f('TheoryCard_deck_idx'), table_name='TheoryCard')
    op.create_index('idx_theorycard_category', 'TheoryCard', ['category'], unique=False)
    op.create_index('idx_theorycard_deck', 'TheoryCard', ['deck'], unique=False)
    op.create_unique_constraint(None, 'TheoryCard', ['ankiGuid'])
    op.add_column('User', sa.Column('totalTasksSolved', sa.Integer(), server_default='0', nullable=False))
    op.add_column('User', sa.Column('lastActivityDate', sa.DateTime(), nullable=True))
    op.alter_column('User', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('User', 'password',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.drop_index(op.f('User_email_key'), table_name='User')
    op.create_unique_constraint(None, 'User', ['email'])
    op.alter_column('UserContentProgress', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('UserContentProgress', 'blockId',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_index(op.f('UserContentProgress_blockId_idx'), table_name='UserContentProgress')
    op.drop_index(op.f('UserContentProgress_userId_blockId_key'), table_name='UserContentProgress')
    op.create_index('idx_usercontentprogress_blockid', 'UserContentProgress', ['blockId'], unique=False)
    op.create_index('idx_usercontentprogress_userid_blockid', 'UserContentProgress', ['userId', 'blockId'], unique=True)
    op.drop_constraint(op.f('UserContentProgress_userId_fkey'), 'UserContentProgress', type_='foreignkey')
    op.drop_constraint(op.f('UserContentProgress_blockId_fkey'), 'UserContentProgress', type_='foreignkey')
    op.create_foreign_key(None, 'UserContentProgress', 'ContentBlock', ['blockId'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'UserContentProgress', 'User', ['userId'], ['id'], ondelete='CASCADE')
    op.alter_column('UserTheoryProgress', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('UserTheoryProgress', 'cardId',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_index(op.f('UserTheoryProgress_cardId_idx'), table_name='UserTheoryProgress')
    op.drop_index(op.f('UserTheoryProgress_cardState_idx'), table_name='UserTheoryProgress')
    op.drop_index(op.f('UserTheoryProgress_dueDate_idx'), table_name='UserTheoryProgress')
    op.drop_index(op.f('UserTheoryProgress_userId_cardId_key'), table_name='UserTheoryProgress')
    op.create_index('idx_usertheoryprogress_cardid', 'UserTheoryProgress', ['cardId'], unique=False)
    op.create_index('idx_usertheoryprogress_cardstate', 'UserTheoryProgress', ['cardState'], unique=False)
    op.create_index('idx_usertheoryprogress_duedate', 'UserTheoryProgress', ['dueDate'], unique=False)
    op.create_index('idx_usertheoryprogress_userid_cardid', 'UserTheoryProgress', ['userId', 'cardId'], unique=True)
    op.drop_constraint(op.f('UserTheoryProgress_userId_fkey'), 'UserTheoryProgress', type_='foreignkey')
    op.drop_constraint(op.f('UserTheoryProgress_cardId_fkey'), 'UserTheoryProgress', type_='foreignkey')
    op.create_foreign_key(None, 'UserTheoryProgress', 'TheoryCard', ['cardId'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'UserTheoryProgress', 'User', ['userId'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'UserTheoryProgress', type_='foreignkey')
    op.drop_constraint(None, 'UserTheoryProgress', type_='foreignkey')
    op.create_foreign_key(op.f('UserTheoryProgress_cardId_fkey'), 'UserTheoryProgress', 'TheoryCard', ['cardId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('UserTheoryProgress_userId_fkey'), 'UserTheoryProgress', 'User', ['userId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index('idx_usertheoryprogress_userid_cardid', table_name='UserTheoryProgress')
    op.drop_index('idx_usertheoryprogress_duedate', table_name='UserTheoryProgress')
    op.drop_index('idx_usertheoryprogress_cardstate', table_name='UserTheoryProgress')
    op.drop_index('idx_usertheoryprogress_cardid', table_name='UserTheoryProgress')
    op.create_index(op.f('UserTheoryProgress_userId_cardId_key'), 'UserTheoryProgress', ['userId', 'cardId'], unique=True)
    op.create_index(op.f('UserTheoryProgress_dueDate_idx'), 'UserTheoryProgress', ['dueDate'], unique=False)
    op.create_index(op.f('UserTheoryProgress_cardState_idx'), 'UserTheoryProgress', ['cardState'], unique=False)
    op.create_index(op.f('UserTheoryProgress_cardId_idx'), 'UserTheoryProgress', ['cardId'], unique=False)
    op.alter_column('UserTheoryProgress', 'cardId',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('UserTheoryProgress', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'UserContentProgress', type_='foreignkey')
    op.drop_constraint(None, 'UserContentProgress', type_='foreignkey')
    op.create_foreign_key(op.f('UserContentProgress_blockId_fkey'), 'UserContentProgress', 'ContentBlock', ['blockId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('UserContentProgress_userId_fkey'), 'UserContentProgress', 'User', ['userId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index('idx_usercontentprogress_userid_blockid', table_name='UserContentProgress')
    op.drop_index('idx_usercontentprogress_blockid', table_name='UserContentProgress')
    op.create_index(op.f('UserContentProgress_userId_blockId_key'), 'UserContentProgress', ['userId', 'blockId'], unique=True)
    op.create_index(op.f('UserContentProgress_blockId_idx'), 'UserContentProgress', ['blockId'], unique=False)
    op.alter_column('UserContentProgress', 'blockId',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('UserContentProgress', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'User', type_='unique')
    op.create_index(op.f('User_email_key'), 'User', ['email'], unique=True)
    op.alter_column('User', 'password',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('User', 'email',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('User', 'lastActivityDate')
    op.drop_column('User', 'totalTasksSolved')
    op.drop_constraint(None, 'TheoryCard', type_='unique')
    op.drop_index('idx_theorycard_deck', table_name='TheoryCard')
    op.drop_index('idx_theorycard_category', table_name='TheoryCard')
    op.create_index(op.f('TheoryCard_deck_idx'), 'TheoryCard', ['deck'], unique=False)
    op.create_index(op.f('TheoryCard_category_idx'), 'TheoryCard', ['category'], unique=False)
    op.create_index(op.f('TheoryCard_ankiGuid_key'), 'TheoryCard', ['ankiGuid'], unique=True)
    op.alter_column('TheoryCard', 'tags',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               nullable=True,
               existing_server_default=sa.text('ARRAY[]::text[]'))
    op.alter_column('TheoryCard', 'subCategory',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('TheoryCard', 'category',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'deck',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'cardType',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'ankiGuid',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('TheoryCard', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'ContentFile', type_='unique')
    op.create_index(op.f('ContentFile_webdavPath_key'), 'ContentFile', ['webdavPath'], unique=True)
    op.alter_column('ContentFile', 'lastFileHash',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('ContentFile', 'subCategory',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'mainCategory',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'webdavPath',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('ContentFile', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'ContentBlock', type_='foreignkey')
    op.create_foreign_key(op.f('ContentBlock_fileId_fkey'), 'ContentBlock', 'ContentFile', ['fileId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index('idx_contentblock_fileid', table_name='ContentBlock')
    op.create_index(op.f('ContentBlock_fileId_idx'), 'ContentBlock', ['fileId'], unique=False)
    op.alter_column('ContentBlock', 'rawBlockContentHash',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('ContentBlock', 'extractedUrls',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               nullable=True,
               existing_server_default=sa.text('ARRAY[]::text[]'))
    op.alter_column('ContentBlock', 'codeFoldTitle',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('ContentBlock', 'codeLanguage',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('ContentBlock', 'blockTitle',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'pathTitles',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'fileId',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('ContentBlock', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('ContentBlock', 'companies')
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('_prisma_migrations_pkey'))
    )
    op.drop_index('idx_testvalidation_testcaseid', table_name='TestValidationResult')
    op.drop_index('idx_testvalidation_attemptid', table_name='TestValidationResult')
    op.drop_table('TestValidationResult')
    op.drop_index('idx_usercodesolution_userid_blockid_languageid', table_name='UserCodeSolution')
    op.drop_index('idx_usercodesolution_userid', table_name='UserCodeSolution')
    op.drop_index('idx_usercodesolution_blockid', table_name='UserCodeSolution')
    op.drop_table('UserCodeSolution')
    op.drop_index('idx_testcase_difficulty', table_name='TestCase')
    op.drop_index('idx_testcase_blockid', table_name='TestCase')
    op.drop_index('idx_testcase_active', table_name='TestCase')
    op.drop_table('TestCase')
    op.drop_index('idx_tasksolution_userid_blockid', table_name='TaskSolution')
    op.drop_index('idx_tasksolution_userid', table_name='TaskSolution')
    op.drop_index('idx_tasksolution_solvedat', table_name='TaskSolution')
    op.drop_index('idx_tasksolution_blockid', table_name='TaskSolution')
    op.drop_table('TaskSolution')
    op.drop_index('idx_taskattempt_userid_blockid', table_name='TaskAttempt')
    op.drop_index('idx_taskattempt_userid', table_name='TaskAttempt')
    op.drop_index('idx_taskattempt_issuccessful', table_name='TaskAttempt')
    op.drop_index('idx_taskattempt_createdat', table_name='TaskAttempt')
    op.drop_index('idx_taskattempt_blockid', table_name='TaskAttempt')
    op.drop_table('TaskAttempt')
    op.drop_index('idx_codeexecution_userid', table_name='CodeExecution')
    op.drop_index('idx_codeexecution_status', table_name='CodeExecution')
    op.drop_index('idx_codeexecution_createdat', table_name='CodeExecution')
    op.drop_index('idx_codeexecution_blockid', table_name='CodeExecution')
    op.drop_table('CodeExecution')
    op.drop_index('idx_userpathprogress_userid_pathid', table_name='UserPathProgress')
    op.drop_index('idx_userpathprogress_userid', table_name='UserPathProgress')
    op.drop_index('idx_userpathprogress_pathid', table_name='UserPathProgress')
    op.drop_index('idx_userpathprogress_lastactivity', table_name='UserPathProgress')
    op.drop_table('UserPathProgress')
    op.drop_index('idx_usercategoryprogress_userid_maincategory_subcategory', table_name='UserCategoryProgress')
    op.drop_index('idx_usercategoryprogress_userid', table_name='UserCategoryProgress')
    op.drop_index('idx_usercategoryprogress_subcategory', table_name='UserCategoryProgress')
    op.drop_index('idx_usercategoryprogress_maincategory', table_name='UserCategoryProgress')
    op.drop_index('idx_usercategoryprogress_lastactivity', table_name='UserCategoryProgress')
    op.drop_table('UserCategoryProgress')
    op.drop_table('SupportedLanguage')
    op.drop_index('idx_learningpath_isactive', table_name='LearningPath')
    op.drop_index('idx_learningpath_difficulty', table_name='LearningPath')
    op.drop_table('LearningPath')
    # ### end Alembic commands ### 