"""Add TestCase and TestValidationResult tables

Revision ID: a0677d29a5f7
Revises: 847eaf5fe1f9
Create Date: 2025-06-22 15:05:57.742812

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a0677d29a5f7'
down_revision = '847eaf5fe1f9'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('TestCase',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('blockId', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('input', sa.Text(), nullable=False),
    sa.Column('expectedOutput', sa.Text(), nullable=False),
    sa.Column('isPublic', sa.Boolean(), nullable=False),
    sa.Column('difficulty', sa.String(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('timeoutSeconds', sa.Integer(), nullable=False),
    sa.Column('isAIGenerated', sa.Boolean(), nullable=False),
    sa.Column('generationPrompt', sa.Text(), nullable=True),
    sa.Column('generatedAt', sa.DateTime(), nullable=True),
    sa.Column('generationModel', sa.String(), nullable=True),
    sa.Column('executionCount', sa.Integer(), nullable=False),
    sa.Column('passRate', sa.Float(), nullable=False),
    sa.Column('isActive', sa.Boolean(), nullable=False),
    sa.Column('orderIndex', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['blockId'], ['ContentBlock.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_testcase_active', 'TestCase', ['isActive'], unique=False)
    op.create_index('idx_testcase_blockid', 'TestCase', ['blockId'], unique=False)
    op.create_index('idx_testcase_difficulty', 'TestCase', ['difficulty'], unique=False)
    op.create_table('TestValidationResult',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('testCaseId', sa.String(), nullable=False),
    sa.Column('attemptId', sa.String(), nullable=False),
    sa.Column('passed', sa.Boolean(), nullable=False),
    sa.Column('actualOutput', sa.Text(), nullable=True),
    sa.Column('executionTimeMs', sa.Integer(), nullable=True),
    sa.Column('errorMessage', sa.Text(), nullable=True),
    sa.Column('outputMatch', sa.Boolean(), nullable=True),
    sa.Column('outputSimilarity', sa.Float(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['attemptId'], ['TaskAttempt.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['testCaseId'], ['TestCase.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_testvalidation_attemptid', 'TestValidationResult', ['attemptId'], unique=False)
    op.create_index('idx_testvalidation_testcaseid', 'TestValidationResult', ['testCaseId'], unique=False)
    op.create_index('idx_learningpath_difficulty', 'LearningPath', ['difficulty'], unique=False)
    op.create_index('idx_learningpath_isactive', 'LearningPath', ['isActive'], unique=False)
    op.alter_column('TaskAttempt', 'memoryUsedMB',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_nullable=True)
    op.create_index('idx_taskattempt_blockid', 'TaskAttempt', ['blockId'], unique=False)
    op.create_index('idx_taskattempt_createdat', 'TaskAttempt', ['createdAt'], unique=False)
    op.create_index('idx_taskattempt_issuccessful', 'TaskAttempt', ['isSuccessful'], unique=False)
    op.create_index('idx_taskattempt_userid', 'TaskAttempt', ['userId'], unique=False)
    op.create_index('idx_taskattempt_userid_blockid', 'TaskAttempt', ['userId', 'blockId'], unique=False)
    op.create_index('idx_tasksolution_blockid', 'TaskSolution', ['blockId'], unique=False)
    op.create_index('idx_tasksolution_solvedat', 'TaskSolution', ['solvedAt'], unique=False)
    op.create_index('idx_tasksolution_userid', 'TaskSolution', ['userId'], unique=False)
    op.create_index('idx_tasksolution_userid_blockid', 'TaskSolution', ['userId', 'blockId'], unique=True)
    op.create_index('idx_usercategoryprogress_lastactivity', 'UserCategoryProgress', ['lastActivity'], unique=False)
    op.create_index('idx_usercategoryprogress_maincategory', 'UserCategoryProgress', ['mainCategory'], unique=False)
    op.create_index('idx_usercategoryprogress_subcategory', 'UserCategoryProgress', ['subCategory'], unique=False)
    op.create_index('idx_usercategoryprogress_userid', 'UserCategoryProgress', ['userId'], unique=False)
    op.create_index('idx_usercategoryprogress_userid_maincategory_subcategory', 'UserCategoryProgress', ['userId', 'mainCategory', 'subCategory'], unique=True)
    op.create_index('idx_userpathprogress_lastactivity', 'UserPathProgress', ['lastActivity'], unique=False)
    op.create_index('idx_userpathprogress_pathid', 'UserPathProgress', ['pathId'], unique=False)
    op.create_index('idx_userpathprogress_userid', 'UserPathProgress', ['userId'], unique=False)
    op.create_index('idx_userpathprogress_userid_pathid', 'UserPathProgress', ['userId', 'pathId'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_userpathprogress_userid_pathid', table_name='UserPathProgress')
    op.drop_index('idx_userpathprogress_userid', table_name='UserPathProgress')
    op.drop_index('idx_userpathprogress_pathid', table_name='UserPathProgress')
    op.drop_index('idx_userpathprogress_lastactivity', table_name='UserPathProgress')
    op.drop_index('idx_usercategoryprogress_userid_maincategory_subcategory', table_name='UserCategoryProgress')
    op.drop_index('idx_usercategoryprogress_userid', table_name='UserCategoryProgress')
    op.drop_index('idx_usercategoryprogress_subcategory', table_name='UserCategoryProgress')
    op.drop_index('idx_usercategoryprogress_maincategory', table_name='UserCategoryProgress')
    op.drop_index('idx_usercategoryprogress_lastactivity', table_name='UserCategoryProgress')
    op.drop_index('idx_tasksolution_userid_blockid', table_name='TaskSolution')
    op.drop_index('idx_tasksolution_userid', table_name='TaskSolution')
    op.drop_index('idx_tasksolution_solvedat', table_name='TaskSolution')
    op.drop_index('idx_tasksolution_blockid', table_name='TaskSolution')
    op.drop_index('idx_taskattempt_userid_blockid', table_name='TaskAttempt')
    op.drop_index('idx_taskattempt_userid', table_name='TaskAttempt')
    op.drop_index('idx_taskattempt_issuccessful', table_name='TaskAttempt')
    op.drop_index('idx_taskattempt_createdat', table_name='TaskAttempt')
    op.drop_index('idx_taskattempt_blockid', table_name='TaskAttempt')
    op.alter_column('TaskAttempt', 'memoryUsedMB',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.drop_index('idx_learningpath_isactive', table_name='LearningPath')
    op.drop_index('idx_learningpath_difficulty', table_name='LearningPath')
    op.drop_index('idx_testvalidation_testcaseid', table_name='TestValidationResult')
    op.drop_index('idx_testvalidation_attemptid', table_name='TestValidationResult')
    op.drop_table('TestValidationResult')
    op.drop_index('idx_testcase_difficulty', table_name='TestCase')
    op.drop_index('idx_testcase_blockid', table_name='TestCase')
    op.drop_index('idx_testcase_active', table_name='TestCase')
    op.drop_table('TestCase')
    # ### end Alembic commands ### 