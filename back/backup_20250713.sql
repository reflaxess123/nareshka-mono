--
-- PostgreSQL database dump
--

-- Dumped from database version 17.5 (Debian 17.5-1.pgdg120+1)
-- Dumped by pg_dump version 17.5 (Debian 17.5-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA public;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: CardState; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public."CardState" AS ENUM (
    'NEW',
    'LEARNING',
    'REVIEW',
    'RELEARNING'
);


ALTER TYPE public."CardState" OWNER TO postgres;

--
-- Name: UserRole; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public."UserRole" AS ENUM (
    'GUEST',
    'USER',
    'ADMIN'
);


ALTER TYPE public."UserRole" OWNER TO postgres;

--
-- Name: codelanguage; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.codelanguage AS ENUM (
    'PYTHON',
    'JAVASCRIPT',
    'TYPESCRIPT',
    'JAVA',
    'CPP',
    'C',
    'GO',
    'RUST',
    'PHP',
    'RUBY'
);


ALTER TYPE public.codelanguage OWNER TO postgres;

--
-- Name: executionstatus; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.executionstatus AS ENUM (
    'PENDING',
    'RUNNING',
    'SUCCESS',
    'ERROR',
    'TIMEOUT',
    'MEMORY_LIMIT'
);


ALTER TYPE public.executionstatus OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: CodeExecution; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."CodeExecution" (
    id character varying NOT NULL,
    "userId" integer,
    "blockId" character varying,
    "languageId" character varying NOT NULL,
    "sourceCode" text NOT NULL,
    stdin text,
    status public.executionstatus NOT NULL,
    stdout text,
    stderr text,
    "exitCode" integer,
    "executionTimeMs" integer,
    "memoryUsedMB" integer,
    "containerLogs" text,
    "errorMessage" character varying,
    "createdAt" timestamp without time zone NOT NULL,
    "completedAt" timestamp without time zone
);


ALTER TABLE public."CodeExecution" OWNER TO postgres;

--
-- Name: ContentBlock; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ContentBlock" (
    id character varying NOT NULL,
    "fileId" character varying NOT NULL,
    "pathTitles" json NOT NULL,
    "blockTitle" character varying NOT NULL,
    "blockLevel" integer NOT NULL,
    "orderInFile" integer NOT NULL,
    "textContent" text,
    "codeContent" text,
    "codeLanguage" character varying,
    "isCodeFoldable" boolean DEFAULT false NOT NULL,
    "codeFoldTitle" character varying,
    "rawBlockContentHash" character varying,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL,
    "extractedUrls" character varying[] DEFAULT ARRAY[]::text[] NOT NULL,
    companies character varying[] NOT NULL
);


ALTER TABLE public."ContentBlock" OWNER TO postgres;

--
-- Name: ContentFile; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ContentFile" (
    id character varying NOT NULL,
    "webdavPath" character varying NOT NULL,
    "mainCategory" character varying NOT NULL,
    "subCategory" character varying NOT NULL,
    "lastFileHash" character varying,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL
);


ALTER TABLE public."ContentFile" OWNER TO postgres;

--
-- Name: LearningPath; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."LearningPath" (
    id character varying NOT NULL,
    name character varying NOT NULL,
    description text,
    "blockIds" character varying[] NOT NULL,
    prerequisites character varying[] NOT NULL,
    difficulty character varying,
    "estimatedHours" integer,
    tags character varying[] NOT NULL,
    "isActive" boolean NOT NULL,
    "orderIndex" integer NOT NULL,
    "createdAt" timestamp without time zone NOT NULL,
    "updatedAt" timestamp without time zone NOT NULL
);


ALTER TABLE public."LearningPath" OWNER TO postgres;

--
-- Name: SupportedLanguage; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."SupportedLanguage" (
    id character varying NOT NULL,
    name character varying NOT NULL,
    language public.codelanguage NOT NULL,
    version character varying NOT NULL,
    "dockerImage" character varying NOT NULL,
    "fileExtension" character varying NOT NULL,
    "compileCommand" character varying,
    "runCommand" character varying NOT NULL,
    "timeoutSeconds" integer NOT NULL,
    "memoryLimitMB" integer NOT NULL,
    "isEnabled" boolean NOT NULL,
    "createdAt" timestamp without time zone NOT NULL,
    "updatedAt" timestamp without time zone NOT NULL
);


ALTER TABLE public."SupportedLanguage" OWNER TO postgres;

--
-- Name: TaskAttempt; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TaskAttempt" (
    id character varying NOT NULL,
    "userId" integer NOT NULL,
    "blockId" character varying NOT NULL,
    "sourceCode" text NOT NULL,
    language character varying NOT NULL,
    "isSuccessful" boolean NOT NULL,
    "attemptNumber" integer NOT NULL,
    "executionTimeMs" integer,
    "memoryUsedMB" double precision,
    "errorMessage" text,
    stderr text,
    "durationMinutes" integer,
    "createdAt" timestamp without time zone NOT NULL
);


ALTER TABLE public."TaskAttempt" OWNER TO postgres;

--
-- Name: TaskSolution; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TaskSolution" (
    id character varying NOT NULL,
    "userId" integer NOT NULL,
    "blockId" character varying NOT NULL,
    "finalCode" text NOT NULL,
    language character varying NOT NULL,
    "totalAttempts" integer NOT NULL,
    "timeToSolveMinutes" integer NOT NULL,
    "firstAttempt" timestamp without time zone NOT NULL,
    "solvedAt" timestamp without time zone NOT NULL,
    "createdAt" timestamp without time zone NOT NULL,
    "updatedAt" timestamp without time zone NOT NULL
);


ALTER TABLE public."TaskSolution" OWNER TO postgres;

--
-- Name: TestCase; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TestCase" (
    id character varying NOT NULL,
    "blockId" character varying NOT NULL,
    name character varying NOT NULL,
    description text,
    input text NOT NULL,
    "expectedOutput" text NOT NULL,
    "isPublic" boolean NOT NULL,
    difficulty character varying,
    weight double precision NOT NULL,
    "timeoutSeconds" integer NOT NULL,
    "isAIGenerated" boolean NOT NULL,
    "generationPrompt" text,
    "generatedAt" timestamp without time zone,
    "generationModel" character varying,
    "executionCount" integer NOT NULL,
    "passRate" double precision NOT NULL,
    "isActive" boolean NOT NULL,
    "orderIndex" integer NOT NULL,
    "createdAt" timestamp without time zone NOT NULL,
    "updatedAt" timestamp without time zone NOT NULL
);


ALTER TABLE public."TestCase" OWNER TO postgres;

--
-- Name: TestValidationResult; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TestValidationResult" (
    id character varying NOT NULL,
    "testCaseId" character varying NOT NULL,
    "attemptId" character varying NOT NULL,
    passed boolean NOT NULL,
    "actualOutput" text,
    "executionTimeMs" integer,
    "errorMessage" text,
    "outputMatch" boolean,
    "outputSimilarity" double precision,
    "createdAt" timestamp without time zone NOT NULL
);


ALTER TABLE public."TestValidationResult" OWNER TO postgres;

--
-- Name: TheoryCard; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TheoryCard" (
    id character varying NOT NULL,
    "ankiGuid" character varying NOT NULL,
    "cardType" character varying NOT NULL,
    deck character varying NOT NULL,
    category character varying NOT NULL,
    "subCategory" character varying,
    "questionBlock" text NOT NULL,
    "answerBlock" text NOT NULL,
    tags character varying[] DEFAULT ARRAY[]::text[] NOT NULL,
    "orderIndex" integer DEFAULT 0 NOT NULL,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL
);


ALTER TABLE public."TheoryCard" OWNER TO postgres;

--
-- Name: User; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."User" (
    id integer NOT NULL,
    email character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL,
    role public."UserRole" DEFAULT 'USER'::public."UserRole" NOT NULL,
    "totalTasksSolved" integer DEFAULT 0 NOT NULL,
    "lastActivityDate" timestamp without time zone
);


ALTER TABLE public."User" OWNER TO postgres;

--
-- Name: UserCategoryProgress; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."UserCategoryProgress" (
    id character varying NOT NULL,
    "userId" integer NOT NULL,
    "mainCategory" character varying NOT NULL,
    "subCategory" character varying,
    "totalTasks" integer NOT NULL,
    "completedTasks" integer NOT NULL,
    "attemptedTasks" integer NOT NULL,
    "averageAttempts" numeric(4,2) NOT NULL,
    "totalTimeSpentMinutes" integer NOT NULL,
    "successRate" numeric(5,2) NOT NULL,
    "firstAttempt" timestamp without time zone,
    "lastActivity" timestamp without time zone,
    "createdAt" timestamp without time zone NOT NULL,
    "updatedAt" timestamp without time zone NOT NULL
);


ALTER TABLE public."UserCategoryProgress" OWNER TO postgres;

--
-- Name: UserCodeSolution; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."UserCodeSolution" (
    id character varying NOT NULL,
    "userId" integer NOT NULL,
    "blockId" character varying NOT NULL,
    "languageId" character varying NOT NULL,
    "sourceCode" text NOT NULL,
    "isCompleted" boolean NOT NULL,
    "executionCount" integer NOT NULL,
    "successfulExecutions" integer NOT NULL,
    "lastExecutionId" character varying,
    "createdAt" timestamp without time zone NOT NULL,
    "updatedAt" timestamp without time zone NOT NULL
);


ALTER TABLE public."UserCodeSolution" OWNER TO postgres;

--
-- Name: UserContentProgress; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."UserContentProgress" (
    id character varying NOT NULL,
    "userId" integer NOT NULL,
    "blockId" character varying NOT NULL,
    "solvedCount" integer DEFAULT 0 NOT NULL,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL
);


ALTER TABLE public."UserContentProgress" OWNER TO postgres;

--
-- Name: UserPathProgress; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."UserPathProgress" (
    id character varying NOT NULL,
    "userId" integer NOT NULL,
    "pathId" character varying NOT NULL,
    "currentBlockIndex" integer NOT NULL,
    "completedBlockIds" character varying[] NOT NULL,
    "isCompleted" boolean NOT NULL,
    "startedAt" timestamp without time zone NOT NULL,
    "completedAt" timestamp without time zone,
    "lastActivity" timestamp without time zone,
    "createdAt" timestamp without time zone NOT NULL,
    "updatedAt" timestamp without time zone NOT NULL
);


ALTER TABLE public."UserPathProgress" OWNER TO postgres;

--
-- Name: UserTheoryProgress; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."UserTheoryProgress" (
    id character varying NOT NULL,
    "userId" integer NOT NULL,
    "cardId" character varying NOT NULL,
    "solvedCount" integer DEFAULT 0 NOT NULL,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL,
    "cardState" public."CardState" DEFAULT 'NEW'::public."CardState" NOT NULL,
    "dueDate" timestamp(3) without time zone,
    "easeFactor" numeric(3,2) DEFAULT 2.50 NOT NULL,
    "interval" integer DEFAULT 1 NOT NULL,
    "lapseCount" integer DEFAULT 0 NOT NULL,
    "lastReviewDate" timestamp(3) without time zone,
    "learningStep" integer DEFAULT 0 NOT NULL,
    "reviewCount" integer DEFAULT 0 NOT NULL
);


ALTER TABLE public."UserTheoryProgress" OWNER TO postgres;

--
-- Name: User_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."User_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."User_id_seq" OWNER TO postgres;

--
-- Name: User_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."User_id_seq" OWNED BY public."User".id;


--
-- Name: alembic_version; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.alembic_version (
    version_num character varying(32) NOT NULL
);


ALTER TABLE public.alembic_version OWNER TO postgres;

--
-- Name: User id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."User" ALTER COLUMN id SET DEFAULT nextval('public."User_id_seq"'::regclass);


--
-- Data for Name: CodeExecution; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."CodeExecution" (id, "userId", "blockId", "languageId", "sourceCode", stdin, status, stdout, stderr, "exitCode", "executionTimeMs", "memoryUsedMB", "containerLogs", "errorMessage", "createdAt", "completedAt") FROM stdin;
\.


--
-- Data for Name: ContentBlock; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."ContentBlock" (id, "fileId", "pathTitles", "blockTitle", "blockLevel", "orderInFile", "textContent", "codeContent", "codeLanguage", "isCodeFoldable", "codeFoldTitle", "rawBlockContentHash", "createdAt", "updatedAt", "extractedUrls", companies) FROM stdin;
cmchmr10i007c13sxtna9vs6l	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	18. Ошибки типов	3	17	Постановка задачи:Необходимо исправить ошибку в определении обобщенного типа A<T>, где {...} является недопустимым синтаксисом. Также необходимо проанализировать объединение интерфейсов с разными свойствами и убедиться, что оно происходит без ошибок.\\n	type A<T> = { foo: T };\n\ninterface B {\n    foo: string;\n}\ninterface B {\n    bar: string;\n}	ts	t	\N	\N	2025-06-29 12:12:15.714	2025-06-29 12:12:15.714	{}	{}
cmchmr295008a13sxqwcbhpdk	cmchmr26x008613sx5x0ok8za	["Основные"]	Readonly	2	3	Назначение: Делает все поля объекта только для чтения (нельзя изменить после инициализации).\\n	type Person = {\n  name: string;\n  age: number;\n};\n\ntype PersonReadonly = Readonly<Person>;\n// Эквивалентно: { readonly name: string; readonly age: number; }\n\n\ntype MyReadonly<T> = {\n  readonly [K in keyof T]: T[K];\n};	ts	f	\N	\N	2025-06-29 12:12:17.322	2025-06-29 12:12:17.322	{}	{}
cmchmr16f007k13sx8n91u6ps	cmchmr0ob006u13sxtn2smcgd	["Функции (дженерики)"]	26. getInfo	2	25	Постановка задачи:Необходимо создать функцию getInfo, которая принимает ключ из заранее объявленного объекта person и возвращает соответствующее значение. Ключ должен быть ограничен keyof typeof person, что обеспечит безопасность типов.\\n	let person = {  \n    name: 'Anton',  \n    age: 37,  \n    location: 'Yekaterinburg'  \n}  \n  \nconst getInfo = (key) => {  \n  \n}  \n\n// console.log(getInfo('name')); // "Anton"  \n  \n// console.log(getInfo('age')); // 37  \n  \n// console.log(getInfo('location')); // "Yekaterinburg"	ts	f	\N	\N	2025-06-29 12:12:15.928	2025-06-29 12:12:15.928	{}	{}
cmchmr0oi006v13sxew9ydpom	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	1. Тип функции	3	0	Постановка задачи:Необходимо определить обобщенный тип Func<T, K>, описывающий функцию, которая принимает объект T и ключ K, принадлежащий keyof T. Функция должна возвращать значение свойства K объекта T, а его тип должен соответствовать T[K]. Также требуется убедиться, что ReturnType<Func<T, K>> корректно выводит ожидаемый тип.\\n	// ReturnType<Func>\ntype Func<T, K extends keyof T> = (a: T, b: K) => T[K];  \ntype T1 = ReturnType<Func<{ a: number; b: string }, 'a'>>;  \n// Возвращаемый тип 'number'\n\nconst getValue: Func<{ a: number; b: string }, 'a'> = (obj, key) => obj[key];  \nconst obj1 = { a: 42, b: "hello" };  \nconst value: T1 = getValue(obj1, 'a'); // value = 42 	ts	t	\N	\N	2025-06-29 12:12:15.282	2025-06-29 12:12:15.282	{}	{}
cmchmr0pb006w13sxubo1znr1	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	2. Тип параметров	3	1	Постановка задачи:Необходимо определить обобщенный тип T2, который представляет параметры функции Func<T, K> в виде кортежа. Функция принимает объект T и ключ K, принадлежащий keyof T, а кортеж параметров должен иметь структуру [T, K]. Требуется проверить, что использование Parameters<Func<T, K>> правильно формирует ожидаемый кортеж параметров.\\n	// Parameters<Func>  \n  \ntype T2 = Parameters<Func<{ a: number; b: string }, 'a'>>;  \n// Параметры функции кортеж: [{ a: number; b: string }, 'a']  \n  \nconst params: T2 = [{ a: 42, b: "world" }, 'a'];  \nconst result: T1 = getValue(...params); // result = 42  	ts	t	\N	\N	2025-06-29 12:12:15.311	2025-06-29 12:12:15.311	{}	{}
cmchmr0q0006x13sx2okly425	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	3. Исключение свойства	3	2	Постановка задачи:Необходимо определить новый тип T3, который представляет собой объект, полученный из исходного типа путем исключения одного из его свойств. Для этого используется утилита Omit<T, K>, которая удаляет указанное свойство K из объекта T. Требуется проверить, что после исключения свойства объект сохраняет оставшиеся ключи с их исходными типами.\\n	// Omit  \n  \ntype T3 = Omit<{ a: number; b: string; c: boolean }, 'b'>;  \n// Убираем 'b', остается: { a: number; c: boolean }  \n  \nconst obj3: T3 = { a: 10, c: true }; // b исключён  	ts	t	\N	\N	2025-06-29 12:12:15.337	2025-06-29 12:12:15.337	{}	{}
cmchmr0qn006y13sxo57cylep	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	4. Выбор свойств	3	3	Постановка задачи:Необходимо определить новый тип T4, который включает только выбранные свойства из исходного объекта. Для этого используется утилита Pick<T, K>, которая формирует новый объект, содержащий только указанные в K ключи из T. Требуется проверить, что после выбора свойств объект сохраняет их исходные типы.\\n	// Pick  \n  \ntype T4 = Pick<{ a: number; b: string; c: boolean }, 'a' | 'c'>;  \n// Выбираем только 'a' и 'c': { a: number; c: boolean }  \n  \nconst obj4: T4 = { a: 100, c: false }; // Только a и c  	ts	t	\N	\N	2025-06-29 12:12:15.36	2025-06-29 12:12:15.36	{}	{}
cmchmr0rc006z13sxyr6n94sh	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	5. Необязательные свойства	3	4	Постановка задачи:Необходимо определить новый тип T5, в котором все свойства исходного объекта становятся необязательными. Для этого используется утилита Partial<T>, которая преобразует каждое свойство объекта T в необязательное, добавляя к нему модификатор ?. Требуется проверить, что объект может содержать любое подмножество исходных свойств, включая пустой объект.\\n	// Partial  \n  \ntype T5 = Partial<{ a: number; b: string }>;  \n// Все свойства необязательны: { a?: number; b?: string }  \n  \nconst obj5_1: T5 = {}; // Все свойства необязательны  \nconst obj5_2: T5 = { a: 1 }; // Только a  \nconst obj5_3: T5 = { b: "test" }; // Только b  	ts	t	\N	\N	2025-06-29 12:12:15.385	2025-06-29 12:12:15.385	{}	{}
cmchmr0s9007013sxx8edr1z2	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	6. Обязательные свойства	3	5	Постановка задачи:Необходимо определить новый тип T6, в котором все свойства исходного объекта становятся обязательными. Для этого используется утилита Required<T>, которая удаляет модификатор ? у всех свойств объекта T. Требуется проверить, что объект теперь должен содержать все изначально необязательные свойства.\\n	// Required  \n\ntype T6 = Required<{ a?: number; b?: string }>;  \n// Все свойства обязательны: { a: number; b: string }  \n  \nconst obj6: T6 = { a: 5, b: "required" }; // Все свойства обязательны\n\ntype Func<T, K extends keyof T> = (a: T, b: K) => T[K];\n\ntype T1 = ReturnType<Func<{ a: number; b: string }, 'a'>>; \n// Возвращаемый тип `Func` для ключа 'a' — это тип свойства 'a', т.е. number\n\ntype T2 = Parameters<Func<{ a: number; b: string }, 'a'>>; \n// Параметры функции `Func` — это кортеж типа [{ a: number; b: string }, 'a']\n\ntype T3 = Omit<{ a: number; b: string; c: boolean }, 'b'>; \n// `Omit` убирает ключ 'b', результат: { a: number; c: boolean }\n\ntype T4 = Pick<{ a: number; b: string; c: boolean }, 'a' | 'c'>; \n// `Pick` выбирает только 'a' и 'c', результат: { a: number; c: boolean }\n\ntype T5 = Partial<{ a: number; b: string }>; \n// `Partial` делает все свойства необязательными: { a?: number; b?: string }\n\ntype T6 = Required<{ a?: number; b?: string }>; \n// `Required` делает все свойства обязательными: { a: number; b: string }	ts	t	\N	\N	2025-06-29 12:12:15.418	2025-06-29 12:12:15.418	{}	{}
cmchmr0t0007113sxnks71qu1	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	7. Числовой enum	3	6	Постановка задачи:Необходимо создать числовое перечисление Enum, в котором каждому элементу автоматически присваиваются числовые значения, начиная с 0. Также требуется продемонстрировать, что перечисление поддерживает обратное отображение, позволяя получать имя элемента по его числовому значению.\\n	enum Enum {\n    A, // Значение по умолчанию — 0\n    B, // Значение по умолчанию — 1\n}\n\nconsole.log(Enum.A); // 0, так как значения начинаются с 0 по умолчанию\n\nconsole.log(Enum[0]); // "A"	ts	t	\N	\N	2025-06-29 12:12:15.445	2025-06-29 12:12:15.445	{}	{}
cmchmqy4a006713sxd2bnwq22	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Задач", "3. ОТП БАНК"]	Рефактор задержки с while	3	17		const ExpensiveTree = memo(() => {\n  const now = performance.now();\n  while (performance.now() - now < 500) {}\n  return <p>Slow component</p>;\n});	js	f	\N	\N	2025-06-29 12:12:11.962	2025-06-29 12:12:11.962	{}	{}
cmchmqy51006813sx1q36tatg	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Задач", "4. IBS"]	Счетчик полуавтоматический	3	18		const Counter = () => {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => setCount((prev) => prev + 1), 3000);\n    return () => clearInterval(interval);\n  }, []);\n  return <button onClick={() => setCount((prev) => prev + 1)}>{count}</button>;\n};	js	f	\N	\N	2025-06-29 12:12:11.99	2025-06-29 12:12:11.99	{}	{}
cmchmqz4j006a13sxwcftoidl	cmchmqz4c006913sxf79csk08	["1. Иннотех"]	Код:	2	0	🔗 Sandbox\\n	\N	\N	f	\N	\N	2025-06-29 12:12:13.268	2025-06-29 12:12:13.268	{https://codesandbox.io/p/sandbox/innoteh-rerender-5r2dhd?file=%2Fsrc%2FApp.tsx%3A6%2C1}	{}
cmchmqz5a006b13sx8wummg9a	cmchmqz4c006913sxf79csk08	["1. Иннотех"]	Разбор:	2	1	В коде есть useEffect и useLayoutEffect, которые выполняются в разное время.Последовательность выполнения на первом рендере:\\nПри каждом клике (setCount) произойдет ререндер и перед effect-хук вызовутся cleanup:\\n\\n	render App\nrender A\nrender B\nlayout effect A\nlayout effect B\nlayout effect App\neffect A\neffect B\neffect App	js	f	\N	\N	2025-06-29 12:12:13.294	2025-06-29 12:12:13.294	{}	{}
cmchmqz5v006c13sxlu3y86qc	cmchmqz4c006913sxf79csk08	["2. Tele2"]	Код:	2	2	🔗 Sandbox\\n	\N	\N	f	\N	\N	2025-06-29 12:12:13.316	2025-06-29 12:12:13.316	{https://codesandbox.io/p/sandbox/tele2-rerender-k2hp35?file=%2Fsrc%2FApp.tsx%3A5%2C41-6%2C20}	{}
cmchmqz6l006d13sxvzyxho6m	cmchmqz4c006913sxf79csk08	["2. Tele2"]	Что в консоли:	2	3		A\nB\nC\nD\nA	js	f	\N	\N	2025-06-29 12:12:13.341	2025-06-29 12:12:13.341	{}	{}
cmchmqz77006e13sxku8xqhqc	cmchmqz4c006913sxf79csk08	["2. Tele2", "Что в консоли:"]	Разбор:	3	4	A монтируется, вызывает useEffect, который меняет state, вызывая новый ререндер.B, C, D рендерятся при первом монтировании.A ререндерится из-за useEffect, но B и C остаются без изменений, D тоже не обновляется.\\n\\n	\N	\N	f	\N	\N	2025-06-29 12:12:13.363	2025-06-29 12:12:13.363	{}	{}
cmchmqz7y006f13sx55l7eo1u	cmchmqz4c006913sxf79csk08	["3. IBS"]	Что в консоли при изменении state (0 → 1 → 2)?	3	5		useEffect(() => {\n  console.log(state)\n  return () => {\n    console.log(state)\n  }\n}, [state]);	js	f	\N	\N	2025-06-29 12:12:13.39	2025-06-29 12:12:13.39	{}	{}
cmchmqz8p006g13sx6gbxmgsl	cmchmqz4c006913sxf79csk08	["3. IBS"]	Ответ:	3	6	Разбор:\\nuseEffect выполняется после рендера.Перед новым значением вызывается cleanup, который использует предыдущее значение state.\\n\\n	0   // Первый рендер (state = 0)\n0   // Очистка перед обновлением (state = 1)\n1   // Новый эффект после обновления на state = 1\n1   // Очистка перед обновлением (state = 2)\n2   // Новый эффект после обновления на state = 2	js	f	\N	\N	2025-06-29 12:12:13.418	2025-06-29 12:12:13.418	{}	{}
cmchmqz9e006h13sxon1xzh4y	cmchmqz4c006913sxf79csk08	["3. IBS"]	Композитные компоненты	2	7		console.log(1);\nconsole.log(3);\n\nuseEffect(() => {\n  console.log(2);\n}, []);\n\nuseEffect(() => {\n  console.log(4);\n}, []);	js	f	\N	\N	2025-06-29 12:12:13.443	2025-06-29 12:12:13.443	{}	{}
cmchmqza4006i13sx64tchlqh	cmchmqz4c006913sxf79csk08	["3. IBS", "Композитные компоненты"]	Вывод в консоли:	3	8	1, 3 – при первом рендере2, 4 – при выполнении useEffect после рендера\\n\\n	1\n3\n2\n4	js	f	\N	\N	2025-06-29 12:12:13.468	2025-06-29 12:12:13.468	{}	{}
cmchmqzav006j13sxgvri8qh4	cmchmqz4c006913sxf79csk08	["4. РСХБ"]	Сколько ререндеров?	2	9		const handleClick = () => {\n  setCount(count + 1);\n  setCount(count + 1);\n  setCount(count + 1);\n};	js	f	\N	\N	2025-06-29 12:12:13.495	2025-06-29 12:12:13.495	{}	{}
cmchmqzbl006k13sxhi7r8mlr	cmchmqz4c006913sxf79csk08	["4. РСХБ", "Сколько ререндеров?"]	Ответ:	3	10	Только 1 ререндер, а значение count увеличится на 1.Причина: setCount(count + 1) использует старое значение count, а React выполняет обновления за один рендер.\\n	\N	\N	f	\N	\N	2025-06-29 12:12:13.521	2025-06-29 12:12:13.521	{}	{}
cmchmqzci006l13sxe2b9oz80	cmchmqz4c006913sxf79csk08	["4. РСХБ"]	Усложнение (с setTimeout)	2	11		const handleClick = () => {\n  setCount(count + 1);\n  setTimeout(() => {\n    setCount(count + 1);\n  }, 1000);\n  setCount(count + 1);\n};	js	f	\N	\N	2025-06-29 12:12:13.554	2025-06-29 12:12:13.554	{}	{}
cmchmqzd5006m13sx09pthuvy	cmchmqz4c006913sxf79csk08	["4. РСХБ", "Усложнение (с setTimeout)"]	Что в консоли?	3	12		Rendered  // Первый рендер\nRendered  // После первого и третьего setCount\nRendered  // После setTimeout	js	f	\N	\N	2025-06-29 12:12:13.577	2025-06-29 12:12:13.577	{}	{}
cmchmqzdw006n13sxej84u0z6	cmchmqz4c006913sxf79csk08	["4. РСХБ", "Усложнение (с setTimeout)"]	Оптимизированный вариант (через useRef)	3	13	\\n	const timeoutRef = useRef(null);\nconst handleClick = () => {\n  if (timeoutRef.current) clearTimeout(timeoutRef.current);\n\n  setCount((prev) => prev + 1);\n  setCount((prev) => prev + 1);\n\n  timeoutRef.current = setTimeout(() => {\n    setCount((prev) => prev + 1);\n  }, 1000);\n};	js	f	\N	\N	2025-06-29 12:12:13.604	2025-06-29 12:12:13.604	{}	{}
cmchmqzem006o13sx8kz7e4sl	cmchmqz4c006913sxf79csk08	["5. Тренировочные No Name"]	1. Что будет в Clicker?	2	14		setTimeout(() => {\n  setClicks(clicks + 1);\n}, 200);	js	f	\N	\N	2025-06-29 12:12:13.63	2025-06-29 12:12:13.63	{}	{}
cmchmqzfc006p13sxjdmqgqa9	cmchmqz4c006913sxf79csk08	["5. Тренировочные No Name", "1. Что будет в Clicker?"]	Ответ:	3	15	clicks всегда будет увеличиваться на 1, даже если нажимать быстро.Причина: setClicks(clicks + 1) берет clicks из замыкания (старое значение).\\n✅ Исправленный вариант (чтобы обновлялось корректно):\\n\\n	setTimeout(() => {\n  setClicks((prev) => prev + 1);\n}, 200);	js	f	\N	\N	2025-06-29 12:12:13.656	2025-06-29 12:12:13.656	{}	{}
cmchmqzg0006q13sx9gyc0ezh	cmchmqz4c006913sxf79csk08	["5. Тренировочные No Name"]	2. Последовательность логов	2	16		console.log(1);\n\nuseLayoutEffect(() => {\n  console.log(5);\n  setState((state) => state + 1);\n}, []);\n\nuseEffect(() => {\n  console.log(2);\n}, [state]);\n\nPromise.resolve().then(() => console.log(3));\n\nsetTimeout(() => console.log(4), 0);	js	f	\N	\N	2025-06-29 12:12:13.681	2025-06-29 12:12:13.681	{}	{}
cmchmr0tq007213sxy775o8ez	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	8. Исключение z	3	7	Постановка задачи:Необходимо определить новый тип Point2D, который создается на основе существующего типа Point3D, но без свойства z. Для этого используется утилита Omit<T, K>, которая позволяет исключить указанное свойство K из объекта T. Требуется убедиться, что в полученном типе Point2D остаются только свойства x и y.\\n	// Создайте новый тип `Point2D` на основе существующего типа `Point3D`, исключив из него свойство `z`.\n\ntype Point3D = {\n  x: number;\n  y: number;\n  z: number;\n};\n\ntype Point2D = Omit<Point3D, "z">;\n\n// Ожидаемый результат:\n// Point2D = {\n//   x: number;\n//   y: number;\n// }	ts	t	\N	\N	2025-06-29 12:12:15.47	2025-06-29 12:12:15.47	{}	{}
cmchmr0uf007313sx2myneobu	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	9. Обобщённая функция	3	8	Постановка задачи:Необходимо создать функцию fn, которая принимает аргумент типа T и возвращает его без изменений. Тип T ограничен объектом (extends object), что гарантирует, что переданный аргумент является объектом. Требуется убедиться, что при вызове функции переданный объект сохраняет свой тип, а возвращаемое значение соответствует входному объекту.\\n	// типизация и допись  \nfunction fn<T extends object>(arg: T): T {  \n    return arg;  \n}  \n  \n// Использование  \nconst result = fn({ id: "123", name: "Alice" });  \n  \n// Ожидаемый результат:  \n// result имеет тип { id: string; name: string }`	ts	t	\N	\N	2025-06-29 12:12:15.496	2025-06-29 12:12:15.496	{}	{}
cmchmr0v5007413sxlzkm8p1e	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	10. Опциональные свойства	3	9	Постановка задачи:Необходимо изменить интерфейс Todo, чтобы все его свойства стали необязательными. Использование ? в определении свойств делает их опциональными, что позволяет создавать объекты без обязательного указания всех полей.\\n	interface Todo {\n    title?: string;\n    description?: string;\n}	ts	t	\N	\N	2025-06-29 12:12:15.522	2025-06-29 12:12:15.522	{}	{}
cmchmr0vr007513sxwjdojk8l	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	11. Только для чтения	3	10	Постановка задачи:Необходимо изменить интерфейс Todo, чтобы его свойства стали доступными только для чтения. Использование readonly гарантирует, что после инициализации значения свойств изменить нельзя.\\n	interface Todo {\n    readonly title: string;\n    readonly description: string;\n}	ts	t	\N	\N	2025-06-29 12:12:15.544	2025-06-29 12:12:15.544	{}	{}
cmchmr0wf007613sxcgoaa6ma	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	12. Выбор title	3	11	Постановка задачи:Необходимо создать новый тип TodoTitle, который включает только свойство title из интерфейса Todo. Для этого используется утилита Pick<T, K>, позволяющая выбрать одно или несколько свойств из исходного типа.\\n	type TodoTitle = Pick<Todo, 'title'>;	ts	t	\N	\N	2025-06-29 12:12:15.567	2025-06-29 12:12:15.567	{}	{}
cmchmr0x4007713sx5dkst4z7	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	13. Ошибка в функции	3	12	Постановка задачи:Необходимо исправить функцию error, которая должна всегда завершаться с исключением. Функция должна возвращать never, так как она не имеет корректного завершения. Бросок исключения (throw) предотвращает нормальный выход из функции, что соответствует типу never.\\n	function error(): never {\n    throw new Error('ERROR!');\n}	ts	t	\N	\N	2025-06-29 12:12:15.593	2025-06-29 12:12:15.593	{}	{}
cmchmr0xt007813sxmkximtjv	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	14. Required свойства	3	13	Постановка задачи:Необходимо изменить тип MaybeProps, чтобы все его свойства стали обязательными. Для этого используется утилита Required<T>, которая убирает модификатор ? у всех полей объекта.\\n	type RequiredProps = Required<MaybeProps>;	ts	t	\N	\N	2025-06-29 12:12:15.618	2025-06-29 12:12:15.618	{}	{}
cmchmr0yk007913sx19ovo42r	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	15. Ограниченный контейнер	3	14	Постановка задачи:Необходимо создать обобщенный тип Container, который содержит одно свойство value. Допустимые типы для value должны быть ограничены string или number, что обеспечивается extends string | number.\\n	type Container<T extends string | number> = {\n    value: T;\n};	ts	t	\N	\N	2025-06-29 12:12:15.645	2025-06-29 12:12:15.645	{}	{}
cmchmr0z7007a13sxcqlyfcca	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	16.Ошибка greet	3	15	Постановка задачи:Необходимо исправить функцию greet, которая принимает объект с полем name и возвращает строку приветствия. Ошибка заключается в некорректном синтаксисе строкового шаблона в return, что требует исправления.\\n	function greet<T extends { name: string }>(entity: T): string {\n    `return `Hello, ${entity.name}!``;\n}	ts	t	\N	\N	2025-06-29 12:12:15.668	2025-06-29 12:12:15.668	{}	{}
cmchmqxtd005s13sxzri46rr8	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Приложений", "1. Списки постов"]	Техзор	3	2	РефакторЧистый\\n	\N	\N	f	\N	\N	2025-06-29 12:12:11.57	2025-06-29 12:12:11.57	{https://codesandbox.io/p/sandbox/tehzor-posty-qqwkt2?file=%2Fsrc%2FApp.tsx,https://codesandbox.io/p/sandbox/tehzor-posty-chistyy-hhw44w?file=%2Fsrc%2FApp.tsx%3A4%2C1}	{}
cmchmqxz3006013sxkrw1y4tn	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Задач", "1. СберБанк"]	useID	3	10		const createNewItem = (itemData: Omit<Item, 'id'>): Item => {\n  const id = Math.floor(Math.random() * 1000);\n  return { ...itemData, id };\n};	js	f	\N	\N	2025-06-29 12:12:11.776	2025-06-29 12:12:11.776	{}	{}
cmchmqy1i006313sx2aax58l4	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Задач", "1. СберБанк"]	Рефактор поэтапно	3	13	1: useState вместо let2: Очистка setTimeout3: Очистка подписки4: useMemo вместо useEffect5: useMemo для isAdmin\\n	\N	\N	f	\N	\N	2025-06-29 12:12:11.863	2025-06-29 12:12:11.863	{}	{}
cmchmr0zv007b13sxtv7xxs6j	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	17. Проверка Alien	3	16	Постановка задачи:Необходимо исправить функцию checkAlien, которая проверяет, является ли объект person пришельцем. Ошибка связана с проверкой типа species и недостающим условием, которое гарантирует, что person является Alien перед доступом к его уникальным свойствам.\\n	type Alien = {\n  species: string;\n  name: string;\n  planet: string;\n  isAlien: true;\n}\n\ntype Human = {\n  planet: 'Earth';\n  name: string;\n  species: 'human';\n}\n\ntype Person = Alien | Human;\n\nfunction checkAlien(person: Person) {\n    if (person.species === "human") {\n        console.log("Not an alien");\n    } else if ("isAlien" in person) {\n        console.log(person.isAlien); // Теперь TypeScript уверен, что это Alien\n    }\n}	ts	t	\N	\N	2025-06-29 12:12:15.692	2025-06-29 12:12:15.692	{}	{}
cmchmqtqo005013sxrkpg8eun	cmchmqtbe004e13sxfcavy82w	[]	22. Longest Substring Without Repeating Characters	3	21	Поиск самой длинной подстроки без повторяющихся символов\nРеализуйте функцию, которая находит длину самой длинной подстроки без повторяющихся символов.\\n	\nfunction lengthOfLongestSubstring(s) {  \n    const charIndexMap = new Map();  \n    let maxLength = 0;  \n    let windowStart = 0;  \n  \n    for (let windowEnd = 0; windowEnd < s.length; windowEnd++) {  \n        const rightChar = s[windowEnd];  \n  \n        if (charIndexMap.has(rightChar) && charIndexMap.get(rightChar) >= windowStart) {  \n            windowStart = charIndexMap.get(rightChar) + 1;  \n        }  \n  \n        charIndexMap.set(rightChar, windowEnd);  \n        maxLength = Math.max(maxLength, windowEnd - windowStart + 1);  \n    }  \n  \n    return maxLength;  \n}\n	js	t	\N	\N	2025-06-29 12:12:06.288	2025-06-29 12:12:06.288	{https://leetcode.com/problems/longest-substring-without-repeating-characters/}	{}
cmchmr115007d13sxxpuhl524	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	19. Конфликт интерфейсов	3	18	Постановка задачи:Необходимо разобраться с проблемой объединения интерфейсов, в которых одинаковые свойства имеют разные типы. Такой конфликт приводит к ошибке. Для решения можно либо убедиться, что типы совпадают, либо использовать объединение типов (string | number).\\n	interface C {\n    bar: string;\n}\ninterface C {\n    bar: number; // Ошибка: конфликт типов для свойства bar\n}\n\ninterface D {\n    bar: string | number; // Пример с объединением типов, чтобы избежать конфликта	ts	t	\N	\N	2025-06-29 12:12:15.738	2025-06-29 12:12:15.738	{}	{}
cmchmr11v007e13sxv09qmkoc	cmchmr0ob006u13sxtn2smcgd	["Пачка мини задач"]	20. Пересечение типов	3	19	Постановка задачи:Необходимо проанализировать проблему пересечения типов, в которых одно и то же свойство имеет несовместимые типы (string и number). В таких случаях результирующий тип получает значение never. Чтобы этого избежать, можно использовать объединение типов (string | number).\\n	type E = {\n    bar: string;\n}\ntype F = E & {\n    bar: number;\n}\n\ntype G = {\n    bar: string | number;\n}\ntype H = G & {\n    bar: number;\n}\nРезультат: type H = { bar: number; }	ts	t	\N	\N	2025-06-29 12:12:15.763	2025-06-29 12:12:15.763	{}	{}
cmchmr12k007f13sx0t38aix6	cmchmr0ob006u13sxtn2smcgd	["Функции (дженерики)"]	21. FormFields	2	20	Постановка задачи:Необходимо исправить ошибку в типе FormFields, который строится на основе типа Form. Ошибка заключается в использовании typeof Form, хотя Form уже является объявленным типом и может быть использован напрямую.\\n	type Form = {\n  name: string;\n  age: number;  \n};\n\ntype FormField<T> = {}; // Тип представляющий html поле\n\n\ntype FormFields = {\n    [K in keyof typeof Form]: FormField<Form[K]>; // решение\n}	ts	f	\N	\N	2025-06-29 12:12:15.789	2025-06-29 12:12:15.789	{}	{}
cmchmr13m007g13sxq5nw5iw7	cmchmr0ob006u13sxtn2smcgd	["Функции (дженерики)"]	22. getProperty 1	2	21	Постановка задачи:Необходимо реализовать функцию getProp, которая принимает объект o и строку p, представляющую ключ. Функция должна возвращать true, если ключ p существует в объекте o, и false в противном случае. Использование оператора in позволит проверить наличие свойства в объекте.\\n	function getProp<T extends object, K extends keyof T>(o: T, p: K): boolean {  \n    return p in o;  \n}  \n  \n  \nconst x = { a: 1, b: 2, c: 3 };  \n  \n  \nconsole.log(getProp(x, 'a')); \n  \nconsole.log(getProp(x, 'o'));\n	ts	t	\N	\N	2025-06-29 12:12:15.827	2025-06-29 12:12:15.827	{}	{}
cmchmr14c007h13sxx392gs9o	cmchmr0ob006u13sxtn2smcgd	["Функции (дженерики)"]	23. getProperty 2	2	22	Постановка задачи:Необходимо реализовать обобщенную функцию getProperty, которая принимает объект obj и ключ key. Ключ должен быть строго ограничен существующими свойствами объекта, что обеспечивается использованием K extends keyof T. Функция должна возвращать значение свойства объекта по переданному ключу.\\n	function getProperty<T extends object, K extends keyof T>(obj: T, key: K): T[K] {\n    return obj[key];\n}\n\nconst X = { a: 1, b: 2, c: 3, d: 4 };\n\ngetProperty(X, 'a');\ngetProperty(X, 'm'); "c" | "d"'\ngetProperty({ asd: 123 }, 'a');	ts	t	\N	\N	2025-06-29 12:12:15.853	2025-06-29 12:12:15.853	{}	{}
cmchmr150007i13sx2qa8adc9	cmchmr0ob006u13sxtn2smcgd	["Функции (дженерики)"]	24. getProperty 3	2	23	Постановка задачи:Необходимо создать функцию getProperty, которая принимает объект и ключ, возвращая значение этого ключа. Для обеспечения безопасности типов следует использовать обобщения (generics), ограничивающие ключ возможными значениями из keyof T.\\n	function getProperty<T, K extends keyof T>(obj: T, key: K): T[K] {\n    return obj[key];\n}	ts	t	\N	\N	2025-06-29 12:12:15.876	2025-06-29 12:12:15.876	{}	{}
cmchmr15p007j13sxamr0617i	cmchmr0ob006u13sxtn2smcgd	["Функции (дженерики)"]	25. getDetails	2	24	Постановка задачи:Необходимо реализовать функцию getDetails, которая принимает объект obj и отображение mapping. Функция должна возвращать массив объектов, содержащих ключи из obj и их преобразованные значения. Если для ключа указана функция преобразования в mapping, следует применять её, иначе оставлять исходное значение.\\n	type Mapping<T> = {  \n    [K in keyof T]?: (value: T[K]) => string | number;  \n};  \n  \nfunction getDetails<T extends object>(obj: T, mapping: Mapping<T> ){  \n  \n    const result: Array<{ key: keyof T; value: string | number | T[keyof T] }> = [];  \n  \n    for (const key in obj) {  \n  \n        const value = obj[key as keyof T];  \n  \n        const fn = mapping[key as keyof T];  \n  \n        result.push({ key, value: fn ? fn(value) : value });  \n    }  \n  \n    return result;  \n}	ts	t	\N	\N	2025-06-29 12:12:15.902	2025-06-29 12:12:15.902	{}	{}
cmchmr173007l13sxqf6o26rc	cmchmr0ob006u13sxtn2smcgd	["Функции (дженерики)"]	27. getInfo 2	2	26	Постановка задачи:Необходимо реализовать функцию getInfo, которая принимает объект product, первый уровень ключей path и второй уровень ключей nextPath. Функция должна возвращать значение, соответствующее product[path][nextPath], с учетом корректной типизации через обобщенные параметры (generics).\\n	// Типизировать функцию\nconst product = {  \n    name: {  \n        title: "Bag",  \n        description: "A stylish leather bag"  \n    },  \n    details: {  \n        price: 700,  \n        currency: "USD"  \n    },  \n    info: {  \n        weight: 100,  \n        dimensions: {  \n            length: 30,  \n            width: 20,  \n            height: 10  \n        }  \n    }};  \n  \nfunction getInfo(product, path, nextPath) {  \n    return product[path][nextPath];  \n}  \n  \n// const title = getInfo(product, "name", "title"); // "Bag"  \n  \n// const price = getInfo(product, "details", "price"); // 700  \n  \n// const weight = getInfo(product, "info", "weight"); // 100	ts	f	\N	\N	2025-06-29 12:12:15.951	2025-06-29 12:12:15.951	{}	{}
cmchmr17s007m13sx25eq1v1u	cmchmr0ob006u13sxtn2smcgd	["Функции (дженерики)"]	28. callback	2	27	Постановка задачи:Необходимо реализовать функцию callback, которая принимает объект obj и ключ key, принадлежащий keyof T. Функция должна возвращать значение свойства obj[key], при этом обеспечивая строгую типизацию.\\n	const obj321 = {\n    key: '',\n    value: '',\n};\n\nfunction callback<T extends object, K extends keyof T>(obj: T, key: K): T[K] {\n    return obj[key];\n}\n\ncallback(obj321, 'key'); // Returns: string	ts	t	\N	\N	2025-06-29 12:12:15.976	2025-06-29 12:12:15.976	{}	{}
cmchmr18i007n13sxp08u1mdk	cmchmr0ob006u13sxtn2smcgd	["Функции (дженерики)"]	29. fn (infer)	2	28	Постановка задачи:Необходимо реализовать функцию fn, которая принимает объект типа A | B. В зависимости от переданного типа функция должна возвращать boolean, если передан объект типа A, и number, если объект типа B. Использование оператора extends в сочетании с infer позволит корректно вывести возвращаемый тип.\\n	type A = { foo: boolean };\ntype B = { bar: number };\n\ntype C = A | B;\n\nfunction fn<T extends C>(data: T): T extends A ? boolean : number {\n    // Implementation here\n}\n\nconst a: A = { foo: true };\nconst b: B = { bar: 42 };\n\nconst c = fn(a); // c: boolean\nconst d = fn(b); // d: number	ts	f	\N	\N	2025-06-29 12:12:16.002	2025-06-29 12:12:16.002	{}	{}
cmchmr194007o13sxaali466f	cmchmr0ob006u13sxtn2smcgd	["Функции (дженерики)"]	30. myAsyncFunction	2	29	Постановка задачи:Необходимо реализовать асинхронную функцию myAsyncFunction, которая принимает строку url и возвращает Promise<string>. Функция должна быть корректно вызвана с последующей обработкой результата с помощью .then().\\n	const myAsyncFunction = async (url: string): Promise<string> => {\n    return url;\n};\n\nmyAsyncFunction("123").then(result => console.log(result));	ts	t	\N	\N	2025-06-29 12:12:16.025	2025-06-29 12:12:16.025	{}	{}
cmchmr19t007p13sx4stioo1c	cmchmr0ob006u13sxtn2smcgd	["Функции (дженерики)"]	31. merge	2	30	Постановка задачи:Необходимо реализовать функцию merge, которая объединяет два объекта obj1 и obj2 в один. Возвращаемый объект должен содержать все свойства обоих объектов, сохраняя типизацию. Для этого используется пересечение типов (T & U).\\n	function merge(obj1, obj2) {  \n    return {  \n        ...obj1,  \n        ...obj2,  \n    };  \n}  \n  \nconst res = merge({a: 5}, {b: {a: 10, mes: 'test'}})	js	f	\N	\N	2025-06-29 12:12:16.049	2025-06-29 12:12:16.049	{}	{}
cmchmr1ao007q13sxk2twnxvp	cmchmr0ob006u13sxtn2smcgd	["Функции (дженерики)"]	32. join	2	31	Постановка задачи:Необходимо создать функцию join, которая принимает строку-разделитель и массив строковых аргументов. Функция должна объединять переданные строки с использованием разделителя, обеспечивая правильную типизацию входных данных.\\n	// Implement the join function with proper typing for variable arguments.\n\nfunction join(separator, ...parts) {\n  // Implementation here\n}\n\nconst result = join('-', 'a', 'b', 'c'); // Should return 'a-b-c'	ts	f	\N	\N	2025-06-29 12:12:16.081	2025-06-29 12:12:16.081	{}	{}
cmchmr1bf007r13sxxutaupnw	cmchmr0ob006u13sxtn2smcgd	["Функции (дженерики)"]	33. pluck	2	32	Постановка задачи:Необходимо реализовать функцию pluck, которая принимает массив объектов items и ключ key. Функция должна возвращать массив значений, соответствующих key во всех объектах массива, с корректной типизацией с использованием K extends keyof T.\\n	// Type the pluck function using generics and indexed access types.\n\nfunction pluck<T, K extends keyof T>(items: T[], key: K): T[K][] {\n  // Implementation here\n}\n\nconst users = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\n\nconst names = pluck(users, 'name'); // Should be ['Alice', 'Bob']	ts	f	\N	\N	2025-06-29 12:12:16.107	2025-06-29 12:12:16.107	{}	{}
cmchmr1c4007s13sxsqn0l3js	cmchmr0ob006u13sxtn2smcgd	["Кастомные Utility"]	35. Exclude + Omit	2	33	Постановка задачи:Необходимо создать обобщенный тип MyExclude, который удаляет из объединения T все типы, совпадающие с U. Затем на его основе реализовать MyOmit, который позволяет исключить из объекта T свойства, указанные в K, аналогично стандартному Omit<T, K>.\\n	// 1. Exclude  \n  \n// type MyExclude ...  \n  \n// Test Case  \ntype ExcludableValues = MyExclude<'a' | 'b' | 'c', 'a'>; // -> 'b' | 'c'  \n  \n  \n  \ninterface User {  \n    name: string;  \n    age: number;  \n}  \n  \n  \n// type MyOmit ...  \n  \n  \n  \ninterface User2 extends MyOmit<User, 'age'> {}  \n  \n// Test Case  \n  \nconst user: User2 = {  \n    name: "Alice" // допустимо  \n    // age не существует в User2};	ts	f	\N	\N	2025-06-29 12:12:16.132	2025-06-29 12:12:16.132	{}	{}
cmchmr1cs007t13sx1f91pe76	cmchmr0ob006u13sxtn2smcgd	["Кастомные Utility"]	37. Omit	2	34	Постановка задачи:Необходимо реализовать тип MyOmit, который исключает из объекта T свойства, указанные в K. Для реализации используется Exclude<keyof T, K>, который удаляет ключи K из ключей T, а затем создается новый объект с оставшимися свойствами.\\n	interface User {\n    name: string;\n    age: number;\n}\n\n// Test Case\n\nconst user: User2 = {\n    name: "Alice" // допустимо\n    // age не существует в User2\n};	ts	f	\N	\N	2025-06-29 12:12:16.157	2025-06-29 12:12:16.157	{}	{}
cmchmr1dh007u13sx41x0l64j	cmchmr0ob006u13sxtn2smcgd	["Кастомные Utility"]	38. Readonly	2	35	Постановка задачи:Необходимо реализовать тип MyReadonly, который делает все свойства объекта T доступными только для чтения. Это аналог встроенного типа Readonly<T>, при котором каждое свойство объекта T становится readonly.\\n	// 2. Readonly  \n  \ninterface Todo {  \n    title: string  \n    description: string  \n    completed: boolean  \n    author: string  \n}  \n  \n// type MyReadonly ...  \n  \ntype ReadonlyTodo = MyReadonly<Todo>  \n\n/* ->  \n  {    readonly title: string;    readonly description: string;    readonly completed: boolean;    readonly author: string;  }*/\n	ts	f	\N	\N	2025-06-29 12:12:16.182	2025-06-29 12:12:16.182	{}	{}
cmchmr1e5007v13sxy0df0ckd	cmchmr0ob006u13sxtn2smcgd	["Кастомные Utility"]	39. Partial	2	36	Постановка задачи:Необходимо реализовать тип MyPartial, который делает все свойства объекта T необязательными. Это аналог встроенного Partial<T>, который преобразует каждый ключ T в необязательный с помощью ?.\\n	\n// Определение MyPartial\ntype MyPartial<T> = {\n  [P in keyof T]?: T[P];\n};\n\n// Пример использования:\ninterface User {\n  name: string;\n  age: number;\n}\n\ntype PartialUser = MyPartial<User>;\n\n// Теперь PartialUser будет эквивалентен следующему:\ntype PartialUserEquivalent = {\n  name?: string;\n  age?: number;\n};\n\n	ts	t	\N	\N	2025-06-29 12:12:16.206	2025-06-29 12:12:16.206	{}	{}
cmchmqzgp006r13sxip8zs7v1	cmchmqz4c006913sxf79csk08	["5. Тренировочные No Name", "2. Последовательность логов"]	Ответ в консоли:	3	17	\\n	1  // Первый рендер\n5  // useLayoutEffect\n2  // useEffect после первого рендера\n1  // Второй рендер (из-за setState)\n2  // useEffect после второго рендера\n3  // Promise (микрозадача)\n4  // setTimeout (макрозадача)\n4  // setTimeout (повторная макрозадача)	js	f	\N	\N	2025-06-29 12:12:13.705	2025-06-29 12:12:13.705	{}	{}
cmchmqzhd006s13sxmgfd3qi8	cmchmqz4c006913sxf79csk08	["5. Тренировочные No Name"]	3. Последовательность логов	2	18		console.log(1);\n\nuseEffect(() => {\n  console.log(2);\n  return () => {\n    console.log(3);\n  };\n}, [count]);\n\nuseEffect(() => {\n  console.log(4);\n  setCount((count) => count + 1);\n}, []);	js	f	\N	\N	2025-06-29 12:12:13.73	2025-06-29 12:12:13.73	{}	{}
cmchmqzi2006t13sxxis51zpx	cmchmqz4c006913sxf79csk08	["5. Тренировочные No Name", "3. Последовательность логов"]	Ответ в консоли:	3	19		1  // Первый рендер\n5  // `Child` useEffect\n2  // `useEffect` компонента\n4  // `setCount`, инициирующий ререндер\n1  // Второй рендер (из-за `setCount`)\n6  // Очистка `Child` useEffect (count обновился)\n3  // Очистка `useEffect` (count обновился)\n5  // `Child` useEffect снова\n2  // `useEffect` снова	\N	f	\N	\N	2025-06-29 12:12:13.754	2025-06-29 12:12:13.754	{}	{}
cmchmr1ew007w13sx1s54jea6	cmchmr0ob006u13sxtn2smcgd	["Кастомные Utility"]	40. Parameters	2	37	Постановка задачи:Необходимо реализовать тип MyParameters, который извлекает типы аргументов функции T и возвращает их в виде кортежа. Это аналог встроенного Parameters<T>, который позволяет получить типы параметров переданной функции.\\n	\n// 3. Parameters\ntype MyParameters<T extends (...args: any[]) => any> = T extends (...args: infer P) => any ? P : never;\n\n// Test Case\nconst foo = (arg1: string, arg2: number): void => {};\n\ntype FooParameters = MyParameters<typeof foo>; // -> [string, number]\n\n	ts	t	\N	\N	2025-06-29 12:12:16.232	2025-06-29 12:12:16.232	{}	{}
cmchmr1fj007x13sxnpciy9d3	cmchmr0ob006u13sxtn2smcgd	["Types"]	41. MyAwaited	2	38	Постановка задачи:Необходимо реализовать тип MyAwaited, который извлекает тип значения, возвращаемого из Promise<T>. Если переданный тип T является Promise<U>, то MyAwaited<T> должен возвращать U, в противном случае — T.\\n	// Define MyAwaited to extract the resolved type from a Promise.\n\ntype MyAwaited<T> = /* Implement here */;\n\ntype Example = Promise<number>;\n\ntype Result = MyAwaited<Example>; // Expected to be number	ts	f	\N	\N	2025-06-29 12:12:16.255	2025-06-29 12:12:16.255	{}	{}
cmchmr1ga007y13sxxar2d3s0	cmchmr0ob006u13sxtn2smcgd	["Types"]	42. last (infer)	2	39	Постановка задачи:Необходимо реализовать тип Last<T>, который получает последний элемент переданного массива T. Для этого используется оператор infer, который позволяет извлечь последний элемент через кортежное представление массива.\\n	\ntype Last<T extends any[]> = T extends [...infer _, infer L] ? L : never;\n\ntype arr1 = ["a", "b", "c"];\ntype arr2 = [3, 2, 1];\n\ntype tail1 = Last<arr1>; // 'c'\ntype tail2 = Last<arr2>; // 1\n\n	ts	t	\N	\N	2025-06-29 12:12:16.282	2025-06-29 12:12:16.282	{}	{}
cmchmr1gx007z13sxc5iyix0y	cmchmr0ob006u13sxtn2smcgd	["Types"]	43. concat	2	40	Постановка задачи:Необходимо реализовать тип Concat<T, U>, который объединяет два массива T и U в один. В результате должен получиться новый массив, содержащий элементы T, а затем элементы U\\n	\ntype Concat<T extends any[], U extends any[]> = [...T, ...U];\n\ntype Result = Concat<[1], [2]>; // [1, 2]\n\n	ts	t	\N	\N	2025-06-29 12:12:16.305	2025-06-29 12:12:16.305	{}	{}
cmchmqxu4005t13sx45ik3lk5	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Приложений", "1. Списки постов"]	Урбантех	3	3	Посты с авторами, оценкой и таймером.\\nРефакторЧистый\\n	\N	\N	f	\N	\N	2025-06-29 12:12:11.596	2025-06-29 12:12:11.596	{https://codesandbox.io/p/sandbox/urbanteh-posty-h2zq63?file=%2Fsrc%2FApp.tsx%3A8%2C39,https://codesandbox.io/p/sandbox/urbanteh-posty-chistyy-forked-qkvhdn?file=%2Fsrc%2FApp.tsx%3A144%2C1}	{}
cmchmr1ho008013sxqk63lspa	cmchmr0ob006u13sxtn2smcgd	["Types"]	44. Template Literal Types	2	41	Постановка задачи:Необходимо использовать шаблонные строковые типы (Template Literal Types) в TypeScript. Требуется создать строковые типы, которые динамически комбинируют значения на основе переданных типов, например, для формирования уникальных строковых идентификаторов.\\n	// Создаем строковые типы с динамической подстановкой\ntype Prefix = "user" | "admin" | "guest";\ntype ID<T extends string> = `${T}_id`;\n\ntype UserID = ID<"user">; // "user_id"\ntype AdminID = ID<"admin">; // "admin_id"\n\n// Использование нескольких шаблонных типов\ntype UserRole<T extends Prefix> = `${T}_role`;\n\ntype Role1 = UserRole<"user">; // "user_role"\ntype Role2 = UserRole<"admin">; // "admin_role"	ts	t	\N	\N	2025-06-29 12:12:16.332	2025-06-29 12:12:16.332	{}	{}
cmchmr1id008113sx5u9uwh0s	cmchmr0ob006u13sxtn2smcgd	["Types"]	45. Типы-контейнеры с условными ограничениями	2	42	Постановка задачи:Необходимо реализовать контейнерные типы с условными ограничениями. Такие типы позволяют накладывать условия на параметры (generics) и изменять их структуру в зависимости от переданного типа.\\n	// Создаем контейнер с ограничением типов\ntype Container<T extends string | number> = {\n    value: T;\n};\n\n// Пример использования\nconst stringContainer: Container<string> = { value: "Hello" };\nconst numberContainer: Container<number> = { value: 42 };\n\n// Ошибка: тип boolean не соответствует ограничению\n// const invalidContainer: Container<boolean> = { value: true }; 	ts	t	\N	\N	2025-06-29 12:12:16.357	2025-06-29 12:12:16.357	{}	{}
cmchmr1jg008213sx2hrz79f3	cmchmr0ob006u13sxtn2smcgd	["Types"]	46. Рекурсивные условные типы	2	43	Постановка задачи:Необходимо реализовать рекурсивные условные типы, которые позволяют создавать вложенные структуры, например, для глубокого преобразования типов или рекурсивного обхода сложных типов.\\n	// Рекурсивный тип для преобразования всех свойств объекта в строки\ntype DeepStringify<T> = {\n    [K in keyof T]: T[K] extends object ? DeepStringify<T[K]> : string;\n};\n\ninterface Data {\n    id: number;\n    details: {\n        name: string;\n        age: number;\n    };\n}\n\ntype StringifiedData = DeepStringify<Data>;\n\n// Ожидаемый результат:\n// type StringifiedData = {\n//     id: string;\n//     details: {\n//         name: string;\n//         age: string;\n//     };\n// }	ts	t	\N	\N	2025-06-29 12:12:16.396	2025-06-29 12:12:16.396	{}	{}
cmchmr1k6008313sxbdp2imsn	cmchmr0ob006u13sxtn2smcgd	["Types"]	47. Key Remapping в отображаемых типах	2	44	Постановка задачи:Необходимо реализовать тип RemapKeys<T>, который изменяет имена всех ключей в объекте T, добавляя к ним префикс new_. Для этого используется Key Remapping в отображаемых типах, позволяющий переименовывать ключи при их копировании.\\n	\ntype RemapKeys<T> = {  \n    [K in keyof T as `new_${K & string}`]: T[K];  \n};  \n  \ninterface Original {  \n    id: number;  \n    name: string;  \n}  \n  \ntype Remapped = RemapKeys<Original>;  \n  \n// Ожидаемый результат:  \n// {  \n//   new_id: number;  \n//   new_name: string;  \n// }\n\n	ts	t	\N	\N	2025-06-29 12:12:16.422	2025-06-29 12:12:16.422	{}	{}
cmchmr1kw008413sxort0ebwq	cmchmr0ob006u13sxtn2smcgd	["Types"]	48. Создание глубоких неизменяемых типов	2	45	Постановка задачи:Необходимо реализовать DeepReadonly<T>, который рекурсивно делает все свойства объекта T неизменяемыми. Если свойство является объектом, оно также должно становиться readonly, сохраняя структуру.\\n	\ntype DeepReadonly<T> = {\n  readonly [K in keyof T]: T[K] extends object ? DeepReadonly<T[K]> : T[K];\n};\n\ninterface NestedObject {\n  a: {\n    b: {\n      c: string;\n    };\n  };\n}\n\nconst obj: DeepReadonly<NestedObject> = {\n  a: {\n    b: {\n      c: 'value',\n    },\n  },\n};\n\nobj.a.b.c = 'new value'; // Ошибка: нельзя изменить свойство только для чтения\n\n\n	ts	t	\N	\N	2025-06-29 12:12:16.448	2025-06-29 12:12:16.448	{}	{}
cmchmr1lz008513sx9z6d85p5	cmchmr0ob006u13sxtn2smcgd	["Types"]	49. Пользовательские типы с условными свойствами	2	46	Постановка задачи:Необходимо реализовать ConditionalProperties<T, Condition>, который извлекает имена свойств объекта T, чьи значения соответствуют типу Condition. Например, можно выделить только строковые свойства из интерфейса Example.\\n	\ntype ConditionalProperties<T, Condition> = {\n  [K in keyof T]: T[K] extends Condition ? K : never;\n}[keyof T];\n\ninterface Example {\n  id: number;\n  title: string;\n  isActive: boolean;\n}\n\ntype StringProperties = ConditionalProperties<Example, string>; // 'title'\n\n	ts	t	\N	\N	2025-06-29 12:12:16.488	2025-06-29 12:12:16.488	{}	{}
cmchmr275008713sxs8v3jgwd	cmchmr26x008613sx5x0ok8za	["Основные"]	Partial	2	0	Делает все поля объекта необязательными (optional).\\n	type Person = {\n  name: string;\n  age: number;\n};\n\ntype PersonPartial = Partial<Person>;\n// Эквивалентно: { name?: string; age?: number; }\n\ntype MyPartial<T> = {\n  [K in keyof T]?: T[K];\n};	ts	f	\N	\N	2025-06-29 12:12:17.249	2025-06-29 12:12:17.249	{}	{}
cmchmr27t008813sx72tsfx6n	cmchmr26x008613sx5x0ok8za	["Основные"]	Omit	2	1	Назначение: Создаёт тип, исключающий из T указанные ключи (K).\\n	type Person = {\n  name: string;\n  age: number;\n  isAdmin: boolean;\n};\n\ntype WithoutAdmin = Omit<Person, 'isAdmin'>;\n// Эквивалентно: { name: string; age: number; }\n\n\n\ntype MyOmit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;	ts	f	\N	\N	2025-06-29 12:12:17.274	2025-06-29 12:12:17.274	{}	{}
cmchmr28i008913sx6yjj4xid	cmchmr26x008613sx5x0ok8za	["Основные"]	Pick	2	2	Назначение: Создаёт тип, выбирающий из T только указанные ключи (K).\\n	type Person = {\n  name: string;\n  age: number;\n  isAdmin: boolean;\n};\n\ntype NameAndAge = Pick<Person, 'name' | 'age'>;\n// Эквивалентно: { name: string; age: number; }\n\n\ntype MyPick<T, K extends keyof T> = {\n  [P in K]: T[P];\n};	ts	f	\N	\N	2025-06-29 12:12:17.299	2025-06-29 12:12:17.299	{}	{}
cmchmr29z008b13sxcw55eepm	cmchmr26x008613sx5x0ok8za	["Основные"]	Record	2	4	Назначение: Создаёт тип объекта, где каждый ключ из K (обычно строка/число/символ) маппится на значение типа T.\\n	type Roles = 'admin' | 'user' | 'guest';\n\ntype RolePermissions = Record<Roles, boolean>;\n// Эквивалентно: {\n//   admin: boolean;\n//   user: boolean;\n//   guest: boolean;\n// }\n\n\ntype MyRecord<K extends keyof any, T> = {\n  [P in K]: T;\n};	ts	f	\N	\N	2025-06-29 12:12:17.352	2025-06-29 12:12:17.352	{}	{}
cmchmr2aq008c13sxuq561krv	cmchmr26x008613sx5x0ok8za	["Основные"]	Exclude	2	5	Назначение: Исключает из объединения (union) T все типы, которые приспособимы к U.\\n	type AllTypes = string | number | boolean;\n\ntype JustStringsAndNumbers = Exclude<AllTypes, boolean>;\n// Эквивалентно: string | number\n\n\ntype MyExclude<T, U> = T extends U ? never : T;	ts	f	\N	\N	2025-06-29 12:12:17.378	2025-06-29 12:12:17.378	{}	{}
cmchmr2bj008d13sxriv78o5r	cmchmr26x008613sx5x0ok8za	["Основные"]	Extract	2	6	Назначение: Извлекает из объединения T только те типы, которые приспособимы к U.\\n	type AllTypes = string | number | boolean;\n\ntype OnlyStrings = Extract<AllTypes, string>;\n// Эквивалентно: string\n\ntype MyExtract<T, U> = T extends U ? T : never;	ts	f	\N	\N	2025-06-29 12:12:17.407	2025-06-29 12:12:17.407	{}	{}
cmchmr2c6008e13sxgl6oi6ho	cmchmr26x008613sx5x0ok8za	["Основные"]	Required	2	7	Назначение: Делает все поля объекта обязательными (required).\\n	type PersonOptional = {\n  name?: string;\n  age?: number;\n};\n\ntype PersonRequired = Required<PersonOptional>;\n// Эквивалентно: { name: string; age: number; }\n\n\ntype MyRequired<T> = {\n  [K in keyof T]-?: T[K];\n};	ts	f	\N	\N	2025-06-29 12:12:17.431	2025-06-29 12:12:17.431	{}	{}
cmchmr2cy008f13sxbrrom45w	cmchmr26x008613sx5x0ok8za	["Остальные"]	NonNullable	2	8	Назначение: Исключает null и undefined из типа T.\\n	type NullableString = string | null | undefined;\n\ntype NonNullStr = NonNullable<NullableString>;\n// Эквивалентно: string\n\ntype MyNonNullable<T> = T extends null | undefined ? never : T;	ts	f	\N	\N	2025-06-29 12:12:17.459	2025-06-29 12:12:17.459	{}	{}
cmchmr2e0008g13sxo83xm7j0	cmchmr26x008613sx5x0ok8za	["Остальные"]	ReturnType	2	9	Назначение: Получает тип возвращаемого значения из типа функции T.\\n	function getName(): string {\n  return 'Alice';\n}\n\ntype NameReturnType = ReturnType<typeof getName>;\n// Эквивалентно: string\n\n\ntype MyReturnType<T extends (...args: any[]) => any> =\n  T extends (...args: any[]) => infer R ? R : never;	ts	f	\N	\N	2025-06-29 12:12:17.497	2025-06-29 12:12:17.497	{}	{}
cmchmr2ep008h13sxdgcqkbh9	cmchmr26x008613sx5x0ok8za	["Остальные"]	Parameters	2	10	Назначение: Получает кортеж типов параметров функции T.\\n	function greet(name: string, age: number): void {}\n\ntype GreetParams = Parameters<typeof greet>;\n// Эквивалентно: [name: string, age: number]\n\n\ntype MyParameters<T extends (...args: any) => any> =\n  T extends (...args: infer P) => any ? P : never;	ts	f	\N	\N	2025-06-29 12:12:17.522	2025-06-29 12:12:17.522	{}	{}
cmchmr2fi008i13sx19o2l7up	cmchmr26x008613sx5x0ok8za	["Остальные"]	InstanceType	2	11	Назначение: Получает тип экземпляра (instance) из конструктора T.\\n	class User {\n  constructor(public name: string, public age: number) {}\n}\n\ntype UserInstance = InstanceType<typeof User>;\n// Эквивалентно: User\n\n\ntype MyInstanceType<T extends new (...args: any) => any> =\n  T extends new (...args: any) => infer R ? R : any;	ts	f	\N	\N	2025-06-29 12:12:17.55	2025-06-29 12:12:17.55	{}	{}
cmchmr2g5008j13sxyd6ncu93	cmchmr26x008613sx5x0ok8za	["Остальные"]	ConstructorParameters	2	12	Назначение: Извлекает типы параметров конструктора.\\n	class User {\n  constructor(public name: string, public age: number) {}\n}\n\ntype UserConstructorParams = ConstructorParameters<typeof User>;\n// Эквивалентно: [name: string, age: number]\n\n\ntype MyConstructorParameters<T extends abstract new (...args: any) => any> =\n  T extends abstract new (...args: infer P) => any ? P : never;	ts	f	\N	\N	2025-06-29 12:12:17.573	2025-06-29 12:12:17.573	{}	{}
cmchmr2gw008k13sxw2covafl	cmchmr26x008613sx5x0ok8za	["Остальные"]	ThisType	2	13	Назначение: Позволяет задать контекст this для объектов (обычно полезно в комбинации с --noImplicitThis или при написании деклараций для JS-библиотек).\\nПример (используется редко на практике и не работает напрямую в обычных интерфейсах без контекста, но в config-объектах может быть полезно):\\n	type Obj = ThisType<{ message: string }>;\n\nconst obj: Obj = {\n  printMessage() {\n    // Здесь `this` считается { message: string }\n    console.log(this.message);\n  },\n};\n\n\n// В "чистом" виде нельзя реализовать без магии TS, но условно:\ntype MyThisType<T> = { /* сборная заглушка */ };	ts	f	\N	\N	2025-06-29 12:12:17.6	2025-06-29 12:12:17.6	{}	{}
cmchmqxuu005u13sxakshy5lr	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Приложений", "1. Списки постов"]	ООО МобайлДевелопмент	3	4	РефакторЧистый\\n	\N	\N	f	\N	\N	2025-06-29 12:12:11.622	2025-06-29 12:12:11.622	{https://codesandbox.io/p/sandbox/ooo-mobayldevelopment-userlist-3247sx,https://codesandbox.io/p/sandbox/mobayldevelopment-userlist-chistyy-forked-8zg57g}	{}
cmchmqufx005313sxthpdzsml	cmchmquew005113sx7kzt5mf2	["Очень простые (базовые операции и манипуляции)"]	2. findMinMax	3	1	Постановка задачи:Реализуйте функцию, которая принимает массив чисел и возвращает объект, содержащий минимальное и максимальное значение из этого массива.\\nИнициализируйте переменные min и max первым элементом массива.Пройдите по массиву начиная со второго элемента и сравните каждый элемент с текущими значениями min и max.Если текущий элемент меньше min, обновите значение min.Если текущий элемент больше max, обновите значение max.Верните объект с ключами min и max, содержащими найденные значения.\\n	function (arr) {\n    let min = arr[0];\n    let max = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\n    return { min, max };\n}	js	f	\N	\N	2025-06-29 12:12:07.197	2025-06-29 12:12:07.197	{}	{}
cmchmqv6z005613sx0afe3txr	cmchmqv6t005513sxb364k7m8	[]	1. Функция возвращает другую функцию, которая всегда возвращает строку "HelloWorld"	3	0	Создайте функцию, которая при вызове возвращает другую функцию. Эта вложенная функция должна принимать любые аргументы, но неизменно возвращать строку "HelloWorld".\\n	\nfunction HelloWorld() {\n\treturn function (...args) {\n\treturn 'HelloWorld'\n\t} \n}\n\n\nconst fn = HelloWorld()\nconsole.log(fn())	js	t	\N	\N	2025-06-29 12:12:08.172	2025-06-29 12:12:08.172	{}	{}
cmchmqv7p005713sxjfp3ibhk	cmchmqv6t005513sxb364k7m8	[]	2. Функция, ограничивающая количество положительных ответов	3	1	Напишите функцию canGetCount(n), которая принимает число n и возвращает новую функцию. Эта вложенная функция при вызове n раз возвращает 'yes', а затем всегда 'no'.\\n	function canGetCount(n:number) {  \n    let count = 0  \n    return () => {  \n        if (count < n) {  \n            count++  \n            return 'no'  \n        } else {  \n            return 'yes'  \n        }  \n    }}  \n  \nconst a = canGetCount(2)  \n  \nconsole.log(a())  \nconsole.log(a())  \nconsole.log(a())  \nconsole.log(a())	js	t	\N	\N	2025-06-29 12:12:08.197	2025-06-29 12:12:08.197	{}	{}
cmchmqv8g005813sx2l4xjhdx	cmchmqv6t005513sxb364k7m8	[]	3. Функция для вывода значения счётчика при достижении заданного предела	3	2	Создайте функцию, принимающую число maxIncrementNumber. Она должна возвращать другую функцию, которая увеличивает внутренний счётчик и выводит его значение в консоль при достижении maxIncrementNumber.\\n	const callback = (maxIncrementNumber) => {  \n    let count = 0;  \n    return () => {  \n        count++  \n        if (count === maxIncrementNumber) console.log(count)  \n    }  \n}  \n  \nconst cb = callback(4);  \n  \ncb();  \ncb();  \ncb();  \ncb();	js	t	\N	\N	2025-06-29 12:12:08.224	2025-06-29 12:12:08.224	{}	{}
cmchmqv95005913sxb60m26ow	cmchmqv6t005513sxb364k7m8	[]	4. Функция-счётчик, увеличивающая значение при каждом вызове	3	3	Реализуйте функцию createCounter(n), которая принимает число n и возвращает другую функцию. Эта вложенная функция при каждом вызове увеличивает значение счётчика и возвращает его.\\n	function createCounter(n: number): () => number {  \n    let count = n  \n    console.log(count)  \n    return () => count++  \n}  \n  \n  \nconst counter = createCounter(10)  \nconsole.log(counter())  \nconsole.log(counter())  \nconsole.log(counter())	js	t	\N	\N	2025-06-29 12:12:08.249	2025-06-29 12:12:08.249	{}	{}
cmchmqv9x005a13sxu2i7b9yy	cmchmqv6t005513sxb364k7m8	[]	5. Функция-счётчик с возможностью инкремента, декремента и сброса	3	4	Напишите функцию createCounter(init), принимающую начальное значение init. Возвращаемый объект должен содержать три метода:\\nincrement(), увеличивающий значение на 1,decrement(), уменьшающий значение на 1,reset(), сбрасывающий значение к init.\\n	\N	\N	f	\N	\N	2025-06-29 12:12:08.277	2025-06-29 12:12:08.277	{}	{}
cmchmqqtr003k13sx2yzci2f2	cmchmqqo2003b13sxajtzyb2z	[]	9. goSberPro	3	8	Добавление уровня вложенности в объект\nНапишите функцию, которая добавляет в объект специальное поле "sber_pro", отражающее глубину вложенности каждого уровня.\\n	\nfunction goSberPro(obj, depth = 0) {  \n    obj['sber_pro'] = depth;  \n  \n    for (const key in obj) {  \n        if (typeof obj[key] === 'object' && obj[key] !== null) {  \n            goSberPro(obj[key], depth + 1);  \n        }  \n    }  \n    return obj;  \n}  \n  \n// Тестовые данные  \nconst input = { a: 1, b: 2, c: { d: { e: 3 } } };  \n  \nconst result = goSberPro(input);  \n  \nconsole.log(result);  \n  \n/* Ожидаемый вывод:  \n{  \n  a: 1,  b: 2,  c: {    d: {      e: 3,      sber_pro: 2    },    sber_pro: 1  },  sber_pro: 0}  \n*/\n	js	t	\N	\N	2025-06-29 12:12:02.511	2025-06-29 12:12:02.511	{}	{}
cmchmql02000213sxo9helgd4	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	2. findMinMax	3	1	Постановка задачи:Реализуйте функцию, которая принимает массив чисел и возвращает объект, содержащий минимальное и максимальное значение из этого массива.\\nИнициализируйте переменные min и max первым элементом массива.Пройдите по массиву начиная со второго элемента и сравните каждый элемент с текущими значениями min и max.Если текущий элемент меньше min, обновите значение min.Если текущий элемент больше max, обновите значение max.Верните объект с ключами min и max, содержащими найденные значения.\\n	function (arr) {\n    let min = arr[0];\n    let max = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\n    return { min, max };\n}	js	t	\N	\N	2025-06-29 12:11:54.962	2025-06-29 12:11:54.962	{}	{}
cmchmql3c000613sxd880k7yr	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	6. Chunk Array	3	5	Постановка задачи:Реализуйте функцию, которая делит массив на подмассивы (чанки) заданного размера. Если элементы массива не могут быть равномерно распределены по чанкам, последний чанк может содержать меньше элементов, чем задано. Задача должна быть решена двумя способами:\\nС использованием цикла for:Проходите по массиву с шагом, равным размеру чанка.Используйте метод slice для создания подмассива и добавляйте его в результирующий массив.С использованием метода reduce:Итерируйте по массиву, добавляя элементы в последний чанк, если он не достиг нужного размера.Если последний чанк заполнен или отсутствует, создавайте новый чанк.\\n	// for  \nconst chunk = (arr, size) => {  \n    const result = [];  \n    for (let i = 0; i < arr.length; i += size) {  \n        result.push(arr.slice(i, i + size));  \n    }  \n    return result;  \n};  \n  \n// reduce  \nconst chunk2 = (arr, size) => {  \n    return arr.reduce((chunkedArray, element) => {  \n        const lastChunk = chunkedArray[chunkedArray.length - 1];  \n        if (!lastChunk || lastChunk.length === size) {  \n            chunkedArray.push([element]);  \n        } else {  \n            lastChunk.push(element);  \n        }  \n        return chunkedArray;  \n    }, []);  \n};  \n  \nconst arr = [1, 2, 3, 4, 5, 6, 7];  \nconst size = 1;  \n  \nconsole.log(chunk(arr, size));  \nconsole.log(chunk2(arr, size));	js	t	\N	\N	2025-06-29 12:11:55.08	2025-06-29 12:11:55.08	{https://leetcode.com/problems/chunk-array/}	{}
cmchmqkyq000113sxnxb8cy7h	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	1. sum	3	0	Постановка задачи:Напишите функцию sum, которая принимает массив чисел, в том числе содержащий вложенные массивы, и возвращает сумму всех чисел в массиве. Для решения задачи используйте рекурсию для обработки вложенных массивов.\\n	function sum(arr) {  \n    return arr.reduce((total, item) => {  \n        if (Array.isArray(item)) {  \n            return total + sum(item); // рекурсивно суммируем вложенные массивы  \n        }  \n        return total + item; // добавляем число к общей сумме  \n    }, 0);  \n}\n  \n// Пример использования  \nconsole.log(sum([1, 1, 1, [2, 1], [1, [1, [1], 3]]])); // Вернет 12	js	t	\N	\N	2025-06-29 12:11:54.914	2025-06-29 12:11:54.914	{}	{Газпромбанк,DatsTeam}
cmchmql44000713sxntop8gqh	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	7. getRandom	3	6	Постановка задачи:Реализуйте функцию, которая создает массив длины n, состоящий из уникальных случайных чисел. Для этого необходимо:\\nНаписать функцию getRand, генерирующую случайное число с одним знаком после запятой.Использовать объект Set для хранения уникальных значений.Добавлять в Set новые случайные числа до тех пор, пока его размер не станет равен n.Преобразовать Set в массив и вернуть его.Вывести результат работы функции для проверки.\\n	// создать массив длины n, состоящий из уникальных случайных элементов  \nconst getRand = () => Math.random().toFixed(1);  \n  \nfunction getUniqRandN(n) {  \n    const uniqueNumbers = new Set();  \n  \n    while (uniqueNumbers.size < n) {  \n        uniqueNumbers.add(getRand());  \n    }  \n  \n    return Array.from(uniqueNumbers);  \n}  \n  \nconsole.log(getUniqRandN(5));	js	t	\N	\N	2025-06-29 12:11:55.109	2025-06-29 12:11:55.109	{}	{}
cmchmql5q000913sxrqmzfs5o	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	9. between	3	8	Постановка задачи:Реализуйте функцию between, которая принимает два числа: min и max, и возвращает другую функцию. Возвращаемая функция принимает значение и проверяет, находится ли оно строго между min и max (то есть больше min и меньше max). Это позволяет использовать функцию between в качестве фильтра для массивов, чтобы выбрать значения, удовлетворяющие заданному диапазону.\\n	function between(min, max) {\n    return function (value) {\n        return value > min && value < max;\n    };\n}\n\nconst arr = [1, 2, 3, 4, 5, 6];\n\n// Используем between(3, 6) как фильтр\nconst range = arr.filter(between(3, 6));\n\nconsole.log(range); // [4, 5]	js	t	\N	\N	2025-06-29 12:11:55.167	2025-06-29 12:11:55.167	{}	{}
cmchmqxwz005x13sxqta49x10	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Приложений", "3. Другие Мини-Приложения"]	Altenar Todo	3	7	РефакторЧистый\\n	\N	\N	f	\N	\N	2025-06-29 12:12:11.7	2025-06-29 12:12:11.7	{https://codesandbox.io/p/sandbox/altenar-todo-2n4kjj?file=%2Fsrc%2FApp.tsx%3A15%2C13,https://codesandbox.io/p/sandbox/altenar-todo-chistyy-qqt7t4?file=%2Fsrc%2Fapi.ts%3A24%2C5}	{}
cmchmql9a000d13sxoce7rp5x	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	13. mergeUnique	3	12	Постановка задачи:Реализуйте функцию, которая объединяет два отсортированных массива чисел, возвращая новый массив, содержащий только уникальные элементы из обоих массивов, также отсортированные по возрастанию. Задачу можно решить двумя способами:\\nС использованием Set:Объедините два массива с помощью оператора расширения, затем создайте Set для удаления дубликатов и преобразуйте его обратно в массив. После этого отсортируйте массив.С использованием двух указателей:Используйте два указателя для одновременного обхода обоих отсортированных массивов, добавляя элементы в результат, избегая дубликатов.\\n	// Решение 1: С использованием Set  \nfunction mergeUniqueWithSet(arr1, arr2) {  \n    return [...new Set([...arr1, ...arr2])].sort((a, b) => a - b);  \n}  \n  \n// Решение 2: С использованием двух указателей  \nfunction mergeUniqueWithPointers(arr1, arr2) {  \n    const result = [];  \n    let i = 0;  \n    let j = 0;  \n  \n    while (i < arr1.length && j < arr2.length) {  \n        if (arr1[i] === arr2[j]) {  \n            if (result[result.length - 1] !== arr1[i]) {  \n                result.push(arr1[i]);  \n            }  \n            i++;  \n            j++;  \n        } else if (arr1[i] < arr2[j]) {  \n            if (result[result.length - 1] !== arr1[i]) {  \n                result.push(arr1[i]);  \n            }  \n            i++;  \n        } else {  \n            if (result[result.length - 1] !== arr2[j]) {  \n                result.push(arr2[j]);  \n            }  \n            j++;  \n        }  \n    }  \n  \n    while (i < arr1.length) {  \n        if (result[result.length - 1] !== arr1[i]) {  \n            result.push(arr1[i]);  \n        }  \n        i++;  \n    }  \n          \n    while (j < arr2.length) {  \n        if (result[result.length - 1] !== arr2[j]) {  \n            result.push(arr2[j]);  \n        }  \n        j++;  \n    }  \n  \n    return result;  \n}  \n  \nconst array1 = [1, 3, 4, 6];  \nconst array2 = [1, 3, 7, 9];  \n  \nconsole.log("Using Set:", mergeUniqueWithSet(array1, array2));        // [1, 3, 4, 6, 7, 9]  \nconsole.log("Using Pointers:", mergeUniqueWithPointers(array1, array2)); // [1, 3, 4, 6, 7, 9]	js	t	\N	\N	2025-06-29 12:11:55.295	2025-06-29 12:11:55.295	{}	{}
cmchmqla5000e13sxv2mr9olf	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	14. mergeSortedArrays	3	13	Постановка задачи:Напишите функцию, которая принимает два отсортированных массива чисел и объединяет их в один отсортированный массив. Решение можно реализовать двумя способами:\\nОбъединить два массива, а затем отсортировать полученный массив.Использовать два указателя для одновременного обхода обоих массивов и последовательного добавления элементов в результирующий массив, что позволяет объединить массивы за линейное время.\\n	const mergeSortedArrays = (arr1, arr2) =>  \n    [...arr1, ...arr2].sort((a, b) => a - b);  \n  \nconsole.log(mergeSortedArrays([1, 3, 5], [2, 4, 6])); // Ожидаемый результат: [1, 2, 3, 4, 5, 6]  \n  \n  \nconst mergeSortedArrays2 = (arr1, arr2) => {  \n    const result = [];  \n    let i = 0, j = 0;  \n  \n    while (i < arr1.length && j < arr2.length) {  \n        if (arr1[i] < arr2[j]) {  \n            result.push(arr1[i++]);  \n        } else {  \n            result.push(arr2[j++]);  \n        }  \n    }  \n    // Добавляем оставшиеся элементы из arr1 или arr2  \n    return result.concat(arr1.slice(i)).concat(arr2.slice(j));  \n};  \n  \n// Пример использования:  \nconsole.log(mergeSortedArrays2([1, 3, 5], [2, 4, 6])); // Ожидаемый результат: [1, 2, 3, 4, 5, 6]	js	t	\N	\N	2025-06-29 12:11:55.325	2025-06-29 12:11:55.325	{}	{}
cmchmqlay000f13sx3ompzbyz	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	15. Sort Array By Parity	3	14	Постановка задачи:Дан массив чисел nums. Необходимо отсортировать массив так, чтобы все чётные числа оказались в начале массива, а нечётные — в конце. При этом порядок чисел внутри групп не имеет значения. Решение реализовано с использованием двух указателей (in-place):\\nИнициализируйте два указателя: left для начала массива и right для конца.Перемещайте указатель left вправо до тех пор, пока не встретите нечётное число.Перемещайте указатель right влево до тех пор, пока не встретите чётное число.Если left меньше right, поменяйте местами элементы по этим индексам.Повторяйте процесс до встречи указателей, затем верните модифицированный массив.\\n	function sortArrayByParity(nums) {  \n    let left = 0;  \n    let right = nums.length - 1;  \n  \n    while (left < right) {  \n        // Сдвигаем левый указатель вправо, пока он не найдет четное число  \n        while (left < right && nums[left] % 2 === 0) {  \n            left++;  \n        }  \n        // Сдвигаем правый указатель влево, пока он не найдет нечетное число  \n        while (left < right && nums[right] % 2 !== 0) {  \n            right--;  \n        }  \n        // Меняем местами найденные нечетное и четное числа  \n        if (left < right) {  \n            [nums[left], nums[right]] = [nums[right], nums[left]];  \n            left++;  \n            right--;  \n        }  \n    }    \n    return nums;  \n}  \n  \nconsole.log(sortArrayByParity([3, 1, 2, 4])); // [4, 2, 3, 1]  \nconsole.log(sortArrayByParity([1, 2, 3, 4]));  // [4, 2, 3, 1]  \nconsole.log(sortArrayByParity([2, 4, 6, 8]));  // [2, 4, 6, 8]  \nconsole.log(sortArrayByParity([1, 3, 5, 7]));  // [1, 3, 5, 7]	js	t	\N	\N	2025-06-29 12:11:55.355	2025-06-29 12:11:55.355	{https://leetcode.com/problems/sort-array-by-parity/}	{}
cmchmqlcj000h13sxm0m5rek0	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	17. findMaxIn2DArray	3	16	Постановка задачи:Напишите функцию findMaxIn2DArray, которая принимает двумерный массив чисел и находит максимальный элемент вместе с его позицией. Функция должна возвращать объект с двумя свойствами:\\nel — максимальный найденный элемент.index — массив из двух чисел, представляющих индексы максимального элемента в двумерном массиве (первый индекс — номер подмассива, второй — позиция элемента в подмассиве).\\n	function findMaxIn2DArray(arr) {  \n    let maxElement = -Infinity;  \n    let maxIndex = [-1, -1];  \n  \n    for (let i = 0; i < arr.length; i++) {  \n        const subArray = arr[i];  \n        for (let j = 0; j < subArray.length; j++) {  \n            if (subArray[j] > maxElement) {  \n                maxElement = subArray[j];  \n                maxIndex = [i, j];  \n            }  \n        }  \n    }  \n    return { el: maxElement, index: maxIndex };  \n}  \n  \nconst array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];  \n  \nconsole.log(findMaxIn2DArray(array)); // { el: 9, index: [2, 2] }	js	t	\N	\N	2025-06-29 12:11:55.411	2025-06-29 12:11:55.411	{}	{}
cmchmqldf000i13sxl2tueqs2	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	18. getLastDecisions	3	17	Постановка задачи:Даны два массива объектов, представляющих решения, где каждый объект имеет поля id и result. Массивы отсортированы по возрастанию id. Необходимо объединить два массива, выбирая последние (наибольшие id) решения так, чтобы итоговый массив содержал k самых последних решений. Решение должно осуществляться с использованием двух указателей, которые двигаются с конца каждого массива, после чего результат разворачивается для получения правильного порядка.\\n	const getDecisions1 = [  \n    { id: 1, result: 'approved' },  \n    { id: 3, result: 'waiting' },  \n    { id: 15, result: 'approved' },  \n    { id: 20, result: 'approved' },  \n    { id: 26, result: 'waiting' },  \n    { id: 30, result: 'approved' },  \n];  \n  \nconst getDecisions2 = [  \n    { id: 2, result: 'approved' },  \n    { id: 4, result: 'waiting' },  \n    { id: 14, result: 'approved' },  \n    { id: 16, result: 'waiting' },  \n    { id: 23, result: 'waiting' },  \n    { id: 31, result: 'approved' },  \n    { id: 32, result: 'approved' },  \n];  \n  \nconst getLastDecisions = (decisions1, decisions2, k) => {  \n    let merged = [];  \n    let i = decisions1.length - 1;  \n    let j = decisions2.length - 1;  \n  \n    while ((i >= 0 || j >= 0) && merged.length < k) {  \n        const id1 = i >= 0 ? decisions1[i].id : -Infinity;  \n        const id2 = j >= 0 ? decisions2[j].id : -Infinity;  \n  \n        if (id1 > id2) {  \n            merged.push(decisions1[i]);  \n            i--;  \n        } else {  \n            merged.push(decisions2[j]);  \n            j--;  \n        }  \n    }  \n    return merged.reverse();  \n};  \n  \nconsole.log(getLastDecisions(getDecisions1, getDecisions2, 6));  \n  \n// Ожидаемый вывод =>   \n// [  \n//     { id: 20, result: 'approved' },  \n//     { id: 23, result: 'waiting' },  \n//     { id: 26, result: 'waiting' },  \n//     { id: 30, result: 'approved' },  \n//     { id: 31, result: 'approved' },  \n//     { id: 32, result: 'approved' }  \n// ]	js	t	\N	\N	2025-06-29 12:11:55.443	2025-06-29 12:11:55.443	{}	{}
cmchmqxxp005y13sxvl7ox684	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Приложений", "3. Другие Мини-Приложения"]	Scroll & Random	3	8	(Используется в МойСклад, Цезио)\\nРефакторЧистый\\n	\N	\N	f	\N	\N	2025-06-29 12:12:11.725	2025-06-29 12:12:11.725	{https://codesandbox.io/p/sandbox/scroll-random-v5wx4y?file=%2Fsrc%2FApp.tsx%3A10%2C51,https://codesandbox.io/p/sandbox/scroll-random-chistyy-kl6m3v?file=%2Fsrc%2FApp.js}	{}
cmchmqlhb000n13sxwf3rqx82	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	23. Majority Element	3	22	Постановка задачи:Дан массив чисел, в котором гарантированно существует элемент, встречающийся более чем половину раз. Необходимо найти этот "мажоритарный" элемент. Задачу можно решить различными способами:\\nАлгоритм Бойера-Мура:Используйте переменную candidate для хранения кандидата и счетчик count.Проходите по массиву: если count равен 0, выбирайте текущий элемент как нового кандидата. Если текущий элемент равен кандидату, увеличивайте count, иначе уменьшайте его.Использование Map:Считайте вхождения каждого элемента, используя объект Map.Как только для элемента количество вхождений превысит половину длины массива, возвращайте этот элемент.Однострочная сортировка:Отсортируйте массив, затем мажоритарный элемент будет находиться в позиции Math.floor(nums.length / 2).Рекурсивное деление (divide and conquer):Разделите массив пополам, рекурсивно найдите мажоритарный элемент для каждой части, затем объедините результаты, определяя, какой из кандидатов встречается чаще в объединённом массиве.\\n	// бойер мур  \nconst majorityElement = nums => {  \n    let candidate, count = 0;  \n  \n    for (const num of nums) {  \n        if (count === 0) candidate = num;  \n        count += (num === candidate) ? 1 : -1;  \n    }  \n    return candidate;  \n};  \n  \nconst nums1 = [3, 2, 3];  \nconsole.log(majorityElement(nums1));  \n  \n// map  \nconst majorityElement2 = nums => {  \n    const counts = new Map();  \n  \n    for (const num of nums) {  \n        counts.set(num, (counts.get(num) || 0) + 1);  \n        if (counts.get(num) > nums.length / 2) return num;  \n    }  \n};  \n  \nconst nums3 = [1, 1, 1, 2, 3, 1, 1, 4, 1];  \nconsole.log(majorityElement2(nums3));  \n  \n// one-liner sorting  \nconst majorityElement3 = nums => (nums.sort((a, b) => a - b))[Math.floor(nums.length / 2)];  \n  \nconst nums4 = [5, 4, 4, 4, 5, 4, 4, 4];  \nconsole.log(majorityElement3(nums4));  \n  \n// рекурсивное деление (divide and conqueror)  \nconst majorityElementRec = (nums, start, end) => {  \n    if (start === end) return nums[start];  \n  \n    const mid = Math.floor((end - start) / 2) + start;  \n    const left = majorityElementRec(nums, start, mid);  \n    const right = majorityElementRec(nums, mid + 1, end);  \n  \n    if (left === right) return left;  \n  \n    const leftCount = nums.slice(start, end + 1).filter(num => num === left).length;  \n    const rightCount = nums.slice(start, end + 1).filter(num => num === right).length;  \n  \n    return leftCount > rightCount ? left : right;  \n};  \n  \nconst majorityElement4 = nums => majorityElementRec(nums, 0, nums.length - 1);  \n  \nconst nums6 = [7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5];  \nconsole.log(majorityElement4(nums6));	js	t	\N	\N	2025-06-29 12:11:55.584	2025-06-29 12:11:55.584	{https://leetcode.com/problems/majority-element/}	{}
cmchmqlij000o13sx21l4h3o9	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	24. Best Time to Buy and Sell Stock	3	23	Постановка задачи:Дан массив цен на акции, где каждый элемент представляет цену акции в определённый день. Необходимо определить максимальную прибыль, которую можно получить, купив акцию в один день и продав в более поздний день. Если получение прибыли невозможно, функция должна вернуть 0. Решение задачи реализовано с использованием двух указателей:\\nОдин указатель (left) используется для определения дня покупки.Второй указатель (right) используется для определения дня продажи.Проход по массиву начинается с первого дня покупки, а затем определяется, стоит ли обновлять день покупки, если текущая цена меньше предыдущей.На каждом шаге вычисляется потенциальная прибыль, и обновляется максимальная прибыль, если найденная прибыль больше предыдущей.\\n	const maxProfit = (prices) => {  \n    let left = 0; // День покупки  \n    let right = 1; // День продажи  \n    let max_profit = 0;  \n    while (right < prices.length) {  \n        if (prices[left] < prices[right]) {  \n            let profit = prices[right] - prices[left]; // Текущая прибыль  \n            max_profit = Math.max(max_profit, profit);  \n        } else {  \n            left = right;  \n        }  \n        right++;  \n    }  \n    return max_profit;  \n};	js	t	\N	\N	2025-06-29 12:11:55.627	2025-06-29 12:11:55.627	{https://leetcode.com/problems/best-time-to-buy-and-sell-stock/}	{}
cmchmqlja000p13sxp9gf9g00	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	25. Intersection of Two Arrays II	3	24	Постановка задачи:Даны два массива чисел. Необходимо найти их пересечение, при этом каждый элемент в результирующем массиве должен встречаться столько раз, сколько он встречается в обоих исходных массивах. Для решения задачи можно использовать несколько подходов:\\nMap:Создать карту для подсчета вхождений элементов первого массива.Проитерироваться по второму массиву и, если элемент присутствует в карте (и его количество больше нуля), добавить его в результат и уменьшить счетчик.Reduce:С помощью метода reduce создать объект-счетчик для первого массива.Отфильтровать второй массив, уменьшая счетчик при нахождении совпадений.Два указателя (при условии, что массивы отсортированы):Отсортировать оба массива.Использовать два указателя для нахождения общих элементов.\\n	// map  \nfunction intersect(nums1, nums2) {  \n    const map = new Map();  \n    const result = [];  \n  \n    for (let num of nums1) {  \n        map.set(num, (map.get(num) || 0) + 1);  \n    }  \n  \n    for (let num of nums2) {  \n        if (map.get(num) > 0) {  \n            result.push(num);  \n            map.set(num, map.get(num) - 1);  \n        }  \n    }  \n    return result;  \n}  \n  \nconst nums1 = [1, 2, 2, 1];  \nconst nums2 = [2, 2];  \nconsole.log(intersect(nums1, nums2));  \n  \n// reduce  \nfunction intersectWithReduce(nums1, nums2) {  \n    const counts = nums1.reduce((acc, num) => {  \n        acc[num] = (acc[num] || 0) + 1;  \n        return acc;  \n    }, {});  \n  \n    return nums2.filter(num => {  \n        if (counts[num] > 0) {  \n            counts[num]--;  \n            return true;  \n        }  \n        return false;  \n    });  \n}  \n  \nconst nums3 = [4, 9, 5];  \nconst nums4 = [9, 4, 9, 8, 4];  \nconsole.log(intersectWithReduce(nums3, nums4));  \n  \n// if sorted, two pointers  \nfunction intersectSorted(nums1, nums2) {  \n    nums1.sort((a, b) => a - b);  \n    nums2.sort((a, b) => a - b);  \n    const result = [];  \n  \n    let i = 0;  \n    let j = 0;  \n  \n    while (i < nums1.length && j < nums2.length) {  \n        if (nums1[i] === nums2[j]) {  \n            result.push(nums1[i]);  \n            i++;  \n            j++;  \n        } else if (nums1[i] < nums2[j]) {  \n            i++;  \n        } else {  \n            j++;  \n        }  \n    }  \n    return result;  \n}  \n  \nconst nums5 = [4, 5, 9];  \nconst nums6 = [9, 9, 8, 4];  \nconsole.log(intersectSorted(nums5, nums6));	js	t	\N	\N	2025-06-29 12:11:55.655	2025-06-29 12:11:55.655	{https://leetcode.com/problems/intersection-of-two-arrays-ii/}	{}
cmchmqlk1000q13sx7ur96vdb	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	26. groupByCity	3	25	Постановка задачи:Обработайте массив объектов, представляющих людей с их именами и городами, и распределите их по группам на основе города. Ожидаемый результат должен представлять собой объект, где ключами являются названия городов, а значениями — либо строка (если в городе один человек), либо массив имен (если в городе несколько человек). В данном примере:\\nРеализуйте несколько вариантов решения, используя методы reduce, forEach, цикл for...of, Map и метод find.\\n	{\n    'Moscow': [ 'Alex', 'Ivan' ],\n    'New York': 'Joe',\n    'Berlin': 'Johan'\n}	js	f	\N	\N	2025-06-29 12:11:55.682	2025-06-29 12:11:55.682	{}	{}
cmchmqlz6001913sxw1l87kqp	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	44.1. createKeyValueObject	3	44	Постановка задачи:Напишите функцию createKeyValueObject, которая принимает массив объектов, где каждый объект имеет поля name и value. Функция должна вернуть объект, в котором ключи — это значения свойства name, а значения — это соответствующие свойства value.\\n	function createKeyValueObject(arr) {  \n    return arr.reduce((acc, item) => {  \n        acc[item.name] = item.value;  \n        return acc;  \n    }, {});  \n}  \n  \n// Пример использования  \nconst data = [  \n    { name: 'width', value: 10 },  \n    { name: 'height', value: 20 },  \n    { name: 'test', value: 30 }  \n];  \n  \nconsole.log(createKeyValueObject(data)); // {width: 10, height: 20, test: 30}	js	t	\N	\N	2025-06-29 12:11:56.227	2025-06-29 12:11:56.227	{}	{PortalBilet}
cmchmqlq1000y13sxms5dhc9n	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	34. rangeExtraction	3	33	Постановка задачи:Реализуйте функцию, которая принимает отсортированный массив чисел (включая отрицательные) и преобразует его в строковое представление, где последовательные числа, составляющие диапазон из трёх и более элементов, сворачиваются в формат "start-end". Если последовательность короче, числа выводятся отдельно, разделённые запятыми.\\nАлгоритм решения:\\nИнициализируйте переменные для отслеживания начала (rangeStart) и конца (rangeEnd) текущего диапазона.Проходите по массиву и, если текущее число является продолжением диапазона (равно rangeEnd + 1), обновляйте rangeEnd.Если последовательность прерывается, проверьте длину диапазона:Если диапазон содержит три или более числа, добавьте строку в формате "start-end" в результат.Иначе, добавьте каждое число из диапазона отдельно.Повторите для всех элементов массива и верните результат в виде строки, где части разделены запятыми.\\n	function rangeExtraction(list) {  \n    const result = [];  \n    let rangeStart = list[0];  \n    let rangeEnd = list[0];  \n  \n    for (let i = 1; i <= list.length; i++) {  \n        const current = list[i];  \n        if (current === rangeEnd + 1) {  \n            rangeEnd = current;  \n        } else {  \n            if (rangeEnd - rangeStart >= 2) {  \n                result.push(`${rangeStart}-${rangeEnd}`);  \n            } else {  \n                for (let j = rangeStart; j <= rangeEnd; j++) {  \n                    result.push(j.toString());  \n                }  \n            }  \n            rangeStart = current;  \n            rangeEnd = current;  \n        }  \n    }  \n    return result.join(',');  \n}  \n  \nconst range = [-10, -9, -8, -7, -3, -2, -1, 0, 1, 3, 4, 5, 14, 15, 17, 18, 19, 20];  \nconsole.log(rangeExtraction(range));	js	t	\N	\N	2025-06-29 12:11:55.898	2025-06-29 12:11:55.898	{}	{}
cmchmqxyd005z13sx7crzl4eb	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Приложений", "3. Другие Мини-Приложения"]	Счетчик полуавтоматический	3	9	(Используется в Qugo, IBS)\\nРефакторЧистый\\n	\N	\N	f	\N	\N	2025-06-29 12:12:11.75	2025-06-29 12:12:11.75	{https://codesandbox.io/p/sandbox/ibs-schetchik-poluavtomat-fldfxg?file=%2Fsrc%2FApp.tsx%3A25%2C1,https://codesandbox.io/p/sandbox/ibs-schetchik-poluavtomat-chistyy-forked-phrpqq?file=%2Fsrc%2FApp.tsx%3A38%2C1}	{}
cmchmqlqs000z13sxatl52z5i	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	35. Kth Largest Element in an Array	3	34	Постановка задачи:Дан массив чисел nums и целое число k. Необходимо найти k-й по величине элемент в массиве.Обратите внимание, что k-й по величине элемент означает k-й элемент в отсортированном по убыванию массиве, то есть наибольший элемент имеет позицию 1.\\nРеализуйте решение задачи двумя подходами:\\nСортировка:Отсортируйте массив по убыванию и верните элемент с индексом k - 1.Quickselect:Используйте алгоритм Quickselect, который в среднем работает за O(n), для нахождения k-го по величине элемента, интерпретируя задачу как поиск (n-k)-го по величине элемента в отсортированном по возрастанию массиве.\\n	// Подход 1: Сортировка\nfunction findKthLargestSort(nums, k) {\n    nums.sort((a, b) => b - a); // сортировка по убыванию\n    return nums[k - 1];\n}\n\n// Пример использования:\nconst nums1 = [3, 2, 1, 5, 6, 4];\nconst k1 = 2;\nconsole.log(findKthLargestSort(nums1, k1)); // Ожидаемый вывод: 5\n\n\n// Подход 2: Quickselect\nfunction findKthLargest(nums, k) {\n    const pos = nums.length - k; // k-й по величине элемент является (n-k)-ым по величине, если массив отсортирован по возрастанию\n    return quickselect(nums, 0, nums.length - 1, pos);\n}\n\nfunction quickselect(nums, left, right, pos) {\n    if (left === right) return nums[left];\n    \n    const pivotIndex = partition(nums, left, right);\n    \n    if (pivotIndex === pos) {\n        return nums[pivotIndex];\n    } else if (pivotIndex < pos) {\n        return quickselect(nums, pivotIndex + 1, right, pos);\n    } else {\n        return quickselect(nums, left, pivotIndex - 1, pos);\n    }\n}\n\nfunction partition(nums, left, right) {\n    const pivot = nums[right];\n    let storeIndex = left;\n    for (let i = left; i < right; i++) {\n        if (nums[i] < pivot) { // ищем элементы меньше опорного\n            [nums[i], nums[storeIndex]] = [nums[storeIndex], nums[i]];\n            storeIndex++;\n        }\n    }\n    [nums[storeIndex], nums[right]] = [nums[right], nums[storeIndex]];\n    return storeIndex;\n}\n\n// Пример использования:\nconst nums2 = [3, 2, 1, 5, 6, 4];\nconst k2 = 2;\nconsole.log(findKthLargest(nums2, k2)); // Ожидаемый вывод: 5	js	t	\N	\N	2025-06-29 12:11:55.924	2025-06-29 12:11:55.924	{https://leetcode.com/problems/kth-largest-element-in-an-array/}	{}
cmchmqlri001013sxrzjgiua0	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	36. Top K Frequent Elements	3	35	Постановка задачи:Дан массив чисел nums и число k. Необходимо найти k наиболее часто встречающихся элементов в массиве. Решение задачи реализовано с использованием метода "bucket sort" (корзин), где:\\nСначала создается карта частот, где ключ — элемент массива, а значение — количество его вхождений.Затем создается массив "корзин", где индекс соответствует частоте, а в каждой корзине хранятся элементы с данной частотой.Начиная с самой высокой корзины, собираются элементы до тех пор, пока не будет получено k элементов.\\n	function topKFrequent(nums, k) {  \n    // Шаг 1: Создаем карту частоты  \n    const frequencyMap = {};  \n    for (let num of nums) {  \n        frequencyMap[num] = (frequencyMap[num] || 0) + 1;  \n    }  \n  \n    // Шаг 2: Создаем массив "корзин" для частот  \n    const buckets = Array(nums.length + 1).fill().map(() => []);  \n  \n    // Шаг 3: Заполняем корзины, где индекс — это частота  \n    for (let num in frequencyMap) {  \n        const freq = frequencyMap[num];  \n        buckets[freq].push(Number(num));  \n    }  \n  \n    // Шаг 4: Собираем k самых частых элементов, начиная с корзины самой высокой частоты  \n    const result = [];  \n    for (let i = buckets.length - 1; i >= 0 && result.length < k; i--) {  \n        if (buckets[i].length > 0) {  \n            result.push(...buckets[i]);  \n        }  \n    }  \n    // Возвращаем только первые k элементов, чтобы точно получить результат нужной длины  \n    return result.slice(0, k);  \n}  \n  \n// Примеры использования  \nconsole.log(topKFrequent([1,1,1,2,2,3], 2)); // Ожидаемый результат: [1, 2]  \nconsole.log(topKFrequent([1], 1));           // Ожидаемый результат: [1]	js	t	\N	\N	2025-06-29 12:11:55.95	2025-06-29 12:11:55.95	{https://leetcode.com/problems/top-k-frequent-elements/}	{}
cmchmqls8001113sxa3f4gwed	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	37. findDeepestMinElement	3	36	Постановка задачи:Дан вложенный массив чисел, который может содержать элементы и другие вложенные массивы. Необходимо найти элемент с минимальным значением, который находится на самой глубокой вложенности, и вернуть пару: [максимальная глубина, минимальный элемент на этой глубине]. Если на самой глубокой глубине встречается несколько элементов, выбирается минимальный из них.\\nАлгоритм решения:\\nИспользуем рекурсивный обход массива с параметром текущей глубины.Для каждого не массивного элемента обновляем переменные, если:Текущая глубина больше предыдущей максимальной глубины, илиГлубина равна максимальной, но элемент меньше текущего минимального.Возвращаем массив из двух значений: [максимальная глубина, минимальный элемент на этой глубине].\\n	const arr2 = [1, [[20, 1, [101]], 2], [[-2], [[102, 100]]]];  \n  \nfunction findDeepestMinElement(array) {  \n    let minElement = Infinity;  \n    let maxDepth = -1;  \n  \n    function traverse(arr, currentDepth) {  \n        arr.forEach(item => {  \n            if (Array.isArray(item)) {  \n                // Рекурсивный вызов для вложенных массивов, увеличивая глубину  \n                traverse(item, currentDepth + 1);  \n            } else {  \n                // Если текущая глубина больше максимальной, обновляем maxDepth и minElement  \n                if (currentDepth > maxDepth) {  \n                    maxDepth = currentDepth;  \n                    minElement = item;  \n                } else if (currentDepth === maxDepth && item < minElement) {  \n                    // Если глубина равна максимальной, выбираем минимальное значение  \n                    minElement = item;  \n                }  \n            }  \n        });  \n    }  \n  \n    // Запускаем рекурсивный обход с начальной глубиной 0  \n    traverse(array, 0);  \n  \n    return [maxDepth, minElement];  \n}  \n  \nconsole.log(findDeepestMinElement(arr2)); // Ожидаемый результат: [3, 100]	js	t	\N	\N	2025-06-29 12:11:55.977	2025-06-29 12:11:55.977	{}	{}
cmchmqltf001213sx54rfq140	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	38. getMatchedNumbers	3	37	Постановка задачи:Напишите функцию getMatchedNumbers, которая принимает два отсортированных массива чисел и возвращает объект с двумя свойствами:\\nmatched: массив чисел, которые присутствуют в обоих массивах (уникальные значения).different: массив чисел, которые встречаются только в одном из массивов (также уникальные).\\nРешение должно использовать два указателя для одновременного обхода обоих массивов и затем добавлять оставшиеся элементы.\\n	function getMatchedNumbers(arr1, arr2) {  \n    const matched = new Set();  \n    const different = new Set();  \n    let i = 0;  \n    let j = 0;  \n  \n    while (i < arr1.length && j < arr2.length) {  \n        if (arr1[i] === arr2[j]) {  \n            // Добавляем в matched, если элемент совпадает  \n            matched.add(arr1[i]);  \n            i++;  \n            j++;  \n        } else if (arr1[i] < arr2[j]) {  \n            // Добавляем уникальные элементы из arr1 в different  \n            different.add(arr1[i]);  \n            i++;  \n        } else {  \n            // Добавляем уникальные элементы из arr2 в different  \n            different.add(arr2[j]);  \n            j++;  \n        }  \n    }  \n  \n    // Добавляем оставшиеся элементы из arr1 и arr2 в different  \n    while (i < arr1.length) {  \n        different.add(arr1[i]);  \n        i++;  \n    }  \n  \n    while (j < arr2.length) {  \n        different.add(arr2[j]);  \n        j++;  \n    }  \n  \n    // Преобразуем Set в массив для результата  \n    return { matched: Array.from(matched), different: Array.from(different) };  \n}  \n  \n// Пример использования  \nconsole.log(getMatchedNumbers([1, 3, 3, 5], [3, 5, 5, 6]));  \n// Ожидаемый результат: { matched: [3, 5], different: [1, 6] }	js	t	\N	\N	2025-06-29 12:11:56.019	2025-06-29 12:11:56.019	{}	{}
cmchmqxzu006113sx27tons3w	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Задач", "1. СберБанк"]	State	3	11		setState((prev) => prev + 1);	js	f	\N	\N	2025-06-29 12:12:11.802	2025-06-29 12:12:11.802	{}	{}
cmchmqxvj005v13sxilaer6bu	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Приложений", "2. Счетчики"]	Сибур	3	5	Counter + сброс на ESC.\\nРефакторЧистый\\n	\N	\N	f	\N	\N	2025-06-29 12:12:11.647	2025-06-29 12:12:11.647	{https://codesandbox.io/p/sandbox/sibur-kaunter-f25j2s?file=%2Fsrc%2FApp.tsx%3A27%2C39,https://codesandbox.io/p/sandbox/sibur-kaunter-chistyy-2jzhcr?file=%2Fsrc%2FApp.tsx%3A44%2C36}	{}
cmchmqlu5001313sxcd9jhn6h	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	39. Flatten Deeply Nested Array	3	38	Постановка задачи:Дан вложенный массив, который может содержать элементы на произвольном уровне вложенности. Необходимо написать функцию, которая рекурсивно "расплющивает" массив, возвращая новый массив, содержащий все элементы в одном уровне.\\n	function flattenDeep(arr) {\n    return arr.reduce((acc, item) => {\n        if (Array.isArray(item)) {\n            acc.push(...flattenDeep(item));\n        } else {\n            acc.push(item);\n        }\n        return acc;\n    }, []);\n}\n\n// Пример использования:\nconst nestedArray = [1, [2, [3, [4]], 5], 6];\nconsole.log(flattenDeep(nestedArray)); // Ожидаемый результат: [1, 2, 3, 4, 5, 6]	js	t	\N	\N	2025-06-29 12:11:56.046	2025-06-29 12:11:56.046	{https://leetcode.com/problems/flatten-deeply-nested-array/}	{}
cmchmqlv3001413sxnb4idd2w	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	40. Flatten Deeply Nested Array	3	39	Постановка задачи:Дан вложенный массив, который может содержать элементы на произвольном уровне вложенности. Необходимо "расплющить" массив до указанной глубины (по умолчанию 1) двумя способами:\\nИтерационноРекурсивно\\nНиже приведены два решения:\\nRecursive approach:\\nIteration approach:\\n	function flatRecursive(arr, depth = 1) {\n  const result = [];\n\n  function flatten(currentArray, currentDepth) {\n    for (let item of currentArray) {\n      if (Array.isArray(item) && currentDepth < depth) {\n        flatten(item, currentDepth + 1);\n      } else {\n        result.push(item);\n      }\n    }\n  }\n\n  flatten(arr, 0);\n  return result;\n}	js	t	\N	\N	2025-06-29 12:11:56.08	2025-06-29 12:11:56.08	{https://leetcode.com/problems/flatten-deeply-nested-array/}	{}
cmchmqlvv001513sxnt88urmg	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	41. sortedSquares	3	40	Постановка задачи:Дан отсортированный по неубыванию массив целых чисел, который может содержать отрицательные значения. Необходимо вернуть новый массив, в котором каждый элемент является квадратом соответствующего элемента исходного массива, при этом новый массив должен быть отсортирован по неубыванию. Решение должно работать за O(n) времени, используя два указателя.\\n	function sortedSquares(arr) {  \n    let left = 0;  \n    let right = arr.length - 1;  \n    const result = new Array(arr.length);  \n    let index = arr.length - 1;  \n  \n    while (left <= right) {  \n        const leftSquare = arr[left] ** 2;  \n        const rightSquare = arr[right] ** 2;  \n  \n        if (leftSquare > rightSquare) {  \n            result[index] = leftSquare;  \n            left++;  \n        } else {  \n            result[index] = rightSquare;  \n            right--;  \n        }  \n        index--;  \n    }  \n  \n    return result;  \n}  \n  \nconst array = [-9, -2, 0, 2, 3];  \nconsole.log(sortedSquares(array)); // Ожидаемый результат: [0, 4, 4, 9, 81]	js	t	\N	\N	2025-06-29 12:11:56.107	2025-06-29 12:11:56.107	{}	{}
cmchmqlxb001713sxkw643c4a	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	43. sortOddOnly	3	42	Постановка задачи:Реализуйте функцию sortOddIndices, которая принимает массив чисел и сортирует элементы, расположенные на нечетных индексах, по возрастанию, при этом элементы на четных индексах остаются без изменений.\\nАлгоритм решения:\\nИзвлеките все элементы с нечетных индексов и отсортируйте их по возрастанию.Пройдитесь по исходному массиву и замените элементы на нечетных позициях отсортированными значениями.Верните полученный массив.\\n	function sortOddIndices(arr) {  \n    // 1. Извлекаем элементы с нечетных индексов и сортируем их  \n    const oddIndexedElements = arr  \n        .filter((_, index) => index % 2 !== 0)  \n        .sort((a, b) => a - b);  \n  \n    // 2. Вставляем отсортированные элементы обратно на нечетные индексы  \n    let oddIndex = 0;  \n    return arr.map((element, index) => {  \n        if (index % 2 !== 0) {  \n            return oddIndexedElements[oddIndex++];  \n        }  \n        return element;  \n    });  \n}  \n  \n// Пример использования:  \nconst array = [4, 3, 1, 2, 4, 7, 2, 3];  \nconsole.log(sortOddIndices(array)); // Ожидаемый результат: [4, 1, 3, 2, 4, 3, 2, 7]	js	t	\N	\N	2025-06-29 12:11:56.16	2025-06-29 12:11:56.16	{}	{}
cmchmqm78001k13sx600dyfkw	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	55. Number of Islands	3	55	Постановка задачи:Дана двумерная сетка, где '1' представляет землю, а '0' — воду. Необходимо посчитать количество островов, где остров — это группа смежных единиц (соседство по вертикали и горизонтали). Решение основано на обходе в глубину (DFS), чтобы "затопить" остров и избежать повторного подсчёта.\\n	function numIslands(grid) {  \n    if (grid.length === 0) return 0;  \n    const rows = grid.length;  \n    const cols = grid[0].length;  \n    let count = 0;  \n  \n    function dfs(i, j) {  \n        if (i < 0 || i >= rows || j < 0 || j >= cols || grid[i][j] === '0') return;  \n        grid[i][j] = '0'; // Помечаем как посещенное  \n        dfs(i + 1, j);  \n        dfs(i - 1, j);  \n        dfs(i, j + 1);  \n        dfs(i, j - 1);  \n    }  \n  \n    for (let i = 0; i < rows; i++) {  \n        for (let j = 0; j < cols; j++) {  \n            if (grid[i][j] === '1') {  \n                count++;  \n                dfs(i, j);  \n            }  \n        }  \n    }  \n    return count;  \n}  \n  \n// Примеры использования:  \nconst grid1 = [  \n    ['1', '1', '0', '0', '0'],  \n    ['1', '1', '0', '0', '0'],  \n    ['0', '0', '1', '0', '0'],  \n    ['0', '0', '0', '1', '1'],  \n];  \n  \nconsole.log(numIslands(grid1)); // Ожидаемый вывод: 3  \n  \nconst grid2 = [  \n    ['1', '0', '1', '0', '1'],  \n    ['0', '1', '0', '1', '0'],  \n    ['1', '0', '1', '0', '1'],  \n];  \nconsole.log(numIslands(grid2)); // Ожидаемый вывод: 8	js	t	\N	\N	2025-06-29 12:11:56.517	2025-06-29 12:11:56.517	{https://leetcode.com/problems/number-of-islands/}	{}
cmchmqm49001g13sxsvgf62xn	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	51. myFlat	3	51	Постановка задачи:Напишите функцию myFlat, которая принимает вложенную структуру данных, состоящую из массивов, объектов и строк, и возвращает "сплющенный" массив строк, где каждая строка представляет путь к конечной строке, объединяя ключи объектов и элементы массивов с разделителем "/". Функция должна обходить все уровни вложенности и корректно формировать пути для строковых значений.\\n	function myFlat(arr) {  \n    const result = [];  \n  \n    function traverse(node, path) {  \n        if (Array.isArray(node)) {  \n            for (let item of node) {  \n                traverse(item, path);  \n            }  \n        } else if (typeof node === 'object' && node !== null) {  \n            for (let key in node) {  \n                traverse(node[key], path ? `${path}/${key}` : key);  \n            }  \n        } else if (typeof node === 'string') {  \n            result.push(path ? `${path}/${node}` : node);  \n        }  \n    }  \n    traverse(arr, '');  \n    return result;  \n}	js	t	\N	\N	2025-06-29 12:11:56.41	2025-06-29 12:11:56.41	{}	{}
cmchmqm17001c13sx99y97jap	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	47. groupByAge	3	47	Постановка задачи:Напишите функцию groupByAge, которая принимает массив объектов, где каждый объект содержит информацию о человеке (например, имя и возраст). Функция должна сгруппировать объекты по возрасту, возвращая объект, в котором ключи — это значения возраста, а значения — массивы объектов с данным возрастом.\\n	function groupByAge(arr) {  \n    return arr.reduce((acc, item) => {  \n        // Если ключ (возраст) не существует, инициализируем его как пустой массив  \n        if (!acc[item.age]) {  \n            acc[item.age] = [];  \n        }  \n        // Добавляем текущий элемент в массив по ключу (возрасту)  \n        acc[item.age].push(item);  \n        return acc;  \n    }, {});  \n}  \n  \n// Пример использования  \nconst persons = [  \n    { name: 'Alex', age: 20 },  \n    { name: 'Lena', age: 25 },  \n    { name: 'Pavel', age: 20 }  \n];  \n  \nconsole.log(groupByAge(persons));  \n  \n// Ожидаемый результат:  \n// {  \n//     20: [{ name: 'Alex', age: 20 }, { name: 'Pavel', age: 20 }],  \n//     25: [{ name: 'Lena', age: 25 }]  \n// }	js	t	\N	\N	2025-06-29 12:11:56.299	2025-06-29 12:11:56.299	{}	{}
cmchmqm6i001j13sxlcpz67hp	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	54. Spiral Matrix	3	54	Постановка задачи:Дан двумерный массив (матрица). Необходимо вывести все его элементы по спирали, начиная с верхнего левого угла и двигаясь по часовой стрелке. Решение задачи предполагает использование четырех указателей (верх, низ, левый и правый), которые определяют текущие границы для обхода матрицы.\\n	function spiralOrder(matrix) {  \n    const result = [];  \n    if (matrix.length === 0) return result;  \n  \n    let top = 0;  \n    let bottom = matrix.length - 1;  \n    let left = 0;  \n    let right = matrix[0].length - 1;  \n  \n    while (top <= bottom && left <= right) {  \n        // Обходим верхнюю строку слева направо  \n        for (let i = left; i <= right; i++) result.push(matrix[top][i]);  \n        top++;  \n  \n        // Обходим правый столбец сверху вниз  \n        for (let i = top; i <= bottom; i++) result.push(matrix[i][right]);  \n        right--;  \n  \n        // Обходим нижнюю строку справа налево, если еще осталась  \n        if (top <= bottom) {  \n            for (let i = right; i >= left; i--) result.push(matrix[bottom][i]);  \n            bottom--;  \n        }  \n  \n        // Обходим левый столбец снизу вверх, если еще осталась  \n        if (left <= right) {  \n            for (let i = bottom; i >= top; i--) result.push(matrix[i][left]);  \n            left++;  \n        }  \n    }  \n    return result;  \n}  \n  \n// Тест:  \nconst matrix = [  \n    [1, 2, 3],  \n    [4, 5, 6],  \n    [7, 8, 9],  \n];  \n  \nconsole.log(spiralOrder(matrix)); // [1, 2, 3, 6, 9, 8, 7, 4, 5]	js	t	\N	\N	2025-06-29 12:11:56.49	2025-06-29 12:11:56.49	{https://leetcode.com/problems/spiral-matrix/}	{}
cmchmqm7y001l13sxcmxrotie	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	56. Find The Celebrity	3	56	Постановка задачи:Дан массив m, представляющий матрицу, где m[a][b] === 1 означает, что человек a знает человека b, а m[a][b] === 0 — не знает. Необходимо найти знаменитость — человека, которого знают все, но который не знает никого. Если знаменитость существует, вернуть её индекс, иначе вернуть -1.\\nРешение состоит из двух шагов:\\nПоиск кандидата:Инициализируем кандидата нулевым человеком. Проходим по всем остальным людям, и если кандидат знает другого человека, обновляем кандидата на этого человека.Проверка кандидата:Проверяем, что кандидат не знает никого, и что все остальные знают кандидата. Если условие не выполняется, знаменитости нет, возвращаем -1.\\n	function getCelebrity(m) {  \n    const n = m.length;  \n    let candidate = 0;  \n  \n    // Шаг 1: Находим кандидата  \n    for (let i = 1; i < n; i++) {  \n        if (knows(candidate, i, m)) {  \n            candidate = i;  \n        }  \n    }  \n  \n    // Шаг 2: Проверяем кандидата  \n    for (let i = 0; i < n; i++) {  \n        if (i !== candidate && (knows(candidate, i, m) || !knows(i, candidate, m))) {  \n            return -1;  \n        }  \n    }  \n    return candidate;  \n}  \n  \nfunction knows(a, b, m) {  \n    return m[a][b] === 1;  \n}  \n  \nconst m1 = [  \n    [0, 1, 0],  \n    [0, 0, 0],  \n    [0, 1, 0],  \n];  \n  \nconsole.log(getCelebrity(m1)); // Ожидаемый вывод: 1  \n  \nconst m2 = [  \n    [0, 1, 1, 0],  \n    [0, 0, 1, 0],  \n    [0, 0, 0, 0],  \n    [0, 0, 1, 0],  \n];  \n  \nconsole.log(getCelebrity(m2)); // Ожидаемый вывод: 2  \n  \nconst m3 = [  \n    [0, 1],  \n    [1, 0],  \n];  \n  \nconsole.log(getCelebrity(m3)); // Ожидаемый вывод: -1 (нет знаменитости)	js	t	\N	\N	2025-06-29 12:11:56.542	2025-06-29 12:11:56.542	{https://leetcode.ca/all/277.html}	{}
cmchmqm8o001m13sxdddof01i	cmchmqkyd000013sxavo7b2rz	["Средние – сложные (задачи с более высоким алгоритмическим накалом)"]	57. Фильтрация, сортировка, преобразование и удаление дубликатов	3	57	Постановка задачи:Дан массив объектов, где каждый объект содержит следующие свойства:\\nvalue: строка;order: число;expired: булево значение.\\nНеобходимо выполнить следующие шаги:\\nОтфильтровать объекты, оставив только те, у которых свойство expired равно false.Отсортировать отфильтрованные объекты по возрастанию значения свойства order.Для каждого оставшегося объекта перевернуть строку из свойства value.Объединить перевернутые строки в одну.Удалить повторяющиеся символы из объединенной строки, сохранив их порядок.Вернуть итоговую строку.\\n	const data = [  \n    { value: 'abcd', order: 4, expired: false },  \n    { value: 'qwer', order: 2, expired: true },  \n    { value: 'xyz1', order: 1, expired: false },  \n    { value: 'abx2', order: 2, expired: false },  \n];  \n  \n// array methods  \nfunction filterAndSortData(data) {  \n    const validItems = data.filter(item => !item.expired);  \n  \n    validItems.sort((a, b) => a.order - b.order);  \n  \n    let concatenated = validItems.map(item => item.value.split('').reverse().join('')).join('');  \n  \n    return [...new Set(concatenated)].join('');  \n}  \n  \nconst result1 = filterAndSortData(data);  \nconsole.log(result1);	js	t	\N	\N	2025-06-29 12:11:56.568	2025-06-29 12:11:56.568	{}	{}
cmchmqm9f001n13sxg2okwj5x	cmchmqkyd000013sxavo7b2rz	["Средние – сложные (задачи с более высоким алгоритмическим накалом)"]	58. Фильтрация, сортировка, преобразование и удаление дубликатов с использованием разных подходов	3	58	Постановка задачи:Дан массив объектов с полями:\\nvalue — строка,order — число,expired — булевое значение.\\nНеобходимо выполнить следующие операции:\\nОтфильтровать объекты, оставив только те, у которых expired равно false.Отсортировать оставшиеся объекты по возрастанию значения свойства order.Для каждого объекта перевернуть строку из свойства value.Объединить перевернутые строки в одну строку.Удалить из полученной строки дубликаты символов, сохраняя порядок их первого появления.Вернуть итоговую строку.\\nРеализуйте решение задачи, используя различные подходы:\\nСтандартные методы массива.Решение с использованием Set и циклов.Решение с использованием метода reduce.\\n	const input = [  \n    { value: 'abcd', order: 4, expired: false },  \n    { value: 'qwer', order: 2, expired: true },  \n    { value: 'xyz1', order: 1, expired: false },  \n    { value: 'abx2', order: 2, expired: false },  \n];  \n  \n// array methods  \nfunction generateResult(input) {  \n    const validItems = input.filter(item => !item.expired);  \n  \n    validItems.sort((a, b) => a.order - b.order);  \n  \n    let concatenated = validItems  \n        .map(item => item.value.split('').reverse().join(''))  \n        .join('');  \n  \n    return [...new Set(concatenated)].join('');  \n}  \n\nconst result1 = generateResult(input);  \nconsole.log(result1);  \n  \n// set  \nfunction generateResult2(input) {  \n    const filteredSortedItems = input  \n        .filter(item => !item.expired)  \n        .sort((a, b) => a.order - b.order);  \n  \n    const uniqueChars = new Set();  \n    let result = '';  \n  \n    for (const item of filteredSortedItems) {  \n        const reversedValue = item.value.split('').reverse().join('');  \n        for (const char of reversedValue) {  \n            if (!uniqueChars.has(char)) {  \n                uniqueChars.add(char);  \n                result += char;  \n            }  \n        }  \n    }  \n    return result;  \n}  \n  \nconst result2 = generateResult2(input);  \nconsole.log(result2);  \n  \n// reduce  \nfunction generateResult3(input) {  \n    return input  \n        .filter(item => !item.expired)  \n        .sort((a, b) => a.order - b.order)  \n        .reduce((acc, item) => {  \n            const reversed = item.value.split('').reverse().join('');  \n            for (const char of reversed) {  \n                if (!acc.seen.has(char)) {  \n                    acc.seen.add(char);  \n                    acc.result += char;  \n                }  \n            }  \n            return acc;  \n        }, { result: '', seen: new Set() }).result;  \n}  \n  \nconst result3 = generateResult3(input);  \nconsole.log(result3);	js	t	\N	\N	2025-06-29 12:11:56.595	2025-06-29 12:11:56.595	{}	{}
cmchmqma3001o13sxnzr6nic0	cmchmqkyd000013sxavo7b2rz	["Средние – сложные (задачи с более высоким алгоритмическим накалом)"]	59. Работа с массивом объектов: группировка и сортировка по году	3	59	Постановка задачи:Напишите функцию, которая на вход принимает массив объектов с полями date и amount. Функция должна вернуть объект, в котором:\\nКлючи — это год, извлечённый из поля date каждого объекта.Значения — массивы объектов, относящихся к этому году, отсортированные по дате (в порядке возрастания).\\nПример входных данных:\\nАлгоритм решения:\\nПройтись по массиву и сгруппировать объекты по году, извлекая год из поля date.Для каждого года отсортировать массив объектов по дате.Вернуть итоговый объект.\\n	const operations = [\n  { "date": "2017-07-31", "amount": "5422" },\n  { "date": "2017-06-30", "amount": "5220" },\n  { "date": "2017-05-31", "amount": "5365" },\n  { "date": "2017-08-31", "amount": "5451" },\n  { "date": "2017-09-30", "amount": "5303" },\n  { "date": "2018-03-31", "amount": "5654" },\n  { "date": "2017-10-31", "amount": "5509" },\n  { "date": "2017-12-31", "amount": "5567" },\n  { "date": "2017-11-30", "amount": "5597" },\n  { "date": "2018-01-31", "amount": "5392" },\n  { "date": "2018-02-28", "amount": "5087" },\n  { "date": "2018-04-14", "amount": "2567" }\n];	js	f	\N	\N	2025-06-29 12:11:56.62	2025-06-29 12:11:56.62	{}	{}
cmchmqxw8005w13sxhujemdt4	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Приложений", "2. Счетчики"]	Альфа-Банк	3	6	Список + кнопка добавления элементов.\\nРефакторЧистый\\n	\N	\N	f	\N	\N	2025-06-29 12:12:11.673	2025-06-29 12:12:11.673	{https://codesandbox.io/p/sandbox/alfa-spisok-knopka-tnw5t3?file=%2Fsrc%2FApp.tsx%3A22%2C11,https://codesandbox.io/p/sandbox/alfa-spisok-knopka-chistyy-forked-h96vt8?file=%2Fsrc%2FApp.tsx%3A38%2C1}	{}
cmchmqmbi001q13sxt8x8xv13	cmchmqkyd000013sxavo7b2rz	["Средние – сложные (задачи с более высоким алгоритмическим накалом)"]	61. mergeIntervals	3	61	Постановка задачи:Дан массив интервалов, где каждый интервал представлен массивом из двух чисел [start, end]. Необходимо объединить все пересекающиеся интервалы и вернуть новый массив, содержащий только объединенные интервалы.\\nАлгоритм решения:\\nЕсли входной массив пуст, возвращаем пустой массив.Сортируем интервалы по их начальным значениям.Инициализируем массив merged первым интервалом.Проходим по оставшимся интервалам и для каждого:Если текущий интервал пересекается с последним интервалом в merged (т.е. начало текущего интервала меньше или равно концу последнего объединенного интервала), обновляем конец последнего интервала как максимум из его текущего конца и конца текущего интервала.Если нет пересечения, добавляем текущий интервал в merged.Возвращаем массив merged.\\n	const mergeIntervals = function(intervals) {  \n    if (intervals.length === 0) return [];  \n  \n    // Шаг 1: Сортируем интервалы по началу  \n    intervals.sort((a, b) => a[0] - b[0]);  \n  \n    // Шаг 2: Создаем массив для хранения объединенных интервалов  \n    const merged = [intervals[0]];  \n  \n    for (let i = 1; i < intervals.length; i++) {  \n        const lastMerged = merged[merged.length - 1];  \n        const current = intervals[i];  \n  \n        // Если текущий интервал пересекается с последним объединенным интервалом, объединяем их  \n        if (current[0] <= lastMerged[1]) {  \n            lastMerged[1] = Math.max(lastMerged[1], current[1]);  \n        } else {  \n            // Если нет пересечения, добавляем текущий интервал в результат  \n            merged.push(current);  \n        }  \n    }  \n    return merged;  \n};  \n  \n// Примеры использования  \nconst intervals1 = [[1, 3], [2, 6], [7, 8], [8, 10], [15, 18]];  \nconsole.log(mergeIntervals(intervals1)); // [[1, 6], [7, 10], [15, 18]]  \n  \nconst intervals2 = [[1, 4], [4, 5]];  \nconsole.log(mergeIntervals(intervals2)); // [[1, 5]]  \n  \nconst intervals3 = [[1, 4]];  \nconsole.log(mergeIntervals(intervals3)); // [[1, 4]]  \n  \nconst intervals4 = [];  \nconsole.log(mergeIntervals(intervals4)); // []	js	t	\N	\N	2025-06-29 12:11:56.671	2025-06-29 12:11:56.671	{}	{}
cmchmqmcy001s13sxzhutk8ap	cmchmqkyd000013sxavo7b2rz	["Средние – сложные (задачи с более высоким алгоритмическим накалом)"]	63. median of two sorted arrays	3	63	Постановка задачи:Даны два отсортированных массива nums1 и nums2. Необходимо найти медиану объединённого массива. Решение должно работать за логарифмическое время, что достигается с помощью поиска k-го элемента (с использованием подхода "разделяй и властвуй").\\nАлгоритм решения:\\nВычисляем общее количество элементов.Если общее количество нечетное, медианой будет элемент с индексом (totalLen / 2) + 1.Если количество четное, медиана – это среднее арифметическое двух центральных элементов.Для поиска k-го элемента используется функция getKth, которая сдвигает указатели в двух массивах, уменьшая искомое k.\\n	function findMedianSortedArrays(nums1, nums2) {  \n    const totalLen = nums1.length + nums2.length;  \n    if (totalLen % 2 === 1) {  \n        return getKth(nums1, nums2, Math.floor(totalLen / 2) + 1);  \n    } else {  \n        return (  \n            (getKth(nums1, nums2, totalLen / 2) +  \n             getKth(nums1, nums2, totalLen / 2 + 1)) /  \n            2  \n        );  \n    }  \n}  \n  \nfunction getKth(nums1, nums2, k) {  \n    let index1 = 0, index2 = 0;  \n  \n    while (true) {  \n        // Если один из массивов исчерпан, возвращаем k-й элемент из второго массива  \n        if (index1 === nums1.length) return nums2[index2 + k - 1];  \n        if (index2 === nums2.length) return nums1[index1 + k - 1];  \n        if (k === 1) return Math.min(nums1[index1], nums2[index2]);  \n  \n        // Определяем новые индексы для сравнения  \n        const newIndex1 = Math.min(index1 + Math.floor(k / 2) - 1, nums1.length - 1);  \n        const newIndex2 = Math.min(index2 + Math.floor(k / 2) - 1, nums2.length - 1);  \n  \n        const pivot1 = nums1[newIndex1];  \n        const pivot2 = nums2[newIndex2];  \n  \n        if (pivot1 <= pivot2) {  \n            k -= newIndex1 - index1 + 1;  \n            index1 = newIndex1 + 1;  \n        } else {  \n            k -= newIndex2 - index2 + 1;  \n            index2 = newIndex2 + 1;  \n        }  \n    }  \n}  \n  \nconsole.log(findMedianSortedArrays([1, 3], [2])); // Ожидаемый вывод: 2.0  \nconsole.log(findMedianSortedArrays([1, 2], [3, 4])); // Ожидаемый вывод: 2.5  \nconsole.log(findMedianSortedArrays([0, 0], [0, 0])); // Ожидаемый вывод: 0.0  \nconsole.log(findMedianSortedArrays([], [1]));       // Ожидаемый вывод: 1.0  \nconsole.log(findMedianSortedArrays([2], []));       // Ожидаемый вывод: 2.0	js	t	\N	\N	2025-06-29 12:11:56.723	2025-06-29 12:11:56.723	{https://leetcode.com/problems/median-of-two-sorted-arrays/description/}	{}
cmchmqn6w001u13sxdr0nhbm3	cmchmqn6p001t13sxcmac57pa	["1. эммитер"]	Эммитер Т-Банк	4	0	Задача: Реализовать класс EventEmitter, который позволяет подписываться (on), отписываться (off) и вызывать (emit) события с передачей аргументов.\\n	class EventEmitter {\n  constructor() {\n    this.events = {};\n  }\n\n  on(eventName, callback) {\n    (this.events[eventName] ||= []).push(callback);\n  }\n\n  off(eventName, callback) {\n    if (!this.events[eventName]) return;\n    this.events[eventName] = this.events[eventName].filter(cb => cb !== callback);\n    if (!this.events[eventName].length) delete this.events[eventName];\n  }\n\n  emit(eventName, ...args) {\n    this.events[eventName]?.forEach(callback => callback(...args));\n  }\n}\n\n// Пример использования:\nconst emitter = new EventEmitter();\n\nfunction listener(data) {\n  console.log("Получено событие:", data);\n}\n\nemitter.on("testEvent", listener);\nemitter.emit("testEvent", { message: "Hello World!" }); // Получено событие: { message: "Hello World!" }\n\nemitter.off("testEvent", listener);\nemitter.emit("testEvent", { message: "This will not be logged" }); // Подписчиков нет	js	t	\N	\N	2025-06-29 12:11:57.801	2025-06-29 12:11:57.801	{}	{}
cmchmqoix002913sxhyvw4pns	cmchmqohb002613sxycod6ivv	[]	3. перегрузка аргументов	3	2	Постановка задачи:Реализуйте функцию f, которая поддерживает два варианта вызова:\\nЕсли функция вызывается с двумя аргументами, она возвращает их сумму.Если функция вызывается с одним аргументом, она возвращает другую функцию, ожидающую второй аргумент для последующего сложения.\\n	function f(a, b) {  \n    if (b !== undefined) return a + b;  \n    else return (b) => a + b;  \n}  \n  \nconsole.log(f(2, 3)); // 5  \nconsole.log(f(2)(3)); // 5	js	t	\N	\N	2025-06-29 12:11:59.53	2025-06-29 12:11:59.53	{}	{}
cmchmqn7l001v13sx2i11i97k	cmchmqn6p001t13sxcmac57pa	["1. эммитер"]	эмиттер литкод	4	1	Задача: Реализовать класс EventEmitter, аналогичный задаче с LeetCode, который поддерживает подписку (subscribe), отписку (unsubscribe) и вызов (emit) событи\\n✅ Особенности:\\nПростая подписка и отписка.Хранение обработчиков событий в Map для быстрого доступа.Использование Set для хранения колбэков исключает дублирование обработчиков.Возвращает функцию для удобного удаления подписки.\\n	class EventEmitter {\n  constructor() {\n    this.events = new Map();\n  }\n\n  // Подписка на событие\n  subscribe(event, callback) {\n    if (!this.events.has(event)) {\n      this.events.set(event, new Set());\n    }\n    const callbacks = this.events.get(event);\n    callbacks.add(callback);\n\n    // Возвращаем функцию для отписки\n    return () => this.unsubscribe(event, callback);\n  }\n\n  // Отписка от события\n  unsubscribe(event, callback) {\n    if (!this.events.has(event)) return;\n    const callbacks = this.events.get(event);\n    callbacks.delete(callback);\n    if (callbacks.size === 0) {\n      this.events.delete(event);\n    }\n  }\n\n  // Вызов события с аргументами\n  emit(event, ...args) {\n    if (!this.events.has(event)) return;\n    this.events.get(event).forEach(callback => callback(...args));\n  }\n}\n\n// Пример использования\nconst emitter = new EventEmitter();\n\nconst handler = (data) => console.log(`Received: ${data}`);\n\nconst unsubscribe = emitter.subscribe("event1", handler);\nemitter.emit("event1", "Hello!"); // Output: Received: Hello!\n\nunsubscribe(); // Отписка\nemitter.emit("event1", "World!"); // Нет вывода	js	t	\N	\N	2025-06-29 12:11:57.826	2025-06-29 12:11:57.826	{https://leetcode.com/problems/event-emitter/}	{}
cmchmqn8m001w13sx89qreu2h	cmchmqn6p001t13sxcmac57pa	["1. эммитер"]	эмиттер точка банк	4	2	Задача: Реализовать улучшенный класс Emitter, который:\\nПозволяет подписываться на события (on);Возвращает функцию для отписки при подписке;Позволяет отписываться от событий (off);Корректно обрабатывает вызовы обработчиков событий (emit);Поддерживает одноразовую подписку (once).\\n	class Emitter {  \n    constructor() {  \n        this.events = new Map();  \n    }  \n  \n    // Subscribe to an event  \n    on(eventName, listener) {  \n        if (!this.events.has(eventName)) {  \n            this.events.set(eventName, new Set());  \n        }  \n        const listeners = this.events.get(eventName);  \n        listeners.add(listener);  \n  \n        // Return an unsubscribe function  \n        return () => {  \n            this.off(eventName, listener);  \n        };  \n    }  \n  \n    // Unsubscribe from an event  \n    off(eventName, listener) {  \n        const listeners = this.events.get(eventName);  \n        if (!listeners) return;  \n        listeners.delete(listener);  \n        if (listeners.size === 0) {  \n            this.events.delete(eventName);  \n        }  \n    }  \n    // Emit an event  \n    emit(eventName, ...args) {  \n        const listeners = this.events.get(eventName);  \n        if (!listeners) return;  \n  \n        // Create a copy to prevent modification during iteration  \n        const listenersCopy = Array.from(listeners);  \n        listenersCopy.forEach((listener) => {  \n            try {  \n                listener(...args);  \n            } catch (error) {  \n                console.error(`Error in listener for event '${eventName}':`, error);  \n            }  \n        });  \n    }  \n  \n    // Subscribe to an event once  \n    once(eventName, listener) {  \n        const wrapper = (...args) => {  \n            listener(...args);  \n            this.off(eventName, wrapper);  \n        };  \n        this.on(eventName, wrapper);  \n    }  \n}  \n  \n  \nconst emitter = new Emitter();  \n  \nconst handlerTest = () => console.log('Ho-ho-ho!');  \nemitter.on('foo', handlerTest);  \nemitter.on('foo', (...data) => console.log('foo', ...data));  \nemitter.on('bar', (data) => console.log('bar', data));  \n  \nemitter.emit('foo', 'Hello', 'World!');  \n// Ho-ho-ho!  \n// foo Hello World!  \n  \nemitter.emit('bar', 'Hello', 'World!');  \n// bar Hello  \n  \nemitter.off('foo', handlerTest);  \n  \nemitter.emit('foo', 'Test');  \n// foo Test  \n  \nemitter.emit('bar');  \n// bar undefined	js	t	\N	\N	2025-06-29 12:11:57.862	2025-06-29 12:11:57.862	{}	{}
cmchmqn9b001x13sx974wb18o	cmchmqn6p001t13sxcmac57pa	["1. эммитер"]	эмиттер яндекс-мультитрак с усложнениями	4	3	Задача: Реализовать класс EventEmitter с дополнительными возможностями, такими как очередность событий, обработка асинхронных событий или поддержка различных режимов вызова.\\nДобавлены:\\nАсинхронные события (поддержка промисов в обработчиках).Очередь событий (гарантия выполнения в порядке поступления).Режим once (одноразовая подписка).Фильтрация событий (можно передавать фильтр-функцию).\\n	class AdvancedEventEmitter {\n  constructor() {\n    this.events = new Map();\n    this.queue = [];\n    this.isProcessing = false;\n  }\n\n  // Подписка на событие\n  subscribe(event, callback) {\n    if (!this.events.has(event)) {\n      this.events.set(event, new Set());\n    }\n    this.events.get(event).add(callback);\n\n    return () => this.unsubscribe(event, callback);\n  }\n\n  // Одноразовая подписка\n  once(event, callback) {\n    const wrapper = (...args) => {\n      callback(...args);\n      this.unsubscribe(event, wrapper);\n    };\n    this.subscribe(event, wrapper);\n  }\n\n  // Отписка от события\n  unsubscribe(event, callback) {\n    if (!this.events.has(event)) return;\n    const callbacks = this.events.get(event);\n    callbacks.delete(callback);\n    if (callbacks.size === 0) {\n      this.events.delete(event);\n    }\n  }\n\n  // Вызов события (асинхронная обработка с очередью)\n  async emit(event, ...args) {\n    if (!this.events.has(event)) return;\n\n    this.queue.push({ event, args });\n    if (!this.isProcessing) {\n      this.isProcessing = true;\n      while (this.queue.length > 0) {\n        const { event, args } = this.queue.shift();\n        await this._processEvent(event, args);\n      }\n      this.isProcessing = false;\n    }\n  }\n\n  // Внутренний обработчик событий\n  async _processEvent(event, args) {\n    if (!this.events.has(event)) return;\n    const callbacks = [...this.events.get(event)];\n\n    for (const callback of callbacks) {\n      try {\n        const result = callback(...args);\n        if (result instanceof Promise) {\n          await result; // Ждем выполнения промиса\n        }\n      } catch (error) {\n        console.error(`Ошибка в обработчике события "${event}":`, error);\n      }\n    }\n  }\n}\n\n// Пример использования\nconst emitter = new AdvancedEventEmitter();\n\nconst asyncHandler = async (data) => {\n  await new Promise(resolve => setTimeout(resolve, 1000)); // Симуляция задержки\n  console.log(`Async received: ${data}`);\n};\n\nconst syncHandler = (data) => console.log(`Sync received: ${data}`);\n\nemitter.subscribe("event1", asyncHandler);\nemitter.subscribe("event1", syncHandler);\n\nconsole.log("Emit start...");\nemitter.emit("event1", "Hello!"); // Асинхронное выполнение\n\n// Одноразовое событие\nemitter.once("event1", (data) => console.log(`Received ONCE: ${data}`));\n\nsetTimeout(() => {\n  console.log("Emit second time...");\n  emitter.emit("event1", "Second event");\n}, 3000);\n\n// Output:\n// Emit start...\n// Sync received: Hello!\n// (Спустя 1 секунду) Async received: Hello!\n// Received ONCE: Hello!\n// Emit second time...\n// Sync received: Second event\n// (Спустя 1 секунду) Async received: Second event	js	t	\N	\N	2025-06-29 12:11:57.887	2025-06-29 12:11:57.887	{}	{}
cmchmqnct002213sxeexzxfy5	cmchmqn6p001t13sxcmac57pa	[]	6. класс на основании инстанса + типизация	3	8	Задача: Реализовать класс List<T>, который:\\nПозволяет хранить элементы в Map, используя функцию getItemKey для получения уникального ключа;Позволяет добавлять (addItem) и удалять (removeItem) элементы;Предоставляет ReadonlyArray<T> для доступа к элементам без возможности их изменения.\\n	class List<T> {  \n    private itemsMap: Map<string, T> = new Map();  \n    private readonly getItemKey: (item: T) => string;  \n  \n    constructor(params: { getItemKey: (item: T) => string }) {  \n        this.getItemKey = params.getItemKey;  \n    }  \n  \n    addItem(item: T): void {  \n        const key = this.getItemKey(item);  \n        if (!this.itemsMap.has(key)) {  \n            this.itemsMap.set(key, item);  \n        }  \n    }    removeItem(item: T): void {  \n        const key = this.getItemKey(item);  \n        this.itemsMap.delete(key);  \n    }  \n  \n    // Readonly access to items  \n    get items(): ReadonlyArray<T> {  \n        return Array.from(this.itemsMap.values());  \n    }  \n}  \n  \nconst list = new List<{  \n    firstName: string;  \n    lastName: string;  \n}>({  \n    getItemKey: (item) => item.firstName + item.lastName,  \n});  \n  \nlist.addItem({  \n    firstName: 'Иван',  \n    lastName: 'Петров',  \n});  \n  \nlist.addItem({  \n    firstName: 'Женя',  \n    lastName: 'Киселев',  \n});  \n  \nlist.addItem({  \n    firstName: 'Иван',  \n    lastName: 'Петров',  \n});  \n  \nlist.removeItem({  \n    firstName: 'Иван',  \n    lastName: 'Петров',  \n});  \n  \n// Cannot modify items directly  \n// list.items = []; // Error  \n// list.items.push({ firstName: 'Катя', lastName: 'Самойлова' }); // Error  \n  \nconsole.log(list.items);  \n// Output: [{ firstName: 'Женя', lastName: 'Киселев' }]	js	t	\N	\N	2025-06-29 12:11:58.014	2025-06-29 12:11:58.014	{}	{}
cmchmqnez002513sxnhm65335	cmchmqn6p001t13sxcmac57pa	[]	9. tbq	3	11	Задача:\\nСоздать интерфейс Workable с методом doWork();Создать класс Worker, реализующий Workable;Создать класс User, который содержит экземпляр Workable и вызывает его doWork().\\n	interface Workable {\n  doWork(): void;\n}\n\nclass Worker implements Workable {\n  doWork(): void {\n    console.log('I am working');\n  }\n}\n\nclass User {\n  name: string;\n  age: number;\n  worker: Workable;\n\n  constructor(name: string, age: number, worker: Workable) {\n    this.name = name;\n    this.age = age;\n    this.worker = worker;\n  }\n\n  doWork(): void {\n    this.worker.doWork();\n  }\n}\n\n// Usage\nconst worker = new Worker();\nconst user = new User('Anton', 37, worker);\n\nuser.doWork(); // Output: 'I am working'	js	t	\N	\N	2025-06-29 12:11:58.092	2025-06-29 12:11:58.092	{}	{}
cmchmqy0j006213sxr3qbgwya	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Задач", "1. СберБанк"]	Батчинг	3	12		const ExampleComponent = () => {\n  const [state, setState] = useState(0);\n  const onClick = () => {\n    setState((prev) => prev + 1);\n    setState((prev) => prev + 1);\n    setState((prev) => prev + 1);\n  };\n  return <button onClick={onClick}>{state}</button>;\n};	js	f	\N	\N	2025-06-29 12:12:11.828	2025-06-29 12:12:11.828	{}	{}
cmchmqojn002a13sxb2p4c9lh	cmchmqohb002613sxycod6ivv	[]	4. one (plus(two()))	3	3	Постановка задачи:Реализуйте три функции: one, two и plus, чтобы они поддерживали перегрузку аргументов и работали как в выражениях one(plus(two())) и two(plus(one())), возвращая сумму чисел 1 и 2 (то есть 3).\\nЕсли функция one или two вызывается без аргумента, она возвращает соответствующее число (1 или 2).Если функция вызывается с функцией в качестве аргумента, она передаёт ей своё значение.Функция plus принимает число и возвращает функцию, которая прибавляет это число к своему аргументу.\\n	function one(arg) {  \n    if (arg) {  \n        return arg(1);  \n    } else {  \n        return 1;   \n    }  \n}  \n  \nfunction two(arg) {  \n    if (arg) {  \n        return arg(2);  \n    } else {  \n        return 2;  \n    }  \n}  \n  \nfunction plus(a) {  \n    return function (x) {  \n        return x + a;  \n    }  \n}  \n  \n// Примеры использования:\nconsole.log(one(plus(two()))); // Ожидается 3\nconsole.log(two(plus(one()))); // Ожидается 3	js	t	\N	\N	2025-06-29 12:11:59.556	2025-06-29 12:11:59.556	{}	{}
cmchmqokd002b13sxy1c7970l	cmchmqohb002613sxycod6ivv	[]	5. once	3	4	Постановка задачи: Реализуйте функцию once, которая принимает другую функцию fn и возвращает новую функцию. Новая функция должна позволять вызов fn только один раз, а последующие вызовы должны возвращать undefined. Это полезно для создания функций, которые выполняются только единожды, независимо от того, сколько раз их вызовут.\\n	function once (fn) {  \n    let hasBeenCalled = false  \n    let result  \n    return (...args) => {  \n        if (!hasBeenCalled) {  \n            result = fn(...args)  \n            hasBeenCalled = true  \n            return result  \n        } else {  \n            return undefined  \n        }  \n    }}  \n  \n  \nlet fn = (a, b, c) => a + b + c   \nlet onceFn = once(fn)  \n  \n  \nconsole.log(onceFn(1,2,3))  \nconsole.log(onceFn(1,2,3))	js	t	\N	\N	2025-06-29 12:11:59.582	2025-06-29 12:11:59.582	{}	{}
cmchmqolq002d13sxqfzewk57	cmchmqohb002613sxycod6ivv	[]	7. compose&pipe	3	6	Постановка задачи:\nРеализуйте две функции: compose и pipe. Функция compose должна принимать массив функций и возвращать новую функцию, которая является композицией этих функций, применяемых справа налево. Функция pipe должна принимать массив функций и возвращать новую функцию, которая применяет их слева направо. Продемонстрируйте работу обеих функций на примере простых арифметических операций, таких как удвоение числа, возведение в квадрат и прибавление единицы.\n![[image_1.png]]\\n	const compose = functions => functions.reduceRight((acc, current) => x => current(acc(x)))  \n  \n  \nconst pipe = functions => x => functions.reduce((acc, current) => current(acc), x)  \n  \n  \nconst double = x => x * 2  \n  \nconst square = x => x * x  \n  \nconst addOne = x => x + 1  \n  \n  \nconst piped = pipe([addOne, square, double])  \n  \nconst composed = compose([addOne, square, double])  \n  \n  \nconsole.log(piped(3))  \n  \n  \nconsole.log(composed(3))	js	t	\N	\N	2025-06-29 12:11:59.631	2025-06-29 12:11:59.631	{}	{}
cmchmqome002e13sxcnreve0k	cmchmqohb002613sxycod6ivv	[]	8. spy	3	7	Постановка задачи:\nРеализуйте функцию spy, которая принимает функцию f и возвращает её обёртку (wrapper). Обёртка должна вызывать исходную функцию с переданными аргументами и возвращать её результат, а также сохранять информацию о каждом вызове — количество вызовов, массив аргументов каждого вызова и массив результатов — в специальном свойстве data. Продемонстрируйте работу spy, например, на функции, которая складывает два числа.\\n	\n  \nfunction _sum(a, b) {  \n    return a + b;  \n}  \n  \nfunction spy(f) {  \n    function wrapper(...args) {  \n        const result = f.apply(this, args);  \n        wrapper.data.calls++;  \n        wrapper.data.args.push(args);  \n        wrapper.data.results.push(result);  \n        return result;  \n    }  \n  \n    wrapper.data = {  \n        calls: 0,  \n        args: [],  \n        results: []  \n    };  \n  \n    return wrapper;  \n}  \n  \n  \nconst spiedSum = spy(_sum);  \n  \nconsole.log(spiedSum(2, 3)); // 5  \nconsole.log(spiedSum(5, 7)); // 12  \n  \nconsole.log(spiedSum.data);  \n// {  \n//     calls: 2,  \n//     args: [[2, 3], [5, 7]],  \n//     results: [5, 12]  \n// }\n	js	t	\N	\N	2025-06-29 12:11:59.654	2025-06-29 12:11:59.654	{}	{}
cmchmqpy0003a13sx46uxzv40	cmchmqpsh003213sxcgcp7ko1	[]	8. isPrime	3	7	Постановка задачи:Реализовать функцию, которая проверяет, является ли число n простым. Простое число — это число, имеющее ровно два делителя: 1 и само себя. Решение должно быть представлено в трех вариантах:\\nПростая проверка делителей с использованием цикла.Оптимизированный вариант с проверкой делителей только до sqrt(n).Дальнейшая оптимизация, исключающая четные числа (кроме 2).\\n	\n// for  \nfunction isPrimeSimple(number) {  \n    if (number <= 1) return false;  \n  \n    for (let i = 2; i < number; i++) {  \n        if (number % i === 0) {  \n            return false;  \n        }  \n    }    return true;  \n}  \n  \n// sqrt  \nfunction isPrimeSqrt(number) {  \n    if (number <= 1) return false;  \n    if (number === 2) return true;  \n  \n    for (let i = 2; i <= Math.sqrt(number); i++) {  \n        if (number % i === 0) {  \n            return false;  \n        }  \n    }    return true;  \n}  \n  \n  \n// optimized sqrt  \nfunction isPrimeOptimized(number) {  \n    if (number <= 1) return false;  \n    if (number === 2) return true;   \nif (number % 2 === 0) return false;   \n    for (let i = 3; i <= Math.sqrt(number); i += 2) {  \n        if (number % i === 0) {  \n            return false;  \n        }  \n    }    return true;  \n}  \n  \n  \nconsole.log(isPrimeSimple(7));  \nconsole.log(isPrimeSimple(12));  \nconsole.log(isPrimeSimple(23));  \nconsole.log(isPrimeSimple(100));  \n  \nconsole.log(isPrimeSqrt(7));  \nconsole.log(isPrimeSqrt(12));  \nconsole.log(isPrimeSqrt(23));  \nconsole.log(isPrimeSqrt(100));  \n  \n  \nconsole.log(isPrimeOptimized(7));  console.log(isPrimeOptimized(12)); console.log(isPrimeOptimized(23));  console.log(isPrimeOptimized(100));\n\n	js	t	\N	\N	2025-06-29 12:12:01.369	2025-06-29 12:12:01.369	{}	{}
cmchmqonu002g13sxjyonkvmj	cmchmqohb002613sxycod6ivv	[]	10. deepEqual	3	9	Постановка задачи:\nРеализуйте функцию deepEqual, которая глубоко сравнивает два значения. Функция должна возвращать true, если оба значения идентичны по структуре и содержанию, и false — в противном случае. При этом необходимо:\\nЕсли значения равны по ссылке (оператор ===), вернуть true.Если один из аргументов не является объектом (или равен null), вернуть false.Для объектов и массивов сравнить их собственные свойства и элементы с использованием рекурсии.Учесть различие между массивами и объектами.Обработать циклические ссылки, используя механизм отслеживания уже посещённых объектов, чтобы избежать бесконечной рекурсии.\\n	\nfunction deepEqual(a, b, visited = new Map()) {\n    if (a === b) return true;\n    \n    if (typeof a !== 'object' || typeof b !== 'object' || a === null || b === null) {\n        return false;\n    }\n    \n    // Проверка на ранее посещенные объекты для рекурсивных структур\n    if (visited.has(a)) return visited.get(a) === b;\n    visited.set(a, b);\n\n    // Проверка на тип массивов\n    if (Array.isArray(a) !== Array.isArray(b)) return false;\n\n    const entriesA = Object.entries(a);\n    const entriesB = Object.entries(b);\n\n    if (entriesA.length !== entriesB.length) return false;\n\n    for (let [key, valueA] of entriesA) {\n        if (!(key in b) || !deepEqual(valueA, b[key], visited)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Примеры использования для проверки\n\nconsole.log(deepEqual({ a: 1, b: { c: 3 } }, { a: 1, b: { c: 3 } })); // true\nconsole.log(deepEqual([1, 2, 3], [1, 2, 3])); // true\nconsole.log(deepEqual([1, 2, 3], [1, 2, 4])); // false\nconsole.log(deepEqual({ a: 1 }, { a: 1, b: 2 })); // false\nconsole.log(deepEqual({ a: { b: { c: 1 } } }, { a: { b: { c: 1 } } })); // true\n\n// Тест на рекурсивные ссылки\nconst obj1 = {};\nconst obj2 = {};\nobj1.self = obj1;\nobj2.self = obj2;\nconsole.log(deepEqual(obj1, obj2)); // true\n\n	js	t	\N	\N	2025-06-29 12:11:59.707	2025-06-29 12:11:59.707	{}	{}
cmchmqqwm003o13sxjabeq4il	cmchmqqo2003b13sxajtzyb2z	[]	13. getValues	3	12	Получение значений по ключам\nРеализуйте функцию, которая принимает объект и список ключей (в виде строки, массива или нескольких аргументов) и возвращает строку, содержащую значения этих ключей, объединенные пробелами.\\n	\n\n  function getValues(obj, ...keys) {\n    // Если `keys` — одна строка, разбиваем её на массив; если это массив, используем его как есть\n    keys = typeof keys[0] === 'string' ? keys[0].split(' ') : keys.flat();\n\n    return keys.map(key => obj[key]).join(' ');\n}\n\nconst obj = {  \n    key1: 'value1',  \n    key2: 'value2',  \n    key3: 'value3',  \n};  \n\nconsole.log(getValues(obj, 'key1 key2 key3')); // "value1 value2 value3"\nconsole.log(getValues(obj, 'key1', 'key2', 'key3')); // "value1 value2 value3"\nconsole.log(getValues(obj, ['key1', 'key2', 'key3'])); // "value1 value2 value3"\n\n	js	t	\N	\N	2025-06-29 12:12:02.614	2025-06-29 12:12:02.614	{}	{}
cmchmqotf002o13sxzxz3f3ul	cmchmqohb002613sxycod6ivv	[]	18. basic throttling	3	17	Постановка задачи:\nРеализуйте функцию throttle, которая принимает функцию (func) и интервал времени (wait) в миллисекундах, и возвращает новую функцию. Эта новая функция должна вызывать исходную функцию не чаще одного раза за указанный интервал. При последующих вызовах в течение интервала вызов функции игнорируется. Также продемонстрируйте работу throttle на примере функции, которая увеличивает счётчик. В демонстрации функция вызывается каждые 500 миллисекунд, но благодаря throttle фактические вызовы происходят не чаще, чем раз в 2 секунды, а через 10 секунд выполнение останавливается.\\n	function throttle(func, wait) {  \n    let inThrottle = false  \n    return function (...args) {  \n        if (!inThrottle) {  \n            func.apply(this, args)  \n            inThrottle = true  \n            setTimeout(() => inThrottle = false, wait)  \n        }  \n    }}  \n\n\n// Функция, которую будем тротлить  \nfunction logMessage(message) {  \n    console.log('Сообщение:', message, 'Time:', new Date().toLocaleTimeString());  \n}  \n\n\n// Пример функции, которую будем тротлить  \nlet counter = 0;  \nfunction logCounter() {  \n    counter++;  \n    console.log('Counter:', counter, 'Time:', new Date().toLocaleTimeString());  \n}  \n\n\n// Применяем throttle к logCounter с интервалом 2000 миллисекунд (2 секунды)  \nconst throttledLogCounter = throttle(logCounter, 2000);  \n\n\n// Вызываем throttledLogCounter каждые 500 миллисекунд  \nlet intervalId = setInterval(() => {  \n    throttledLogCounter();  \n}, 500);  \n\n\n// Останавливаем вызовы через 10 секунд  \nsetTimeout(() => {  \n    clearInterval(intervalId);  \n    console.log('Тест завершён.');  \n}, 10000);	js	t	\N	\N	2025-06-29 12:11:59.908	2025-06-29 12:11:59.908	{}	{}
cmchmqoy2002v13sxt8b0nzez	cmchmqohb002613sxycod6ivv	["Банкоматы"]	Банкомат Райфайзена	4	24		\n  \n// Необходимо написать функцию для банкомата, которая возвращает массив возможных номиналов купюр для выдачи по запросу пользователя.  \n// 1. Номиналы должны выдаваться максимально крупные с минимально возможным количеством выданных купюр.  \n// 2. Если выдать нужную сумму невозможно, функция должна выводить ошибку через стандартный механизм ошибок.  \n  \n// Формат вывода: массив строк от большего номинала к меньшему, например `["5000x1", "1000x3"]`.  \n  \n// Дополнительно: вводится ограничение на количество купюр в банкомате.  \n  \n// Пример номиналов:  \n  \nconst nominals = [10, 50, 100, 200, 500, 1000, 2000, 5000];  \n  \nconst limits = {10:10,50:10,100:10,200:10,500:10,1000:10,2000:10,5000:10};  \n  \n  \nfunction atmGiveMoney(amount, nominals, limits) {  \n    const minNominal = Math.min(...nominals);  \n    if (amount % minNominal !== 0) {  \n        throw new Error("Невозможно выдать данную сумму");  \n    }  \n  \n    const sorted = [...nominals].sort((a, b) => b - a);  \n    let remaining = amount;  \n    const result = [];  \n  \n    for (const nominal of sorted) {  \n        if (remaining <= 0) break;  \n        const needed = Math.floor(remaining / nominal);  \n        if (needed > 0) {  \n            const available = limits[nominal] || 0;  \n            const take = Math.min(needed, available);  \n            if (take > 0) {  \n                remaining -= take * nominal;  \n                limits[nominal] = available - take; // обновляем лимит  \n                result.push(`${nominal}x${take}`);  \n            }  \n        }    }  \n    if (remaining > 0) {  \n        throw new Error("Невозможно выдать данную сумму");  \n    }  \n  \n    return result;  \n}  \n  \n  \nconsole.log(atmGiveMoney(18500, nominals, limits))   \n// [ '5000x3', '2000x1', '1000x1', '500x1' ]  \n  \nconsole.log(atmGiveMoney(8750, nominals, limits));  \n  \n// [ '5000x1', '2000x1', '1000x1', '500x1', '200x1', '50x1' ]  \n  \nconsole.log(atmGiveMoney(10000, nominals, limits));  \n  \n// [ '5000x2' ]  \n  \nconsole.log(atmGiveMoney(150, nominals, limits));  \n  \n// [ '100x1', '50x1' ]  \n  \n  \nconst customLimits = { 10: 20, 50: 15, 100: 20, 200: 5, 500: 3, 1000: 5, 2000: 2, 5000: 1 };  \n  \nconsole.log(atmGiveMoney(13500, nominals, customLimits));  \n  \n// Ожидаемый вывод: [ '5000x1', '2000x2', '1000x3', '500x1' ]\n	js	t	\N	\N	2025-06-29 12:12:00.074	2025-06-29 12:12:00.074	{}	{}
cmchmqovc002r13sxzij9oon2	cmchmqohb002613sxycod6ivv	[]	21. throttling с сохранием аргументов и this	3	20	Постановка задачи:\nРеализуйте функцию throttle, которая принимает функцию (func) и интервал времени (wait) в миллисекундах, и возвращает новую функцию. Новая функция должна вызывать исходную функцию не чаще одного раза за указанный интервал. При вызове, если функция уже находится в состоянии ожидания, последующие вызовы должны сохранять последние переданные аргументы, и когда интервал истечет, функция должна быть вызвана с сохраненными аргументами, а затем цикл повторяется. Также необходимо продемонстрировать работу throttle, например, с функцией, которая увеличивает счётчик, при этом выводить сообщения в консоль для отслеживания этапов работы (немедленный вызов, ожидание, повторный вызов с сохраненными аргументами и т.д.).\\nhttps://bigfrontend.dev/problem/implement-basic-throttle\\n	function throttle(func, wait) {  \n    let waiting = false, lastArgs = null;  \n  \n    return function(...args){  \n        console.log('throttle: функция вызвана.');  \n  \n        if (!waiting) {  \n            func.apply(this, args);  \n            console.log('throttle: вызвали func немедленно.');  \n            waiting = true;  \n  \n            let timeout = () => {  \n                setTimeout(() => {  \n                    waiting = false;  \n                    console.log('throttle: таймер истёк, waiting = false.');  \n                    if(lastArgs){  \n                        func.apply(this, lastArgs);  \n                        console.log('throttle: вызвали func с lastArgs.');  \n                        lastArgs = null;  \n                        waiting = true;  \n                        timeout();  \n                    }  \n                }, wait);  \n            };  \n  \n            timeout();  \n        } else {  \n            lastArgs = args;  \n            console.log('throttle: функция в ожидании, сохранили аргументы в lastArgs.');  \n        }  \n    }}  \n  \n  \n// Функция, которую будем тротлить  \nlet counter = 0;  \nfunction testFunc() {  \n    counter++;  \n    console.log('>>> testFunc выполнена. Counter:', counter, 'Time:', new Date().toLocaleTimeString());  \n}  \n  \n// Применяем throttle к testFunc с интервалом 2000 миллисекунд (2 секунды)  \nlet throttledTestFunc = throttle(testFunc, 2000);  \n  \n// Вызываем throttledTestFunc каждые 500 миллисекунд  \nlet intervalId = setInterval(() => {  \n    throttledTestFunc();  \n}, 500);  \n  \n// Останавливаем вызовы через 10 секунд  \nsetTimeout(() => {  \n    clearInterval(intervalId);  \n    console.log('Тест завершён.');  \n}, 10000);	js	t	\N	\N	2025-06-29 12:11:59.976	2025-06-29 12:11:59.976	{}	{}
cmchmqp10002z13sxt02x3oe3	cmchmqohb002613sxycod6ivv	["ВК  canonizePath в трех частях"]	Simplify path	4	28		\nexport const fs = [  \n  \n    '/dir/subdir/../file.txt',  \n    '/dir/subdir/a/b/c/d/file.txt',  \n    '/dir//file.txt',  \n    '/dir////file.txt',  \n    '/dir/',  \n    '/dir/..',  \n    '/',  \n    '/dir/./././././file.txt',  \n    '/dir/subdir/../../../file.txt',  \n    '/dir/subdir/../../../subdir/../file.txt',  \n    '/dir1',  \n    '/dir2/subdir1/file1.txt',  \n    '/dir2/subdir1/file2.txt',  \n    '/dir3/subdir1/file2.txt',  \n    '/dir3/subdir2',  \n    '/dir3/subdir2/file3.txt',  \n];  \n  \n// Реализовать функцию`canonizePath`, которая переделывает путь, нормализуя его следующим образом:  \n  \n// - Схлопывает все последовательные слеши (`///`превращаются в один`/`).  \n// - Удаляет`..`, поднимаясь на уровень выше в иерархии путей.  \n// - Игнорирует все`.` как ссылки на текущую директорию  \n  \n  \n  \nfunction simplifyPath(path) {  \n    const stack = [];  \n  \n    for (const part of path.split('/')) {  \n        if (part === '..') {  \n            if (stack.length > 0) {  \n                stack.pop();  \n            }  \n        } else if (part && part !== '.') {  \n            stack.push(part);  \n        }  \n    }    return '/' + stack.join('/');  \n}  \n  \nconsole.log(simplifyPath("/home/")); // "/home"  \n  \nconsole.log(simplifyPath("/home//foo/")); // "/home/foo"  \n  \nconsole.log(simplifyPath("/home/user/Documents/../Pictures")); // "/home/user/Pictures"  \n  \nconsole.log(simplifyPath("/../")); // "/"  \n  \nconsole.log(simplifyPath("/.../a/../b/c/../d/./")); // "/.../b/d"  \n  \n  \nfs.forEach(path => {  \n    console.log(`Original: ${path} -> Simplified: ${simplifyPath(path)}`);  \n});\n	js	t	\N	\N	2025-06-29 12:12:00.18	2025-06-29 12:12:00.18	{https://leetcode.com/problems/simplify-path/description/}	{}
cmchmqp1p003013sxf6v978cf	cmchmqohb002613sxycod6ivv	[]	printfiles	3	29		\nfunction printFiles(data, depth = 0) {\n    const prefix = ' '.repeat(depth * 4); // Создаем отступ, соответствующий уровню вложенности\n    console.log(`${prefix}${data.name}`);\n\n    // Если у узла есть дочерние элементы, рекурсивно обрабатываем их, увеличивая глубину\n    if (data.children) {\n        data.children.forEach(child => printFiles(child, depth + 1));\n    }\n}\n\n// Тестовые данные\nconst data = {\n    name: 'folder',\n    children: [\n        { name: 'file1.txt' },\n        { name: 'file2.txt' },\n        {\n            name: 'images',\n            children: [\n                { name: 'image.png' },\n                {\n                    name: 'vacation',\n                    children: [\n                        { name: 'crocodile.png' },\n                        { name: 'penguin.png' }\n                    ]\n                }\n            ]\n        },\n        { name: 'shopping-list.pdf' }\n    ]\n};\n\n// Запуск функции для вывода структуры файловой системы\nprintFiles(data);\n\n	js	t	\N	\N	2025-06-29 12:12:00.206	2025-06-29 12:12:00.206	{}	{}
cmchmqy28006413sxp7o9998e	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Задач", "2. IT-One"]	Таймер + счетчик	3	14		function Clicker() {\n  const [clicks, setClicks] = useState(0);\n  const timerRef = useRef(null);\n\n  const onClick = useCallback(() => {\n    if (timerRef.current) clearTimeout(timerRef.current);\n    timerRef.current = setTimeout(() => {\n      setClicks((prevClicks) => prevClicks + 1);\n    }, 2000);\n  }, []);\n\n  useEffect(() => () => clearTimeout(timerRef.current), []);\n\n  return <button onClick={onClick}>{clicks}</button>;\n}	js	f	\N	\N	2025-06-29 12:12:11.888	2025-06-29 12:12:11.888	{}	{}
cmchmqqrq003h13sxtp98za02	cmchmqqo2003b13sxajtzyb2z	[]	6. flattenObject(obj)	3	5	Преобразование вложенного объекта в плоский (flattenObject)\nНапишите функцию, которая принимает вложенный объект и преобразует его в плоскую структуру, объединяя ключи через точку. Глубина вложенности объекта может быть произвольной.\\n	  \n// Напишите функцию flattenObject(obj), которая принимает в качествеаргумента вложенный объект obj // и возвращает новый объект,в котором все свойства объекта obj "разглажены"(преобразованы в одноуровневую структуру)  \n  \nconst obj = {  \n    a: {  \n        b: {  \n            c: 1,  \n            d: 2  \n        },  \n        e: 3  \n    },  \n    f: 4  \n};  \n  \n  \nconst flattenObject = (obj, parentKey = '', result = {}) => {  \n  \n    for (const [key, value] of Object.entries(obj)) {  \n  \n        const newKey = parentKey ? `${parentKey}.${key}` : key;  \n  \n        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {  \n            flattenObject(value, newKey, result);  \n  \n        } else {  \n            result[newKey] = value;  \n        }  \n  \n    }  \n  \n    return result;  \n  \n  \n};  \n  \n  \nconst flattenedObj = flattenObject(obj);  \n  \n// Ожидаемый результат: { 'a.b.c': 1, 'a.b.d': 2, 'a.e': 3, 'f': 4 }  \n  \nconsole.log(flattenedObj);	js	t	\N	\N	2025-06-29 12:12:02.438	2025-06-29 12:12:02.438	{}	{}
cmchmqtef004j13sxyw06kymq	cmchmqtbe004e13sxfcavy82w	[]	5. findVowels (колво гласных)	3	4	Подсчет количества гласных в строке\nРеализуйте функцию, которая подсчитывает количество гласных букв в заданной строке.\\n	\n// vowels - aeiouAEIOU  \n  \n  \n// for of  \n  \nfunction findVowelsForLoop(str) {  \n    const vowels = 'aeiouAEIOU';  \n    let count = 0;  \n  \n    for (let char of str) {  \n        if (vowels.includes(char)) {  \n            count++;  \n        }  \n    }    return count;  \n}  \n  \n  \n// методы массивов  \n  \nfunction findVowelsFilter(str) {  \n    const vowels = 'aeiouAEIOU';  \n    return str.split('').filter(char => vowels.includes(char)).length;  \n}  \n  \n  \n  \nconsole.log(findVowelsForLoop('hello')); // Ожидаемый вывод: 2  console.log(findVowelsForLoop('why'));   // Ожидаемый вывод: 0    \n  \nconsole.log(findVowelsFilter('hello'));  \nconsole.log(findVowelsFilter('why'));\n	js	t	\N	\N	2025-06-29 12:12:05.848	2025-06-29 12:12:05.848	{}	{}
cmchmqqse003i13sx2cx06dwz	cmchmqqo2003b13sxajtzyb2z	[]	7. Реализуйте поверхностное копирование объекта	3	6	Реализация поверхностного и глубокого копирования объекта\nРеализуйте функцию копирования объекта, которая может выполнять как поверхностное копирование, так и глубокое копирование. При глубоком копировании вложенные объекты должны создаваться заново, а при поверхностном — копироваться только на верхнем уровне.\\n	const obj = {  \n    foo: 'bar',  \n    baz: {  \n        qux: {  \n            a: 'b'  \n        }  \n    }};  \n  \nconst copyObj = (obj, shallow = true) => {  \n    if (shallow) {  \n        return { ...obj };  \n    } else {  \n  \n        const deepCopy = (item) => {  \n            if (typeof item !== 'object' || item === null) {  \n                return item;  \n            }  \n  \n            if (Array.isArray(item)) {  \n                return item.map(deepCopy);  \n            }  \n  \n            const result = {};  \n            for (const key in item) {  \n                if (item.hasOwnProperty(key)) {  \n                    result[key] = deepCopy(item[key]);  \n                }  \n            }            return result;  \n        };  \n  \n        return deepCopy(obj);  \n    }  \n};  \n  \n  \nconst _obj = copyObj(obj);   \n_obj.baz.qux.a = 'c';  \n  \nconsole.log(obj.baz.qux.a); // 'c'  \n  \nconst __obj = copyObj(_obj, false);  \n  \n__obj.baz.qux.a = 'd';  \n  \nconsole.log(_obj.baz.qux.a); // 'c'	js	t	\N	\N	2025-06-29 12:12:02.462	2025-06-29 12:12:02.462	{}	{}
cmchmqqt4003j13sxtazt5mj2	cmchmqqo2003b13sxajtzyb2z	[]	8. inverse	3	7	Инвертирование значений в объекте\nДан вложенный объект, содержащий числовые значения 0 и 1. Реализуйте функцию, которая рекурсивно заменяет 0 на 1 и 1 на 0, сохраняя структуру объекта.\\n	\nfunction inverse(obj) {  \n  \n    for (const key in obj) {  \n        if (typeof obj[key] === 'object' && obj[key] !== null) {  \n            inverse(obj[key]);  \n        } else if (obj[key] === 1) {  \n            obj[key] = 0;  \n        } else if (obj[key] === 0) {  \n            obj[key] = 1;  \n        }  \n    }  \n  \n}  \n  \n// Тестовые данные  \nconst tree = {  \n    a: {  \n        a: 1,  \n        b: {  \n            a: 0,  \n            b: 1,  \n        },  \n        c: 0,  \n    },  \n    b: 0,  \n    c: 1,  \n};  \n  \ninverse(tree);  \n  \nconsole.log(tree);  \n  \n/* Ожидаемый вывод:  \n{  \n  a: {    a: 0,    b: {      a: 1,      b: 0,    },    c: 1,  },  b: 1,  c: 0,}  \n*/\n	js	t	\N	\N	2025-06-29 12:12:02.488	2025-06-29 12:12:02.488	{}	{}
cmchmqquh003l13sxaswgeghj	cmchmqqo2003b13sxajtzyb2z	[]	10. deepcopy	3	9	Глубокое копирование объекта\nРеализуйте функцию глубокого копирования объекта, которая создает новую структуру данных без ссылок на оригинальный объект.\\n	\nfunction deepCopy(obj) {\n  if (obj === null || typeof obj !== 'object') {\n    return obj;\n  }\n\n  // Если это массив, возвращаем копию через map\n  return Array.isArray(obj)\n    ? obj.map(deepCopy)\n    : Object.fromEntries(\n        Object.entries(obj).map(([key, value]) => [key, deepCopy(value)])\n      );\n}\n\n// Тестовые данные\nconst original = { a: 1, b: { c: 2 } };\nconst copy = deepCopy(original);\n\nconsole.log(copy); // { a: 1, b: { c: 2 } }\n\n// Проверка глубокого копирования\ncopy.b.c = 3;\nconsole.log(original.b.c); // 2 (не изменилось в оригинале)\n\n\n	js	t	\N	\N	2025-06-29 12:12:02.537	2025-06-29 12:12:02.537	{}	{}
cmchmqqvt003n13sxha4c1asg	cmchmqqo2003b13sxajtzyb2z	[]	12. массив строк	3	11	Преобразование объекта в массив строк\nНапишите функцию, которая преобразует вложенный объект в массив строк, представляющих пути к значениям в формате "ключ: значение".\\n	\nfunction objectToArray(obj, parentKey = '') {  \n    const result = [];  \n  \n    for (const key in obj) {  \n        const value = obj[key];  \n        const formattedKey = parentKey  \n            ? `${parentKey} ${capitalize(key)}`  \n            : capitalize(key);  \n  \n        if (typeof value === 'object' && value !== null) {  \n            result.push(...objectToArray(value, formattedKey));  \n        } else {  \n            result.push(`${formattedKey}: ${value}`);  \n        }  \n    }  \n    return result;  \n}  \n  \nfunction capitalize(str) {  \n    return str.charAt(0).toUpperCase() + str.slice(1).replace('_', ' ');  \n}  \n  \n// Тестовые данные  \nconst data = {  \n    id: 1,  \n    instrument_type: 'stock',  \n    instrument_name: 'Alrosa',  \n    contract: {  \n        id: 12,  \n        size: 25,  \n        payment: {  \n            value: '125',  \n            currency: 'RUB',  \n        },  \n    },  \n};  \n  \nconst result = objectToArray(data);  \n  \nconsole.log(result);  \n  \n/* Ожидаемый вывод:  \n[  \n  'Id: 1',  'Instrument type: stock',  'Instrument name: Alrosa',  'Contract id: 12',  'Contract size: 25',  'Contract payment value: 125',  'Contract payment currency: RUB',]  \n*/\n	js	t	\N	\N	2025-06-29 12:12:02.585	2025-06-29 12:12:02.585	{}	{}
cmchmqqxa003p13sxhu9zzoi6	cmchmqqo2003b13sxajtzyb2z	[]	14. convertMenu	3	13	Преобразование списка элементов в дерево\nДан массив объектов с полями id, parentId и title, представляющих элементы меню. Напишите функцию, которая преобразует этот список в древовидную структуру.\\n	\nfunction convertMenu(items, rootNodeId) {  \n    const idMap = {};  \n  \n    // Инициализация узлов и создание хеш-таблицы  \n    items.forEach(item => {  \n        idMap[item.id] = { ...item, children: [] };  \n    });  \n  \n    let rootNode = idMap[rootNodeId];  \n   \n  \n    // Построение дерева  \n    items.forEach(item => {  \n        const node = idMap[item.id];  \n        if (item.parentId === rootNodeId) {  \n            rootNode.children.push(node);  \n        } else if (item.parentId !== null && item.id !== rootNodeId) {  \n            const parent = idMap[item.parentId];  \n            if (parent) {  \n                parent.children.push(node);  \n            }  \n        }    });  \n  \n    return rootNode;  \n}  \n  \n// Тестовые данные  \nconst items = [  \n    { id: 1, parentId: null, title: 'Food' },  \n    { id: 2, parentId: 1, title: 'Sweets' },  \n    { id: 3, parentId: 2, title: 'Chocolate bars' },  \n    { id: 4, parentId: 1, title: 'Fruits' },  \n    { id: 5, parentId: null, title: 'BBQ utilities' },  \n];  \n  \nconst rootNodeId = 1;  \n  \nconst result = convertMenu(items, rootNodeId);  \n  \n  \nconsole.log(JSON.stringify(result, null, 2));\n	js	t	\N	\N	2025-06-29 12:12:02.639	2025-06-29 12:12:02.639	{}	{}
cmchmqqy1003q13sxk33mhwp6	cmchmqqo2003b13sxajtzyb2z	[]	15. flattenObject(obj)	3	14	Преобразование вложенного объекта в плоский\nРеализуйте функцию, которая преобразует вложенный объект в плоскую структуру, объединяя ключи через точку.\\n	\nfunction flattenObject(obj, parentKey = '', result = {}) {  \n    for (const key in obj) {  \n        const value = obj[key];  \n        const newKey = parentKey ? `${parentKey}.${key}` : key;  \n  \n        if (typeof value === 'object' && value !== null) {  \n            flattenObject(value, newKey, result);  \n        } else {  \n            result[newKey] = value;  \n        }  \n    }  \n    return result;  \n}  \n  \n// Тестовые данные  \nconst obj = {  \n    a: {  \n        b: {  \n            c: 1,  \n            d: 2,  \n        },  \n        e: 3,  \n    },  \n    f: 4,  \n};  \n  \nconst flattenedObj = flattenObject(obj);  \n  \nconsole.log(flattenedObj);  \n  \n/* Ожидаемый вывод:  \n{  \n  'a.b.c': 1,  'a.b.d': 2,  'a.e': 3,  'f': 4,}  \n*/\n	js	t	\N	\N	2025-06-29 12:12:02.665	2025-06-29 12:12:02.665	{}	{}
cmchmqqys003r13sxmully8ip	cmchmqqo2003b13sxajtzyb2z	[]	16. a.b.c.d.e => {a:{b:c{d:{e:{}}}}}	3	15	Преобразование строки в вложенный объект\nНапишите функцию, которая принимает строку вида "a.b.c.d.e" и преобразует её в объект { a: { b: { c: { d: { e: {} } } } } }.\\n	\nfunction stringToNestedObject(str, value = {}) {  \n    const keys = str.split('.');  \n    const lastIndex = keys.length - 1;  \n    let result = {};  \n    let current = result;  \n  \n    for (let i = 0; i < keys.length; i++) {  \n        const key = keys[i];  \n        if (i === lastIndex) {  \n            current[key] = value;  \n        } else {  \n            current[key] = {};  \n            current = current[key];  \n        }  \n    }  \n    return result;  \n}  \n  \n// Тестовые данные  \nconst str = 'a.b.c.d.e';  \nconst value = 42;  \n  \nconst nestedObj = stringToNestedObject(str, value);  \n  \nconsole.log(JSON.stringify(nestedObj, null, 2));\n	js	t	\N	\N	2025-06-29 12:12:02.692	2025-06-29 12:12:02.692	{}	{}
cmchmqs4m003t13sxfe524pcs	cmchmqs4f003s13sx4aqxrcfz	[]	1. Add Two Promises	3	0	Постановка задачи:Даны два промиса, возвращающих числа. Необходимо написать функцию, которая возвращает новый промис, резолвящийся в сумму результатов этих двух промисов.\\n	// promise.all + async await  \nasync function sumPromises1(promise1, promise2) {  \n    const [result1, result2] = await Promise.all([promise1, promise2]);\n    return result1 + result2;\n}  \n\n// вложенные then  \nfunction sumPromises2(promise1, promise2) {  \n    return promise1.then(result1 =>\n        promise2.then(result2 => result1 + result2)\n    );\n}  \n\n// Создание промисов  \nconst promise1 = new Promise(resolve => setTimeout(() => resolve(2), 20));  \nconst promise2 = new Promise(resolve => setTimeout(() => resolve(5), 60));  \n\nasync function runInOrder() {  \n    // Вариант 1  \n    const result1 = await sumPromises1(promise1, promise2);\n    console.log("sumPromises1:", result1);  \n\n    // Вариант 2  \n    const result2 = await sumPromises2(promise1, promise2);\n    console.log("sumPromises2:", result2);\n}  \n\n// Запуск  \nrunInOrder();	js	t	\N	\N	2025-06-29 12:12:04.198	2025-06-29 12:12:04.198	{https://leetcode.com/problems/add-two-promises/}	{}
cmchmqs5d003u13sx1x2bz4t8	cmchmqs4f003s13sx4aqxrcfz	[]	2. Цепочка из 3 промисов	3	1	Постановка задачи:Реализуйте цепочку из трёх промисов с задержкой в 3 секунды на каждом этапе. Для этого необходимо:\\nНаписать функцию multiplyByThree, которая принимает число, через 3 секунды умножает его на 3 (обратите внимание, в коде умножение происходит на 2, что может быть ошибкой) и возвращает результат в виде промиса.Сформировать цепочку промисов, где:Первый промис обрабатывает начальное число.Результат каждого промиса передаётся следующему.После третьего промиса результат выводится в консоль.Реализовать данное поведение двумя способами:С использованием метода then.С использованием синтаксиса async/await.\\nЭта задача демонстрирует работу с цепочками асинхронных операций и позволяет сравнить подходы с использованием then и async/await.\\n	// сделать цепочку из 3 промисов  \n// каждый промис умножает входное число на 3 и передает дальше через 3 секунды  \n// последний выводит в консоль  \n  \n  \nconst number = 3  \n// сама функция  \nfunction multiplyByThree(value) {  \n    return new Promise(resolve => {  \n        setTimeout(() => {  \n            resolve(value * 2)  \n        }, 3000)  \n    })  \n}  \n  \n  \n  \n// then usage  \nmultiplyByThree(number)  \n    .then(result => multiplyByThree(result))  \n    .then(result => multiplyByThree(result))  \n    .then(result => console.log(result))  \n  \n  \n  \n// async await usage  \nasync function processWithAsyncAwait(value) {  \n  \n    const result1 = await multiplyByThree(value)  \n    const result2 = await multiplyByThree(result1)  \n    const result3 = await multiplyByThree(result2)  \n  \n    console.log(result3)  \n}  \n  \n  \nprocessWithAsyncAwait(number);	js	t	\N	\N	2025-06-29 12:12:04.226	2025-06-29 12:12:04.226	{}	{}
cmchmqs64003v13sxshqe8t5c	cmchmqs4f003s13sx4aqxrcfz	[]	3. Выводить индексы элементов с интервалом 1 секунда	3	2	Постановка задачи:\\nСоздайте функцию, которая выводит индексы элементов массива с интервалом в 1 секунду, не используя setInterval. Для демонстрации различных подходов, реализуйте эту функциональность несколькими способами:\\nС использованием setTimeout в цикле:Для каждого элемента массива установите задержку, пропорциональную его индексу, чтобы выводить индекс с нужным интервалом.С использованием async/await и функции задержки (sleep):Напишите функцию delay, возвращающую промис с задержкой, а затем в асинхронной функции выводите индекс и ждите 1 секунду перед переходом к следующему.С использованием метода reduce и цепочки then:Постройте цепочку промисов, где каждый шаг выводит индекс и добавляет задержку в 1 секунду.С использованием рекурсии и setTimeout:Напишите рекурсивную функцию, которая выводит текущий индекс и вызывает себя с увеличенным индексом через 1 секунду.\\nКаждый из этих подходов демонстрирует различные способы организации асинхронного кода для последовательного выполнения действий с заданной задержкой.\\n	// функция должна выводить индексы элементов массива с интервалом 1 секунда  \n// нельзя использовать setInterval  \n  \n  \nfunction logIndexesWithTimeout(arr) {  \n    for (let i = 0; i < arr.length; i++) {  \n        setTimeout(() => {  \n            console.log("Index with setTimeout:", i);  \n        }, i * 1000);  \n    }  \n}  \n  \nlogIndexesWithTimeout([1, 2, 3, 4, 5]);  \n  \n  \n  \n  \n// sleep для задержки, для использования в async/await  \nfunction delay(ms) {  \n    return new Promise(resolve => setTimeout(resolve, ms));  \n}  \n  \n  \n// async await + sleep  \nasync function logIndexesAsync(arr) {  \n    for (let i = 0; i < arr.length; i++) {  \n        console.log("Index with async/await:", i);  \n        await delay(1000);  \n    }  \n}  \n  \n// Пример использования:  \nlogIndexesAsync([1, 2, 3, 4, 5]);  \n  \n  \n  \n// reduce + then  \nfunction logIndexesWithPromises(arr) {  \n    arr.reduce((promise, _, index) => {  \n        return promise.then(() => {  \n            console.log("Index with promises:", index);  \n            return new Promise(resolve => setTimeout(resolve, 1000));  \n        });  \n    }, Promise.resolve());  \n}  \n  \n  \n// logIndexesWithPromises([1, 2, 3, 4, 5]);  \n  \n  \n  \n// рекурсия + setTimeout  \nfunction logIndexesRecursively(arr, index = 0) {  \n    if (index < arr.length) {  \n        console.log("Index with recursion:", index);  \n        setTimeout(() => logIndexesRecursively(arr, index + 1), 1000);  \n    }  \n}  \n  \nlogIndexesRecursively([1, 2, 3, 4, 5]);	js	t	\N	\N	2025-06-29 12:12:04.253	2025-06-29 12:12:04.253	{}	{}
cmchmqs6y003w13sxlcogpvs5	cmchmqs4f003s13sx4aqxrcfz	[]	4. Обертка над фетчем	3	3	**Постановка задачи:\\nРеализуйте функцию customFetch, которая выполняет HTTP-запрос по заданному URL с возможностью повторной попытки в случае ошибки. Функция принимает два параметра:\\nurl — адрес для запроса.count — количество оставшихся попыток.\\nЕсли запрос с помощью fetch завершается неудачно, функция уменьшает счетчик попыток и через 1 секунду повторяет запрос, пока не исчерпает все попытки. Если ни одна из попыток не увенчалась успехом, функция возвращает ошибку. Такой подход позволяет реализовать механизм ретраев для fetch-запросов.\\n	function customFetch(url, count) {\n  return fetch(url).catch((err) => {\n    return new Promise((res, rej) => {\n      count--;\n      if (count > 0) {\n        setTimeout(() => {\n          customFetch(url, count).then(res).catch(rej);\n        }, 1000);\n      } else {\n        console.log("zdes", err);\n        rej(err);\n      }\n    });\n  });\n}	js	t	\N	\N	2025-06-29 12:12:04.282	2025-06-29 12:12:04.282	{}	{}
cmchmqy2y006513sxmp3np22c	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Задач", "2. IT-One"]	HeavyFunc (ленивая инициализация)	3	15		const heavyFunc = (count) => count;\nconst LazyInit = ({ count }) => {\n  const [state, setState] = useState(() => heavyFunc(count));\n  return <button onClick={() => setState((prev) => prev + 1)}>{state}</button>;\n};	js	f	\N	\N	2025-06-29 12:12:11.914	2025-06-29 12:12:11.914	{}	{}
cmchmqsbu004213sxyfpuk17s	cmchmqs4f003s13sx4aqxrcfz	[]	10. Кастомный race	3	9	Постановка задачи:\\nРеализуйте функцию race, которая принимает массив значений, где каждый элемент может быть как промисом, так и обычным значением. Функция должна возвращать новый промис, который разрешается или отклоняется с тем значением или ошибкой, которое произойдет первым. Для каждого элемента массива необходимо использовать Promise.resolve(), чтобы гарантировать корректную работу даже для не-промисов.\\nТребования:\\nЕсли первый завершившийся элемент (или значение) успешно завершается, результирующий промис должен разрешиться с его значением.Если первый завершившийся элемент отклоняется, результирующий промис должен быть отклонён с его ошибкой.При этом функция должна работать аналогично встроенному методу Promise.race.\\nВ примере:\\np1 — промис, который разрешается через 500 мс со значением "p1".p2 — промис, который отклоняется через 300 мс с ошибкой "p2 Error".p3 — немедленное значение "Immediate Value".\\nОжидаемый результат вызова race([p1, p2, p3]) — промис, который сразу разрешается значением "Immediate Value", так как оно доступно немедленно.\\n	function race(promises) {  \n    return new Promise((resolve, reject) => {  \n  \n        promises.forEach((promise) => {  \n            // Оборачиваем каждый элемент в Promise.resolve() на случай, если это не промис  \n            Promise.resolve(promise).then(resolve, reject);  \n        });  \n  \n  \n    });  \n}  \n  \n  \nconst p1 = new Promise((resolve) => setTimeout(resolve, 500, "p1"));  \nconst p2 = new Promise((resolve, reject) => setTimeout(reject, 300, "p2 Error"));  \nconst p3 = "Immediate Value"; // Не-промис  \n  \n  \n// Используем race  \nrace([p1, p2, p3])  \n    .then((value) => console.log("Resolved with:", value))  \n    .catch((error) => console.error("Rejected with:", error)); // Ожидаемый вывод: "Resolved with: Immediate Value"	js	t	\N	\N	2025-06-29 12:12:04.458	2025-06-29 12:12:04.458	{}	{}
cmchmqy3p006613sxzdypoqt1	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Задач", "2. IT-One"]	Subcomponent рендерится только при чётных числах	3	16		const SubElement = memo(({ count, clicker }) => {\n  return <button onClick={clicker}>{count}</button>;\n}, (prev, next) => next.count % 2 !== 0);	js	f	\N	\N	2025-06-29 12:12:11.941	2025-06-29 12:12:11.941	{}	{}
cmchmqsel004613sxnl4nkpqu	cmchmqs4f003s13sx4aqxrcfz	[]	14. Кастомный any	3	13	Постановка задачи:\\nРеализуйте функцию any, которая принимает массив промисов (или значений) и возвращает новый промис, который:\\nРазрешается, как только один из переданных промисов успешно завершится, возвращая его значение.Если все промисы отклоняются, функция должна отклониться с ошибкой типа AggregateError, содержащей массив всех ошибок.\\nОсобенности реализации:\\nЕсли переданный массив пуст, немедленно отклоните промис с AggregateError и сообщением, что промисы не найдены.Для каждого элемента массива используйте Promise.resolve(), чтобы обеспечить корректную обработку даже если элемент не является промисом.Следите за количеством оставшихся промисов. Если после обработки всех элементов ни один не разрешился успешно, отклоните результирующий промис с AggregateError, включающим все накопленные ошибки.\\nПримеры использования:\\nЕсли один из промисов успешно завершается, функция должна вернуть его результат.Если все промисы завершаются с ошибкой, функция должна вернуть AggregateError с информацией обо всех произошедших ошибках.\\n	function any(promises) {  \n    let counter = promises.length;  \n    let errors = [];  \n  \n    return new Promise((resolve, reject) => {  \n        if (!promises.length) {  \n            // Если массив пуст, немедленно отклоняем с пустым массивом ошибок  \n            return reject(new AggregateError('No promise found', errors));  \n        }  \n  \n        promises.forEach((promise) => {  \n            Promise.resolve(promise)  \n                .then(resolve)   \n.catch((error) => {  \n                    errors.push(error);  \n                    counter--;  \n                    if (counter === 0) {  \n                        reject(new AggregateError('All promises are rejected', errors));  \n                    }  \n                });  \n        });  \n    });  \n}  \n  \n// Примеры использования:  \n  \nconst p1 = Promise.reject("Error from p1");  \nconst p2 = new Promise((resolve) => setTimeout(resolve, 100, "Success from p2"));  \nconst p3 = Promise.reject("Error from p3");  \n  \n  \n  \n// Если p2 завершается первым, результат - "Success from p2"  \nany([p1, p2, p3])  \n    .then((result) => console.log("Resolved with:", result))  \n    .catch((error) => console.error("Rejected with:", error)); // Ожидаемый вывод: "Resolved with: Success from p2"  \n  \n  \n// Пример, когда все промисы отклоняются  \nany([p1, Promise.reject("Error from p2"), p3])  \n    .then((result) => console.log("Resolved with:", result))  \n    .catch((error) => {  \n        console.error("Rejected with AggregateError:", error);  \n    });	js	t	\N	\N	2025-06-29 12:12:04.558	2025-06-29 12:12:04.558	{}	{}
cmchmqtlr004t13sxtuupxmhq	cmchmqtbe004e13sxfcavy82w	[]	15. Valid Parentheses	3	14	Проверка корректности скобок (Valid Parentheses)\nРеализуйте функцию, которая проверяет, является ли строка корректной последовательностью скобок.\\n	\nfunction isValid(s) {  \n    const stack = [];  \n    const mapping = {  \n        ')': '(',  \n        '}': '{',  \n        ']': '[',  \n    };  \n  \n    for (let char of s) {  \n        if (char in mapping) {  \n            if (stack.pop() !== mapping[char]) {  \n                return false;  \n            }  \n        } else {  \n            stack.push(char);  \n        }  \n    }  \n    return stack.length === 0;  \n}\n	js	t	\N	\N	2025-06-29 12:12:06.111	2025-06-29 12:12:06.111	{https://leetcode.com/problems/valid-parentheses/}	{}
cmchmqshi004a13sx8rfo7yaf	cmchmqs4f003s13sx4aqxrcfz	[]	18. url limit	3	17	Постановка задачи:\\nРеализуйте функцию get, которая выполняет HTTP-запрос по заданному URL и возвращает данные в формате JSON. При возникновении ошибки (например, если HTTP-статус не является успешным), функция должна повторять запрос до достижения заданного лимита попыток.\\nТребования:\\nФункция принимает два параметра:url — адрес запроса.limit — максимальное число попыток выполнить запрос.При каждом вызове fetch:Если ответ успешен (response.ok === true), функция должна преобразовать его в JSON и вернуть полученные данные.Если ответ не успешен, сгенерировать ошибку с сообщением, включающим HTTP-статус.Если запрос завершился ошибкой:Увеличивать счётчик попыток.Если количество попыток меньше лимита, повторить запрос.Если достигнут лимит попыток, выбросить ошибку, возникшую в последнем запросе.\\nВ этом примере функция get пытается выполнить запрос к https://example.com/data до 5 раз. Если ни одна попытка не завершается успешно, выводится ошибка.\\n	get('https://example.com/data', 5)\n    .then(res => console.log(res))\n    .catch(err => console.error(err));	js	f	\N	\N	2025-06-29 12:12:04.663	2025-06-29 12:12:04.663	{}	{}
cmchmqsjz004d13sxuqggeqlh	cmchmqs4f003s13sx4aqxrcfz	[]	21. requestBus	3	20	Постановка задачи:\\nРеализуйте функцию requestBus, которая выполняет асинхронные запросы к заданным конечным точкам (endpoints) с ограничением на число одновременных запросов. Функция должна:\\nПринимать следующие параметры:endpoints: массив URL (конечных точек) для выполнения HTTP-запросов.limit: максимальное количество одновременных запросов.callback: функция, которая будет вызвана после завершения всех запросов и получит массив результатов.Запускать запросы параллельно, но не более чем limit запросов одновременно. Для каждого запроса использовать fetch для получения данных в формате JSON.Сохранять результаты запросов в массив results так, чтобы порядок результатов соответствовал порядку URL в исходном массиве.Обрабатывать ошибки: если запрос завершается с ошибкой, соответствующий элемент массива results должен содержать информацию об ошибке.После выполнения всех запросов вызывать функцию callback, передавая ей массив results.\\nВ данном примере функция выполняет запросы к двум конечным точкам, не превышая 2 одновременных запроса, и после завершения всех запросов выводит массив результатов.\\n	requestBus(["https://api.example.com/data1", "https://api.example.com/data2"], 2, (results) => {\n    console.log(results);\n});	js	f	\N	\N	2025-06-29 12:12:04.752	2025-06-29 12:12:04.752	{}	{}
cmchmqxr5005q13sxyqaj89ua	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Приложений", "1. Списки постов"]	Росбанк	3	0	РефакторЧистый\\n	\N	\N	f	\N	\N	2025-06-29 12:12:11.49	2025-06-29 12:12:11.49	{https://codesandbox.io/p/sandbox/rosbank-refaktor-ycm9v9?file=%2Fsrc%2FComponent.tsx%3A9%2C21&workspaceId=f1cb77c0-3a01-41fb-bdc8-dc17dd25b062,https://codesandbox.io/p/sandbox/rosbank-spisok-chistyy-forked-mv8dlc?file=%2Fsrc%2FComponent.tsx%3A116%2C1}	{}
cmchmqtf6004k13sxs14r2igi	cmchmqtbe004e13sxfcavy82w	[]	6. Is Subsequence	3	5	Является ли одна строка подпоследовательностью другой (Is Subsequence)\nНапишите функцию, которая определяет, является ли одна строка подпоследовательностью другой.\\n	/**  \n * Подход 1: Два указателя * Мы проходим по обеим строкам одновременно, используя два указателя. * Если символ в `s` совпадает с текущим символом в `t`, мы движемся вперёд в обеих строках. * Если символы не совпадают, движемся только в `t`. */  \n  \nfunction isSubsequenceTwoPointers(s, t) {  \n    let sIndex = 0;  \n    let tIndex = 0;  \n  \n    while (sIndex < s.length && tIndex < t.length) {  \n        if (s[sIndex] === t[tIndex]) {  \n            sIndex++;  \n        }  \n        tIndex++;  \n    }  \n  \n    return sIndex === s.length;  \n}  \n  \n/**  \n * Подход 2: Цикл for * Используем один указатель для строки `s` и проходим через строку `t`. * Если находим совпадающий символ, увеличиваем указатель строки `s`. */  \n  \nfunction isSubsequenceForLoop(s, t) {  \n    let sIndex = 0;  \n  \n    for (let i = 0; i < t.length && sIndex < s.length; i++) {  \n        if (s[sIndex] === t[i]) {  \n            sIndex++;  \n        }  \n    }  \n    return sIndex === s.length;  \n}  \n  \n  \nconsole.log("Using Two Pointers:");  \n  \nconsole.log(isSubsequenceTwoPointers("abc", "ahbgdc")); console.log(isSubsequenceTwoPointers("axc", "ahbgdc"));  \n  \n  \nconsole.log("Using For Loop:");  \n  \nconsole.log(isSubsequenceForLoop("abc", "ahbgdc"));  \nconsole.log(isSubsequenceForLoop("axc", "ahbgdc"));	js	t	\N	\N	2025-06-29 12:12:05.874	2025-06-29 12:12:05.874	{https://leetcode.com/problems/is-subsequence/}	{}
cmchmqtfw004l13sx8lt7z46r	cmchmqtbe004e13sxfcavy82w	[]	7. Length of Last Word	3	6	Длина последнего слова в строке (Length of Last Word)\nРеализуйте функцию, которая принимает строку и возвращает длину последнего слова.\\n	\n/**  \n * Подход 1: Метод split * Разделяет строку на слова по пробелам и возвращает длину последнего слова. */  \nfunction lengthOfLastWordSplit(s) {  \n    const words = s.trim().split(' ');  \n    return words[words.length - 1].length;  \n}  \n  \n/**  \n * Подход 2: Обход строки с конца * Проходим по строке с конца, пока не найдем начало последнего слова. */  \nfunction lengthOfLastWordFromEnd(s) {  \n    let length = 0;  \n    let i = s.length - 1;  \n  \n    // Пропускаем конечные пробелы  \n    while (i >= 0 && s[i] === ' ') {  \n        i--;  \n    }  \n  \n    // Считаем длину последнего слова  \n    while (i >= 0 && s[i] !== ' ') {  \n        length++;  \n        i--;  \n    }  \n  \n    return length;  \n}  \n  \n  \nconsole.log("Using Split:");  \n  \nconsole.log(lengthOfLastWordSplit("Hello World"));            // Ожидаемый вывод: 5  \nconsole.log(lengthOfLastWordSplit("   fly me   to   the moon  ")); // Ожидаемый вывод: 4  \nconsole.log(lengthOfLastWordSplit("luffy is still joyboy"));  // Ожидаемый вывод: 6  \n  \nconsole.log("Using From End:");  \n  \nconsole.log(lengthOfLastWordFromEnd("Hello World"));            // Ожидаемый вывод: 5  \nconsole.log(lengthOfLastWordFromEnd("   fly me   to   the moon  ")); // Ожидаемый вывод: 4  \nconsole.log(lengthOfLastWordFromEnd("luffy is still joyboy"));  // Ожидаемый вывод: 6\n	js	t	\N	\N	2025-06-29 12:12:05.901	2025-06-29 12:12:05.901	{https://leetcode.com/problems/length-of-last-word/}	{}
cmchmqvan005b13sx6vxzy3c4	cmchmqv6t005513sxb364k7m8	[]	6. Функция-счётчик с методами инкремента, декремента и сброса	3	5	Создайте функцию createCounter(init), которая принимает начальное значение init и возвращает объект с методами:\\nincrement() – увеличивает текущее значение счётчика на 1 и возвращает его,decrement() – уменьшает текущее значение счётчика на 1 и возвращает его,reset() – сбрасывает значение счётчика к начальному init и возвращает его.\\n	type Counter = {  \n    increment: () => number,  \n    decrement: () => number,  \n    reset: () => number,  \n}  \n  \nfunction createCounter(init: number): Counter {  \n    let presentCount = init  \n  \n    function increment() {  \n        return ++presentCount;  \n    }  \n  \n    function decrement() {  \n        return --presentCount;  \n    }  \n  \n    function reset() {  \n        return presentCount = init  \n    }  \n  \n    return { increment, decrement, reset };  \n}  \n  \n  \n  \nconst counter = createCounter(10)  \n  \n  \n  \nconsole.log(counter.increment()); // 6  \nconsole.log(counter.reset()); // 5  \nconsole.log(counter.decrement()); // 4	js	t	\N	\N	2025-06-29 12:12:08.303	2025-06-29 12:12:08.303	{}	{}
cmchmqvbe005c13sxekdsujuh	cmchmqv6t005513sxb364k7m8	[]	7. Функция для создания массива функций, возвращающих свой индекс	3	6	Создайте функцию createFunctionArray(), которая создаёт массив функций. Каждая функция должна возвращать свой индекс в массиве при вызове.\\n	function createFunctionArray() {  \n    const functionsArray = [];  \n  \n    for (let i = 0; i < 10; i++) {  \n        functionsArray[i] = function() {  \n            return i;  \n        };  \n    }  \n  \n    return functionsArray;  \n}  \n  \nconst functionArray = createFunctionArray();  \n  \nconsole.log(functionArray[0]()); // Вывод: 0  \nconsole.log(functionArray[1]()); // Вывод: 1  \nconsole.log(functionArray[2]()); // Вывод: 2	js	t	\N	\N	2025-06-29 12:12:08.33	2025-06-29 12:12:08.33	{}	{}
cmchmqvc3005d13sxsm7hxb57	cmchmqv6t005513sxb364k7m8	[]	8. Функция-замыкание с автоматическим увеличением счётчика	3	7	Создайте самовызывающееся замыкание, в котором переменная counter увеличивается при каждом вызове функции count().\\n	\nconst count = (function () {\n    let counter = 0;\n    return function () {\n        return console.log(++counter);\n    };\n})();\n\ncount(); // 1\ncount(); // 2\n\n	js	t	\N	\N	2025-06-29 12:12:08.355	2025-06-29 12:12:08.355	{}	{}
cmchmqvd1005e13sxj5ybb2bt	cmchmqv6t005513sxb364k7m8	[]	9. Функция-счётчик с сохранением состояния	3	8	Напишите функцию makeCounter(initialValue), которая создаёт счётчик с начальным значением initialValue. Возвращаемая функция должна увеличивать значение на 1 при каждом вызове.\\n	\nconst makeCounter = (initialValue) => {  \n    let result = initialValue  \n    return () => {  \n        result += 1  \n        return result  \n    }  \n}  \nconst counterB = makeCounter(100);  \n  \nconsole.log(counterB()); // 101\n	js	t	\N	\N	2025-06-29 12:12:08.389	2025-06-29 12:12:08.389	{}	{}
cmchmqvdo005f13sx87v6b1vq	cmchmqv6t005513sxb364k7m8	[]	10. Каррированная функция для суммирования чисел	3	9	Реализуйте функцию add(sum), которая возвращает новую функцию. Эта функция должна продолжать принимать аргументы, пока не встретится undefined, после чего вернуть сумму всех переданных чисел.\\n	\nconst add = (sum) => (nextNum) => nextNum !== undefined ? add(sum + nextNum) : sum;\n  \nconst ad = add(4);  \n  \nconsole.log(ad(5)()); // 9\n	js	t	\N	\N	2025-06-29 12:12:08.413	2025-06-29 12:12:08.413	{}	{}
cmchmqxsj005r13sxv3zsyq4o	cmchmqxqy005p13sxwxiyi437	["Рефакторинг Мини-Приложений", "1. Списки постов"]	IT-One List	3	1	РефакторЧистый\\n	\N	\N	f	\N	\N	2025-06-29 12:12:11.54	2025-06-29 12:12:11.54	{https://codesandbox.io/p/sandbox/it-one-list-refaktor-lfg3td?file=%2Fsrc%2FComponent.tsx%3A37%2C12,https://codesandbox.io/p/sandbox/it-one-list-chistyy-3w27yf?file=%2Fsrc%2FComponent.tsx%3A22%2C24}	{}
cmchmqw4v005h13sx71d95ohe	cmchmqw4o005g13sxptsizq2i	[]	1. Базовые хуки	3	0	|Хук|Где встречалось|Пустая версия|Готовая версия|\n|---|---|---|---|\n|useFetch|Часто, Qugo, Kotelov, ВТБ|Пустой|Готовый|\n|useDebounce|-|Пустой|Готовый|\n|useThrottle|-|Пустой|Готовый|\\n\\n	\N	\N	f	\N	\N	2025-06-29 12:12:09.391	2025-06-29 12:12:09.391	{https://codesandbox.io/p/sandbox/usefetch-pustoy-7khtw5?file=%2Fsrc%2FApp.tsx%3A29%2C30,https://codesandbox.io/p/sandbox/usefetch-gotovyy-cxv9yr?file=%2Fsrc%2FApp.tsx%3A1%2C1-90%2C1,https://codesandbox.io/p/sandbox/usedebounce-pustoy-77htfj?file=%2Fsrc%2FApp.tsx%3A25%2C1,https://codesandbox.io/p/sandbox/usedebounce-gotovyy-n72lrz?file=%2Fsrc%2FApp.tsx%3A12%2C1,https://codesandbox.io/p/sandbox/usethrottle-pustoy-t85y3k?file=%2Fsrc%2FApp.tsx%3A1%2C1-48%2C1,https://codesandbox.io/p/sandbox/usethrottle-gotovyy-2hjscp?file=%2Fsrc%2FApp.tsx%3A7%2C1}	{}
cmchmqw5u005i13sxdfqnhv63	cmchmqw4o005g13sxptsizq2i	[]	2. Средние хуки	3	1	|Хук|Где встречалось|Пустая версия|Готовая версия|\n|---|---|---|---|\n|useLocalStorage|Разные компании|Пустой|Готовый|\n|(упрощенный)|-|-|Упрощенный|\n|useIsFirstRender|-|Пустой|Готовый|\n|useWindowSize|-|Пустой|Готовый|\n|useClickOutside|ГК Т1|Пустой|Готовый|\\n\\n	\N	\N	f	\N	\N	2025-06-29 12:12:09.426	2025-06-29 12:12:09.426	{https://codesandbox.io/p/sandbox/uselocalstorage-pustoy-44tjkj?file=%2Fsrc%2FApp.tsx%3A38%2C24,https://codesandbox.io/p/sandbox/uselocalstorage-gotovyy-rz48cm?file=%2Fsrc%2FApp.tsx%3A77%2C16,https://codesandbox.io/p/sandbox/uselocalstorage-uproshchennyy-gotovyy-forked-tnwjjs?file=%2Fsrc%2FApp.tsx%3A6%2C3&workspaceId=f1cb77c0-3a01-41fb-bdc8-dc17dd25b062,https://codesandbox.io/p/sandbox/useisfirstrender-pustoy-jc29s2?file=%2Fsrc%2FApp.tsx%3A26%2C1,https://codesandbox.io/p/sandbox/useisfirstrender-gotovyy-cc35hw?file=%2Fsrc%2FApp.tsx,https://codesandbox.io/p/sandbox/usewindowsize-pustoy-zxxz4c?file=%2Fsrc%2FApp.tsx%3A1%2C1-20%2C1,https://codesandbox.io/p/sandbox/usewindowsize-gotovyy-9v3nk5?file=%2Fsrc%2FApp.tsx%3A48%2C1,https://codesandbox.io/p/sandbox/useclickoutside-pustoy-wzw22m?file=%2Fsrc%2FApp.tsx%3A32%2C3-33%2C1,https://codesandbox.io/p/sandbox/useclickoutside-gotovyy-l2jyyn?file=%2Fsrc%2FApp.tsx%3A18%2C7}	{}
cmchmqw6n005j13sxf6zzpeak	cmchmqw4o005g13sxptsizq2i	[]	3. Хуки для сложных сценариев	3	2	|Хук|Где встречалось|Пустая версия|Готовая версия|\n|---|---|---|---|\n|useStateWithHistory|Сбер|Пустой|Готовый|\n|useArray|Билайн|Пустой|Готовый|\\n	\N	\N	f	\N	\N	2025-06-29 12:12:09.456	2025-06-29 12:12:09.456	{https://codesandbox.io/p/sandbox/usestatewithhistory-pustoy-cz2vc7?file=%2Fsrc%2FApp.tsx%3A1%2C1-26%2C1,https://codesandbox.io/p/sandbox/usestatewithhistory-c48xpp?file=%2Fsrc%2FApp.tsx%3A1%2C1-67%2C1,https://codesandbox.io/p/sandbox/usearray-pustoy-6v23r4?file=%2Fsrc%2FApp.tsx%3A6%2C76,https://codesandbox.io/p/sandbox/usearray-gotovyy-wjyzvc?file=%2Fsrc%2FApp.tsx%3A14%2C43}	{}
cmchmqwv1005l13sxhj8rammy	cmchmqwuu005k13sxfobid0ek	[]	1. Базовые задачи	3	0	|Задача|Где встречалось|Пустая версия|Готовая версия|\n|---|---|---|---|\n|Counter|Альфа|Counter пустой|Counter готовый|\n|Todo|-|Todo пустой|Todo готовый|\n|Список комментариев|-|Комментарии пустой|Комментарии готовый|\n|Список постов|-|Посты пустой|Посты готовый|\\n\\n	\N	\N	f	\N	\N	2025-06-29 12:12:10.334	2025-06-29 12:12:10.334	{https://codesandbox.io/p/sandbox/schetchik-pustoy-s65kw3?file=%2Fsrc%2FApp.tsx%3A3%2C95,https://codesandbox.io/p/sandbox/schetchik-forked-t8x5dg?file=%2Fsrc%2FApp.tsx%3A2%2C1,https://codesandbox.io/p/sandbox/todo-pustoy-yggx8y?file=%2Fsrc%2FApp.tsx%3A9%2C34,https://codesandbox.io/p/sandbox/todo-tipizaciya-qwjh23?file=%2Fsrc%2FApp.tsx%3A22%2C11,https://codesandbox.io/p/sandbox/kommentarii-pustoy-68ckrf?file=%2Fsrc%2FApp.tsx%3A31%2C1,https://codesandbox.io/p/sandbox/kommentarii-gotovyy-sv6gy6?file=%2Fsrc%2FApp.tsx%3A22%2C44,https://codesandbox.io/p/sandbox/posty-pustoy-jwh94n?file=%2Fsrc%2FApp.tsx%3A25%2C1,https://codesandbox.io/p/sandbox/great-turing-gmkk2x?file=%2Fsrc%2FApp.tsx%3A108%2C1}	{}
cmchmqwvs005m13sxhgsdi6jk	cmchmqwuu005k13sxfobid0ek	[]	2. Среднего уровня сложности	3	1	|Задача|Где встречалось|Пустая версия|Готовая версия|\n|---|---|---|---|\n|Tree View|ВК, Автомакон|Tree View пустой|Tree View готовый|\n|Конвертер валют|-|Конвертер пустой|Конвертер готовый|\n|Банкомат|-|Банкомат пустой|Банкомат готовый|\\n\\n	\N	\N	f	\N	\N	2025-06-29 12:12:10.36	2025-06-29 12:12:10.36	{https://codesandbox.io/p/sandbox/tree-view-pustoy-29lm5w?file=%2Fsrc%2FApp.tsx%3A18%2C4,https://codesandbox.io/p/sandbox/drevovidnyy-dropdaun-gotovyy-y8n4vf?file=%2Fsrc%2FApp.tsx%3A14%2C32,https://codesandbox.io/p/sandbox/konverter-pustoy-gjrvsy?file=%2Fsrc%2FApp.tsx%3A31%2C1,https://codesandbox.io/p/sandbox/konverter-gotovyy-hfm3r6?file=%2Fsrc%2FApp.tsx%3A4%2C33,https://codesandbox.io/p/sandbox/bankomat-pustoy-6yydn6?file=%2Fsrc%2FApp.tsx%3A63%2C1,https://codesandbox.io/p/sandbox/bankomat-gotovyy-4nltjr?file=%2Fsrc%2FApp.tsx%3A79%2C60-80%2C14}	{}
cmchmqwwf005n13sxsriws1q3	cmchmqwuu005k13sxfobid0ek	[]	3. Мощные задачи	3	2	| Задача            | Пустая версия                                                                                                                         | Готовая версия                                                                                                                    |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n| Мощная задача | Мощная задача пустой | Мощная задача готовый |\n|                   |                                                                                                                                       |                                                                                                                                   |\\n\\nТУДУ ПЕРЕРОСТОК С 150к ПИДАРАСОВ\\n	\N	\N	f	\N	\N	2025-06-29 12:12:10.384	2025-06-29 12:12:10.384	{https://codesandbox.io/p/sandbox/moshchnaya-zadacha-tipa-pustoy-cy6dq3?file=%2Fsrc%2FPageFetch.tsx%3A130%2C10,https://codesandbox.io/p/sandbox/moshchnaya-zadacha-tipa-gotovyy-m6cnfz?file=%2Fsrc%2FApp.tsx%3A255%2C13,https://codesandbox.io/p/github/Kjaly/publicTodo/csb-6wc9w6/draft/vigorous-wildflower?file=%2Fsrc%2Fentities%2Ftask%2Fmodel%2FtaskApi.ts%3A124%2C7}	{}
cmchmqwx4005o13sxw7ayjg60	cmchmqwuu005k13sxfobid0ek	[]	Как использовать?	3	3	Выбираешь задачуОткрываешь "Пустой" вариант (пробуешь сам)Сверяешься с "Готовым" решениемПовторяешь для закрепления\\n	\N	\N	f	\N	\N	2025-06-29 12:12:10.408	2025-06-29 12:12:10.408	{}	{}
cmchmql0v000313sxu6di4wyp	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	3. removeEvenIndexedElements	3	2	Постановка задачи:Реализуйте функцию removeEvenIndexedElements, которая принимает массив и удаляет из него элементы, находящиеся на чётных индексах. Итоговый массив должен содержать только элементы, расположенные на нечётных позициях (индексация начинается с нуля).\\nОбходите массив в обратном порядке, чтобы избежать проблем с изменением индексов при удалении элементов.Для каждого элемента проверяйте, является ли его индекс чётным.Если индекс чётный, удаляйте элемент из массива с помощью метода splice.Возвращайте модифицированный массив.Проверьте работу функции на тестовом массиве.\\n	const removeEvenIndexedElements = (arr) => {  \n    for (let i = arr.length - 1; i >= 0; i--) {  \n        if (i % 2 === 0) {  \n            arr.splice(i, 1);  \n        }  \n    }    \n    return arr;  \n};  \n  \nconst data = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"];  \n  \nconsole.log(removeEvenIndexedElements(data)); // ["B", "D", "F", "H", "J"]	js	t	\N	\N	2025-06-29 12:11:54.992	2025-06-29 12:11:54.992	{}	{Лемма}
cmchmql1o000413sxg5ej9ovn	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	4. Concatenation of Array	3	3	Постановка задачи:Реализуйте функцию, которая принимает массив чисел и возвращает новый массив, являющийся конкатенацией исходного массива с самим собой. Задача предлагает несколько способов решения:\\nС использованием метода concat.С использованием оператора распространения (spread).С использованием метода push с двумя проходами по исходному массиву.С использованием цикла for, при котором массив создается с заранее определённой длиной.\\nПример:Для входного массива [1, 2, 1] результат должен быть [1, 2, 1, 1, 2, 1].\\n	// concat  \nfunction getConcatenation(nums) {  \n    return nums.concat(nums);  \n}  \n  \n// spread  \nfunction getConcatenation1(nums) {  \n    return [...nums, ...nums];  \n}  \n  \n// push  \nfunction getConcatenation2(nums) {  \n    const ans = [];  \n    nums.forEach(num => ans.push(num));  // Первый проход  \n    nums.forEach(num => ans.push(num));  // Второй проход  \n    return ans;  \n}  \n  \n// for  \nfunction getConcatenation3(nums) {  \n    const len = nums.length;  \n    const ans = new Array(2 * len);  \n  \n    for (let i = 0; i < len; i++) {  \n        ans[i] = nums[i];  \n        ans[i + len] = nums[i];  \n    }  \n  \n    return ans;  \n}  \n  \nconsole.log(getConcatenation([1, 2, 1]));	js	t	\N	\N	2025-06-29 12:11:55.02	2025-06-29 12:11:55.02	{https://leetcode.com/problems/concatenation-of-array/}	{"Точка банк"}
cmchmql2i000513sxjja0x3qn	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	5. Contains Duplicate	3	4	Постановка задачи:Реализуйте функцию, которая определяет, содержит ли массив дубликаты. Решение должно вернуть true, если в массиве встречается хотя бы один повторяющийся элемент, и false в противном случае. Для этого предложены несколько подходов:\\nС использованием объекта Map и итерации с for...of:Если элемент уже есть в Map, возвращается true.Иначе элемент добавляется в Map.С использованием обычного объекта для хранения элементов:Если элемент уже присутствует в объекте, возвращается true.Если элемент отсутствует, он добавляется в объект.С использованием коллекции Set в одну строку:Создается Set из массива. Если размер Set отличается от длины массива, значит, имеются дубликаты.\\n	// map + for of  \nconst containsDuplicate = nums => {  \n    const map = new Map();  \n  \n    for (let num of nums) {  \n        if (map.has(num)) return true;  \n        map.set(num, 1);  \n    }  \n    return false;  \n};  \n  \n// obj + for of  \nconst containsDuplicate2 = nums => {  \n    let obj = {};  \n    for (let num of nums) {  \n        if (obj[num]) return true;  \n        obj[num] = true;  \n    }  \n    return false;  \n};  \n  \n// set one-liner  \nconst containsDuplicate1 = nums => new Set(nums).size !== nums.length;  \n  \nlet nums = [1,2,3,4,2]  \n  \n// console.log(containsDuplicate2(nums))	js	t	\N	\N	2025-06-29 12:11:55.05	2025-06-29 12:11:55.05	{https://leetcode.com/problems/contains-duplicate/}	{Сберкорус}
cmchmql4x000813sx720jx9c2	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	8. maxElementIndex	3	7	Постановка задачи:Реализуйте функцию findMaxIndex, которая принимает массив чисел и возвращает индекс максимального элемента. Если массив пуст, функция должна вернуть -1. Для реализации:\\nЕсли массив пуст, сразу верните -1.Инициализируйте переменные для хранения максимального значения и его индекса, используя первый элемент массива.Пройдите по массиву начиная со второго элемента:Если текущий элемент больше текущего максимума, обновите значение максимума и запомните его индекс.Верните индекс максимального элемента.\\n	function findMaxIndex(arr) {  \n    // Если массив пуст, возвращаем -1  \n    if (arr.length === 0) return -1;  \n  \n    // Инициализация переменных для хранения максимального значения и его индекса  \n    let maxIndex = 0;  \n    let maxValue = arr[0];  \n  \n    // Проход по массиву, начиная со второго элемента  \n    for (let i = 1; i < arr.length; i++) {  \n        if (arr[i] > maxValue) {  \n            maxValue = arr[i];  \n            maxIndex = i;  \n        }  \n    }  \n    // Возврат индекса максимального элемента  \n    return maxIndex;  \n}  \n  \nconst array1 = [1, 3, 7, 2, 5];  \nconst array2 = [10, 20, 30, 40, 50];  \nconst emptyArray = [];  \n  \nconsole.log(findMaxIndex(array1)); // 2, так как 7 — максимальный элемент  \nconsole.log(findMaxIndex(array2)); // 4, так как 50 — максимальный элемент  \nconsole.log(findMaxIndex(emptyArray)); // -1, так как массив пуст	js	t	\N	\N	2025-06-29 12:11:55.138	2025-06-29 12:11:55.138	{}	{UnyBrands}
cmchmql6j000a13sx0t5uwsnm	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	10. remove duplicates	3	9	Постановка задачи:Дан массив объектов, в котором могут встречаться дубликаты (объекты с одинаковыми значениями). Необходимо удалить повторяющиеся объекты, сохранив только первый экземпляр каждого уникального объекта. При этом можно использовать сериализацию объекта в строку (например, через JSON.stringify) для сравнения.\\n	const arr = [{ a: 1 }, { b: 2 }, { a: 1 }, { d: 4 }];  \n  \n// Преобразуем каждый объект в строку и создаем Map, чтобы сохранить только уникальные объекты  \nconst uniqueArr = Array.from(  \n    new Map(arr.map(item => [JSON.stringify(item), item])).values()  \n);  \n  \nconsole.log(uniqueArr); // [{ a: 1 }, { b: 2 }, { d: 4 }]	js	t	\N	\N	2025-06-29 12:11:55.196	2025-06-29 12:11:55.196	{}	{"Точка банк"}
cmchmql7c000b13sxqy8czdki	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	11. findUnique	3	10	Постановка задачи:Напишите несколько функций, которые принимают массив чисел и возвращают новый массив, содержащий только уникальные элементы (элементы, встречающиеся ровно один раз). Решение должно быть реализовано различными способами:\\nС использованием Map:Создаем карту для подсчета вхождений каждого элемента.Фильтруем исходный массив, оставляя только элементы, встречающиеся один раз.Добавление метода в прототип Array:Аналогичное решение, но реализованное как метод для массива.С использованием метода filter и indexOf:Оставляем элемент, если его первое вхождение совпадает с последним (то есть, он уникален).С использованием reduce:Формируем объект-счетчик, затем фильтруем массив по значению счетчика.С использованием forEach:Используем два набора (Set) для хранения уникальных элементов и дубликатов, а затем фильтруем исходный массив по найденным уникальным значениям.\\n	const arr = [10, 5, 10, 0, 10, 6, 6, 7, 2, 9, 9];  \n  \n// 1. С использованием Map  \nconst findUniqueMap = (array) => {  \n    const countMap = new Map();  \n  \n    array.forEach(item => {  \n        countMap.set(item, (countMap.get(item) || 0) + 1);  \n    });  \n  \n    return array.filter(item => countMap.get(item) === 1);  \n};  \n  \nconsole.log(findUniqueMap(arr));  \n  \n// 2. Добавление метода в прототип Array  \nArray.prototype.findUniqueMap = function() {  \n    const countMap = new Map();  \n  \n    this.forEach(item => {  \n        countMap.set(item, (countMap.get(item) || 0) + 1);  \n    });  \n  \n    return this.filter(item => countMap.get(item) === 1);  \n};  \n  \nconsole.log(arr.findUniqueMap());  \n  \n// 3. С использованием filter + indexOf  \nconst findUniqueFilter = (array) => {  \n    return array.filter(item => array.indexOf(item) === array.lastIndexOf(item));  \n};  \n  \nconsole.log(findUniqueFilter(arr));  \n  \n// 4. С использованием reduce  \nconst findUniqueReduce = (array) => {  \n    const frequencyMap = array.reduce((acc, item) => {  \n        acc[item] = (acc[item] || 0) + 1;  \n        return acc;  \n    }, {});  \n  \n    return array.filter(item => frequencyMap[item] === 1);  \n};  \n  \nconsole.log(findUniqueReduce(arr));  \n  \n// 5. С использованием forEach  \nconst findUniqueForEach = (array) => {  \n    const unique = new Set();  \n    const duplicates = new Set();  \n  \n    array.forEach(item => {  \n        if (unique.has(item)) {  \n            duplicates.add(item);  \n            unique.delete(item);  \n        } else if (!duplicates.has(item)) {  \n            unique.add(item);  \n        }  \n    });  \n  \n    return array.filter(item => unique.has(item));  \n};  \n  \nconsole.log(findUniqueForEach(arr));	js	t	\N	\N	2025-06-29 12:11:55.225	2025-06-29 12:11:55.225	{}	{ВБ,TILDA,"Промсвязьбанк (ПСБ)",Иннотех,Антара}
cmchmql8h000c13sxxl1qe6d2	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	12. getOccurCount	3	11	Постановка задачи:Напишите функцию, которая принимает массив и возвращает объект, где ключами являются элементы массива, а значениями — количество раз, которое эти элементы встречаются. Для решения задачи можно использовать метод reduce, который итерируется по массиву и накапливает результат в виде объекта.\\n	function getOccurCount(arr) {  \n    return arr.reduce((acc, item) => {  \n        acc[item] = (acc[item] || 0) + 1;  \n        return acc;  \n    }, {});  \n}  \n  \nconsole.log(getOccurCount(["a", "b", "c", "b", "b", "a"]));  \n// { a: 2, b: 3, c: 1 }	js	t	\N	\N	2025-06-29 12:11:55.266	2025-06-29 12:11:55.266	{}	{Иннотех}
cmchmqlez000k13sxit9l9ied	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	20. groupById	3	19	Постановка задачи:Напишите функцию groupById, которая принимает массив объектов, где каждый объект имеет свойство id. Функция должна вернуть объект, где ключами являются значения свойства id, а значениями — соответствующие объекты из массива.\\n	const arrayOfObjects = [  \n    { id: 0, name: 'first' },  \n    { id: 1, name: 'second' },  \n    { id: 2, name: 'third' },  \n];  \n  \nfunction groupById(array) {  \n    return array.reduce((acc, obj) => {  \n        acc[obj.id] = obj;  \n        return acc;  \n    }, {});  \n}  \n  \n// Пример использования  \nconst result = groupById(arrayOfObjects);  \nconsole.log(result);  \n  \n// Ожидаемый вывод:  \n// {  \n//     0: { id: 0, name: 'first' },  \n//     1: { id: 1, name: 'second' },  \n//     2: { id: 2, name: 'third' }  \n// }	js	t	\N	\N	2025-06-29 12:11:55.499	2025-06-29 12:11:55.499	{}	{MarPla}
cmchmqlbr000g13sx7nt95rz9	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	16. calculateAverageWeightOfLemons	3	15	Постановка задачи:Дан массив объектов, представляющих фрукты с их типом и весом. Необходимо написать функцию, которая вычисляет средний вес для заданного типа фрукта. В данном примере рассчитывается средний вес для "lemon".\\n	const array = [  \n    { fruit: 'lemon', weight: 10 },  \n    { fruit: 'apple', weight: 10 },  \n    { fruit: 'lemon', weight: 10 },  \n    { fruit: 'lemon', weight: 40 },  \n];  \n  \nconst calculateAverageWeightOfLemons = (fruitsArray, fruitName) => {  \n    const filteredFruits = fruitsArray.filter(item => item.fruit === fruitName);  \n    const totalWeight = filteredFruits.reduce((acc, current) => acc + current.weight, 0);  \n    return totalWeight / filteredFruits.length;  \n};  \n  \nconst averageWeight = calculateAverageWeightOfLemons(array, 'lemon');  \nconsole.log(averageWeight); // Вывод: 20\n	js	t	\N	\N	2025-06-29 12:11:55.384	2025-06-29 12:11:55.384	{}	{Росгосстрах}
cmchmqohj002713sxjguxs3vt	cmchmqohb002613sxycod6ivv	[]	1. sum(1)(2)(3)	3	0	Постановка задачи:Реализуйте каррированную функцию, которая принимает три числа через цепочку вызовов вида sum(1)(2)(3) и возвращает их сумму. Пример использования показывает, как с помощью вложенных функций можно последовательно передавать аргументы, а затем вычислять результат.\\n	function curry(a) {  \n    return (b) => {  \n        return (c) => {  \n            const result = a + b + c;  \n            console.log(result);  \n            return result;  \n        }  \n    }  \n}  \n  \ncurry(1)(2)(3);\n\n\n##### sum(1)(2)(3)(4)...(n)()	js	t	\N	\N	2025-06-29 12:11:59.48	2025-06-29 12:11:59.48	{}	{PortalBilet,Киберлаб,ГосНИИАС,Aladdin}
cmchmqle8000j13sxcr33snek	cmchmqkyd000013sxavo7b2rz	["Очень простые (базовые операции и манипуляции)"]	19. intersectArrays	3	18	Постановка задачи:Даны два массива. Необходимо найти их пересечение, то есть элементы, присутствующие в обоих массивах. Результирующий массив должен содержать уникальные элементы (без повторений). Решение может быть реализовано с использованием структуры данных Set для эффективной проверки вхождения элементов.\\n	function intersectArrays(array1, array2) {  \n    const set = new Set(array1); // Уникальные элементы из первого массива  \n    return [...new Set(array2.filter(item => set.has(item)))]; // Уникальные пересечения  \n}  \n  \nconst array1 = [1, 2, 2, 1];  \nconst array2 = [2, 2];  \n  \nconst result = intersectArrays(array1, array2);  \n  \nconsole.log(result); // [2]	js	t	\N	\N	2025-06-29 12:11:55.473	2025-06-29 12:11:55.473	{https://leetcode.com/problems/intersection-of-two-arrays/}	{Финам}
cmchmqlfr000l13sx0a1bjj2l	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	21. Max Consecutive Ones	3	20	Постановка задачи:Дан массив nums, состоящий из нулей и единиц. Необходимо определить максимальное количество подряд идущих единиц в массиве. Для решения задачи реализуйте функцию, которая будет проходить по массиву и подсчитывать текущую последовательность единиц, обновляя максимум при необходимости. Если встречается 0, текущая последовательность сбрасывается.\\n	// iterations  \nconst findMaxConsecutiveOnes = nums => {  \n    let max = 0;  \n    let current = 0;  \n  \n    for (let i = 0; i < nums.length; i++) {  \n        if (nums[i] === 1) {  \n            current++;  \n            if (current > max) {  \n                max = current;  \n            }  \n        } else {  \n            current = 0;  \n        }  \n    }  \n    return max;  \n};  \n  \nconst nums1 = [1,1,0,1,1,1];  \n  \nconsole.log(findMaxConsecutiveOnes(nums1));	js	t	\N	\N	2025-06-29 12:11:55.527	2025-06-29 12:11:55.527	{https://leetcode.com/problems/max-consecutive-ones/}	{"Sber Autotech"}
cmchmqlgk000m13sxnyeolmnd	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	22. Two Sum	3	21	Постановка задачи:Дан массив чисел nums и целевое значение target. Необходимо найти два числа из массива, сумма которых равна target, и вернуть их индексы. Решение задачи можно реализовать с использованием следующих подходов:\\nИспользование объекта Map:Создайте объект Map для хранения значений массива и их индексов.Итерируйте по массиву, вычисляя разницу между target и текущим числом.Если разница уже присутствует в Map, то найденная пара удовлетворяет условию задачи.Если нет, добавьте текущее число и его индекс в Map.Использование обычного объекта:Аналогично методу с Map, используйте объект для хранения пар "число-индекс".Проверьте наличие разницы между target и текущим числом в объекте.Если найдено соответствие, верните индексы.\\n	// map  \nconst twoSum = (nums, target) => {  \n    const map = new Map();  \n  \n    for (let i = 0; i < nums.length; i++) {  \n        const diff = target - nums[i];  \n        if (map.has(diff)) {  \n            return [map.get(diff), i];  \n        }  \n        map.set(nums[i], i);  \n    }  \n  \n    return [];  \n};  \n  \n// object  \nconst twoSum2 = (nums, target) => {  \n    const numToIndexMap = {};  \n  \n    for (let i = 0; i < nums.length; i++) {  \n        const diff = target - nums[i];  \n        if (diff in numToIndexMap) {  \n            return [numToIndexMap[diff], i];  \n        }  \n        numToIndexMap[nums[i]] = i;  \n    }  \n  \n    return null;  \n};  \n  \nconst nums = [2, 7, 11, 15];  \nconst target = 9;  \n  \nconst result = twoSum(nums, target);  \n  \nconsole.log(result);	js	t	\N	\N	2025-06-29 12:11:55.557	2025-06-29 12:11:55.557	{https://leetcode.com/problems/two-sum/}	{Лемма,WB,DatsTeam,it-one,ДОМ.РФ}
cmchmqlkr000r13sxhpxoltgx	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	27. groupByCountry	3	26	Постановка задачи:Дан массив объектов, каждый из которых содержит информацию о пользователе (id, age, name, country, registered). Необходимо преобразовать этот массив в объект, где ключами будут названия стран, а значениями — вложенные объекты. Внутренний объект должен иметь в качестве ключей id пользователей, а значениями — оставшиеся свойства (без id и country). Это можно реализовать несколькими способами, например, с использованием методов reduce, forEach или Map.\\n	const data = [  \n    { id: 1, age: 20, name: "Иван", country: "Russia", registered: true },  \n    { id: 2, age: 30, name: "Дима", country: "Russia", registered: false },  \n    { id: 3, age: 20, name: "Леха", country: "Russia", registered: true },  \n    { id: 4, age: 20, name: "Дима", country: "Usa", registered: true },  \n    { id: 5, age: 20, name: "Леха", country: "Russia", registered: false },  \n    { id: 6, age: 30, name: "Дима", country: "Russia", registered: true },  \n    { id: 7, age: 20, name: "Дима", country: "Usa", registered: false },  \n    { id: 8, age: 20, name: "Дима", country: "Usa", registered: false },  \n];  \n  \n// reduce  \nfunction transformDataReduce(data) {  \n    return data.reduce((acc, item) => {  \n        const { id, country, ...rest } = item;  \n  \n        if (!acc[country]) {  \n            acc[country] = {};  \n        }  \n  \n        acc[country][id] = rest;  \n        return acc;  \n    }, {});  \n}  \n  \nconst resultReduce = transformDataReduce(data);  \nconsole.log(resultReduce);  \n  \n// forEach  \nfunction transformDataForEach(data) {  \n    const result = {};  \n  \n    data.forEach(item => {  \n        const { id, country, ...rest } = item;  \n  \n        if (!result[country]) {  \n            result[country] = {};  \n        }  \n  \n        result[country][id] = rest;  \n    });  \n  \n    return result;  \n}  \n  \nconst resultForEach = transformDataForEach(data);  \nconsole.log(resultForEach);  \n  \n// map  \nfunction transformDataMap(data) {  \n    const countryMap = new Map();  \n  \n    data.forEach(item => {  \n        const { id, country, ...rest } = item;  \n  \n        if (!countryMap.has(country)) {  \n            countryMap.set(country, new Map());  \n        }  \n  \n        countryMap.get(country).set(id, rest);  \n    });  \n  \n    const result = {};  \n    countryMap.forEach((countryData, country) => {  \n        result[country] = Object.fromEntries(countryData);  \n    });  \n  \n    return result;  \n}  \n  \nconst resultMap = transformDataMap(data);  \nconsole.log(resultMap);	js	t	\N	\N	2025-06-29 12:11:55.708	2025-06-29 12:11:55.708	{}	{it-one}
cmchmqndk002313sxyn3z2u5m	cmchmqn6p001t13sxcmac57pa	[]	7. class sock&box	3	9	Задача: Реализовать систему сортировки носков по цвету:\\nSock — класс носка с цветом;Box — класс коробки, в которой хранятся носки;getSocksInfo — метод, возвращающий информацию о количестве пар и одинарных носках по цветам.\\n	\nclass Sock {  \n    color: string;  \n  \n    constructor(color: string) {  \n        this.color = color;  \n    }  \n}  \n  \nclass Box {  \n    private sortedSocks: Map<string, Sock[]> = new Map();  \n  \n    constructor(socks: Sock[] = []) {  \n        this.addSocks(socks);  \n    }  \n  \n    addSocks(socks: Sock[]) {  \n        for (const sock of socks) {  \n            this.addSock(sock);  \n        }  \n    }  \n    addSock(sock: Sock) {  \n        const color = sock.color;  \n        if (!this.sortedSocks.has(color)) {  \n            this.sortedSocks.set(color, []);  \n        }  \n        this.sortedSocks.get(color)?.push(sock);  \n    }  \n  \n    getSocksInfo() {  \n        const result: {  \n            color: string;  \n            pairs: number;  \n            singleSock: boolean;  \n        }[] = [];  \n  \n        // @ts-ignore  \n        for (const [color, socks] of this.sortedSocks.entries()) {  \n            const pairs = Math.floor(socks.length / 2);  \n            const singleSock = socks.length % 2 !== 0;  \n            result.push({ color, pairs, singleSock });  \n        }  \n  \n        return result;  \n    }  \n}\n\n\nconst box = new Box();\n\nbox.addSock(new Sock('red'));\nbox.addSock(new Sock('blue'));\nbox.addSock(new Sock('red'));\nbox.addSocks([new Sock('green'), new Sock('blue'), new Sock('blue')]);\n\nconsole.log(box.getSocksInfo());\n\n// Output:\n// [\n//   { color: 'red', pairs: 1, singleSock: false },\n//   { color: 'blue', pairs: 1, singleSock: true },\n//   { color: 'green', pairs: 0, singleSock: true }\n// ]	js	t	\N	\N	2025-06-29 12:11:58.04	2025-06-29 12:11:58.04	{}	{MTS}
cmchmqllt000s13sxhsks37bb	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	28. findDuplicate	3	27	Постановка задачи:Дан массив строк. Необходимо найти все элементы, которые встречаются более одного раза, и вернуть их в виде массива без дубликатов. Решение задачи предлагается реализовать двумя способами:\\nС использованием объектов Set для отслеживания уже встреченных элементов и для хранения найденных дубликатов.С использованием комбинации методов filter и indexOf для поиска повторяющихся элементов, а затем удаления повторений с помощью Set.\\n	const arr = ['1', '2', '3', '1', '4', '8', '2', '3'];  \nlet result = [];  \n  \n// 1. Using Set  \nconst findDuplicate = (arr) => {  \n    const seen = new Set();  \n    const duplicates = new Set();  \n  \n    for (let item of arr) {  \n        if (seen.has(item)) {  \n            duplicates.add(item);  \n        }  \n        seen.add(item);  \n    }  \n    return Array.from(duplicates);  \n};  \n  \nresult = findDuplicate(arr);  \nconsole.log("Set method:", result);  \n  \n// 2. Using filter + indexOf one-liner  \nconst findDuplicate2 = arr => [...new Set(arr)].filter((item, index) => arr.indexOf(item) !== index);  \nconsole.log("Filter + indexOf method:", findDuplicate2(arr));	js	t	\N	\N	2025-06-29 12:11:55.745	2025-06-29 12:11:55.745	{}	{Рутуб}
cmchmqlmj000t13sxlidflt4r	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	29. getDuplicate	3	28	Постановка задачи:Дан массив, который может содержать вложенные массивы, состоящий из чисел. Необходимо написать функцию, которая сначала «разворачивает» вложенные массивы в один плоский массив, затем подсчитывает, сколько раз встречается каждый элемент, и возвращает объект, где ключами являются элементы, а значениями — их количество в исходном массиве.\\n	function getDuplicates(arr) {  \n    const flatArray = flattenArray(arr);  \n    const countMap = {};  \n  \n    flatArray.forEach(num => {  \n        countMap[num] = (countMap[num] || 0) + 1;  \n    });  \n  \n    return countMap;  \n}  \n  \nfunction flattenArray(arr) {  \n    return arr.reduce((acc, val) => {  \n        return acc.concat(Array.isArray(val) ? flattenArray(val) : val);  \n    }, []);  \n}  \n  \nconst arr = [1, 1, 4, 5, [1, 6, 4, [9, 8, 3]], 3, 2, [8]];  \n  \nconsole.log(getDuplicates(arr)); // { 1: 3, 4: 2, 5: 1, 6: 1, 9: 1, 8: 2, 3: 2, 2: 1 }	js	t	\N	\N	2025-06-29 12:11:55.772	2025-06-29 12:11:55.772	{}	{Евротехклимат}
cmchmqln7000u13sxeh94eenh	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	30. getMostRepeatedItem	3	29	Постановка задачи:Дан вложенный массив, который может содержать числа и строки. Необходимо написать функцию, которая:\\nРекурсивно "расплющивает" массив.Подсчитывает, сколько раз каждый элемент встречается в массиве.Находит элемент с наибольшим количеством вхождений.Возвращает результат в виде объекта, где ключ — это наиболее часто встречающийся элемент, а значение — количество его вхождений.\\n	const nestedArray = [2, 'A', 2, ['A', 4, ['A', 6, ['A', 8]]]];  \n  \nconst getMostRepeatedItem = (arr) => {  \n    // Функция для рекурсивного расплющивания массива  \n    const flattenArray = (array) =>  \n        array.reduce(  \n            (acc, val) => acc.concat(Array.isArray(val) ? flattenArray(val) : val),  \n            []  \n        );  \n  \n    // Расплющиваем массив  \n    const flatArr = flattenArray(arr);  \n  \n    // Подсчитываем количество вхождений каждого элемента  \n    const countMap = flatArr.reduce((acc, item) => {  \n        acc[item] = (acc[item] || 0) + 1;  \n        return acc;  \n    }, {});  \n  \n    // Ищем элемент с наибольшим количеством вхождений  \n    const mostRepeated = Object.keys(countMap).reduce((a, b) =>  \n        countMap[a] > countMap[b] ? a : b  \n    );  \n  \n    // Возвращаем результат в виде объекта  \n    return { [mostRepeated]: countMap[mostRepeated] };  \n};  \n  \nconsole.log(getMostRepeatedItem(nestedArray)); // { A: 4 }	js	t	\N	\N	2025-06-29 12:11:55.796	2025-06-29 12:11:55.796	{}	{Luxsoft}
cmchmqlnx000v13sx69yjlla1	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	31. getMostRepeatedItem	3	30	Постановка задачи:Напишите функцию, которая принимает вложенный массив (массив, содержащий вложенные массивы) и возвращает объект, в котором ключ — элемент, встречающийся чаще всего, а значение — количество его вхождений. Для решения задачи необходимо:\\nРекурсивно "расплющить" вложенный массив.Подсчитать частоту каждого элемента.Найти элемент с наибольшей частотой.Вернуть результат в виде объекта.\\n	const nestedArray = [2, 'A', 2, ['A', 4, ['A', 6, ['A', 8]]]];  \n  \nconst getMostRepeatedItem = (arr) => {  \n    // Рекурсивная функция для расплющивания массива  \n    const flattenArray = (array) =>  \n        array.reduce((acc, val) =>  \n            acc.concat(Array.isArray(val) ? flattenArray(val) : val), []);  \n  \n    // Расплющенный массив  \n    const flatArr = flattenArray(arr);  \n  \n    // Подсчет вхождений каждого элемента  \n    const countMap = flatArr.reduce((acc, item) => {  \n        acc[item] = (acc[item] || 0) + 1;  \n        return acc;  \n    }, {});  \n  \n    // Поиск элемента с максимальным количеством вхождений  \n    const mostRepeated = Object.keys(countMap).reduce((a, b) =>  \n        countMap[a] > countMap[b] ? a : b  \n    );  \n  \n    // Возвращаем результат в виде объекта  \n    return { [mostRepeated]: countMap[mostRepeated] };  \n};  \n  \nconsole.log(getMostRepeatedItem(nestedArray)); // { A: 4 }	js	t	\N	\N	2025-06-29 12:11:55.822	2025-06-29 12:11:55.822	{}	{Luxsoft}
cmchmqoi9002813sx1lj9stwt	cmchmqohb002613sxycod6ivv	[]	2. sum 3	3	1	Постановка задачи:Реализуйте каррированную функцию sum, которая может принимать неограниченное количество аргументов в цепочке вызовов и возвращать их сумму, когда вызов завершён без аргументов. Если функция вызывается без аргументов, она должна вернуть 0.\\n	const sum = (a = 0) => {\n  return (b) => b !== undefined ? sum(a + b) : a;\n};\n\n// Примеры использования:\nconsole.log(sum()); // Вернет 0\nconsole.log(sum(1)()); // Вернет 1\nconsole.log(sum(2)(3)()); // Вернет 5\nconsole.log(sum(10)(7)(41)()); // Вернет 58	js	t	\N	\N	2025-06-29 12:11:59.505	2025-06-29 12:11:59.505	{}	{Газпромбанк,DatsTeam}
cmchmqlom000w13sxth2kdgxm	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	32. Move Zeroes leetcode	3	31	Постановка задачи:Дан массив чисел, в котором необходимо переместить все нулевые элементы в конец, сохраняя порядок ненулевых элементов. Задача должна быть решена без создания дополнительного массива (in place) и с использованием альтернативных подходов.\\nРеализуйте несколько вариантов решения:\\nДва указателя (in place):Используйте два указателя: один для текущего элемента, другой для позиции последнего ненулевого элемента.Обменивайте ненулевые элементы с элементами, находящимися в позиции последнего ненулевого элемента.Две проверки (in place):В первом проходе копируйте все ненулевые элементы в начало массива.Во втором проходе заполните оставшиеся позиции нулями.Push (новый массив):Создайте новый массив, добавляя сначала ненулевые элементы, а затем добавляя нули до достижения исходной длины массива.Фильтрация и конкатенация (новый массив):Используйте методы filter и concat, чтобы сначала отфильтровать ненулевые элементы, а затем добавить необходимое количество нулей в конец.\\n	// два указателя (in place)  \nfunction moveZeroesInPlace(nums) {  \n    let lastNonZero = 0;  \n    for (let i = 0; i < nums.length; i++) {  \n        if (nums[i] !== 0) {  \n            [nums[lastNonZero], nums[i]] = [nums[i], nums[lastNonZero]];  \n            lastNonZero++;  \n        }  \n    }  \n}  \n  \nconst nums1 = [0, 1, 0, 3, 12];  \nmoveZeroesInPlace(nums1);  \nconsole.log(nums1);  // [1, 3, 12, 0, 0]\n  \n// две проверки (in place)  \nfunction moveZeroesTwoPass(nums) {  \n    let count = 0;  \n    for (let i = 0; i < nums.length; i++) {  \n        if (nums[i] !== 0) {  \n            nums[count] = nums[i];  \n            count++;  \n        }  \n    }  \n    for (let i = count; i < nums.length; i++) {  \n        nums[i] = 0;  \n    }  \n}  \n  \nconst nums2 = [0, 1, 0, 3, 12];  \nmoveZeroesTwoPass(nums2);  \nconsole.log(nums2);  // [1, 3, 12, 0, 0]\n  \n// push (новый массив)  \nfunction moveZeroesNewArray(nums) {  \n    const result = [];  \n    // First pass: Add all non-zero elements to the result array  \n    for (const num of nums) {  \n        if (num !== 0) {  \n            result.push(num);  \n        }  \n    }  \n    // Add zeros to the end of the result array  \n    while (result.length < nums.length) {  \n        result.push(0);  \n    }  \n    return result;  \n}  \n  \nconst nums3 = [0, 1, 0, 3, 12];  \nconst newArrayResult = moveZeroesNewArray(nums3);  \nconsole.log(newArrayResult);  // [1, 3, 12, 0, 0]\n  \n// фильтрация-конкатенация (новый массив)  \nfunction moveZeroesWithFilter(nums) {  \n    const nonZeroes = nums.filter(num => num !== 0);  \n    const zeroCount = nums.length - nonZeroes.length;  \n    return nonZeroes.concat(Array(zeroCount).fill(0));  \n}  \n  \nconst nums4 = [0, 1, 0, 3, 12];  \nconst filterResult = moveZeroesWithFilter(nums4);  \nconsole.log(filterResult);  // [1, 3, 12, 0, 0]	js	t	\N	\N	2025-06-29 12:11:55.847	2025-06-29 12:11:55.847	{https://leetcode.com/problems/move-zeroes/}	{Иннотех}
cmchmqlpc000x13sxnfvjc2dn	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	33. Group Anagrams	3	32	Постановка задачи:Дан массив строк. Необходимо сгруппировать строки, которые являются анаграммами друг друга, и вернуть их группировку в виде массива массивов. Решение можно реализовать различными способами:\\nСортировка по ключу:Отсортируйте символы в каждой строке, чтобы получить ключ.Используйте объект для группировки строк по этому отсортированному ключу.Количество символов как ключ:Подсчитайте количество каждого символа в строке (предполагается, что строки состоят из строчных букв английского алфавита).Используйте полученную строку-счетчик (например, с разделителем) как ключ для группировки.Использование Map:Аналогично методу с подсчетом символов, но используя Map для хранения групп анаграмм.\\n	// сортировка по ключу  \nfunction groupAnagramsSort(strs) {  \n    const anagrams = {};  \n  \n    for (const str of strs) {  \n        const sortedStr = str.split('').sort().join('');  \n        if (!anagrams[sortedStr]) {  \n            anagrams[sortedStr] = [];  \n        }  \n        anagrams[sortedStr].push(str);  \n    }  \n  \n    return Object.values(anagrams);  \n}  \n  \nconsole.log(groupAnagramsSort(["eat","tea","tan","ate","nat","bat"]));  \n  \n  \n// колво символов как ключ  \nfunction groupAnagramsCount(strs) {  \n    const anagrams = {};  \n  \n    for (const str of strs) {  \n        const count = new Array(26).fill(0);  \n        for (const char of str) {  \n            count[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;  \n        }  \n        const key = count.join('#');  \n        if (!anagrams[key]) {  \n            anagrams[key] = [];  \n        }  \n        anagrams[key].push(str);  \n    }  \n  \n    return Object.values(anagrams);  \n}  \n  \nconsole.log(groupAnagramsCount(["eat","tea","tan","ate","nat","bat"]));  \n  \n  \n// map  \nfunction groupAnagramsMap(strs) {  \n    const anagrams = new Map();  \n  \n    for (const str of strs) {  \n        const count = new Array(26).fill(0);  \n        for (const char of str) {  \n            count[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;  \n        }  \n        const key = count.toString();  \n        if (!anagrams.has(key)) {  \n            anagrams.set(key, []);  \n        }  \n        anagrams.get(key).push(str);  \n    }  \n  \n    return Array.from(anagrams.values());  \n}  \n  \nconsole.log(groupAnagramsMap(["eat","tea","tan","ate","nat","bat"]));	js	t	\N	\N	2025-06-29 12:11:55.873	2025-06-29 12:11:55.873	{https://leetcode.com/problems/group-anagrams/}	{Промсвязьбанк,СберДевайсы,FunBox,Сбер,ЦУМ,"IT Baltic"}
cmchmqlwk001613sx70nq8pcp	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	42. sortEvensOnly	3	41	Постановка задачи:Реализуйте функцию sortEvensOnly, которая принимает массив чисел. Функция должна отсортировать только чётные числа, сохраняя их исходные позиции в массиве, а остальные числа оставить без изменений.\\nАлгоритм решения:\\nПройдите по массиву и соберите все чётные числа вместе с их индексами.Отсортируйте массив чётных чисел по возрастанию.Поместите отсортированные чётные числа обратно в исходный массив на те же позиции.Верните модифицированный массив.\\n	function sortEvensOnly(arr = []) {\n  // 1. Находим чётные элементы и их индексы\n  let evenIndexes = [];\n  let evens = [];\n  arr.forEach((num, idx) => {\n    if (num % 2 === 0) {\n      evenIndexes.push(idx);\n      evens.push(num);\n    }\n  });\n\n  // 2. Сортируем массив с чётными числами по возрастанию\n  evens.sort((a, b) => a - b);\n\n  // 3. Возвращаем чётные числа на исходные индексы в отсортированном порядке\n  evenIndexes.forEach((index, i) => {\n    arr[index] = evens[i];\n  });\n\n  return arr;\n}\n\n// Пример использования:\nconsole.log(sortEvensOnly([4, 1, 0, 5, 2, 3])); // Ожидаемый результат: [0, 1, 2, 5, 4, 3]\nconsole.log(sortEvensOnly([3, 6, 8, 4, 1]));    // Ожидаемый результат: [3, 4, 6, 8, 1]	js	t	\N	\N	2025-06-29 12:11:56.132	2025-06-29 12:11:56.132	{}	{"Баланс платформа","Лаб касп"}
cmchmqlyf001813sxido87mx6	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	44. Group By	3	43	Постановка задачи:Добавьте метод groupBy в прототип массива, который принимает функцию-предикат fn и группирует элементы массива по ключам, возвращаемым этой функцией. Результат должен быть объектом, где каждое свойство — это ключ, а значение — массив элементов, для которых функция вернула этот ключ.\\n	Array.prototype.groupBy = function(fn) {  \n    return this.reduce((acc, item) => {  \n        const key = fn(item);  \n        if (!acc[key]) {  \n            acc[key] = [];  \n        }  \n        acc[key].push(item);  \n        return acc;  \n    }, {});  \n};  \n  \n// Пример 1  \nconst array1 = [  \n    {"id": "1"},  \n    {"id": "1"},  \n    {"id": "2"}  \n];  \nconst fn1 = function(item) {  \n    return item.id;  \n};  \nconsole.log(array1.groupBy(fn1));  \n// Ожидаемый результат: { "1": [{"id": "1"}, {"id": "1"}], "2": [{"id": "2"}] }  \n  \n// Пример 2  \nconst array2 = [  \n    [1, 2, 3],  \n    [1, 3, 5],  \n    [1, 5, 9]  \n];  \nconst fn2 = function(list) {  \n    return String(list[0]);  \n};  \nconsole.log(array2.groupBy(fn2));  \n// Ожидаемый результат: { "1": [[1, 2, 3], [1, 3, 5], [1, 5, 9]] }  \n  \n// Пример 3  \nconst array3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];  \nconst fn3 = function(n) {  \n    return String(n > 5);  \n};  \nconsole.log(array3.groupBy(fn3));  \n// Ожидаемый результат: { "true": [6, 7, 8, 9, 10], "false": [1, 2, 3, 4, 5] }	js	t	\N	\N	2025-06-29 12:11:56.2	2025-06-29 12:11:56.2	{}	{"Яндекс Такси","Quantum Art"}
cmchmqlzr001a13sx7ertohgx	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	45. splitPlayersBySquad	3	45	Постановка задачи:Напишите функцию splitPlayersBySquad, которая принимает массив игроков и объект myPlayer. Функция должна разделить игроков на две группы:\\nИгроки, которые состоят в той же команде, что и myPlayer, или у которых значение squad равно null (группа "sameOrNoSquad").Игроки, у которых значение squad отличается от myPlayer.squad (группа "otherSquad").\\nФункция возвращает массив, где первый элемент — это группа других команд, а второй элемент — группа с теми, кто в той же команде или без команды.\\n	function splitPlayersBySquad(players, myPlayer) {  \n    const otherSquad = [];  \n    const sameOrNoSquad = [];  \n  \n    players.forEach(player => {  \n        if (player.squad === myPlayer.squad || player.squad === null) {  \n            sameOrNoSquad.push(player);  \n        } else {  \n            otherSquad.push(player);  \n        }  \n    });  \n  \n    return [otherSquad, sameOrNoSquad];  \n}  \n  \nconst myPlayer = { id: 1, squad: 1 };  \n  \nconst players = [  \n    { id: 2, squad: 1 },  \n    { id: 3, squad: 1 },  \n    { id: 4, squad: null },  \n    { id: 5, squad: 2 },  \n    { id: 6, squad: 1 },  \n    { id: 7, squad: 2 }  \n];  \n  \nconsole.log(splitPlayersBySquad(players, myPlayer));  \n  \n// Ожидаемый результат:  \n// [  \n//   [{ id: 5, squad: 2 }, { id: 7, squad: 2 }],  \n//   [{ id: 2, squad: 1 }, { id: 3, squad: 1 }, { id: 4, squad: null }, { id: 6, squad: 1 }]  \n// ]	js	t	\N	\N	2025-06-29 12:11:56.247	2025-06-29 12:11:56.247	{}	{IBS}
cmchmqm0h001b13sxnz3cbiwq	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	46. getTopCitiesByPopulation	3	46	Постановка задачи:Дан массив объектов, содержащих информацию о городах, включая страну, название города и население. Необходимо сгруппировать города по странам и для каждой страны выбрать топ-3 города по населению. Если для страны доступно менее 3 городов, возвращаются все имеющиеся города.\\n	function getTopCitiesByPopulation(data) {  \n    // Группировка городов по странам  \n    const groupedByCountry = data.reduce((acc, item) => {  \n        if (!acc[item.country]) {  \n            acc[item.country] = [];  \n        }  \n        acc[item.country].push(item);  \n        return acc;  \n    }, {});  \n  \n    // Получение топ-3 городов по населению для каждой страны  \n    const topCitiesByCountry = {};  \n  \n    for (const country in groupedByCountry) {  \n        topCitiesByCountry[country] = groupedByCountry[country]  \n            .sort((a, b) => b.population - a.population)  \n            .slice(0, 3);  \n    }  \n  \n    return topCitiesByCountry;  \n}  \n  \n// Пример данных  \nconst citiesData = [  \n    { country: 'USA', city: 'New York', population: 8419600 },  \n    { country: 'USA', city: 'Los Angeles', population: 3980400 },  \n    { country: 'USA', city: 'Chicago', population: 2716000 },  \n    { country: 'USA', city: 'Houston', population: 2328000 },  \n    { country: 'USA', city: 'Phoenix', population: 1690000 },  \n    { country: 'Canada', city: 'Toronto', population: 2930000 },  \n    { country: 'Canada', city: 'Montreal', population: 1760000 },  \n    { country: 'Japan', city: 'Tokyo', population: 13929286 },  \n    { country: 'Japan', city: 'Yokohama', population: 3726167 },  \n    { country: 'Japan', city: 'Osaka', population: 2698046 },  \n    { country: 'Japan', city: 'Nagoya', population: 2295638 },  \n    { country: 'Japan', city: 'Sapporo', population: 1952356 },  \n];  \n  \n// Пример использования функции  \nconst result = getTopCitiesByPopulation(citiesData);  \n  \nconsole.log(result);  \n  \n// Ожидаемый вывод:  \n// {  \n//     USA: [  \n//         { country: 'USA', city: 'New York', population: 8419600 },  \n//         { country: 'USA', city: 'Los Angeles', population: 3980400 },  \n//         { country: 'USA', city: 'Chicago', population: 2716000 }  \n//     ],  \n//     Canada: [  \n//         { country: 'Canada', city: 'Toronto', population: 2930000 },  \n//         { country: 'Canada', city: 'Montreal', population: 1760000 }  \n//     ],  \n//     Japan: [  \n//         { country: 'Japan', city: 'Tokyo', population: 13929286 },  \n//         { country: 'Japan', city: 'Yokohama', population: 3726167 },  \n//         { country: 'Japan', city: 'Osaka', population: 2698046 }  \n//     ]  \n// }	js	t	\N	\N	2025-06-29 12:11:56.274	2025-06-29 12:11:56.274	{}	{"Right Line"}
cmchmqm1y001d13sxyosmwpr7	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	48. groupByType (+ modification)	3	48	Постановка задачи:\\nНапишите функцию groupByType, которая принимает массив объектов и возвращает объект, где ключи – это значения свойства type, а значения – массив объектов с этим типом.Напишите функцию countAndWeightByType, которая принимает тот же массив объектов, но возвращает объект, где ключи – значения свойства type, а значения – объект вида { count: количество объектов с данным типом, weight: суммарный вес этих объектов }.\\n	// Часть 1: Группировка по типу, значение - массив объектов\nfunction groupByType(arr) {  \n    return arr.reduce((acc, obj) => {  \n        const key = obj.type;  \n        // Инициализируем пустым массивом, если ключ еще не существует  \n        if (!acc[key]) {  \n            acc[key] = [];  \n        }  \n        // Добавляем текущий объект в массив для этого типа  \n        acc[key].push(obj);  \n        return acc;  \n    }, {});  \n}  \n  \nconst arr = [  \n    { type: "banana", weight: 32 },  \n    { type: "apple", weight: 24 },  \n    { type: "kiwi", weight: 55 },  \n    { type: "banana", weight: 44 },  \n    { type: "orange", weight: 5 }  \n];  \n  \nconsole.log(groupByType(arr));  \n  \n// Ожидаемый вывод =>  \n// {  \n//     "banana": [{ type: "banana", weight: 32 }, { type: "banana", weight: 44 }],  \n//     "apple": [{ type: "apple", weight: 24 }],  \n//     "kiwi": [{ type: "kiwi", weight: 55 }],  \n//     "orange": [{ type: "orange", weight: 5 }]  \n// }  \n  \n// Часть 2: Группировка с подсчетом количества и суммарного веса  \nfunction countAndWeightByType(arr) {  \n    return arr.reduce((acc, obj) => {  \n        const key = obj.type;  \n        // Инициализация объекта с count и weight, если ключ еще не существует  \n        if (!acc[key]) {  \n            acc[key] = { count: 0, weight: 0 };  \n        }  \n        // Увеличиваем count и суммируем вес для текущего типа  \n        acc[key].count += 1;  \n        acc[key].weight += obj.weight;  \n        return acc;  \n    }, {});  \n}  \n  \nconsole.log(countAndWeightByType(arr));  \n  \n// Ожидаемый вывод =>  \n// {  \n//     "banana": { count: 2, weight: 76 },  \n//     "apple": { count: 1, weight: 24 },  \n//     "kiwi": { count: 1, weight: 55 },  \n//     "orange": { count: 1, weight: 5 }  \n// }	js	t	\N	\N	2025-06-29 12:11:56.326	2025-06-29 12:11:56.326	{}	{"Точка банк"}
cmchmqm2r001e13sxjvd6wcpb	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	49. groupByDate	3	49	Постановка задачи:Дана коллекция операций, каждая операция содержит дату и сумму. Необходимо:\\nОтсортировать операции по дате в порядке возрастания.Сгруппировать операции по году.Преобразовать дату каждой операции в формат "MM-DD" и сохранить в сгруппированном объекте, где ключ – это год, а значение – массив дат в формате "MM-DD".\\n	function groupByDate(operations) {  \n    // Сортируем операции по дате в порядке возрастания  \n    operations.sort((a, b) => new Date(a.date) - new Date(b.date));  \n  \n    // Группируем по году и преобразуем даты в формат MM-DD  \n    return operations.reduce((acc, operation) => {  \n        const [year, month, day] = operation.date.split("-");  \n  \n        // Если года еще нет в объекте, добавляем его как пустой массив  \n        if (!acc[year]) {  \n            acc[year] = [];  \n        }  \n  \n        // Добавляем дату в формате MM-DD  \n        acc[year].push(`${month}-${day}`);  \n        return acc;  \n    }, {});  \n}  \n  \n// Пример использования  \nconst operations = [  \n    { "date": "2017-07-31", "amount": "5422" },  \n    { "date": "2017-06-30", "amount": "5220" },  \n    { "date": "2017-05-31", "amount": "5365" },  \n    { "date": "2017-08-31", "amount": "5451" },  \n    { "date": "2017-09-30", "amount": "5303" },  \n    { "date": "2018-03-31", "amount": "5654" },  \n    { "date": "2017-10-31", "amount": "5509" },  \n    { "date": "2017-12-31", "amount": "5567" },  \n    { "date": "2018-01-31", "amount": "5597" },  \n    { "date": "2017-11-30", "amount": "5359" },  \n    { "date": "2018-02-28", "amount": "5082" },  \n    { "date": "2018-04-14", "amount": "2567" }  \n];  \n  \nconsole.log(groupByDate(operations));  \n  \n// Ожидаемый вывод =>   \n// {  \n//     "2017": [  \n//         "05-31",  \n//         "06-30",  \n//         "07-31",  \n//         "08-31",  \n//         "09-30",  \n//         "10-31",  \n//         "11-30",  \n//         "12-31"  \n//     ],  \n//     "2018": [  \n//         "01-31",  \n//         "02-28",  \n//         "03-31",  \n//         "04-14"  \n//     ]  \n// }	js	t	\N	\N	2025-06-29 12:11:56.356	2025-06-29 12:11:56.356	{}	{"Аласкар технологии",Селекти,Альфабанк}
cmchmqm3i001f13sx5d5chd2i	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	50. sortByDate	3	50	Постановка задачи:Дан массив объектов, где каждый объект содержит дату в формате 'DD.MM.YYYY'. Необходимо отсортировать массив по датам в порядке возрастания. Для этого можно преобразовать строки дат так, чтобы год, месяц и день шли в правильном порядке (например, YYYYMMDD), и затем выполнить сравнение.\\n	let arr = [  \n    { date: '10.01.2017' },  \n    { date: '01.12.2002' },  \n    { date: '11.02.2021' },  \n    { date: '05.11.2016' },  \n];  \n  \nfunction sortByDate(array) {  \n    return array.sort((a, b) => {  \n        // Преобразуем дату в формат YYYYMMDD  \n        const dateA = a.date.split('.').reverse().join('');  \n        const dateB = b.date.split('.').reverse().join('');  \n        // Сравниваем преобразованные строки  \n        return dateA.localeCompare(dateB);  \n    });  \n}  \n  \nconst sortedArr = sortByDate(arr);  \nconsole.log(sortedArr);  \n  \n// Ожидаемый вывод:  \n// [  \n//     { date: '01.12.2002' },  \n//     { date: '05.11.2016' },  \n//     { date: '10.01.2017' },  \n//     { date: '11.02.2021' }  \n// ]	js	t	\N	\N	2025-06-29 12:11:56.383	2025-06-29 12:11:56.383	{}	{ITFB}
cmchmqm51001h13sxj8v2dazn	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	52. Battleships in a Board	3	52	Постановка задачи:Дана игровая доска, представленная двумерным массивом, где 'X' обозначает часть корабля, а '.' — пустую клетку. Корабли расположены по горизонтали или вертикали и не соприкасаются друг с другом. Необходимо посчитать количество кораблей на доске. Решение должно быть выполнено за один проход по доске без использования дополнительной памяти для хранения информации о посещённых клетках.\\n	function countBattleships(board) {\n  let count = 0;\n  const rows = board.length;\n  if (rows === 0) return 0;\n  const cols = board[0].length;\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (board[i][j] === 'X') {\n        // Если сверху или слева есть 'X', значит, этот корабль уже посчитан\n        if (i > 0 && board[i - 1][j] === 'X') continue;\n        if (j > 0 && board[i][j - 1] === 'X') continue;\n        count++;\n      }\n    }\n  }\n\n  return count;\n}\n\n// Тест:\nconst board = [\n  ['X', '.', '.', 'X'],\n  ['.', '.', '.', 'X'],\n  ['.', '.', '.', 'X'],\n];\nconsole.log(countBattleships(board)); // 2\n	js	t	\N	\N	2025-06-29 12:11:56.437	2025-06-29 12:11:56.437	{https://leetcode.com/problems/battleships-in-a-board/}	{1С}
cmchmqm5q001i13sxbhbq4bke	cmchmqkyd000013sxavo7b2rz	["Лёгкие – средние (классические алгоритмические задачи, базовая работа с массивами)"]	53. Rotate Image	3	53	Постановка задачи:Дана квадратная матрица, представляющая изображение, где каждый пиксель хранится в виде целого числа. Необходимо повернуть изображение на 90 градусов по часовой стрелке in-place. Для этого можно выполнить следующие шаги:\\nТранспонировать матрицу (заменить строки на столбцы).Развернуть (обратить порядок элементов) каждую строку.\\n	function rotate(matrix) {  \n    const n = matrix.length;  \n  \n    // Транспонируем матрицу  \n    for (let i = 0; i < n; i++) {  \n        for (let j = i; j < n; j++) {  \n            [matrix[i][j], matrix[j][i]] = [matrix[j][i], matrix[i][j]];  \n        }  \n    }  \n    // Разворачиваем каждую строку  \n    for (let i = 0; i < n; i++) {  \n        matrix[i].reverse();  \n    }  \n}  \n  \n// Тест:  \nlet matrix = [  \n    [1, 2, 3],  \n    [4, 5, 6],  \n    [7, 8, 9],  \n];  \nrotate(matrix);  \n  \nconsole.log(matrix); // [[7, 4, 1], [8, 5, 2], [9, 6, 3]]	js	t	\N	\N	2025-06-29 12:11:56.462	2025-06-29 12:11:56.462	{https://leetcode.com/problems/rotate-image/}	{Теле2}
cmchmqmas001p13sxsb4hm783	cmchmqkyd000013sxavo7b2rz	["Средние – сложные (задачи с более высоким алгоритмическим накалом)"]	60. Find All Duplicates in an Array	3	60	Постановка задачи:Дан массив чисел, где каждый элемент находится в диапазоне от 1 до n (n — длина массива). Некоторые элементы могут повторяться. Необходимо найти все дубликаты, то есть те элементы, которые появляются дважды. Задачу можно решить, изменяя входной массив (in-place) или используя дополнительные структуры данных. Приведены несколько подходов:\\nПометка с помощью отрицания:Проходим по массиву и используем значение каждого элемента для вычисления индекса.Если элемент по этому индексу уже отрицательный, значит, текущий элемент уже встречался и является дубликатом.В конце возвращаем массив дубликатов.Сортировка с использованием обмена:Переставляем элементы так, чтобы каждый элемент оказался на позиции, соответствующей его значению.После перестановки элементы, не соответствующие индексу, являются дубликатами.Изменение массива как счётчика:Используем арифметические операции для подсчета вхождений, прибавляя значение длины массива к элементам.Элементы, значение которых превышает определённый порог, считаются повторяющимися.Использование Set:Простой подход с использованием коллекции Set для отслеживания уже встреченных элементов.Абсолют индексная маркировка:Аналогично методу с отрицанием, но с дополнительной проверкой и последующим восстановлением исходных значений массива.\\n	// 1. Пометка с помощью отрицания  \nfunction findDuplicatesNegation(nums) {  \n    const duplicates = [];  \n    for (let i = 0; i < nums.length; i++) {  \n        const index = Math.abs(nums[i]) - 1;  \n        if (nums[index] < 0) {  \n            duplicates.push(index + 1);  \n        } else {  \n            nums[index] = -nums[index];  \n        }  \n    }  \n    // Восстанавливаем исходный массив  \n    for (let i = 0; i < nums.length; i++) {  \n        nums[i] = Math.abs(nums[i]);  \n    }  \n    return duplicates;  \n}  \n  \nconst nums1 = [4, 3, 2, 7, 8, 2, 3, 1];  \nconsole.log(findDuplicatesNegation(nums1));  \n  \n  \n// 2. Сортировка с использованием обмена  \nfunction findDuplicatesSwap(nums) {  \n    const duplicates = [];  \n    for (let i = 0; i < nums.length; i++) {  \n        while (nums[i] !== nums[nums[i] - 1]) {  \n            const temp = nums[i];  \n            nums[i] = nums[temp - 1];  \n            nums[temp - 1] = temp;  \n        }  \n    }  \n    for (let i = 0; i < nums.length; i++) {  \n        if (nums[i] !== i + 1) {  \n            duplicates.push(nums[i]);  \n        }  \n    }  \n    return duplicates;  \n}  \n  \nconst nums2 = [4, 3, 2, 7, 8, 2, 3, 1];  \nconsole.log(findDuplicatesSwap(nums2));  \n  \n  \n// 3. Изменение массива как счётчика  \nfunction findDuplicatesCounting(nums) {  \n    const duplicates = [];  \n    const n = nums.length;  \n    for (let i = 0; i < n; i++) {  \n        const index = (nums[i] - 1) % n;  \n        nums[index] += n;  \n    }  \n    for (let i = 0; i < n; i++) {  \n        if (nums[i] > 2 * n) {  \n            duplicates.push(i + 1);  \n        }  \n    }  \n    return duplicates;  \n}  \n  \nconst nums3 = [4, 3, 2, 7, 8, 2, 3, 1];  \nconsole.log(findDuplicatesCounting(nums3));  \n  \n  \n// 4. Использование Set  \nfunction findDuplicatesSet(nums) {  \n    const duplicates = [];  \n    const seen = new Set();  \n    for (const num of nums) {  \n        if (seen.has(num)) {  \n            duplicates.push(num);  \n        } else {  \n            seen.add(num);  \n        }  \n    }  \n    return duplicates;  \n}  \n  \nconst nums4 = [4, 3, 2, 7, 8, 2, 3, 1];  \nconsole.log(findDuplicatesSet(nums4));  \n  \n  \n// 5. Абсолют индексная маркировка  \nfunction findDuplicatesAbsoluteMarking(nums) {  \n    const duplicates = [];  \n    const n = nums.length;  \n    for (let i = 0; i < n; i++) {  \n        const index = Math.abs(nums[i]) - 1;  \n        if (nums[index] < 0) {  \n            duplicates.push(index + 1);  \n        } else {  \n            nums[index] *= -1;  \n        }  \n    }  \n    for (let i = 0; i < n; i++) {  \n        nums[i] = Math.abs(nums[i]);  \n    }  \n    return duplicates;  \n}  \n  \nconst nums5 = [4, 3, 2, 7, 8, 2, 3, 1];  \nconsole.log(findDuplicatesAbsoluteMarking(nums5));	js	t	\N	\N	2025-06-29 12:11:56.644	2025-06-29 12:11:56.644	{https://leetcode.com/problems/find-all-duplicates-in-an-array/}	{"Точка банк"}
cmchmqned002413sx5ijncs72	cmchmqn6p001t13sxcmac57pa	[]	8. myMath	3	10	Задача: Реализовать класс MyMath, который:\\nПоддерживает арифметические операции (add, subtract, multiply, divide);Позволяет вызывать методы цепочкой;Возвращает новый экземпляр объекта для каждой операции.\\n	\nclass MyMath {  \n    constructor(value = 0) {  \n        this.value = value;  \n    }  \n  \n    add(num) {  \n        return new MyMath(this.value + num);  \n    }  \n  \n    multiply(num) {  \n        return new MyMath(this.value * num);  \n    }  \n  \n    divide(num) {  \n        if (num === 0) {  \n            throw new Error('Cannot divide by zero!');  \n        }  \n        return new MyMath(this.value / num);  \n    }  \n  \n    subtract(num) {  \n        return new MyMath(this.value - num);  \n    }  \n  \n    result() {  \n        return this.value;  \n    }  \n}  \n  \n  \nconst calculation = new MyMath(10)  \n    .add(5)  \n    .multiply(2)  \n    .divide(3)  \n    .subtract(1)  \n    .result();  \n  \nconsole.log(calculation); // Output: 9	js	t	\N	\N	2025-06-29 12:11:58.069	2025-06-29 12:11:58.069	{}	{Рутуб}
cmchmqmca001r13sxlc05jzbw	cmchmqkyd000013sxavo7b2rz	["Средние – сложные (задачи с более высоким алгоритмическим накалом)"]	62. countShips	3	62	Постановка задачи:Дан одномерный массив, представляющий квадратное поле, где 1 обозначает часть корабля, а 0 — пустую клетку. Размер поля вычисляется как корень квадратный из длины массива. Необходимо посчитать количество кораблей, где корабль — это группа смежных единиц (соседство по вертикали и горизонтали). Решение предполагает преобразование одномерного массива в двумерный и применение обхода в глубину (DFS) для подсчёта и "затопления" кораблей.\\n	function countShips(field) {  \n    const n = Math.sqrt(field.length);  \n    const grid = [];  \n    let index = 0;  \n  \n    // Преобразуем одномерный массив в двумерный массив (grid) размером n x n  \n    for (let i = 0; i < n; i++) {  \n        grid.push(field.slice(index, index + n));  \n        index += n;  \n    }  \n  \n    let count = 0;  \n  \n    // Функция DFS для обхода и "затопления" корабля  \n    function dfs(i, j) {  \n        if (i < 0 || i >= n || j < 0 || j >= n || grid[i][j] === 0) {  \n            return;  \n        }  \n        grid[i][j] = 0;  \n        dfs(i + 1, j);  \n        dfs(i - 1, j);  \n        dfs(i, j + 1);  \n        dfs(i, j - 1);  \n    }  \n  \n    // Проходим по всем клеткам поля и считаем корабли  \n    for (let i = 0; i < n; i++) {  \n        for (let j = 0; j < n; j++) {  \n            if (grid[i][j] === 1) {  \n                count++;  \n                dfs(i, j);  \n            }  \n        }  \n    }  \n    return count;  \n}  \n  \n// Пример 1: Поле размером 4x4  \nconst field1 = [  \n    0, 1, 0, 1,  \n    0, 0, 0, 1,  \n    0, 0, 0, 0,  \n    1, 1, 1, 0  \n];  \nconsole.log(countShips(field1)); // Ожидаемый вывод: 3  \n  \n// Пример 2: Поле размером 4x4 с другими кораблями  \nconst field2 = [  \n    0, 0, 0, 1,  \n    1, 0, 0, 1,  \n    0, 0, 0, 0,  \n    1, 1, 1, 0  \n];  \nconsole.log(countShips(field2)); // Ожидаемый вывод: 3  \n  \n// Пример 3: Поле размером 5x5  \nconst field3 = [  \n    1, 0, 0, 1, 0,  \n    0, 0, 0, 1, 0,  \n    1, 0, 0, 0, 0,  \n    0, 0, 1, 1, 0,  \n    1, 0, 0, 0, 0  \n];  \nconsole.log(countShips(field3)); // Ожидаемый вывод: 5\n	js	t	\N	\N	2025-06-29 12:11:56.698	2025-06-29 12:11:56.698	{}	{Контур}
cmchmqna3001y13sx6rt6itak	cmchmqn6p001t13sxcmac57pa	[]	2. Implement Queue using Stacks	3	4	Задача: Реализовать класс Queue, используя два стека. Очередь должна поддерживать методы enqueue (добавление элемента) и dequeue (удаление элемента по FIFO).\\n	class Stack {  \n    constructor() {  \n        this.items = [];  \n    }  \n  \n    push(data) {  \n        this.items.push(data);  \n    }  \n  \n    pop() {  \n        return this.items.pop();  \n    }  \n  \n    size() {  \n        return this.items.length;  \n    }  \n}  \n  \nclass Queue {  \n    constructor() {  \n        this.stack1 = new Stack();  \n        this.stack2 = new Stack();  \n    }  \n  \n    enqueue(data) {  \n        this.stack1.push(data);  \n    }  \n  \n    dequeue() {  \n        if (this.stack2.size() === 0) {  \n            while (this.stack1.size() > 0) {  \n                this.stack2.push(this.stack1.pop());  \n            }  \n        }  \n        if (this.stack2.size() === 0) {  \n            throw new Error('Queue is empty');  \n        }  \n  \n        return this.stack2.pop();  \n    }  \n  \n    size() {  \n        return this.stack1.size() + this.stack2.size();  \n    }  \n}  \n  \n  \nconst queue = new Queue();  \n  \n  \nqueue.enqueue(1);  \n  \nqueue.enqueue(2);  \n  \nqueue.enqueue(3);  \n  \nconsole.log(queue.dequeue()); // Output: 1  \n  \n  \nqueue.enqueue(4);  \n  \nconsole.log(queue.dequeue()); // Output: 2  \n  \nconsole.log(queue.dequeue()); // Output: 3  \n  \nconsole.log(queue.dequeue()); // Output: 4  \n  \n// queue.dequeue(); // Uncommenting this line would throw an Error: Queue is empty	js	t	\N	\N	2025-06-29 12:11:57.915	2025-06-29 12:11:57.915	{https://leetcode.com/problems/implement-queue-using-stacks/}	{Промсвязьбанк}
cmchmqnar001z13sxzpeiiiu6	cmchmqn6p001t13sxcmac57pa	[]	3. синглтон	3	5	Задача: Реализовать паттерн "Singleton", который гарантирует, что у класса может быть только один экземпляр, доступный через getInstance().\\n	\nclass Singleton {  \n    constructor() {  \n        if (Singleton._instance) {  \n            throw new Error('Singleton classes cannot be instantiated more than once.');  \n        }  \n        Singleton._instance = this;  \n        }  \n  \n    static getInstance() {  \n        if (!Singleton._instance) {  \n            Singleton._instance = new Singleton();  \n        }  \n        return Singleton._instance;  \n    }  \n}  \n  \nconst first = Singleton.getInstance();  \n  \nconst second = Singleton.getInstance();  \n  \nconsole.log(first === second); // Output: true	js	t	\N	\N	2025-06-29 12:11:57.939	2025-06-29 12:11:57.939	{}	{it-one,Газпромбанк}
cmchmqnbj002013sx5uz8huv7	cmchmqn6p001t13sxcmac57pa	[]	4. класс store	3	6	Задача: Реализовать класс Store, который позволяет:\\nХранить состояние (get);Обновлять состояние (set);Подписываться на изменения (subscribe);Отписываться от подписки.\\n	class Store {  \n    constructor() {  \n        this._state = {};  \n        this._listeners = new Set();  \n    }  \n  \n    set(newState) {  \n        const prevState = this._state;  \n        this._state = { ...this._state, ...newState };  \n        this._listeners.forEach((listener) => listener(this._state, prevState));  \n    }  \n  \n    get() {  \n        return { ...this._state }; // Return a copy to prevent external mutation  \n    }  \n  \n    subscribe(listener) {  \n        this._listeners.add(listener);  \n        return () => {  \n            this._listeners.delete(listener);  \n        };  \n    }  \n}  \n  \nconst store = new Store();  \n  \nconst unsubscribe = store.subscribe((newState, prevState) => {  \n    console.log('State changed from', prevState, 'to', newState);  \n});  \n  \nstore.set({ name: 'Alice' });  \n  \n// Output: State changed from {} to { name: 'Alice' }  \n  \nstore.set({ age: 30 });  \n  \n// Output: State changed from { name: 'Alice' } to { name: 'Alice', age: 30 }  \n  \nconsole.log(store.get()); // Output: { name: 'Alice', age: 30 }  \n  \nunsubscribe(); // Stop listening to state changes  \n  \nstore.set({ name: 'Bob' });  \n// No output; listener has been unsubscribed	js	t	\N	\N	2025-06-29 12:11:57.967	2025-06-29 12:11:57.967	{}	{"ВИРТУ СИСТЕМС"}
cmchmqnc7002113sxqmxd5esd	cmchmqn6p001t13sxcmac57pa	[]	5. класс cat	3	7	Задача: Исследовать работу this в разных контекстах:\\nВнутри класса;В стрелочных функциях;В обычных функциях;При bind().\\n	class Cat {  \n    sound = 'meow';  \n  \n    say = () => {  \n        console.log(this.sound);  \n    };  \n  \n    say2() {  \n        console.log(this.sound);  \n    }  \n}  \n  \nconst myCat = {  \n    sound: 'meow meow',  \n    say: () => {  \n        console.log(this.sound);  \n    },  \n    say2: function () {  \n        console.log(this.sound);  \n    }  \n};  \n  \nconst cat = new Cat();  \n  \ncat.say();    // 'meow'  \ncat.say2();   // 'meow'  \n  \n// myCat.say();   // undefined  \n  \nmyCat.say2();  // 'meow meow'  \n  \nconst outSay = cat.say.bind(myCat);  \nconst outSay2 = cat.say2.bind(cat);  \nconst outSay3 = cat.say2.bind(myCat);  \n  \noutSay();    // Output: 'meow'  \n  \noutSay2();   // 'meow'  \n  \noutSay3();   // 'meow meow'	js	t	\N	\N	2025-06-29 12:11:57.992	2025-06-29 12:11:57.992	{}	{"Точка банк"}
cmchmqol0002c13sx9mgq6tyr	cmchmqohb002613sxycod6ivv	[]	6. once - modification	3	5	Постановка задачи:\nРеализуйте функцию once, которая принимает функцию (func) в качестве аргумента и возвращает новую функцию. Новая функция должна вызывать переданную функцию только один раз, сохраняя результат первого вызова, а при последующих вызовах возвращать этот же результат без повторного выполнения исходной функции. При этом следует корректно обрабатывать передачу контекста (this) и аргументов.\\n	function once (func) {\n    let hasBeenCalled = false\n    let result\n    return function (...args) {\n        if (!hasBeenCalled) {\n            result = func.call(this, ...args)\n            hasBeenCalled = true\n        }\n        return result\n    }\n}	js	t	\N	\N	2025-06-29 12:11:59.605	2025-06-29 12:11:59.605	{}	{"Точка банк"}
cmchmqon5002f13sxqr79huor	cmchmqohb002613sxycod6ivv	[]	9. callLimit	3	8	Постановка задачи:\nРеализуйте функцию callLimit, которая принимает три аргумента: функцию fn, лимит вызовов (limit) и опциональную callback-функцию. Возвращаемая функция должна выполнять следующие действия:\\nВызывать исходную функцию fn с переданными аргументами до тех пор, пока количество вызовов не достигнет лимита.После достижения лимита дальнейшие вызовы не должны вызывать fn и возвращать undefined.Если callback-функция передана, вызвать её один раз при достижении лимита.Обеспечить метод reset для сброса счетчика вызовов, чтобы функция могла быть снова использована с начальным лимитом.\\nвстречалось вяндекс\\n	\nfunction callLimit(fn, limit, callback) {  \n    let count = 0;  \n  \n    const resFunc = (...args) => {  \n        if (count < limit) {  \n            count++;  \n            if (count === limit) callback?.();  \n            return fn(...args);  \n        }  \n    };  \n  \n    // Метод для сброса счётчика вызовов  \n    resFunc.reset = () => count = 0;  \n  \n    return resFunc;  \n}  \n  \n  \nfunction log(title, message) {  \n    console.log(title + ': ' + message);  \n}  \n  \nvar logLimited = callLimit(log, 3);  \nlogLimited('title1', 'desc'); // Выведет: title1: desc  \nlogLimited('title2', 'desc'); // Выведет: title2: desc  \nlogLimited('title3', 'desc'); // Выведет: title3: desc  \nlogLimited('title4', 'desc'); // Ничего не выведет, т.к. лимит достигнут  \n  \nlogLimited.reset(); // Перезагрузка счётчика  \n  \nlogLimited('title5', 'desc'); // Выведет: title5: desc  \nlogLimited('title6', 'desc'); // Выведет: title6: desc  \nlogLimited('title7', 'desc'); // Выведет: title7: desc  \n  \nvar logLimited2 = callLimit(log, 2, () => console.log('finish'));  \nlogLimited2('foo', 'bar'); // Выведет: foo: bar  \nlogLimited2('foo2', 'bar'); // Выведет: foo2: bar и затем finish\n	js	t	\N	\N	2025-06-29 12:11:59.682	2025-06-29 12:11:59.682	{}	{"Какая-то криптогалерея",Тинькофф,РСХБ-Интех,Ivi,"Расчетные решения",Сбертех,"Сбер для экспертов",KTS,"Premium IT Solution",MOEX,Profsoft,eesee,ДОМ.РФ}
cmchmqoom002h13sxhyj55uil	cmchmqohb002613sxycod6ivv	[]	11. some	3	10	Постановка задачи:\nРеализуйте собственный метод массива some, который принимает функцию-предикат (fn) и возвращает true, если хотя бы один элемент массива удовлетворяет этому предикату, и false в противном случае. Функция должна перебрать все элементы массива и остановиться, как только предикат вернёт true для какого-либо элемента.\\n	\nArray.prototype.some = function(fn) {  \n  \n    for (let i = 0; i < this.length; i++) {  \n        if (fn(this[i])) {  \n            return true;  \n        }  \n    }    return false;  \n};  \n  \nconst numbers = [1, 2, 3, 4, 5];  \n  \nconst hasEven = numbers.some(num => num % 2 === 0);  \n  \nconsole.log(hasEven); // true  \n  \nconst hasGreaterThan10 = numbers.some(num => num > 10);  \n  \nconsole.log(hasGreaterThan10); // false\n	js	t	\N	\N	2025-06-29 12:11:59.734	2025-06-29 12:11:59.734	{}	{БФТ,Селекти}
cmchmqopc002i13sx43oxywcv	cmchmqohb002613sxycod6ivv	[]	12. map	3	11	Постановка задачи:\nРеализуйте функцию map, которая принимает массив и функцию-преобразователь, применяет эту функцию ко всем элементам массива и возвращает новый массив с результатами преобразования. Задача должна быть решена различными способами:\\nС использованием цикла for.Как метод прототипа массива (Array.prototype.myMap).С использованием метода reduce.С использованием метода forEach.\\n	  \n// for  \n\n\nconst array = [1, 2, 3, 4, 5, 6, 7 , 8 , 9, 10]  \nconst sum = x => x * 2  \n  \nconst map = (arr, fn) => {  \n    const transformedArr = [];  \n    for (let index = 0; index < arr.length; index++) {  \n        transformedArr.push(fn(arr[index], index));  \n    }  \n    return transformedArr;  \n};  \n  \nconst test = map(array, sum)  \n  \nconsole.log(test)  \n  \n  \n// как метод массива  \n  \nArray.prototype.myMap = function(fn) {  \n  \n    const transformedArr = [];  \n  \n    for (let index = 0; index < this.length; index++) {  \n        transformedArr.push(fn(this[index], index));  \n  \n    }  \n    return transformedArr;  \n};  \n  \nconst result = array.myMap(sum);  \n  \nconsole.log(result); // [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\n\n// reduce    \nconst map1 = (arr, fn) => arr.reduce((acc, current, index) => {  \n    acc.push(fn(curr, idx));  \n    return acc;  \n}, []);  \n  \n  \n  \n// forEach  \nconst map3 = (arr, fn) => {  \n    const transformedArr = [];  \n    arr.forEach((element, index) => {  \n        transformedArr.push(fn(element, index));  \n    });  \n    return transformedArr;  \n};	js	t	\N	\N	2025-06-29 12:11:59.761	2025-06-29 12:11:59.761	{}	{Сфера,Селекти}
cmchmqoq3002j13sx9cppfcvn	cmchmqohb002613sxycod6ivv	[]	13. filter	3	12	Постановка задачи:\nРеализуйте функцию filter, которая принимает массив и функцию-предикат (fn) и возвращает новый массив, содержащий только те элементы, для которых функция-предикат возвращает true. Решение необходимо реализовать различными способами:\\nС использованием цикла for.Как метод прототипа массива (например, Array.prototype.myFilter).С использованием метода forEach.\\n	\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nconst isEven = x => x % 2 === 0;  \n  \n  \n// for  \n  \nconst filter = (arr, fn) => {  \n    const newArray = []  \n  \n    for (let i = 0; i < arr.length; i++) {  \n        if (fn(arr[i])) {  \n            newArray.push(arr[i])  \n        }  \n    }    return newArray  \n}  \n  \nconst test = filter(arr, isEven)  \n  \nconsole.log(test)  \n\n// как метод \n\nArray.prototype.myFilter = function(fn) {  \n    const newArray = [];  \n  \n    for (let i = 0; i < this.length; i++) {  \n        if (fn(this[i])) {  \n            newArray.push(this[i]);  \n        }  \n    }  \n    return newArray;  \n};\n  \n// forEach  \n  \nconst filter2 = (arr, fn) => {  \n    const newArray = []  \n  \n    arr.forEach((element, index) => {  \n        if (fn(element)) {  \n            newArray.push(element)  \n        }  \n    })  \n    return newArray  \n}  \n  \nconst test2 = filter2(arr, isEven)  \n  \nconsole.log(test2)\n	js	t	\N	\N	2025-06-29 12:11:59.787	2025-06-29 12:11:59.787	{}	{Селекти,"Страховая компания Пульс",РосГосСтрах}
cmchmqoqp002k13sxrrmb1bg3	cmchmqohb002613sxycod6ivv	[]	14. reduce	3	13	Постановка задачи:\nРеализуйте функцию reduce, которая принимает массив, функцию-аккумулятор и начальное значение аккумулятора, а затем возвращает итоговое значение, полученное путем последовательного применения функции-аккумулятора ко всем элементам массива. Необходимо реализовать две версии:\\nС использованием цикла for.С использованием метода forEach.\nПродемонстрируйте работу обеих реализаций на примере, где функция-аккумулятор умножает каждый элемент массива на 2 и суммирует полученные значения.\\n	\nconst array = [1, 2, 3, 4, 5]  \nconst power = (acc, x) => acc + x * 2;  \n  \n  \n// for  \n  \nconst reduce = (arr, fn, init = 0) => {  \n  \n    let acc = init  \n    for (let i = 0; i < arr.length; i++) {  \n        acc = fn(acc, arr[i])  \n    }  \n    return acc  \n}  \n  \n  \nconst test = reduce(array, power)  \n  \nconsole.log(test)  \n  \n  \n// forEach  \nconst reduce2 = (arr, fn, init = 0) => {  \n    let acc = init  \n  \n    arr.forEach((element, index) => {  \n        console.log(acc)  \n        acc = fn(acc, element)  \n    })  \n    return acc  \n}  \n  \n  \nconst test2 = reduce2(array, power)  \n  \nconsole.log(test2)\n	js	t	\N	\N	2025-06-29 12:11:59.809	2025-06-29 12:11:59.809	{}	{R-Vision,Селекти}
cmchmqoyq002w13sx025727v6	cmchmqohb002613sxycod6ivv	["Банкоматы", "Банкомат в трех частях"]	1	5	25		\nconst nominals = [10, 50, 100, 200, 500, 1000, 2000, 5000];  \n  \nfunction atm(sum, nominals) {  \n    const minNominal = Math.min(...nominals);  \n    if (sum % minNominal !== 0) {  \n        throw new Error("Невозможно выдать данную сумму");  \n    }  \n  \n    const sorted = [...nominals].sort((a, b) => b - a);  \n    let remaining = sum;  \n    const parts = [];  \n  \n    for (const n of sorted) {  \n        const count = Math.floor(remaining / n);  \n        if (count > 0) {  \n            remaining -= count * n;  \n            parts.push(`${n}x${count}`);  \n        }  \n        if (remaining === 0) break;  \n    }  \n  \n    if (remaining > 0) {  \n        throw new Error("Невозможно выдать данную сумму");  \n    }  \n  \n    return parts.join(", ");  \n}  \n  \nconsole.log(atm(55400, nominals));  \n  \n// '5000x11, 2000x2'  \n  \nconsole.log(atm(8750, nominals));  \n  \n// '5000x1, 2000x1, 1000x1, 500x1, 200x1, 50x1'  \n  \nconsole.log(atm(13500, nominals));  \n  \n// '5000x2, 2000x1, 1000x3, 500x1'\n\n	js	t	\N	\N	2025-06-29 12:12:00.098	2025-06-29 12:12:00.098	{}	{PortalBilet,Киберлаб,ГосНИИАС,Aladdin}
cmchmqorc002l13sxr05mev9b	cmchmqohb002613sxycod6ivv	[]	15. dailyTemperatures	3	14	Постановка задачи:\nРеализуйте функцию dailyTemperatures, которая принимает массив чисел, представляющих ежедневные температуры, и возвращает новый массив, где для каждого дня записано, через сколько дней наступит более высокая температура, чем в данный день. Если для какого-либо дня более высокая температура не наступит, в соответствующей позиции массива должно стоять 0.\\n	\nfunction dailyTemperatures(temperatures) {  \n    const length = temperatures.length  \n    const result = new Array(length).fill(0)  \n    const stack = []  \n  \n    for (let i = 0; i < temperatures.length; i++) {  \n  \n        while (stack.length > 0 && temperatures[i] > temperatures[stack[stack.length - 1]])  {  \n                const prevIndex = stack.pop()  \n                console.log(prevIndex)  \n                result[prevIndex] = i - prevIndex  \n        }  \n        stack.push(i)  \n    }  \n  \n    return result  \n}  \n  \n  \n// console.log(dailyTemperatures([73, 74, 75, 71, 69, 72, 76, 73])); // Ожидаемый вывод: [1, 1, 4, 2, 1, 1, 0, 0]  \n//  \n// console.log(dailyTemperatures([30, 40, 50, 60])); // Ожидаемый вывод: [1, 1, 1, 0]  \n  \n// console.log(dailyTemperatures([30, 60, 90])); // Ожидаемый вывод: [1, 1, 0]\n	js	t	\N	\N	2025-06-29 12:11:59.832	2025-06-29 12:11:59.832	{}	{РСХБ}
cmchmqorz002m13sxh0ngktin	cmchmqohb002613sxycod6ivv	[]	16. bookingCalculate	3	15	Постановка задачи:\nРеализуйте функцию bookingCalculate, которая принимает два параметра:\\nКоличество ночей бронирования (nights).Начальную дату бронирования (startDate), которая по умолчанию равна текущей дате.\\nФункция должна вычислять общую стоимость бронирования, где стоимость ночи зависит от дня недели:\\nБудние дни (понедельник – пятница): 1500.Выходные дни (суббота и воскресенье): 2200.\\nПри расчёте стоимости функция должна учитывать, что бронирование может начинаться в любой день недели, и возвращать общую стоимость за заданное количество ночей.\\n	\nfunction bookingCalculate(nights, startDate = new Date()) {  \n  \n    const costs = { weekday: 1500, weekend: 2200 };  \n    let totalCost = 0;  \n  \n    for (let i = 0; i < nights; i++) {  \n        const dayOfWeek = (startDate.getDay() + i) % 7;  \n        totalCost += (dayOfWeek === 0 || dayOfWeek === 6) ? costs.weekend : costs.weekday;  \n    }  \n  \n    return totalCost;  \n}  \n  \n  \n// console.log(bookingCalculate(7)); // Ожидаемый вывод: 11900 (если неделя начнётся с понедельника)  \n  \n// console.log(bookingCalculate(3, new Date('2023-11-10'))); // Ожидаемый вывод: 5900\n	js	t	\N	\N	2025-06-29 12:11:59.856	2025-06-29 12:11:59.856	{}	{"ITQ Group (проект МКБ)",IBS}
cmchmqqo7003c13sxodmtuq3o	cmchmqqo2003b13sxajtzyb2z	[]	1. sum	3	0	Сумма значений в древовидной структуре\nДана древовидная структура, где каждый узел содержит числовое значение и массив потомков. Напишите функцию, которая рекурсивно вычисляет сумму всех значений в дереве.\\n	const tree1 = {  \n    value: 1,  \n    next: [  \n        {  \n            value: 3,  \n            next: [  \n                { value: 3, next: null },  \n                { value: 2, next: null }  \n            ]  \n        },  \n        { value: 2, next: null }  \n    ]  \n};  \n  \nfunction sum(tree) {  \n    let total = tree.value;  \n  \n    if (tree.next) {  \n        for (const node of tree.next) {  \n            total += sum(node);  \n        }  \n    }  \n    return total;  \n}\n  \n  \nconsole.log(sum(tree1));	js	t	\N	\N	2025-06-29 12:12:02.311	2025-06-29 12:12:02.311	{}	{Газпромбанк,DatsTeam}
cmchmqosp002n13sxcrf1668i	cmchmqohb002613sxycod6ivv	[]	17. reverse	3	16	Постановка задачи:\nРеализуйте функцию convertToStrAndReverse, которая принимает один аргумент s и возвращает строку, полученную следующим образом:\\nЕсли s является строкой или массивом, преобразуйте его в массив символов, затем разверните (reverse) порядок элементов и объедините их обратно в строку.Если s не является строкой или массивом, функция должна вернуть пустую строку.\\nПримеры:\\nДля входа '123' функция должна вернуть '321'.Для входа [1, 2, 3] функция должна вернуть '321'.Для входа объекта { length: 5 } или числа функция должна вернуть пустую строку.\\n	\n  \nfunction convertToStrAndReverse(s) {  \n  \n    const isConvertible = typeof s === 'string' || Array.isArray(s);  \n  \n    if (isConvertible) {  \n        return Array.from(s).reverse().join('');  \n    }  \n  \n    return '';  \n}  \n  \n  \n  \n  \nconsole.log(convertToStrAndReverse('123'));      // '321'  \n  \nconsole.log(convertToStrAndReverse([1, 2, 3]));  // '321'  \n  \nconsole.log(convertToStrAndReverse({ length: 5 })); // ''  \n  \nconsole.log(convertToStrAndReverse(123)); // ''\n	js	t	\N	\N	2025-06-29 12:11:59.881	2025-06-29 12:11:59.881	{}	{"Точка банк"}
cmchmqou3002p13sx8vllz602	cmchmqohb002613sxycod6ivv	[]	19. debounce	3	18	Постановка задачи:\nРеализуйте функцию debounce, которая принимает функцию (fn) и интервал времени (t, по умолчанию 1000 миллисекунд), и возвращает новую функцию, которая откладывает вызов fn до тех пор, пока не пройдёт t миллисекунд с момента последнего вызова. Если новая вызов происходит до истечения времени задержки, предыдущий таймер сбрасывается, и отсчет начинается заново. Это позволяет предотвратить частые вызовы функции, оптимизируя, например, обработку событий ввода.\\n	const debounce = (fn, t = 1000) => {  \n    let timer;  \n    return (...args) => {  \n        clearTimeout(timer);  \n        timer = setTimeout(() => fn(...args), t);  \n    }  \n};	js	t	\N	\N	2025-06-29 12:11:59.932	2025-06-29 12:11:59.932	{}	{"Онлайн школа Тетрика","ARTW (проект МТС)",Иннотех,Сбер,Поле.рф,GoToIt}
cmchmqouo002q13sxngjqkgnm	cmchmqohb002613sxycod6ivv	[]	20. sleep	3	19	Постановка задачи:\nРеализуйте функцию sleep, которая возвращает Promise, разрешающийся через заданный интервал времени. Функцию нужно реализовать несколькими способами:\\nБазовая реализация с использованием Promise и setTimeout.Однострочная реализация в стиле стрелочных функций.Реализация с использованием async/await.\nТакже продемонстрируйте примеры использования этих реализаций, например, для логирования сообщений "start" и "end" с задержкой.\\n	// basic  \n  \nfunction sleepBasic(ms) {  \n    return new Promise(resolve => {  \n        setTimeout(resolve, ms)  \n    })  \n}\n  \n// one line with arrow style  \n  \nconst sleepArrow = (millis) => new Promise(resolve => setTimeout(resolve, millis));  \n  \n  \n// usage basic  \n  \nfunction examplePromise() {  \n    console.log('start')  \n    return sleep(5000).then(() => console.log('end'))  \n}  \n  \n// log  \n  \n// console.log(examplePromise())  \n// console.log(sleepArrow())  \n  \n  \n  \n// async/await  \n  \nasync function sleep(millis) {  \n    await new Promise(resolve => setTimeout(resolve, millis));  \n}  \n  \n  \n// usage async/await  \n  \n  \nasync function exampleAsync() {  \n    console.log('Start');  \n    await sleep(3000);  \n    console.log('End');  \n}  \n  \n  \n// log  \n  \n// console.log(exampleAsync())	js	t	\N	\N	2025-06-29 12:11:59.953	2025-06-29 12:11:59.953	{}	{Совкомбанк,KTS,Яндекс,БФТ,"Яндекс Такси",Северсталь,МТС,ДОМ.РФ}
cmchmqow3002s13sxfv9xz3ig	cmchmqohb002613sxycod6ivv	[]	22. memo	3	21	Постановка задачи:\nРеализуйте функцию memoize, которая принимает функцию fn и возвращает её мемоизированную версию. Мемоизированная функция должна кэшировать результаты вызовов fn для каждого уникального набора аргументов (используя, например, JSON.stringify для формирования ключа), чтобы при повторном вызове с теми же аргументами не вычислять результат заново, а возвращать значение из кэша. Дополнительно, при каждом вызове выводите в консоль сообщение о том, что результат вычислен или получен из кэша, и продемонстрируйте работу функции на примере, увеличивая счётчик вызовов.\\n	function memoize(fn) {  \n    const cache = new Map()  \n  \n    return function(...args) {  \n        const key = JSON.stringify(args)  \n        if (cache.has(key)) {  \n            const result = cache.get(key)  \n            console.log(`Вычислено из кэша : ${result}`)  \n            return cache.get(key);  \n        }  \n        const result = fn(...args)  \n        cache.set(key, result)  \n        console.log(`Вычислено: ${result}`);  \n        return result  \n    }  \n}  \n  \nlet callCount = 0;  \n  \nconst memoizedFn2 = memo((a, b) => {  \n    callCount += 1   \nreturn a + b   \n})  \n  \n  \nconsole.log(memoizedFn2(2, 3));  \nconsole.log(memoizedFn2(2, 3));  \nconsole.log(memoizedFn2(2, 3));  \n  \nconsole.log(callCount)	js	t	\N	\N	2025-06-29 12:12:00.003	2025-06-29 12:12:00.003	{}	{Ivi,"Расчетные решения",Сбер,ВТБ,Кибер-Ром,МойСклад,МтсЛинк,"Сбер ВРМ Дэшборд",БФТ-холдинг}
cmchmqtn6004v13sxj03kiwa0	cmchmqtbe004e13sxfcavy82w	[]	17. compress 2	3	16	Сжатие строки 2\nРеализуйте функцию сжатия строки, где повторяющиеся символы заменяются на <символ><количество повторов>.\\n	\nfunction compressString(str) {  \n    if (!str) return '';  \n  \n    let result = '';  \n    let i = 0;  \n  \n    while (i < str.length) {  \n        let count = 1;  \n        while (i + count < str.length && str[i + count] === str[i]) {  \n            count++;  \n        }  \n        if (count === 1) {  \n            result += str[i];  \n        } else {  \n            result += str[i] + count;  \n        }  \n        i += count;  \n    }  \n  \n    return result;  \n}  \n  \n// Test cases  \nconsole.log(compressString('aaabbccdeefa')); // Output: 'a3b2c2de2fa2'  \nconsole.log(compressString('aaabbccdeef'));  // Output: 'a3b2c2de2f'  \nconsole.log(compressString('aaaaa'));        // Output: 'a5'  \nconsole.log(compressString('b'));            // Output: 'b'  \nconsole.log(compressString(''));             // Output: ''\n	js	t	\N	\N	2025-06-29 12:12:06.163	2025-06-29 12:12:06.163	{}	{Yandex.pay,Яндекс,СберТех,IBS,Сравни,ЮТЭИР,GoInvest,Сбер,Yandex.multitrack,МТС}
cmchmqowr002t13sxfrtnm2ge	cmchmqohb002613sxycod6ivv	[]	23. memo2	3	22	Постановка задачи:\nРеализуйте функцию memo, которая принимает функцию fn и возвращает её мемоизированную версию, способную кэшировать результаты вызова fn для каждого уникального набора аргументов и для каждого контекста (this). Для хранения кэша используйте WeakMap, чтобы обеспечить корректную обработку методов объектов. При вызове возвращаемой функции, если результат для данного контекста и набора аргументов уже был вычислен, функция должна вернуть значение из кэша, иначе вычислить результат, сохранить его в кэше и вернуть.\\n	\nconst memo = (fn) => {  \n    const cache = new WeakMap();  \n  \n    return function(...args) {  \n        const context = this;  \n        // Если контекст объекта отсутствует в кэше, создаем для него новый `Map`  \n        if (!cache.has(context)) {  \n            cache.set(context, new Map());  \n        }  \n  \n        const map = cache.get(context);  \n        const key = JSON.stringify(args);  \n  \n        // Проверка на наличие результата в кэше  \n        if (map.has(key)) {  \n            return map.get(key);  \n        }  \n  \n        // Вычисление и кэширование результата  \n        const result = fn.apply(context, args);  \n        map.set(key, result);  \n        return result;  \n    };  \n};  \n  \nlet callCount = 0;  \n  \nconst obj = {  \n    x: 2,  \n    y: 3,  \n    sum(a, b) {  \n        callCount += 1;  \n        return a + b + this.x + this.y;  \n    }  \n};  \n  \n// Мемоизация метода объекта  \nobj.memoizedSum = memo(obj.sum);  \n  \nconsole.log(obj.memoizedSum(1, 2)); // Первый вызов: вычисляет и возвращает 8 (1 + 2 + 2 + 3)  \nconsole.log(obj.memoizedSum(1, 2)); // Второй вызов: возвращает 8 из кэша  \nconsole.log(obj.memoizedSum(2, 3)); // Третий вызов: вычисляет и возвращает 10 (2 + 3 + 2 + 3)  \n  \nconsole.log(callCount); // Выводит 2, потому что вычисления выполнялись только для новых аргументов\n	js	t	\N	\N	2025-06-29 12:12:00.028	2025-06-29 12:12:00.028	{}	{Ivi,"Расчетные решения",Сбер,ВТБ,Кибер-Ром,МойСклад,МтсЛинк,"Сбер ВРМ Дэшборд",БФТ-холдинг}
cmchmqoxg002u13sxbjnlbhwy	cmchmqohb002613sxycod6ivv	[]	24. memo3	3	23	Постановка задачи:\nРеализуйте функцию cachedFn, которая принимает функцию (fn) и возвращает её мемоизированную версию. При вызове возвращаемой функции для аргумента a, если результат для данного a уже сохранён в кэше, функция должна вернуть результат из кэша (с сообщением об этом в консоли); в противном случае — вычислить результат с помощью fn, сохранить его в кэше и вернуть результат. Продемонстрируйте работу функции на примере квадрирования числа.\\n	function squaring(a) {\n  return a ** 2;\n}\n\nfunction cachedFn(fn) {\n  const cache = new Map(); \n\n  return function (a) {\n    if (cache.has(a)) {\n      console.log(`${cache.get(a)} from cache`); \n      return cache.get(a);\n    }\n    const result = fn(a);\n    cache.set(a, result); \n    console.log(result); \n    return result;\n  };\n}\n\nconst memoizedSquaring = cachedFn(squaring);\n\nmemoizedSquaring(3); // 9\nmemoizedSquaring(3); // 9 from cache\nmemoizedSquaring(5); // 25\nmemoizedSquaring(5); // 25 from cache\nmemoizedSquaring(3); // 9 from cache\n	js	t	\N	\N	2025-06-29 12:12:00.053	2025-06-29 12:12:00.053	{}	{Ivi,"Расчетные решения",Сбер,ВТБ,Кибер-Ром,МойСклад,МтсЛинк,"Сбер ВРМ Дэшборд",БФТ-холдинг}
cmchmqozf002x13sxt3gmcpih	cmchmqohb002613sxycod6ivv	["Банкоматы", "Банкомат в трех частях"]	2	5	26		\n// Модифицировать функцию `atm`, чтобы она поддерживала несколько валют. // Каждая валюта имеет свой набор номиналов. // Функция должна принимать в качестве аргументов сумму и код валюты.  \n  \n  \nconst currencyNominals = {  \n    rub: [50, 100, 200, 500, 1000, 2000, 5000],  \n    uah: [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000],  \n    eur: [5, 10, 20, 50, 100, 200, 500]  \n};  \n  \nfunction atmWithCurrency(sum, currency) {  \n    const nominals = currencyNominals[currency.toLowerCase()];  \n    if (!nominals) return "Invalid currency";  \n  \n    const minNominal = Math.min(...nominals);  \n    if (sum % minNominal !== 0) {  \n        throw new Error("Невозможно выдать данную сумму");  \n    }  \n  \n    const sorted = [...nominals].sort((a,b) => b - a);  \n    let remaining = sum;  \n    const parts = [];  \n  \n    for (const n of sorted) {  \n        const count = Math.floor(remaining / n);  \n        if (count > 0) {  \n            remaining -= count * n;  \n            parts.push(`${n}x${count}`);  \n        }  \n        if (remaining === 0) break;  \n    }  \n  \n    if (remaining > 0) {  \n        throw new Error("Невозможно выдать данную сумму");  \n    }  \n  \n    return parts.join(", ");  \n}  \n  \nconsole.log(atmWithCurrency(14350, 'eur'));  \n  \n// Ожидаемый вывод: '500x28, 100x3, 50x1'  \n  \nconsole.log(atmWithCurrency(7550, 'rub'));  \n  \n// Ожидаемый вывод: '5000x1, 2000x1, 500x1, 50x1'  \n  \nconsole.log(atmWithCurrency(1000, 'usd'));  \n  \n// Ожидаемый вывод: "Invalid currency"\n\n	js	t	\N	\N	2025-06-29 12:12:00.124	2025-06-29 12:12:00.124	{}	{PortalBilet,Киберлаб,ГосНИИАС,Aladdin}
cmchmqp07002y13sxgd4virc9	cmchmqohb002613sxycod6ivv	["Банкоматы", "Банкомат в трех частях"]	3	5	27	https://codesandbox.io/p/sandbox/bankomat-gotovyy-4nltjr?file=%2Fsrc%2FApp.tsx%3A8%2C39\\n	\N	\N	f	\N	\N	2025-06-29 12:12:00.151	2025-06-29 12:12:00.151	{}	{PortalBilet,Киберлаб,ГосНИИАС,Aladdin}
cmchmqp2e003113sxownmf6zo	cmchmqohb002613sxycod6ivv	[]	execution	3	30		\n  \n/// обеспечить порядок вывода a => b => c  \n  \nfunction foo(callback) {  \n   return new Promise((resolve, reject) => {  \n    setTimeout(function() {  \n       resolve(callback('A'))  \n    }, Math.random() * 100);  \n   })  \n}  \n  \nfunction bar(callback) {  \n    return new Promise((resolve, reject) => {  \n        setTimeout(function() {  \n            resolve(callback('B'))  \n        }, Math.random() * 100);  \n    })  \n}  \n  \nfunction baz(callback) {  \n    return new Promise((resolve, reject) => {  \n        setTimeout(function() {  \n            resolve(callback('C'))  \n        }, Math.random() * 100);  \n    })  \n}  \n  \nconst execution = async () => {  \n    try {  \n        await foo()  \n        await bar()  \n        await baz()  \n    } catch (error) {  \n        console.log(error.message)  \n    }  \n}\n	js	t	\N	\N	2025-06-29 12:12:00.231	2025-06-29 12:12:00.231	{}	{Касперский,Совкомбанк}
cmchmqpxa003913sx0bmvcvlg	cmchmqpsh003213sxcgcp7ko1	[]	7. sumOfNumber	3	6	Постановка задачи:Реализовать функцию, которая принимает целое число и возвращает сумму его цифр. Отрицательные числа должны обрабатываться как положительные. Например, 123 превращается в 6, а -987 в 24.\\n	\n\nfunction sumOfNumber(num) {  \n    return Math.abs(num)  \n        .toString()  \n        .split('')  \n        .reduce((sum, digit) => sum + parseInt(digit, 10), 0);  \n}  \n  \n  \n  \nconsole.log(sumOfNumber(32));       // Output: 5 (3 + 2)  \n  \nconsole.log(sumOfNumber(-123));     // Output: 6 (1 + 2 + 3)  \n  \nconsole.log(sumOfNumber(0));        // Output: 0  \n  \nconsole.log(sumOfNumber(10001));    // Output: 2 (1 + 0 + 0 + 0 + 1)\n	js	t	\N	\N	2025-06-29 12:12:01.342	2025-06-29 12:12:01.342	{}	{it-one}
cmchmqpso003313sxibri3119	cmchmqpsh003213sxcgcp7ko1	[]	1. Факториал	3	0	Постановка задачи:Реализовать функцию для вычисления факториала числа n. Факториал определяется как произведение всех целых чисел от 1 до n, а факториал 0 равен 1. Решение должно быть представлено в трех вариантах:\\nИтеративный способ с использованием цикла.Рекурсивный способ.Использование метода reduce для функционального подхода.\\n	\n// for  \nfunction factorialIterative(n) {  \n    if (n < 0) return null;   \nlet result = 1;  \n  \n    for (let i = 2; i <= n; i++) {  \n        result *= i;  \n    }  \n  \n    return result;  \n}  \n\n\n// recursive  \nfunction factorialRecursive(n) {  \n    if (n < 0) return null;  \n    if (n === 0 || n === 1) return 1;   \nreturn n * factorialRecursive(n - 1);  \n}  \n  \n  \n  \n// reduce  \nfunction factorialReduce(n) {  \n    if (n < 0) return null;   \nif (n === 0 || n === 1) return 1;  \n  \n    return Array.from({ length: n }, (_, i) => i + 1)  \n        .reduce((acc, num) => acc * num, 1);  \n}  \n\nconsole.log(factorialIterative(5)); console.log(factorialIterative(0));  \nconsole.log(factorialIterative(1));  \nconsole.log(factorialIterative(-5));   \n\n  \nconsole.log(factorialRecursive(5));  \nconsole.log(factorialRecursive(0));  \nconsole.log(factorialRecursive(1));  \nconsole.log(factorialRecursive(-5));  \n  \n\n\nconsole.log(factorialReduce(5));  \nconsole.log(factorialReduce(0));  \nconsole.log(factorialReduce(1)); console.log(factorialReduce(-5));\n\n	js	t	\N	\N	2025-06-29 12:12:01.177	2025-06-29 12:12:01.177	{}	{"ARTW (проект МТС)",Авито,Альфабанк}
cmchmqptx003413sxspvn9mv7	cmchmqpsh003213sxcgcp7ko1	[]	2. fibonacci	3	1	Постановка задачи:Реализовать функцию для вычисления n-го числа Фибоначчи. Числа Фибоначчи определяются как последовательность, где каждое число равно сумме двух предыдущих:\\nF(1) = 1, F(2) = 1F(n) = F(n-1) + F(n-2)\\nРешение должно быть представлено в трех вариантах:\\nРекурсивный способ.Итеративный способ с оптимизированным использованием памяти.Рекурсивный способ с мемоизацией для увеличения производительности.\\n	  \nfunction fibonacciRecursive(n) {  \n  \n   if (n <= 2) return 1  \n\n  return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2)  \n}   \nconsole.log(fibonacciRecursive(6)); // 8  \nconsole.log(fibonacciRecursive(10)); // 55  \nconsole.log(fibonacciRecursive(15)); // 610\n	js	t	\N	\N	2025-06-29 12:12:01.221	2025-06-29 12:12:01.221	{}	{BAUM,кокос.group,"ИП Свистунова Екатерина Александровна (Сбер)",Евротехклимат,"Сквад (squad)"}
cmchmqpun003513sxxo10amb3	cmchmqpsh003213sxcgcp7ko1	[]	3. largestPossibleNumber	3	2	Постановка задачи:Дано целое число n. Требуется переставить его цифры так, чтобы получить наибольшее возможное число.\\n	\nfunction largestPossibleNumber(n) {  \n    return +n.toString()  \n        .split('')  \n        .sort((a, b) => b - a)  \n        .join('');  \n} \n  \n  \n  \nconsole.log(largestPossibleNumber(0) === 0);            // true  \n  \nconsole.log(largestPossibleNumber(1) === 1);            // true  \n  \nconsole.log(largestPossibleNumber(111) === 111);        // true  \n  \nconsole.log(largestPossibleNumber(15) === 51);          // true  \n  \nconsole.log(largestPossibleNumber(1021) === 2110);      // true  \n  \nconsole.log(largestPossibleNumber(123456789) === 987654321); // true\n	js	t	\N	\N	2025-06-29 12:12:01.248	2025-06-29 12:12:01.248	{}	{Домклик}
cmchmqpvc003613sxqmwa53mv	cmchmqpsh003213sxcgcp7ko1	[]	4. reverseNumber	3	3	Постановка задачи:Реализовать функцию, которая принимает целое число и возвращает его развернутый вариант, сохраняя знак (+ или -). Например, 123 превращается в 321, а -456 в -654.\\n	\nconst reverseNumber = (number) => {\n    const reversed = +Math.abs(number).toString().split('').reverse().join('');\n    return number < 0 ? -reversed : reversed;\n};\n\n  \n  \n  \nconsole.log(reverseNumber(24));         // Output: 42  \n  \nconsole.log(reverseNumber(-123));       // Output: -321  \n  \nconsole.log(reverseNumber(120));        // Output: 21  \n  \nconsole.log(reverseNumber(0));          // Output: 0\n	js	t	\N	\N	2025-06-29 12:12:01.273	2025-06-29 12:12:01.273	{}	{Авито}
cmchmqpvy003713sxgzwy71rr	cmchmqpsh003213sxcgcp7ko1	[]	5. sumRangeFor	3	4	Постановка задачи:Реализовать функцию для нахождения суммы всех чисел в заданном диапазоне [start, end]. Решение должно быть представлено в трех вариантах:\\nИтеративный способ с использованием цикла.Рекурсивный способ.Вычисление по формуле суммы арифметической прогрессии.\\n	\nfunction sumRangeFor(start, end) {  \n    let sum = 0;  \n    for (let i = start; i <= end; i++) {  \n        sum += i;  \n    }  \n    return sum;  \n}  \n  \n  \n  \nfunction sumRangeRecursive(start, end) {  \n    if (start > end) return 0;  \n    return start + sumRangeRecursive(start + 1, end);  \n}  \n  \n  \n  \nfunction sumRangeFormula(start, end) {  \n    const n = end - start + 1;  \n    return (n * (start + end)) / 2;  \n}  \n  \n  \n  \nconsole.log(sumRangeFor(1, 5));  \nconsole.log(sumRangeFor(0, 10));  \nconsole.log(sumRangeFor(-3, 3));  \n  \n  \nconsole.log(sumRangeFormula(1, 5));  \nconsole.log(sumRangeFormula(0, 10));  \nconsole.log(sumRangeFormula(-3, 3));  \n  \nconsole.log(sumRangeRecursive(1, 5));  \nconsole.log(sumRangeRecursive(0, 10));  \nconsole.log(sumRangeRecursive(-3, 3));\n\n	js	t	\N	\N	2025-06-29 12:12:01.294	2025-06-29 12:12:01.294	{}	{Газпромбанк,DatsTeam}
cmchmqpwk003813sx4ru5so04	cmchmqpsh003213sxcgcp7ko1	[]	6. fizzBuzz	3	5	Постановка задачи:Реализовать функцию, которая принимает массив чисел и возвращает новый массив, где:\\nЧисла, кратные 3, заменяются на "Fizz".Числа, кратные 5, заменяются на "Buzz".Числа, кратные 15, заменяются на "FizzBuzz".Остальные числа остаются без изменений.\\n	\nfunction fizzBuzz(numbers) {  \n    return numbers.map(num => {  \n        if (num % 15 === 0) return "FizzBuzz";  \n        if (num % 3 === 0) return "Fizz";  \n        if (num % 5 === 0) return "Buzz";  \n        return num;  \n    });  \n}  \n  \n  \nconsole.log(fizzBuzz([1, 2, 3, 4, 5, 15]));  \n  \n// Output: [1, 2, "Fizz", 4, "Buzz", "FizzBuzz"]  \n  \n  \nconsole.log(fizzBuzz([3, 5, 6, 10, 15, 30]));  \n  \n// Output: ["Fizz", "Buzz", "Fizz", "Buzz", "FizzBuzz", "FizzBuzz"]\n	js	t	\N	\N	2025-06-29 12:12:01.316	2025-06-29 12:12:01.316	{}	{"Сбер для экспертов",Realweb}
cmchmqqow003d13sxavgz9bgi	cmchmqqo2003b13sxajtzyb2z	[]	2. getAllValues	3	1	Сумма всех значений в массиве древовидных структур\nДан массив объектов, представляющих древовидные структуры, в которых каждый узел содержит числовое значение и массив потомков. Реализуйте функцию, которая вычисляет сумму всех значений во всех деревьях.\\n	\nconst values = [  \n    {  \n        value: 2,  \n        children: [  \n            {  \n                value: 5,  \n                children: [  \n                    {  \n                        value: 8,  \n                        children: [],  \n                    },  \n                ],  \n            },  \n        ],  \n    },  \n    {  \n        value: 5,  \n        children: [],  \n    },  \n    {  \n        value: 10,  \n        children: [  \n            {  \n                value: 90,  \n                children: [],  \n            },  \n        ],  \n    },  \n]  \n  \nfunction getAllValues(nodes) {  \n    return nodes.reduce((total, node) => {  \n        return total + node.value + (node.children ? getAllValues(node.children) : 0);  \n    }, 0);  \n}\n  \nconsole.log(getAllValues(values)); // Вывод: 120\n	js	t	\N	\N	2025-06-29 12:12:02.337	2025-06-29 12:12:02.337	{}	{"Какая-то криптогалерея",Тинькофф,РСХБ-Интех,Ivi,"Расчетные решения",Сбертех,"Сбер для экспертов",KTS,"Premium IT Solution",MOEX,Profsoft,eesee,ДОМ.РФ}
cmchmqqpo003e13sx0i4025kd	cmchmqqo2003b13sxajtzyb2z	[]	3. treeValueSum	3	2	Сумма значений в бинарном дереве\nДано бинарное дерево, где каждый узел содержит числовое значение и ссылки на левый и правый дочерние узлы. Напишите функцию, которая вычисляет сумму всех значений в дереве.\\n	\nconst tree = {  \n    left: {  \n        left: {  \n            left: {  \n                right: {  \n                    left: { value: 7 },  \n                    right: { value: 14 },  \n                    value: 66,  \n                },  \n                value: 23,  \n            },  \n            value: 90,  \n        },  \n        right: { value: 67 },  \n        value: 34,  \n    },  \n    right: { value: 11 },  \n    value: 16,  \n};  \n  \nfunction treeValueSum(tree) {  \n    let total = tree.value;  \n  \n    if (tree.left) {  \n        total += treeValueSum(tree.left);  \n    }  \n  \n    if (tree.right) {  \n        total += treeValueSum(tree.right);  \n    }  \n  \n    return total;  \n}  \n  \nconsole.log(treeValueSum(tree)); // Вывод: 328  \n  \n  \n	js	t	\N	\N	2025-06-29 12:12:02.364	2025-06-29 12:12:02.364	{}	{Газпромбанк,DatsTeam}
cmchmqqqc003f13sxr03ocpcv	cmchmqqo2003b13sxajtzyb2z	[]	4. collectValuesDFS4	3	3	Обход дерева в глубину (DFS) итеративно\nДано древовидное представление данных, где каждый узел содержит значение и массив потомков. Реализуйте итеративный алгоритм обхода дерева в глубину (DFS), возвращающий массив значений узлов в порядке обхода.\\n	\nconst tree = {  \n    value: 1,  \n    children: [  \n        { value: 2, children: [{ value: 3 }] },  \n        { value: 4, children: [{ value: 5 }, { value: 6 }] }  \n    ],  \n};  \n  \n  \nfunction collectValuesIterative(root) {  \n    const values = [];  \n    const stack = [root];  \n  \n    while (stack.length > 0) {  \n        const node = stack.pop();  \n        values.push(node.value);  \n  \n        if (node.children) {  \n            for (let i = node.children.length - 1; i >= 0; i--) {  \n                stack.push(node.children[i]);  \n            }  \n        }    }  \n    return values;  \n}  \n  \nconsole.log(collectValuesIterative(tree)); // Вывод: [1, 2, 3, 4, 5, 6]\n\n	js	t	\N	\N	2025-06-29 12:12:02.389	2025-06-29 12:12:02.389	{}	{"Казанская гэмбл контора",Dogma,"Сбертех (platform V UI Kits)",it_one,"РСХБ интех"}
cmchmqqr0003g13sxdg5qarir	cmchmqqo2003b13sxajtzyb2z	[]	5. collectValuesBFS	3	4	Обход дерева в ширину (BFS)\nДано дерево, где каждый узел содержит числовое значение и массив потомков. Реализуйте функцию, которая выполняет обход дерева в ширину (BFS) и возвращает массив значений узлов в порядке обхода.\\n	\n  \nconst a = {  \n    value: 1,  \n    children: [  \n        {  \n            value: 2,  \n            children: [{ value: 4 }, { value: 5 }],  \n        },  \n        {  \n            value: 3,  \n            children: [{ value: 6 }, { value: 7 }],  \n        },  \n    ],  \n};  \n  \nfunction collectValuesBFS(root) {  \n    const values = [];  \n    const queue = [root];  \n  \n    while (queue.length > 0) {  \n        const node = queue.shift();  \n        values.push(node.value);  \n        queue.push(...(node.children ?? []));  \n    }  \n    return values;  \n}  \n  \n  \nconsole.log(collectValuesBFS(a)); // Вывод: [1, 2, 3, 4, 5, 6, 7]\n	js	t	\N	\N	2025-06-29 12:12:02.412	2025-06-29 12:12:02.412	{}	{Сбер,Селекти,CSSSR}
cmchmqqv6003m13sxrwo3ik2e	cmchmqqo2003b13sxajtzyb2z	[]	11. transform	3	10	Преобразование массива объектов в объект\nДан массив объектов с полями name и value. Реализуйте функцию, которая преобразует этот массив в объект, используя name в качестве ключа и value в качестве значения.\\n	\nfunction transform(arr) {  \n    return arr.reduce((acc, item) => {  \n        acc[item.name] = item.value;  \n        return acc;  \n    }, {});  \n}  \n  \n// Тестовые данные  \nconst arr = [  \n    { name: 'name', value: 'Анатолий' },  \n    { name: 'age', value: '40' },  \n];  \n  \nconsole.log(transform(arr)); // { name: 'Анатолий', age: '40' }\n	js	t	\N	\N	2025-06-29 12:12:02.562	2025-06-29 12:12:02.562	{}	{Click2Money}
cmchmqtnv004w13sxvi51j4kf	cmchmqtbe004e13sxfcavy82w	[]	18. compress 3	3	17	Сжатие строки 3\nНапишите функцию, которая сжимает строку, ограничивая количество повторений одного символа девятью (9a).\\n	\nfunction compress(word) {  \n    let comp = '';  \n    let i = 0;  \n  \n    while (i < word.length) {  \n        let count = 1;  \n        let char = word[i];  \n        while (  \n            count < 9 &&  \n            i + count < word.length &&  \n            word[i + count] === char  \n            ) {  \n            count++;  \n        }  \n        comp += count.toString() + char;  \n        i += count;  \n    }  \n  \n    return comp;  \n}  \n  \n  \nconsole.log(compress('abcde'));              // Output: '1a1b1c1d1e'  \nconsole.log(compress('aaaaaaaaaaaaaabb'));   // Output: '9a5a2b'  \nconsole.log(compress('aaaaaaaaaa'));         // Output: '9a1a'\n	js	t	\N	\N	2025-06-29 12:12:06.188	2025-06-29 12:12:06.188	{https://leetcode.com/problems/string-compression-iii/}	{Yandex.pay,Яндекс,СберТех,IBS,Сравни,ЮТЭИР,GoInvest,Сбер,Yandex.multitrack,МТС}
cmchmqs7p003x13sx8cgdx3ho	cmchmqs4f003s13sx4aqxrcfz	[]	5. fetchData	3	4	Постановка задачи:\\nРеализуйте асинхронную функцию fetchData, которая выполняет последовательные запросы на получение JSON-данных и обрабатывает ошибки следующим образом:\\nСначала функция вызывает getJson('/json/1') и ожидает результат.Если в полученном объекте json1 отсутствует свойство key, функция должна сгенерировать ошибку с сообщением "No key".Если свойство key присутствует, функция выполняет следующий запрос с помощью getJson('/json/2') и возвращает значение свойства key2 из результата.Весь процесс должен быть обёрнут в блок try...catch, чтобы:При возникновении ошибки вывести её в консоль.При необходимости повторно выбросить ошибку для дальнейшей обработки на уровне вызова функции.\\nПример использования функции демонстрирует вызов fetchData(), последующее получение результата или обработку ошибки через методы .then и .catch.\\n	async function fetchData() {  \n    try {  \n        const json1 = await getJson('/json/1');  \n        if (!json1.key) {  \n            throw new Error('No key');  \n        }  \n        const json2 = await getJson('/json/2');  \n        return json2.key2;  \n    } catch (error) {  \n        console.error(error);  \n        throw error; // Re-throw the error if necessary  \n    }  \n}  \n  \nfetchData()  \n    .then(result => {  \n        console.log(result);  \n    })  \n    .catch(error => {  \n        // Additional error handling if needed  \n    });	js	t	\N	\N	2025-06-29 12:12:04.31	2025-06-29 12:12:04.31	{}	{Озон}
cmchmqs8e003y13sxnl8p7hth	cmchmqs4f003s13sx4aqxrcfz	[]	6. promisify	3	5	https://bigfrontend.dev/problem/promisify\\nhttps://leetcode.ca/2023-10-30-2776-Convert-Callback-Based-Function-to-Promise-Based-Function/\\nПостановка задачи:\\nРеализуйте функцию promisify, которая принимает на вход функцию, использующую стандартный Node.js-стиль коллбэков (где последний аргумент — функция обратного вызова с параметрами error и data), и возвращает новую функцию, которая возвращает промис.\\nТребования:\\nФункция promisify должна принимать исходную функцию func и возвращать функцию, которая:При вызове передаёт все полученные аргументы в исходную функцию.Добавляет в конец вызова коллбэк, который обрабатывает результат:Если ошибка присутствует (параметр error не равен null или undefined), промис должен быть отклонён с этой ошибкой.Если ошибки нет, промис должен быть разрешён с данными, полученными из коллбэка.Продемонстрируйте работу promisify, применив её к функции delayedCallback, которая с задержкой вызывает коллбэк с обработанными данными или ошибкой (если данные не переданы).Протестируйте промисифицированную функцию, вызвав её с корректными данными и, при необходимости, с ошибочными (например, когда данные не переданы), чтобы убедиться, что промис корректно разрешается или отклоняется.\\n	function promisify(func) {  \n    return function (...args) {  \n        return new Promise((resolve, reject) => {  \n  \n            console.log("Calling promisified function...");  \n  \n            // Вызываем исходную функцию с коллбэком    \nfunc.call(this, ...args, (error, data) => {  \n                if (error) {  \n                    console.log("Error occurred:", error);  \n                    reject(error);  \n                } else {  \n                    resolve(data);  \n                }  \n            });  \n        });  \n    }  \n}  \n  \n  \n  \n// Оригинальная функция с коллбэком, которая выполняется с задержкой  \nfunction delayedCallback(data, delay, callback) {  \n    setTimeout(() => {  \n        if (typeof data === 'undefined') {  \n            callback("No data provided", null);  \n        } else {  \n            callback(null, `Processed: ${data}`);  \n        }  \n    }, delay);  \n}  \n  \n  \n// Промисификация функции с использованием promisify  \nconst delayedPromise = promisify(delayedCallback);  \n  \n  \n// Использование функции, возвращающей промис  \n  \ndelayedPromise("Hello, world!", 1000)  \n    .then(result => console.log(result))  // Ожидаемый вывод: "Processed: Hello, world!"  \n    .catch(error => console.error(error)); // Если ошибка, например, data === undefined	js	t	\N	\N	2025-06-29 12:12:04.335	2025-06-29 12:12:04.335	{}	{"Яндекс документы"}
cmchmqs9m003z13sx9mshf60l	cmchmqs4f003s13sx4aqxrcfz	[]	7. fetchDataWithDelay	3	6	Постановка задачи:\\nРеализуйте функцию fetchDataWithDelay, которая выполняет следующие шаги:\\nВыполняет HTTP-запрос по заданному URL с помощью fetch.Преобразует ответ в формат JSON.Задерживает возврат полученных данных на 1 секунду, прежде чем промис будет разрешён.\\nРешите задачу двумя способами:\\nС использованием цепочки промисов (.then):Создайте функцию, в которой после получения и преобразования данных создаётся новый промис с задержкой в 1 секунду.С использованием async/await:Напишите асинхронную функцию, которая после получения данных через fetch и их преобразования в JSON ожидает 1 секунду с помощью setTimeout, обёрнутого в промис, прежде чем вернуть данные.\\nОба решения должны корректно обрабатывать возможные ошибки через .catch или блок try...catch.\\n	function fetchDataWithDelay(url) {  \n  \n    return fetch(url)  \n        .then(response => response.json())  \n        .then(data => {  \n            return new Promise(resolve => setTimeout(() => resolve(data), 1000));  \n  \n        });  \n}  \n  \n// Пример использования функции  \nfetchDataWithDelay('https://api.example.com/data')  \n    .then(data => console.log(data))  \n    .catch(error => console.error('Ошибка:', error));	js	t	\N	\N	2025-06-29 12:12:04.379	2025-06-29 12:12:04.379	{}	{Unisender}
cmchmqsad004013sx9jtrfc69	cmchmqs4f003s13sx4aqxrcfz	[]	8. timeLimit	3	7	Постановка задачи:\\nРеализуйте функцию timeLimit, которая принимает асинхронную функцию fn и временной лимит t (в миллисекундах). Функция должна возвращать новую обёртку, при вызове которой:\\nЕсли fn завершается быстрее, чем за t миллисекунд, возвращается её результат.Если выполнение fn занимает больше времени, чем указано в лимите, возвращается ошибка с сообщением "Time Limit Exceeded".\\nПодсказка: Для решения используйте Promise.race, чтобы "соревновались" выполнение fn(...args) и промис с задержкой, который отклоняется через t миллисекунд.\\nВ примере кода показан вызов limitedFunction(5), где асинхронная функция ожидает 100 мс, а временной лимит установлен на 50 мс, что приводит к отклонению промиса с ошибкой.\\n	const timeLimit = function(fn, t) {  \n    return async function(...args) {  \n        const timeoutPromise = new Promise((_, reject) => {  \n            setTimeout(() => reject("Time Limit Exceeded"), t);  \n        });  \n  \n        return Promise.race([fn(...args), timeoutPromise]);  \n    };  \n};  \n  \n  \nconst limitedFunction = timeLimit(async (n) => {  \n    await new Promise(res => setTimeout(res, 100));  \n    return n * n;  \n}, 50);  \n  \n  \n  \nlimitedFunction(5)  \n    .then(console.log)   \n\t.catch(console.error);	js	t	\N	\N	2025-06-29 12:12:04.406	2025-06-29 12:12:04.406	{https://leetcode.com/problems/promise-time-limit/}	{СберКорус}
cmchmqton004x13sxeamb1fyo	cmchmqtbe004e13sxfcavy82w	[]	19. compress 4	3	18	Сжатие строки 4\nРеализуйте алгоритм сжатия строки в массиве символов без использования дополнительной памяти.\\n	\nfunction compress(chars) {\n  let read = 0;\n  let write = 0;\n\n  while (read < chars.length) {\n    let currentChar = chars[read];\n    let count = 0;\n\n    while (read < chars.length && chars[read] === currentChar) {\n      read++;\n      count++;\n    }\n\n    chars[write++] = currentChar;\n\n    if (count > 1) {\n      for (let c of count.toString()) {\n        chars[write++] = c;\n      }\n    }\n  }\n\n  return write;\n}\n\n	js	t	\N	\N	2025-06-29 12:12:06.215	2025-06-29 12:12:06.215	{https://leetcode.com/problems/string-compression/}	{Yandex.pay,Яндекс,СберТех,IBS,Сравни,ЮТЭИР,GoInvest,Сбер,Yandex.multitrack,МТС}
cmchmqsb3004113sxiooerqiw	cmchmqs4f003s13sx4aqxrcfz	[]	9. withTimeout	3	8	Постановка задачи:\\nРеализуйте функцию, которая обеспечивает ограничение по времени для выполнения промиса. Если переданный промис не завершается в заданный интервал, функция должна отклонять результат с ошибкой "Promise timed out". Необходимо создать два варианта решения:\\nВариант 1 (withTimeout1):Используйте setTimeout для установки таймера и clearTimeout для его очистки, если промис завершается до истечения времени. Функция должна возвращать новый промис, который:Разрешается, если исходный промис завершается успешно до истечения таймаута.Отклоняется с ошибкой, если исходный промис отклоняется или если время ожидания превышено.Вариант 2 (withTimeout2):Реализуйте тот же функционал, но с использованием Promise.race. Создайте промис-таймер, который отклоняется через заданное время, и запустите его вместе с исходным промисом. Функция должна вернуть результат того промиса, который завершится первым.\\nВ примере показано использование обеих функций с примерным промисом, который разрешается через 3000 мс, а таймаут установлен на 2000 мс, что приводит к отклонению с ошибкой "Promise timed out".\\n	// Вариант 1: Использование setTimeout и clearTimeout для явного контроля таймера  \n\nfunction withTimeout1(promise, timeout) {  \n    return new Promise((resolve, reject) => {  \n                  \nconst timer = setTimeout(() => {  \n            reject(new Error("Promise timed out"));  \n        }, timeout);  \n  \n        promise  \n            .then(value => {  \n                clearTimeout(timer); // Очищаем таймер, если промис разрешается  \n                resolve(value);  \n            })  \n            .catch(err => {  \n                clearTimeout(timer); // Очищаем таймер, если промис отклоняется  \n                reject(err);  \n            });  \n                  \n});  \n}  \n  \n  \n// Вариант 2: Использование Promise.race  \nfunction withTimeout2(promise, timeout) {  \n    const timeoutPromise = new Promise((_, reject) =>  \n        setTimeout(() => reject(new Error("Promise timed out")), timeout)  \n    );  \n  \n    return Promise.race([promise, timeoutPromise]); // Возвращает результат первого завершившегося промиса  \n  \n}  \n  \n  \n  \n// Пример использования для вариантов 1, 2  \nconst examplePromise = new Promise(resolve => setTimeout(() => resolve("Success!"), 3000));  \n  \nwithTimeout1(examplePromise, 2000).then(console.log).catch(console.error); // "Promise timed out"  \nwithTimeout2(examplePromise, 2000).then(console.log).catch(console.error); // "Promise timed out"	js	t	\N	\N	2025-06-29 12:12:04.431	2025-06-29 12:12:04.431	{}	{"Лига цифровой экономики"}
cmchmqsci004313sxsdh63ur9	cmchmqs4f003s13sx4aqxrcfz	[]	11. Кастомный finally	3	10	Постановка задачи:\\nРеализуйте функцию myFinally, которая принимает два аргумента:\\npromise — исходный промис.onFinally — функцию (которая может быть асинхронной), выполняемую в блоке "finally".\\nФункция myFinally должна вести себя аналогично методу .finally() для промисов:\\nНезависимо от того, разрешился ли исходный промис или был отклонён, сначала выполняется функция onFinally.Если onFinally завершается успешно, возвращается результат исходного промиса.Если исходный промис был отклонён, то результатом будет отклонение с первоначальной ошибкой.Если функция onFinally генерирует ошибку, то она должна быть обработана соответствующим образом (отклонением промиса).\\nТакже продемонстрируйте работу myFinally с помощью:\\nОбычного вызова с then/catch.Асинхронной функции myFinallyAsync, где функция onFinally сама является асинхронной (например, с задержкой), для очистки или других действий.\\nПример использования:\\nЕсли промис разрешается, выводится сообщение об успешном завершении очистки и результат промиса.Если промис отклоняется, сначала выполняется функция очистки, а затем ошибка передаётся дальше.\\n	// промис для тестирования  \n  \nconst promise = Promise.resolve("Result");  \n  \n  \n// основная функция  \nfunction myFinally(promise, onFinally) {  \n    const runFinally = async () => {  \n        try {  \n            return await Promise.resolve(onFinally());  \n        } catch (err) {  \n            throw err;  \n        }  \n    };  \n  \n    return promise.then(  \n        value => runFinally().then(() => value),  \n        reason => runFinally().then(() => { throw reason; })  \n    );  \n}\n  \n  \n// then usage  \nmyFinally(promise, () => {  \n    console.log("Cleanup completed.");  \n}).then(result => console.log("Resolved with:", result))  \n    .catch(error => console.error("Rejected with:", error));  \n  \n  \nasync function myFinallyAsync(promise) {  \n    try {  \n        const result = await myFinally(promise, async () => {  \n            console.log("Starting async cleanup...");  \n            await new Promise(resolve => setTimeout(resolve, 1000)); // Асинхронная очистка  \n            console.log("Async cleanup completed.");  \n        });  \n        console.log("Resolved with:", result);  \n    } catch (error) {  \n        console.error("Rejected with:", error);  \n    }  \n}  \n  \nmyFinallyAsync(promise);  \nmyFinallyAsync(Promise.reject("Error occurred!")); // Пример с отклонённым промисом	js	t	\N	\N	2025-06-29 12:12:04.483	2025-06-29 12:12:04.483	{}	{"Какая-то криптогалерея",Тинькофф,РСХБ-Интех,Ivi,"Расчетные решения",Сбертех,"Сбер для экспертов",KTS,"Premium IT Solution",MOEX,Profsoft,eesee,ДОМ.РФ}
cmchmqsd6004413sxr2vo19fn	cmchmqs4f003s13sx4aqxrcfz	[]	12. Кастомный all	3	11	Постановка задачи:\\nРеализуйте функцию all, которая ведёт себя аналогично встроенному Promise.all. Функция принимает массив промисов (или значений, которые можно обернуть с помощью Promise.resolve()) и возвращает новый промис, который:\\nРазрешается с массивом результатов, если все переданные промисы успешно завершаются. Результаты должны располагаться в том же порядке, что и исходный массив.Отклоняется немедленно, если хотя бы один из переданных промисов отклоняется, возвращая ошибку первого встреченного отклонения.Если массив промисов пустой, функция должна немедленно разрешиться с пустым массивом.\\nДля каждого элемента массива используйте Promise.resolve(), чтобы обеспечить корректную обработку как промисов, так и обычных значений.\\n	const p1 = Promise.resolve(1);\nconst p2 = new Promise((resolve) => setTimeout(resolve, 100, 2));\nconst p3 = Promise.resolve(3);\n\nall([p1, p2, p3])\n    .then(results => console.log("Resolved with:", results)) // Ожидаемый вывод: [1, 2, 3]\n    .catch(error => console.error("Rejected with:", error));\n	js	f	\N	\N	2025-06-29 12:12:04.507	2025-06-29 12:12:04.507	{}	{"Какая-то криптогалерея",Тинькофф,РСХБ-Интех,Ivi,"Расчетные решения",Сбертех,"Сбер для экспертов",KTS,"Premium IT Solution",MOEX,Profsoft,eesee,ДОМ.РФ}
cmchmqsdv004513sx31830wtv	cmchmqs4f003s13sx4aqxrcfz	[]	13. Кастомный allSettled	3	12	Постановка задачи:\\nРеализуйте функцию allSettled, которая принимает массив промисов (а также значений, которые можно обрабатывать как уже разрешённые промисы) и возвращает новый промис. Этот промис должен разрешаться, когда все переданные промисы завершатся, независимо от того, были ли они разрешены или отклонены.\\nТребования:\\nЕсли переданный массив пуст, функция должна немедленно вернуть промис, разрешённый пустым массивом.Для каждого элемента массива создайте обёртку с помощью Promise.resolve(), чтобы гарантировать корректную обработку даже для не-промисов.Для каждого элемента:Если промис разрешается, сохранить в результирующем массиве объект вида { status: 'fulfilled', value: <результат> }.Если промис отклоняется, сохранить объект вида { status: 'rejected', reason: <причина отклонения> }.Результирующий массив должен иметь тот же порядок, что и исходный.После завершения всех операций результирующий промис должен разрешиться с массивом результатов.\\n	const p1 = Promise.resolve(1);\nconst p2 = Promise.reject("Error in p2");\nconst p3 = 3; // Не-промис, будет обработан как resolved\nconst p4 = new Promise(resolve => setTimeout(() => resolve(4), 100));\n\nallSettled([p1, p2, p3, p4])\n    .then(results => console.log("Results:", results))\n    .catch(error => console.error("Error:", error));	js	f	\N	\N	2025-06-29 12:12:04.531	2025-06-29 12:12:04.531	{}	{"Какая-то криптогалерея",Тинькофф,РСХБ-Интех,Ivi,"Расчетные решения",Сбертех,"Сбер для экспертов",KTS,"Premium IT Solution",MOEX,Profsoft,eesee,ДОМ.РФ}
cmchmqsfe004713sxov5j5seh	cmchmqs4f003s13sx4aqxrcfz	[]	15. withRetry	3	14	Постановка задачи:\\nРеализуйте асинхронную функцию withRetry, которая выполняет HTTP-запрос с повторными попытками в случае неудачи. Функция должна принимать следующие параметры:\\nurl — адрес запроса.options — объект с дополнительными параметрами для запроса (по умолчанию пустой объект).maxAttempts — максимальное количество попыток выполнения запроса (по умолчанию 3).\\nТребования к реализации:\\nФункция должна пытаться выполнить запрос с помощью fetch до тех пор, пока не получит успешный ответ или не исчерпает заданное число попыток.Если ответ от fetch не является успешным (свойство response.ok равно false), функция должна сгенерировать ошибку с сообщением, содержащим HTTP-статус.При возникновении ошибки (в том числе в случае неуспешного ответа) функция должна увеличить счётчик попыток. Если количество попыток достигнет maxAttempts, функция должна выбросить последнюю ошибку.Между попытками можно выводить в консоль сообщение о выполненной попытке (например, "попытки").\\nВ данном примере функция пытается выполнить запрос к указанному URL. Если запрос не проходит успешно в течение заданного количества попыток, возвращается ошибка с соответствующим сообщением.\\n	withRetry("https://api.example.com/fake-endpoint")\n    .then(response => response.json())\n    .then(data => console.log("Полученные данные:", data))\n    .catch(error => console.error("Ошибка после повторных попыток:", error.message));	js	f	\N	\N	2025-06-29 12:12:04.586	2025-06-29 12:12:04.586	{}	{Авито,Альфа,ВТБ,Газпромбанк,Озон,"Озон Финтех",Сбер,СберДевайся,Сбертех,"Сбер Пульс",Иннотех,Яндекс,it-one,DatsTeam}
cmchmqsg1004813sxzyd032wn	cmchmqs4f003s13sx4aqxrcfz	[]	16. parallel	3	15	Постановка задачи:\\nРеализуйте функцию parallel, которая принимает два параметра:\\nfuncArray — массив функций, каждая из которых ожидает коллбэк и асинхронно возвращает некоторый результат через этот коллбэк.doneAll — функция-обработчик, которая вызывается после завершения всех функций из funcArray и получает массив результатов.\\nТребования:\\nВсе функции из funcArray должны выполняться параллельно.Каждый результат должен сохраняться в массиве results на той же позиции, что и функция в исходном массиве.Когда все функции завершат выполнение, вызывается doneAll, которому передается массив результатов.Пример демонстрирует, что результаты собираются в массив и выводятся в консоль после завершения всех асинхронных операций.\\nВ этом примере функции a и b выполняются параллельно, а после их завершения массив с результатами передается в doneAll.\\n	const a = done => {\n    setTimeout(() => {\n        done('result a');\n    }, 300);\n};\n\nconst b = done => {\n    setTimeout(() => {\n        done('result b');\n    }, 200);\n};\n\nparallel([a, b], results => {\n    console.log(results); // ['result a', 'result b']\n});	js	f	\N	\N	2025-06-29 12:12:04.61	2025-06-29 12:12:04.61	{}	{Поле.рф,Озон}
cmchmqsgr004913sx6jw0m23m	cmchmqs4f003s13sx4aqxrcfz	[]	17. fetchDataWithRetry	3	16	Постановка задачи:\\nРеализуйте асинхронную функцию fetchDataWithRetry, которая выполняет HTTP-запрос с повторными попытками в случае ошибки. Функция должна принимать следующие параметры:\\nurl — адрес запроса.maxRetries — максимальное количество повторных попыток (по умолчанию 5).initialDelay — начальная задержка перед первой повторной попыткой (по умолчанию 1000 мс).\\nЛогика работы функции:\\nПопытаться выполнить запрос по указанному URL с помощью fetch.Если ответ не успешен (проверка response.ok), сгенерировать ошибку с информацией о HTTP-статусе.Если запрос завершается успешно, вернуть распарсенный JSON-ответ.При возникновении ошибки (например, сетевой сбой или HTTP-ошибка):Если количество попыток достигло maxRetries, выбросить ошибку с сообщением о том, что URL недоступен даже после максимального числа попыток.Если попыток ещё осталось, вывести в консоль сообщение с номером попытки и причиной ошибки, подождать заданное время (задержка, которая экспоненциально увеличивается после каждой попытки) и повторить запрос.\\nВ этом примере функция пытается выполнить запрос к API, и, если запрос не удаётся, повторяет его с увеличением задержки до тех пор, пока не будет достигнуто максимальное число попыток.\\n	fetchDataWithRetry('https://api.example.com/data')\n    .then(data => {\n        console.log('Received data:', data);\n    })\n    .catch(error => {\n        console.error('Error:', error.message);\n    });\n	js	f	\N	\N	2025-06-29 12:12:04.635	2025-06-29 12:12:04.635	{}	{Озон}
cmchmqsip004b13sx6cxyzsfw	cmchmqs4f003s13sx4aqxrcfz	[]	19. parallelLimit	3	18	Постановка задачи:\\nРеализуйте функцию parallelLimit, которая осуществляет параллельное выполнение HTTP-запросов по заданным URL с ограничением на максимальное число одновременно выполняемых запросов. Функция должна:\\nПринимать следующие параметры:urls — массив URL для выполнения запросов.limit — максимальное количество одновременных запросов.callback — функция, которая вызывается после завершения всех запросов и получает массив результатов.Выполнять запросы параллельно, но не превышая указанное ограничение limit по числу одновременно активных запросов.Сохранять результаты запросов в массиве results в том же порядке, что и исходный массив urls.Реализовать кэширование: если один и тот же URL встречается несколько раз, запрос к нему выполняется только один раз, а результат повторно используется для всех вхождений.При завершении всех запросов (вне зависимости от успеха или ошибки) вызвать callback, передав в неё массив results.\\nВ этом примере функция одновременно выполняет не более 2 запросов. Поскольку URL повторяются, кэширование гарантирует, что второй запрос к тому же URL не будет выполняться повторно, а результат будет взят из кэша. После завершения всех запросов массив результатов выводится через console.log.\\n	parallelLimit(["https://example.com", "https://example.com"], 2, console.log);	js	f	\N	\N	2025-06-29 12:12:04.705	2025-06-29 12:12:04.705	{}	{"Какая-то криптогалерея",Тинькофф,РСХБ-Интех,Ivi,"Расчетные решения",Сбертех,"Сбер для экспертов",KTS,"Premium IT Solution",MOEX,Profsoft,eesee,ДОМ.РФ}
cmchmqsja004c13sxt9cn0qlp	cmchmqs4f003s13sx4aqxrcfz	[]	20. parallelRequest	3	19	Постановка задачи:\\nРеализуйте функцию parallelRequest, которая принимает массив URL, ограничение на число одновременных запросов и коллбэк. Функция должна выполнять HTTP-запросы по указанным URL параллельно, но не более чем limit запросов одновременно, а затем возвращать результаты в виде массива в том же порядке, что и исходный список URL.\\nТребования:\\nПараметры функции:urls: массив URL, по которым нужно выполнить запросы.limit (по умолчанию 5): максимальное количество одновременно выполняемых запросов.callback: функция, которая будет вызвана после завершения всех запросов с массивом результатов.Логика выполнения:Функция должна запускать запросы параллельно, ограничивая число одновременно выполняемых запросов до значения limit.Каждый запрос выполняется с помощью fetch, результат которого преобразуется в текст.Результаты запросов сохраняются в массив results в том же порядке, что и URL в исходном массиве.При возникновении ошибки соответствующий элемент массива results должен содержать ошибку.После завершения всех запросов вызывается функция callback, которой передается массив results.\\nВ этом примере функция parallelRequest выполнит запросы по указанным URL, одновременно не превышая 5 одновременных запросов, и после завершения всех запросов выведет массив результатов через console.log.\\n	parallelRequest(["https://example.com/1", "https://example.com/2"], 5, (results) => {\n    console.log(results); // Массив с результатами запросов\n});	js	f	\N	\N	2025-06-29 12:12:04.726	2025-06-29 12:12:04.726	{}	{"Какая-то криптогалерея",Тинькофф,РСХБ-Интех,Ivi,"Расчетные решения",Сбертех,"Сбер для экспертов",KTS,"Premium IT Solution",MOEX,Profsoft,eesee,ДОМ.РФ}
cmchmqtmg004u13sxncjskhh6	cmchmqtbe004e13sxfcavy82w	[]	16. fuzzysearch	3	15	Поиск подстроки в строке (Fuzzy Search)\nНапишите функцию, которая проверяет, содержатся ли все символы одной строки в другой в том же порядке.\\n	\nfunction fuzzysearch(needle, stack) {  \n    let i = 0;  \n    for (let char of stack) {  \n        if (char === needle[i]) {  \n            i++;  \n        }  \n        if (i === needle.length) {  \n            return true;  \n        }  \n    }    return false;  \n}  \n  \n  \n  \nfuzzysearch('car', 'cartwheel')      // true  \n  \nfuzzysearch('cwhl', 'cartwheel')     // true  \n  \nfuzzysearch('we', 'cartwheel')       // true  \n  \nfuzzysearch('cartwheel', 'cartwheel') // true  \n  \nfuzzysearch('cwheeel', 'cartwheel')  // false  \n  \nfuzzysearch('lw', 'cartwheel')       // false\n	js	t	\N	\N	2025-06-29 12:12:06.136	2025-06-29 12:12:06.136	{}	{"Яндекс Го"}
cmchmqtpd004y13sxm3osq3ig	cmchmqtbe004e13sxfcavy82w	[]	20. uncompress 2	3	19	Разжатие строки 2\nНапишите функцию, которая принимает закодированную строку в формате "3[a]2[bc]" и разжимает её.\\n	\nfunction decodeString(s) {  \n    let numStack = [];  \n    let strStack = [];  \n    let currentNum = 0;  \n    let currentStr = '';  \n  \n    for (let char of s) {  \n        if (!isNaN(char)) {  \n            currentNum = currentNum * 10 + Number(char);  \n        } else if (char === '[') {  \n            numStack.push(currentNum);  \n            strStack.push(currentStr);  \n            currentNum = 0;  \n            currentStr = '';  \n        } else if (char === ']') {  \n            let repeatTimes = numStack.pop();  \n            let previousStr = strStack.pop();  \n            currentStr = previousStr + currentStr.repeat(repeatTimes);  \n        } else {  \n            currentStr += char;  \n        }  \n    }  \n    return currentStr;  \n}\n	js	t	\N	\N	2025-06-29 12:12:06.241	2025-06-29 12:12:06.241	{https://leetcode.com/problems/decode-string/}	{Yandex.pay,Яндекс,СберТех,IBS,Сравни,ЮТЭИР,GoInvest,Сбер,Yandex.multitrack,МТС}
cmchmqtq1004z13sxyf352993	cmchmqtbe004e13sxfcavy82w	[]	21. remove duplicates	3	20	Удаление дублирующихся символов\nСоздайте функцию, которая удаляет подряд идущие повторяющиеся буквы из строки.\\n	\nfunction removeDuplicates(str) {  \n  \n    let result = '';  \n    let prevChar = '';  \n  \n    for (let char of str) {  \n        let charLower = char.toLowerCase();  \n        if (charLower !== prevChar) {  \n            result += char;  \n            prevChar = charLower;  \n        }  \n    }  \n    return result;  \n}  \n  \n  \nconsole.log(removeDuplicates('Ннуужжнноо ннааппиисаатьь ффунккциюю, которая ннааа вввходдд приинниимааеетт ссстррокууу иии воозввраащааетт её ббезз лллишннннеегооо ддуубблиирррооованиияя ббукввв'));  \n  \n  \n// Ожидаемый вывод: "Нужно написать функцию, которая на вход принимает строку и возвращает её без лишнего дублирования букв"\n	js	t	\N	\N	2025-06-29 12:12:06.266	2025-06-29 12:12:06.266	{}	{"Точка банк"}
cmchmqtbn004f13sxv94498do	cmchmqtbe004e13sxfcavy82w	[]	1. string.prototype.greet	3	0	Добавление метода greet в String.prototype\nНапишите метод greet для всех строк, который принимает строку-префикс и возвращает новую строку в формате "префикс + исходная строка".\\n	\n  \n// Задача: Написать метод `greet`, который должен вернуть `hello + <Строку у которой был вызван метод>`.  \n  \n  \nString.prototype.greet = function(prefix) {  \n    return `${prefix} ${this}`;  \n};  \n  \n  \n  \n// Ожидаемый вывод   \nconsole.log("Вася".greet("hello")); // "hello Вася"\n	js	t	\N	\N	2025-06-29 12:12:05.747	2025-06-29 12:12:05.747	{}	{Сбертек}
cmchmqtc9004g13sxray300tb	cmchmqtbe004e13sxfcavy82w	[]	2. Reverse String	3	1	Переворот строки (Reverse String)\nНапишите функцию, которая принимает массив символов и переворачивает его на месте.\\n	\n  \nfunction reverseString(s) {  \n    let left = 0;  \n    let right = s.length - 1;  \n  \n    while (left < right) {  \n        // Обмен местами элементов    \n[s[left], s[right]] = [s[right], s[left]];  \n        // Двигаемся к центру    \nleft++;  \n        right--;  \n    }  \n}  \n  \n// Примеры использования:    \nconst s1 = ["h", "e", "l", "l", "o"];  \nreverseString(s1);  \nconsole.log(s1);  \n  \n  \nconst s2 = ["H", "a", "n", "n", "a", "h"];  \n  \n  \nreverseString(s2);  \nconsole.log(s2);\n	js	t	\N	\N	2025-06-29 12:12:05.77	2025-06-29 12:12:05.77	{https://leetcode.com/problems/reverse-string/}	{Иннотех}
cmchmqtkb004r13sxmh98gl6q	cmchmqtbe004e13sxfcavy82w	[]	13. reverseWords	3	12	Переворот слов в строке (Reverse Words)\nНапишите функцию, которая переворачивает каждое слово в заданной строке, сохраняя порядок слов.\\n	function reverseWords(str) {  \n    return str.split(' ').map(word => word.split('').reverse().join('')).join(' ');  \n}  \n  \nconst str = '123'  \n  \n  \nconsole.log(reverseWords(str)) // 321\n	js	t	\N	\N	2025-06-29 12:12:06.059	2025-06-29 12:12:06.059	{}	{"Лига цифровой экономики"}
cmchmqti2004o13sx63atj3zx	cmchmqtbe004e13sxfcavy82w	[]	10. compress 2	3	9	**Сжати\nНапишите функцию, которая принимает строку, содержащую повторяющиеся цифры, и заменяет их на <количество повторов>*<цифра>.\\n	\nна входе строка вида 111223334, на выходе 34294, пояснение : (1*3)(2*2)(3*3)(4*1)\n\n	js	t	\N	\N	2025-06-29 12:12:05.979	2025-06-29 12:12:05.979	{}	{Yandex.pay,Яндекс,СберТех,IBS,Сравни,ЮТЭИР,GoInvest,Сбер,Yandex.multitrack,МТС}
cmchmqtl0004s13sx5kh6jam0	cmchmqtbe004e13sxfcavy82w	[]	14. string.prototype.repeatify	3	13	Метод repeatify для строки\nРеализуйте метод repeatify, который дублирует строку заданное количество раз.\\n	\nString.prototype.repeatify = function(count) {  \n    let result = '';  \n  \n    for (let i = 0; i < count; i++) {  \n        result += this;  \n    }  \n  \n    return result;  \n};  \n  \n  \n  \nconst str = '123';  \n  \nconsole.log(str.repeatify(3)) // '123123123'\n	js	t	\N	\N	2025-06-29 12:12:06.084	2025-06-29 12:12:06.084	{}	{ВБ}
cmchmqtji004q13sxr5qnwwin	cmchmqtbe004e13sxfcavy82w	[]	12. sum	3	11	Гибкая функция сложения\nСоздайте функцию sum, которая может складывать числа или объединять строки в зависимости от типа аргументов.\\n	\nfunction sum(...args) {  \n    if (typeof args[0] === 'string') {  \n        // If the first argument is a string, concatenate all arguments as strings.  \n        return args.join('');  \n    } else {  \n        let sum = 0;  \n        let i = 0;  \n        while (i < args.length && typeof args[i] === 'number') {  \n            sum += args[i];  \n            i++;  \n        }  \n        if (i < args.length) {  \n            // Convert the sum to a string and concatenate the remaining arguments as strings.  \n            return sum.toString() + args.slice(i).join('');  \n        }  \n        return sum;  \n    }  \n}  \n  \n// Test cases  \nconsole.log(sum(1, 2, 3));       // Output: 6  \nconsole.log(sum(1, 2, '3'));     // Output: '33'  \nconsole.log(sum('1', 2, 3));     // Output: '123'  \nconsole.log(sum(1, '2', 3));     // Output: '123'  \nconsole.log(sum(1, true, 3));    // Output: '1true3'  \nconsole.log(sum(null, 2, 3));    // Output: 'null23'\n	js	t	\N	\N	2025-06-29 12:12:06.031	2025-06-29 12:12:06.031	{}	{Газпромбанк,DatsTeam}
cmchmqtd0004h13sxxctnt1ns	cmchmqtbe004e13sxfcavy82w	[]	3. Valid Anagram	3	2	Проверка на анаграмму (Valid Anagram)\nРеализуйте функцию, которая проверяет, являются ли две строки анаграммами (содержат одинаковые буквы в разном порядке).\\n	\n  \n/**  \n * Проверка на анаграмму - решение с сортировкой * Сложность: O(n log n) */  \n  \nfunction isAnagramSort(s, t) {  \n    if (s.length !== t.length) return false;  \n  \n    // Сортируем обе строки и сравниваем    \nreturn s.split('').sort().join('') === t.split('').sort().join('');  \n}  \n  \n  \n/**  \n * Проверка на анаграмму - Map * Сложность: O(n) */  \n  \nfunction isAnagramMap(s, t) {  \n    if (s.length !== t.length) return false;  \n  \n    const map = new Map();  \n  \n    // Заполняем Map с подсчётом символов строки s    \nfor (let char of s) {  \n        map.set(char, (map.get(char) || 0) + 1);  \n    }  \n  \n    // Проверяем символы строки t с Map    \nfor (let char of t) {  \n        if (!map.has(char) || map.get(char) === 0) {  \n            return false;  \n        }  \n        map.set(char, map.get(char) - 1);  \n    }  \n  \n    return true;  \n}  \n  \n// Примеры использования:  const s1 = "anagram", t1 = "nagaram";  \nconst s2 = "rat", t2 = "car";  \n  \n  \nconsole.log(isAnagramSort(s1, t1)); // true  console.log(isAnagramSort(s2, t2)); // false    \n  \n  \nconst unicodeS = "déjà vu";  \nconst unicodeT = "vu déjà";  \n  \nconsole.log(isAnagramMap(unicodeS, unicodeT)); // true\n	js	t	\N	\N	2025-06-29 12:12:05.796	2025-06-29 12:12:05.796	{https://leetcode.com/problems/valid-anagram/}	{1С,"Расчетные решения","Аласкар технологии",Промсвязьбанк,MOEX,Антара}
cmchmqtdo004i13sx96znq2qe	cmchmqtbe004e13sxfcavy82w	[]	4. Valid Palindrome	3	3	Проверка строки на палиндром (Valid Palindrome)\nНапишите функцию, которая проверяет, является ли строка палиндромом, игнорируя пробелы, знаки препинания и регистр.\\nдоп проверка на цифры\\n	\nconst isLetter = (char) => {  \n    return char.toLowerCase() !== char.toUpperCase();  \n};  \n  \nconst isPalindrome = (str) => {  \n  \n    let left = 0;  \n    let right = str.length - 1;  \n  \n    while (left < right) {  \n  \n        while (!isLetter(str[left])) left++;  \n        while (!isLetter(str[right])) right--;  \n  \n        if (str[left].toLowerCase() !== str[right].toLowerCase()) return false;  \n  \n        left++;  \n        right--;  \n  \n    }  \n  \n    return true;  \n};  \n  \n// Примеры использования  \nconst examples = [  \n    'Казак',  \n    `Madam, I'm Adam`,  \n    'А в Енисее - синева',  \n    'О, духи, от уборки микробу-то и худо',  \n    'Не палиндром'  \n];  \n  \nexamples.forEach(example => console.log(isPalindrome(example)));  \n  \n// Ожидаемый вывод: true, true, true, true, false\n\n	js	t	\N	\N	2025-06-29 12:12:05.821	2025-06-29 12:12:05.821	{https://leetcode.com/problems/valid-palindrome/}	{Росбанк,Сибур,"Stream Telecom","Яндекс Про","Coding Team"}
cmchmqtgm004m13sxojygowl3	cmchmqtbe004e13sxfcavy82w	[]	8. Reverse Integer	3	7	Переворот числа (Reverse Integer)\nНапишите функцию, которая переворачивает цифры заданного целого числа. Если после переворота число выходит за пределы 32-битного диапазона, верните 0.\\n	\N	\N	f	\N	\N	2025-06-29 12:12:05.927	2025-06-29 12:12:05.927	{https://leetcode.com/problems/reverse-integer/}	{"Точка банк"}
cmchmqthd004n13sxzjvqrkim	cmchmqtbe004e13sxfcavy82w	[]	9. compress	3	8	Сжатие строки (Compress)\nРеализуйте алгоритм сжатия строки, заменяя повторяющиеся символы на <количество повторов><символ>.\\n	\n// for  \nfunction compress(str) {  \n    let compressed = '';  \n    let count = 1;  \n  \n    for (let i = 0; i < str.length; i++) {  \n        if (str[i] === str[i + 1]) {  \n            // Если следующий символ совпадает с текущим, увеличиваем счетчик  \n            count++;  \n        } else {  \n            // Если символы не совпадают, добавляем текущий символ и его количество  \n            compressed += (count > 1 ? count : '') + str[i];  \n            count = 1; // Сбрасываем счетчик для нового символа  \n        }  \n    }  \n    return compressed;  \n}  \n  \n// reduce  \nfunction compressReduce(str) {  \n    return str.split('').reduce((compressed, char, i, arr) => {  \n        let count = 1;  \n  \n        // Считаем количество повторений текущего символа  \n        while (i + count < arr.length && char === arr[i + count]) {  \n            count++;  \n        }  \n  \n        if (count > 1) {  \n            compressed += count + char;  \n            arr.splice(i + 1, count - 1); // Удаляем повторяющиеся символы  \n        } else {  \n            compressed += char;  \n        }  \n  \n        return compressed;  \n    }, '');  \n}  \n  \n  \n// while  \n  \nfunction compressWhile(str) {  \n    let compressed = '';  \n    let i = 0;  \n  \n    while (i < str.length) {  \n        let count = 1;  \n  \n        // Подсчет повторяющихся символов  \n        while (i + 1 < str.length && str[i] === str[i + 1]) {  \n            count++;  \n            i++;  \n        }  \n  \n        compressed += (count > 1 ? count : '') + str[i];  \n        i++;  \n    }  \n  \n    return compressed;  \n}  \n  \n  \n  \n// recursive  \nfunction compressRecursive(str) {  \n    if (str.length === 0) return '';  \n  \n    let count = 1;  \n    let i = 1;  \n  \n    // Считаем количество повторений текущего символа  \n    while (i < str.length && str[i] === str[0]) {  \n        count++;  \n        i++;  \n    }  \n  \n    // Если повторяется больше одного раза, добавляем число и символ  \n    const compressedPart = (count > 1 ? count : '') + str[0];  \n  \n    // Рекурсивно обрабатываем оставшуюся часть строки  \n    return compressedPart + compressRecursive(str.slice(i));  \n}  \n  \n  \n  \nconsole.log(compress('AAA'));  \nconsole.log(compress('ABCBD'));  \nconsole.log(compress('AAABBOPP'));  \n  \nconsole.log(compressReduce('AAA'));  \nconsole.log(compressReduce('ABCBD'));  \nconsole.log(compressReduce('AAABBOPP'));  \n  \n  \n  \nconsole.log(compressWhile('AAA'));  \nconsole.log(compressWhile('ABCBD'));  \nconsole.log(compressWhile('AAABBOPP'))  \n  \nconsole.log(compressRecursive('AAA'));  \nconsole.log(compressRecursive('ABCBD'));  \nconsole.log(compressRecursive('AAABBOPP'));\n\n	js	t	\N	\N	2025-06-29 12:12:05.953	2025-06-29 12:12:05.953	{}	{Yandex.pay,Яндекс,СберТех,IBS,Сравни,ЮТЭИР,GoInvest,Сбер,Yandex.multitrack,МТС}
cmchmqtiu004p13sxalbdlrhe	cmchmqtbe004e13sxfcavy82w	[]	11. uncompress	3	10	Разжатие строки (Uncompress)\nРеализуйте функцию, которая принимает сжатую строку в формате "3(ab)" и восстанавливает исходную строку.\\n	\n// стэк  \nfunction uncompress(str) {  \n    const stack = [];  \n  \n    for (let i = 0; i < str.length; i++) {  \n        const char = str[i];  \n  \n        if (char === ')') {  \n            // Извлекаем символы до открывающей скобки '('  \n            let substr = '';  \n            while (stack[stack.length - 1] !== '(') {  \n                substr = stack.pop() + substr;  \n            }  \n            stack.pop(); // Удаляем '('  \n  \n            // Извлекаем количество повторений перед открывающей скобкой            let repeatCount = '';  \n            while (stack.length && !isNaN(stack[stack.length - 1])) {  \n                repeatCount = stack.pop() + repeatCount;  \n            }  \n  \n            // Повторяем подстроку необходимое количество раз и кладем обратно в стек  \n            stack.push(substr.repeat(Number(repeatCount)));  \n        } else {  \n            // Кладем символ в стек, включая цифры и скобки  \n            stack.push(char);  \n        }  \n    }  \n    // Объединяем все элементы в стеке в итоговую строку  \n    return stack.join('');  \n}  \n  \n  \n// рекурсия  \n  \nfunction uncompressRecursive(str) {  \n    const decompress = (s, index) => {  \n        let result = '';  \n        let repeatCount = '';  \n  \n        while (index < s.length) {  \n            const char = s[index];  \n  \n            if (!isNaN(char)) {  \n                // Строим число, представляющее количество повторений  \n                repeatCount += char;  \n            } else if (char === '(') {  \n                // Начинаем новую рекурсивную глубину для подстроки внутри скобок  \n                const [substr, newIndex] = decompress(s, index + 1);  \n                result += substr.repeat(Number(repeatCount));  \n                repeatCount = '';  \n                index = newIndex;  \n            } else if (char === ')') {  \n                // Завершаем текущую рекурсивную глубину  \n                return [result, index];  \n            } else {  \n                // Добавляем обычные символы  \n                result += char;  \n            }  \n            index++;  \n        }  \n  \n        return [result, index];  \n    };  \n  \n    // Инициализируем рекурсию с начальной строки и возвращаем результат  \n    return decompress(str, 0)[0];  \n}  \n  \n  \nconsole.log(uncompress('3(ab)'));  \nconsole.log(uncompress('3(ab2(c))'));  \n  \n  \nconsole.log(uncompressRecursive('3(ab)'));  \nconsole.log(uncompressRecursive('3(ab2(c))'));\n	js	t	\N	\N	2025-06-29 12:12:06.006	2025-06-29 12:12:06.006	{}	{Yandex.pay,Яндекс,СберТех,IBS,Сравни,ЮТЭИР,GoInvest,Сбер,Yandex.multitrack,МТС}
cmchmquf4005213sxse6fbxvu	cmchmquew005113sx7kzt5mf2	["Очень простые (базовые операции и манипуляции)"]	1. sum	3	0	Постановка задачи:Напишите функцию sum, которая принимает массив чисел, в том числе содержащий вложенные массивы, и возвращает сумму всех чисел в массиве. Для решения задачи используйте рекурсию для обработки вложенных массивов.\\n	function sum(arr) {  \n    return arr.reduce((total, item) => {  \n        if (Array.isArray(item)) {  \n            return total + sum(item); // рекурсивно суммируем вложенные массивы  \n        }  \n        return total + item; // добавляем число к общей сумме  \n    }, 0);  \n}  \n  \n// Пример использования  \nconsole.log(sum([1, 1, 1, [2, 1], [1, [1, [1], 3]]])); // Вернет 12	js	t	\N	\N	2025-06-29 12:12:07.168	2025-06-29 12:12:07.168	{}	{Газпромбанк,DatsTeam}
cmchmqugq005413sxf17p1yur	cmchmquew005113sx7kzt5mf2	["Очень простые (базовые операции и манипуляции)"]	3. removeEvenIndexedElements	3	2	Постановка задачи:Реализуйте функцию removeEvenIndexedElements, которая принимает массив и удаляет из него элементы, находящиеся на чётных индексах. Итоговый массив должен содержать только элементы, расположенные на нечётных позициях (индексация начинается с нуля).\\nОбходите массив в обратном порядке, чтобы избежать проблем с изменением индексов при удалении элементов.Для каждого элемента проверяйте, является ли его индекс чётным.Если индекс чётный, удаляйте элемент из массива с помощью метода splice.Возвращайте модифицированный массив.Проверьте работу функции на тестовом массиве.\\n	const removeEvenIndexedElements = (arr) => {  \n    for (let i = arr.length - 1; i >= 0; i--) {  \n        if (i % 2 === 0) {  \n            arr.splice(i, 1);  \n        }  \n    }    \n    return arr;  \n};  \n  \nconst data = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"];  \n  \nconsole.log(removeEvenIndexedElements(data)); // ["B", "D", "F", "H", "J"]	js	t	\N	\N	2025-06-29 12:12:07.227	2025-06-29 12:12:07.227	{}	{Лемма}
\.


--
-- Data for Name: ContentFile; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."ContentFile" (id, "webdavPath", "mainCategory", "subCategory", "lastFileHash", "createdAt", "updatedAt") FROM stdin;
cmchmqkyd000013sxavo7b2rz	/obsval/FrontEnd/SBORNICK/JS/Array.md	JS	Array	\N	2025-06-29 12:11:54.901	2025-06-29 12:11:54.901
cmchmqn6p001t13sxcmac57pa	/obsval/FrontEnd/SBORNICK/JS/Classes.md	JS	Classes	\N	2025-06-29 12:11:57.794	2025-06-29 12:11:57.794
cmchmqohb002613sxycod6ivv	/obsval/FrontEnd/SBORNICK/JS/Custom method and function.md	JS	Custom method and function	\N	2025-06-29 12:11:59.472	2025-06-29 12:11:59.472
cmchmqpsh003213sxcgcp7ko1	/obsval/FrontEnd/SBORNICK/JS/Numbers.md	JS	Numbers	\N	2025-06-29 12:12:01.169	2025-06-29 12:12:01.169
cmchmqqo2003b13sxajtzyb2z	/obsval/FrontEnd/SBORNICK/JS/Objects.md	JS	Objects	\N	2025-06-29 12:12:02.307	2025-06-29 12:12:02.307
cmchmqs4f003s13sx4aqxrcfz	/obsval/FrontEnd/SBORNICK/JS/Promise.md	JS	Promise	\N	2025-06-29 12:12:04.191	2025-06-29 12:12:04.191
cmchmqtbe004e13sxfcavy82w	/obsval/FrontEnd/SBORNICK/JS/Strings.md	JS	Strings	\N	2025-06-29 12:12:05.739	2025-06-29 12:12:05.739
cmchmquew005113sx7kzt5mf2	/obsval/FrontEnd/SBORNICK/JS/Test.md	JS	Test	\N	2025-06-29 12:12:07.161	2025-06-29 12:12:07.161
cmchmqv6t005513sxb364k7m8	/obsval/FrontEnd/SBORNICK/JS/Zamiki.md	JS	Zamiki	\N	2025-06-29 12:12:08.16	2025-06-29 12:12:08.16
cmchmqw4o005g13sxptsizq2i	/obsval/FrontEnd/SBORNICK/REACT/Hooks.md	REACT	Hooks	\N	2025-06-29 12:12:09.384	2025-06-29 12:12:09.384
cmchmqwuu005k13sxfobid0ek	/obsval/FrontEnd/SBORNICK/REACT/React mini app.md	REACT	React mini app	\N	2025-06-29 12:12:10.326	2025-06-29 12:12:10.326
cmchmqxqy005p13sxwxiyi437	/obsval/FrontEnd/SBORNICK/REACT/Refactor.md	REACT	Refactor	\N	2025-06-29 12:12:11.483	2025-06-29 12:12:11.483
cmchmqz4c006913sxf79csk08	/obsval/FrontEnd/SBORNICK/REACT/Rerender.md	REACT	Rerender	\N	2025-06-29 12:12:13.261	2025-06-29 12:12:13.261
cmchmr0ob006u13sxtn2smcgd	/obsval/FrontEnd/SBORNICK/TS/Задачи.md	TS	Задачи	\N	2025-06-29 12:12:15.275	2025-06-29 12:12:15.275
cmchmr26x008613sx5x0ok8za	/obsval/FrontEnd/SBORNICK/TS/Утилитные типы.md	TS	Утилитные типы	\N	2025-06-29 12:12:17.241	2025-06-29 12:12:17.241
\.


--
-- Data for Name: LearningPath; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."LearningPath" (id, name, description, "blockIds", prerequisites, difficulty, "estimatedHours", tags, "isActive", "orderIndex", "createdAt", "updatedAt") FROM stdin;
\.


--
-- Data for Name: SupportedLanguage; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."SupportedLanguage" (id, name, language, version, "dockerImage", "fileExtension", "compileCommand", "runCommand", "timeoutSeconds", "memoryLimitMB", "isEnabled", "createdAt", "updatedAt") FROM stdin;
\.


--
-- Data for Name: TaskAttempt; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."TaskAttempt" (id, "userId", "blockId", "sourceCode", language, "isSuccessful", "attemptNumber", "executionTimeMs", "memoryUsedMB", "errorMessage", stderr, "durationMinutes", "createdAt") FROM stdin;
\.


--
-- Data for Name: TaskSolution; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."TaskSolution" (id, "userId", "blockId", "finalCode", language, "totalAttempts", "timeToSolveMinutes", "firstAttempt", "solvedAt", "createdAt", "updatedAt") FROM stdin;
\.


--
-- Data for Name: TestCase; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."TestCase" (id, "blockId", name, description, input, "expectedOutput", "isPublic", difficulty, weight, "timeoutSeconds", "isAIGenerated", "generationPrompt", "generatedAt", "generationModel", "executionCount", "passRate", "isActive", "orderIndex", "createdAt", "updatedAt") FROM stdin;
d0b2f8df-f51d-481b-adec-5165b709cdb0	cmchmqpso003313sxibri3119	Factorial of a positive integer (5)	Validates the factorial calculation for a positive integer using all three methods.	5	120	t	BASIC	1	5	t	\N	2025-06-29 16:37:08.221037	openai-gpt-4o-mini	0	0	t	0	2025-06-29 13:37:07.008915	2025-06-29 13:37:07.008915
7bf35daa-3540-4e9b-8b41-6c879f13eb1c	cmchmqkyq000113sxnxb8cy7h	Sum of nested arrays with multiple levels	This test validates the function's ability to sum numbers in a deeply nested array structure.	[1, 1, 1, [2, 1], [1, [1, [1], 3]]]	12	t	BASIC	1	5	t	\N	2025-06-29 16:37:23.189048	openai-gpt-4o-mini	0	0	t	0	2025-06-29 13:37:22.327065	2025-06-29 13:37:22.327065
68e3a916-0031-4d26-bc78-1ec4f64de76f	cmchmqn7l001v13sx2i11i97k	Single event subscription and emission	Validates that a single subscription to an event correctly receives emitted data.		Received: Hello!	t	BASIC	1	5	t	\N	2025-06-29 16:38:11.652703	openai-gpt-4o-mini	0	0	t	0	2025-06-29 13:38:11.403649	2025-06-29 13:38:11.403649
e77fa2e4-0ad0-4820-b7bf-40e77ce5d630	cmchmr275008713sxs8v3jgwd	Test MyPartial with Person type	Validates that MyPartial correctly makes all fields of Person optional.		{ name?: string; age?: number; }	t	BASIC	1	5	t	\N	2025-06-29 16:53:16.89066	openai-gpt-4o-mini	0	0	t	0	2025-06-29 13:53:15.608507	2025-06-29 13:53:15.608507
65ef0b30-55a2-4122-a1f2-cc37a36b3e19	cmchmqn6w001u13sxdr0nhbm3	Single event listener registration and emission	This test validates that a single listener can be registered for an event and is called with the correct arguments when the event is emitted.		Получено событие: { message: 'Hello World!' }	t	BASIC	1	5	t	\N	2025-07-04 14:15:58.847232	openai-gpt-4o-mini	0	0	t	0	2025-07-04 11:15:58.254618	2025-07-04 11:15:58.254618
cmchmquf4005213sxse6fbxvu_sum_test	cmchmquf4005213sxse6fbxvu	Рекурсивная сумма массива	Проверяет правильность реализации рекурсивной функции sum		12	t	BASIC	1	5	f	\N	\N	\N	0	0	t	1	2025-07-04 13:50:29.857376	2025-07-04 13:50:29.848365
2aba31d3-129b-4fc1-927b-fde4b5e7a157	cmchmquf4005213sxse6fbxvu	Sum of nested arrays with multiple levels	This test validates the function's ability to sum numbers in a deeply nested array structure.	[1, 1, 1, [2, 1], [1, [1, [1], 3]]]	12	t	BASIC	1	5	t	\N	2025-07-04 16:50:30.840336	openai-gpt-4o-mini	0	0	t	0	2025-07-04 13:50:27.926424	2025-07-04 13:50:27.926424
c4ddf6ec-5a50-4c67-bc5f-c9e593d19709	cmchmqqow003d13sxavgz9bgi	Sum of values in a tree structure with multiple levels	This test validates the correct summation of values in a nested tree structure with multiple levels of children.		120	t	BASIC	1	5	t	\N	2025-07-04 22:07:43.220637	openai-gpt-4o-mini	0	0	t	0	2025-07-04 19:07:41.46988	2025-07-04 19:07:41.46988
e81c464c-83dc-40cc-bdb3-f4b38fc178ed	cmchmqz5a006b13sx8wummg9a	Initial render sequence validation	Validates the sequence of render and effect calls on the initial render of the component.		render App, render A, render B, layout effect A, layout effect B, layout effect App, effect A, effect B, effect App	t	BASIC	1	5	t	\N	2025-07-05 10:51:02.313557	openai-gpt-4o-mini	0	0	t	0	2025-07-05 07:51:00.573616	2025-07-05 07:51:00.573616
02257010-252a-47aa-a92b-33113af2f914	cmchmqohj002713sxjguxs3vt	Sum of three positive integers	This test validates the correct summation of three positive integers passed through the curried function.		6	t	BASIC	1	5	t	\N	2025-07-05 10:51:56.159072	openai-gpt-4o-mini	0	0	t	0	2025-07-05 07:51:55.52323	2025-07-05 07:51:55.52323
93fc82c5-00cc-4a9a-b614-24e21f7c5c11	cmchmqs64003v13sxshqe8t5c	Log indexes of an array with setTimeout	This test validates that the function logs the correct indexes of the array elements with a 1-second interval using setTimeout.	[1, 2, 3, 4, 5]	Index with setTimeout: 0\nIndex with setTimeout: 1\nIndex with setTimeout: 2\nIndex with setTimeout: 3\nIndex with setTimeout: 4	t	BASIC	1	5	t	\N	2025-07-05 10:52:14.317767	openai-gpt-4o-mini	0	0	t	0	2025-07-05 07:52:12.657239	2025-07-05 07:52:12.657239
354c6dc6-fefd-48e9-b9aa-da0bd0df7423	cmchmqzem006o13sx8kz7e4sl	Increment clicks after timeout	Validates that the clicks are incremented by 1 after a 200ms timeout.		clicks + 1	t	BASIC	1	5	t	\N	2025-07-05 10:53:43.301542	openai-gpt-4o-mini	0	0	t	0	2025-07-05 07:53:42.890745	2025-07-05 07:53:42.890745
5ba7c54d-54c4-4733-a9c0-687a8fe48ba6	cmchmqnct002213sxeexzxfy5	Add and remove items from the list	This test validates that items can be added and removed correctly from the List class.		[{"firstName":"Женя","lastName":"Киселев"}]	t	BASIC	1	5	t	\N	2025-07-05 10:54:11.002903	openai-gpt-4o-mini	0	0	t	0	2025-07-05 07:54:10.253447	2025-07-05 07:54:10.253447
864e6495-38cf-4d63-820a-5a1ddf08e98c	cmchmqv7p005713sxjfp3ibhk	Test canGetCount with n=2	This test validates that the function returns 'no' for the first two calls and 'yes' for the third call when n is set to 2.		['no', 'no', 'yes', 'yes']	t	BASIC	1	5	t	\N	2025-07-05 10:54:23.202517	openai-gpt-4o-mini	0	0	t	0	2025-07-05 07:54:21.499526	2025-07-05 07:54:21.499526
98fd7004-bd73-453e-aa54-8794eddeeb72	cmchmqzdw006n13sxej84u0z6	Increment count on handleClick	Validates that the count is incremented correctly when handleClick is called.		3	t	BASIC	1	5	t	\N	2025-07-05 10:54:30.897168	openai-gpt-4o-mini	0	0	t	0	2025-07-05 07:54:29.561131	2025-07-05 07:54:29.561131
4e0cfca6-0293-46cb-a432-2693717366b9	cmchmqshi004a13sx8rfo7yaf	Successful fetch with valid URL	This test validates that the function successfully fetches data from a valid URL and returns the JSON response.	https://example.com/data, 5	JSON data from https://example.com/data	t	BASIC	1	5	t	\N	2025-07-05 10:54:49.843168	openai-gpt-4o-mini	0	0	t	0	2025-07-05 07:54:49.1331	2025-07-05 07:54:49.1331
\.


--
-- Data for Name: TestValidationResult; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."TestValidationResult" (id, "testCaseId", "attemptId", passed, "actualOutput", "executionTimeMs", "errorMessage", "outputMatch", "outputSimilarity", "createdAt") FROM stdin;
\.


--
-- Data for Name: TheoryCard; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."TheoryCard" (id, "ankiGuid", "cardType", deck, category, "subCategory", "questionBlock", "answerBlock", tags, "orderIndex", "createdAt", "updatedAt") FROM stdin;
cmchfnxrb000013mpkhcp5a2k	u}GaM!ESHu	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Из каких css-свойств состоит блочная модель?&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fdd4b3bc7256fda69a77468733e677cb709b3196.jpg">	{}	0	2025-06-29 08:53:54.215	2025-06-29 08:53:54.215
cmchfnxrw000113mp2zh4h7vg	ueLq+BvyBE	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	перечисли основные свойства display	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-71466c949d020a79b446e6774444a8e3370d7b8b.jpg">	{}	1	2025-06-29 08:53:54.236	2025-06-29 08:53:54.236
cmchfnxsa000213mprwd1nmra	K%SY/bhZGH	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	какие величины измерения описаны&nbsp;<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-89c923b44215a6d5db510f3acbcef5851c7ff22e.jpg">	em и rem	{}	2	2025-06-29 08:53:54.25	2025-06-29 08:53:54.25
cmchfnxsp000313mpv59efr7g	Eq(r2Npyc3	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-50342a3d6723af2935713a74f10e2bc31a6bec67.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b06191a49e3bcb08731e6e627bb90fc36e17551d.jpg">	{}	3	2025-06-29 08:53:54.265	2025-06-29 08:53:54.265
cmchfnxt0000413mpf61vsk9i	Ko~4:_Ci;F	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	какие бывают значения у свойства position?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fe217fb58015850be76b6e9d480056fd6d3e5d4f.jpg">	{}	4	2025-06-29 08:53:54.276	2025-06-29 08:53:54.276
cmchfnxtd000513mpgrfnmbp2	h9Q!4N6JKQ	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	адаптивная верстка. методы с помощью которых можно сделать страеницу адаптивной&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ec9b96cd01f4a7ce24c9277964251c27cd1bfac0.jpg">	{}	5	2025-06-29 08:53:54.29	2025-06-29 08:53:54.29
cmchfnxts000613mpgvy3sf3e	e%nCJYJ/|p	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Из чего строится размер элемента?	<ul><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c6c5908c3e7cbf770d69dbb12eb98f9edb5833a4.jpg"></li><li>ширина и высота содержимого (width и height)</li><li>рамка (border)</li><li>внутренний отступ ( padding)<br></li><li>внешний отступ (margin)</li></ul>	{}	6	2025-06-29 08:53:54.304	2025-06-29 08:53:54.304
cmchfnxub000713mppqaqvm28	L14n>B,lpx	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Как создать объект без прототипа?&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-915e9fe25ee96d559ed8747212c32a2220f69a34.jpg"><br>	{}	7	2025-06-29 08:53:54.324	2025-06-29 08:53:54.324
cmchfnxup000813mpx6820v3f	xxaN{p1^$B	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Как в JS создать объект? (три способа)	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ffe537cea06aa299b483c0050fcc806ac4669501.jpg"><br>1. Литерал<br>2. Конструктор<br>3. Сразу задаем значение в литерале	{}	8	2025-06-29 08:53:54.338	2025-06-29 08:53:54.338
cmchfnxv3000913mpckcqhs01	hjCtr3)txA	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Какие способы создания объекта вы знаете? (5)	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a2884caa8ee30877c1f73af7e3a183331696b579.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-221de54b4ef47af39144f63b0c32c96cd4194a30.jpg"><br>	{}	9	2025-06-29 08:53:54.351	2025-06-29 08:53:54.351
cmchfnxvh000a13mpm9qr17jw	O?T]&R*hnE	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Как проверить, является ли объект массивом?&nbsp;	1.&nbsp;Array.isArray()<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d59b3152baad68d01b26907cabcff031ff36e6db.jpg"><br>2. instanceof<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4ee3d670f4543bd8346b9999a09b4bf9a24f3425.jpg">	{}	10	2025-06-29 08:53:54.365	2025-06-29 08:53:54.365
cmchfnxvw000b13mpnsx3qblz	Qd<m~K-&&x	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	&nbsp;hasOwnProperty	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-96ee95a64dcd19b39eb2c4955460fa906b8dbc63.jpg">	{}	11	2025-06-29 08:53:54.381	2025-06-29 08:53:54.381
cmchfnxw9000c13mpzk779qcm	NN/tdgF/:x	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Что такое arguments?	arguments - это объект, псевдомассив, доступный внутри функции, который предоставляет доступ к аргументам функции по индексам.<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f8faa071c2c304e17759a28c249086a7bff37270.jpg"><br>	{}	12	2025-06-29 08:53:54.393	2025-06-29 08:53:54.393
cmchfnxwl000d13mp7v8tcl6j	JCMH7OCvuN	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Что возвращает typeof null возвращает?	typeof null возвращает ""object""<br>обеспечения обратной совместимости&nbsp;	{}	13	2025-06-29 08:53:54.406	2025-06-29 08:53:54.406
cmchfnxwz000e13mpo6sbwsse	gjRCtUfTFC	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Какие значения являются falsy(ложными) значениями?	<ul><li>false (boolean)</li><li>0 (number)</li><li>пустая строка '' или """" (string)</li><li>null (отсутствие значения) (object)</li><li>Undefined (undefined)</li><li>NaN (Not-a-Number, не численный результат мат.операции) (number)</li></ul>	{}	14	2025-06-29 08:53:54.419	2025-06-29 08:53:54.419
cmchfnxxd000f13mpr3t37oi3	r&c)gN^mso	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	функциональное кодированье в js, основные пункты&nbsp;&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240620143729.png">	{}	15	2025-06-29 08:53:54.433	2025-06-29 08:53:54.433
cmchfnxxq000g13mpd6lty4o6	FA8g~)HcfC	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Что такое деструктуризация	специальный синтаксис, позволяющий распаковать массивы или объекты в кучу переменных, так как иногда они более удобны<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4aad73dbff14ea36b6fd68298b7a5f811408c174.jpg">	{}	16	2025-06-29 08:53:54.446	2025-06-29 08:53:54.446
cmchfnxy9000h13mpkh42lmuw	rXnu7IR8K5	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Что представляет из себя чистая функция? Критерии чистоты?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-be17fb5ab81cc73e47cbeee3e88177afcbc3e2d8.jpg">	{}	17	2025-06-29 08:53:54.465	2025-06-29 08:53:54.465
cmchfnxyn000i13mpu1cdyrew	xmf=:|OX<4	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Что такое тернарный оператор?	сокращенная форма условного оператора if-else<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e05855924839815099cc603af82896353d9372c0.jpg"><br><ul><li>условие</li><li>?</li><li>то что будет выполнено если условие истинно</li><li>:</li><li>то что выполнится если условие ложно</li></ul><div><br></div>	{}	18	2025-06-29 08:53:54.479	2025-06-29 08:53:54.479
cmchfnxz0000j13mpcgz599h0	MGM34V%>&G	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Для чего используется оператор ""&amp;&amp;""?	<ul><li>логическое И (AND)</li><li>возвращает true, если оба операнда истинны&nbsp;</li><li>и false в противном случае&nbsp;</li></ul><div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1b6cad0580f7301f6a2a7e7ed07b2e755c6da75c.jpg"><br></div>	{}	19	2025-06-29 08:53:54.492	2025-06-29 08:53:54.492
cmchfnxzb000k13mpodrby9pp	"I:d(E:W<_#"	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	<div>Для чего используется оператор ""||""?<br></div>	<ul><li>логическое ИЛИ (OR)</li><li>возвращает true, если хотя бы один из операндов истинен</li><li>false, если оба операнды ложны&nbsp;</li></ul><div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9cbda437be32a2dabd61f2f6663bad8050259afc.jpg"><br></div>	{}	20	2025-06-29 08:53:54.504	2025-06-29 08:53:54.504
cmchfnxzm000l13mpxpq1w8cb	d<l+2=Cha&	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Для чего используется оператор ""!!""?	<ul><li>преобразование значение в булево представление&nbsp;</li></ul><div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1cdf723dfdd9390d0a30eb1c91549aecb35c738d.jpg"><br></div>	{}	21	2025-06-29 08:53:54.515	2025-06-29 08:53:54.515
cmchfny00000m13mpqkjgf0bq	ea)-FqfD9w	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Оператор опциональной последовательности (Optional chaining оператор) Для чего нужен?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-36ef168fe07d05c50cb2d87e31c9a07837239574.jpg"><br><ul><li>предотвращение ошибок. безопасное обращение к свойствам и методам&nbsp;</li><li>более краткий и читаемый код&nbsp;</li></ul>	{}	22	2025-06-29 08:53:54.528	2025-06-29 08:53:54.528
cmchfny0c000n13mpeja1vs1x	NAHB&cBN.2	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Является ли использование унарного плюса (оператор ""+"") самым быстрым способом преобразования строки в число?	<ul><li>да является</li><li>но если число ""не число"" - выдаст NaN</li></ul><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-55b06b1645ed10309ca2d21ab3eb7fb0780ad8c7.jpg"><br>	{}	23	2025-06-29 08:53:54.541	2025-06-29 08:53:54.541
cmchfny0q000o13mpdoexhnqg	k6x=,hx7Hh	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	<ul><li>function.prototype.apply</li><li>function.prototype.call</li><li>function.prototype.blind&nbsp;</li></ul><div></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-30969441a757692b87d495c8770197c699c7ca9a.jpg"><br><ul><li>apply - принимает массив аргументов&nbsp;</li><li>call - принимает аргументы списком через запятую</li><li>bind - связывает контекст с функцией&nbsp;</li></ul>	{}	24	2025-06-29 08:53:54.554	2025-06-29 08:53:54.554
cmchfny13000p13mpko0pkkya	n^GI.JK+g!	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	В чем отличие sessionStorage от localStorage? (3 пункта)	<div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1093961d3766b12b091d9ad0829b7b2b103639ed.jpg"><br></div>	{}	25	2025-06-29 08:53:54.567	2025-06-29 08:53:54.567
cmchfny1g000q13mp62o6fgyg	F2RQ{^&2*J	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Какие есть фазы в ""жизни"" события?	1. Фаза погружения<br>2. Фаза цели - достигло event.target<br>3. Всплытие	{}	26	2025-06-29 08:53:54.58	2025-06-29 08:53:54.58
cmchfny1s000r13mpjelentet	lq:(p$W]cM	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	<h3>e.preventDefault() и e.stopPropagation()</h3>	1. отключает действие браузера (поведение элемента по умолчанию) по умолчанию<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6a9cf4cb7f59c15931290621acb9c0ab9950adcb.jpg"><br>2. отключает распространение события (всплытие и погружение)<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-45c22fa8556b35db6fab1a1a8c4ff1ebac8fa56d.jpg">	{}	27	2025-06-29 08:53:54.593	2025-06-29 08:53:54.593
cmchfny25000s13mp11dvbq61	ojMh<[]aVO	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Какие методы предоставляет сессионное хранилище? (4)	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-265bb1d0e616030cc17b4b68d471520f4de68992.jpg">&nbsp;	{}	28	2025-06-29 08:53:54.606	2025-06-29 08:53:54.606
cmchfny2g000t13mprawwobcr	qr=TdP]_?6	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Цикл Event Loop&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0eeae533523183b3e75ee8dbf8455212e8921c32.jpg">	{}	29	2025-06-29 08:53:54.617	2025-06-29 08:53:54.617
cmchfny7g001713mp26u19k04	P=Q&Y!oa.0	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	Что будет выведено в консоль<span style=""background-color: rgb(255, 255, 255);"">?</span><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3d98e7a732e8b06bbd1ae30fe58755fcf79884d9.jpg"><br>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3d6b9462e3554575e8bc9fb815f40adcc5721b4c.jpg">	{}	43	2025-06-29 08:53:54.796	2025-06-29 08:53:54.796
cmchfny2u000u13mpyk1a3eof	KAKg[)f6[T	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	что такое DOM	- объектная модель документа - дерево тэгов, нодов<br>&nbsp;&nbsp;&nbsp; - основные узлы - html-тэги, текстовые тэги и атрибутные узлы (класс, айди)<br>&nbsp;&nbsp;&nbsp; - DOM позволяет скриптам динамически изменять содержимое, структуру и стиль страницы, реагируя на действия пользователя без обновления страницы<br>&nbsp;&nbsp;&nbsp; - DOM предоставляет API, который может использоваться в JavaScript для изменения html-документа, например, добавления, удаления или изменения узлов, обработки событий или извлечения данных из документа	{}	30	2025-06-29 08:53:54.63	2025-06-29 08:53:54.63
cmchfny38000v13mpjhgcjqgw	"E>#_14@%Sa"	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	что такое event.target	<ul><li>элемент DOM, который вызвал событие</li></ul>	{}	31	2025-06-29 08:53:54.644	2025-06-29 08:53:54.644
cmchfny3l000w13mp5zhljf1q	zBv}QVbx-z	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	Что такое HTTP (HyperTextTransformProtocol). Что такое HTTPS	<div>HTTP</div><ul><li>это протокол передачи данных, основанный на технолологии ""клиент-сервер""</li><li>находится на самом верхнем уровне модели OSI, TCP/IP - уровень приложений или прикладной уровень&nbsp;</li><li>первоначальано задумывалось как обмен html, но сейчас можно передавать почти все</li><li>порт 80</li></ul><div>HTTPS</div><div><ul><li>расширение, надстройка над http</li><li>шифрует данные с помощью SSL&nbsp; и TLS</li><li>порт 443</li></ul></div>	{}	32	2025-06-29 08:53:54.657	2025-06-29 08:53:54.657
cmchfny3y000x13mpo1bjb6o2	w>Pt+h_:]^	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	из чего состоит HTTP запрос	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240105223501.png"><br>	{}	33	2025-06-29 08:53:54.67	2025-06-29 08:53:54.67
cmchfny49000y13mp5d6yado6	k7TACE(!3B	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	Основные отличия TCP и UDP	<ul><li>TCP - постоянное соединение, надежная передача данных, управление потоком, сложный заголовок. Передача файлов, веб-страниц и тд - важно обеспечить надежность и контроль ошибок (http, ftp, smtp)</li><li>UDP - без постоянного соединения, ненадежная передача данных, простой заголовок, высокая производительность. Потокое видео/аудио, DNS</li></ul>	{}	34	2025-06-29 08:53:54.681	2025-06-29 08:53:54.681
cmchfny4m000z13mpdc10yw2s	Eg,fXfWLp^	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	Что такое REST API	<ul><li>архитектурный стиль, не протокол</li><li>сообщает о том, как&nbsp; наиболее эффективно общаться клиенту и серверу по HTTP</li><li>Формат обмена чаще всего JSON, реже XML</li></ul>	{}	35	2025-06-29 08:53:54.694	2025-06-29 08:53:54.694
cmchfny4x001013mp44sas0bs	pVr:Ec-DLi	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	основные семантические тэги&nbsp;	<ul><li>header</li><li>nav</li><li>footer</li><li>article</li><li>section</li><li>main</li></ul>	{}	36	2025-06-29 08:53:54.705	2025-06-29 08:53:54.705
cmchfny5a001113mpgz449p1h	o=5Kk]_XjT	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	какие бывают position&nbsp;	<ul><li>relative - сдвиги top right bottom left</li><li>absolute - относительно ближайшего родителя</li><li>fixed - не изменяет положение при прокрутке&nbsp;</li><li>sticky - ведет себя как relative, пока не достигнет определенной&nbsp; точки, после чего становится fixed&nbsp;&nbsp;</li><li>static - по умолчанию</li></ul>	{}	37	2025-06-29 08:53:54.718	2025-06-29 08:53:54.718
cmchfny5m001213mpvbth8bus	"Eub-!VJt#s"	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Какое влияние оказывает свойство box-sizing: border-box на размеры элементов?	при border-box браузер учитывает при расчете бокс модела margin, padding, border<br>если пропишем обратное (content-box), то исключает&nbsp;	{}	38	2025-06-29 08:53:54.731	2025-06-29 08:53:54.731
cmchfny60001313mpyjothred	cj/-+eq+lX	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Как можно установить свойство opacity для элемента span, который следует сразу за элементом input?	input + span&nbsp;<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0b9e4ee69645d442d69235734e397d3c00c8b7aa.jpg">	{}	39	2025-06-29 08:53:54.744	2025-06-29 08:53:54.744
cmchfny6a001413mpq9ew3w9p	s@NKaEFgZ2	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Что такое :hover, :active, :disabled, :last-child?	Псевдокласс в CSS — это ключевое слово, добавленное к селектору, которое определяет его особое состояние.&nbsp;	{}	40	2025-06-29 08:53:54.755	2025-06-29 08:53:54.755
cmchfny6n001513mpri1mewnj	zxQKgL&6%}	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Как рассчитывается значение свойства height у блочных элементов?	<div><div><div>Значение свойства <b>height</b> у блочных элементов рассчитывается в зависимости от высоты содержимого этого элемента.</div></div></div><div><br></div>	{}	41	2025-06-29 08:53:54.767	2025-06-29 08:53:54.767
cmchfny6z001613mp95dqzbjh	KxZY]XyX;9	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-82e496138a880a605e833c6fd0938edfddcd3c94.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-09a828eb961955581c8aacacb5e8e9367f8674ce.jpg">	{}	42	2025-06-29 08:53:54.779	2025-06-29 08:53:54.779
cmchfny7t001813mplfgfbrp7	L&g`a961)a	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-93bb6a1edcb042edbd217f800c75c1eaf76b4960.jpg">Что выведется в консоль?	<ul><li>object, тк спрэд возвращает массив, а массив по типу обжект</li></ul>	{}	44	2025-06-29 08:53:54.809	2025-06-29 08:53:54.809
cmchfny86001913mpb4x1aqbz	muwlX^*(i3	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a3a73bf8550b868f28ac00a3a6b3dcc018886bb8.jpg">Каков результат исполнения<span style=""background-color: rgb(255, 255, 255);""> </span>кода?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-333cf5495cef4c09c9988c6fddade2c96bf6efb1.jpg">	{}	45	2025-06-29 08:53:54.822	2025-06-29 08:53:54.822
cmchfny8j001a13mpul7pu2wf	bw-9b8_dmP	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-505f5b60f211b36d5371bac5debdf97bc6cdf4e0.jpg">Что является результатом исполнения кода?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3a7daac789a4a893f7ebc9a2934e62fdb3b1f49a.jpg">	{}	46	2025-06-29 08:53:54.835	2025-06-29 08:53:54.835
cmchfny8w001b13mpss771hvs	v@7+<l$!@O	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-92b8fa206695b05d46bb986892f0465d07b89e19.jpg">Каков результат выполнения<span style=""background-color: rgb(255, 255, 255);""> </span>этого кода?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-94d07ed4792f12f2677045f168b803a061921bcb.jpg">	{}	47	2025-06-29 08:53:54.848	2025-06-29 08:53:54.848
cmchfny96001c13mpke5l4xts	"dl99#hk(+^"	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	Какой будет вывод?<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-cdd3af2b06b19462126acc62a17c5eef2e369330.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ab63c4c44f41c82391dbe2aad4c0ab579720ba7d.jpg">	{}	48	2025-06-29 08:53:54.859	2025-06-29 08:53:54.859
cmchfny9k001d13mpzbbs2hwy	tie3OhSj6d	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	Что выведется в консоль?<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-629f0ea1c2066279c9a56266306349f2380283de.jpg">	В консоль выведется <b>object</b>, поскольку в JavaScript не предусмотрен отдельный тип данных для массивов.<div><br></div>	{}	49	2025-06-29 08:53:54.872	2025-06-29 08:53:54.872
cmchfny9x001e13mpnktmljx2	u`:VJwpmvR	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	Какой будет вывод в консоли?<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-96817472c8b40ea0f22078147fd99e66f7b46962.jpg">	"Первый console.log выведет true, поскольку используется оператор нестрогого сравнения, вследствие чего значение строкового типа переменной a будет приведено к числовому типу.	{}	50	2025-06-29 08:53:54.885	2025-06-29 08:53:54.885
cmchfnya9001f13mp6xmm2qwz	yOQ/a@p-U]	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	&nbsp;<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e200df481075b9b9098f0e41dbd1e18c598e27e3.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fbddd8b2fa4b74b1f4fef5920301e3d576857024.jpg">	{}	51	2025-06-29 08:53:54.898	2025-06-29 08:53:54.898
cmchfnyan001g13mpckoibizw	N`,VR.Y(|x	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-90611f76d53fb080dca359b3c67d5e1f492402fc.jpg">Что будет выведено в консоль после<span style=""background-color: rgb(255, 255, 255);""> </span>исполнения этого кода?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-69812fd48c292af060dd97b8bb82147bb11ee23d.jpg">	{}	52	2025-06-29 08:53:54.911	2025-06-29 08:53:54.911
cmchfnyaz001h13mpm51zq6c6	D7m<;:BgtH	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f0fd619ff52fe5192aeb96cc62162102cb55da4b.jpg">Что будет выведено в консоль после исполнения этого кода?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c74d91fd9997a6645521718b5e876f160b564f56.jpg">	{}	53	2025-06-29 08:53:54.923	2025-06-29 08:53:54.923
cmchfnybc001i13mphelu03vl	BJY(p)J/~?	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	Какая последовательность цифр будет в консоли<span style=""background-color: rgb(255, 255, 255);""> </span>после&nbsp;выполнения этого кода?<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8639b1ab98d0e34ae273cf4955631d3931ed557d.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2d1be6b0a0c3c45b155e28dc5c3a84043141a245.jpg">	{}	54	2025-06-29 08:53:54.936	2025-06-29 08:53:54.936
cmchfnybp001j13mpsvugom0h	sQ`r6V4F{<	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e58e6cf7b478cad2e6d8ca62fb1bb91ef244b4d4.jpg">Что будет выведено в консоль?	6 8 2 3 4 0 1&nbsp;	{}	55	2025-06-29 08:53:54.949	2025-06-29 08:53:54.949
cmchfnyc2001k13mpurp9hu5n	mZG3sm$RYx	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	Что будет выведено в консоль?<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-51695b6d4b484f0c2379a41eef1adb022542b1e1.jpg">	two<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7ed1a6a46e1b907325c1347e8ac04ee5e8ec5b65.jpg">	{}	56	2025-06-29 08:53:54.962	2025-06-29 08:53:54.962
cmchfnycf001l13mpl478mtjt	A3!bTpg,)-	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	Каков результат исполнения кода?<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5195920c204da02bb49df3941fbb9c15c0139be6.jpg">	3 2 16 16&nbsp;	{}	57	2025-06-29 08:53:54.975	2025-06-29 08:53:54.975
cmchfnycs001m13mpeouechyg	y?_~%&YzMP	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b2ee4745ea464ce39b735ba17da3b865b7e8befd.jpg">	Сначала исполнится синхронный код (1 и 5), затем микрозадачи (3 и 4), а затем макрозадача (2)&nbsp;	{}	58	2025-06-29 08:53:54.988	2025-06-29 08:53:54.988
cmchfnyd4001n13mpg8mkji15	rJQ?|Z)Aa`	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	Каким будет результат выполнения данного кода?<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5bf1c870aff78c6753fff4de0a241074ff06fe7a.jpg">	[1,10,3]<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b99d489b99fbfb269bcc24d3e709ec2ad027e948.jpg">	{}	59	2025-06-29 08:53:55.001	2025-06-29 08:53:55.001
cmchfnydi001o13mpop63gtoe	"Ba#6-i&uEa"	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	Что будет выведено в консоль?<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5675a5dd93dc0dd0c095f5f0752c20724195c1fd.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3a8776a60b5108d96f8d67dece2ddb0dd0671ddb.jpg">	{}	60	2025-06-29 08:53:55.014	2025-06-29 08:53:55.014
cmchfnydv001p13mppg0qju2r	Kl:BHW[K^U	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	Каков будет результат сложения массивов?<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2be24eda9efd0b9460da74df2346102298547315.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8e7b79cd4e37bd49d8c39885697b71d056a02283.jpg">	{}	61	2025-06-29 08:53:55.027	2025-06-29 08:53:55.027
cmchfnye8001q13mp9lymx97s	jMDh|FA01p	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	для чего используется атрибут target&nbsp;	где будет открыта ссылка&nbsp;<br><ul><li>_self - в текущем окне</li><li>_blank - в новом окне</li></ul>	{}	62	2025-06-29 08:53:55.04	2025-06-29 08:53:55.04
cmchfnyel001r13mpyn3liuxj	lTxU:)oVeU	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	разница между &lt;article&gt; и &lt;section&gt;	section - смысловой раздел, который нельзя отделить от&nbsp;конкретной страницы или документа<br>article - отделяемый от сайта смысловой раздел&nbsp;	{}	63	2025-06-29 08:53:55.053	2025-06-29 08:53:55.053
cmchfnyew001s13mpshtpv87j	BYn[(5|T-y	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	разница display: none и visibility: hidden&nbsp;	display: none делает элемент невидимым и убирает его место в потоке документа<br>visibility: hidden делает элемент невидимым, но сохраняет его место в потоке	{}	64	2025-06-29 08:53:55.065	2025-06-29 08:53:55.065
cmchfnyfa001t13mp8m3w2liw	oK?{.9mQl;	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Что такое IIFE?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-973cf00fedad58bbef78b1fcc16b1ea1a2bebe06.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-67348b70afee6c6ce03b3a27c7bfa1f724fc64fa.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d12398384233fcce97a9df019bd12e102dd4aeff.jpg">	{}	65	2025-06-29 08:53:55.078	2025-06-29 08:53:55.078
cmchfnyfo001u13mpzwzbepaa	Cq)kNYY,1{	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	типы таймеров в js&nbsp;	<strong><code>setTimeout -&nbsp;</code></strong>выполняет функцию один раз через указанный интервал времени<br><strong><code>setInterval -&nbsp;</code></strong>функцию периодически через указанный интервал времени<br>clearTimeout: очищает таймер, установленный с помощью setTimeout<br>clearInterval: очищает таймер, установленный с помощью setInterval	{}	66	2025-06-29 08:53:55.092	2025-06-29 08:53:55.092
cmchfnyg1001v13mp7y7w3w9q	L-j(<KW/lz	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	разница между .forEach() и .map()	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ebf3d88d580134679de236e63a6032a2fc611d81.jpg">	{}	67	2025-06-29 08:53:55.105	2025-06-29 08:53:55.105
cmchfnygg001w13mpk4mqte1j	KRm>l6`T:V	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	push()<br>inshift()	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-570c0f418a349368a8f5d01dd77d7b8344207bcb.jpg">	{}	68	2025-06-29 08:53:55.121	2025-06-29 08:53:55.121
cmchfnygp001x13mp56d7me1w	oQgmx6A&VV	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	разница между in и .hasOwnProperty()	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d7d914b6fb7c8c2a8916369f3b5e888806429c88.jpg">	{}	69	2025-06-29 08:53:55.13	2025-06-29 08:53:55.13
cmchfnyh0001y13mphaygkod5	M=vctC8^l7	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	разница между .find, .findIndex(), .indexOf()	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2210844e72717d89da381f8d25838636fb8c3bc8.jpg">	{}	70	2025-06-29 08:53:55.141	2025-06-29 08:53:55.141
cmchfnyhb001z13mphta6ohff	pmm2T%a.*@	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	разница между&nbsp;.push(), .pop(), .shift() и .unshift():	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c994e9d07a591b03358ea4fa407046f5def9ce50.jpg">	{}	71	2025-06-29 08:53:55.152	2025-06-29 08:53:55.152
cmchfnyhn002013mppohi5rby	"iJY.Lg!#LJ"	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	типы объектов	<ul><li>массивы</li><li>функции</li><li>глобальный объект date</li><li>map</li><li>set</li><li>weakmap</li><li>weakset</li></ul>	{}	72	2025-06-29 08:53:55.164	2025-06-29 08:53:55.164
cmchfnyi0002113mpdgzl9flb	H!fk,B?myh	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	Разница между typeof и instanceof	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-60ef60287cea1429eda7cc1bce06450f665344b1.jpg">	{}	73	2025-06-29 08:53:55.177	2025-06-29 08:53:55.177
cmchfnyid002213mp734ysu2w	EeP>R<76g;	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	типы функций (10 видов)	<div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-72cf94cc5810cfe4b71508e4244b403738b46779.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d66f3e38cb03f5ae626016e2fbb76134623425bf.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-eda9e404b761bc6e601a8556a6abee20eb3248dd.jpg"><br></div>	{}	74	2025-06-29 08:53:55.19	2025-06-29 08:53:55.19
cmchfnyin002313mpckan3ale	M&w7;q35Ep	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	типы узлов DOM	<ul><li>Документ (Document Node)</li><li>Элементы (Element Nodes)</li><li>Текстовые узлы (Text Nodes)</li><li>Атрибуты (Attributes Nodes)</li><li>Коментарии (Comment Nodes)</li></ul>	{}	75	2025-06-29 08:53:55.2	2025-06-29 08:53:55.2
cmchfnyj0002413mpwd12tkl2	jvR;R!hI~`	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	Что такое поток документа? Как его можно изменить	Это упорядоченный, дефолтный принцип организации элементов на странице.<br>Мы можем изменять его с помощью float(обтекание), position	{}	76	2025-06-29 08:53:55.213	2025-06-29 08:53:55.213
cmchfnyjd002513mpgy1gzd12	fYqn6g1~H;	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	Разница между layout, painting и compositing?	<ul><li>Layout - определяет размеры и позиции</li><li>Painting - преобразует элементы в пиксели</li><li>Compositing - объединяет элемы в изображение</li></ul><div><br></div><div><br></div>	{}	77	2025-06-29 08:53:55.226	2025-06-29 08:53:55.226
cmchfnyjo002613mpka9sjkf2	BH.U5H^{y8	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	Что такое Core Web Vitals? Какие основные метрики туда входят?	<div>веб-метрики, придуманные в гугле</div><ul><li>Сколько времени занимает рендер самого ""тяжелого"" элемента</li><li>Задержка перед взаимодействием пользователя и реакцией страницы</li></ul>	{}	78	2025-06-29 08:53:55.237	2025-06-29 08:53:55.237
cmchfnyk1002713mp3ipmopj5	sm8O2{-|O[	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	принципы REST (5)	<ul><li>модель взаимодействия клиент-сервер</li><li>система может быть многоуровневой</li><li>сервер не обладает состоянием, каждый раз ""общение"" как в первый раз</li><li>единообразный унифицироваранный интерфейс</li><li>кэширование</li></ul><div><br></div>	{}	79	2025-06-29 08:53:55.25	2025-06-29 08:53:55.25
cmchfnykd002813mpq1ytimnr	pZ0g$]MXM^	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	Что такое OSI модель?	Модель сетевого взаимодействия (Open Systems Interconnection)<br><ul><li>дает подробное и полное описание принципа работы сетевого взаимодействия&nbsp;</li><li>разбивает сетевое взаимодействие на абстрактные слои - от физического до прикладного</li></ul>	{}	80	2025-06-29 08:53:55.262	2025-06-29 08:53:55.262
cmchfnyko002913mp7170b8li	hH<S2)MGY5	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	примерный сценарий работы HTTP-протокола	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-33ee6dd0d8ac9a5916e0812c3b839ffdb9b5ff9f.jpg">	{}	81	2025-06-29 08:53:55.273	2025-06-29 08:53:55.273
cmchfnykz002a13mp69w1st13	t8Vnx>2hp.	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	что такое протокол UDP	протокол транспортного уровня (user datagram protocol)<br><ul><li>использует датаграммы</li><li>они передаются без рукопожатия и установленного соединения</li><li>доставка и подтверждение данных не гарантированна</li></ul><div><br></div><div><br></div>	{}	82	2025-06-29 08:53:55.284	2025-06-29 08:53:55.284
cmchfnylb002b13mpmgxehmnx	Hb,w^$4oXB	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	что такое TCP. основные характеристики	транспортный протокол<br><ul><li>трехэтапное рукопожатие</li><li>надежность передачи</li><li>постоянное соединение</li></ul>	{}	83	2025-06-29 08:53:55.296	2025-06-29 08:53:55.296
cmchfnylm002c13mpddfa6zq5	k%34Ux][_^	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	что такое IP	Internet Protocol address<br><ul><li>Уникальный числовой идентификатор, присваемый каждому устройству, подключенному к интернету</li><li>используется для определения и маршрутизации данных между устройствами</li><li>обычно представлен в ввиде&nbsp; IPv4 или IPv6</li></ul>	{}	84	2025-06-29 08:53:55.307	2025-06-29 08:53:55.307
cmchfnyly002d13mpn5vnjb30	uR-{.jv{TZ	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	Разница между host и domain?	<ul><li>хост - конкретный сервер или компьютер, который общается в формате клиент-сервер</li><li>домен - название сайта, адрес</li></ul>	{}	85	2025-06-29 08:53:55.319	2025-06-29 08:53:55.319
cmchfnyma002e13mp33b83j5y	C6UDjEOOIW	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	Разница между URI и URL?	<ul><li>URL подмножество URI</li><li>URI - более общий термин, нежели просто способ определния местоположения ресурса в интернете&nbsp;</li></ul>	{}	86	2025-06-29 08:53:55.331	2025-06-29 08:53:55.331
cmchfnymm002f13mppuh9u7vi	v7(DE{4/!<	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	Разница между идентификацией, аутентификацией, авторизацией?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4922ce2a619fc7d6f87761e9b8c868bcb6f8c169.jpg">	{}	87	2025-06-29 08:53:55.343	2025-06-29 08:53:55.343
cmchfnymw002g13mpjii1dqwa	u!mN0r0S5+	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f8f8d4a984b32a6132ed5333125e5f785005a830.jpg">какой будет результат	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7f21b25bcb9a4fac6145f753ee924da38382a3bc.jpg">	{}	88	2025-06-29 08:53:55.353	2025-06-29 08:53:55.353
cmchfnyn7002h13mpz4gdf84g	NpImq?0SFD	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-da9a992edcdc6938842605bc5ab03fd9461b75b3.jpg">чем равно	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-739d79892dcf197cb74c120e94f28931fce58fea.jpg">	{}	89	2025-06-29 08:53:55.364	2025-06-29 08:53:55.364
cmchfnynj002i13mpmksf2p6v	w)Z7yui?2k	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-643fa315354516657c5d94fe65067b1045a6f344.jpg">что выведет код	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d44947e198087124865124e484633f2e8adf12e3.jpg">	{}	90	2025-06-29 08:53:55.376	2025-06-29 08:53:55.376
cmchfnynt002j13mpvmws2cot	y:}IQ[5>og	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	что такое virtual DOM, краткий принцип работы&nbsp;	<div><ul><li>копия реального DOM в виде js-объектов</li><li>при изменении состояния реакт создает новый VDOM, сравнивает его с предыдущим состоянием и эффективно обновляет только те части реального DOM, что изменились&nbsp;</li></ul></div>	{}	91	2025-06-29 08:53:55.386	2025-06-29 08:53:55.386
cmchfnyo6002k13mpkwzue1vf	nAL$s`h@qS	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	что такое алгоритм реконсиляции (reconcilation) в реакт	<ul><li>механизм для эффективного обновления виртуального и реального DOM</li><li>начинается с сравнения предыдущего и нового состояния v-dom</li><li>реакт определяет минимальное кол-во изменений, необходимых для изменения реального DOM и применяет их&nbsp;</li></ul>	{}	92	2025-06-29 08:53:55.399	2025-06-29 08:53:55.399
cmchfnyoi002l13mpt3ipu14s	xp_&DoUNK:	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	что такое refs&nbsp;	возможность напрямую получить доступ к DOM-узлу и проводить дальнейшее манипулирование с ним	{}	93	2025-06-29 08:53:55.411	2025-06-29 08:53:55.411
cmchfnyou002m13mpiuece5ei	I&.`gfXx}g	Простая	СБОРНИК::REACT Теория::REACT Компоненты	REACT Теория	REACT Компоненты	как отследить демонтирование функционального компонента&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5d51947a2f3a666dfae21eed043352163ed785ba.jpg">	{}	94	2025-06-29 08:53:55.423	2025-06-29 08:53:55.423
cmchfnyp7002n13mpdt7j543s	knav@Rh{7$	Простая	СБОРНИК::REACT Теория::REACT Компоненты	REACT Теория	REACT Компоненты	контролируемые компоненты vs неконтролируемые&nbsp;	<ul><li>контролируемые - ""контролируем"" значение, через состояние (useState)&nbsp;</li><li>неуправляемые - используется useRef для манипулирования напрямую через DOM</li></ul><br>	{}	95	2025-06-29 08:53:55.436	2025-06-29 08:53:55.436
cmchfnypi002o13mpnu4ud9w5	J0a!N$2AMv	Простая	СБОРНИК::REACT Теория::REACT Компоненты	REACT Теория	REACT Компоненты	что происходит в этом коде? где тут двухстороннее связывание, управляемый инпут, неуправляемый?&nbsp;<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6921964647554b08811abebdfdfbe012872a6cc6.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ce17cc1ff5cb319c13e2e7c1167575d7cd374fa2.jpg">	{}	96	2025-06-29 08:53:55.446	2025-06-29 08:53:55.446
cmchfnyps002p13mp06ign71z	"x,&I%_rs#A"	Простая	СБОРНИК::REACT Теория::REACT Компоненты	REACT Теория	REACT Компоненты	как реализовать двусторонее связывание данных в неуправляемых компонентах?	<ul><li>создать ref</li><li>обновлять состояние напрямую через DOM</li></ul><div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0fd806727c7e009a75e740c01aa12c9d259580ce.jpg"><br></div>	{}	97	2025-06-29 08:53:55.456	2025-06-29 08:53:55.456
cmchfnyq3002q13mp6zwzth12	G<7>PI0$<,	Простая	СБОРНИК::REACT Теория::REACT Компоненты	REACT Теория	REACT Компоненты	как выбрать между классовыми и функциональными компонентами&nbsp;	<ul><li>функциональные - если не нужны жизненные циклы и локальное состояние</li><li>классовые - если нужны методы жизненного цикла или локальное состояние&nbsp;</li></ul><div><br></div>	{}	98	2025-06-29 08:53:55.468	2025-06-29 08:53:55.468
cmchfnyqg002r13mpbdl9ip2c	s/9RKWY0aQ	Простая	СБОРНИК::REACT Теория::REACT Компоненты	REACT Теория	REACT Компоненты	Что такое PROPS?	это механизм передачи данных от родительских компонентов к дочерним&nbsp;	{}	99	2025-06-29 08:53:55.48	2025-06-29 08:53:55.48
cmchfnyqs002s13mp9crdjyr7	ptl.Z1|p<$	Простая	СБОРНИК::REACT Теория::REACT Компоненты	REACT Теория	REACT Компоненты	Что такое сhildren?	специальное свойство компонента, предназначенное для передачи и встраивания вложенных элементов	{}	100	2025-06-29 08:53:55.493	2025-06-29 08:53:55.493
cmchfnyr5002t13mpwsw08pez	x<Qz<ld!%J	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	В чем разница между рендерингом и монтированием компонента?	Монтирование - это создание компонента и его последующая ""вставка"", монтирование в реальный DOM, в отличии от рендеринга (обновления)	{}	101	2025-06-29 08:53:55.506	2025-06-29 08:53:55.506
cmchfnyrg002u13mpxqdjx4t2	k9pj<)VNC%	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	Как реализовать однократное выполнение операции при начальном рендеринге?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3e6fe4af1b041340ee44a2f9a2f541af4e996980.jpg">	{}	102	2025-06-29 08:53:55.516	2025-06-29 08:53:55.516
cmchfnyrr002v13mplt63b2i5	d*hMxkc:qv	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	Правила (ограничения) использования хуков	<ul><li>использовать внутри функциональных компонентов</li><li>вызывать только на верхнем уровне</li><li>важен порядок вызова хука</li><li>хуки не создаются внутри циклов и условий&nbsp;</li></ul>	{}	103	2025-06-29 08:53:55.528	2025-06-29 08:53:55.528
cmchfnys2002w13mpmf6wcg43	"s|p`iAcoB#"	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	useState, особенности	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-183cd7b9fdfcf5ba15a46c13093a51492ae5bf2d.jpg">	{}	104	2025-06-29 08:53:55.539	2025-06-29 08:53:55.539
cmchfnyse002x13mpauen3of5	LNWb=Pr8/^	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	useEffect. особенность useEffect	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7dfcd188c590761bfd556c91acf40853dc911467.jpg">	{}	105	2025-06-29 08:53:55.551	2025-06-29 08:53:55.551
cmchfnysq002y13mp2fkzcbvk	Qd6YBPP$=V	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	useContext, особенность	<div>позволяет использовать механизм контекста</div><ul><li>используем <b>контекст (</b>React.createContext({})<b>)</b></li><li>оборачиваем в провайдер с указанным пропсом</li><li>вытаскиваем данные из контекста без пропс дриллинга&nbsp;</li></ul>	{}	106	2025-06-29 08:53:55.563	2025-06-29 08:53:55.563
cmchfnyt3002z13mpy0z5slfm	bx]XADST3m	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	Разница между memo и useMemo	1. memo -&nbsp;функция высшего порядка (HOC) для мемоизации функциональных компонентов<br>2. useMemo -&nbsp;хук для мемоизации значения, возвращаемого функцией	{}	107	2025-06-29 08:53:55.576	2025-06-29 08:53:55.576
cmchfnytf003013mptrd98dpj	H*ofygex;:	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	Какие подходы к управлению состоянием в React существуют?	<ul><li>локальный стейт, изменяемый методом setState</li><li>redux - библиотека управления состоянием с единым объектом состояяния (store) и редьюсерами</li><li>Context API - встроенный механизм для передачи данных через дерево компонентов, используется вместе с хуком useReducer</li></ul><div><br></div>	{}	108	2025-06-29 08:53:55.588	2025-06-29 08:53:55.588
cmchfnytq003113mpvmapi3zg	BwX/GarD8u	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	&nbsp;Ключевые принципы Redux?	<ul><li><b>Единый источник истины&nbsp;</b>- весь стейт хранится в едином источнике истины, в так называемом сторе&nbsp;<br></li><li>состояние доступно <b>только для чтения</b> (state is read-only)</li><li>изменения выполняются с использованием <b>чистых функций</b> : функции редьюсеры, обрабатывающие изменения состояния, должны быть чистыми и не иметь побочных эффектов&nbsp;</li></ul>	{}	109	2025-06-29 08:53:55.599	2025-06-29 08:53:55.599
cmchfnyu1003213mpa179qk4y	d;>G-_Ba6Z	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	Что такое редьюсер?	чистая функция, принимающая текущее состояние приложение и action, а затем возвращающее новое состояние	{}	110	2025-06-29 08:53:55.61	2025-06-29 08:53:55.61
cmchfnyuc003313mpcmmxzgeq	"g^j0V/(8{#"	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	Как редьюсер связан с обновлением состояния в Redux?	<ul><li>действие отправляется в redux, передается в редюсер, отвечающий за обработку этого типа действия</li><li>редюсер выполняет чистую функцию, принимающую текущее состояние и действие, и возвращает новое состояние&nbsp;</li><li>новое состояние заменяет предыдущее и redux уведомляет все подписанные компоненты о изменении, что вызывает их перерисовку&nbsp;</li></ul>	{}	111	2025-06-29 08:53:55.621	2025-06-29 08:53:55.621
cmchfnyuo003413mp0akibl0h	Ilcg(He/du	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	Разница между React State и Redux State?	react state<br><ul><li>ограничен локальным компонентом&nbsp;</li><li>управляется и обновляется с помощью метода useState</li><li>локальное хранение данных&nbsp;</li><li>простые состояния</li></ul><div>redux state</div><div><ul><li>глобальность и централизованность</li><li>управление через редьюсеры, экшоны&nbsp;</li><li>подходит для хранения глобальных данных</li><li>управление сложными состояниями</li></ul></div>	{}	112	2025-06-29 08:53:55.633	2025-06-29 08:53:55.633
cmchfnyv2003513mpwr7tahsf	jj{OK<3xE&	Простая	СБОРНИК::TS Теория	TS Теория	\N	Модификаторы доступа в TypeScript	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7037aa1a743eb997202f6802f55f5fdc88a437ae.jpg">	{}	113	2025-06-29 08:53:55.646	2025-06-29 08:53:55.646
cmchfnyvd003613mp77vb22uu	F(>T+3PFbq	Простая	СБОРНИК::TS Теория	TS Теория	\N	абстрактный класс vs интерфейс	<div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-976b68957893b574e07d974783f2330a3faad5ec.jpg"><br></div><br>	{}	114	2025-06-29 08:53:55.657	2025-06-29 08:53:55.657
cmchfnyvo003713mpg7buruvs	i(fOAcTA@h	Простая	СБОРНИК::TS Теория	TS Теория	\N	Ключевое слово declare в TypeScript	declare используется для объявления переменных, функций, классов, интерфейсов или пространств имен, которые уже существуют на JavaScript, но не были написаны на TypeScript	{}	115	2025-06-29 08:53:55.669	2025-06-29 08:53:55.669
cmchfnyvy003813mpuco3fecq	n)gHG4N;FR	Простая	СБОРНИК::TS Теория	TS Теория	\N	объединение vs пересечение&nbsp;	<div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fa1fbe906e6756d110eea9fbced2dd8721507fee.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-be4fb78074b6c47708670f54c4f09abe2fe0803b.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f60983bd52a8e70b7c08d444760b83be79f33564.jpg"><br></div>	{}	116	2025-06-29 08:53:55.678	2025-06-29 08:53:55.678
cmchfnyw9003913mp5emaa9h2	ubq-f8x)6	Простая	СБОРНИК::TS Теория	TS Теория	\N	Разница между типами void, never и unknown?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-718befdb938f4a233f31518c4a88637ebbbe2631.jpg">	{}	117	2025-06-29 08:53:55.69	2025-06-29 08:53:55.69
cmchfnywl003a13mp0fywuvqg	s-1Ns6l+QT	Простая	СБОРНИК::REACT Теория::REACT Компоненты	REACT Теория	REACT Компоненты	этапы жизненного цикла компонента&nbsp;	<ul><li>инициализация - подготовка начального состояния и параметров</li><li>монтирование - УЖЕ готов для вставки в DOM&nbsp;</li><li>обновление - при изменении свойства или состояния&nbsp;</li><li>размонтирование - удаление из DOM</li></ul>	{}	118	2025-06-29 08:53:55.702	2025-06-29 08:53:55.702
cmchfnyww003b13mp2xq5kguz	yW|Pzf=mpE	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	<h3>Что такое порталы в React?</h3>	позволяют ""телепортировать"" элемент в определнное место в дереве, при этом держа сам элемент вне родительского компонента. полезно при модалках	{}	119	2025-06-29 08:53:55.713	2025-06-29 08:53:55.713
cmchfnyx8003c13mpym3sxnnl	ghhpuJ%Rf	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	useCallback для чего нужен и когда использовать?	<ul><li>возвращает мемоизированную версию колбэка, который изменяется только если изменяется значение в массиве зависимостей&nbsp;</li><li>предотвращение ререндеров&nbsp;</li></ul>	{}	120	2025-06-29 08:53:55.725	2025-06-29 08:53:55.725
cmchfnyxk003d13mpcgh6y604	E/v74M!@ea	Простая	СБОРНИК::REACT Теория::REACT Компоненты	REACT Теория	REACT Компоненты	<h3>Как создать компонент высшего порядка?</h3>	<img alt=""Higher Order Components"" src=""Higher-Order-Components-fc592358b52679c055ebd76ece07210e.jpg"">создать функцию, которая будет принимать компонент и возвращать&nbsp; новый компонент&nbsp;	{}	121	2025-06-29 08:53:55.737	2025-06-29 08:53:55.737
cmchfnyxw003e13mpl1pqplxy	EEge95O$Z=	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	Что такое элемент? Какие свойства он имеет и особенности&nbsp;	<ul><li>элемент - immutable объект, возвращающийся, в случае с функциональными,&nbsp; как функция и описывающий виртуальное представление DOM узла.</li><li>&nbsp;имеет 4 свойства : type, key, ref, props</li><li>элемент - не экземпляр компонента, а описание того как должен выглядеть экземпляр&nbsp;</li><li>могут иметь потомков типа как у реального DOM</li></ul>	{}	122	2025-06-29 08:53:55.749	2025-06-29 08:53:55.749
cmchfnyy8003f13mp6vuiecdl	guE+!{=*0Q	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	почему сравнение v dom и реального происходит очень быстро?	используется эвристический алгоритм O(n) - улучшенная версия O(n^3)<br><ul><li>Два элемента с&nbsp;разными типами произведут разные деревья<br></li><li>key - обязательно указываем при рендере массивов, чтобы реакт различал и понимал, какие элементы изменились и работал только с ними</li></ul><div><font color=""#1a1a1a""><br></font></div>	{}	123	2025-06-29 08:53:55.761	2025-06-29 08:53:55.761
cmchfnyyl003g13mpbjddwkvn	wxT2x^27uJ	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	что будет если у useEffect поковырять массив зависиомостей следующим образом<br><ul><li>массив не указан&nbsp;</li><li>указан пустой массив</li><li>указан массив с элементами</li></ul><div><br></div><div><br></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4d218c24eac22ec282b6863c2782d36df0e0ad9c.jpg">	{}	124	2025-06-29 08:53:55.774	2025-06-29 08:53:55.774
cmchfnyyx003h13mp2dgy19f2	Hhgu>r}:Ru	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	Есть массив чисел. Как бы ты его сортировал?<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2a8acf92cd64702e4b8c1b82889ae2ebae33e019.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6d2bbf27ba1cbb82d953b5b91d57859cc122cf56.jpg">	{}	125	2025-06-29 08:53:55.786	2025-06-29 08:53:55.786
cmchfnyzb003i13mpe532vkg6	xAXOA8!rXR	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bfc063e1b60eec54877d2819e56d878729d64be6.jpg"><br>что будет выводить счетчик при многократном нажатии?&nbsp;<br>как сделать так, чтобы счетчик при однократном нажатии увеличивался каждый раз на 3?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a00ef17a2439ed9ede79a1f0b8594f776deb9cb0.jpg">	{}	126	2025-06-29 08:53:55.799	2025-06-29 08:53:55.799
cmchfnyzo003j13mp71ndvtp7	LiJ9`JH?S|	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d950455d0bafacfca45e368a1ec1e36a6b8ff515.jpg"><br>при нажатии на кнопку необходимо получать значения из инпутов<br><ul><li>как получить значение с управляемого?</li><li>как получить значение с неуправляемого?&nbsp;</li></ul><div><br></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e1b8e464881e73ff17ed3855c37fd7189e581bef.jpg">	{}	127	2025-06-29 08:53:55.812	2025-06-29 08:53:55.812
cmchfnz00003k13mpg8c6zw3t	O,w2(ugj6S	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	что было введено в ES6? Основные моменты&nbsp;	<ul><li>константы и блочная область видимости</li><li>Промисы&nbsp;</li><li>стрелочные функции</li><li>деструктуризация&nbsp;</li><li>спрэд оператор</li><li>классы</li><li>итераторы и генераторы&nbsp;</li><li>новые методы : map, filter, reduce, Object.assign, Object.keys</li></ul><div><br></div>	{}	128	2025-06-29 08:53:55.825	2025-06-29 08:53:55.825
cmchfnzcs004n13mp94n8ig7l	N&`vN}EHmp	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6e4b8025563ddf3de44c7036a42eaaaf8f3ddbdc.jpg">	<ul><li>[ 1, 2, 3, &lt;7 empty items&gt;, 11 ]</li></ul>	{}	167	2025-06-29 08:53:56.284	2025-06-29 08:53:56.284
cmchfnz0b003l13mpb6zine50	H}3KFzndhU	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Допустим, я ничего не знаю о селекторах. Объясни мне, что это такое&nbsp;	селекторы позволяют выделить какой-то DOM-элемент, чтобы применить к нему какое-то css-правило. Выделять можно по разному :<br><ul><li>сам элемен, div span и тд</li><li>по классу</li><li>по айди&nbsp;</li></ul>При этом у селекторов есть специфичность и также работает каскадность&nbsp;	{}	129	2025-06-29 08:53:55.836	2025-06-29 08:53:55.836
cmchfnz0l003m13mpmtkkobuo	A;A]o3u5..	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3cc8796e8f03454cef7800dfc707a48e75a0a474.jpg"><br>написать функцию, либо последовательность операций, которая вернет результат следующих условий :<br><ul><li>результат есть строка из сконкатенированных value элементов коллекции, расположенных в обратном порядке букв</li><li>результат собирается только из непросроченных записей и конкатенирутся в порядке возрастания order</li><li>результат не содержит одинаковых букв&nbsp;</li></ul>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-22841f2db595017f203b8cb8ca00f32e849a29fc.jpg">	{}	130	2025-06-29 08:53:55.845	2025-06-29 08:53:55.845
cmchfnz0x003n13mp487lebv8	sj>rH(ntJ+	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4f99b247465075a439a7cd85f10703f2e04cc648.jpg"><br>что можете рассказать про эти операторы?&nbsp;	1.&nbsp;<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-864755d039b4ab9b752a1c42cc724e40c0d1a9cd.jpg"><br>2.&nbsp;<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ba26a0bf88775982cf711788705c8b39a332368d.jpg"><br>2.1&nbsp;<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3c672d4453aac043f2df6d7dd6e5fe4334c97027.jpg"><br>3.<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1327422d9f86d5d0b1a35d48a2b009a8afe9a64c.jpg"><br>4.<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bbc31871ee4eb5467da0deea2fd7e0bea1f233e0.jpg"><br>5.<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7536739fe93fb8353f63de67532e08b6c183e6ad.jpg"><br>6.<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ca92fd13b625ffbeb098d95b0d7fae0fdb2842f4.jpg"><br>7.<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ab47e19714b7a2c603b741d2ea242c10e7b5a13b.jpg"><br>8.<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0c5f0e372cd498edc54a42f41794d51df5fab9c7.jpg">	{}	131	2025-06-29 08:53:55.858	2025-06-29 08:53:55.858
cmchfnz19003o13mpz0dyehxi	d*)bfNp!6=	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<div><pre><span style=""font-weight: bold; font-style: italic;"">import </span>React, <span style=""font-weight: bold;"">{</span>useState<span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>""react"";<br><br><br><br><span style=""font-weight: bold; font-style: italic;"">function </span>Clicker<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[clicks, setClicks] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span>0<span style=""font-weight: bold;"">)</span>;<br><br>    <span style=""font-weight: bold; font-style: italic;"">const </span>onClick <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>setTimeout<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>setClicks<span style=""font-weight: bold;"">(</span>clicks <span style=""font-weight: bold;"">+ </span>1<span style=""font-weight: bold;"">)</span>;<br>        <span style=""font-weight: bold;"">}</span>, 200<span style=""font-weight: bold;"">)</span>;<br>    <span style=""font-weight: bold;"">}</span>;<br><br>    <span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;&gt;<br>            <span style=""font-weight: bold;"">{</span>clicks<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            </span>&lt;button onClick=<span style=""font-weight: bold;"">{</span>onClick<span style=""font-weight: bold;"">}</span>&gt;<br>                Increment<br>            &lt;/button&gt;<br>        &lt;/&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">export default </span>Clicker;</pre><pre><ul><li>Что будет отображено в компоненте в свойстве clicks если несколько раз за 2 секунды нажать кнопку Increment и почему? </li></ul></pre></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-78ce9cca8bc6a8c65517eb0416626997565b9d23.jpg"><br><ul><li>Использование устаревшего значения переменной <code>clicks</code>, захваченного внутри замыкания функции <code>onClick</code>, что приводит к неправильному подсчету кликов.</li></ul><div>Исправление:</div><ul><li>Использование функции-обновления состояния <code>setClicks</code>, которая принимает предыдущее значение состояния в качестве аргумента, вместо использования текущего значения переменной <code>clicks</code>.</li></ul>	{}	132	2025-06-29 08:53:55.87	2025-06-29 08:53:55.87
cmchfnz1m003p13mpk66i5xcl	t(OSF@CF*~	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<pre><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">typeof </span>f1<span style=""font-weight: bold;"">)<br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">typeof </span>f2<span style=""font-weight: bold;"">)<br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">typeof </span>f3<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">function </span>f1 <span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{}<br></span><span style=""font-weight: bold; font-style: italic;"">var </span>f2 <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">function </span><span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{}</span>;<br><span style=""font-weight: bold; font-style: italic;"">let </span>f3 <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">function </span><span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{}</span>;</pre><pre><br></pre><pre><ul><li>Что выведится в консоль?</li></ul></pre>	<ol><li>function (так как у declaration есть hoisting)</li><li>undefined (переменная var по умолчанию инициализируется со значение undefined + функции не присвоено значение)</li><li>ошибка (переменная еще не объявлена)</li></ol>	{}	133	2025-06-29 08:53:55.883	2025-06-29 08:53:55.883
cmchfnz1z003q13mpttrcolyr	ol^(IGuT;m	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<div><pre><span style=""font-weight: bold; font-style: italic;"">var </span><span style=""font-style: italic;"">o </span><span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">{}</span>;<br><span style=""font-weight: bold; font-style: italic;"">var </span><span style=""font-style: italic;"">i </span><span style=""font-weight: bold;"">= </span>0;<br><br><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">function </span><span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-style: italic;"">o</span>.a <span style=""font-weight: bold;"">= </span>'a';<br>    <span style=""font-style: italic;"">i</span><span style=""font-weight: bold;"">++</span>;<br><span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">)()</span>;<br><br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">o</span>, <span style=""font-style: italic;"">i</span><span style=""font-weight: bold;"">)</span>;<br><br><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">function </span><span style=""font-weight: bold;"">(</span>o, i<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>o.b <span style=""font-weight: bold;"">= </span>'b';<br>    i<span style=""font-weight: bold;"">++</span>;<br><span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">)(</span><span style=""font-style: italic;"">o</span>, <span style=""font-style: italic;"">i</span><span style=""font-weight: bold;"">)</span>;<br><br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">o</span>, <span style=""font-style: italic;"">i</span><span style=""font-weight: bold;"">)</span>;<br><br></pre><pre><ul><li>что выведется в консоль и почему?</li></ul></pre></div>	<div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2c8487b231b3e47631cde3fe210db76628234201.jpg"><br></div><div><ul><li>Особенность <b>IIFE -</b>&nbsp;каждая самовызывающаяся функция работает в своём углу и не знает о других. Переменная i увеличивается только внутри своей функции и не меняет значение в другой функции.</li></ul></div>	{}	134	2025-06-29 08:53:55.895	2025-06-29 08:53:55.895
cmchfnzc2004l13mp194zhqn1	g.W*QTv]}|	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9da29d8f85ad66dad7d854ad26d3c3ed8bc735cf.jpg">	<ul><li>number</li><li>(() =&gt; 0) () - ублюдочный синтаксис IIFE + стрелошной</li><li>в итоге стрелошная сразу вызвется и нам вернет тип number&nbsp;</li></ul>	{}	165	2025-06-29 08:53:56.258	2025-06-29 08:53:56.258
cmchfnz29003r13mpeuz0uvnw	H9L`-lIdhh	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<pre><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-25e847ca21fc8423f489864efbf6e1e42977a1f7.jpg">что выведется в консоль и почему?</pre>	<ul><li>false - объекты сравниваются по ссылке, а ссылки разные&nbsp;</li><li>false - строго сравниваем, тем более разные&nbsp;</li><li>true - нестрого сравниваем типы</li><li>true - в данном случае разницы между нестрогим и строгим нет&nbsp;</li></ul>	{}	135	2025-06-29 08:53:55.905	2025-06-29 08:53:55.905
cmchfnz2j003s13mp9noofold	BCpgcsws,l	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5c3ca2e91f2d229fa24bb94918d4530988d873ba.jpg"><br><ul><li>что происходит в этом примере?&nbsp;</li><li>валидна ли вообще такая запись?&nbsp;</li></ul><div><br></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7ed33048fe2268534675b7213177fc66d4075861.jpg">	{}	136	2025-06-29 08:53:55.916	2025-06-29 08:53:55.916
cmchfnz2v003t13mp6jtlk7q4	"F8k:jfi$#["	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e33f3c29f6dad7b022b620376b705cc0f2e68928.jpg">есть конструктора и мы их используем. что выведется?	<ul><li>первый успешно, создастся объект</li><li>тоже успешно&nbsp;</li><li><b>ошибка </b>: стрелочные функции не могут использоваться в качестве конструктора&nbsp;</li></ul>	{}	137	2025-06-29 08:53:55.928	2025-06-29 08:53:55.928
cmchfnz36003u13mpu3f2xphi	f9cMEr/VPm	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-59a3f8673e923d15659ac5c5fa44010a1c8ec8af.jpg">что выведет	true, тк к ссылка одна и та же&nbsp;	{}	138	2025-06-29 08:53:55.939	2025-06-29 08:53:55.939
cmchfnz3h003v13mpbnyb6qsa	Lt3h>dS)9v	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b21836b465a2feebfd871f2800f0664a74757d6f.jpg">что выведет	<div><ul><li>fetch выполняется синхронно --&gt; сервер на услышит и придет ответ, НО будет выполняться бесконечный цикл while true&nbsp;</li></ul></div>	{}	139	2025-06-29 08:53:55.95	2025-06-29 08:53:55.95
cmchfnz3s003w13mpp27o41xs	y~>(:kYby$	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6ea9269c27c07c537db78a1c1a24837a5a9f7a15.jpg"><br>принимают/возвращают ?&nbsp;	<ul><li>map - принимает функцию,&nbsp; применяет функцию к исходному массиву и возвращает новый измененный массив</li><li>filter - принимает функцию, фильтрует по заданной функции-условию и возвращает отфильтрованный массив только с теми значениями, для которых функция-условие возвратит true</li><li>some - принимает функцию, возвращает true, если хотя бы один элемент удовлетворяет функции-условию и false в противном случае&nbsp;</li><li>every - принимает функцию, возвращает true если <b>каждый</b>&nbsp;элемент подходит под условие, false в противном случае</li><li>includes - принимает элемент, который нужно найти в массиве,&nbsp; возвращает true если элемент найден в массиве&nbsp;</li></ul>	{}	140	2025-06-29 08:53:55.961	2025-06-29 08:53:55.961
cmchfnz45003x13mp3mnrxat0	G=>1<jf^?,	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d7fe2297e6f74e86a756fde1be5eadca0197a46c.jpg">принимают возвращают?	<ul><li>unshift принимает один или несколько элементов для добавления в начало массива, возвращает новую длину массива после добавления&nbsp;</li><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d5dca587dc538af88d8f7b25d2cfdc66b27a8af9.jpg"><br></li><li>slice принимает начальный и конечный индекс (не включая), определяющие диапозон копирования и возвращает новый массив, содержащий копию указанного диапозона исходного массива&nbsp;</li><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-add815f07aa5587b2ceef0c406af3b142e6b99e5.jpg"><br></li><li>splice принимает начальный индекс, количество элементов для удаления (необязательно) и при необходимости, новые элементы для вставки и возвращает массив удаленных элементов, если такие есть, иначе возвращает пустой массив&nbsp;</li><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5ed128381dd4e68c916bfe10ec05a47fbdf771ff.jpg"><br></li></ul>	{}	141	2025-06-29 08:53:55.973	2025-06-29 08:53:55.973
cmchfnz77004613mp76nbvl2e	prXZ~1Y>)z	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<div><pre><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">undefined </span><span style=""font-weight: bold;"">&amp;&amp; </span>4 <span style=""font-weight: bold;"">&amp;&amp; </span>7<span style=""font-weight: bold;"">)</span></pre><pre>что выведется в консоль и почему? </pre></div>	<ul><li>выведется undefined - логический оператор И&nbsp; ищет первое ложное значение и возвращает его</li><li>если все было бы истинным - выведется последнее значение&nbsp;</li></ul>	{}	150	2025-06-29 08:53:56.083	2025-06-29 08:53:56.083
cmchfnzcf004m13mpd6o7x06h	iY+!c$ZZ+`	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-71fbf81ea8883007b04004743b7be65553999104.jpg">	<ul><li>typeof 1 возвратит стринг ""number""</li><li>typeof&nbsp; ""number"" возвратит стринг ""string""</li></ul><div><br></div>	{}	166	2025-06-29 08:53:56.271	2025-06-29 08:53:56.271
cmchfnz4h003y13mpzlvfspng	t$2<)F}dVe	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fb4cdce613b54e82822bb1e24a5cfa4d421c5f6e.jpg">принимает/возвращает?	<ul><li>Object.create принимает прототип объекта для создания нового объекта, возвращает новый объект, который имеет указанный прототип&nbsp;</li><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f3cbf956cb3ca6a696676370bb8177e4cf799e4f.jpg"><br></li><li>Object.assign принимает целевой объект и источник объекта, свойства которых будут скопированы и возвращает целевой объект после копирования свойств из источников&nbsp;</li><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-eb5bc30520e8bf04daf7f783879f168b518a293a.jpg"><br></li><li>Object.prototype.hasOwnProperty принимает имя свойство, наличие которого проверяется в объекте и возвращает true, если объект содержит указанное свойство, иначе false<br></li><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f72bb52506dcfd452c94b5adb4c3314ad23b80b8.jpg"><br></li></ul>	{}	142	2025-06-29 08:53:55.986	2025-06-29 08:53:55.986
cmchfnz4u003z13mp5dm8ccor	pX<?,E8esa	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-447c3873c97e96a8ec8576297f589fa50bb41e46.jpg"><br>что выведет	<ul><li>конкатенация строк - null1</li><li>плюс перед bar (унарный оператор) пытается преобразовать в число -&gt; NaN -&gt; foo + NaN = fooNaN</li><li>&nbsp;двойное отрицание !! приводит к булеву, а у нас значения оба true (не пустые строки) и сравниваем нестрого, только тип -&gt; true</li></ul>	{}	143	2025-06-29 08:53:55.998	2025-06-29 08:53:55.998
cmchfnz56004013mpujdzl504	w._-]cqJDD	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>foo<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>x <span style=""font-weight: bold;"">= </span>10;<br>    <span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>x<span style=""font-weight: bold;"">: </span>20,<br>        bar<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">this</span>.x<span style=""font-weight: bold;"">)</span>;<br>        <span style=""font-weight: bold;"">}</span>,<br>        baz<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">function </span><span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">this</span>.x<span style=""font-weight: bold;"">)</span>;<br>        <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }</span>;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">obj1 </span><span style=""font-weight: bold;"">= </span>foo<span style=""font-weight: bold;"">()</span>;<br><span style=""font-style: italic;"">obj1</span>.bar<span style=""font-weight: bold;"">()</span>;<br><span style=""font-style: italic;"">obj1</span>.baz<span style=""font-weight: bold;"">()</span>;<br><br><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">obj2 </span><span style=""font-weight: bold;"">= </span>foo.call<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>x<span style=""font-weight: bold;"">: </span>30 <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">)</span>;<br><br><span style=""font-weight: bold; font-style: italic;"">let </span>y <span style=""font-weight: bold;"">= </span><span style=""font-style: italic;"">obj2</span>.bar;<br><span style=""font-weight: bold; font-style: italic;"">let </span>z <span style=""font-weight: bold;"">= </span><span style=""font-style: italic;"">obj2</span>.baz;<br>y<span style=""font-weight: bold;"">()</span>;<br>z<span style=""font-weight: bold;"">()</span>;<br><br><span style=""font-style: italic;"">obj2</span>.bar<span style=""font-weight: bold;"">()</span>;<br><span style=""font-style: italic;"">obj2</span>.baz<span style=""font-weight: bold;"">()</span>;</pre></div>что вернет и почему&nbsp;<br>	<div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f60597f385b1508626813332bc660cb2890944e9.jpg"><br></div><div><br></div>	{}	144	2025-06-29 08:53:56.011	2025-06-29 08:53:56.011
cmchfnz5i004113mp4519vwqg	Ms6s8Bckx*	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<div><pre><div><pre><br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>1<span style=""font-weight: bold;"">)</span>;<br><br>setTimeout<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>2<span style=""font-weight: bold;"">))</span>;<br><br><span style=""font-style: italic;"">Promise</span>.resolve<span style=""font-weight: bold;"">()</span>.then<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>3<span style=""font-weight: bold;"">))</span>;<br><br><span style=""font-style: italic;"">Promise</span>.resolve<span style=""font-weight: bold;"">()</span>.then<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span>setTimeout<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>4<span style=""font-weight: bold;"">)))</span>;<br><br><span style=""font-style: italic;"">Promise</span>.resolve<span style=""font-weight: bold;"">()</span>.then<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>5<span style=""font-weight: bold;"">))</span>;<br><br><br>setTimeout<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>6<span style=""font-weight: bold;"">))<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>7<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span></pre></div></pre></div>в каком порядке будет вывод<br>	<div><ul><li>1 - синхрон</li><li>7 - синхрон</li><li>3 - микротаск</li><li>5 - микротаск</li><li>Тут тонкий момент - микротаск промис тоже выполнился, но распаковал из себя МАКРО таск, который поставился на очередь в КОНЕЦ, так как остальные макротаски уже стоят в очереди&nbsp;</li><li>2 - макротаск</li><li>6 - макротаск</li><li>4 - последний макротаск&nbsp;</li></ul><div><br></div></div><div><br></div>	{}	145	2025-06-29 08:53:56.023	2025-06-29 08:53:56.023
cmchfnz5v004213mpscat60v9	A`vLXmHG+k	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	в результате чего появляется virtual DOM?	в результате РЕНДЕРИНГА	{}	146	2025-06-29 08:53:56.036	2025-06-29 08:53:56.036
cmchfnz67004313mp4boy5f7s	CkW|0}MwJo	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	что такое рендеринг? опишите как происходит процесс рендеринга и почему он происходит так быстро&nbsp;	<ul><li>начиная с корневого компонента идет рекурсивная волна, спускающаяся вниз по дереву компонентов</li><li>в ходе этой волны реакт преобразует jsx в реакт узлы и строит дерево&nbsp;</li><li>новое дерево сравнивается с старым - этот процесс называется процесс <b>реконсиляции (согласования)</b></li><li>этот процесс происходит очень эффективно за счет&nbsp;<b>эвристического</b>&nbsp;алгоритма O(n), который эффективно работает из-за двух правил : два элемента с разными типами произведут разные деревья + легко идентифицировать изменения в массивах за счет уникальных key (которые нужно обязательно указывать)</li></ul>	{}	147	2025-06-29 08:53:56.048	2025-06-29 08:53:56.048
cmchfnz6j004413mphswkonvn	Gd<V3rwKH%	Простая	СБОРНИК::REACT Теория::REACT Компоненты	REACT Теория	REACT Компоненты	Почему происходит ререндеринг компонента? 4 пункта	<ul><li>изменился родитель (рекурсивная волна ререндеринга)</li><li>изменилось состояние</li><li>изменились пропсы</li><li>изменился контекст</li></ul>	{}	148	2025-06-29 08:53:56.059	2025-06-29 08:53:56.059
cmchfnz6t004513mp6y2m0a9p	ro+:g2p4pH	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6d69ab952e797fe64eb9028a049db6d34fccc054.jpg">в каком порядке выполнится код&nbsp;	2 4 3 1&nbsp;	{}	149	2025-06-29 08:53:56.069	2025-06-29 08:53:56.069
cmchfnz7j004713mp0gx50eyd	c$|^9Axkd8	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<pre><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">undefined </span><span style=""font-weight: bold;"">|| </span>7 <span style=""font-weight: bold;"">|| </span>8<span style=""font-weight: bold;"">)</span></pre><pre>что выведется</pre>	<ul><li>используется логический оператор ИЛИ</li><li>выведется первое истинное значение --&gt; 7</li></ul><div><br></div>	{}	151	2025-06-29 08:53:56.096	2025-06-29 08:53:56.096
cmchfnz7v004813mptcd1xeni	fv3br3]iWu	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	function sayHi() {<br>&nbsp; console.log(name)<br>&nbsp; console.log(age)<br>&nbsp; var name = ""John""<br>&nbsp; let age = 30<br>}<br><br>sayHi()	<ul><li>undefined и error</li><li>var - поднимется в начало, но значение не присвоено и по дефолту ставит undefined</li><li>let - поднимется, но останется в TDZ - нельзя обращаться до объявления - error</li></ul><div><br></div>	{}	152	2025-06-29 08:53:56.107	2025-06-29 08:53:56.107
cmchfnz83004913mp2q4v8tdo	Q@rt/Sf6N4	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ed99fafa5d79794c8613813bc6127406fe2b5e8d.jpg">	<ul><li>3 3 3 и 0 1 2<br></li></ul>	{}	153	2025-06-29 08:53:56.116	2025-06-29 08:53:56.116
cmchfnz8g004a13mpxwpbmgom	H}8^iqAXEp	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4085297ffe7795bb10ca859abcc3e43d1ad7a224.jpg">	<ul><li>20 и Undefined</li><li>диаметр - обычная функция и в ней контекст работает по нормальному, а у стрелочных нет своего контекста и this тащит его извне - из глобального объекта window, а там нет свойства радиус</li></ul>	{}	154	2025-06-29 08:53:56.128	2025-06-29 08:53:56.128
cmchfnz8s004b13mp7uutcw0e	w_)3T`W^q6	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-aacc580b3ee20edd8c1ad6bb1f1acc2bfdfa7972.jpg">	<ul><li>1 и false</li><li>унарник + приводит к числу, в данном случае булиан true == 1&nbsp;</li><li>! логически переворачиваем значение, непустая строка - это true&nbsp; --&gt; !true=false</li></ul>	{}	155	2025-06-29 08:53:56.141	2025-06-29 08:53:56.141
cmchfnz94004c13mpnwqxs1uc	b|W6bK_h!Z	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-41b2accfda472d3b13ca33abe63a612ff32db316.jpg">	<ul><li>Hello!</li><li>в строчке d=c мы присвоим ссылку на объект в памяти, следовательно любые изменения в объекте будут отражены на всех ссылках этого объекта&nbsp;</li></ul>	{}	156	2025-06-29 08:53:56.152	2025-06-29 08:53:56.152
cmchfnz9f004d13mpq4mij356	ewzp4ZGWK5	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-368acf7f97c033d1f219135a23dd47acb72cf6e0.jpg">	<ul><li>&nbsp;true false false&nbsp;</li><li>new Number - это конструктор и он создает объект</li></ul>	{}	157	2025-06-29 08:53:56.164	2025-06-29 08:53:56.164
cmchfnz9r004e13mpydhp54m9	w*pCRc;W/p	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-dcfecb05e932efcf808ac623d72daee311cc803d.jpg">	<ul><li>выдаст ошибку&nbsp;</li><li>мы добавляем к&nbsp; самому конструктору, а нужно к его протитипу, чтобы экземпляры корректно наследовали метод</li><li>правильная запись&nbsp;<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8cd8f3ea813ae521b75656aaf1c62964a07aeee8.jpg"><br></li></ul>	{}	158	2025-06-29 08:53:56.176	2025-06-29 08:53:56.176
cmchfnza1004f13mph7qyell9	CsoWJE4/vE	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-53528f76588e19b4a23c1b2f2e16ab65734d4d1d.jpg">	<ul><li><code>Person {firstName: ""John"", lastName: ""Smith""}</code>&nbsp;и&nbsp;<code>undefined</code></li><li><code><b>Мы вызываем Person без new</b>, то есть не говорим - сделай мне <span style=""background-color: rgb(170, 85, 0);"">объект</span>&nbsp;и привяжи контекст к этому объекты</code></li><li><code>Мы говорим - вызови мне функцию, но в таком случае this смотрит на глобальный контекст</code></li></ul>	{}	159	2025-06-29 08:53:56.186	2025-06-29 08:53:56.186
cmchfnzad004g13mp1zs0spgw	Bsdvr)=buR	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d8d0facb24f18036b0ed8769a61577893c0fe8fd.jpg">	<ul><li>12</li></ul>	{}	160	2025-06-29 08:53:56.197	2025-06-29 08:53:56.197
cmchfnzao004h13mp4821yrbw	g*la$c,J@0	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-55646108a60f7bd855757a1168b5ba61cff2641c.jpg">	<ul><li>0 2 2</li><li>number++ - возвращает и потом уже увеличивает</li><li>++number - увеличивает и возвращает&nbsp;</li></ul>	{}	161	2025-06-29 08:53:56.209	2025-06-29 08:53:56.209
cmchfnzb1004i13mpp782n0ij	h=hAwZ,kI-	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8cb357b114bed6e1d6e49055096866ca3108d5e4.jpg">	<ul><li>объект-аргумент не указывает на ту же область в памяти что другой</li></ul><div><br></div><div><br></div>	{}	162	2025-06-29 08:53:56.221	2025-06-29 08:53:56.221
cmchfnzbe004j13mp9zal2io0	gcahN/pxP1	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-97df9acfe795c7fb698e3e2666ac556a8cf3ecd7.jpg">	<ul><li>1 2 4&nbsp;</li><li>continue пропускает текущую итерацию если условие true</li></ul>	{}	163	2025-06-29 08:53:56.234	2025-06-29 08:53:56.234
cmchfnzbp004k13mplh4dmboy	gnWna&:p)a	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a92c4ddb140f82afe7232104ed07061a77246c90.jpg">	<ul><li>ошибка</li><li>стрелошная функция - не имеет своего контекста&nbsp;</li><li>если использовать обычную - то все сработает и выведется Give me pizza</li></ul>	{}	164	2025-06-29 08:53:56.246	2025-06-29 08:53:56.246
cmchfnzd3004o13mph2ltmtd7	fUDq8;8kh0	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-158d3fe6d958d8c72930509e25b74bcd60cc1ef5.jpg">	<ul><li>[1, 2, 0, 1, 2, 3]</li></ul>	{}	168	2025-06-29 08:53:56.296	2025-06-29 08:53:56.296
cmchfnzdf004p13mpiggisnhx	g}2W[nb:7u	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b40f06309e4b04870a23d276b670bc21a4646de1.jpg">	<ul><li>false</li><li>false</li><li>true&nbsp;</li></ul>	{}	169	2025-06-29 08:53:56.308	2025-06-29 08:53:56.308
cmchfnzdq004q13mpgowsd57c	yM$V{pXG@`	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-19ad9f791f014b5c0b017efb351e4ca3ef58fe57.jpg">	<ul><li>строка является перебираемой вот спрэд и перебирает&nbsp;</li><li>[""J"", ""o"", ""h"", ""n""]<br></li></ul>	{}	170	2025-06-29 08:53:56.319	2025-06-29 08:53:56.319
cmchfnze2004r13mph5mvdfgn	"bd?W&#A7Cx"	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5396fb6563cc31524530c68532306ed0f77c87eb.jpg">	<ul><li>Promise.race выводит первый завершившийся, поэтому two</li></ul><div><br></div>	{}	171	2025-06-29 08:53:56.331	2025-06-29 08:53:56.331
cmchfnzee004s13mp8sbczo2s	t`Da2ZLBGI	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a2f116c74f11e1cb601d98950afaaf8963feaa26.jpg">	<ul><li>[{ name: ""John"" }]<br></li><li>ссылка members все равно указывает на массив</li></ul><div><br></div>	{}	172	2025-06-29 08:53:56.342	2025-06-29 08:53:56.342
cmchfnzep004t13mp956jzxyu	rEid)M$SK3	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7f30a043340204650203d367767310f889ce43f1.jpg">	<ul><li><code>name</code>&nbsp;и&nbsp;<code>age</code><br></li><li>for...in перебирает ключи в объекте&nbsp;</li></ul><div><br></div>	{}	173	2025-06-29 08:53:56.354	2025-06-29 08:53:56.354
cmchfnzf2004u13mpv7q6ml69	w6X_&R3X,[	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-13f6b32e935d26922b677a185e29f1b774eb6659.jpg">	<ul><li>parseInt пытается преобразовать строку в число до тех пор, пока не найдет невалидный символ</li><li>у нас невалидник это *</li></ul>	{}	174	2025-06-29 08:53:56.367	2025-06-29 08:53:56.367
cmchfnzfn004v13mpg39fk8y6	Mrpi|Yv%7B	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a06b8fb0af596d04f2d99ab4e4f7e9ab71e9f5ce.jpg">	<ul><li>вернется undefined</li><li><div><pre><b><span style=""font-style: italic;"">if </span>(<span style=""font-style: italic;"">typeof </span></b>num <b>=== </b>""number""<b>) <span style=""font-style: italic;"">return </span><u>num * 2</u></b> надо было написать</pre></div></li></ul><div><font face=""monospace""><span style=""white-space: pre-wrap;""><br></span></font></div><div><font face=""monospace""><span style=""white-space: pre-wrap;""><br></span></font></div><div><font face=""monospace""><span style=""white-space: pre-wrap;""><br></span></font></div><div><font face=""monospace""><span style=""white-space: pre-wrap;""><br></span></font></div><div><br></div>	{}	175	2025-06-29 08:53:56.388	2025-06-29 08:53:56.388
cmchfnzg0004w13mpph971kd1	gAa5+Lube?	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-cc477e3deae6b88477f70b8be62e7ffcd3e41bd5.jpg">	<ul><li>Maserati</li></ul>	{}	176	2025-06-29 08:53:56.4	2025-06-29 08:53:56.4
cmchfnzgb004x13mpu88a1llq	v0>yaP!Hr/	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1a18c7ad0f220cbb7efa7993b5aed5b3307051d3.jpg">	<div><ul><li>undefined и number<br></li></ul></div>	{}	177	2025-06-29 08:53:56.412	2025-06-29 08:53:56.412
cmchfnzgm004y13mpbdifnae7	H^=W-x}s{}	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5ab2804278b7b86255b0a5344f312bab5663fe42.jpg">	<ul><li>&nbsp;Что мы на самом деле сделали в приведенном примере, так это:&nbsp;<code>[y] = [1, 2, 3, 4, 5]</code></li><li>&nbsp;Это означает, что&nbsp;<code>y</code>&nbsp;равняется первому элементу массива, которым является число&nbsp;<code>1</code>. Поэтому в консоль выводится&nbsp;<code>1</code>.</li></ul>	{}	178	2025-06-29 08:53:56.423	2025-06-29 08:53:56.423
cmchfnzgy004z13mp7s4xsdhk	s]^]/v0dm]	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ffb3c7177045d3a9a6e5b25549c2374b36d766da.jpg">	{ admin: true, name: ""John"", age: 30 }	{}	179	2025-06-29 08:53:56.434	2025-06-29 08:53:56.434
cmchfnzha005013mp1d08ogii	N)%=C*n5B_	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-65d22083bedac98645004cf565659eeca0905265.jpg">	<ul><li>{""level"": 19, ""health"": 88}<br></li><li>если используем два аргумента в JSON.stringify, то первый - массив который будем сериализовать, а второй - ключи-фильтры&nbsp;</li></ul><div><br></div>	{}	180	2025-06-29 08:53:56.446	2025-06-29 08:53:56.446
cmchfnzhl005113mpcfjxue5q	ogjD-~xQpe	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-30aed2f9a28d9b53d6675fc7a44b0d16cb3d3524.jpg">	<ul><li>Promise {\\&lt;pending\\&gt;}<br></li><li>Создали промис, но не разрешили его&nbsp;</li></ul><div><br></div>	{}	181	2025-06-29 08:53:56.457	2025-06-29 08:53:56.457
cmchfnzhy005213mp71vnbkxm	P?HYr7!N>a	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8ba78c4a9fc0cc6c63973bfe6f5ae2917848d02f.jpg">	<ul><li>2</li><li>list.push возвратит длину нового массива&nbsp;</li><li>для правильной записи нужно дополнительно возвратить list&nbsp;</li></ul><div><br></div>	{}	182	2025-06-29 08:53:56.47	2025-06-29 08:53:56.47
cmchfnzib005313mp0d4ic469	"l4LSq&UA#t"	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-497d19ff40b9a931e16e8cab32b21c0ee51d84a4.jpg">	<ul><li>ошибка</li><li>push возвращает длину нового массива&nbsp;</li></ul>	{}	183	2025-06-29 08:53:56.483	2025-06-29 08:53:56.483
cmchfnzim005413mp7wpmaaia	"b}ewd#rl?j"	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e394c65b933fc93f3c0ff1bef0ba917277a85487.jpg">	<ul><li>name John и&nbsp; age 30</li><li>с помощью цикла for of&nbsp; проходимся по [x,y] и в каждое значение присваивам ключ-значение соответственно&nbsp;</li></ul><div><br></div>	{}	184	2025-06-29 08:53:56.495	2025-06-29 08:53:56.495
cmchfnziz005513mp76e1adqi	B8OBl&,(8a	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6ae9f8942ea0ab5a081d76194fda71e8f5619797.jpg">	<ul><li>или возвращает первый истинный или последний ложный&nbsp;</li><li>пустой объкт - true&nbsp;</li><li>пустая строка - последний ложный&nbsp;</li></ul>	{}	185	2025-06-29 08:53:56.508	2025-06-29 08:53:56.508
cmchfnzj9005613mp98o1gnou	FLp6-0dna-	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-708207a9b0d8aa55cbea40715136684245e93775.jpg">	first<br>I have resolved!<br>I have resolved!<br>second<br><br><br>	{}	186	2025-06-29 08:53:56.518	2025-06-29 08:53:56.518
cmchfnzjk005713mp9rbv1thb	G+Tccou2J{	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5fac4355016583d35a8e2e01b91a4e55f34f0135.jpg">	Promise {&lt;resolved&gt;: 5}	{}	187	2025-06-29 08:53:56.528	2025-06-29 08:53:56.528
cmchfnzjv005813mp1sjqw5b1	l.|<55v<+x	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1c0cc94fe29062ee2483e556484d3d46ad3a3dee.jpg">	<ul><li>я люблю писать код&nbsp;</li><li>стрелочная функция <code>(x =&gt; x)</code> возвращает то, что ей передается в качестве аргумента, в данном случае строку <code>'Я люблю'</code>, и затем эта строка объединяется с остальной частью строки <code>"" писать код""</code> с помощью интерполяции<br></li></ul>	{}	188	2025-06-29 08:53:56.54	2025-06-29 08:53:56.54
cmchfnzk6005913mp7mab8kfk	q:xRqyj8z~	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-89f21945dcf2087b1765176cd74eebf86acb6dce.jpg">	Rex undefined John Smith undefined	{}	189	2025-06-29 08:53:56.551	2025-06-29 08:53:56.551
cmchfnzkh005a13mp74m58zkt	Ip6`!i:$7+	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-cdd22a6eb0a63a375c28847bf6100dc9d74416f5.jpg">	<ul><li>4 5 6&nbsp;</li><li>это каррирование детка&nbsp;</li></ul><div><br></div>	{}	190	2025-06-29 08:53:56.562	2025-06-29 08:53:56.562
cmchfnzkt005b13mp6fzqthj0	lc6L^JZ}TO	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fe8c87d4e51ab4412d3fa3253a41c4dc4d081977.jpg">	<ul><li><a href=""undefined undefined undefined%0D%0A"">undefined undefined undefined&nbsp;</a><br></li></ul>	{}	191	2025-06-29 08:53:56.573	2025-06-29 08:53:56.573
cmchfnzl2005c13mpc20a0ii5	lNbQTO0xWr	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7d7e256bd89d3a85e945932ea6dbbf34d4ddb59e.jpg">	<ul><li>Last line! Promise! Promise! Last line! Timeout! Timeout!<br></li></ul>	{}	192	2025-06-29 08:53:56.582	2025-06-29 08:53:56.582
cmchfnzld005d13mpy6z98hw1	P<oS(8Gi;,	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fe70abeb1da4ccbe3a12cc1ce6bbdd3b1640ec34.jpg">	<ul><li>&nbsp;2 4 и 3 6<br></li></ul>	{}	193	2025-06-29 08:53:56.594	2025-06-29 08:53:56.594
cmchfnzlo005e13mpi0atsvi7	p):W25twV0	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-536237018813568b06503ed1f6a4b17f41009a19.jpg">	<ul><li>ошибка</li><li>объекты не являются итерируемыми по умолчанию</li><li>но при желании можно написать итератор&nbsp;</li></ul><div><br></div>	{}	194	2025-06-29 08:53:56.605	2025-06-29 08:53:56.605
cmchfnzm0005f13mps1c9eaxy	z4O$?S5OT7	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e7258f21fd08decf836e25575334922b1b1fd4c7.jpg">	<ul><li>3</li><li>forEach проходится по массиву, проверяет условие и если оно истинно прибавляет с счетчику +1&nbsp;</li></ul>	{}	195	2025-06-29 08:53:56.616	2025-06-29 08:53:56.616
cmchfnzmb005g13mpz55ukzql	wL<l=XF%Zm	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5af02b58a62f0bf033cd04024ad9a2982e67fbf8.jpg">	true	{}	196	2025-06-29 08:53:56.628	2025-06-29 08:53:56.628
cmchfnzmn005h13mpuaaferzh	"=2#!B}cI$"	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9585b281f9b50e24ba3a3c3b266110d314c2f3ba.jpg">	['🍇', '🍊', '🍎']<br><br><ul><li>&nbsp;слайс создао новый массив от начала включительно до конца НЕ включительно, но мы никуда не сохранили новый массив, поэтому без измений</li><li>сплайс удалил элементы с указанного массива на указанное кол-во (0, 1)</li><li>аншифт добавил в начало виноград&nbsp;</li></ul><div><br></div>	{}	197	2025-06-29 08:53:56.639	2025-06-29 08:53:56.639
cmchfnzn0005i13mp0zfha57c	"L3}*5l&cQ#"	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d02c0d0315edd6cc73cfcbadfad58568205b2f56.jpg">	<ul><li>{ emoji: ""🐈"", name: ""Niko"" }<br></li></ul>	{}	198	2025-06-29 08:53:56.652	2025-06-29 08:53:56.652
cmchfnznb005j13mpwwuawdul	r5B5UOOdi&	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<div><pre><span style=""white-space: normal;"">Найти наибольший и наименьший элемент в массиве, не используя Math.max и Math.min.</span><br></pre><pre><br></pre><pre>function findMinMax(arr) {<br><br>}</pre><pre><br>const numbers = [5, 1, 3, 412, 12, 512];<br>const result = findMinMax(numbers);<br><br>console.log(`Минимальное значение: ${result.min}`);<br>console.log(`Максимальное значение: ${result.max}`);</pre></div><br>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-53a7f92904d445cfcbed0cb9a1bdbe5739102e03.jpg">	{}	199	2025-06-29 08:53:56.664	2025-06-29 08:53:56.664
cmchfnznm005k13mp5dzckd66	O49>b.JV77	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<pre><b>Необходимо обработать массив таким образом, чтобы распределить людей по группам городов</b><br></pre><pre>Шаблон для начала : </pre><pre><div><pre><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">people </span><span style=""font-weight: bold;"">= </span>[<br>    <span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>name<span style=""font-weight: bold;"">: </span>'Alex',<br>        city<span style=""font-weight: bold;"">: </span>'Moscow',<br>    <span style=""font-weight: bold;"">}</span>,<br>    <span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>name<span style=""font-weight: bold;"">: </span>'Ivan',<br>        city<span style=""font-weight: bold;"">: </span>'Moscow',<br>    <span style=""font-weight: bold;"">}</span>,<br>    <span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>name<span style=""font-weight: bold;"">: </span>'Joe',<br>        city<span style=""font-weight: bold;"">: </span>'New York'<br>    <span style=""font-weight: bold;"">}</span>,<br>    <span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>name<span style=""font-weight: bold;"">: </span>'Johan',<br>        city<span style=""font-weight: bold;"">: </span>'Berlin'<br>    <span style=""font-weight: bold;"">}</span>,<br>]<br><br><span style=""font-weight: bold; font-style: italic;"">const </span>groupByCity <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>array<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>groupByCity<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">people</span><span style=""font-weight: bold;"">))</span></pre></div></pre><pre><br></pre><pre><br></pre><pre>// Какой должен быть результат :<br>{<br>  'Moscow': [ 'Alex', 'Ivan' ],<br>  'New York': 'Joe',<br>  'Berlin': 'Johan'<br>}<br></pre>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c89e2539e197ce14f7ebc531583ca8a58f707942.jpg"><br>	{}	200	2025-06-29 08:53:56.675	2025-06-29 08:53:56.675
cmchfnzny005l13mpktryqusw	puEwn(B-9J	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	Объедините интервалы в массиве&nbsp;<br><br><pre><code><span style=""font-weight: bold;"">const</span> array1 = [[1, 3], [2, 6], [8, 10], [15, 18]]; // [[1, 6], [8, 10], [15, 18]]<br><span style=""font-weight: bold;"">const</span> array2 = [[1, 4], [4, 5]];' // [[1, 5]]<br><span style=""font-weight: bold;"">const</span> array3 = [[11, 12], [2, 3], [5, 7], [1, 4], [8, 10], [6, 8]]; // [[1, 4], [5, 10], [11, 12]]<br><br><span style=""font-weight: bold;"">function</span> merge(intervals) {<br>  // ваш код<br>}<br><br>console.log(merge(array1));<br>console.log(merge(array2));<br>console.log(merge(array3));</code></pre><pre><br></pre>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ae61f5443d2680e72ec4e4e70eba6eaf9ed9d933.jpg">	{}	201	2025-06-29 08:53:56.687	2025-06-29 08:53:56.687
cmchfnzoa005m13mpqwjyu5eq	tZ`~>dwomz	Простая	СБОРНИК::JS ПРАКТИКА::Объекты	JS ПРАКТИКА	Объекты	<pre><code>Напишите функцию flattenObject(obj), которая принимает в качестве<br>аргумента вложенный объект obj и возвращает новый объект,<br>в котором все свойства объекта obj ""разглажены""<br>(преобразованы в одноуровневую структуру), с использованием точечной нотации<br>для представления иерархии свойств.<br>*/<br><br><span style=""font-weight: bold;"">const</span> obj = {<br>  a: {<br>    b: {<br>      c: 1,<br>      d: 2<br>    },<br>    e: 3<br>  },<br>  f: 4<br>};<br><br><span style=""font-weight: bold;"">const</span> flattenObject = (obj) =&gt; {}<br><br><span style=""font-weight: bold;"">const</span> flattenedObj = flattenObject(obj);<br>console.log(flattenedObj);<br>// Ожидаемый результат: { 'a.b.c': 1, 'a.b.d': 2, 'a.e': 3, 'f': 4 } || { ""f"": 4, ""a.e"": 3, ""a.b.c"": 1, ""a.b.d"": 2 }</code></pre>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-82fa51242579995d6c5c40505933383ee9240add.jpg">	{}	202	2025-06-29 08:53:56.698	2025-06-29 08:53:56.698
cmchfnzon005n13mp5dqg7ulc	GCaL3U@h6v	Простая	СБОРНИК::JS ПРАКТИКА::Строки	JS ПРАКТИКА	Строки	Проверить, является ли заданная строка палиндромом. Также добавим условие, которое будет игнорировать символы пробела, знаков препинания и пр. и&nbsp; также будем игнорировать регистр<br><br><div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>isEqual <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span>isLetter <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span>isPalindrome <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    <br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPalindrome<span style=""font-weight: bold;"">(</span>'Казак'<span style=""font-weight: bold;"">))</span>; <br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPalindrome<span style=""font-weight: bold;"">(</span>`Madam, I'm Adam`<span style=""font-weight: bold;"">))</span>;<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPalindrome<span style=""font-weight: bold;"">(</span>'А в Енисее - синева'<span style=""font-weight: bold;"">))</span>;<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPalindrome<span style=""font-weight: bold;"">(</span>'О, духи, от уборки микробу-то и худо'<span style=""font-weight: bold;"">))</span>;<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPalindrome<span style=""font-weight: bold;"">(</span>'Не палиндром'<span style=""font-weight: bold;"">))</span>;<br></pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>isEqual <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>str1 <span style=""font-weight: bold;"">= </span>'', str2 <span style=""font-weight: bold;"">= </span>''<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>str1.toLowerCase<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">=== </span>str2.toLowerCase<span style=""font-weight: bold;"">()<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span>isLetter <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>char<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>char.toLowerCase<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">!== </span>char.toUpperCase<span style=""font-weight: bold;"">()<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold; font-style: italic;"">const </span>isPalindrome <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>str <span style=""font-weight: bold;"">= </span>''<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">let </span>start <span style=""font-weight: bold;"">= </span>0<br>    <span style=""font-weight: bold; font-style: italic;"">let </span>end <span style=""font-weight: bold;"">= </span>str.length <span style=""font-weight: bold;"">- </span>1<br><br>    <span style=""font-weight: bold; font-style: italic;"">while</span><span style=""font-weight: bold;"">(</span>start <span style=""font-weight: bold;"">&lt; </span>end<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">const </span>firstChar <span style=""font-weight: bold;"">= </span>str[start]<br>        <span style=""font-weight: bold; font-style: italic;"">const </span>endChar <span style=""font-weight: bold;"">= </span>str[end]<br><br>        <span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">!</span>isLetter<span style=""font-weight: bold;"">(</span>firstChar<span style=""font-weight: bold;"">)) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>start <span style=""font-weight: bold;"">+= </span>1;<br>            <span style=""font-weight: bold; font-style: italic;"">continue</span>;<br>        <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">!</span>isLetter<span style=""font-weight: bold;"">(</span>endChar<span style=""font-weight: bold;"">)) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>end <span style=""font-weight: bold;"">-= </span>1;<br>            <span style=""font-weight: bold; font-style: italic;"">continue</span>;<br>        <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">!</span>isEqual<span style=""font-weight: bold;"">(</span>firstChar, endChar<span style=""font-weight: bold;"">)) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold; font-style: italic;"">return false<br></span><span style=""font-weight: bold; font-style: italic;"">        </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">        </span>start <span style=""font-weight: bold;"">+= </span>1<br>        end <span style=""font-weight: bold;"">-= </span>1<br>    <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return  true<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPalindrome<span style=""font-weight: bold;"">(</span>'Казак'<span style=""font-weight: bold;"">))</span>;<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPalindrome<span style=""font-weight: bold;"">(</span>`Madam, I'm Adam`<span style=""font-weight: bold;"">))</span>;<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPalindrome<span style=""font-weight: bold;"">(</span>'А в Енисее - синева'<span style=""font-weight: bold;"">))</span>;<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPalindrome<span style=""font-weight: bold;"">(</span>'О, духи, от уборки микробу-то и худо'<span style=""font-weight: bold;"">))</span>;<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPalindrome<span style=""font-weight: bold;"">(</span>'Не палиндром'<span style=""font-weight: bold;"">))</span>;<br></pre></div>	{}	203	2025-06-29 08:53:56.711	2025-06-29 08:53:56.711
cmchfnzoz005o13mpes5fok0r	d.$U):ou2n	Простая	СБОРНИК::JS ПРАКТИКА::Числа	JS ПРАКТИКА	Числа	<pre><b><i>Проверить, является ли число простым</i></b></pre><pre><span style=""font-weight: bold; font-style: italic;"">function </span>isPrime<span style=""font-weight: bold;"">(</span>number<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    <br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPrime<span style=""font-weight: bold;"">(</span>7<span style=""font-weight: bold;"">))</span>; // true<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPrime<span style=""font-weight: bold;"">(</span>12<span style=""font-weight: bold;"">))</span>; // false<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPrime<span style=""font-weight: bold;"">(</span>23<span style=""font-weight: bold;"">))</span>; // true<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPrime<span style=""font-weight: bold;"">(</span>100<span style=""font-weight: bold;"">))</span>; // false<br></pre>	<div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>isPrime<span style=""font-weight: bold;"">(</span>number<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>number <span style=""font-weight: bold;"">&lt;= </span>1<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">return false</span>;<br>    <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">for </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">let </span>i <span style=""font-weight: bold;"">= </span>2; i <span style=""font-weight: bold;"">&lt;= </span><span style=""font-style: italic;"">Math</span>.sqrt<span style=""font-weight: bold;"">(</span>number<span style=""font-weight: bold;"">)</span>; i<span style=""font-weight: bold;"">++</span><span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>number <span style=""font-weight: bold;"">% </span>i <span style=""font-weight: bold;"">=== </span>0<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold; font-style: italic;"">return false</span>;<br>        <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return true</span>;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPrime<span style=""font-weight: bold;"">(</span>7<span style=""font-weight: bold;"">))</span>; // true<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPrime<span style=""font-weight: bold;"">(</span>12<span style=""font-weight: bold;"">))</span>; // false<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPrime<span style=""font-weight: bold;"">(</span>23<span style=""font-weight: bold;"">))</span>; // true<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isPrime<span style=""font-weight: bold;"">(</span>100<span style=""font-weight: bold;"">))</span>; // false<br><br></pre></div>	{}	204	2025-06-29 08:53:56.724	2025-06-29 08:53:56.724
cmchfo0f0007o13mpbsfqr3ei	DmS;FSx4dk	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-58ec720517790c8c030999a7ec77659d8901f13c.jpg">	4	{}	276	2025-06-29 08:53:57.66	2025-06-29 08:53:57.66
cmchfnzpc005p13mpfxjafzit	DlX2K/K~^3	Простая	СБОРНИК::JS ПРАКТИКА::Числа	JS ПРАКТИКА	Числа	Вычислить факториал заданного числа<br><br><div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>factorial<span style=""font-weight: bold;"">(</span>n<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>factorial<span style=""font-weight: bold;"">(</span>5<span style=""font-weight: bold;"">))</span>; // 120<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>factorial<span style=""font-weight: bold;"">(</span>0<span style=""font-weight: bold;"">))</span>; // 1<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>factorial<span style=""font-weight: bold;"">(</span>1<span style=""font-weight: bold;"">))</span>; // 1<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>factorial<span style=""font-weight: bold;"">(</span>10<span style=""font-weight: bold;"">))</span>; // 3628800<br></pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>factorial<span style=""font-weight: bold;"">(</span>n<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>n <span style=""font-weight: bold;"">=== </span>0 <span style=""font-weight: bold;"">|| </span>n <span style=""font-weight: bold;"">=== </span>1<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">return </span>1;<br>    <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">let </span>result <span style=""font-weight: bold;"">= </span>1;<br>    <span style=""font-weight: bold; font-style: italic;"">for </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">let </span>i <span style=""font-weight: bold;"">= </span>2; i <span style=""font-weight: bold;"">&lt;= </span>n; i<span style=""font-weight: bold;"">++</span><span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>result <span style=""font-weight: bold;"">*= </span>i;<br>    <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>result;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>factorial<span style=""font-weight: bold;"">(</span>5<span style=""font-weight: bold;"">))</span>; // 120<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>factorial<span style=""font-weight: bold;"">(</span>0<span style=""font-weight: bold;"">))</span>; // 1<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>factorial<span style=""font-weight: bold;"">(</span>1<span style=""font-weight: bold;"">))</span>; // 1<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>factorial<span style=""font-weight: bold;"">(</span>10<span style=""font-weight: bold;"">))</span>; // 3628800</pre></div>	{}	205	2025-06-29 08:53:56.736	2025-06-29 08:53:56.736
cmchfnzpo005q13mpbmi3m0yr	E|-f?8$JD{	Простая	СБОРНИК::JS ПРАКТИКА::Числа	JS ПРАКТИКА	Числа	Найти сумму всех чисел в заданном диапазоне<br><br><div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>sumRange<span style=""font-weight: bold;"">(</span>start, end<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>sumRange<span style=""font-weight: bold;"">(</span>1, 5<span style=""font-weight: bold;"">))</span>; // 15<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>sumRange<span style=""font-weight: bold;"">(</span>0, 10<span style=""font-weight: bold;"">))</span>; // 55<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>sumRange<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">-</span>3, 3<span style=""font-weight: bold;"">))</span>; // 0<br></pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>sumRange<span style=""font-weight: bold;"">(</span>start, end<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>count <span style=""font-weight: bold;"">= </span>end <span style=""font-weight: bold;"">- </span>start <span style=""font-weight: bold;"">+ </span>1;<br>    <span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(</span>count <span style=""font-weight: bold;"">* </span><span style=""font-weight: bold;"">(</span>start <span style=""font-weight: bold;"">+ </span>end<span style=""font-weight: bold;"">)) </span><span style=""font-weight: bold;"">/ </span>2;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>sumRange<span style=""font-weight: bold;"">(</span>1, 5<span style=""font-weight: bold;"">))</span>; // 15<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>sumRange<span style=""font-weight: bold;"">(</span>0, 10<span style=""font-weight: bold;"">))</span>; // 55<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>sumRange<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">-</span>3, 3<span style=""font-weight: bold;"">))</span>; // 0<br></pre></div>	{}	206	2025-06-29 08:53:56.749	2025-06-29 08:53:56.749
cmchfnzq0005r13mpcgoejaa9	I]l3Rd[x]*	Простая	СБОРНИК::JS ПРАКТИКА::Числа	JS ПРАКТИКА	Числа	Реализовать рекурсивную функцию для вычисления чисел Фибоначчи<br><br><div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>fibonacci<span style=""font-weight: bold;"">(</span>n, cache <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">{}</span><span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">   <br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>fibonacci<span style=""font-weight: bold;"">(</span>6<span style=""font-weight: bold;"">))</span>; // 8<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>fibonacci<span style=""font-weight: bold;"">(</span>10<span style=""font-weight: bold;"">))</span>; // 55<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>fibonacci<span style=""font-weight: bold;"">(</span>15<span style=""font-weight: bold;"">))</span>; // 610<br></pre></div>	function fibonacci(n, cache = {}) {<br>&nbsp; if (n in cache) {<br>&nbsp;&nbsp;&nbsp; return cache[n];<br>&nbsp; }<br><br>&nbsp; if (n &lt;= 1) {<br>&nbsp;&nbsp;&nbsp; return n;<br>&nbsp; }<br><br>&nbsp; const result = fibonacci(n - 1, cache) + fibonacci(n - 2, cache);<br>&nbsp; cache[n] = result;<br>&nbsp; return result;<br>}<br><br>console.log(fibonacci(6)); // 8<br>console.log(fibonacci(10)); // 55<br>console.log(fibonacci(15)); // 610<br><br><br>	{}	207	2025-06-29 08:53:56.76	2025-06-29 08:53:56.76
cmchfnzqa005s13mps61tuvqt	E<-Sa,k6Qu	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	Разверните вложенные массивы с помощью рекурсии<br><div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>flattenArray<span style=""font-weight: bold;"">(</span>arr<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span>// Пример использования<br><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">nestedArray </span><span style=""font-weight: bold;"">= </span>[1, [2, [3, 4], 5], 6];<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>flattenArray<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">nestedArray</span><span style=""font-weight: bold;"">))</span>; // [1, 2, 3, 4, 5, 6]<br></pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>flattenArray<span style=""font-weight: bold;"">(</span>arr<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>stack <span style=""font-weight: bold;"">= </span>[...arr];<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>result <span style=""font-weight: bold;"">= </span>[];<br><br>    <span style=""font-weight: bold; font-style: italic;"">while </span><span style=""font-weight: bold;"">(</span>stack.length<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">const </span>element <span style=""font-weight: bold;"">= </span>stack.pop<span style=""font-weight: bold;"">()</span>;<br>        <span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">Array</span>.isArray<span style=""font-weight: bold;"">(</span>element<span style=""font-weight: bold;"">)) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>stack.push<span style=""font-weight: bold;"">(</span>...element<span style=""font-weight: bold;"">)</span>;<br>        <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">else </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>result.unshift<span style=""font-weight: bold;"">(</span>element<span style=""font-weight: bold;"">)</span>;<br>        <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>result;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span>// Пример использования<br><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">nestedArray </span><span style=""font-weight: bold;"">= </span>[1, [2, [3, 4], 5], 6];<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>flattenArray<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">nestedArray</span><span style=""font-weight: bold;"">))</span>; // [1, 2, 3, 4, 5, 6]</pre></div>	{}	208	2025-06-29 08:53:56.771	2025-06-29 08:53:56.771
cmchfnzt0006013mpww51aaxn	bhhGj0<r.L	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-be4326061091a92cab0915e453cf6cf7b10811e5.jpg">	<ul><li>это строка</li><li>!typeof randomValue отработает так : вернет number, перевернет в false, а false !== стрингу</li></ul><div><br></div><div><br></div>	{}	216	2025-06-29 08:53:56.868	2025-06-29 08:53:56.868
cmchfnztc006113mps5so4gx5	"qO-txghmq#"	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fdeb078528477789c2d846f160f6fd79bec5d6ae.jpg">	<ul><li>1 undefined number<br></li><li>запись let x = y = 0 эквивалентна let x, y=0,&nbsp; поэтому x в блочной обл.видимости</li></ul><div><br></div>	{}	217	2025-06-29 08:53:56.881	2025-06-29 08:53:56.881
cmchfnzqm005t13mpxb6t9i9q	P-4<pq6M,Z	Простая	СБОРНИК::JS ПРАКТИКА::Кастомные методы и функции	JS ПРАКТИКА	Кастомные методы и функции	Напишите свой кастомный .filter<br><br><div><pre><span style=""font-style: italic;"">Array</span>.prototype.myFilter <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">function</span><span style=""font-weight: bold;"">(</span>callback<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">arrForFilter </span><span style=""font-weight: bold;"">= </span>[4, 5, 6]<br><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">arrFilter </span><span style=""font-weight: bold;"">= </span><span style=""font-style: italic;"">arrForFilter</span>.myFilter<span style=""font-weight: bold;"">((</span>item<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>item <span style=""font-weight: bold;"">&lt;= </span>5<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">arrFilter</span><span style=""font-weight: bold;"">)</span>;</pre></div>	<div><pre><span style=""font-style: italic;"">Array</span>.prototype.myFilter <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">function</span><span style=""font-weight: bold;"">(</span>callback<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>result <span style=""font-weight: bold;"">= </span>[]<br><br>    <span style=""font-weight: bold; font-style: italic;"">for </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">let </span>index <span style=""font-weight: bold;"">= </span>0; index <span style=""font-weight: bold;"">&lt; </span><span style=""font-weight: bold; font-style: italic;"">this</span>.length; index<span style=""font-weight: bold;"">++</span><span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">const </span>isTrue <span style=""font-weight: bold;"">= </span>callback<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">this</span>[index], index, <span style=""font-weight: bold; font-style: italic;"">this</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">!</span>isTrue<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold; font-style: italic;"">continue<br></span><span style=""font-weight: bold; font-style: italic;""><br></span><span style=""font-weight: bold; font-style: italic;"">        </span>result.push<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">this</span>[index]<span style=""font-weight: bold;"">)</span>;<br>    <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>result;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">arrForFilter </span><span style=""font-weight: bold;"">= </span>[4, 5, 6]<br><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">arrFilter </span><span style=""font-weight: bold;"">= </span><span style=""font-style: italic;"">arrForFilter</span>.myFilter<span style=""font-weight: bold;"">((</span>item<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>item <span style=""font-weight: bold;"">&lt;= </span>5<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">arrFilter</span><span style=""font-weight: bold;"">)</span>;</pre></div>	{}	209	2025-06-29 08:53:56.782	2025-06-29 08:53:56.782
cmchfnzqy005u13mpvtsv7kbl	"P#(;q#w#eU"	Простая	СБОРНИК::JS ПРАКТИКА::Кастомные методы и функции	JS ПРАКТИКА	Кастомные методы и функции	<div><br></div><div><br></div><div><pre><span style=""font-style: italic;"">Array</span>.prototype.myMap <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">function</span><span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// your code here<br><span style=""font-weight: bold;"">}</span></pre></div>	<pre><div><pre><br><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">Array</span>.prototype.myMap <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">function</span><span style=""font-weight: bold;"">(</span>callback, thisArg<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>length <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">this</span>.length<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>result <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">new </span><span style=""font-style: italic;"">Array</span><span style=""font-weight: bold;"">(</span>length<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">for </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">let </span>i <span style=""font-weight: bold;"">= </span>0; i <span style=""font-weight: bold;"">&lt; </span>length; i<span style=""font-weight: bold;"">++</span><span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>i <span style=""font-weight: bold; font-style: italic;"">in this</span><span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>result[i] <span style=""font-weight: bold;"">= </span>callback.call<span style=""font-weight: bold;"">(</span>thisArg, <span style=""font-weight: bold; font-style: italic;"">this</span>[i], i, <span style=""font-weight: bold; font-style: italic;"">this</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>result<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;""><br></span></pre></div></pre>	{}	210	2025-06-29 08:53:56.795	2025-06-29 08:53:56.795
cmchfnzrc005v13mpsnenfzn3	xJH2]^>:sQ	Простая	СБОРНИК::JS ПРАКТИКА::Кастомные методы и функции	JS ПРАКТИКА	Кастомные методы и функции	<div><br></div><div><pre><pre><div><pre><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">Array</span>.prototype.myReduce <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">function </span><span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// your code here<br><span style=""font-weight: bold;"">}</span></pre></div></pre></pre></div>	<div><div><div><div>Array.prototype.myReduce = function (...args: any[]) {<br>&nbsp;&nbsp;&nbsp; const hasInitialValue = args.length &gt; 1;&nbsp; // Проверяем, передан ли начальный аргумент<br>&nbsp;&nbsp;&nbsp; if (!hasInitialValue &amp;&amp; this.length === 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new Error(""Reduce of empty array with no initial value"");&nbsp; // Ошибка, если массив пуст и нет начального значения<br>&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; let result = hasInitialValue ? args[1] : this[0];&nbsp; // Начальное значение аккумулятора<br><br>&nbsp;&nbsp;&nbsp; for (let i = hasInitialValue ? 0 : 1; i &lt; this.length; i++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result = args[0](result, this[i], i, this);&nbsp; // Вызов функции обратного вызова для аккумулирования значения<br>&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; return result;&nbsp; // Возвращаем результат<br>}<br></div></div></div></div>	{}	211	2025-06-29 08:53:56.808	2025-06-29 08:53:56.808
cmchfnzro005w13mp1c0rsli8	DqMON(--+p	Простая	СБОРНИК::JS ПРАКТИКА::Строки	JS ПРАКТИКА	Строки	Напишите функцию, которая принимает строку в качестве аргумента и выводит количество гласных в этой строке&nbsp;<br><div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>findVowels<span style=""font-weight: bold;"">(</span>str<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>findVowels<span style=""font-weight: bold;"">(</span>'hello'<span style=""font-weight: bold;"">))</span>; // 2<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>findVowels<span style=""font-weight: bold;"">(</span>'why'<span style=""font-weight: bold;"">))</span>; // 0<br><br></pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>findVowels<span style=""font-weight: bold;"">(</span>str<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">let </span>count <span style=""font-weight: bold;"">= </span>0;<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>vowels <span style=""font-weight: bold;"">= </span>['a', 'e', 'i', 'o', 'u'];<br><br>    <span style=""font-weight: bold; font-style: italic;"">for </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">let </span>char <span style=""font-weight: bold; font-style: italic;"">of </span>str.toLowerCase<span style=""font-weight: bold;"">()) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>vowels.includes<span style=""font-weight: bold;"">(</span>char<span style=""font-weight: bold;"">)) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>count <span style=""font-weight: bold;"">+= </span>1;<br>        <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>count;<br><br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>findVowels<span style=""font-weight: bold;"">(</span>'hello'<span style=""font-weight: bold;"">))</span>; // 2<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>findVowels<span style=""font-weight: bold;"">(</span>'why'<span style=""font-weight: bold;"">))</span>; // 0<br><br></pre></div>	{}	212	2025-06-29 08:53:56.821	2025-06-29 08:53:56.821
cmchfnzs0005x13mpsr8qoig5	LQ!F_8`K5|	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-58e17f37246e68429964e76a50bdd3e3220edb65.jpg">	<ul><li>my@email.com<br></li><li>стрелошная функция не имеет своего контекста и ссылается на внешний контекст, в данном случае на объект window</li><li>получается так что email не обновился и останется my@email.com</li></ul>	{}	213	2025-06-29 08:53:56.833	2025-06-29 08:53:56.833
cmchfnzse005y13mpswgpw41r	z4;=B,`H(g	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-67f119c3e605de10907a4425719fdf71416f7990.jpg">	<ul><li>Promise.all выполняет все промисы до тех пор, пока не наткнется на .reject&nbsp;</li><li>в данном случае у нас .reject&nbsp; promise3 и promise.all возвращается с этим значением</li></ul>	{}	214	2025-06-29 08:53:56.846	2025-06-29 08:53:56.846
cmchfnzso005z13mpui9udbqu	FU}=4~bp/`	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5fa09213d3eb1e298555740b307241f452b8a90b.jpg">	<ul><li>{ email: ""my@email.com"", address: {} }<br></li><li>Пустой объект - это истинное значение, поэтому условие&nbsp;<code>address ? address : null</code>&nbsp;возвращает&nbsp;<code>address</code>. Значением&nbsp;<code>address</code>&nbsp;является&nbsp;<code>{}</code><br></li></ul><div><font face=""monospace""><br></font></div>	{}	215	2025-06-29 08:53:56.857	2025-06-29 08:53:56.857
cmchfnzto006213mphk4ngbgs	P50yhj@PRb	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5aa2fe790a2bcc4eeeaaf3ad27348ab0fd0a86ec.jpg">	<ul><li>1undefined<br></li><li>IIFE ограничены c () в которые они заключены, поэтому f() будет undefined</li></ul>	{}	218	2025-06-29 08:53:56.893	2025-06-29 08:53:56.893
cmchfnzty006313mp9nj0vroj	fSd2]uOc;C	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-116fd9bced9542e37265b0fbd5ae1cf01a240ae3.jpg">	<ul><li>0 1 2</li><li>все три метода валидны несмотря на странный синтаксис - этот укороченный синтаксис был введен с es6</li></ul>	{}	219	2025-06-29 08:53:56.903	2025-06-29 08:53:56.903
cmchfnzu9006413mp4mxs2h67	FW5C&Kmmx,	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-02ce2c0d7d28c116ea3092bec18d5a3b33833db3.jpg">	<ul><li>true false</li><li>не забываем что js динамически типизированный и может автоматом приводить типы</li><li>если в блоке содержатся одинаковые операторы, то выражене оценивается слева направо</li><li>последовательность такая :&nbsp;</li><li>1&lt;2 - true, true &lt; 3 = 1 &lt;&nbsp; 3 - <b>true</b></li><li>3&gt;2 - true, true &gt; 1 = 1 &gt; 1 -&nbsp;<b>false</b></li></ul>	{}	220	2025-06-29 08:53:56.914	2025-06-29 08:53:56.914
cmchfnzuj006513mpzcnqay1j	q0.~(Y&)e>	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1c9a8d388a95dc2404ee3317f921b23beaf05f87.jpg">	<ul><li>1010 0</li><li>+ пытается превратить нечисловой операнд в строку и конкатенировать строки, <u>если хотя бы один из операндов является строкой</u></li><li>- пытается превратить нечисловой операнд в число и выполнить операцию вычитания</li></ul><div><br></div>	{}	221	2025-06-29 08:53:56.924	2025-06-29 08:53:56.924
cmchfnzuu006613mp3qaej6oe	HyX4_H]yla	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8eb7c719b03bbb176bf6c2f19a7213252e8f5ee4.jpg">	<ul><li>Promise {:10}<br></li><li>async function всегда возвращает промис, даже если возвращаемое значение не особо является промисом, оно будет <b>насильно</b> завернуто в промис</li><li>так что приведенная выше запись эквивалентна&nbsp;function func() { return Promise.resolve(10) }</li></ul><div><br></div>	{}	222	2025-06-29 08:53:56.935	2025-06-29 08:53:56.935
cmchfnzv5006713mpeu1oeboi	Gi*T*-bH>[	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-27f38188a99e6b13523cb56c344a3e6192ac03cd.jpg">	<ul><li>6</li><li>8</li><li>2</li><li>3</li><li>4</li><li>0</li><li>1</li></ul><div><br></div>	{}	223	2025-06-29 08:53:56.946	2025-06-29 08:53:56.946
cmchfnzvg006813mp8tey6lqv	M]KUd@i&JG	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-95a8f9bf5ad9e9aff80c6ae72889325f3ca6ac40.jpg">	<ul><li>64<br></li></ul>	{}	224	2025-06-29 08:53:56.957	2025-06-29 08:53:56.957
cmchfnzvr006913mpce7f85ir	zmI&5=@hoA	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f0b944c25f857bcd60f7bc3ca1bba7683439aca6.jpg">	<ul><li>3 2 16 256<br></li></ul>	{}	225	2025-06-29 08:53:56.968	2025-06-29 08:53:56.968
cmchfnzw2006a13mp4kfcroj1	z)]JT5,$!Y	Простая	СБОРНИК::JS ПРАКТИКА::Числа	JS ПРАКТИКА	Числа	Напишите функцию, которая будет проверять нахождение числа в указанном диапазоне<br><ul><li>функция может принимать три аргумента, где последний аргумент опционален (по-умолчанию равен null)</li></ul><div>Шаблон :&nbsp;</div><div><div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>isInRange <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>n, start, end <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">null</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isInRange<span style=""font-weight: bold;"">(</span>2, 0, 10<span style=""font-weight: bold;"">)) </span>// true<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>isInRange<span style=""font-weight: bold;"">(</span>1000, 1500, 2000<span style=""font-weight: bold;"">)) </span>//false</pre></div></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5020ead5520f0972a2c563f29004ed8a122e5044.jpg">	{}	226	2025-06-29 08:53:56.979	2025-06-29 08:53:56.979
cmchfnzwd006b13mpid7c1ldf	K:_(E$oL`N	Простая	СБОРНИК::JS ПРАКТИКА::Строки	JS ПРАКТИКА	Строки	Реализуйте две функции инверсий строки (используются методы по работе с массивами)<br><ul><li>Функция инверсии одного слова&nbsp;</li><li>Функция инверсии нескольких слов&nbsp;</li></ul><div>Шаблон :&nbsp;</div><div><br></div><div><div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>reverseWord <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>str<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span>reverseWords <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>str<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;""><br></span><span style=""font-style: italic;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>reverseWord<span style=""font-weight: bold;"">(</span>'foo'<span style=""font-weight: bold;"">)) </span>//oof<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>reverseWords<span style=""font-weight: bold;"">(</span>'hello world'<span style=""font-weight: bold;"">)) </span>//olleh dlrow</pre></div></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>reverseWord <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>str<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>[...str].reverse<span style=""font-weight: bold;"">()</span>.join<span style=""font-weight: bold;"">(</span>''<span style=""font-weight: bold;"">)<br></span>reverseWord<span style=""font-weight: bold;"">(</span>'foo'<span style=""font-weight: bold;"">) </span>// oof<br><br><span style=""font-weight: bold; font-style: italic;"">const </span>reverseWords <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>str<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>str.split<span style=""font-weight: bold;"">(</span>' '<span style=""font-weight: bold;"">)</span>.reverse<span style=""font-weight: bold;"">()</span>.join<span style=""font-weight: bold;"">(</span>' '<span style=""font-weight: bold;"">)<br></span>reverseWords<span style=""font-weight: bold;"">(</span>'hello world'<span style=""font-weight: bold;"">) </span>// world hello<br>// or<br><span style=""font-weight: bold; font-style: italic;"">const </span>reverseWords <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>str<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">    </span>str<br>        .split<span style=""font-weight: bold;"">(</span>' '<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>.map<span style=""font-weight: bold;"">((</span>w<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>[...w].reverse<span style=""font-weight: bold;"">()</span>.join<span style=""font-weight: bold;"">(</span>''<span style=""font-weight: bold;"">))<br></span><span style=""font-weight: bold;"">        </span>.join<span style=""font-weight: bold;"">(</span>' '<span style=""font-weight: bold;"">)<br></span>reverseWords<span style=""font-weight: bold;"">(</span>'hello world'<span style=""font-weight: bold;"">) </span>// olleh dlrow</pre></div>	{}	227	2025-06-29 08:53:56.99	2025-06-29 08:53:56.99
cmchfo05k006x13mp7ov326ns	t<m^!{9UCY	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-85a8fa7ad361bd4681bb4e92113fa7c30ad16c99.jpg">	"<font face=""monospace""><span style=""white-space: pre-wrap;"">ошибок не будет так как правильно прописали	{}	249	2025-06-29 08:53:57.321	2025-06-29 08:53:57.321
cmchfnzwp006c13mpyslcyveq	f|j!^[+dS)	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	Напишите функцию по извлечению i-того элемента из массива<br>Шаблон :<br><div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>getNthItem <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>arr, n <span style=""font-weight: bold;"">= </span>0<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;""><br></span><span style=""font-style: italic;""><br></span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>getNthItem<span style=""font-weight: bold;"">(</span>[1, 2, 3], 1<span style=""font-weight: bold;"">)) </span>// 2<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>getNthItem<span style=""font-weight: bold;"">(</span>['a', 'b', 'c'], <span style=""font-weight: bold;"">-</span>3<span style=""font-weight: bold;"">)) </span>// a</pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>getNthItem <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>arr, n <span style=""font-weight: bold;"">= </span>0<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">    </span><span style=""font-weight: bold;"">(</span>n <span style=""font-weight: bold;"">=== -</span>1 <span style=""font-weight: bold;"">? </span>arr.slice<span style=""font-weight: bold;"">(</span>n<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">: </span>arr.slice<span style=""font-weight: bold;"">(</span>n, n <span style=""font-weight: bold;"">+ </span>1<span style=""font-weight: bold;"">))</span>[0]<br><br><br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>getNthItem<span style=""font-weight: bold;"">(</span>[1, 2, 3], 1<span style=""font-weight: bold;"">)) </span>// 2<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>getNthItem<span style=""font-weight: bold;"">(</span>['a', 'b', 'c'], <span style=""font-weight: bold;"">-</span>3<span style=""font-weight: bold;"">)) </span>// a<br></pre></div>	{}	228	2025-06-29 08:53:57.002	2025-06-29 08:53:57.002
cmchfnzx2006d13mpjy9txqrm	FLL{+LnvOZ	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	Напишите функцию фильтрации объектов&nbsp;<br><br>Шаблон :<br><br><div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>reducedFilter <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>arr, keys, fn<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">   <br></span><span style=""font-style: italic;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">data </span><span style=""font-weight: bold;"">= </span>[<br>    <span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>id<span style=""font-weight: bold;"">: </span>1,<br>        name<span style=""font-weight: bold;"">: </span>'John',<br>        age<span style=""font-weight: bold;"">: </span>23<br>    <span style=""font-weight: bold;"">}</span>,<br>    <span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>id<span style=""font-weight: bold;"">: </span>2,<br>        name<span style=""font-weight: bold;"">: </span>'Jane',<br>        age<span style=""font-weight: bold;"">: </span>32<br>    <span style=""font-weight: bold;"">}<br></span>]<br><br>reducedFilter<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">data</span>, ['id', 'name'], <span style=""font-weight: bold;"">(</span>i<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>i.age <span style=""font-weight: bold;"">&gt; </span>23<span style=""font-weight: bold;"">)<br></span>// [ { id: 2, name: 'Jane'} ]<br></pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>reducedFilter <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>arr, keys, fn<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">    </span>arr.filter<span style=""font-weight: bold;"">(</span>fn<span style=""font-weight: bold;"">)</span>.map<span style=""font-weight: bold;"">((</span>el<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">        </span>keys.reduce<span style=""font-weight: bold;"">((</span>a, k<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>a[k] <span style=""font-weight: bold;"">= </span>el[k]<br>            <span style=""font-weight: bold; font-style: italic;"">return </span>a<br>        <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{}</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    )<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">data </span><span style=""font-weight: bold;"">= </span>[<br>    <span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>id<span style=""font-weight: bold;"">: </span>1,<br>        name<span style=""font-weight: bold;"">: </span>'John',<br>        age<span style=""font-weight: bold;"">: </span>23<br>    <span style=""font-weight: bold;"">}</span>,<br>    <span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>id<span style=""font-weight: bold;"">: </span>2,<br>        name<span style=""font-weight: bold;"">: </span>'Jane',<br>        age<span style=""font-weight: bold;"">: </span>32<br>    <span style=""font-weight: bold;"">}<br></span>]<br><br>reducedFilter<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">data</span>, ['id', 'name'], <span style=""font-weight: bold;"">(</span>i<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>i.age <span style=""font-weight: bold;"">&gt; </span>23<span style=""font-weight: bold;"">)<br></span>// [ { id: 2, name: 'Jane'} ]</pre></div>	{}	229	2025-06-29 08:53:57.014	2025-06-29 08:53:57.014
cmchfnzxd006e13mp8jsqz5ni	g+)9Oto%U7	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	Напишите функцию суммирования значений объектов&nbsp;<br><br>Шаблон :&nbsp;<br><br><div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>sumBy <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>arr, fn<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;""><br></span><span style=""font-style: italic;""><br></span>sumBy<span style=""font-weight: bold;"">(</span>[<span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>4 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>2 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>8 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>6 <span style=""font-weight: bold;"">}</span>], <span style=""font-weight: bold;"">(</span>x<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>x.n<span style=""font-weight: bold;"">) </span>// 20<br>sumBy<span style=""font-weight: bold;"">(</span>[<span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>4 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>2 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>8 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>6 <span style=""font-weight: bold;"">}</span>], 'n'<span style=""font-weight: bold;"">) </span>// 20</pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>sumBy <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>arr, fn<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">    </span>arr.map<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">typeof </span>fn <span style=""font-weight: bold;"">=== </span>'function'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">? </span>fn<br>        <span style=""font-weight: bold;"">: </span><span style=""font-weight: bold;"">(</span>v<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>v[fn].reduce<span style=""font-weight: bold;"">((</span>a, c<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>a <span style=""font-weight: bold;"">+ </span>c, 0<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span>sumBy<span style=""font-weight: bold;"">(</span>[<span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>4 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>2 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>8 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>6 <span style=""font-weight: bold;"">}</span>], <span style=""font-weight: bold;"">(</span>x<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>x.n<span style=""font-weight: bold;"">) </span>// 20<br>sumBy<span style=""font-weight: bold;"">(</span>[<span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>4 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>2 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>8 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>6 <span style=""font-weight: bold;"">}</span>], 'n'<span style=""font-weight: bold;"">) </span>// 20</pre></div>	{}	230	2025-06-29 08:53:57.026	2025-06-29 08:53:57.026
cmchfnzxp006f13mpiurzjw24	iJ4,8)6mK~	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	Напишите функцию стабильную сортировки&nbsp;<br><br>Шаблон:&nbsp;<br><div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>stableSort <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>arr, fn<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;""><br></span><span style=""font-style: italic;""><br></span>stableSort<span style=""font-weight: bold;"">(</span>[2, 10, 20, 1]<span style=""font-weight: bold;"">) </span>// 1, 2, 10, 20<br></pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>stableSort <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>arr, fn<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">    </span>arr<br>        .map<span style=""font-weight: bold;"">((</span>i, _i<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>i, _i <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">))<br></span><span style=""font-weight: bold;"">        </span>.sort<span style=""font-weight: bold;"">((</span>a, b<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>fn<span style=""font-weight: bold;"">(</span>a.i, b.i<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">|| </span>a._i <span style=""font-weight: bold;"">- </span>b._i<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>.map<span style=""font-weight: bold;"">((</span><span style=""font-weight: bold;"">{ </span>i <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>i<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span>stableSort<span style=""font-weight: bold;"">(</span>[2, 10, 20, 1]<span style=""font-weight: bold;"">) </span>// 1, 2, 10, 20</pre></div>	{}	231	2025-06-29 08:53:57.038	2025-06-29 08:53:57.038
cmchfnzy1006g13mpzewpslms	mATzDi+..t	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	Напишите функцию определение среднего значения объектов&nbsp;<br>Шаблон:&nbsp;<br><div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>averageBy <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>arr, fn<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;""><br></span><span style=""font-style: italic;""><br></span>averageBy<span style=""font-weight: bold;"">(</span>[<span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>4 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>2 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>8 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>6 <span style=""font-weight: bold;"">}</span>], <span style=""font-weight: bold;"">(</span>x<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>x.n<span style=""font-weight: bold;"">) </span>// 5<br>averageBy<span style=""font-weight: bold;"">(</span>[<span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>4 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>2 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>8 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>6 <span style=""font-weight: bold;"">}</span>], 'n'<span style=""font-weight: bold;"">) </span>// 5<br></pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>averageBy <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>arr, fn<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">    </span>arr<br>        .map<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">typeof </span>fn <span style=""font-weight: bold;"">=== </span>'function' <span style=""font-weight: bold;"">? </span>fn <span style=""font-weight: bold;"">: </span><span style=""font-weight: bold;"">(</span>val<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>val[fn]<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>.reduce<span style=""font-weight: bold;"">((</span>a, c<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>a <span style=""font-weight: bold;"">+ </span>c, 0<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">/ </span>arr.length<br><br>averageBy<span style=""font-weight: bold;"">(</span>[<span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>4 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>2 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>8 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>6 <span style=""font-weight: bold;"">}</span>], <span style=""font-weight: bold;"">(</span>x<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>x.n<span style=""font-weight: bold;"">) </span>// 5<br>averageBy<span style=""font-weight: bold;"">(</span>[<span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>4 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>2 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>8 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{ </span>n<span style=""font-weight: bold;"">: </span>6 <span style=""font-weight: bold;"">}</span>], 'n'<span style=""font-weight: bold;"">) </span>// 5</pre></div>	{}	232	2025-06-29 08:53:57.049	2025-06-29 08:53:57.049
cmchfnzyd006h13mpvgn3ny6r	6!iw8g*:r	Простая	СБОРНИК::JS ПРАКТИКА::Объекты	JS ПРАКТИКА	Объекты	Реализуйте поверхностное копирование объекта&nbsp;<br><br>Шаблон:<br><br><div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>copyObj <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>obj, shallow <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">true</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">obj </span><span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>foo<span style=""font-weight: bold;"">: </span>'bar',<br>    baz<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>qux<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>a<span style=""font-weight: bold;"">: </span>'b'<br>        <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">_obj </span><span style=""font-weight: bold;"">= </span>copyObj<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">obj</span><span style=""font-weight: bold;"">)<br></span><span style=""font-style: italic;"">_obj</span>.baz.qux.a <span style=""font-weight: bold;"">= </span>'c'<br><br><span style=""font-style: italic;"">obj</span>.baz.qux.a // c<br><br><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">__obj </span><span style=""font-weight: bold;"">= </span>copyObj<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">_obj</span>, <span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)<br></span><span style=""font-style: italic;"">__obj</span>.baz.qux.a <span style=""font-weight: bold;"">= </span>'d'<br><br><span style=""font-style: italic;"">_obj</span>.baz.qux.a // c</pre></div>	<br><div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>copyObj <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>obj, shallow <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">true</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">    </span>shallow <span style=""font-weight: bold;"">? </span><span style=""font-weight: bold;"">{ </span>...obj <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold;"">: </span><span style=""font-style: italic;"">JSON</span>.parse<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">JSON</span>.stringify<span style=""font-weight: bold;"">(</span>obj<span style=""font-weight: bold;"">))<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">obj </span><span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>foo<span style=""font-weight: bold;"">: </span>'bar',<br>    baz<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>qux<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>a<span style=""font-weight: bold;"">: </span>'b'<br>        <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">_obj </span><span style=""font-weight: bold;"">= </span>copyObj<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">obj</span><span style=""font-weight: bold;"">)<br></span><span style=""font-style: italic;"">_obj</span>.baz.qux.a <span style=""font-weight: bold;"">= </span>'c'<br><br><span style=""font-style: italic;"">obj</span>.baz.qux.a // c<br><br><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">__obj </span><span style=""font-weight: bold;"">= </span>copyObj<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">_obj</span>, <span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)<br></span><span style=""font-style: italic;"">__obj</span>.baz.qux.a <span style=""font-weight: bold;"">= </span>'d'<br><br><span style=""font-style: italic;"">_obj</span>.baz.qux.a // c<br></pre></div>	{}	233	2025-06-29 08:53:57.062	2025-06-29 08:53:57.062
cmchfnzyq006i13mpqo4qres4	F|LKKN>9Jh	Простая	СБОРНИК::JS ПРАКТИКА::Объекты	JS ПРАКТИКА	Объекты	Реализуйте две функции для удаления свойства по условию&nbsp;<br><ul><li>массиву ключей&nbsp;</li><li>функций</li></ul><div>Шаблон :&nbsp;</div><div><div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>omitByKeys <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>obj, arr<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;""><br></span><span style=""font-style: italic;""><br></span>omitByKeys<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>a<span style=""font-weight: bold;"">: </span>1, b<span style=""font-weight: bold;"">: </span>'2', c<span style=""font-weight: bold;"">: </span>3 <span style=""font-weight: bold;"">}</span>, ['b']<span style=""font-weight: bold;"">) </span>// { a: 1, c: 3 }<br><br><span style=""font-weight: bold; font-style: italic;"">const </span>omitByFunction <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>obj, fn<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;""><br></span><span style=""font-style: italic;""><br></span>omitByFunction<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>a<span style=""font-weight: bold;"">: </span>1, b<span style=""font-weight: bold;"">: </span>'2', c<span style=""font-weight: bold;"">: </span>3 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">(</span>x<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold; font-style: italic;"">typeof </span>x <span style=""font-weight: bold;"">=== </span>'number'<span style=""font-weight: bold;"">)<br></span>// { a: 1, c: 3 }<br><br><br><br></pre></div></div><div><br></div><div><br></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>omitByKeys <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>obj, arr<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">    </span><span style=""font-style: italic;"">Object</span>.keys<span style=""font-weight: bold;"">(</span>obj<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>.filter<span style=""font-weight: bold;"">((</span>k<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">!</span>arr.includes<span style=""font-weight: bold;"">(</span>k<span style=""font-weight: bold;"">))<br></span><span style=""font-weight: bold;"">        </span>.reduce<span style=""font-weight: bold;"">((</span>a, k<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">((</span>a[k] <span style=""font-weight: bold;"">= </span>obj[k]<span style=""font-weight: bold;"">)</span>, a<span style=""font-weight: bold;"">)</span>, <span style=""font-weight: bold;"">{}</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span>omitByKeys<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>a<span style=""font-weight: bold;"">: </span>1, b<span style=""font-weight: bold;"">: </span>'2', c<span style=""font-weight: bold;"">: </span>3 <span style=""font-weight: bold;"">}</span>, ['b']<span style=""font-weight: bold;"">) </span>// { a: 1, c: 3 }<br><br><span style=""font-weight: bold; font-style: italic;"">const </span>omitByFunction <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>obj, fn<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">    </span><span style=""font-style: italic;"">Object</span>.keys<span style=""font-weight: bold;"">(</span>obj<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>.filter<span style=""font-weight: bold;"">((</span>k<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>fn<span style=""font-weight: bold;"">(</span>obj[k], k<span style=""font-weight: bold;"">))<br></span><span style=""font-weight: bold;"">        </span>.reduce<span style=""font-weight: bold;"">((</span>a, k<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">((</span>a[k] <span style=""font-weight: bold;"">= </span>obj[k]<span style=""font-weight: bold;"">)</span>, a<span style=""font-weight: bold;"">)</span>, <span style=""font-weight: bold;"">{}</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span>omitByFunction<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>a<span style=""font-weight: bold;"">: </span>1, b<span style=""font-weight: bold;"">: </span>'2', c<span style=""font-weight: bold;"">: </span>3 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">(</span>x<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold; font-style: italic;"">typeof </span>x <span style=""font-weight: bold;"">=== </span>'number'<span style=""font-weight: bold;"">)<br></span>// { a: 1, c: 3 }<br><br></pre></div>	{}	234	2025-06-29 08:53:57.075	2025-06-29 08:53:57.075
cmchfnzzi006j13mp5eqb578c	MZ+%lzF-n}	Простая	СБОРНИК::JS ПРАКТИКА::Объекты	JS ПРАКТИКА	Объекты	Реализуйте извлечение свойства по условию<br><ul><li>массиву ключей&nbsp;</li><li>функции</li></ul><div>Шаблон :</div><div><div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>pickByKeys <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>obj, arr<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;""><br></span><span style=""font-style: italic;"">    </span>pickByKeys<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{</span>a<span style=""font-weight: bold;"">: </span>1, b<span style=""font-weight: bold;"">: </span>'2', c<span style=""font-weight: bold;"">: </span>3<span style=""font-weight: bold;"">}</span>, ['a', 'c']<span style=""font-weight: bold;"">) </span>// { a: 1, c: 3 }<br><br><span style=""font-weight: bold; font-style: italic;"">const </span>pickByFunction <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>obj, fn<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-style: italic;"">Object</span>.keys<span style=""font-weight: bold;"">(</span>obj<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span>pickByFunction<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{</span>a<span style=""font-weight: bold;"">: </span>1, b<span style=""font-weight: bold;"">: </span>'2', c<span style=""font-weight: bold;"">: </span>3<span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">(</span>x<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold; font-style: italic;"">typeof </span>x <span style=""font-weight: bold;"">=== </span>'number'<span style=""font-weight: bold;"">)<br></span>// { b: '2' }<br></pre></div></div><div><br></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">const </span>pickBy <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>obj, arr<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">    </span>arr.reduce<span style=""font-weight: bold;"">((</span>a, k<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(</span>k <span style=""font-weight: bold; font-style: italic;"">in </span>obj <span style=""font-weight: bold;"">&amp;&amp; </span><span style=""font-weight: bold;"">(</span>a[k] <span style=""font-weight: bold;"">= </span>obj[k]<span style=""font-weight: bold;"">)</span>, a<span style=""font-weight: bold;"">)</span>, <span style=""font-weight: bold;"">{}</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span>pickBy<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>a<span style=""font-weight: bold;"">: </span>1, b<span style=""font-weight: bold;"">: </span>'2', c<span style=""font-weight: bold;"">: </span>3 <span style=""font-weight: bold;"">}</span>, ['a', 'c']<span style=""font-weight: bold;"">) </span>// { a: 1, c: 3 }<br><br><span style=""font-weight: bold; font-style: italic;"">const </span>pickBy <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>obj, fn<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">    </span><span style=""font-style: italic;"">Object</span>.keys<span style=""font-weight: bold;"">(</span>obj<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>.filter<span style=""font-weight: bold;"">((</span>k<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">!</span>fn<span style=""font-weight: bold;"">(</span>obj[k], k<span style=""font-weight: bold;"">))<br></span><span style=""font-weight: bold;"">        </span>.reduce<span style=""font-weight: bold;"">((</span>a, k<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">((</span>a[k] <span style=""font-weight: bold;"">= </span>obj[k]<span style=""font-weight: bold;"">)</span>, a<span style=""font-weight: bold;"">)</span>, <span style=""font-weight: bold;"">{}</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span>pickBy<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>a<span style=""font-weight: bold;"">: </span>1, b<span style=""font-weight: bold;"">: </span>'2', c<span style=""font-weight: bold;"">: </span>3 <span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">(</span>x<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold; font-style: italic;"">typeof </span>x <span style=""font-weight: bold;"">=== </span>'number'<span style=""font-weight: bold;"">)<br></span>// { b: '2' }</pre></div>	{}	235	2025-06-29 08:53:57.102	2025-06-29 08:53:57.102
cmchfo002006k13mpqgmv69vj	"m#V({bkk*w"	Простая	СБОРНИК::REACT Практика::Кастомные хуки	REACT Практика	Кастомные хуки	Как бы вы реализовывали кастомный хук useFetch, который помогал бы в управлении запросами к API&nbsp;	<div><pre><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{</span>useEffect, useRef, useState<span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><br><span style=""font-weight: bold; font-style: italic;"">export function </span>useFetch<span style=""font-weight: bold;"">(</span>url, options<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[isLoading,setIsLoading] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">true</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[response, setResponse] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">null</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[error, setError] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">null</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>cache <span style=""font-weight: bold;"">= </span>useRef<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{}</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">async function </span>fetchData<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>cache.current[url]<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                </span><span style=""font-weight: bold; font-style: italic;"">const </span>data <span style=""font-weight: bold;"">= </span>cache.current[url]<br>                setResponse<span style=""font-weight: bold;"">(</span>data<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">else </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                </span><span style=""font-weight: bold; font-style: italic;"">try </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                    </span><span style=""font-weight: bold; font-style: italic;"">const </span>response <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">await </span>fetch<span style=""font-weight: bold;"">(</span>url, options<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">                    </span><span style=""font-weight: bold; font-style: italic;"">const </span>json <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">await </span>response.json<span style=""font-weight: bold;"">()<br></span><span style=""font-weight: bold;"">                    </span>cache.current[url] <span style=""font-weight: bold;"">= </span>json<br>                    setResponse<span style=""font-weight: bold;"">(</span>json<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">                </span><span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">catch </span><span style=""font-weight: bold;"">(</span>error<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                    </span>setError<span style=""font-weight: bold;"">(</span>error<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">                </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">            </span>setIsLoading<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">        </span>fetchData<span style=""font-weight: bold;"">()<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold;"">}</span>, [url, options]<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">{</span>isLoading, response, error<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">}</span></pre></div>	{}	236	2025-06-29 08:53:57.122	2025-06-29 08:53:57.122
cmchfo00f006l13mpbfarknbd	G&pC@J)v|X	Простая	СБОРНИК::REACT Практика::Кастомные хуки	REACT Практика	Кастомные хуки	Как бы вы реализовывали кастомный хук useLocalStorage, который позволял бы легко сохранять и получать данные в локальном хранилище браузера	<div><pre><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{ </span>useState, useEffect <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><br><span style=""font-weight: bold; font-style: italic;"">export function </span>useLocalStorage<span style=""font-weight: bold;"">(</span>key, initialValue<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[value, setValue] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">const </span>item <span style=""font-weight: bold;"">= </span><span style=""font-style: italic;"">window</span>.localStorage.getItem<span style=""font-weight: bold;"">(</span>key<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">return </span>item <span style=""font-weight: bold;"">? </span><span style=""font-style: italic;"">JSON</span>.parse<span style=""font-weight: bold;"">(</span>item<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">: </span>initialValue<br>    <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">const </span>item <span style=""font-weight: bold;"">= </span><span style=""font-style: italic;"">JSON</span>.stringify<span style=""font-weight: bold;"">(</span>value<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-style: italic;"">window</span>.localStorage.setItem<span style=""font-weight: bold;"">(</span>key, item<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>// eslint-disable-next-line<br>    <span style=""font-weight: bold;"">}</span>, [value]<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>[value, setValue]<br><span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;""><br></span></pre></div>	{}	237	2025-06-29 08:53:57.135	2025-06-29 08:53:57.135
cmchfo00s006m13mpxg5vj0up	"l-#L#b3x]E"	Простая	СБОРНИК::REACT Практика::Кастомные хуки	REACT Практика	Кастомные хуки	как бы вы реализовали свой кастомный useKeyPress, который помогал бы отслеживать нажатия на клавиатуре&nbsp;	<div><pre><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{ </span>useState, useEffect <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><br><span style=""font-weight: bold; font-style: italic;"">export function </span>useKeyPress<span style=""font-weight: bold;"">(</span>target<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[isPressed, setPressed] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">const </span>handleDown <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>key <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>key <span style=""font-weight: bold;"">=== </span>target<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                </span>setPressed<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">true</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">const </span>handleUp <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>key <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>key <span style=""font-weight: bold;"">=== </span>target<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                </span>setPressed<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">        </span><span style=""font-style: italic;"">window</span>.addEventListener<span style=""font-weight: bold;"">(</span>'keydown', handleDown<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-style: italic;"">window</span>.addEventListener<span style=""font-weight: bold;"">(</span>'keyup', handleUp<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span><span style=""font-style: italic;"">window</span>.removeEventListener<span style=""font-weight: bold;"">(</span>'keydown', handleDown<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">            </span><span style=""font-style: italic;"">window</span>.removeEventListener<span style=""font-weight: bold;"">(</span>'keyup', handleUp<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }</span>, [target]<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>isPressed<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span>// пример использования<br><span style=""font-weight: bold; font-style: italic;"">function </span>App<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>happy <span style=""font-weight: bold;"">= </span>useKeyPress<span style=""font-weight: bold;"">(</span>'h'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>sad <span style=""font-weight: bold;"">= </span>useKeyPress<span style=""font-weight: bold;"">(</span>'s'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;&gt;<br>            &lt;div&gt;h, s&lt;/div&gt;<br>            &lt;div&gt;<br>                <span style=""font-weight: bold;"">{</span>happy <span style=""font-weight: bold;"">&amp;&amp; </span>'😊'<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                {</span>sad <span style=""font-weight: bold;"">&amp;&amp; </span>'😢'<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            </span>&lt;/div&gt;<br>        &lt;/&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">}</span></pre></div>	{}	238	2025-06-29 08:53:57.148	2025-06-29 08:53:57.148
cmchfo015006n13mps7sy0abs	b(9-OPb^rt	Простая	СБОРНИК::REACT Практика::Кастомные хуки	REACT Практика	Кастомные хуки	Как бы вы реализовали кастомный хук useWindowSize для получение размеров области просмотра&nbsp;	<div><pre><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{ </span>useState, useEffect <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><br><span style=""font-weight: bold; font-style: italic;"">export default function </span>useWindowSize<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[size, setSize] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>width<span style=""font-weight: bold;"">: </span>0,<br>        height<span style=""font-weight: bold;"">: </span>0,<br>    <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">function </span>onResize<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>setSize<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                </span>width<span style=""font-weight: bold;"">: </span><span style=""font-style: italic;"">window</span>.innerWidth,<br>                height<span style=""font-weight: bold;"">: </span><span style=""font-style: italic;"">window</span>.innerHeight,<br>            <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        </span>onResize<span style=""font-weight: bold;"">()<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">        </span><span style=""font-style: italic;"">window</span>.addEventListener<span style=""font-weight: bold;"">(</span>'resize', onResize<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-style: italic;"">window</span>.removeEventListener<span style=""font-weight: bold;"">(</span>'resize', onResize<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold;"">}</span>, []<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>size<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span>// пример использования<br><span style=""font-weight: bold; font-style: italic;"">export default function </span>App<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-weight: bold;"">{ </span>width, height <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold;"">= </span>useWindowSize<span style=""font-weight: bold;"">()<br></span><span style=""font-weight: bold;"">    </span>// другой кастомный хук<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>[color, setColor] <span style=""font-weight: bold;"">= </span>useStyle<span style=""font-weight: bold;"">(</span>'color'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[fontSize, setFontSize] <span style=""font-weight: bold;"">= </span>useStyle<span style=""font-weight: bold;"">(</span>'font-size'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>width <span style=""font-weight: bold;"">&gt; </span>1024<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>setColor<span style=""font-weight: bold;"">(</span>'green'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">            </span>setFontSize<span style=""font-weight: bold;"">(</span>'2em'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">else if </span><span style=""font-weight: bold;"">(</span>width <span style=""font-weight: bold;"">&gt; </span>768<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>setColor<span style=""font-weight: bold;"">(</span>'blue'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">            </span>setFontSize<span style=""font-weight: bold;"">(</span>'1.5em'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">else </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>setColor<span style=""font-weight: bold;"">(</span>'red'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">            </span>setFontSize<span style=""font-weight: bold;"">(</span>'1em'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }</span>, [width]<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;&gt;<br>            &lt;h1&gt;<br>                Window size: <span style=""font-weight: bold;"">{</span>width<span style=""font-weight: bold;"">}</span>, <span style=""font-weight: bold;"">{</span>height<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            </span>&lt;/h1&gt;<br>            &lt;h2&gt;Color: <span style=""font-weight: bold;"">{</span>color<span style=""font-weight: bold;"">}</span>&lt;/h2&gt;<br>            &lt;h3&gt;Font size: <span style=""font-weight: bold;"">{</span>fontSize<span style=""font-weight: bold;"">}</span>&lt;/h3&gt;<br>        &lt;/&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">}</span></pre></div>	{}	239	2025-06-29 08:53:57.161	2025-06-29 08:53:57.161
cmchfo01i006o13mpg12sv3ez	r6CB~FPC(>	Простая	СБОРНИК::REACT Практика::Кастомные компоненты	REACT Практика	Кастомные компоненты	Как бы вы реализовали кастомный компонент Accordion для раскрывающихся списков<br><br>Шаблон:<br><br><div><pre><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{ </span>useState <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><br>// Импортируем стили для компонента Accordion<br><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-style: italic;"">styles </span><span style=""font-weight: bold; font-style: italic;"">from </span>'./Accordion.module.css'<br><br>// Компонент для отдельного элемента аккордеона<br><span style=""font-weight: bold; font-style: italic;"">const </span>AccordionItem <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>item, open, onClick <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">    </span>&lt;details open=<span style=""font-weight: bold;"">{</span>open<span style=""font-weight: bold;"">} </span>className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.item<span style=""font-weight: bold;"">} </span>onClick=<span style=""font-weight: bold;"">{</span>onClick<span style=""font-weight: bold;"">}</span>&gt;<br>        <span style=""font-weight: bold;"">{</span>/* Заголовок элемента аккордеона */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        </span>&lt;summary className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.title<span style=""font-weight: bold;"">}</span>&gt;<span style=""font-weight: bold;"">{</span>item.title<span style=""font-weight: bold;"">}</span>&lt;/summary&gt;<br>        <span style=""font-weight: bold;"">{</span>/* Содержимое элемента аккордеона */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        </span>&lt;p className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.content<span style=""font-weight: bold;"">}</span>&gt;<span style=""font-weight: bold;"">{</span>item.content<span style=""font-weight: bold;"">}</span>&lt;/p&gt;<br>    &lt;/details&gt;<br><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span>// Основной компонент аккордеона<br><span style=""font-weight: bold; font-style: italic;"">export const </span>Accordion <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>defaultIndex <span style=""font-weight: bold;"">= </span>1, onClick, children <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// Здесь должно быть Состояние для отслеживания текущего активного элемента аккордеона<br><br>    // Функция для изменения активного элемента аккордеона<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>changeItem <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>e, i<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">      <br></span><span style=""font-weight: bold;"">        </span>// Отключаем стандартное поведение для элементов details<br>      <br>        // Если передан колбэк onClick, вызываем его с индексом элемента<br>      <br><br>        // Обновляем состояние, чтобы показать выбранный элемент<br><br><br>    <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>// Возвращаем JSX для отображения компонента Accordion<br>    <span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.accordion<span style=""font-weight: bold;"">}</span>&gt;<br>            <span style=""font-weight: bold;"">{</span>/* Отображаем все элементы аккордеона */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            {</span>children.map<span style=""font-weight: bold;"">((</span>item, i<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">                </span>// Используем компонент AccordionItem для каждого элемента<br>                &lt;AccordionItem<br>                    key=<span style=""font-weight: bold;"">{</span>i<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                    </span>open=<span style=""font-weight: bold;"">{</span>i <span style=""font-weight: bold;"">=== </span><span style=""font-style: italic;"">index</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                    </span>item=<span style=""font-weight: bold;"">{</span>item<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                    </span>// Передаем функцию changeItem как обработчик события onClick<br>                    onClick=<span style=""font-weight: bold;"">{</span><span style=""font-weight: bold;"">(</span>e<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>changeItem<span style=""font-weight: bold;"">(</span>e, i<span style=""font-weight: bold;"">)</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                </span>/&gt;<br>            <span style=""font-weight: bold;"">))</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        </span>&lt;/div&gt;<br>    <span style=""font-weight: bold;"">)<br></span></pre></div><span style=""font-weight: bold; white-space: pre-wrap;"">}</span>&nbsp;<br>	<div><pre><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{ </span>useState <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><br><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-style: italic;"">styles </span><span style=""font-weight: bold; font-style: italic;"">from </span>'./Accordion.module.css'<br><br><span style=""font-weight: bold; font-style: italic;"">const </span>AccordionItem <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>item, open, onClick <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">    </span>&lt;details open=<span style=""font-weight: bold;"">{</span>open<span style=""font-weight: bold;"">} </span>className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.item<span style=""font-weight: bold;"">} </span>onClick=<span style=""font-weight: bold;"">{</span>onClick<span style=""font-weight: bold;"">}</span>&gt;<br>        &lt;summary className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.title<span style=""font-weight: bold;"">}</span>&gt;<span style=""font-weight: bold;"">{</span>item.title<span style=""font-weight: bold;"">}</span>&lt;/summary&gt;<br>        &lt;p className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.content<span style=""font-weight: bold;"">}</span>&gt;<span style=""font-weight: bold;"">{</span>item.content<span style=""font-weight: bold;"">}</span>&lt;/p&gt;<br>    &lt;/details&gt;<br><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">export const </span>Accordion <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>defaultIndex <span style=""font-weight: bold;"">= </span>1, onClick, children <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[index, setIndex] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span>defaultIndex<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>changeItem <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>e, i<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>// disable details default click handling<br>        e.preventDefault<span style=""font-weight: bold;"">()<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">typeof </span>onClick <span style=""font-weight: bold;"">=== </span>'function'<span style=""font-weight: bold;"">) </span>onClick<span style=""font-weight: bold;"">(</span>i<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>i <span style=""font-weight: bold;"">!== </span>index<span style=""font-weight: bold;"">) </span>setIndex<span style=""font-weight: bold;"">(</span>i<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.accordion<span style=""font-weight: bold;"">}</span>&gt;<br>            <span style=""font-weight: bold;"">{</span>children.map<span style=""font-weight: bold;"">((</span>item, i<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">                </span>&lt;AccordionItem<br>                    key=<span style=""font-weight: bold;"">{</span>i<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                    </span>open=<span style=""font-weight: bold;"">{</span>i <span style=""font-weight: bold;"">=== </span>index<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                    </span>item=<span style=""font-weight: bold;"">{</span>item<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                    </span>onClick=<span style=""font-weight: bold;"">{</span><span style=""font-weight: bold;"">(</span>e<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>changeItem<span style=""font-weight: bold;"">(</span>e, i<span style=""font-weight: bold;"">)</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                </span>/&gt;<br>            <span style=""font-weight: bold;"">))</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        </span>&lt;/div&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">}</span></pre></div>	{}	240	2025-06-29 08:53:57.174	2025-06-29 08:53:57.174
cmchfo01v006p13mp67ky7foi	HgK0?(X;(7	Простая	СБОРНИК::REACT Практика::Кастомные компоненты	REACT Практика	Кастомные компоненты	Как бы вы реализовали кастомный компонент Carousel&nbsp;<br><br>Шаблон :<br><br><div><pre><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{ </span>useEffect, useState <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><br>// Импортируем стили для компонента Carousel<br><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-style: italic;"">styles </span><span style=""font-weight: bold; font-style: italic;"">from </span>'./Carousel.module.css'<br><br>// Компонент отдельного слайда<br><span style=""font-weight: bold; font-style: italic;"">const </span>Item <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>src, active <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;img<br>            src=<span style=""font-weight: bold;"">{</span>src<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            </span>alt=''<br>            // Устанавливаем класс активности для активного слайда<br>            className=<span style=""font-weight: bold;"">{</span>active <span style=""font-weight: bold;"">? </span>`$<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.item<span style=""font-weight: bold;"">} </span>$<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.active<span style=""font-weight: bold;"">}</span>` <span style=""font-weight: bold;"">: </span><span style=""font-style: italic;"">styles</span>.item<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        </span>/&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span>// Компонент карусельного слайдера<br><span style=""font-weight: bold; font-style: italic;"">export const </span>Carousel <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>items <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// Тут должно быть Состояние для отслеживания текущего активного слайда<br><br>    //  Эффект для автоматического переключения слайдов<br>    useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>// Запускаем таймер для автоматического переключения слайдов каждые 3 секунды<br>        <span style=""font-weight: bold; font-style: italic;"">const </span>timerId <span style=""font-weight: bold;"">= </span>setInterval<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>// Обновляем значение активного слайда<br>        <span style=""font-weight: bold;"">}</span>, 3000<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>// Возвращаем функцию для очистки таймера при размонтировании компонента<br>    <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>// Возвращаем JSX для отображения компонента Carousel<br>    <span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.carousel<span style=""font-weight: bold;"">}</span>&gt;<br>            <span style=""font-weight: bold;"">{</span>/* Отображаем все элементы слайдера */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            {</span>items.map<span style=""font-weight: bold;"">((</span>src, i<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">                </span>// Используем компонент Item для отдельного слайда<br>                &lt;Item key=<span style=""font-weight: bold;"">{</span>i<span style=""font-weight: bold;"">} </span>src=<span style=""font-weight: bold;"">{</span>src<span style=""font-weight: bold;"">} </span>active=<span style=""font-weight: bold;"">{</span>active <span style=""font-weight: bold;"">=== </span>i<span style=""font-weight: bold;"">} </span>/&gt;<br>            <span style=""font-weight: bold;"">))</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        </span>&lt;/div&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">}<br></span></pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{ </span>useEffect, useState <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><br><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-style: italic;"">styles </span><span style=""font-weight: bold; font-style: italic;"">from </span>'./Carousel.module.css'<br><br><span style=""font-weight: bold; font-style: italic;"">const </span>Item <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>src, active <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;img<br>            src=<span style=""font-weight: bold;"">{</span>src<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            </span>alt=''<br>            className=<span style=""font-weight: bold;"">{</span>active <span style=""font-weight: bold;"">? </span>`$<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.item<span style=""font-weight: bold;"">} </span>$<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.active<span style=""font-weight: bold;"">}</span>` <span style=""font-weight: bold;"">: </span><span style=""font-style: italic;"">styles</span>.item<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        </span>/&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">export const </span>Carousel <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>items <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[active, setActive] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span>0<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">const </span>timerId <span style=""font-weight: bold;"">= </span>setInterval<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>setActive<span style=""font-weight: bold;"">((</span>active <span style=""font-weight: bold;"">+ </span>1<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">% </span>items.length<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">}</span>, 3000<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span>clearInterval<span style=""font-weight: bold;"">(</span>timerId<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.carousel<span style=""font-weight: bold;"">}</span>&gt;<br>            <span style=""font-weight: bold;"">{</span>items.map<span style=""font-weight: bold;"">((</span>src, i<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">                </span>&lt;Item key=<span style=""font-weight: bold;"">{</span>i<span style=""font-weight: bold;"">} </span>src=<span style=""font-weight: bold;"">{</span>src<span style=""font-weight: bold;"">} </span>active=<span style=""font-weight: bold;"">{</span>active <span style=""font-weight: bold;"">=== </span>i<span style=""font-weight: bold;"">} </span>/&gt;<br>            <span style=""font-weight: bold;"">))</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        </span>&lt;/div&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">}</span></pre></div>	{}	241	2025-06-29 08:53:57.187	2025-06-29 08:53:57.187
cmchfo028006q13mp52cmf0il	kcazEe0s(q	Простая	СБОРНИК::REACT Практика::Кастомные компоненты	REACT Практика	Кастомные компоненты	Как бы вы реализовали кастомный компонент Modal<br><br>Шаблон:<br><br><div><pre><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{</span>useEffect, useState<span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><br>// Импортируем стили для компонента Modal<br><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-style: italic;"">styles </span><span style=""font-weight: bold; font-style: italic;"">from </span>'./Modal.module.css'<br><br>// Функция для установки стилей<br><span style=""font-weight: bold; font-style: italic;"">function </span>useStyle<span style=""font-weight: bold;"">(</span>prop, $ <span style=""font-weight: bold;"">= </span><span style=""font-style: italic;"">document</span>.body<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// Состояние для хранения значения стиля<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>[value, setValue] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span>getComputedStyle<span style=""font-weight: bold;"">(</span>$<span style=""font-weight: bold;"">)</span>.getPropertyValue<span style=""font-weight: bold;"">(</span>prop<span style=""font-weight: bold;"">))<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>// Эффект для обновления стиля<br>    useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>// Устанавливаем значение стиля<br>        $.style.setProperty<span style=""font-weight: bold;"">(</span>prop, value<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>// eslint-disable-next-line<br>    <span style=""font-weight: bold;"">}</span>, [value]<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>[value, setValue]<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span>// Создаем и экспортируем компонент Modal<br><span style=""font-weight: bold; font-style: italic;"">export const </span>Modal <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                          </span>title,<br>                          content,<br>                          footer,<br>                          confirmCb,<br>                          cancelCb,<br>                          open <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">false<br></span><span style=""font-weight: bold; font-style: italic;"">                      </span><span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>// Здесь должно быть Состояние для отображения модального окна<br><br>    // Здесь должно быть Хук useRef для получения ссылки на кнопку<br><br>    // Функция для открытия модального окна<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>onClick <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>// Логика для открытия<br><br>        // Убираем фокус с кнопки<br>    <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>// Функции для подтверждения действия<br>    // Оформить в виде тернарника<br><br>    <span style=""font-weight: bold; font-style: italic;"">const </span>onConfirm <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">    </span>// здесь должна быть логика<br>    // Если нажата кнопка подтверждения, вызывается функция onConfirm.<br>    // Если колбэк отсутствует, модальное окно просто скрывается.<br><br><br>    // Функция для отмены действия<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>onCancel <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;""><br></span><span style=""font-style: italic;"">    </span>// здесь должна быть логика<br>    // Если нажата кнопка отмены, вызывается функция onCancel.<br>    // Если колбэк отсутствует, модальное окно просто скрывается.<br><br><br><br>    // Обработчик нажатия клавиши<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>onKeyDown <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{</span>key<span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">switch </span><span style=""font-weight: bold;"">(</span>key<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold; font-style: italic;"">case </span>'Escape'<span style=""font-weight: bold;"">:<br></span><span style=""font-weight: bold;"">                </span><span style=""font-weight: bold; font-style: italic;"">return </span>onCancel<span style=""font-weight: bold;"">()<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold; font-style: italic;"">case </span>'Enter'<span style=""font-weight: bold;"">:<br></span><span style=""font-weight: bold;"">                </span><span style=""font-weight: bold; font-style: italic;"">return </span>onConfirm<span style=""font-weight: bold;"">()<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold; font-style: italic;"">default</span><span style=""font-weight: bold;"">:<br></span><span style=""font-weight: bold;"">                </span><span style=""font-weight: bold; font-style: italic;"">return<br></span><span style=""font-weight: bold; font-style: italic;"">        </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>// Эффект для добавления обработчика события при монтировании компонента<br>    useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>// <br>        <span style=""font-style: italic;"">document</span>.addEventListener<span style=""font-weight: bold;"">(</span>'keydown', onKeyDown<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>// Удаление обработчика события при размонтировании компонента<br>        <span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span><span style=""font-style: italic;"">document</span>.removeEventListener<span style=""font-weight: bold;"">(</span>'keydown', onKeyDown<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>// Хук useEffect для установки overflow в зависимости от видимости модального окна<br>    useEffect<span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        () </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(</span>isVisible <span style=""font-weight: bold;"">? </span>setOverflow<span style=""font-weight: bold;"">(</span>'hidden'<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">: </span>setOverflow<span style=""font-weight: bold;"">(</span>'auto'<span style=""font-weight: bold;"">))</span>,<br>        // eslint-disable-next-line<br>        [isVisible]<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>// Возвращаем JSX для отображения компонента Modal<br>    <span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;&gt;<br>            <span style=""font-weight: bold;"">{</span>/* Кнопка для открытия модального окна */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            </span>&lt;button className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.show<span style=""font-weight: bold;"">} </span>onClick=<span style=""font-weight: bold;"">{</span>onClick<span style=""font-weight: bold;"">} </span>ref=<span style=""font-weight: bold;"">{</span>buttonRef<span style=""font-weight: bold;"">}</span>&gt;<br>                Show Modal<br>            &lt;/button&gt;<br>            <span style=""font-weight: bold;"">{</span>/* Если модальное окно открыто, отображаем его содержимое */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            {</span>isVisible <span style=""font-weight: bold;"">&amp;&amp; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">                </span>&lt;&gt;<br>                    <span style=""font-weight: bold;"">{</span>/* Подложка для закрытия модального окна при клике вне его области */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                    </span>&lt;div<br>                        className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.overlay<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                        </span>onClick=<span style=""font-weight: bold;"">{</span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span>setVisible<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                    </span>&gt;&lt;/div&gt;<br>                    <span style=""font-weight: bold;"">{</span>/* Содержимое модального окна */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                    </span>&lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.modal<span style=""font-weight: bold;"">}</span>&gt;<br>                        <span style=""font-weight: bold;"">{</span>/* Кнопка для закрытия модального окна */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                        </span>&lt;button className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.close<span style=""font-weight: bold;"">} </span>onClick=<span style=""font-weight: bold;"">{</span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span>setVisible<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)</span><span style=""font-weight: bold;"">}</span>&gt;<br>                            x<br>                        &lt;/button&gt;<br>                        <span style=""font-weight: bold;"">{</span>/* Заголовок модального окна */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                        </span>&lt;h3 className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.title<span style=""font-weight: bold;"">}</span>&gt;<span style=""font-weight: bold;"">{</span>title<span style=""font-weight: bold;"">}</span>&lt;/h3&gt;<br>                        <span style=""font-weight: bold;"">{</span>/* Разделитель */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                        </span>&lt;hr/&gt;<br>                        <span style=""font-weight: bold;"">{</span>/* Контент модального окна */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                        </span>&lt;p className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.content<span style=""font-weight: bold;"">}</span>&gt;<span style=""font-weight: bold;"">{</span>content<span style=""font-weight: bold;"">}</span>&lt;/p&gt;<br>                        <span style=""font-weight: bold;"">{</span>/* Разделитель */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                        </span>&lt;hr/&gt;<br>                        <span style=""font-weight: bold;"">{</span>/* Футер модального окна */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                        </span>&lt;span className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.footer<span style=""font-weight: bold;"">}</span>&gt;<span style=""font-weight: bold;"">{</span>footer<span style=""font-weight: bold;"">}</span>&lt;/span&gt;<br>                        <span style=""font-weight: bold;"">{</span>/* Кнопки подтверждения и отмены */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                        </span>&lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.buttons<span style=""font-weight: bold;"">}</span>&gt;<br>                            &lt;button className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.confirm<span style=""font-weight: bold;"">} </span>onClick=<span style=""font-weight: bold;"">{</span>onConfirm<span style=""font-weight: bold;"">}</span>&gt;<br>                                Agree<br>                            &lt;/button&gt;<br>                            &lt;button className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.cancel<span style=""font-weight: bold;"">} </span>onClick=<span style=""font-weight: bold;"">{</span>onCancel<span style=""font-weight: bold;"">}</span>&gt;<br>                                Cancel<br>                            &lt;/button&gt;<br>                        &lt;/div&gt;<br>                    &lt;/div&gt;<br>                &lt;/&gt;<br>            <span style=""font-weight: bold;"">)</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        </span>&lt;/&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">}<br></span></pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{</span>useEffect, useRef, useState<span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><br><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-style: italic;"">styles </span><span style=""font-weight: bold; font-style: italic;"">from </span>'./Modal.module.css'<br><br><span style=""font-weight: bold; font-style: italic;"">function </span>useStyle<span style=""font-weight: bold;"">(</span>prop, $ <span style=""font-weight: bold;"">= </span><span style=""font-style: italic;"">document</span>.body<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[value, setValue] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span>getComputedStyle<span style=""font-weight: bold;"">(</span>$<span style=""font-weight: bold;"">)</span>.getPropertyValue<span style=""font-weight: bold;"">(</span>prop<span style=""font-weight: bold;"">))<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>$.style.setProperty<span style=""font-weight: bold;"">(</span>prop, value<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>// eslint-disable-next-line<br>    <span style=""font-weight: bold;"">}</span>, [value]<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>[value, setValue]<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">export const </span>Modal <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                          </span>title,<br>                          content,<br>                          footer,<br>                          confirmCb,<br>                          cancelCb,<br>                          open <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">false<br></span><span style=""font-weight: bold; font-style: italic;"">                      </span><span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[isVisible, setVisible] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span>open<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[, setOverflow] <span style=""font-weight: bold;"">= </span>useStyle<span style=""font-weight: bold;"">(</span>'overflow'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>buttonRef <span style=""font-weight: bold;"">= </span>useRef<span style=""font-weight: bold;"">()<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>onClick <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>setVisible<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">true</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>buttonRef.current.blur<span style=""font-weight: bold;"">()<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>onConfirm <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">        </span><span style=""font-weight: bold; font-style: italic;"">typeof </span>confirmCb <span style=""font-weight: bold;"">=== </span>'function' <span style=""font-weight: bold;"">? </span>confirmCb<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">: </span>setVisible<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>onCancel <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">        </span><span style=""font-weight: bold; font-style: italic;"">typeof </span>cancelCb <span style=""font-weight: bold;"">=== </span>'function' <span style=""font-weight: bold;"">? </span>cancelCb<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">: </span>setVisible<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>onKeyDown <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{</span>key<span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">switch </span><span style=""font-weight: bold;"">(</span>key<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold; font-style: italic;"">case </span>'Escape'<span style=""font-weight: bold;"">:<br></span><span style=""font-weight: bold;"">                </span><span style=""font-weight: bold; font-style: italic;"">return </span>onCancel<span style=""font-weight: bold;"">()<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold; font-style: italic;"">case </span>'Enter'<span style=""font-weight: bold;"">:<br></span><span style=""font-weight: bold;"">                </span><span style=""font-weight: bold; font-style: italic;"">return </span>onConfirm<span style=""font-weight: bold;"">()<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold; font-style: italic;"">default</span><span style=""font-weight: bold;"">:<br></span><span style=""font-weight: bold;"">                </span><span style=""font-weight: bold; font-style: italic;"">return<br></span><span style=""font-weight: bold; font-style: italic;"">        </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-style: italic;"">document</span>.addEventListener<span style=""font-weight: bold;"">(</span>'keydown', onKeyDown<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span><span style=""font-style: italic;"">document</span>.removeEventListener<span style=""font-weight: bold;"">(</span>'keydown', onKeyDown<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>useEffect<span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        () </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(</span>isVisible <span style=""font-weight: bold;"">? </span>setOverflow<span style=""font-weight: bold;"">(</span>'hidden'<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">: </span>setOverflow<span style=""font-weight: bold;"">(</span>'auto'<span style=""font-weight: bold;"">))</span>,<br>        // eslint-disable-next-line<br>        [isVisible]<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;&gt;<br>            &lt;button className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.show<span style=""font-weight: bold;"">} </span>onClick=<span style=""font-weight: bold;"">{</span>onClick<span style=""font-weight: bold;"">} </span>ref=<span style=""font-weight: bold;"">{</span>buttonRef<span style=""font-weight: bold;"">}</span>&gt;<br>                Show Modal<br>            &lt;/button&gt;<br>            <span style=""font-weight: bold;"">{</span>isVisible <span style=""font-weight: bold;"">&amp;&amp; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">                </span>&lt;&gt;<br>                    &lt;div<br>                        className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.overlay<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                        </span>onClick=<span style=""font-weight: bold;"">{</span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span>setVisible<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                    </span>&gt;&lt;/div&gt;<br>                    &lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.modal<span style=""font-weight: bold;"">}</span>&gt;<br>                        &lt;button className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.close<span style=""font-weight: bold;"">} </span>onClick=<span style=""font-weight: bold;"">{</span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span>setVisible<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)</span><span style=""font-weight: bold;"">}</span>&gt;<br>                            x<br>                        &lt;/button&gt;<br>                        &lt;h3 className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.title<span style=""font-weight: bold;"">}</span>&gt;<span style=""font-weight: bold;"">{</span>title<span style=""font-weight: bold;"">}</span>&lt;/h3&gt;<br>                        &lt;hr/&gt;<br>                        &lt;p className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.content<span style=""font-weight: bold;"">}</span>&gt;<span style=""font-weight: bold;"">{</span>content<span style=""font-weight: bold;"">}</span>&lt;/p&gt;<br>                        &lt;hr/&gt;<br>                        &lt;span className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.footer<span style=""font-weight: bold;"">}</span>&gt;<span style=""font-weight: bold;"">{</span>footer<span style=""font-weight: bold;"">}</span>&lt;/span&gt;<br>                        &lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.buttons<span style=""font-weight: bold;"">}</span>&gt;<br>                            &lt;button className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.confirm<span style=""font-weight: bold;"">} </span>onClick=<span style=""font-weight: bold;"">{</span>onConfirm<span style=""font-weight: bold;"">}</span>&gt;<br>                                Agree<br>                            &lt;/button&gt;<br>                            &lt;button className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.cancel<span style=""font-weight: bold;"">} </span>onClick=<span style=""font-weight: bold;"">{</span>onCancel<span style=""font-weight: bold;"">}</span>&gt;<br>                                Cancel<br>                            &lt;/button&gt;<br>                        &lt;/div&gt;<br>                    &lt;/div&gt;<br>                &lt;/&gt;<br>            <span style=""font-weight: bold;"">)</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        </span>&lt;/&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">}</span></pre></div>	{}	242	2025-06-29 08:53:57.201	2025-06-29 08:53:57.201
cmchfo03k006r13mpfq71cgzv	F?T/G<x;{>	Простая	СБОРНИК::REACT Практика::Кастомные компоненты	REACT Практика	Кастомные компоненты	Как бы вы реализовали кастомный компонент Timer<br><br>Шаблон:<br><div><pre><pre><br></pre></pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{</span>useEffect, useState<span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><br><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-style: italic;"">styles </span><span style=""font-weight: bold; font-style: italic;"">from </span>'./Timer.module.css'<br><br><span style=""font-weight: bold; font-style: italic;"">const </span>format <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>vals<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt;<br></span><span style=""font-style: italic;"">    </span>vals.map<span style=""font-weight: bold;"">((</span>v<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>v.toString<span style=""font-weight: bold;"">()</span>.padStart<span style=""font-weight: bold;"">(</span>2, '0'<span style=""font-weight: bold;"">))</span>.join<span style=""font-weight: bold;"">(</span>':'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">export const </span>Timer <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{</span>hours <span style=""font-weight: bold;"">= </span>0, minutes <span style=""font-weight: bold;"">= </span>0, seconds <span style=""font-weight: bold;"">= </span>0<span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[paused, setPaused] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[over, setOver] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[[h, m, s], setTime] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span>[hours, minutes, seconds]<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>tick <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>paused <span style=""font-weight: bold;"">|| </span>over<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold; font-style: italic;"">return<br></span><span style=""font-weight: bold; font-style: italic;"">        if </span><span style=""font-weight: bold;"">(</span>h <span style=""font-weight: bold;"">=== </span>0 <span style=""font-weight: bold;"">&amp;&amp; </span>m <span style=""font-weight: bold;"">=== </span>0 <span style=""font-weight: bold;"">&amp;&amp; </span>s <span style=""font-weight: bold;"">=== </span>0<span style=""font-weight: bold;"">) </span>setOver<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">true</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">else if </span><span style=""font-weight: bold;"">(</span>m <span style=""font-weight: bold;"">=== </span>0 <span style=""font-weight: bold;"">&amp;&amp; </span>s <span style=""font-weight: bold;"">=== </span>0<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>setTime<span style=""font-weight: bold;"">(</span>[h <span style=""font-weight: bold;"">- </span>1, 59, 59]<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">else if </span><span style=""font-weight: bold;"">(</span>s <span style=""font-weight: bold;"">=== </span>0<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>setTime<span style=""font-weight: bold;"">(</span>[h, m <span style=""font-weight: bold;"">- </span>1, 59]<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">else </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>setTime<span style=""font-weight: bold;"">(</span>[h, m, s <span style=""font-weight: bold;"">- </span>1]<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>pause <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>setPaused<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">!</span>paused<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>reset <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>setTime<span style=""font-weight: bold;"">(</span>[hours, minutes, seconds]<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>setPaused<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span>setOver<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">const </span>timerId <span style=""font-weight: bold;"">= </span>setInterval<span style=""font-weight: bold;"">(</span>tick, 1000<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span>clearInterval<span style=""font-weight: bold;"">(</span>timerId<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.wrapper<span style=""font-weight: bold;"">}</span>&gt;<br>            &lt;p className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.time<span style=""font-weight: bold;"">}</span>&gt;<span style=""font-weight: bold;"">{</span>format<span style=""font-weight: bold;"">(</span>[h, m, s]<span style=""font-weight: bold;"">)</span><span style=""font-weight: bold;"">}</span>&lt;/p&gt;<br>            &lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.info<span style=""font-weight: bold;"">}</span>&gt;<span style=""font-weight: bold;"">{</span>over <span style=""font-weight: bold;"">&amp;&amp; </span>`Time's up!`<span style=""font-weight: bold;"">}</span>&lt;/div&gt;<br>            &lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.buttons<span style=""font-weight: bold;"">}</span>&gt;<br>                &lt;button onClick=<span style=""font-weight: bold;"">{</span>pause<span style=""font-weight: bold;"">} </span>className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.pause<span style=""font-weight: bold;"">}</span>&gt;<br>                    <span style=""font-weight: bold;"">{</span>paused <span style=""font-weight: bold;"">? </span>'Resume' <span style=""font-weight: bold;"">: </span>'Pause'<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                </span>&lt;/button&gt;<br>                &lt;button onClick=<span style=""font-weight: bold;"">{</span>reset<span style=""font-weight: bold;"">} </span>className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.reset<span style=""font-weight: bold;"">}</span>&gt;<br>                    Restart<br>                &lt;/button&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">}</span></pre></div>	{}	243	2025-06-29 08:53:57.249	2025-06-29 08:53:57.249
cmchfo03w006s13mpifi9bo2j	A=*rTvQ}G4	Простая	СБОРНИК::REACT Практика::Кастомные компоненты	REACT Практика	Кастомные компоненты	Как бы вы реализовали кастомный компонент Tabs<br><br>Шаблон:<br><div><pre><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{ </span>useState <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><br>// Импортируем стили для компонента Tabs<br><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-style: italic;"">styles </span><span style=""font-weight: bold; font-style: italic;"">from </span>'./Tabs.module.css'<br><br>// Создаем и экспортируем компонент Tabs<br><span style=""font-weight: bold; font-style: italic;"">export const </span>Tabs <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{ </span>defaultIndex <span style=""font-weight: bold;"">= </span>0, onClick, children <span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>// Создаем состояние для хранения текущего индекса выбранной вкладки<br><br>    // Функция для изменения выбранной вкладки<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>changeTab <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span>i<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>// Если передана функция onClick, вызываем ее, передавая имя компонента в качестве аргумента<br>        // устанавливаем новый индекс только если он отличается от текущего<br>    <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>// Компонент, который будет рендерить содержимое выбранной вкладки<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>ComponentToRender <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.item<span style=""font-weight: bold;"">}</span>&gt;<br>        <span style=""font-weight: bold;"">{</span>/*    тут что-то должно быть*/<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        </span>&lt;/div&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>// Возвращаем JSX для отображения компонента Tabs<br>    <span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.wrapper<span style=""font-weight: bold;"">}</span>&gt;<br>            <span style=""font-weight: bold;"">{</span>/* Отображаем меню вкладок */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            </span>&lt;div className=<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.menu<span style=""font-weight: bold;"">}</span>&gt;<br>                <span style=""font-weight: bold;"">{</span>/* Проходим по всем дочерним элементам (вкладкам) и отображаем кнопки для каждой из них */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                {</span>children.map<span style=""font-weight: bold;"">((</span>item, i<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">                    </span>&lt;button<br>                        key=<span style=""font-weight: bold;"">{</span>i<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                        </span>// Присваиваем классы стилей для активной и неактивной вкладки<br>                        className=<span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                            </span>i <span style=""font-weight: bold;"">=== </span><span style=""font-style: italic;"">index </span><span style=""font-weight: bold;"">? </span>`$<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.link<span style=""font-weight: bold;"">} </span>$<span style=""font-weight: bold;"">{</span><span style=""font-style: italic;"">styles</span>.selected<span style=""font-weight: bold;"">}</span>` <span style=""font-weight: bold;"">: </span><span style=""font-style: italic;"">styles</span>.link<br>                        <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                        </span>// При клике на вкладку вызываем функцию changeTab для изменения текущей вкладки<br>                        onClick=<span style=""font-weight: bold;"">{</span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span>changeTab<span style=""font-weight: bold;"">(</span>i<span style=""font-weight: bold;"">)</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                    </span>&gt;<br>                        <span style=""font-weight: bold;"">{</span>/* Выводим имя компонента в качестве названия вкладки */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                        {</span>item.type.name<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">                    </span>&lt;/button&gt;<br>                <span style=""font-weight: bold;"">))</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            </span>&lt;/div&gt;<br>            <span style=""font-weight: bold;"">{</span>/* Выводим содержимое выбранной вкладки */<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            </span>&lt;ComponentToRender /&gt;<br>        &lt;/div&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">}<br></span></pre></div><br>	<pre>import { useState } from 'react'<br><br>import styles from './Tabs.module.css'<br><br>export const Tabs = ({ defaultIndex = 0, onClick, children }) =&gt; {<br>&nbsp; const [index, setIndex] = useState(defaultIndex)<br><br>&nbsp; const changeTab = (i) =&gt; {<br>&nbsp;&nbsp;&nbsp; if (typeof onClick === 'function') onClick(children[i].type.name)<br>&nbsp;&nbsp;&nbsp; if (i !== index) setIndex(i)<br>&nbsp; }<br><br>&nbsp; const ComponentToRender = () =&gt; (<br>&nbsp;&nbsp;&nbsp; &lt;div className={styles.item}&gt;{children.filter((_, i) =&gt; i === index)}&lt;/div&gt;<br>&nbsp; )<br><br>&nbsp; return (<br>&nbsp;&nbsp;&nbsp; &lt;div className={styles.wrapper}&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div className={styles.menu}&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {children.map((item, i) =&gt; (<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;button<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; key={i}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; className={<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i === index ? `${styles.link} ${styles.selected}` : styles.link<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; onClick={() =&gt; changeTab(i)}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {item.type.name}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ))}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ComponentToRender /&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br>&nbsp; )<br>}<br></pre>	{}	244	2025-06-29 08:53:57.261	2025-06-29 08:53:57.261
cmchfo049006t13mpe3h3lik2	kc[3zDkJsu	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<div><pre>Что выведется? В чем проблема и как ее решить?<br><br><span style=""font-weight: bold; font-style: italic;"">import </span>React, <span style=""font-weight: bold;"">{ </span>useState, useEffect<span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><span style=""font-weight: bold; font-style: italic;"">import </span>ReactDOM <span style=""font-weight: bold; font-style: italic;"">from </span>'react-dom'<br><br><span style=""font-weight: bold; font-style: italic;"">function </span>A<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>'A'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>&lt;B/&gt;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">function </span>B<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>'B'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span>&lt;C/&gt;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">function </span>C<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>'C'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return null<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">function </span>D<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>'D'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return null<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">function </span>App<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[state, setState] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span>0<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span>useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>setState<span style=""font-weight: bold;"">(</span>state <span style=""font-style: italic;"">=&gt; </span>state <span style=""font-weight: bold;"">+ </span>1<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold;"">}</span>, []<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>'App'<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;div&gt;<br>            &lt;A state=<span style=""font-weight: bold;"">{</span>state<span style=""font-weight: bold;"">}</span>/&gt;<br>            &lt;D/&gt;<br>        &lt;/div&gt;<br>    <span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span>root <span style=""font-weight: bold;"">= </span>ReactDOM.createRoot<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">document</span>.getElementById<span style=""font-weight: bold;"">(</span>'root'<span style=""font-weight: bold;"">))</span>;<br>root.render<span style=""font-weight: bold;"">(</span>&lt;App/&gt;<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span></pre></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a12c858e2f9a37575ff2dc7f42a49656dc6ff5d6.jpg"><br><ul><li>самый первый рендер - app abcd</li><li>&nbsp;второй рендер - изменение стейта всего приложение заставляет вложенные элемы&nbsp; перерендирится тоже - app abcd&nbsp;</li><li>решение -&nbsp; обернуть в React.memo (HOC)</li></ul>	{}	245	2025-06-29 08:53:57.273	2025-06-29 08:53:57.273
cmchfo04m006u13mpq4vyzoy2	QHR1/@gahd	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0cfa0c7d8618259e5885fbb1f9880dc8380e7d68.jpg"><br>что выведется в консоль и почему	<ul><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-861b683dcc7dc0e48ca229c7f334931b15a78197.jpg"></li><li>B мемоизирован и C не возвращается&nbsp;</li></ul><div><br></div>	{}	246	2025-06-29 08:53:57.286	2025-06-29 08:53:57.286
cmchfo04y006v13mpkig894vi	J;M<ZxSitd	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-56f31f11d0d87a59db91feecba3a2e1c7a181a59.jpg"><br><ul><li>что выведется в консоль и почему</li></ul>	<ul><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a33f8f8aaf28fb4509e01f5672ba16df7fec1a17.jpg"></li><li>А принимает пропсом чилдрен и этот вложенный чилдрен - B</li></ul>	{}	247	2025-06-29 08:53:57.298	2025-06-29 08:53:57.298
cmchfo05a006w13mpdlu8ph6n	i%8M?`JUO~	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-db7fa8f987e7c8988e378e5a4dccab5e77a4c49b.jpg"><br>что выведется и почему	<ul><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8a6f05921ea856faaa74c002fd04b412b20dc1a4.jpg"></li><li>несмотря на изменение стейта родителя, вложенные элементы были переданы через пропс children и поэтому реакт имеет возможность сравнить версии чилдренов и не перерендиривать&nbsp;</li></ul><div><br></div>	{}	248	2025-06-29 08:53:57.31	2025-06-29 08:53:57.31
cmchfo05x006y13mpryw72v2u	q%&iZl]4)H	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-29f95359ec5d94a94cea43c5dab2cc7c925ca43a.jpg"><br>что выведется и почему&nbsp;	<ul><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b3ccc062929010d92c88db3425a5d3437f5b3cf4.jpg"></li><li>при повторном вызове A не ререндирится потому что&nbsp; memo, B - ререндерится потому что подписано на контекст&nbsp;&nbsp;</li></ul>	{}	250	2025-06-29 08:53:57.334	2025-06-29 08:53:57.334
cmchfo06a006z13mpwf7qsocz	z@>6C<hv*p	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d9f9893829f30272ea6dfc2a5225abe211d8fe8b.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5df5928cb966a92550adce26d9eefcc267e2077c.jpg">	<ul><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a6f3b7c507a67bea0d8e26bddfa78cf0f9bdaa1a.jpg"><br></li><li>пока отрабатывает импровизированный lazy-load - показывает suspence fallback и после загрузки A снова ререндерится&nbsp;</li></ul><div><br></div>	{}	251	2025-06-29 08:53:57.346	2025-06-29 08:53:57.346
cmchfo06n007013mpubl8pwkr	J28gt[eW[Q	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-83e84e0d6878859741973f508e9166beaedf4ab1.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e83dab5b42cafbb9ae3612e2234e85df45b9679c.jpg"><br>что выведется и почему	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6490441f17ca9a60d69823f978701c77dec0ba7d.jpg"><br><ul><li>suspence fallback после получения данных заставит перерендириться все вложенные компоненты&nbsp;</li></ul><div><br></div>	{}	252	2025-06-29 08:53:57.359	2025-06-29 08:53:57.359
cmchfo070007113mp893t5w9h	od8[y81Lh,	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-22782a429f4384c6c03715cc0f2b3844d559a51e.jpg"><br>что выведется и почему&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fc231c7418599a221aed94e3b1ef46210244b495.jpg"><br><ul><li>C, D - вложенные элементы, переданные как children - СПАСЕНЫ от лишних перерисовок&nbsp;</li></ul>	{}	253	2025-06-29 08:53:57.372	2025-06-29 08:53:57.372
cmchfo07d007213mppzjgq893	eOs+OktB:I	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0292d559e4a26ebb418439e0ccf9982e2923f101.jpg"><br>что выведется и почему	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1ead3d391068051eea441a9dc067c554ccbfee73.jpg"><br><ul><li>useLayoutEffect выполняется и очищается синхронно с рендерингом, в то время как useEffect выполняется асинхронно и группируется вместе для очистки и выполнения после useLayoutEffect<br></li></ul>	{}	254	2025-06-29 08:53:57.385	2025-06-29 08:53:57.385
cmchfo07q007313mpm8n88akc	tzZqm[.PQO	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4bd732783b8ed2bdc36770d6f263ddb5280acc43.jpg"><br>что выведется и почему. какая здесь проблема? как ее решить?&nbsp;	<div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e21391b5bdf22c7a579390e18a5b4416088c59d6.jpg"><br></div><div><ul><li>memo позволяет пропустить повторный рендер если пропсы не меняются</li><li>но в данном случае пропсы поменяются, так как каждый раз создается новая функция обратного вызова - новая ссылка в памяти&nbsp;</li><li>как решить - обернуть в useCallback и запомнить стабильную ссылку в памяти на эту функцию и таким образорм пропс не изменится</li><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bfaf2e382a87a3a32a87514518a4bbf3a18870ec.jpg"><br></li></ul><div><br></div></div>	{}	255	2025-06-29 08:53:57.398	2025-06-29 08:53:57.398
cmchfo083007413mpqc2ijbwf	tAB-t3c+pQ	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-31aa11731be41508e399db258f306061843c726e.jpg"><br>что выведется и почему, как решить проблему&nbsp;	<ul><li>0 1 1</li><li>setTimeOut заставляет стейт отрабатывать асинхронно и поэтому при двойном клике мы не видим последовательного изменения стейта</li><li>решение - передавать предыдущее состояние&nbsp;</li><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-67d6a721c025b2566eea8cf70ae6e8a62abe535c.jpg">&nbsp;<br></li></ul>	{}	256	2025-06-29 08:53:57.411	2025-06-29 08:53:57.411
cmchfo08d007513mpgvefl2kg	JT_.+s^Ha!	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d7c6f1d2f62343de3baae24f27130d11df40a7e9.jpg"><br>что выведется и почему&nbsp;	<ul><li>A B A</li><li>оборачивая App в memo, мы ожидаем, что компонент не будет перерисовываться при изменении его пропсов, если они остаются теми же самыми<br></li><li>Пропс children, который мы передаем компоненту A, фактически является частью App и изменяется при каждом его перерисовывании<br></li><li>Изменение пропса children в компоненте A приводит к его перерисовке, так как условия мемоизации больше не удовлетворяются<br></li><li>Однако, компонент <code>B</code>, который находится внутри <code>A</code>, не перерисовывается, потому что он мемоизирован и его пропсы остаются неизменными<br></li></ul><div><br></div>	{}	257	2025-06-29 08:53:57.422	2025-06-29 08:53:57.422
cmchfo08q007613mp6pbhg4q5	I|i$:U30.e	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1296ea719f245caf6f92d4a1d74f848221e40910.jpg"><br>что выведется и почему&nbsp;	<ul><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-721f1986fe3c6ef52aea598a4d065c040da3bdf4.jpg"><br></li><li>изменения состояния в onClick вызываются асинхронно после завершения синхронного кода по правилам реакта&nbsp;</li></ul>	{}	258	2025-06-29 08:53:57.434	2025-06-29 08:53:57.434
cmchfo093007713mpe9xrolnu	"gL#=avo~Os"	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d134bf3fd69963b188b560d3f78ff8b467399cce.jpg"><br>что выведется и почему&nbsp;	<ul><li>2 1 3&nbsp;</li><li>2- в useState переданная функция выполняется сразу же&nbsp;&nbsp;</li><li>1- state1</li><li>3- изменили state1&nbsp;</li></ul>	{}	259	2025-06-29 08:53:57.447	2025-06-29 08:53:57.447
cmchfo09d007813mpzdwkg4fh	PJ/Hcp$y,V	Простая	СБОРНИК::REACT Практика::Кастомные хуки	REACT Практика	Кастомные хуки	Напишите хук который вычислит, первый ли это рендер&nbsp;<br><br>Шаблон:<br><div><pre><span style=""font-weight: bold; font-style: italic;"">export function </span>useIsFirstRender<span style=""font-weight: bold;"">()</span><span style=""font-weight: bold;"">: </span>boolean <span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// your code here<br><span style=""font-weight: bold;"">}</span></pre></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-aa9f1a2480f280e7eda8cca1fa27eb0a6c71d992.jpg"><br><ul><li>в самом начале, то есть при первом рендере прописываем TRUE</li><li>и сука логично, что последующие рендеры не будут первыми, поэтому прописываем условие для обработки всех случаев</li></ul>	{}	260	2025-06-29 08:53:57.457	2025-06-29 08:53:57.457
cmchfo09q007913mpvonnpywu	Jn~bV0^D8b	Простая	СБОРНИК::REACT Практика::Кастомные хуки	REACT Практика	Кастомные хуки	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-45236cfe801f3b82776f9419a493758a92ce0dc6.jpg"><br>шаблон:<br><div><pre><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{ </span>Ref <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react'<br><br><span style=""font-weight: bold; font-style: italic;"">export function </span>useHover<span style=""font-weight: bold;"">&lt;</span>T <span style=""font-weight: bold; font-style: italic;"">extends </span>HTMLElement<span style=""font-weight: bold;"">&gt;</span><span style=""font-weight: bold;"">()</span><span style=""font-weight: bold;"">: </span>[Ref<span style=""font-weight: bold;"">&lt;</span>T<span style=""font-weight: bold;"">&gt;</span>, <span style=""font-weight: bold; font-style: italic;"">boolean</span>] <span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// your code here<br><span style=""font-weight: bold;"">}</span></pre></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-acae9e67a45db1066652829a4bc41418d05aa44f.jpg"><br><ul><li>создаем DOM-ссылку с помощью useRef</li><li>создаем состояние для ховера&nbsp;</li><li>в useEffect прописываем логику для отслеживания мыши и изменения стейта</li><li>возвращаем ссылку на отслеживаемый элемент и булиан isHovering&nbsp;</li></ul>	{}	261	2025-06-29 08:53:57.47	2025-06-29 08:53:57.47
cmchfo0a3007a13mp3k7m8afy	x_U*PL/g|=	Простая	СБОРНИК::REACT Практика::Кастомные хуки	REACT Практика	Кастомные хуки	Создайте хук usePrevious() для возврата к предыдущему значению. Начальное состояние undefined<br><br>Шаблон:<br><div><pre><span style=""font-weight: bold; font-style: italic;"">export function </span>usePrevious<span style=""font-weight: bold;"">&lt;</span>T<span style=""font-weight: bold;"">&gt;</span><span style=""font-weight: bold;"">(</span>value<span style=""font-weight: bold;"">: </span>T<span style=""font-weight: bold;"">)</span><span style=""font-weight: bold;"">: </span>T <span style=""font-weight: bold;"">| </span><span style=""font-weight: bold; font-style: italic;"">undefined </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// your code here<br><span style=""font-weight: bold;"">}</span></pre></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9c69a677bf0f4061ab4eaf608469b22464afa5fe.jpg"><br><br><ul><li>хук принимает value</li><li>с помощью хука useEffect сохраняем текущее значение в ссылке ref.current&nbsp;</li><li>передаем в массив зависимостей value&nbsp;</li><li>возвращаем текущее значение&nbsp;</li></ul><i>&nbsp;Таким образом, когда мы нажимаем кнопку ""Increment"", значение <code>count</code> увеличивается, и хук <code>usePrevious()</code> возвращает предыдущее значение <code>count</code>.</i><br><div><br></div><div><br></div><div><br></div>	{}	262	2025-06-29 08:53:57.483	2025-06-29 08:53:57.483
cmchfo0ed007m13mpxnjxz0le	z[>3MXD~a4	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-16ffd2cea9d4a2b6f3ead5e5f72a139171b4e3af.jpg"><br>что выведется&nbsp;	<pre><ul><li><code>""[1,2,null,3]""</code></li><li>""[1,2,null,3]""</li><li>false</li><li>true</li><li>false</li><li>false</li><li>false</li><li>true</li><li>true</li><li>false</li><li>false</li><li>false</li><li>false</li><li>false</li></ul></pre>	{}	274	2025-06-29 08:53:57.637	2025-06-29 08:53:57.637
cmchfo0en007n13mpa227wo2t	wMbI9t,5^*	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-76f31022a95b240c96b9eb8b94a1d95e24cc99c7.jpg"><br>что выведется и почему&nbsp;<br>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-056a467b3ea1078465384287cdedae934915ab1a.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c1df8aba32def7d0d6d9568f7a586261d612b0fb.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-478a21c769cd59246ecf600e7d09e0b76ac5ee75.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-db7373c7505bfc2d158dda04da7e34982cf26f6a.jpg">	{}	275	2025-06-29 08:53:57.647	2025-06-29 08:53:57.647
cmchfo0ag007b13mp1s6tmdx7	mZ)/E$.]H?	Простая	СБОРНИК::REACT Практика::Кастомные хуки	REACT Практика	Кастомные хуки	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-68184cacb8361d1e4c6c0a1fdbf10c2563d8b12a.jpg"><br>шаблон:<br><div><pre><span style=""font-weight: bold; font-style: italic;"">export function </span>useDebounce<span style=""font-weight: bold;"">&lt;</span>T<span style=""font-weight: bold;"">&gt;</span><span style=""font-weight: bold;"">(</span>value<span style=""font-weight: bold;"">: </span>T, delay<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">number</span><span style=""font-weight: bold;"">)</span><span style=""font-weight: bold;"">: </span>T <span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// your code here<br><span style=""font-weight: bold;"">}</span></pre></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-49d83bdbf2e91417178a1cbf889060aa83ae4dc6.jpg"><br><ul><li>создаем стейт для отложенного состояния&nbsp;</li><li>создаем useEffect :&nbsp;эффект вызывается каждый раз, когда value или delay изменяются.</li><li>&nbsp;Он создает таймер, который устанавливает debounced значение на value после истечения задержки delay.&nbsp;</li><li>Если значение value изменяется снова до истечения таймера, предыдущий таймер отменяется и создается новый</li></ul>	{}	263	2025-06-29 08:53:57.496	2025-06-29 08:53:57.496
cmchfo0at007c13mpdqf88s52	HjgTN_NVKf	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f0563ded59f1508d42efbbc857e69d0612f51e8a.jpg"><br>что выведется	"<ul><li><div><pre>1 2 3 4 7 5 6 9 8	{}	264	2025-06-29 08:53:57.509	2025-06-29 08:53:57.509
cmchfo0b5007d13mp9iloxr4z	"vo(LL#pu#j"	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c302c5aa144215f04388b4dcccdf4256d0e1338a.jpg"><br>что выведется и почему	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7e764bec9bd2ac4768ae83f8afa45d79aabf8180.jpg">	{}	265	2025-06-29 08:53:57.521	2025-06-29 08:53:57.521
cmchfo0bh007e13mplclucrep	t/[~D1k:xo	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-219fa6accca7ed0a0a4692c6dd2abf70c950548b.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-18b251680540a17cd53a1609b293ca76b9e5126d.jpg">&nbsp;<br>что выведется&nbsp;	<ul><li>""bfe""</li><li>""bfe""</li><li>undefined</li><li>""bfe""</li><li>""bfe""</li><li>undefined</li><li>undefined</li><li>undefined</li><li>""bfe""</li></ul><div><br></div>	{}	266	2025-06-29 08:53:57.533	2025-06-29 08:53:57.533
cmchfo0bu007f13mplieysvsq	P`eK,1rkz^	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-da4e9b991b9f06d51b74166870041d1d7f43e740.jpg"><br>что выведется&nbsp;	<ul><li>1</li><li>2</li><li>undefined</li><li>3</li><li>undefined</li><li>4</li><li>undefined</li><li>undefined<br></li></ul><div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f635a5a85e4d45187775917883cf95ba2c67cf51.jpg"><br></div>	{}	267	2025-06-29 08:53:57.546	2025-06-29 08:53:57.546
cmchfo0c7007g13mpmvn2h9wh	lsC<$_lv%v	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e99356980368010508d1e6449c43b657cb6d1f97.jpg"><br>что выведется&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b8818084a6fef1c4fc1767a0b485e71bd01decd7.jpg">	{}	268	2025-06-29 08:53:57.559	2025-06-29 08:53:57.559
cmchfo0ci007h13mp42ox759t	b$<cVc>K=	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ff8a31489ba11a2ea3f0361673002af3f44b5ed0.jpg"><br>что выведется&nbsp;	<ul><li>&nbsp;5 5 5 5 5 0 1 2 3 4</li></ul>	{}	269	2025-06-29 08:53:57.571	2025-06-29 08:53:57.571
cmchfo0cx007i13mpykiq5uii	BgrME!/Wf>	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0f2f953d3790ef5338acf65d5e1f714bd4936574.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-68a46a4eaded59dc4ba1745fec52a7234a9ea741.jpg"><br>что выведется и почему&nbsp;<br>	<ul><li>1&nbsp;</li><li>1&nbsp;</li><li>1&nbsp;</li><li>undefined&nbsp;</li><li>2&nbsp;</li><li>1&nbsp;</li><li>undefined&nbsp;</li><li>undefined&nbsp;</li><li>undefined&nbsp;</li><li>undefined&nbsp;&nbsp;</li><li>undefined&nbsp;&nbsp;</li><li>undefined&nbsp;</li><li>1&nbsp;</li><li>1&nbsp;</li><li>1</li></ul>	{}	270	2025-06-29 08:53:57.585	2025-06-29 08:53:57.585
cmchfo0da007j13mpbinohq3m	G)Td`^=Bgu	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-80ad89fd9062cc23e6abd2dd93dd3f8c1d371561.jpg"><br>что выведется и почему&nbsp;	<ul><li>3 2 2&nbsp;</li><li>+aa - увеличивает значение, потом возвращает, поэтому a = 2,&nbsp; b = 2</li><li>a++ возвращает, потом увеличивает, поэтому a = 3, c = 2</li></ul><div><br></div><div><br></div>	{}	271	2025-06-29 08:53:57.598	2025-06-29 08:53:57.598
cmchfo0dm007k13mp7g0eleot	uQM*5W_]F=	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a937da828ae809bb6751dac5a706acd83cac43b8.jpg"><br>что выведется&nbsp;	<pre><ul><li><code>true</code></li><li><code>false</code></li><li><code>""31""</code></li><li><code>2</code></li><li><code>1</code></li><li><code>6</code></li><li><code>1</code></li><li><code>NaN</code></li><li><code>0</code></li><li><code>0</code></li></ul><code></code></pre>	{}	272	2025-06-29 08:53:57.61	2025-06-29 08:53:57.61
cmchfo0dy007l13mpd7yw4qgh	e>;`]_U!^9	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5193b9392bcea6c726a32de9c21770876382d7f0.jpg"><br>что выведется&nbsp;	""undefined"",""number"",""number""	{}	273	2025-06-29 08:53:57.622	2025-06-29 08:53:57.622
cmchfo0fc007p13mp2fgspvfk	"hY1&[/#|vK"	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-47d87053407b77d9d8ecf65cc6be6c7b51f7f7f0.jpg">	<ul><li>undefined</li><li>""error""</li><li>undefined</li><li>2</li><li>""error2""</li></ul>	{}	277	2025-06-29 08:53:57.673	2025-06-29 08:53:57.673
cmchfo0fo007q13mp7e5wkq4k	"7)Z7K(*_#"	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-45bd7b39e7c51d758075f2c5886f926278b26ebe.jpg"><br>что выведется&nbsp;	<pre><ul><li><code>undefined</code></li><li>1</li><li>2</li><li>3</li><li>1</li></ul><div><br></div><div><br></div></pre>	{}	278	2025-06-29 08:53:57.684	2025-06-29 08:53:57.684
cmchfo0fz007r13mpbxrqi4cw	dZ4S$FsBk(	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5d6b6b849d9b9374a1429eb8434d3d3adcb81284.jpg"><br>что выведется&nbsp;	"<pre><code>1	{}	279	2025-06-29 08:53:57.696	2025-06-29 08:53:57.696
cmchfo0gc007s13mpqttrlnec	bDMvH(>KIg	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4751cf8af38f774764efc6924bfd6185c713de07.jpg"><br>что выведется&nbsp;	"<pre><code>1,2	{}	280	2025-06-29 08:53:57.708	2025-06-29 08:53:57.708
cmchfo0gp007t13mpv2h923qm	z8H_O:!)~%	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ed5f578a700cd9f35760959b6d3bc13877233228.jpg">	<ul><li>ошибка</li><li>если уберем запятую будет все ок</li></ul>	{}	281	2025-06-29 08:53:57.721	2025-06-29 08:53:57.721
cmchfo0h2007u13mpqs7e5mty	t}1;M0uOtF	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b40e8c245d9cab0fd237370d64243d67442b83cd.jpg">	<ul><li>Promise {:10}<br></li></ul><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-985b80ccf8eb0fedc81821a939a557c6d71a5acb.jpg"><br>	{}	282	2025-06-29 08:53:57.734	2025-06-29 08:53:57.734
cmchfo0hf007v13mpduovk2lj	M7_/zv]b(Z	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6496e3d7a54b74aa9b6ce6ed38d97911aaa84867.jpg">	<ul><li>Promise {:undefined}<br></li></ul><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-309e9605204f65d1e9cbbbd46ff7c417db58fbba.jpg"><br>	{йц}	283	2025-06-29 08:53:57.747	2025-06-29 08:53:57.747
cmchfo0hs007w13mp0xqk9o1q	w;oS6CnsA=	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d60ce019de6f3a0587f6d313b77d6e41ea152222.jpg">	number number string object	{йц}	284	2025-06-29 08:53:57.76	2025-06-29 08:53:57.76
cmchfo0i4007x13mpkmqakne7	k;KrTkJ=[U	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2ed1a68405c72e8b6471931c624667d6bd721220.jpg">	<ul><li>['Orange'] и ['Apple']<br></li><li>Аргументу&nbsp;<code>items</code>&nbsp;при каждом вызове функции&nbsp;<code>add</code>&nbsp;присваивается пустой массив (значение по умолчанию), который возвращается с помещенным в него значением аргумента&nbsp;<code>item</code>.<br></li></ul>	{йц}	285	2025-06-29 08:53:57.772	2025-06-29 08:53:57.772
cmchfo0ip007y13mpqgtkp5pr	P<_M;IyC:	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-04c30c50bd1d4bb2a59afb52ae0e412d0f030ce3.jpg">	<ul><li>3 3 3 и 3 4 5<br></li><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-421d7faee370d2547324e22b5ef336ae4e647da2.jpg"><br></li></ul><div><br></div>	{йц}	286	2025-06-29 08:53:57.793	2025-06-29 08:53:57.793
cmchfo0j0007z13mpcs92smpo	HCJx^p1[!o	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-456232af3ef135b273e7b12a163be1202f95e215.jpg">	false false true true	{йц}	287	2025-06-29 08:53:57.804	2025-06-29 08:53:57.804
cmchfo0jb008013mpqirmkvba	gKLTxSrPW/	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-cc0c88afec748be7dbd5915e21ae8e8b3aa29d1a.jpg">	<ul><li>hello hi hey world yo<br></li></ul>	{йц}	288	2025-06-29 08:53:57.815	2025-06-29 08:53:57.815
cmchfo0jo008113mpjkvdd5jk	ot!]GX%QYg	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-106192fe2069acde1e80cf1bb0b43834d272c7ef.jpg">	true<br>true<br>true<br>false<br>false<br>true<br>true<br>true	{йц}	289	2025-06-29 08:53:57.828	2025-06-29 08:53:57.828
cmchfo0k0008213mpuvew7xx4	EBq(p(Ep6j	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ba6a3c3b242fddc4da4a71aae7175a3f549e18a4.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-643b0301257cea095a26991800fa89df01da1010.jpg">	{йц}	290	2025-06-29 08:53:57.84	2025-06-29 08:53:57.84
cmchfo0kc008313mpyo02oakn	Z+t*V42Rj	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c679e9e94d9c97a6517c9d3b79a9717207bb11dd.jpg">	false<br>true<br>true<br>true<br>true<br>false	{йц}	291	2025-06-29 08:53:57.852	2025-06-29 08:53:57.852
cmchfo0ko008413mpbe27whgg	p115)qW.3<	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8176767e4c3de56bb5d6ccfc87098cbb47820f0c.jpg">ыгыгыгы ГРЕБИ быстрее&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-441c7710baa501c96a37e070aa470767e3dc608e.jpg">	{йц}	292	2025-06-29 08:53:57.864	2025-06-29 08:53:57.864
cmchfo0l1008513mp7u0eb7qv	"H<X(1tu]#*"	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f6185024dc0671281774201974742bf1e8ab0d01.jpg">	<pre><code>""object"	{}	293	2025-06-29 08:53:57.877	2025-06-29 08:53:57.877
cmchfo0lc008613mp72n9lsnm	q[|kXC)4.0	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c4279f6362f38c97bb1f8056ccf2033604e6a4c6.jpg">	"<pre><code>[]	{}	294	2025-06-29 08:53:57.888	2025-06-29 08:53:57.888
cmchfo0ln008713mpwwwu2noe	Ef=&zG<Uq*	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6080d72aad65a59e07a50f8ca7bebac3c444cf45.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f9965ec9108dfe52d0fe970e5b6c3525ce3a4207.jpg">	{йц}	295	2025-06-29 08:53:57.899	2025-06-29 08:53:57.899
cmchfo0ly008813mp3ts3rc4a	"Ld#;4%?!4u"	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f9ca127b3463c2221cce688c2195a12f96472547.jpg">	"<pre><code>true	{}	296	2025-06-29 08:53:57.911	2025-06-29 08:53:57.911
cmchfo0m9008913mp08kppdlm	qf,LGC<rDz	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b4f2aab3b0f1a7171f8535da8eced2b1e4159065.jpg">	"<pre><code>2	{}	297	2025-06-29 08:53:57.922	2025-06-29 08:53:57.922
cmchfo0mm008a13mpspwr5qqd	BB3RPvcgJi	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-907888ad506af9ac4e8ddb8b888d3fadbee862b3.jpg">	"<pre><code>true	{}	298	2025-06-29 08:53:57.934	2025-06-29 08:53:57.934
cmchfo0mv008b13mp3w6nzdrx	G/U1rJmO?D	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f1b4b9be93142fb2e882a29c1a560c5f64eb8931.jpg">	<pre><code>""number"	{}	299	2025-06-29 08:53:57.943	2025-06-29 08:53:57.943
cmchfo0n7008c13mp2yxhf81e	lX5AWHR]qx	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0260d240b3bed21e0bd89316adac5a85441faf06.jpg">	"<pre><code>undefined	{}	300	2025-06-29 08:53:57.955	2025-06-29 08:53:57.955
cmchfo0nj008d13mphecib8yq	E0OV2)4.p(	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-336c0bcde31dffae5fd0c9f7c07d9f1a7fb93923.jpg">	"<pre><code>undefined	{}	301	2025-06-29 08:53:57.967	2025-06-29 08:53:57.967
cmchfo0nv008e13mpdtvnd1h0	ubWWHeJajg	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-17fcf990788b09bb5117186f069bd99cbfb45755.jpg">	"<pre><code>NaN	{}	302	2025-06-29 08:53:57.979	2025-06-29 08:53:57.979
cmchfo0o6008f13mpk4o711ue	L&^AeU25Rg	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3af860dff835fca94b884053897d07320ff4805a.jpg">	<pre><code>""2"	{}	303	2025-06-29 08:53:57.99	2025-06-29 08:53:57.99
cmchfo0oh008g13mpoxm081eg	AwU%Z>vf1)	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-df9dcf13f391eb8145b9ebed16d0ff32d82b24d4.jpg">	1<br>10<br>2<br>3<br>	{йц}	304	2025-06-29 08:53:58.001	2025-06-29 08:53:58.001
cmchfo0ot008h13mpzwnjfwfi	oQ%:?ddI^u	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3ec4bc5e38cc6689cbf6f249e460f7c637f43b4c.jpg">	"<pre><code>4	{}	305	2025-06-29 08:53:58.013	2025-06-29 08:53:58.013
cmchfo0p6008i13mpnsw5edxu	qMJaH6UBps	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9184b265856f5f5fd8771a0b57b6f069b0a930b9.jpg"><br><div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>moveZeros<span style=""font-weight: bold;"">(</span>list<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// your code here<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span></pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>moveZeros<span style=""font-weight: bold;"">(</span>list<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">let </span>idx <span style=""font-weight: bold;"">= </span>0;<br><br>    <span style=""font-weight: bold; font-style: italic;"">for </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">let </span>i <span style=""font-weight: bold;"">= </span>0; i <span style=""font-weight: bold;"">&lt; </span>list.length; i<span style=""font-weight: bold;"">++</span><span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>list[i] <span style=""font-weight: bold;"">!== </span>0<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>list[idx<span style=""font-weight: bold;"">++</span>] <span style=""font-weight: bold;"">= </span>list[i]<br>        <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">while </span><span style=""font-weight: bold;"">(</span>idx <span style=""font-weight: bold;"">&lt; </span>list.length<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>list[idx<span style=""font-weight: bold;"">++</span>] <span style=""font-weight: bold;"">= </span>0;<br>    <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">}<br></span></pre></div>	{}	306	2025-06-29 08:53:58.026	2025-06-29 08:53:58.026
cmchfo0pj008j13mpwtd0hkbk	C3&SPCgq7h	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3b1c198a3dbad130cffb8d5b191138c21e6f7fe2.jpg"><br><div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>promisify<span style=""font-weight: bold;"">(</span>func<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// your code here<br><span style=""font-weight: bold;"">}<br></span></pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>promisify<span style=""font-weight: bold;"">(</span>func<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return function </span><span style=""font-weight: bold;"">(</span>...args<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">return new </span>Promise<span style=""font-weight: bold;"">((</span>resolve, reject<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>func.call<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">this</span>, ...args, <span style=""font-weight: bold;"">(</span>error, data<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>error<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                    </span>reject<span style=""font-weight: bold;"">(</span>error<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">                </span><span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">else </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                    </span>resolve<span style=""font-weight: bold;"">(</span>data<span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">                </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            }</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">)<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;""><br></span></pre></div>	{}	307	2025-06-29 08:53:58.039	2025-06-29 08:53:58.039
cmchfo0pw008k13mp67023hdt	kEt5Npv]^$	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	<strong>В useEffect есть колбек, колбек возвращает функцию. Что за функция и какие есть кейсы применения?</strong>	Речь идет о функции очистки. Ею, например, можно очистить таймер, чтобы не было утечки памяти. Вызывается перед следующим ререндером, если поменялись зависимости или перед демонтированием.	{}	308	2025-06-29 08:53:58.053	2025-06-29 08:53:58.053
cmchfo0q9008l13mpiutb3d7r	zOE0yC{S3D	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	<strong>Может ли быть асинхронная setup функция в useEffect? Почему? Как выполнить асинхронные действия внутри него?</strong>	Setup функция - первый параметр, что мы прокидываем в хук. То есть код, который вызываем при монтировании и обновлении зависимостей. Она не может быть асинхронной. Асинхронная функция возвращает промис. Колбек useEffect (setup) возвращает или функцию очистки, или ничего, но не промис. Чтобы выполнить асинхронные действия, можно сделать<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4c663b9fddff63967229f970b39691feb2b3905e.jpg">	{}	309	2025-06-29 08:53:58.065	2025-06-29 08:53:58.065
cmchfo0ql008m13mpgyijqo8g	n2`;;J0-Ef	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	<strong>В чем отличие useEffect от useLayoutEffect? Можешь привести кейс использования useLayoutEffect?</strong>	useEffect вызывается <strong>в какой-то момент </strong>после того, как браузер все отрисовал. useLayoutEffect вызывается <strong>строго перед тем</strong>, как браузер все отрисовал&nbsp;	{}	310	2025-06-29 08:53:58.077	2025-06-29 08:53:58.077
cmchfo0qw008n13mpqyw8s8yb	t6^6tFZid]	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	<strong>Зачем нужны useMemo и useCallback?</strong>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-70580aae7e13ed46492002a80ff76f72f3ed5e91.jpg">	{}	311	2025-06-29 08:53:58.088	2025-06-29 08:53:58.088
cmchfo0r7008o13mpjispl43a	q-sxC?>*,V	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	<strong>Какие есть кейсы использования useRef?</strong>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-992cd9c75ca2037af8d3e3624d13d60d447674ca.jpg">	{}	312	2025-06-29 08:53:58.099	2025-06-29 08:53:58.099
cmchfo0rj008p13mp04g50tbl	i}[V/=W44z	Простая	СБОРНИК::REACT Теория::REACT Основное	REACT Теория	REACT Основное	<strong>Для чего нужен key в реакте</strong>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d8bd832fc000159f68de3928882ce8fa4aa5a28e.jpg">	{}	313	2025-06-29 08:53:58.111	2025-06-29 08:53:58.111
cmchfo0rt008q13mpvu8icmc3	mq{|!X6-$7	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	<strong>В каком случае понадобится использовать POST запрос вместо GET, даже если мы не хотим ничего менять на сервере?</strong>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1139d567e3f8e2abf3b00b2a25398f9b3420b6a6.jpg">	{}	314	2025-06-29 08:53:58.121	2025-06-29 08:53:58.121
cmchfo0s6008r13mp6207dgql	XpyU}g8;*	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	<strong>В чем безопаснее хранить токен - в локалсторадже или куках? Почему?</strong>	<ul><li>В куках, потому что можно запретить доступ к куке из javascript. Таким образом, если кто-то проведет XSS атаку и сможет выполнить js-код у другого пользователя, он не сможет украсть у него токен, так как к куке нет доступа из JS.</li></ul>	{}	315	2025-06-29 08:53:58.134	2025-06-29 08:53:58.134
cmchfo0sh008s13mprit65e4a	wC+Q+@{[BG	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c27383b1b6eb93cedd750c9b0e64b8f0bb6a0be9.jpg"><br><div><pre>Напиши свой Паршиал</pre><pre>type MyPartial<span style=""font-weight: bold;"">&lt;</span>T<span style=""font-weight: bold;"">&gt; </span><span style=""font-weight: bold;"">=<br></span>// your code here, please don't use Partial&lt;T&gt;</pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">type </span>MyPartial<span style=""font-weight: bold;"">&lt;</span>T<span style=""font-weight: bold;"">&gt; =  </span><span style=""font-weight: bold;"">{</span>[K <span style=""font-weight: bold; font-style: italic;"">in keyof </span>T]<span style=""font-weight: bold;"">?: </span>T[K]<span style=""font-weight: bold;"">}</span></pre></div>	{}	316	2025-06-29 08:53:58.145	2025-06-29 08:53:58.145
cmchfo0su008t13mpazqm0p72	Fmg}k9Rw>w	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b509bc16cdaec69e93fe765e0c3fa9da9be707f5.jpg"><br><div><pre>Напши кастомный тип для получения первого элема</pre><pre>type FirstChar<span style=""font-weight: bold;"">&lt;</span>T <span style=""font-weight: bold; font-style: italic;"">extends </span>string<span style=""font-weight: bold;"">&gt; </span><span style=""font-weight: bold;"">=<br></span>// your code here</pre></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-219c54bbf6b6d11d4e7d33f780f7c84fbb138c01.jpg">	{}	317	2025-06-29 08:53:58.158	2025-06-29 08:53:58.158
cmchfo0t5008u13mp7quvxe8f	Jkq7Rs<mY`	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4f34b15bc08854d8cac186b709a949a6ff4702e3.jpg"><br><div><pre>Напши свой кастомный Readonly</pre><pre>type MyReadonly<span style=""font-weight: bold;"">&lt;</span>T<span style=""font-weight: bold;"">&gt; </span><span style=""font-weight: bold;"">=<br></span>// your code here, please don't use Readonly&lt;T&gt; in your code</pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">type </span>MyReadonly<span style=""font-weight: bold;"">&lt;</span>T<span style=""font-weight: bold;"">&gt; = </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">readonly </span>[P <span style=""font-weight: bold; font-style: italic;"">in keyof </span>T]<span style=""font-weight: bold;"">: </span>T[P]<br><span style=""font-weight: bold;"">}</span></pre></div>	{}	318	2025-06-29 08:53:58.169	2025-06-29 08:53:58.169
cmchfo13d009m13mpqxzwuo22	"LZIt/LRY#R"	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	- Content Security Policy что это и какую проблему решает&nbsp;	- Content Security Policy<br>&nbsp;&nbsp;&nbsp; - решает проблему XSS - настраивает политику CSP, указывая доверенные источники для скриптов, стилей, изображений и других ресурсов	{}	346	2025-06-29 08:53:58.538	2025-06-29 08:53:58.538
cmchfo0tm008v13mpt9kryr7a	z|&:]]S}r:	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-911e21be409d0ce72c7c6356c392fe07ff5b61c8.jpg"><div><pre>Напиши свой кастомный Required<br>type MyRequired<span style=""font-weight: bold;"">&lt;</span>T<span style=""font-weight: bold;"">&gt; </span><span style=""font-weight: bold;"">=<br></span>// your code here, please don't use Required&lt;T&gt; in your code</pre></div>	<div><pre><span style=""font-weight: bold; font-style: italic;"">type </span>MyRequired<span style=""font-weight: bold;"">&lt;</span>T <span style=""font-weight: bold; font-style: italic;"">extends object</span><span style=""font-weight: bold;"">&gt; = </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// the 'optional' symbol = '?'<br>    // the 'not' symbol = '-'<br>    // K is not optional in T<br>    [K <span style=""font-weight: bold; font-style: italic;"">in keyof </span>T]<span style=""font-weight: bold;"">-?: </span>T[K]<br><span style=""font-weight: bold;"">}</span></pre></div>	{}	319	2025-06-29 08:53:58.187	2025-06-29 08:53:58.187
cmchfo0u4008w13mpzg0fqb0f	NfVHnlJ@^X	Простая	СБОРНИК::TS Теория	TS Теория	\N	типы vs интерфейсы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ad92664e24074e7b389fbcf48ed08e2f24ba4184.jpg">	{}	320	2025-06-29 08:53:58.204	2025-06-29 08:53:58.204
cmchfo0ud008x13mp85wrk09k	J&H>!4~avA	Простая	СБОРНИК::Паттерны и архитектура::Архитектура	Паттерны и архитектура	Архитектура	что такое архитектура вообще? почему она важна?&nbsp;	<div>В это понятие входит несколько аспектов&nbsp;</div><ul><li>это набор модулей, кирпичиков, компонентов системы&nbsp;</li><li>это описание того, как эти компоненты (модули) должны разрабатываться&nbsp;</li><li>это также описание *связей* между этими модулями и также создание интерфейсов, четко описывающих для чего данный модуль предназначен</li></ul>	{}	321	2025-06-29 08:53:58.214	2025-06-29 08:53:58.214
cmchfo0uq008y13mp82ugv85c	k,w6=Q.yyQ	Простая	СБОРНИК::Паттерны и архитектура::Архитектура	Паттерны и архитектура	Архитектура	в идеале по каким двум архитектурным правилам пишутся модули?&nbsp;	<ul><li>сильная связанность (направленные на решение одной четкой задачи)</li><li>слабая зацепленность (как можно менее зависимы от других модулей)</li></ul><div><br></div>	{}	322	2025-06-29 08:53:58.227	2025-06-29 08:53:58.227
cmchfo0v2008z13mpjjgrgvud	Npm;4zw8bU	Простая	СБОРНИК::Паттерны и архитектура::Архитектура	Паттерны и архитектура	Архитектура	что можете рассказать про Антипаттерн God Object	<ul><li>Классы, функции, компоненты, которые выполняют сразу все.</li><li>Нет четко выделенных модулей, компонентов.</li><li>&nbsp;Код решает задачу, но распутать кучу уже почти невозможно.</li><li>&nbsp;Обладает и высокой связанность и высокой зацепленностью.<br></li></ul>	{}	323	2025-06-29 08:53:58.238	2025-06-29 08:53:58.238
cmchfo0ve009013mpnupam56x	"gq,oggj4#F"	Простая	СБОРНИК::Паттерны и архитектура::Архитектура	Паттерны и архитектура	Архитектура	что можете рассказать про паттерн Ideal. На чем делается акцент в хорошо продуманной архитектуре?	<ul><li>Связи между модулями слабые.</li><li>Внутри компонента модули, решающие одну задачу - сильно связаны с друг другом</li><li>Удаление/изменение модуля простое</li><li>И акцент делается именно на&nbsp;безболезненное удаление модуля, которое не повлияет на работу приложения</li></ul>	{}	324	2025-06-29 08:53:58.251	2025-06-29 08:53:58.251
cmchfo0w3009113mp3alhhcar	D)R+_0g.@P	Простая	СБОРНИК::Паттерны и архитектура::Архитектура	Паттерны и архитектура	Архитектура	в чем основная идея MVC MVVM?	<ul><li>основная идея - разделение интерфейса от бизнес логики</li></ul>	{}	325	2025-06-29 08:53:58.275	2025-06-29 08:53:58.275
cmchfo0wf009213mp7imli25a	pr5p:vNYId	Простая	СБОРНИК::Паттерны и архитектура::Архитектура	Паттерны и архитектура	Архитектура	Почему объединение UI и Логики - это плохо? Например Калькулятор. И как нужно было сделать?	<ul><li>Хотим создать новую тему для пользователей</li><li>Но просто так поменять интерфейс мы уже не сможем, так как он тесно связан с логикой.&nbsp; </li></ul>В идеале правильно сделать так<br><ul><li>&nbsp;Отделяем UI и Логику</li><li>&nbsp;И добавляем связующее звено Контроллер</li><li>За счет Контроллера мы не получает сильной связанности между интерфейсом и логикой</li></ul>	{}	326	2025-06-29 08:53:58.287	2025-06-29 08:53:58.287
cmchfo0ws009313mpccahq3r7	LP>{7~>TSm	Простая	СБОРНИК::Паттерны и архитектура::Архитектура	Паттерны и архитектура	Архитектура	Кратко опишите концепцию MVC<br><ul><li>зачем model</li><li>зачем view</li><li>зачем controller</li><li>как происходит взаимодействие между Model - View - Controller</li></ul><div><br></div>	<ul><li><div>Разделение интерфейса пользователя и логики программы:</div><ul><li>Логика программы является единственным источником истины.</li><li>Для взаимодействия с этим источником был создан контроллер, который:<ul><li>Обрабатывает данные.</li><li>Валидирует данные.</li><li>Передает данные в модель.</li><li>Подготавливает ответ.</li><li>Возвращает данные обратно в интерфейс пользователя.</li></ul></li></ul></li><li><div>Работа контроллера:</div><ul><li>Контроллер получает данные из запроса пользователя.</li><li>Провалидирует данные, при необходимости.</li><li>Передает данные в модель.</li><li>Обрабатывает ошибки и передает их в модель.</li></ul></li><li><div>Взаимодействие между контроллером, моделью и представлением:</div><ul><li>В представлении формируется интерфейс для пользователя.</li><li>Пользователь взаимодействует с интерфейсом, например, выбирает пользователя из списка, получая его ID.</li><li>Контроллер использует полученный ID для работы с моделью.</li><li>Модель обрабатывает запрос и возвращает данные контроллеру.</li><li>Контроллер обрабатывает полученные данные и ошибки, при необходимости, и передает их в представление.</li></ul></li></ul><div><br></div>	{}	327	2025-06-29 08:53:58.301	2025-06-29 08:53:58.301
cmchfo0x5009413mp6mp0spa1	BS,i]3d2UJ	Простая	СБОРНИК::Паттерны и архитектура::Архитектура	Паттерны и архитектура	Архитектура	Какие вообще виды архитектуры знаете применительно к фронтенду? Различие между ними?	<ul><li>Классическая - без архитектуры&nbsp;</li><li>Модульная простая&nbsp;</li></ul><div><div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20231110195638.jpeg"></div></div><ul><li>FSD - топ архитектура : четкие архитектурные правила, иерархические слои и тд<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1d993247cd107439c8a2c9f5989ee27b049f1d1a.jpg"><br></li></ul><div><br></div><div><br></div>	{}	328	2025-06-29 08:53:58.313	2025-06-29 08:53:58.313
cmchfo0xg009513mprlo6s8wf	bl|hkn.g6Q	Простая	СБОРНИК::Паттерны и архитектура::Паттерны, ООП и SOLID	Паттерны и архитектура	Паттерны, ООП и SOLID	Какие есть модификаторы доступа?&nbsp;	<ul><li><div><strong>public (открытый):</strong></div></li><li><div><strong>private (закрытый):</strong></div></li><li><div><strong>protected (защищенный):</strong></div></li><li><div><strong>default (по умолчанию)</strong></div></li></ul>	{}	329	2025-06-29 08:53:58.324	2025-06-29 08:53:58.324
cmchfo0xs009613mph3trazjy	p:LgvPAVB(	Простая	СБОРНИК::Паттерны и архитектура::Архитектура	Паттерны и архитектура	Архитектура	Что такое Связность	<ul><li><a href=""https://ru.wikipedia.org/wiki/%D0%A1%D0%B2%D1%8F%D0%B7%D0%BD%D0%BE%D1%81%D1%82%D1%8C_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)"">Связность</a>&nbsp;— степень, в&nbsp;которой задачи некоторого модуля связаны друг с&nbsp;другом.&nbsp;</li><li>Чем выше связность, &nbsp;тем выше сфокусирован модуль на&nbsp;конкретной задаче, тем лучше.</li></ul>	{}	330	2025-06-29 08:53:58.336	2025-06-29 08:53:58.336
cmchfo0y5009713mpd2n7fgio	BY,e4+dSde	Простая	СБОРНИК::Паттерны и архитектура::Архитектура	Паттерны и архитектура	Архитектура	Что такое зацепленность	<ul><li><a href=""https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D1%86%D0%B5%D0%BF%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)"">Зацепление</a>&nbsp;— степень взаимозависимости разных модулей.&nbsp;</li><li>Чем выше зацепление, тем более хрупкой получается система, и&nbsp;тем сложнее вносить изменения.<br></li></ul>	{}	331	2025-06-29 08:53:58.349	2025-06-29 08:53:58.349
cmchfo0yi009813mpdljhif5n	umn>=G1qh-	Простая	СБОРНИК::Паттерны и архитектура::Паттерны, ООП и SOLID	Паттерны и архитектура	Паттерны, ООП и SOLID	Что такое Абстракция&nbsp;	"<div>Абстракция — это модель некоего объекта или явления	{}	332	2025-06-29 08:53:58.362	2025-06-29 08:53:58.362
cmchfo0yu009913mpymvitfl4	nUxj8/XPoK	Простая	СБОРНИК::Паттерны и архитектура::Паттерны, ООП и SOLID	Паттерны и архитектура	Паттерны, ООП и SOLID	что такое зависимость? как можно ослабить?	"<ul><li>Зависимость — это базовая связь между классами, которая	{}	333	2025-06-29 08:53:58.374	2025-06-29 08:53:58.374
cmchfo0z7009a13mpeng14esa	k?M}4?y4fb	Простая	СБОРНИК::Паттерны и архитектура::Паттерны, ООП и SOLID	Паттерны и архитектура	Паттерны, ООП и SOLID	Какие есть основные группы паттернов?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6ade87f3ec3bf95e31e244cf63deee11e832391f.jpg">	{}	334	2025-06-29 08:53:58.387	2025-06-29 08:53:58.387
cmchfo0zk009b13mpwpk0vg5k	yoI_`hX@eY	Простая	СБОРНИК::Паттерны и архитектура::Паттерны, ООП и SOLID	Паттерны и архитектура	Паттерны, ООП и SOLID	Зачем вообще использовать паттерны? В чем преимущество?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-eeb9ce21c5537f26365e8fba5fcbff31ba782d2b.jpg">	{}	335	2025-06-29 08:53:58.4	2025-06-29 08:53:58.4
cmchfo0zv009c13mpl8azuagf	qhWqmU{<To	Простая	СБОРНИК::Паттерны и архитектура::Паттерны, ООП и SOLID	Паттерны и архитектура	Паттерны, ООП и SOLID	Бенефиты Open-Closed Principe	<ul><li>Не нужно делать регресионноре тестирование, так как не лазим в старый код и ничего не ломаем</li><li>Меньше вероятность ошибок</li></ul>	{}	336	2025-06-29 08:53:58.411	2025-06-29 08:53:58.411
cmchfo106009d13mpp0dhttvw	Jk~GU~$^o)	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	что происходит когда мы в браузере ввели адрес сайта и нажали enter&nbsp;	&nbsp; &nbsp; - сначал нужно найти ip адрес по которому будет выдана html<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - кэш браузера<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - кэш системы<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - кэш роутера<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - если везде нет - идем к IP-адресу DNS-серевра<br>&nbsp;&nbsp;&nbsp; - тройное рукопожатие и устанавливается tсp-соединение<br>&nbsp;&nbsp;&nbsp; - и отдается по запросу html<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - как браузер понимает что html пришла?<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - понимает на основе заголовка Content-Type: text/html;<br>&nbsp;&nbsp;&nbsp; - прочитывается и начинаем процессы обработки<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - DOM<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - CSSOM<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Render Tree на основе двух предыдущих деревьев <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Layout (вычисление позиции и размеров и СЛОИ)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Painting (отрисовка)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Compositing (css анимации, трансформации)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Rendering&nbsp; (итоговое отображение)<br>&nbsp;&nbsp;&nbsp; - Также есть блокирующие/неблокирующие скрипты при парсинге ДОМА<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **Без атрибутов**: Блокируют построение DOM, пока не загружены и выполнены, что может замедлить отображение страницы.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **`async`**: Загружаются параллельно с DOM и выполняются сразу после загрузки, что может временно прервать построение DOM.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **`defer`**: Загружаются асинхронно, но выполняются только после полного построения DOM, обеспечивая более плавную загрузку страницы без прерываний.	{}	337	2025-06-29 08:53:58.422	2025-06-29 08:53:58.422
cmchfo1am00a713mp9i22a6jy	ri2>Bh5m4Y	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	функция высшего порядка что такое&nbsp; и разбор компонента высшего порядка	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-30d2be9a9d689ff7d8b24331fa24ef49b414d5bd.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bb3168f12df0ac10c8d0723d16c07b870a115f9b.jpg">	{}	367	2025-06-29 08:53:58.799	2025-06-29 08:53:58.799
cmchfo10i009e13mpjk5llxr0	b]eGItG3qI	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	что такое DOM	- дерево тэгов, нодов <br>&nbsp;&nbsp;&nbsp; - основные узлы - html-тэги, текстовые тэги и атрибутные узлы (класс, айди)<br>&nbsp;&nbsp;&nbsp; - DOM позволяет скриптам динамически изменять содержимое, структуру и стиль страницы, реагируя на действия пользователя без обновления страницы<br>&nbsp;&nbsp;&nbsp; - DOM предоставляет API, который может использоваться в JavaScript для изменения html-документа, например, добавления, удаления или изменения узлов, обработки событий или извлечения данных из документа	{}	338	2025-06-29 08:53:58.435	2025-06-29 08:53:58.435
cmchfo10v009f13mp5ml4jo5z	qcQ:dN;jFp	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	css-in-js - плюсы и минусы	- css-in-js<br>&nbsp;&nbsp;&nbsp; - плюсы <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - эксплуатация библиотек по типу styled-components <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - стили привязаны к компонентам и имеют локальную область видимости <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - использование js для стилизации<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - прокидывание стилей пропом удобное <br>&nbsp;&nbsp;&nbsp; - минусы<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - нельзя разбить на чанки тк стили применяются в рантайме вместе с js'ом <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - так как стили применяются в рантайме, может сказаться на производительности	{}	339	2025-06-29 08:53:58.448	2025-06-29 08:53:58.448
cmchfo117009g13mplu9gyyaj	rU0N.[(A?n	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	что такое CORS и какую проблему он решает	cross-origin-resourse-sharing<br>&nbsp;&nbsp;&nbsp; - same-origin-policy по умолчанию запрещает читать ответы от источников которые отличаются от источника с которого произошел запрос, то есть с сервака на фронт <br>&nbsp;&nbsp;&nbsp; - если по корсу в консоли ошибка, то нужно пойти к бэкендеру и сказать ""добавь в access-control-allow-origin URL фронта""	{}	340	2025-06-29 08:53:58.46	2025-06-29 08:53:58.46
cmchfo11m009h13mp0gzpgdp2	DF)z-$e``z	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Какие есть HTTP методы	- Какие есть HTTP методы <br>&nbsp;&nbsp;&nbsp; - **GET**: Используется для запроса данных от сервера. GET запросы должны быть идемпотентными, что означает, что повторение запроса не должно изменять состояние сервера. GET запросы могут быть кэшированы и оставаться в истории браузера.<br>&nbsp;&nbsp;&nbsp; - **POST**: Используется для отправки данных на сервер для создания нового ресурса. POST запросы не идемпотентны, что означает, что многократное повторение запроса может привести к созданию нескольких экземпляров ресурса.<br>&nbsp;&nbsp;&nbsp; - **PUT**: Применяется для обновления существующего ресурса или создания нового ресурса по указанному URI, если он не существует. PUT запросы должны быть идемпотентными.<br>&nbsp;&nbsp;&nbsp; -&nbsp; **PATCH**: Применяется для частичного изменения ресурса. В отличие от PUT, PATCH применяется для обновления только части данных ресурса, что делает его менее строгим по отношению к идемпотентности по сравнению с PUT.<br>&nbsp;&nbsp;&nbsp; - **DELETE**: Используется для удаления указанного ресурса. DELETE запросы также должны быть идемпотентными.<br>&nbsp;&nbsp;&nbsp; - **HEAD**: Аналогичен методу GET, но сервер в ответе отправляет только заголовки и статус ответа без тела сообщения. Этот метод полезен для извлечения метаданных и проверки доступности ресурсов без загрузки содержимого.<br>&nbsp;&nbsp;&nbsp; - OPTIONS<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - предварительный (префлайт) запрос для подтверждения что сервак может работать с сложными запросами <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - сложный запрос - если в header ложим authorization токен <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - если ответ положительный то дальше кидаем основной запрос<br>&nbsp;&nbsp;&nbsp; - **CONNECT**: Используется веб-прокси для установки двунаправленной связи с ресурсом. <br>&nbsp;&nbsp;&nbsp; - **TRACE**: Отправляет запрос на сервер с целью получить обратно информацию о запросе.	{}	341	2025-06-29 08:53:58.474	2025-06-29 08:53:58.474
cmchfo11z009i13mpyhphwsg5	xR1$9TbiUj	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Чем отличается GET от POST	- Чем отличается GET от POST <br>&nbsp;&nbsp;&nbsp; 1. **Назначение**:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **GET** используется для запроса данных с сервера. Обычно не изменяет состояние данных на сервере.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **POST** применяется для отправки данных на сервер с целью создания новой записи или обновления существующей.<br>&nbsp;&nbsp;&nbsp; 2. **Безопасность**:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **GET** может быть менее безопасным, так как данные, отправляемые этим методом, видны в URL и могут быть сохранены в истории браузера.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **POST** считается более безопасным для отправки данных, так как данные передаются в теле запроса и не видны в URL.<br>&nbsp;&nbsp;&nbsp; 3. **Идемпотентность**:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **GET** является идемпотентным, что означает, что многократное выполнение одного и того же запроса GET приведёт к одному и тому же результату без изменения данных.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **POST** не идемпотентен, многократное выполнение может привести к разным изменениям данных на сервере (например, создание нескольких записей).<br>&nbsp;&nbsp;&nbsp; 4. **Кэширование**:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **GET** поддерживает кэширование, что ускоряет загрузку данных при повторных запросах.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **POST** обычно не кэшируется, так как может изменять данные на сервере.<br>&nbsp;&nbsp;&nbsp; 5. **Длина данных**:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **GET** ограничен длиной URL, что ограничивает количество данных, которые можно отправить.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **POST** не имеет такого ограничения, позволяя отправлять большие объёмы данных.	{}	342	2025-06-29 08:53:58.487	2025-06-29 08:53:58.487
cmchfo12c009j13mp3c0k0k0q	wl^,aE]|[U	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Отличие PUT от PATCH	- Отличие PUT от PATCH<br>&nbsp;&nbsp;&nbsp; - PUT - полностью заменяет сущность <br>&nbsp;&nbsp;&nbsp; - PATCH - заменяет конкретные значения	{}	343	2025-06-29 08:53:58.501	2025-06-29 08:53:58.501
cmchfo12o009k13mpamaat357	"b))=B?aO^#"	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	SSR - что это, минусы, плюсы	- SSR - сервер сайд рендеринг (рендеринг на стороне сервера)<br>&nbsp;&nbsp;&nbsp; - разгружаем клиента - на сервере рендерим html и после этого на клиенте докачивается css, js и происходит процесс ГИДРАТАЦИИ - js накладывается на html и страница делается интерактивной&nbsp; <br>&nbsp;&nbsp;&nbsp; - нужно рзабираться с next.js <br>&nbsp;&nbsp;&nbsp; - должна быть мощность у сервера если много юзеров приложения <br>&nbsp;&nbsp;&nbsp; - CEO и оптимизация - страница индексируется не то что у SPA	{}	344	2025-06-29 08:53:58.512	2025-06-29 08:53:58.512
cmchfo130009l13mps4w3ueim	MyC$BT],`V	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	- Разница HTTP и HTTPS и зачем нужен HTTPS	&nbsp; &nbsp; - Надстройка над htttp протоколом для защиты&nbsp;<br>&nbsp;&nbsp;&nbsp; - при настройке NGINX можно настроить публичный и приватный ключ<br>&nbsp;&nbsp;&nbsp; - приватный как раз лежит на сервере и благодаря сертификату TLS и этому ключу мы видим что соединение защищено<br>&nbsp;&nbsp;&nbsp; - какую проблему решил<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - man in the middle	{}	345	2025-06-29 08:53:58.525	2025-06-29 08:53:58.525
cmchfo13r009n13mpjpxn0kt2	iw$/4daBS1	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Расскажи про SOLID на примере Реакта	&nbsp; &nbsp; - Сингл Responsibility <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Каждый компонент React должен отвечать за выполнение только одной задачи. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Например, компонент для отображения списка пользователей не должен также управлять загрузкой данных или их обработкой.<br>&nbsp;&nbsp;&nbsp; - Разделение ответственности (интерфейса)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Есть ТудуЛист есть ТудуАйтем - но можно сделать по плохому и вывалить все в App - это против этого принципа<br>&nbsp;&nbsp;&nbsp; -&nbsp; Принцип открытости/закрытости <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - компонент открыт для расширения, но закрыт для редактирования/модификации<br>&nbsp;&nbsp;&nbsp; - Инверсия зависимостей<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Компоненты высокого уровня не должны зависеть от компонентов низкого уровня, а оба типа должны зависеть от абстракций. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - например есть BookList, Rating - создаем еще один компонент BookRating, который переиспользует Rating и создаст безопасзную прослойку	{}	347	2025-06-29 08:53:58.551	2025-06-29 08:53:58.551
cmchfo143009o13mp5wlyfafk	g]&<jB!1xi	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Что такое ООП, приведи примеры&nbsp;	&nbsp; &nbsp; - полиморфизм<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - один и тот же метод может работать по разному в зависимости от объекта<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - пример - метод toString <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - в массивах числа преобразует в строку через запятную <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - в числах просто в строку <br>&nbsp;&nbsp;&nbsp; - инкапсуляция<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - приватные поля - инкапсулируем логику и извне нигде не достать, либо как пример public api модулей <br>&nbsp;&nbsp;&nbsp; - абстракция<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - есть класс Транспортное средство - абстрактный класс<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - от него расширяем подклассы машина мотоцикл велосипед<br>&nbsp;&nbsp;&nbsp; - наследование<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - и как раз от транспортного средства мы наследовали какие то методы - это и есть наследование	{}	348	2025-06-29 08:53:58.563	2025-06-29 08:53:58.563
cmchfo14g009p13mp2akz0j8t	lA<;[|D2-F	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Алгоритм регистрации/логина	&nbsp; &nbsp; - **Отправка данных**:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Пользователь заполняет форму с логином и паролем, затем нажимает кнопку ""Submit"".<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Форма отправляет данные на сервер через HTTP-запрос.<br>&nbsp;&nbsp;&nbsp; - **Валидация данных**:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Сервер получает данные и проводит их валидацию, проверяя корректность логина и пароля.<br>&nbsp;&nbsp;&nbsp; - **Установка токенов и cookies**:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Если данные верны, сервер генерирует access и refresh токены:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **Access токен** имеет короткий срок действия и используется для доступа к защищенным ресурсам.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **Refresh токен** имеет более долгий срок действия и хранится на сервере для возможности обновления access токена после его истечения.<br>&nbsp;&nbsp;&nbsp; - Сервер отправляет эти токены в браузер в виде HTTP-Only и Secure cookies:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **HTTP-Only** означает, что cookie не доступен через клиентские скрипты (для защиты от XSS).<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - **Secure** указывает, что cookie должен отправляться только через HTTPS, обеспечивая защиту передаваемых данных.	{}	349	2025-06-29 08:53:58.576	2025-06-29 08:53:58.576
cmchfo14s009q13mpn84cvlmu	"tz2BS[]#/x"	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Что такое NGINX	- мощный веб-сервер, на котором можно разместить статику приложению собранную вебпаком <br>&nbsp;&nbsp;&nbsp; - то есть когда стучимя по определнному url, отдается нужный html-файл, а в нем есть scripts где скрипты всего приложения	{}	350	2025-06-29 08:53:58.588	2025-06-29 08:53:58.588
cmchfo154009r13mpbrw6ew2a	Dx=RPmy)2~	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Docker что такое	Docker — это платформа для разработки, доставки и запуска приложений в изолированных контейнерах<br>Docker помогает разработчикам гарантировать, что их приложение будет работать одинаково везде, независимо от того, где оно запускается — будь то локальный компьютер, тестовый сервер или облако. Это устраняет проблему ""у меня работает, а у тебя нет"",<br><br>	{}	351	2025-06-29 08:53:58.601	2025-06-29 08:53:58.601
cmchfo15h009s13mp9pg17rjp	GL;wB]oT]$	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	псевдоклассы vs псевдоэлементы&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a66f9a87bfbd3e4051bc682008ffda2e46bbaf53.jpg">	{}	352	2025-06-29 08:53:58.614	2025-06-29 08:53:58.614
cmchfo15u009t13mprkpz9ut5	OPJ7&p%qr&	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	что такое вес селекторов и перечисли эти веса	определяет, какие стили применяются к элементу, когда существует несколько конфликтующих правил<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1ff5d42417943fe7b1b6fb8d181dde1f65497fa7.jpg">	{}	353	2025-06-29 08:53:58.626	2025-06-29 08:53:58.626
cmchfo1az00a813mp39j5wgov	m9)!58M:dq	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	перечисли все способы которыми можно перебрать объект	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-abe16c448a75a19da3fe51096ac47216e6af5409.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-57f5130652f2aedac7d2465309f420cdca3df53e.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-cc4a2b26ddc91cf055c213c5397bc1e7e13beeca.jpg">	{}	368	2025-06-29 08:53:58.812	2025-06-29 08:53:58.812
cmchfo167009u13mprgr5lztc	iP*$Sp+(<)	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	что знаешь о производительности css-анимаций	- **Использование `transform`**: Анимирование свойств, таких как `transform: translate()`, улучшает производительность, поскольку такие операции часто обрабатываются GPU и не вызывают перерисовку других элементов страницы.<br>&nbsp;&nbsp;&nbsp; - **Избегание перекомпоновки**: Следует избегать анимирования свойств, влияющих на размеры и позиционирование элементов (`margin`, `position`, `width`, `height`), так как они требуют перерасчёта макета страницы, что ресурсоёмко	{}	354	2025-06-29 08:53:58.64	2025-06-29 08:53:58.64
cmchfo16k009v13mp5n0gdduj	yU2FT.^VGl	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	Разниц grid и flex и когда что используешь&nbsp;	- Разница Grid и Flex<br>&nbsp;&nbsp;&nbsp; - flex одномерный (либо по горизонтали либо по вертикали)<br>&nbsp;&nbsp;&nbsp; - grid двумерный есть сетка&nbsp; (по горизонтали и вертикали одновременно)<br>&nbsp;&nbsp;&nbsp; - сам макет через grid - footer, main, header, а отдельные меньшие компонетны через flex (flex-direction, justify-content, align-items и тд)	{}	355	2025-06-29 08:53:58.653	2025-06-29 08:53:58.653
cmchfo16v009w13mpqi5ieghx	K&+@Mfh8L/	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	как оцентровать div разными способами?	<ul><li>flexbox (justify-content align items)</li><li>grid (place-items)</li><li>margin и position&nbsp;&nbsp;<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-eea60bd237306298aa29291c19e35a6d8aa5bcbe.jpg"></li><li>абсолюнтео центрирование</li><li><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-11e8a47bb5cb133a54518a9eff147d1f30a29ca9.jpg"><br></li><li>текс алайн - центр, если внутри блока текст</li></ul><div><br></div>	{}	356	2025-06-29 08:53:58.664	2025-06-29 08:53:58.664
cmchfo178009x13mpjg23itpb	x/+=u@%WAb	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	какие типы данных знаешь	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6948070513c9bb8f7ff9ef5fe5d698add74052f7.jpg">	{}	357	2025-06-29 08:53:58.676	2025-06-29 08:53:58.676
cmchfo17k009y13mp7by1873r	nT^C]4h${/	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	this как работает в js&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4dcbc0eb15dcb4cc0e3fd0b6cd90847fc733dd7f.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a60085d398a021e951f985bdeeb2e1fdcbc3724f.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-051ac949aa630130137bf7f51c89dbffce790ba8.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-19c3b111110f70e622f292b9623cb628a0229420.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d942527ea7950d7eb0925bd8b65475d881acaaed.jpg">	{}	358	2025-06-29 08:53:58.688	2025-06-29 08:53:58.688
cmchfo17x009z13mpy3kv2dlf	s=qfipniA(	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	что такое классы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e6e5a1275896715c82c51955ed7d7e171838bcb5.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d4de33153cf3e2f4df165974fdf54c683b320073.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c56cb2bb6ebee76793afec1d6d1fd35f34a40b19.jpg">	{}	359	2025-06-29 08:53:58.702	2025-06-29 08:53:58.702
cmchfo18900a013mpccwuhlrs	KWIa+a)x0A	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	в чем разница __proto__ и prototype	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-72ace41443e470e6fd32d553ed3bde0fb1c2ae07.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ca7a8a7e21be7585de5c9de3f5424c9b8edb8f69.jpg">	{}	360	2025-06-29 08:53:58.714	2025-06-29 08:53:58.714
cmchfo18m00a113mp72r6fs12	MRgV5KKJc}	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	function expression vs function declaration vs стрелочная функция	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-feddf30b621ced5b8b1977e34e90ba5eb5fc4a4a.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d78b5cab8759857d26837db97732ac184f52a3fd.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f0b66be07677e44b5635bb4d5953b3fe07d569b1.jpg">	{}	361	2025-06-29 08:53:58.726	2025-06-29 08:53:58.726
cmchfo18x00a213mpdb644aja	z|Mkz(l)P[	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	почему у стрелочной нельзя применить call apply bind&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8f61c03ba2cf0d6f35d04036648dbd2a978c6f84.jpg">	{}	362	2025-06-29 08:53:58.737	2025-06-29 08:53:58.737
cmchfo19a00a313mp6i5rvlth	MI;X=S04J7	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	var vs let vs const	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9fd17dc327d30b19d6be2a8aa4b74b36bd09cfd9.jpg">	{}	363	2025-06-29 08:53:58.75	2025-06-29 08:53:58.75
cmchfo19k00a413mp2w7g6l0o	KJbz>+-:8>	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	div в dive, когда кликнул на вложенный что будет (маржинов паддингов нет)	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-eb4221f2863b1b9771a4020042259a8e014f7552.jpg">	{}	364	2025-06-29 08:53:58.76	2025-06-29 08:53:58.76
cmchfo19x00a513mphpcxao78	"n!by?y;;=#"	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	null vs undefined vs undeclared	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-728ebf5e5e4893ec17145f46adc95c2f88bea347.jpg">	{}	365	2025-06-29 08:53:58.774	2025-06-29 08:53:58.774
cmchfo1a900a613mpjl5ahcta	Gpb|`e^3xF	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	как можно спровоцировать эффект полного зависания страницы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-aa81cb33f7c5a8f675e9347f7184a45cb40692ed.jpg">	{}	366	2025-06-29 08:53:58.785	2025-06-29 08:53:58.785
cmchfo1b900a913mplc9n94po	E)KZJ3j0{T	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	спрэд vs рэст операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c46971808fff6875e75f79cd7fd21d0aa0e64424.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1f943d018619703e2349b4f2305be511ce993794.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-37904b426aea28f1380fadcd32c3e4aa0afc504c.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ad17f760f75674364ade47e3cd56eb6ad1cdab87.jpg">	{}	369	2025-06-29 08:53:58.822	2025-06-29 08:53:58.822
cmchfo1bm00aa13mpwfrkrubk	PZ_Y`nUInW	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	почему результатом сравнения двух объектов похожих будет false и как это исправить&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bfe222d3c621ceb15948a14aa85c853e0fb60299.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9a31ee82441be55a2d910f9f8da3b5b3d6ed23be.jpg">	{}	370	2025-06-29 08:53:58.834	2025-06-29 08:53:58.834
cmchfo1bz00ab13mpstvuhddc	dtqj%&/>Jy	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	map vs set vs weakmap vs weakset	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b8f5dc9cc082a33984dde619d801672e964c126c.jpg">	{}	371	2025-06-29 08:53:58.848	2025-06-29 08:53:58.848
cmchfo1cc00ac13mp9ud743kp	CO2KaWmszT	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	поднятие (хоистинг) расскажи	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6f00527eb41b0eb27f0a9193b240e85247383298.jpg"><strong><br>Hoisting (поднятие)</strong> — это механизм в JavaScript, при котором объявления переменных и функций перемещаются в верх своей области видимости во время фазы компиляции. Это означает, что можно использовать переменные и функции до их фактического объявления в коде.<br>	{}	372	2025-06-29 08:53:58.861	2025-06-29 08:53:58.861
cmchfo1cp00ad13mp8gdblffc	I&y}N(A4El	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	что попадает в микротаски, а что в макротаски&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-608edea6ee0acd2e084b3eff8734e4938e156f5a.jpg">	{}	373	2025-06-29 08:53:58.874	2025-06-29 08:53:58.874
cmchfo1d200ae13mp2ugz24zn	"pSlXN%gn:#"	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	строгое vs нестрогое сравнение&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0646a6fd1b114a17556c794e06095b04d2537b13.jpg">	{}	374	2025-06-29 08:53:58.887	2025-06-29 08:53:58.887
cmchfo1df00af13mpol4ckb86	NCnT%N,p7E	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	функции-генераторы	- функции-генераторы <br>&nbsp;&nbsp;&nbsp; - обычный синтаксис функции + звездочка <br>&nbsp;&nbsp;&nbsp; - посадили yield (урожай) и при вызове этой функции возвращается итератор<br>&nbsp;&nbsp;&nbsp; - благодаря методу next можно итерироваться по генератору и будет возвращаться value и true/false закончился ли урожай<br>&nbsp;&nbsp;&nbsp; - применяются в редакс сагах, удобны для тестирования <br>&nbsp;&nbsp;&nbsp; - промисы на генераторах работают	{}	375	2025-06-29 08:53:58.9	2025-06-29 08:53:58.9
cmchfo1ds00ag13mp40gfkkxx	u}8Ia.q$q0	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	**Что такое замыкание**	Комбинация функции и лексического окружения, в котором эта функция была создана.<br>&nbsp;&nbsp;&nbsp; - Это значит, что если внутри одной функции мы объявляем другую, то внутренняя запоминает значение внешних переменных и имеет к ним доступ.<br>&nbsp;&nbsp;&nbsp; - Каждая функция является замыканием, и это запоминание происходит за счет скрытого свойства environment.<br>&nbsp;&nbsp;&nbsp; - То есть, создав какую-то функцию и внутри неё написав `return` ещё какой-то функции, если дочерняя будет ссылаться на переменную внутри родительской, то дочерняя замыкает переменную внутри родительской функции.<br>&nbsp;&nbsp;&nbsp; - Когда мы вызываем дочернюю функцию, она сначала ищет переменную в своей области видимости, если не находит, поднимается вверх по цепочке и ищет в родительской функции. Если не находит там, идет в глобальную область видимости.<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240610132212.png">	{}	376	2025-06-29 08:53:58.913	2025-06-29 08:53:58.913
cmchfo1e300ah13mpc3c661h8	G.,V&PnLzF	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	- расскажи про kiss, dry, yagni	&nbsp; &nbsp; - Принцип KISS говорит, что решения должны быть максимально простыми. Избегайте усложнения кода и архитектуры.<br>&nbsp;&nbsp;&nbsp; - Принцип DRY призывает избегать дублирования кода. Если один и тот же код повторяется, его следует вынести в отдельную функцию или модуль.<br>&nbsp;&nbsp;&nbsp; - Принцип YAGNI утверждает, что не следует добавлять функционал до тех пор, пока он действительно не потребуется. Это помогает избежать лишней работы и уменьшить сложность кода.	{}	377	2025-06-29 08:53:58.924	2025-06-29 08:53:58.924
cmchfo1j200av13mp8j2dngax	"zw?7@IDLv#"	Простая	СБОРНИК::REACT Теория	REACT Теория	\N	отличие pure-компонента от обычного в классовых компонентах	**PureComponent** в React — это специализированный класс компонента, который автоматически обрабатывает должным образом метод `shouldComponentUpdate`. <br>&nbsp;&nbsp;&nbsp; - В отличие от обычного **Component**, который не предоставляет собственную реализацию `shouldComponentUpdate`, `PureComponent` реализует его с поверхностным сравнением пропсов и состояния	{}	391	2025-06-29 08:53:59.103	2025-06-29 08:53:59.103
cmchfo1eg00ai13mp5prixlzd	gvVdrx,|d}	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	что такое каррирование	&nbsp; &nbsp; - Техника преобразования функции, которая принимает несколько аргументов, в последовательность функций, каждая из которых принимает один аргумент.<br>&nbsp;&nbsp;&nbsp; - Это значит, что функция разбивается на цепочку вложенных функций, каждая из которых принимает один аргумент и возвращает следующую функцию.<br>&nbsp;&nbsp;&nbsp; - Только последняя функция в этой цепочке вернет результат, используя все собранные аргументы.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - compose()() из редакса&nbsp;<br><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3de854937c88bb60f26a000c5f73cc4f386b374e.jpg">	{}	378	2025-06-29 08:53:58.937	2025-06-29 08:53:58.937
cmchfo1es00aj13mpocnueqhz	QV(EO+E!8D	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	что такое рекурсия и из чего состоит	Рекурсия — это функция, которая вызывает саму себя<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-09dde45f381fdc39750c4ba82ee574026dbf6ed6.jpg">	{}	379	2025-06-29 08:53:58.949	2025-06-29 08:53:58.949
cmchfo1f500ak13mptgl10ynv	n(;6[Mj[to	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	что такое чистая функция и приведи пример	- Функция, которая не изменяет входные данные и не зависит от внешних данных (например, базы данных,&nbsp;`DOM`&nbsp;или глобальных переменных) и возвращает одинаковый результат для одних и тех же аргументов, называется чистой (pure).<br>&nbsp;&nbsp;&nbsp; - Таким образом, функция является чистой, если она удовлетворяет следующим требованиям:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Возвращает одинаковый результат для одних и тех же аргументов.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Оценивается без побочных эффектов, т.е. не изменяет входные данные.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Не изменяет локальные или глобальные переменные.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Не зависит от внешних данных.<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c59b4da42ad65dc7c409cef47c53ea1330717846.jpg">	{}	380	2025-06-29 08:53:58.961	2025-06-29 08:53:58.961
cmchfo1fh00al13mpg3eb3hm1	e48ayr~rS9	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	анимация js vs анимация css	в js если нужно точечное, сложное + используем библиотеки <br>- css если нужно что-то простое	{}	381	2025-06-29 08:53:58.973	2025-06-29 08:53:58.973
cmchfo1fu00am13mpnezf6r3f	dY1_JyTNt2	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	расскажи про сборку мусора	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ee288ae77378c03d1e5dae960e6b917573bea69f.jpg">	{}	382	2025-06-29 08:53:58.987	2025-06-29 08:53:58.987
cmchfo1g700an13mplsdmmu2n	Nbct{&l&>z	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	cookie vs localstorage vs sessionstorage vs indexDB	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2c785968ddd520ea5dcaed786cc9e1706faaf2f7.jpg">	{}	383	2025-06-29 08:53:58.999	2025-06-29 08:53:58.999
cmchfo1gj00ao13mpkv7x4ma9	DsvG@mUr{B	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	расскажи про веб-воркеры и сервис воркеры	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-84cefa3f2e44c2763dff3c4bd1391999ab2a714b.jpg">	{}	384	2025-06-29 08:53:59.011	2025-06-29 08:53:59.011
cmchfo1gv00ap13mp8hkyylrg	nZh!Ev@xr/	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	что такое промисы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2d92bf86fa2d6470f99cdcc5d698567d4226b999.jpg">	{}	385	2025-06-29 08:53:59.023	2025-06-29 08:53:59.023
cmchfo1h700aq13mpywvepies	M^!jIQN)4	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	async/await расскажи	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5650d80930967e50a10f30ba2c8766b95158e4a5.jpg">	{}	386	2025-06-29 08:53:59.036	2025-06-29 08:53:59.036
cmchfo1hk00ar13mp6xwf63ub	m_&_+GUt/h	Простая	СБОРНИК::JS ТЕОРИЯ	JS ТЕОРИЯ	\N	расскажи про вебсокеты	&nbsp; &nbsp; -&nbsp; протокол связи работающий поверх tcp<br>&nbsp;&nbsp;&nbsp; - чаты телеграмм или вк - постоянное соединение, как ты можешь отправлять сообщения, так и сервер обратно, по постоянному двухстороннему соединению, которое устанавливается один раз	{}	387	2025-06-29 08:53:59.049	2025-06-29 08:53:59.049
cmchfo1hx00as13mpjb32705d	s3eL2*<dq=	Простая	СБОРНИК::REACT Теория	REACT Теория	\N	расскажи про реакт плюсы и минусы подробно	- расскажи про реакт плюсы и минусы подробно<br>&nbsp;&nbsp;&nbsp; - библиотека для создания пользовательских интерфейсов или SPA-приложений<br>&nbsp;&nbsp;&nbsp; - приложения строим из КИРПИЧИКОВ-компонентов (функциональные, классовые)&nbsp; и если соблюдать бест-практисес и правильную архитектуру, приложения реально состоит из кирпичиков-модулей, которые легко удалить, легко рефакторить, таким образхом разработка/поддержка быстрее<br>&nbsp;&nbsp;&nbsp; - сравним реакт с джаваскриптом <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - в js императивный подход - это озночает что ты как разработчик заботишься о том, как доставить DOM-ноды и сопутствующий функционал до пользователя на странице <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - например есть список Todo-лист <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - нужно при добавлении таски выбрать функцию createTask, там же будет documentCreateElement с лишкой, в лишку запендить текст и затем запендить уже в сам лист <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - это ИМПЕРАТИВНЫЙ подход<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - а в реакте декларативный подход, делаем setState и компонент начинает перерендер и дальше реакт сам заботиться о том как максимально эффективно и быстро доставить изменения в дерево <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - у реакта есть V-DOM (на самом деле его нет, просто определние)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - V-DOM - копия реальнго дерева представленного в виде js-объектов<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - setState отрабатывает, строится еще один новый V-DOM и сравнивается с предыдущим - это назыавается reconciliation (согласования)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - то есть если ты внес в рамках setState пять разных изменений, то&nbsp; реакт провел реконсиляцию и будет ререндерить только то что изменилось, а не все дерево<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - все дерево ререндерить очень дорого, layour (reflow) - дорогостоящая операция : нужно считать позиции, размер, слои и тд<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Так почему V-DOM обновляет приложения эффективно и fps высокий? <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - процесс ререндеринга происходит эффективно по двум причинам<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - линейный эвристический алгоритм O(n), работающиый эффективно за правил<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - два элемента с разными типами априори произведут разные деревья <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - key - обязательно указываем при маппинге списков, для того чтобы реакт различал элементы <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - ключи должны быть уникальные чаще всего, но можно указывать не уникальные (по индексу), когда уверен что ПОРЯДОК элементов не изменится <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - также key это возможность сохранить instance элемента <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - например при нажатии на кнопку которая меняет местами два элемента<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - если ключ не указан, то реакт будет каждый раз демонтировать/монтировать заново элемент, тк нужно пересоздать инстанс<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - если же ключ указать, реакт поймет отследит инстанс и поймет что нужно всего лишь поменять местами элементы, а не прводить анмаунтинг/маунтинг<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - минусы - <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - реакт не реактивный, то есть изменения происходят не сразу, а с некоторой задержкой, тк нужно строить V-DO, вносить изменения <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - классовые компоненты, но они были решены функциональными<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - нужно было следить за контекстом - эксплуатировать this, bind <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - в рамках одного классового можно создать только один стейт<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - в итогекод выглядет сложнее, дебажить было сложнее	{}	388	2025-06-29 08:53:59.062	2025-06-29 08:53:59.062
cmchfo1ib00at13mpexqqtfvj	lEr*tQy^5|	Простая	СБОРНИК::REACT Теория	REACT Теория	\N	расскажи про проп дриллинг	- расскажи про проп дриллинг <br>&nbsp;&nbsp;&nbsp; - это случай, когда нужно прокинуть проп на 10 уровней вниз и при рефакторинге нужно будет 10 раз пройтись, а если таких компонентов несколько? <br>&nbsp;&nbsp;&nbsp; - решается стейт-менеджером или контекстом	{}	389	2025-06-29 08:53:59.075	2025-06-29 08:53:59.075
cmchfo1in00au13mpoogw43sy	x{njo`K1HA	Простая	СБОРНИК::REACT Теория	REACT Теория	\N	контекс vs redux	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-45489d938c1dc04ae87d282fe91d2341dd6e5544.jpg">	{}	390	2025-06-29 08:53:59.088	2025-06-29 08:53:59.088
cmchfo1jf00aw13mpan2ifvyy	HAd`]BHh*Y	Простая	СБОРНИК::REACT Теория	REACT Теория	\N	что можно реализовать с помощью классовых чего нельзя в функциональных	в классовых из коробки есть componentDidCatch - метод жизненного цикла с помощью которого можно проще реализовать перехват ошибок	{}	392	2025-06-29 08:53:59.116	2025-06-29 08:53:59.116
cmchfo1jt00ax13mpl6um0g2d	z)dcI--||&	Простая	СБОРНИК::TS Теория	TS Теория	\N	Что такое тайпскрипт зачем нужен вообще	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-803b79e07f863def913d8f6b0f2411646fbe5944.jpg">	{}	393	2025-06-29 08:53:59.129	2025-06-29 08:53:59.129
cmchfo1k600ay13mpujlnpu52	ea!&ZDbu,p	Простая	СБОРНИК::TS Теория	TS Теория	\N	Чем отличается unknown от any?&nbsp;Когда использование any оправдано?	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d30b57be77b77b0c53ba32ff45fd5af6925b141b.jpg">	{}	394	2025-06-29 08:53:59.143	2025-06-29 08:53:59.143
cmchfo1kj00az13mpjudfcm5t	j15WH0!UsW	Простая	СБОРНИК::TS Практика	TS Практика	\N	<div><div>const str: unknown = ''</div><div>const value = str.length;<span style=""color: rgb(171, 178, 191);""> </span></div><br><br></div>как исправить (три способа)<br><ol><li>как проверять тип перед использованием?</li><li>сделать это с помощью if&nbsp;</li><li>как сделать с помощью приведение?&nbsp;</li></ol>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-dc69d882a9c0cb5db61ec4a8f1a03b02d2885d6b.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5bd47e725a69a0c5c0403b2cd9fb1bd3583cd7ae.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-53bb64cd0d1df7af17fdd0b9f2e848614a4a75df.jpg"><br>	{}	395	2025-06-29 08:53:59.155	2025-06-29 08:53:59.155
cmchfo1kt00b013mpc1104hk3	N@DJWc=Z/i	Простая	СБОРНИК::TS Практика	TS Практика	\N	<div><div>interface SomeObj {</div><div> key: string;</div><div>}</div><br><div>interface SomeObj1 {</div><div> value: string;</div><div>}</div><br><div>const obj: SomeObj = { key: '' };</div><div>const obj1: SomeObj1 = { value: '' };</div><br><div>type Value = SomeObj | SomeObj1;</div><br><div>const fn = (entity: Value): void =&gt; {</div><div>  (entity.key)</div><div>};</div><br><div>fn(obj);</div><br></div><br>как исправить (двумя способами)<br>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-751ea55f2a5b6013156ef9c594cc160cd9edab4f.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-cbd64ac787b6647c34ca03e84906aaf8b31141f2.jpg"><br>	{}	396	2025-06-29 08:53:59.165	2025-06-29 08:53:59.165
cmchfo1l400b113mpztt2m5yo	oiu(iQh&eW	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6706a01b58755614dde9d13ab8145a93db0691ac.jpg"><br>как достать все ключи из Name	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240610192543.png">	{}	397	2025-06-29 08:53:59.177	2025-06-29 08:53:59.177
cmchfo1lh00b213mpa4ppfv58	L+7:CvmMO{	Простая	СБОРНИК::TS Теория	TS Теория	\N	Когда использовать типы, а когда интерфейсы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4b83dc57ad173f203870c9116d9c7945bb3a633f.jpg">	{}	398	2025-06-29 08:53:59.189	2025-06-29 08:53:59.189
cmchfo1lt00b313mpqe6qcu8v	M-qfuaNlrd	Простая	СБОРНИК::TS Практика	TS Практика	\N	Как расширить Val Тестом и Тестом 1<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240610194009.png"><br>А если хотим добавить поле&nbsp;lastname: string?<br>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240610194207.png"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240610194342.png"><br>	{}	399	2025-06-29 08:53:59.202	2025-06-29 08:53:59.202
cmchfo1m600b413mpbxbbw4ek	dcsQD*dBm{	Простая	СБОРНИК::TS Практика	TS Практика	\N	Валидна ли такая запись?<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240610194408.png">	Да, ТС автоматически объединит верхний с нижним в итоге получтися Объединенный Интерфейс Name&nbsp; с key value name surname	{}	400	2025-06-29 08:53:59.215	2025-06-29 08:53:59.215
cmchfo1mj00b513mp2qql9c4r	h)`O(KB^Lq	Простая	СБОРНИК::TS Практика	TS Практика	\N	Необходимо из Animal исклчить key name value1 и взять из Animal1 key name и записать в type Value2 = в одну строку<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a1129d9f8f92834ab4478ec984e40e43c2a5d1cf.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-126e116adfd785cd4dd0102c8ae5be87b10ff805.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c30b038970bd77f4eb03c30626335350860fe9b5.jpg">	{}	401	2025-06-29 08:53:59.228	2025-06-29 08:53:59.228
cmchfo1mu00b613mpsxdx8eyv	JHdkLzFx_J	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a638374a5d0cad135e9f6d3abf6463ec16af0381.jpg"><br>два утилитных типа подходят для решения&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9c2c23124e878e576c76b1eeb1cedbb6c5194c98.jpg">	{}	402	2025-06-29 08:53:59.238	2025-06-29 08:53:59.238
cmchfo1n600b713mp77gaz503	P.2B]yJ,5?	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-33f4ba847590fb9c688465276e0338f762c5d47d.jpg"><br><ul><li>два способа с помощью утилитных типов&nbsp;</li><li>способ с созданием кастомного типа&nbsp;</li></ul><div><br></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-aa8fe43c70a1a163a2695f0163a21a124d636299.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a97cb44bc440586043801ae58c05acd8072f5ce8.jpg">	{}	403	2025-06-29 08:53:59.251	2025-06-29 08:53:59.251
cmchfo1nh00b813mp4uhgg606	PLj%}A{;,(	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5cf68ba3ecb934ed68390605340bdb111c1427b7.jpg">	- в данном случае у нас выбросится ошибка и функция никогда ничего не вернет поётому валидный тип будет never, а не void<br>- ЕСЛИ ЖЕ мы закомментируем выброс ошибки, то нужно булет исправить void на never&nbsp;	{}	404	2025-06-29 08:53:59.262	2025-06-29 08:53:59.262
cmchfo1nt00b913mpst2s2h8c	wDMrxd)*]{	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7c1f1a2781706108a5eed40f736f5cf325a182f2.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bbd5efbf24018fc0489d6e50cfd6f1be061b0ad7.jpg">	{}	405	2025-06-29 08:53:59.274	2025-06-29 08:53:59.274
cmchfo1o500ba13mpwc5tcqv2	IexQ/%wt<_	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-293437b623cccf879f00100fce6165e6c654b919.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fc748e9b56a804bf1be291b359d76b038dfd3d09.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f258d1ce0d4f5f64959da2ba3c31502bea995f08.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f4c5ab7e193511edf175d7b45819984500bdde51.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bf571d85d9d83673f0b8599ab16f67220241f0f5.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-51824725076221607902154929513287339d481d.jpg">	{}	406	2025-06-29 08:53:59.286	2025-06-29 08:53:59.286
cmchfo1oi00bb13mpu264vd6x	O0KNqoxB.%	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-42cfe045844682950b9b087278af0007cdbb19c5.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8f07952c7594a63039dcb1968e545d7c40c492c0.jpg">	{}	407	2025-06-29 08:53:59.299	2025-06-29 08:53:59.299
cmchfo1ou00bc13mpf52uvj8u	jUmn*X=y?y	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5e2e1f0d991123011ae3158b4765fb475a6f968d.jpg"><br>два способа	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ba48f6a194684e2b51f81b75a4b4b5b7bbfa1425.jpg">	{}	408	2025-06-29 08:53:59.311	2025-06-29 08:53:59.311
cmchfo1p700bd13mpb3kr1ly4	l~x*]*tYnT	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c61915d01d1aad691be81d81a23d19ba58a77cc6.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d21e86f6f9f94dd817443ec676ecd89027a47ee1.jpg">	{}	409	2025-06-29 08:53:59.324	2025-06-29 08:53:59.324
cmchfo1pi00be13mpv0swu50n	q~?-DgKv`7	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-593b738a551905bddbfe81c31e27d2b81351124b.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2f9ef25b6edf6193de6efb3658443cba676c8338.jpg">	{}	410	2025-06-29 08:53:59.335	2025-06-29 08:53:59.335
cmchfo1pt00bf13mprleusx4x	jomP(j]<N$	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2ffd4d416f7247fd198becc74edf08ae643dd214.jpg"><br>также напиши способ с async/await	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7cb1e01d7bb7f22d43c3f88a0bfb2640effe865d.jpg">	{}	411	2025-06-29 08:53:59.345	2025-06-29 08:53:59.345
cmchfo1q500bg13mpqhyru73h	G+U}HfYN-{	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-078314b80182c751d1cdf29ee9388074821cbbc2.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-487d016cbcc5189b39d14cc937cb6500a074587c.jpg">	{}	412	2025-06-29 08:53:59.358	2025-06-29 08:53:59.358
cmchfo1qg00bh13mpf05iaavj	QFb2UPR:K!	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b38e571bf0e77d6e603967d7687bba52611d09d5.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-66865528294adc49ef7cedb851db5d35127bc41a.jpg">	{}	413	2025-06-29 08:53:59.369	2025-06-29 08:53:59.369
cmchfo1qs00bi13mpmjrqc92c	@z6ih*m@8	Простая	СБОРНИК::JS ПРАКТИКА::замыкания	JS ПРАКТИКА	замыкания	const callback = (maxIncrementNumber) =&gt; {<br>&nbsp;&nbsp;&nbsp; let count = 0;<br>}<br><br>const cb = callback(4);<br><br>cb();<br>cb();<br>cb();<br>cb();<br>cb();<br>cb();<br>cb();<br>cb();<br>cb();<br>cb();<br><br>задача на замыкание. <br>в консоль нужно выводить значения каунта, когда maxIncrementNumber будет равняться каунту&nbsp;	<div><div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-42202e69278e2cd8f2a671e5e4ea07bbffdfff5e.jpg"><br></div></div><div>возвращаем стрелочную функцию, которая автоматически возьмет контекст из внешнего лексического окружения и найдет там переменную count и замкнет, запомнит ее. потом пропишем проверку : если инкремент === счетчику, вывести консольлог</div><div><br></div>	{}	414	2025-06-29 08:53:59.381	2025-06-29 08:53:59.381
cmchfo1r400bj13mprcyrrydm	"e$yOhD:&##"	Простая	СБОРНИК::JS ПРАКТИКА::Кастомные методы и функции	JS ПРАКТИКА	Кастомные методы и функции	<pre>cb<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">)(</span><span style=""color:#2aacb8;"">2</span><span style=""color:#ffba00;font-weight:bold;"">)(</span><span style=""color: rgb(42, 172, 184);"">3</span><span style=""color: rgb(255, 186, 0);""><b>) </b></span>- расскажи что это такое </pre><pre>Напиши эту функцию </pre><pre><ul><li>реализуй с помощью function declaration, function expression и коротким способом через стрелочную функцию</li></ul></pre>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5f7710b6a65565db5a05989abc24c017d8068aa4.jpg">	{}	415	2025-06-29 08:53:59.393	2025-06-29 08:53:59.393
cmchfo20800ca13mpusdyb5iv	er7N>Z/PT[	Простая	СБОРНИК::TS Теория	TS Теория	\N	Перечисли основные типы тайпскрипта, расширенные типы, утилиты для типов, способы управления типами и продвинутые паттерны&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-cff628cc829d691fd02713ed63e009c52206a4b3.jpg">	{}	442	2025-06-29 08:53:59.72	2025-06-29 08:53:59.72
cmchfo1rh00bk13mp9focaedd	beN0+ks]aM	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	&nbsp;<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-de1717478fe6ab0e50a89f58d7a758941d46acb1.jpg"><br><ul><li>есть решение с помощью массива</li><li>есть решение с помощью Set</li></ul>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-52036deca620c598be80e5ee2700e9713e305f5e.jpg"><br><ul><li>создаем пустой массив&nbsp;</li><li>циклом for прописываем чтоб проитерировался по массиву и пушом добавил элементы в новосозданный масив</li><li>НО если ИНКЛЮДС обнаружил повторяющиеся элемент то возвращаем true, иначе false<br></li></ul><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c33887437e965bd83d0ae7f3b41baeae55ec9969.jpg"><br><ul><li>создаем новый сэт</li><li>циклом for of&nbsp; проходимся по массиву и методом .has детектим повторяющийся элем</li></ul>	{}	416	2025-06-29 08:53:59.406	2025-06-29 08:53:59.406
cmchfo1rr00bl13mp14rfq0ai	NJd8ORbb),	Простая	СБОРНИК::JS ПРАКТИКА::Строки	JS ПРАКТИКА	Строки	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-88832a5b751c15b1d10cf7f866df4f770c779386.jpg"><br><li><strong>Приведение строк к нижнему регистру и сортировка букв в строках.</strong></li><li><strong>Сравнение полученных строк для определения, являются ли они анаграммами.</strong></li>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-35e209c63b46d8fecce8a4975242ecad057692f0.jpg">	{}	417	2025-06-29 08:53:59.415	2025-06-29 08:53:59.415
cmchfo1s100bm13mprj90giu8	w$FMD&Dbdc	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9cce692ec096aa3f63dca8a61e3a873f5c9b24ea.jpg">в каком порядке выведется	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ec9275d3e501285ddecf09b5943f75e08cc1b8e0.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f07e0850b62fad41f2b3e632be308284032cd3ab.jpg">	{}	418	2025-06-29 08:53:59.425	2025-06-29 08:53:59.425
cmchfo1sc00bn13mpy8798fcq	j0LzD==.*A	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-65ffacef1285a9bdfbe6de739cadf773cafca29f.jpg">что выведется в консоль	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5eaf793668fdcd9684cb227e918a637f54357fac.jpg">	{}	419	2025-06-29 08:53:59.437	2025-06-29 08:53:59.437
cmchfo1sn00bo13mp44kaaiuf	g<+12[S{Z~	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f262a070eba8d66279a8464eae428ca31bce458e.jpg">&nbsp;что выведется в консоль	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-115c770d57fdfbf1d066028b01595aeefbd89dab.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9ddb5e3d105083424a6130ca69eb65a5e416a82e.jpg">	{}	420	2025-06-29 08:53:59.448	2025-06-29 08:53:59.448
cmchfo1t000bp13mp4lejk19o	mjr=L4=_~d	Простая	СБОРНИК::JS ПРАКТИКА::Кастомные методы и функции	JS ПРАКТИКА	Кастомные методы и функции	<pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">fetch </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>str<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><pre><span style=""color: rgb(174, 109, 255); font-weight: bold;"">    </span><span style=""color: rgb(255, 128, 239); font-style: italic;"">console</span><span style=""color: rgb(188, 190, 196);"">.</span><span style=""color: rgb(147, 206, 255);"">log</span><span style=""color: rgb(255, 186, 0); font-weight: bold;"">(</span>str<span style=""color: rgb(255, 186, 0); font-weight: bold;"">)<br></span><span style=""color: rgb(174, 109, 255); font-weight: bold;"">}<br></span><span style=""color: rgb(174, 109, 255); font-weight: bold;""><br></span><span style=""color: rgb(255, 146, 42); font-weight: bold; font-style: italic;"">const </span><span style=""color: rgb(86, 168, 245);"">debounce </span><span style=""color: rgb(128, 161, 255); font-weight: bold;"">= </span><span style=""color: rgb(255, 186, 0); font-weight: bold;"">(</span>fn<span style=""color: rgb(188, 190, 196);"">, </span>delay<span style=""color: rgb(255, 186, 0); font-weight: bold;"">) </span><span style=""color: rgb(172, 108, 255); font-style: italic;"">=&gt; </span><span style=""color: rgb(174, 109, 255); font-weight: bold;"">{<br></span><span style=""color: rgb(174, 109, 255); font-weight: bold;""><br></span><span style=""color: rgb(174, 109, 255); font-weight: bold;"">}<br></span><span style=""color: rgb(174, 109, 255); font-weight: bold;""><br></span><span style=""color: rgb(255, 146, 42); font-weight: bold; font-style: italic;"">const </span><span style=""color: rgb(255, 128, 239); font-style: italic;"">cb </span><span style=""color: rgb(128, 161, 255); font-weight: bold;"">= </span><span style=""color: rgb(86, 168, 245);"">debounce</span><span style=""color: rgb(255, 186, 0); font-weight: bold;"">(</span><span style=""color: rgb(86, 168, 245);"">fetch</span><span style=""color: rgb(188, 190, 196);"">, </span><span style=""color: rgb(42, 172, 184);"">1000</span><span style=""color: rgb(255, 186, 0); font-weight: bold;"">)<br></span><span style=""color: rgb(255, 186, 0); font-weight: bold;""><br></span><span style=""color: rgb(255, 186, 0); font-weight: bold;""><br></span><span style=""color: rgb(255, 128, 239); font-style: italic;"">cb</span><span style=""color: rgb(255, 186, 0); font-weight: bold;"">()<br></span><span style=""color: rgb(255, 128, 239); font-style: italic;"">cb</span><span style=""color: rgb(255, 186, 0); font-weight: bold;"">()<br></span><span style=""color: rgb(255, 128, 239); font-style: italic;"">cb</span><span style=""color: rgb(255, 186, 0); font-weight: bold;"">()<br></span><span style=""color: rgb(255, 128, 239); font-style: italic;"">cb</span><span style=""color: rgb(255, 186, 0); font-weight: bold;"">()</span></pre><div><span style=""color: rgb(255, 186, 0); font-weight: bold;""><br></span></div></pre><pre><ul><li>Расскажи что такое дебаунс, также напиши функцию дебаунса</li></ul><br></pre>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-03e043c0f93bcdd631e12e0c6fcac783f146efb7.jpg">	{}	421	2025-06-29 08:53:59.461	2025-06-29 08:53:59.461
cmchfo1td00bq13mpvhh93ub0	kTZR)Rlr-g	Простая	СБОРНИК::JS ПРАКТИКА::Кастомные методы и функции	JS ПРАКТИКА	Кастомные методы и функции	<pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">fetch </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>str<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>str<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">throttle </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>fn<span style=""color:#bcbec4;"">, </span>delay<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">cb </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">throttle</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">fetch</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">500</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;""><br></span><span style=""color:#ffba00;font-weight:bold;""><br></span><span style=""color:#ff80ef;font-style:italic;"">cb</span><span style=""color:#ffba00;font-weight:bold;"">()<br></span><span style=""color:#ff80ef;font-style:italic;"">cb</span><span style=""color:#ffba00;font-weight:bold;"">()<br></span><span style=""color:#ff80ef;font-style:italic;"">cb</span><span style=""color:#ffba00;font-weight:bold;"">()<br></span><span style=""color:#ff80ef;font-style:italic;"">cb</span><span style=""color:#ffba00;font-weight:bold;"">()<br></span><div><br></div><div><ul><li>что такое троттлинг, реализуйте функцию троттлинга</li></ul></div><div><br></div></pre>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-903967cd72bf7d627bcb523bfae10d533fb6e6ca.jpg">	{}	422	2025-06-29 08:53:59.474	2025-06-29 08:53:59.474
cmchfo1tp00br13mpk4y1cyiz	T(D%iC82;	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d2f3fe32cd5c410b52653113ce35007aa16cde96.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fb3ea2bb648f74a733621e574c379bf0a60ca799.jpg">	{}	423	2025-06-29 08:53:59.486	2025-06-29 08:53:59.486
cmchfo1tz00bs13mprv7fsthh	"m|ix|g#W=<"	Простая	СБОРНИК::REACT Практика::Реакт мини-апп	REACT Практика	Реакт мини-апп	<div><div><div><div>const COMMENTS_API_URL =</div><div> ""https://jsonplaceholder.typicode.com/comments?_limit=15"";</div><br><div>type Comment = {</div><div> postId: number;</div><div> id: number;</div><div> name: string;</div><div> email: string;</div><div> body: string;</div><div>};</div><br><div>export default function CommentsComponent() {</div><div> return &lt;div&gt;asd&lt;/div&gt;;</div><div>}</div><br></div></div><br></div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a371eb985a95271d529197f48f645c477a012db6.jpg">&nbsp;<br>	<pre><a href=""https://codesandbox.io/p/sandbox/reakt-platina-mini-app-sv6gy6?file=%2Fsrc%2FApp.tsx"">https://codesandbox.io/p/sandbox/reakt-platina-mini-app-sv6gy6?file=/src/App.tsx</a></pre>	{}	424	2025-06-29 08:53:59.496	2025-06-29 08:53:59.496
cmchfo2ov00e913mpg4hgdf4l	kI,Q;LF1nV	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a50d827033cd5006d9646d67ba2908c856d4caca.jpg">отрефакторить&nbsp;		{}	513	2025-06-29 08:54:00.608	2025-06-29 08:54:00.608
cmchfo1uc00bt13mpd3an00gr	wU[M-:-`2@	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f778316f2c33b0509a0b678cf21fdc4c7ffb81c5.jpg"><br>ОТРЕФАКТОРИТЬ	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-284a3b72f51eed8b608c913ef9a8bbfa68cdff20.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c6ee06b05dc75cf6bbc08764c6917c5b1b0fccc9.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b65fc1763f5a7de5665101db263387e904162f8e.jpg">	{}	425	2025-06-29 08:53:59.509	2025-06-29 08:53:59.509
cmchfo1up00bu13mp2cpcp4lf	FF>twTs`dH	Простая	СБОРНИК::REACT Практика::Реакт мини-апп	REACT Практика	Реакт мини-апп	<pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>list <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[<br></span><span style=""color:#fff83c;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">text</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'hello'</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff57ec;"">children</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fff83c;"">[</span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">2</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">text</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'hello1'</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ff57ec;"">children</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fff83c;"">[</span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">3</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">text</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'hello1' </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">                </span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">4</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">text</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'hello2' </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#fff83c;"">] </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">5</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">text</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'hello2' </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#fff83c;"">] </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">6</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">text</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'text'</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#7a7e85;"">// +(-) {text}<br></span><span style=""color:#7a7e85;"">// - text<br></span><span style=""color:#7a7e85;"">//     + text<br></span><span style=""color:#7a7e85;"">//     - text<br></span><span style=""color:#7a7e85;"">//         text<br></span><span style=""color:#7a7e85;"">//     + text</span></pre><pre><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5e66670c3aab07967e8ce2cf252734ae896ac6fd.jpg"><span style=""color:#7a7e85;""><br></span></pre>	<a href=""https://codesandbox.io/p/sandbox/drevovidnyy-dropdaun-ts-y8n4vf?file=%2Fsrc%2FApp.tsx%3A100%2C1"">https://codesandbox.io/p/sandbox/drevovidnyy-dropdaun-ts-y8n4vf?file=/src/App.tsx:100,1</a>	{}	426	2025-06-29 08:53:59.522	2025-06-29 08:53:59.522
cmchfo1v200bv13mp65u65k3t	Qvb0w.X3HH	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	зачем вообще нужны хуки и как они появились	Хуки позволяют функциональным компонентам&nbsp;<code>React</code>&nbsp;иметь состояние (state) и методы жизненного цикла (lifecycle methods) подобно классовым компонентам. Появление хуков привело к тому в настоящее время классовые компоненты в&nbsp;<code>React</code>&nbsp;почти не используются.	{}	427	2025-06-29 08:53:59.535	2025-06-29 08:53:59.535
cmchfo1vf00bw13mp424bos62	v[79MZcwmS	Простая	СБОРНИК::TS Теория	TS Теория	\N	когда использовать типы, а когда интерфейсы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c73f109793adfd53f03dfa33934935c7894f0084.jpg">	{}	428	2025-06-29 08:53:59.548	2025-06-29 08:53:59.548
cmchfo1vr00bx13mpvea5qanr	elRUPN6~pL	Простая	СБОРНИК::TS Теория	TS Теория	\N	основные типы тайпскрипта&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240619163946.png">	{}	429	2025-06-29 08:53:59.56	2025-06-29 08:53:59.56
cmchfo1w400by13mpka2tpyhu	k74bhA_kh4	Простая	СБОРНИК::TS Теория	TS Теория	\N	литеральные типы&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240619164045.png">	{}	430	2025-06-29 08:53:59.573	2025-06-29 08:53:59.573
cmchfo1wg00bz13mpxwkk7zoz	e)F`_!^lD:	Простая	СБОРНИК::TS Теория	TS Теория	\N	тип массивов и кортежей&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240619164111.png">	{}	431	2025-06-29 08:53:59.585	2025-06-29 08:53:59.585
cmchfo1wt00c013mpexku4noe	NqL$%mn0v/	Простая	СБОРНИК::TS Теория	TS Теория	\N	объединение и пересечение	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240619164243.png">	{}	432	2025-06-29 08:53:59.598	2025-06-29 08:53:59.598
cmchfo1x600c113mpeye2r6br	"t[mUM#nY.M"	Простая	СБОРНИК::TS Теория	TS Теория	\N	Для чего утилита Partial приведи пример	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240619164559.png">	{}	433	2025-06-29 08:53:59.611	2025-06-29 08:53:59.611
cmchfo1xj00c213mpxpm638az	yhTD;bcy@e	Простая	СБОРНИК::TS Теория	TS Теория	\N	для чего утилита required приведи пример	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240619164732.png">	{}	434	2025-06-29 08:53:59.624	2025-06-29 08:53:59.624
cmchfo1xv00c313mpcmq1l683	uv<mP<z,SB	Простая	СБОРНИК::TS Теория	TS Теория	\N	для чего утилита readonly приведи пример	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240619164827.png">	{}	435	2025-06-29 08:53:59.636	2025-06-29 08:53:59.636
cmchfo1y800c413mpa9ncf1li	OFf>zA<b:]	Простая	СБОРНИК::TS Теория	TS Теория	\N	для чего утилита Record приведи пример	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240619164950.png">	{}	436	2025-06-29 08:53:59.649	2025-06-29 08:53:59.649
cmchfo1yl00c513mpix4vqx44	o~0`nZWmE)	Простая	СБОРНИК::TS Теория	TS Теория	\N	для чего утилита exclude приведи пример	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240619165010.png">	{}	437	2025-06-29 08:53:59.662	2025-06-29 08:53:59.662
cmchfo1yx00c613mpi5qm1hkg	g8AtXk.a}X	Простая	СБОРНИК::TS Теория	TS Теория	\N	для чего утилита extract приведи пример	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240619165133.png">	{}	438	2025-06-29 08:53:59.674	2025-06-29 08:53:59.674
cmchfo1z900c713mpfrygkrgr	O`Y0~d$t%d	Простая	СБОРНИК::TS Теория	TS Теория	\N	для чего утилита pick приведи пример	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240619165254.png">	{}	439	2025-06-29 08:53:59.686	2025-06-29 08:53:59.686
cmchfo1zk00c813mpmil4syyy	hdHIvW?)M@	Простая	СБОРНИК::TS Теория	TS Теория	\N	для чего утилита Omit приведи пример	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240619165322.png"><br>	{}	440	2025-06-29 08:53:59.697	2025-06-29 08:53:59.697
cmchfo1zx00c913mpb0h6gmw0	B8ExG2Krul	Простая	СБОРНИК::TS Теория	TS Теория	\N	для чего утилита NonNullable приведи пример	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240619165344.png">	{}	441	2025-06-29 08:53:59.71	2025-06-29 08:53:59.71
cmchfo2p700ea13mp6hvxe7o7	nwRcSZ@aXH	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-651282290a14e4cc0574af4d65446b377d7e47aa.jpg">отрефакторить		{}	514	2025-06-29 08:54:00.619	2025-06-29 08:54:00.619
cmchfo20k00cb13mpkn1z0vu9	FB_dD{(XzO	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	Расскажи про HTTP : что такое, основные характеристики, структуру ответа и запроса, статусы ответов какие-нибудь,	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7a75629fec03bd6d0cf0e29cac1322e4c5442058.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0dde359636e62ca150fe01471f5c9023f2cc3818.jpg">	{}	443	2025-06-29 08:53:59.733	2025-06-29 08:53:59.733
cmchfo21200cc13mpcbocnn7v	iFWon|HX?S	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	зачем нужен acess/refresh токены : создание, хранение, передача, использование обновление	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240620131217.png">	{}	444	2025-06-29 08:53:59.751	2025-06-29 08:53:59.751
cmchfo21f00cd13mpxi19gss8	E/{,!eCNW7	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	что такое идентификация, аутентефикация, авторизация, регистрация, верификация	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240620131412.png">	{}	445	2025-06-29 08:53:59.764	2025-06-29 08:53:59.764
cmchfo21r00ce13mpkgvrkgi3	zAgA}==C7x	Простая	СБОРНИК::WEB Теория	WEB Теория	\N	как работать с acess/refresh токенами	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240620134001.png"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240620134154.png">	{}	446	2025-06-29 08:53:59.776	2025-06-29 08:53:59.776
cmchfo22300cf13mpwgzzu99g	n/]56eOBCl	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	memo vs useMemo vs useCallback	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0967d95fa497b47257533a1121d997281b94d342.jpg">	{}	447	2025-06-29 08:53:59.787	2025-06-29 08:53:59.787
cmchfo22e00cg13mpqyrligce	"PN[zG#(#Z!"	Простая	СБОРНИК::REACT Теория::REACT Хуки	REACT Теория	REACT Хуки	React хуки перечисли и расскажи&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c1be1e4d37162280fae7fac24a16ed40a22d706e.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2d89f207fdc7891a708f705b130ebcce371348d9.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e612d7c5bd067ba3715db2e91a4bfb98be22864e.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-76289bc67c73a820820594816d5f561ea02c4247.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-705f8a5ba72807884771b74bb728befb810d2940.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-95c0d45def97af1c2a89ac7c9a34a9a55f5b708e.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-207bb5ba06343fd74a7019d72b3074e1dd49a1e7.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-578e1e7bf53c3de831e2054948d61e96fd1936f4.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bc56553538f6a100418e7094e650f67b4094a6e3.jpg"><br><br>	{}	448	2025-06-29 08:53:59.798	2025-06-29 08:53:59.798
cmchfo22q00ch13mppvxdxy5u	iK8TCB<sNT	Простая	СБОРНИК::REACT Практика::Кастомные хуки	REACT Практика	Кастомные хуки	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8ce5582c513a0e63871895410e68c18d977134c8.jpg"><br>useQuery	import { useState, useEffect } from 'react';<br><br>// Определяем интерфейс для возвращаемого значения хука<br>interface QueryResult&lt;T&gt; {<br>&nbsp; data: T | null;<br>&nbsp; loading: boolean;<br>&nbsp; error: Error | null;<br>}<br><br>// Определяем интерфейс для параметров запроса<br>interface QueryOptions {<br>&nbsp; url: string;<br>&nbsp; method?: string; // Опциональный параметр, по умолчанию 'GET'<br>}<br><br>// Объявляем хук useQuery с использованием дженерика T для типизации данных<br>const useQuery = &lt;T,&gt;(options: QueryOptions): QueryResult&lt;T&gt; =&gt; {<br>&nbsp; const [data, setData] = useState&lt;T | null&gt;(null);<br>&nbsp; const [loading, setLoading] = useState(true);<br>&nbsp; const [error, setError] = useState&lt;Error | null&gt;(null);<br><br>&nbsp; useEffect(() =&gt; {<br>&nbsp;&nbsp;&nbsp; // Определяем асинхронную функцию для выполнения fetch запроса<br>&nbsp;&nbsp;&nbsp; const fetchData = async () =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Выполняем запрос с указанным URL и методом, по умолчанию 'GET'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const response = await fetch(options.url, { method: options.method || 'GET' });<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const result = await response.json(); // Парсим результат в JSON<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setData(result); // Сохраняем полученные данные<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (error) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // В случае ошибки устанавливаем состояние error<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setError(error as Error);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } finally {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // После завершения запроса, успешного или нет, сбрасываем состояние загрузки<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setLoading(false);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; };<br><br>&nbsp;&nbsp;&nbsp; fetchData(); // Вызываем функцию fetchData при монтировании компонента или изменении URL/метода<br>&nbsp; }, [options.url, options.method]); // Зависимости useEffect<br><br>&nbsp; // Возвращаем объект с данными, состоянием загрузки и ошибкой<br>&nbsp; return { data, loading, error };<br>};<br><br>export default useQuery; // Экспортируем хук для использования в других частях приложения	{}	449	2025-06-29 08:53:59.811	2025-06-29 08:53:59.811
cmchfo23300ci13mpvlxzjboh	=mr&fF)%;	Простая	СБОРНИК::РЕДАКС	РЕДАКС	\N	Расскажи про редакс подробно&nbsp;<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f986e2c6133a54957521c338af4a5567c9ec34cb.jpg">		{}	450	2025-06-29 08:53:59.824	2025-06-29 08:53:59.824
cmchfo23g00cj13mpb59r2mlo	d~:<o)R(:a	Простая	СБОРНИК::РЕДАКС	РЕДАКС	\N	-&nbsp;Редакс vs FLUX<br>-&nbsp;для чего нужен редакс<br>-&nbsp;что есть в редаксе<br>&nbsp;&nbsp;&nbsp; -&nbsp;три основных принципа<br>&nbsp;&nbsp;&nbsp; -&nbsp;зачем нужна иммутабельность<br>&nbsp;&nbsp;&nbsp; -&nbsp;зачем нужны миддлварины и какие есть<br>-&nbsp;тулкит какие проблемы решает<br>&nbsp;&nbsp;&nbsp; -&nbsp;какой набор удобств предоставляет<br>&nbsp;&nbsp;&nbsp; -&nbsp;реселект<br>&nbsp;&nbsp;&nbsp; -&nbsp;правила использования селекторов	<br>- Редакс основан на архитектуре Flux<br>- Flux - это парадигма проектирования для React с однонаправленным потоком данных.<br>&nbsp;&nbsp;&nbsp; - Включает компоненты: диспетчер (dispatcher), хранилище (store) и представления (view).<br>- Redux - это имплементация этой парадигмы,&nbsp; глобальный стейт-менеджер <br>&nbsp;&nbsp;&nbsp; - нужен для того чтобы связывать компоненты независимо от интерфейса, хранить состояние независимо от жизненного цикла компонентов <br>&nbsp;&nbsp;&nbsp; - Есть редюсеры, принимаюшт экшны, возвращают новое состояние, с помощью редюсеров создаем стор, на нем вызываем диспатч для изменения состояния, getState/subscribe для получения доступа к этому состоянию, есть селекторы которые достают кусочки состояния и с помощью них подписываемся на кусок стейта<br>&nbsp;&nbsp;&nbsp; - Три основных принципа:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Единственный источник истины: всё состояние приложения хранится в одном объекте.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Состояние только для чтения: изменения через отправку операций (actions) - то есть иммутабельно<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Зачем нужна Иммутабельность<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Гарантия того что данные не изменятся -&gt; история изменений <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Возможны чистые функции (редюсеры)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Редакс использует оптимизации (реселект и тд)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - чтобы определить изменения, достаточно просто сравнить объекты по ссылке и это очень быстро <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Но и именно поэтому создавать новые ссылки нежелательно <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Чистые функции (reducers) определяют изменения состояния.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&nbsp; Нет сайд эффектов <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Детерминированна <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Реализует иммутабельное обновление стейта<br>&nbsp;&nbsp;&nbsp; - Но в классической модели некуда впихнуть асинхронную работу с запросами, поэтому есть Посредник (Мидддлварина), которая перед отправкой в стор экшна выполняет какие-либо действия, например делает запрос на сервак<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Например Санки - вместо экшна мы можем диспатчить функции, передавать экстра аргумент помимо getState и dispatch и много всего интересного<br>- Но сам по себе Редакс имеет важные недостатки<br>&nbsp;&nbsp;&nbsp; -&nbsp; Слишком сложная настройка хранилища (store)<br>&nbsp;&nbsp;&nbsp; - Для того, чтобы заставить&nbsp;`Redux`&nbsp;делать что-то полезное, приходится использовать дополнительные пакеты<br>&nbsp;&nbsp;&nbsp; - Слишком много шаблонного кода (boilerplate)<br>- И эту проблему решил Redux Toolkit и также добавил много штук, вот самые интересные как по мне<br>&nbsp;&nbsp;&nbsp; - configureStore<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - автоматически настраивает миддлварину (ReduxThunk, ReduxDevtools),<br>&nbsp;&nbsp;&nbsp; - createReducer<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - теперь пишем редюсеры более декларативно, в мутабельном стиле, а редакс сам под капотом императивно с использованием ImmerJS сделает дело<br>&nbsp;&nbsp;&nbsp; - createAction<br>&nbsp;&nbsp;&nbsp; - createSlice<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - create action + createReducer + делаем все это в одном месте <br>&nbsp;&nbsp;&nbsp; - createAsyncThunk<br>&nbsp;&nbsp;&nbsp; - createEntityAdapter<br>&nbsp;&nbsp;&nbsp; - createSelector из реселекта <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - так как селектор очень часто используется, разработали Reselect - кеширует результат последнего вызова селектора и повторно использует его, если входные данные не изменились<br>- Но есть также правила использования селекторов <br>&nbsp;&nbsp;&nbsp; - Выбирать как можно меньше данные, так как если выбрать большой кусок, то все подвязанные данные обновятся<br>&nbsp;&nbsp;&nbsp; - Желательно констатную сложность O(1), так как селектор по максималке эксплуатируется<br>&nbsp;&nbsp;&nbsp; - также по возможности нормализовывать данные и использовать createEntityAdapter	{}	451	2025-06-29 08:53:59.836	2025-06-29 08:53:59.836
cmchfo23t00ck13mpw2dgce7p	g%dGwcNv2S	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	visibility:hidden vs display:none vs opacity:0	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a42e876de4a44c5f4a223d9c1c2ae496275d0ee3.jpg">	{}	452	2025-06-29 08:53:59.85	2025-06-29 08:53:59.85
cmchfo24v00cl13mp6vm39wzv	kvH<mLP=(=	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	absolute vs static vs relative vs fixed<br>также, относительно каких координат позиционируются?&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ca06256a2d587e94a1aa03c55add6a3601dd9411.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3f454e58b4460882ba5987fd97f7bd539c1ee985.jpg">	{}	453	2025-06-29 08:53:59.887	2025-06-29 08:53:59.887
cmchfo25700cm13mp9yrm9zj1	ns.$wi(FiS	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-115af69561d41e09dafdb5f1402fa05b9adca93a.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-54e2006fbd6c8b8c3f1429c900bcfc8363d2edd5.jpg"><br>расширение	{}	454	2025-06-29 08:53:59.9	2025-06-29 08:53:59.9
cmchfo25j00cn13mp9cnhj0nz	m&xCOrCKlw	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-40e603af5d6e990aba78419f07bad93639e1d447.jpg">&nbsp;что-то тут не так&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8c52e9ebf3d4886983365835b17b5e08a101cfc7.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2680befb84130996bc08cce648f9c1fd903dd67c.jpg">	{}	455	2025-06-29 08:53:59.912	2025-06-29 08:53:59.912
cmchfo25t00co13mpv3igh2km	"s#2l3Tl35:"	Простая	СБОРНИК::REACT Практика::Реакт мини-апп	REACT Практика	Реакт мини-апп	<div><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b25c10dd14a0b30135f43855f0e9a39dedae0417.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-454bff073e911bd305e478e82983407da6f6d212.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-51ebcb3bf65d95fa05585fffa31487cf2f9a07f7.jpg"><br></div>	<div><div><a href=""https://codesandbox.io/p/sandbox/elated-meninsky-cfylwq?file=%2Fsrc%2FApp.tsx%3A105%2C1"">https://codesandbox.io/p/sandbox/elated-meninsky-cfylwq?file=/src/App.tsx:105,1</a>&nbsp;- решение<br></div></div>	{}	456	2025-06-29 08:53:59.922	2025-06-29 08:53:59.922
cmchfo26600cp13mp7e70fh11	pDz&6*nE)M	Простая	СБОРНИК::REACT Практика::Реакт мини-апп	REACT Практика	Реакт мини-апп	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fea7a4a71e4b65a44395145cb2e8b42569c1a56f.jpg">также все затипизировать	<a href=""https://codesandbox.io/p/sandbox/snowy-wind-95dt3w?file=%2Fsrc%2Findex.tsx"">https://codesandbox.io/p/sandbox/snowy-wind-95dt3w?file=/src/index.tsx</a>	{}	457	2025-06-29 08:53:59.935	2025-06-29 08:53:59.935
cmchfo26j00cq13mpp57sm969	Dt+Ugh?{>}	Простая	СБОРНИК::REACT Практика::Реакт мини-апп	REACT Практика	Реакт мини-апп	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-18fdcb38f1f1dc4b5c8a38e4374e0cd8f4da581d.jpg">	<a href=""https://codesandbox.io/p/sandbox/weathered-glade-8663h3?file=%2Fsrc%2FApp.tsx%3A1%2C1-31%2C1"">https://codesandbox.io/p/sandbox/weathered-glade-8663h3?file=/src/App.tsx:1,1-31,1</a>	{}	458	2025-06-29 08:53:59.948	2025-06-29 08:53:59.948
cmchfo26v00cr13mp4mnx32dy	u]melc6DY&	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-06e6d9555d4eba83fdd10a16c3c9c3e512559764.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d6bd335eb0258fe074bdcefbf6d9be849b7448b3.jpg">	{}	459	2025-06-29 08:53:59.96	2025-06-29 08:53:59.96
cmchfo27800cs13mp6pdjvwct	"zni#bW*3=g"	Простая	СБОРНИК::REACT Практика::Реакт мини-апп	REACT Практика	Реакт мини-апп	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-96d23d219710b24fd4c2ebb428a030fc53575553.jpg">&nbsp;- также затипизируй все как можешь	<a href=""https://codesandbox.io/p/sandbox/snowy-surf-hjsmhr?file=%2Fsrc%2FApp.tsx%3A13%2C5"">https://codesandbox.io/p/sandbox/snowy-surf-hjsmhr?file=/src/App.tsx:13,5</a>	{}	460	2025-06-29 08:53:59.973	2025-06-29 08:53:59.973
cmchfo27l00ct13mpr0gk035f	h/=<cO-`-O	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9cf63d06a0c82f9add0735b63f509b8a2e10a999.jpg">	const cities = ['Tokyo', 'London', 'Rome', 'Donlon', 'Kyoto', 'Paris', 'More', 'Meor'];<br><br>const transform = (words) =&gt; {<br>&nbsp; const groups = words.reduce((acc, word) =&gt; {<br>&nbsp;&nbsp;&nbsp; const sortedWord = word.toLowerCase().split('').sort().join('');<br>&nbsp;&nbsp;&nbsp; acc[sortedWord] = acc[sortedWord] || [];<br>&nbsp;&nbsp;&nbsp; acc[sortedWord].push(word);<br>&nbsp;&nbsp;&nbsp; return acc;<br>&nbsp; }, {});<br><br>&nbsp; return Object.values(groups);<br>};<br><br>console.log(JSON.stringify(transform(cities)));	{}	461	2025-06-29 08:53:59.985	2025-06-29 08:53:59.985
cmchfo27x00cu13mpcbhd1v1u	tloH::}Qct	Простая	СБОРНИК::JS ПРАКТИКА::замыкания	JS ПРАКТИКА	замыкания	Написать функцию на JavaScript, которая создаёт массив из 10 функций, каждая из которых при вызове возвращает свой индекс в массиве. Используйте замыкания для корректной работы функций.	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-55f4f17d4d4212d187640056fa55e2d4a0a7c280.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-cff62887fd6cd76984d080da963527721b13d5e5.jpg">	{}	462	2025-06-29 08:53:59.997	2025-06-29 08:53:59.997
cmchfo28800cv13mpp3315v0u	CMZwLyTp-)	Простая	СБОРНИК::HTML&CSS&ОБЩИЕ	HTML&CSS&ОБЩИЕ	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-125b3316078dc53401712cb146571205744b7d66.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f4260740df82fe13f145ede083aa7bd287fce7f8.jpg">	{}	463	2025-06-29 08:54:00.009	2025-06-29 08:54:00.009
cmchfo28l00cw13mpcyqzwahh	EkyC+7Oi=!	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	Написать функцию, которая принимает массив API эндпоинтов (URL). Порядок эндпоинтов в массиве определяет их приоритет. Функция должна возвращать промис, который резолвится данными из успешно завершившегося запроса с наивысшим приоритетом. Если все запросы вернут ошибку, промис должен завершиться ошибкой. Все запросы должны выполняться параллельно.	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-76c9e8e9ae94be276bd361f23ad6004739f73d3d.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3e1d82dfd2cb55dbc99efd0eff6d09bcb4b17ff6.jpg">	{}	464	2025-06-29 08:54:00.022	2025-06-29 08:54:00.022
cmchfo28z00cx13mpa6kweams	MHPJDrtjy0	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-15574ee90baeb86d4a8c66cf514ed4cb66e87f4e.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b0b1acd7b89db05603147d9504ef2a329ca52e92.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-774eca9290a6d92089b4c9f0d5b6d421a8e8b2a3.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-dd139657b704c4e92e320a8412904bae3ddc3d87.jpg">	{}	465	2025-06-29 08:54:00.035	2025-06-29 08:54:00.035
cmchfo29k00cy13mpf1wlpsij	K/1E|2+oL8	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2a292f6b2ad7800e4cf9ab0b6bbb6202ce7a9834.jpg">найти проблему и исправить	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-34c4fd304a924fda5a2e785e9838aca58ba5836b.jpg">	{}	466	2025-06-29 08:54:00.057	2025-06-29 08:54:00.057
cmchfo29t00cz13mpo8twfvzi	cHy^+R,O0q	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d79bbbf3f8fb2e88dc45db6f926f3d46104ade06.jpg">найти проблему и исправить	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-27662c607ffa1df2450a3b718e23d9db94fd770d.jpg">	{}	467	2025-06-29 08:54:00.066	2025-06-29 08:54:00.066
cmchfo2a500d013mp108okwsm	dk/B(b0.G]	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-38937440585880a2734bf5ca04e68bc8fe8f2b24.jpg">найти проблемы и исправить	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bcfc1da095b8ff1075382cbf73c688f9126f0b87.jpg">	{}	468	2025-06-29 08:54:00.078	2025-06-29 08:54:00.078
cmchfo2ah00d113mp30vuew7q	K49z{3xO?~	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-eb6861b30405e980f0e125ef9efeb73b5e4c5687.jpg">найти проблемы и исправить	<li>Неопределенный <code>isError</code>.</li><li>Отсутствие обработки ввода номера телефона.</li><li>Недостаточная типизация.<br><br>interface PromoDialogProps {<br>&nbsp; open: boolean;<br>&nbsp; name: string;<br>&nbsp; children: React.ReactNode;<br>&nbsp; onClose: () =&gt; void;<br>}<br><br>const PromoDialog: React.FC&lt;PromoDialogProps&gt; = ({ name, open, children, onClose }) =&gt; {<br>&nbsp; const [code, setCode] = React.useState&lt;string | undefined&gt;();<br>&nbsp; const [phone, setPhone] = React.useState&lt;string | undefined&gt;();<br>&nbsp; const [isError, setIsError] = React.useState&lt;boolean&gt;(false);<br>&nbsp; <br>&nbsp; // Счетчик рендеров компонента<br>&nbsp; const renders = React.useRef(0);<br>&nbsp; renders.current++;<br><br>&nbsp; const fetchCode = React.useCallback(async () =&gt; {<br>&nbsp;&nbsp;&nbsp; if (phone &amp;&amp; !isError) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const { data } = await axios.get&lt;string[]&gt;('http://someurl.com');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setCode(data[0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (error) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setIsError(true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp; }, [phone, isError]);<br><br>&nbsp; const getPromo = () =&gt; {<br>&nbsp;&nbsp;&nbsp; setCode('Loading');<br>&nbsp;&nbsp;&nbsp; fetchCode();<br>&nbsp; };<br><br>&nbsp; return (<br>&nbsp;&nbsp;&nbsp; &lt;Dialog open={open} onClose={onClose}&gt; {/* Компонент UI kit */}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DialogContent&gt; {/* Компонент UI kit */}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;h1&gt;{name}&lt;/h1&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div&gt;{children}&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TextField value={code} contentEditable={false} /&gt; {/* Компонент UI kit */}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TextInput value={phone} onInput={(e) =&gt; setPhone(e.currentTarget.value)} /&gt;&nbsp; {/* Компонент UI kit */}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/DialogContent&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DialogActions&gt; {/* Компонент UI kit */}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;button onClick={getPromo}&gt;Get Code&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;button onClick={onClose}&gt;Cancel&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/DialogActions&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/Dialog&gt;<br>&nbsp; );<br>};<br><br><br></li>	{}	469	2025-06-29 08:54:00.089	2025-06-29 08:54:00.089
cmchfo2as00d213mputy6scbl	A%7:wwvPNc	Простая	СБОРНИК::JS ПРАКТИКА::Кастомные методы и функции	JS ПРАКТИКА	Кастомные методы и функции	Напишите функцию мемоизации, которая принимает функцию и возвращает новую функцию, использующую кеш для хранения результатов предыдущих вычислений.	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a90850b979db868a0a17007464a2d50b78a1ef3b.jpg">	{}	470	2025-06-29 08:54:00.101	2025-06-29 08:54:00.101
cmchfo2b400d313mp18chsgo4	o?2_1>~G9]	Простая	СБОРНИК::REACT Практика::Реакт мини-апп	REACT Практика	Реакт мини-апп	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3a1a8045d96368bf67f9f13ad4cb03d68429eef8.jpg">	<a href=""https://codesandbox.io/p/sandbox/festive-forest-fgsnj9?file=%2Fsrc%2FApp.tsx%3A1%2C1-93%2C1"">https://codesandbox.io/p/sandbox/festive-forest-fgsnj9?file=/src/App.tsx:1,1-93,1</a>	{}	471	2025-06-29 08:54:00.113	2025-06-29 08:54:00.113
cmchfo2bg00d413mpzuso71ep	Q>,*-[_7>%	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	const prettyIncrement = (n) =&gt; n++ - --n;<br><br>console.log(prettyIncrement(1)); // ?<br>console.log(prettyIncrement(2)); // ?<br>console.log(prettyIncrement(3)); // ?<br><br>Что выведется в консоль и почему	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7a084bdcff3614ee76d09647b5a87e59ea7c3402.jpg"><br><br>const prettyIncrement = (n) =&gt; n++ - --n;<br><br>console.log(prettyIncrement(1)); // 0<br>console.log(prettyIncrement(2)); // 0<br>console.log(prettyIncrement(3)); // 0	{}	472	2025-06-29 08:54:00.125	2025-06-29 08:54:00.125
cmchfo2bt00d513mppsk21ha7	OQQwB1.73-	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1f65b27f99d3d37391831df82ede6f5f180ca474.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-66af4bad5dba5d87127576becae131c83a12d94f.jpg">	{}	473	2025-06-29 08:54:00.138	2025-06-29 08:54:00.138
cmchfo2c600d613mpqvpsqtan	i>?mHM0KDG	Простая	СБОРНИК::REACT Практика::Реакт мини-апп	REACT Практика	Реакт мини-апп	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-14fdd50917b0256f7ed2a15e9a56b92fdeb330bd.jpg">	<a href=""https://codesandbox.io/p/sandbox/schetchik-ts-9w4fjd?file=%2Fsrc%2FApp.tsx%3A46%2C1"">https://codesandbox.io/p/sandbox/schetchik-ts-9w4fjd?file=/src/App.tsx:46,1</a>	{}	474	2025-06-29 08:54:00.15	2025-06-29 08:54:00.15
cmchfo2cg00d713mpkc854eie	"LV3U5#~5GV"	Простая	СБОРНИК::JS ПРАКТИКА::замыкания	JS ПРАКТИКА	замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f39151073772b747041dd40166fec0f0008bea9e.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-af75e962d8acfbc4bbc026c18751b5e479052104.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ef8fd6b580bc3c555199183a10ba566a79a336fe.jpg">	{}	475	2025-06-29 08:54:00.161	2025-06-29 08:54:00.161
cmchfo2cx00d813mpx7ssh6k2	QmsEgK9bQ	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-51b41b8527506c8c7841b9725478c522a239189d.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8d157e3e144f278109a3c6e0513c73553058b731.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-03663d4ef22c5b1d0c95bd1caa129e39365fd692.jpg">	{}	476	2025-06-29 08:54:00.177	2025-06-29 08:54:00.177
cmchfo2d900d913mpmbptiy30	tXx-}qvb9T	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c6b638ecf2280a80521b00c973c6d9830ed1bb4d.jpg">	/**<br> * Функция оборачивает переданный промис и отклоняет его, если он не разрешается в течение указанного времени<br> * @param {Promise} promise - исходный промис<br> * @param {number} timeout - время в миллисекундах, через которое промис должен отклониться<br> * @returns {Promise} - новый промис, который либо разрешится, либо отклонится по таймауту<br> */<br>function withTimeout(promise, timeout) {<br>&nbsp; return new Promise((resolve, reject) =&gt; {<br>&nbsp;&nbsp;&nbsp; // Устанавливаем таймер на заданное время<br>&nbsp;&nbsp;&nbsp; const timer = setTimeout(() =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reject(new Error('Promise timed out')); // Отклоняем промис, если время вышло<br>&nbsp;&nbsp;&nbsp; }, timeout);<br><br>&nbsp;&nbsp;&nbsp; // Обрабатываем разрешение или отклонение исходного промиса<br>&nbsp;&nbsp;&nbsp; promise.then(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (value) =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clearTimeout(timer); // Очищаем таймер при разрешении исходного промиса<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resolve(value); // Разрешаем новый промис с тем же значением<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (error) =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clearTimeout(timer); // Очищаем таймер при отклонении исходного промиса<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reject(error); // Отклоняем новый промис с той же ошибкой<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; );<br>&nbsp; });<br>}<br><br>// Пример использования<br>const examplePromise = new Promise((resolve) =&gt; {<br>&nbsp; setTimeout(() =&gt; {<br>&nbsp;&nbsp;&nbsp; resolve('Success!');<br>&nbsp; }, 3000); // Промис разрешится через 3 секунды<br>});<br><br>withTimeout(examplePromise, 2000)<br>&nbsp; .then((result) =&gt; {<br>&nbsp;&nbsp;&nbsp; console.log(result); // Это не выполнится, так как таймаут меньше времени разрешения промиса<br>&nbsp; })<br>&nbsp; .catch((error) =&gt; {<br>&nbsp;&nbsp;&nbsp; console.error(error.message); // Выведет ""Promise timed out""<br>&nbsp; });<br><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-243a3638e3d297c41c1bc6952bc47cad96bc7de5.jpg">	{}	477	2025-06-29 08:54:00.189	2025-06-29 08:54:00.189
cmchfo2dn00da13mpvschvff8	OfjqX:!e-/	Простая	СБОРНИК::REACT Практика::Реакт мини-апп	REACT Практика	Реакт мини-апп	Реализуйте React-компонент для конвертации валют. Компонент должен содержать два поля ввода: для рублей и для долларов. При вводе значения в одно поле, автоматически пересчитывается и обновляется значение в другом поле на основе фиксированного курса обмена. Типизировать все&nbsp;	<a href=""https://codesandbox.io/p/sandbox/konverter-ts-hfm3r6?file=%2Fsrc%2FApp.tsx%3A39%2C10"">https://codesandbox.io/p/sandbox/konverter-ts-hfm3r6?file=/src/App.tsx:39,10</a>	{}	478	2025-06-29 08:54:00.203	2025-06-29 08:54:00.203
cmchfo2dy00db13mp81tab2ch	sk^?w;2$]0	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-cf32279013680a86bc7fb95d8616e244a231b200.jpg"><br>const data = ['f', '53', '5e62d95', '1c413ba'];	// Исходный массив строк<br>const data = ['f', '53', '5e62d95', '1c413ba'];<br><br>// Перевернуть весь массив<br>const reversedArray = [...data].reverse(); // ['1c413ba', '5e62d95', '53', 'f']<br><br>// Перевернуть каждый элемент в массиве<br>const reversedElementsArray = reversedArray.map(item =&gt; <br>&nbsp; item.split('').reverse().join('')<br>); // ['ab314c1', '59d26e5', '35', 'f']<br><br>// Собрать строку только с буквами<br>const lettersOnly = reversedElementsArray<br>&nbsp; .join('') // 'ab314c159d26e535f'<br>&nbsp; .split('') // ['a', 'b', '3', '1', '4', 'c', '1', '5', '9', 'd', '2', '6', 'e', '5', '3', '5', 'f']<br>&nbsp; .filter(char =&gt; isNaN(Number(char))) // ['a', 'b', 'c', 'd', 'e', 'f']<br>&nbsp; .join(''); // 'abcdef'<br><br>// Собрать строку только с цифрами<br>const digitsOnly = reversedElementsArray<br>&nbsp; .join('') // 'ab314c159d26e535f'<br>&nbsp; .replace(/[^0-9]/g, ''); // '31415926535'<br><br>console.log(""Letters only:"", lettersOnly); // 'abcdef'<br>console.log(""Digits only:"", digitsOnly); // '31415926535'<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-aece66c4ed0653f6adc50eca3624c709852c2aa3.jpg">	{}	479	2025-06-29 08:54:00.215	2025-06-29 08:54:00.215
cmchfo2eb00dc13mpho0zwomv	srD/@z?rU!	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b4792b6b83496d9d5ac6e7001c402436232ec51e.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-154eef45cd9bedbcb898e081fa32917b32db163e.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-450ee9fea813dad8fc8a3c2fdb81592845c113f6.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-80993d2f7ed95836d7cf30884379037d4a38db0d.jpg"><br>// Интерфейс для элемента дерева, который может быть строкой или объектом с вложенными элементами<br>interface TreeItem {<br>&nbsp; label?: string;<br>&nbsp; items?: TreeItem[] | string[];<br>}<br><br>// Интерфейс для пропсов компонента Item<br>interface ItemProps {<br>&nbsp; item: string;<br>}<br><br>// Компонент для отображения элемента списка<br>const Item: React.FC&lt;ItemProps&gt; = ({ item }) =&gt; {<br>&nbsp; return &lt;li&gt;{item}&lt;/li&gt;;<br>};<br><br>// Интерфейс для пропсов компонента List<br>interface ListProps {<br>&nbsp; items: TreeItem;<br>}<br><br>// Компонент для отображения древовидной структуры<br>const List: React.FC&lt;ListProps&gt; = ({ items }) =&gt; {<br>&nbsp; // Функция для отображения элементов дерева<br>&nbsp; const showItems = (items: TreeItem[] | string[]) =&gt; {<br>&nbsp;&nbsp;&nbsp; return items.map((item, index) =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (typeof item === ""string"") {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return &lt;Item key={index} item={item} /&gt;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return &lt;List key={index} items={item} /&gt;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; });<br>&nbsp; };<br><br>&nbsp; return (<br>&nbsp;&nbsp;&nbsp; &lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;p&gt;{items.label}&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ul&gt;{items.items &amp;&amp; showItems(items.items)}&lt;/ul&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br>&nbsp; );<br>};<br><br>// Пример использования компонентов<br>const items: TreeItem = {<br>&nbsp; label: ""something 1"",<br>&nbsp; items: [<br>&nbsp;&nbsp;&nbsp; ""somebody 1"",<br>&nbsp;&nbsp;&nbsp; ""somebody 2"",<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label: ""something 2"",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items: [<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ""somebody 3"",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label: ""something 3"",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items: [""somebody 4""],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ],<br>&nbsp;&nbsp;&nbsp; },<br>&nbsp; ],<br>};<br><br>const App: React.FC = () =&gt; (<br>&nbsp; &lt;div className=""App""&gt;<br>&nbsp;&nbsp;&nbsp; &lt;h1&gt;Interview&lt;/h1&gt;<br>&nbsp;&nbsp;&nbsp; &lt;List items={items} /&gt;<br>&nbsp; &lt;/div&gt;<br>);<br><br>export default App;	{}	480	2025-06-29 08:54:00.228	2025-06-29 08:54:00.228
cmchfo2em00dd13mpca9h979n	"NJ$3&QQ)5#"	Простая	СБОРНИК::JS ПРАКТИКА::Кастомные методы и функции	JS ПРАКТИКА	Кастомные методы и функции	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-64c21376f2a2a870d7f78b03d5216f248537b6de.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a89433b299da427185b2b385ea1f2caed182e690.jpg">	{}	481	2025-06-29 08:54:00.238	2025-06-29 08:54:00.238
cmchfo2ey00de13mpax3qevub	kBh/[IB:q&	Простая	СБОРНИК::REACT Практика::Реакт мини-апп	REACT Практика	Реакт мини-апп	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-5f9ea912c40f0adbd6d9ea96297c86eecd0b2510.jpg">	<a href=""https://codesandbox.io/p/sandbox/dreamy-meadow-gmkk2x?file=%2Fsrc%2FApp.tsx%3A4%2C17"">https://codesandbox.io/p/sandbox/dreamy-meadow-gmkk2x?file=/src/App.tsx:4,17</a>	{}	482	2025-06-29 08:54:00.25	2025-06-29 08:54:00.25
cmchfo2fa00df13mp1j2iy05r	cr_6Rap,lh	Простая	СБОРНИК::REACT Теория	REACT Теория	\N	на что обращаешь внимание при рефакторинге, вообще при разработке?&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ab9cb7f038079784a4f8fe0c4f221c94f607a1aa.jpg">	{}	483	2025-06-29 08:54:00.263	2025-06-29 08:54:00.263
cmchfo2fn00dg13mpvjvqmxot	DfS!qAH6&:	Простая	СБОРНИК::РЕДАКС	РЕДАКС	\N	Устно расскажи как реализовал бы счетчик	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240620105833.png"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240620105854.png"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240620105924.png"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240620110023.png"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240620110042.png"><br>- создаем экшн<br>&nbsp;&nbsp;&nbsp; - export const increment = () =&gt; ({ type:&nbsp; 'INCREMENT'})<br>&nbsp;&nbsp;&nbsp; - export const increment = () =&gt; ({ type:&nbsp; 'DECREMENT'})<br>- создаем редюсер<br>&nbsp;&nbsp;&nbsp; - начальный стейт,<br>&nbsp;&nbsp;&nbsp; - редюсер (начальный стейт, экшн) =&gt; { конструкция switch/case где описываем как меняется стейт в зависимости от инкремента декремента}<br>- создаем стор<br>&nbsp;&nbsp;&nbsp; - createStore<br>- оборачиваем в провайдер приложение<br>&nbsp;&nbsp;&nbsp; - пропсом передаем store={store}<br>- создаем сам компонент<br>&nbsp;&nbsp;&nbsp; - с помощью селектора вытаскиваем состояние счетчика и присваиваем переменной<br>&nbsp;&nbsp;&nbsp; - также получаем диспатч<br>&nbsp;&nbsp;&nbsp; - прокидываем в обработчик онклик диспатч с соответсвующим экшном (инкремент/декремент)<br><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0f2d43aa8809c6cbd51746228e6dabbeaa4efc7b.jpg">	{}	484	2025-06-29 08:54:00.276	2025-06-29 08:54:00.276
cmchfo2fz00dh13mpfauq3le3	M7&}C`5f@t	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3affd84b336ee53ee782d917ec1c5fba0d3cd904.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9c9a352023bf2bdb14b8f7fd53b25710fba0ea17.jpg">	{}	485	2025-06-29 08:54:00.288	2025-06-29 08:54:00.288
cmchfo2ga00di13mp9f6b5beg	A`86sM^Z6I	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	const p = new Promise((resolve) =&gt; {<br>&nbsp; resolve(""*"");<br>});<br><br>p.then(() =&gt; {<br>&nbsp; p.then(() =&gt; console.log(""A""));<br>&nbsp; console.log(""C"");<br>});<br><br>p.then(() =&gt; console.log(""B""));<br><br>Что выведется&nbsp;	C'&nbsp;<br><br>'B' <br><br>'A'	{}	486	2025-06-29 08:54:00.299	2025-06-29 08:54:00.299
cmchfo2gm00dj13mp5ytqo5ih	L!*zoTaStt	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	<div><pre><span style=""color:#9af064;font-style:italic;"">/**<br></span><span style=""color:#9af064;font-style:italic;""> * Функция делает запрос по указанному URL и повторяет попытку в случае неудачи.<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{string} url </span><span style=""color:#9af064;font-style:italic;"">- URL для запроса.<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{number} attempts </span><span style=""color:#9af064;font-style:italic;"">- Количество попыток.<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@returns </span><span style=""color:#abadb3;font-style:italic;"">{Promise&lt;any&gt;} </span><span style=""color:#9af064;font-style:italic;"">- Промис, который резолвится с данными или реджектится с ошибкой.<br></span><span style=""color:#9af064;font-style:italic;""> */</span></pre></div>	<div><pre><span style=""color:#9af064;font-style:italic;"">/**<br></span><span style=""color:#9af064;font-style:italic;""> * Функция делает запрос по указанному URL и повторяет попытку в случае неудачи.<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{string} url </span><span style=""color:#9af064;font-style:italic;"">- URL для запроса.<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{number} attempts </span><span style=""color:#9af064;font-style:italic;"">- Количество попыток.<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@returns </span><span style=""color:#abadb3;font-style:italic;"">{Promise&lt;any&gt;} </span><span style=""color:#9af064;font-style:italic;"">- Промис, который резолвится с данными или реджектится с ошибкой.<br></span><span style=""color:#9af064;font-style:italic;""> */<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">async function </span><span style=""color:#56a8f5;"">fetchWithRetry</span><span style=""color:#ffba00;font-weight:bold;"">(</span>url<span style=""color:#bcbec4;"">, </span>attempts<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#7a7e85;"">// Цикл для выполнения запроса указанное количество раз<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">for </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>i <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">0</span><span style=""color:#bcbec4;"">; </span>i <span style=""color:#80a1ff;font-weight:bold;"">&lt; </span>attempts<span style=""color:#bcbec4;"">; </span>i<span style=""color:#80a1ff;font-weight:bold;"">++</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">try </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#7a7e85;"">// Выполнение запроса по указанному URL<br></span><span style=""color:#7a7e85;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>response <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">await </span><span style=""color:#56a8f5;"">fetch</span><span style=""color:#ffba00;font-weight:bold;"">(</span>url<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#7a7e85;"">// Проверка успешности ответа<br></span><span style=""color:#7a7e85;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#80a1ff;font-weight:bold;"">!</span>response<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">ok</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span><span style=""color:#7a7e85;"">// Если ответ не успешен, выбрасываем ошибку<br></span><span style=""color:#7a7e85;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">throw new </span><span style=""color:#56a8f5;"">Error</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'Ошибка'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#7a7e85;"">// Парсинг ответа в формате JSON<br></span><span style=""color:#7a7e85;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>data <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">await </span>response<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">json</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#7a7e85;"">// Возвращаем данные, если запрос успешен<br></span><span style=""color:#7a7e85;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>data<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">catch </span><span style=""color:#ffba00;font-weight:bold;"">(</span>error<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#7a7e85;"">// Логирование ошибки и номера попытки<br></span><span style=""color:#7a7e85;"">            </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">`Attempt </span>$<span style=""color:#ae6dff;font-weight:bold;"">{</span>i <span style=""color:#80a1ff;font-weight:bold;"">+ </span><span style=""color:#2aacb8;"">1</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#96d57d;""> failed: </span>$<span style=""color:#ae6dff;font-weight:bold;"">{</span>error<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">message</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#96d57d;"">`</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#7a7e85;"">// Если это последняя попытка и она неудачна, выбрасываем ошибку<br></span><span style=""color:#7a7e85;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>i <span style=""color:#80a1ff;font-weight:bold;"">=== </span>attempts <span style=""color:#80a1ff;font-weight:bold;"">- </span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">throw new </span><span style=""color:#56a8f5;"">Error</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'All attempts failed'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        }<br></span><span style=""color:#ae6dff;font-weight:bold;"">    }<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">// Использование функции fetchWithRetry<br></span><span style=""color:#56a8f5;"">fetchWithRetry</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'https://jsonplaceholder.typicode.com/todos/1'</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">3</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>data <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'Data:'</span><span style=""color:#bcbec4;"">, </span>data<span style=""color:#ffba00;font-weight:bold;"">)) </span><span style=""color:#7a7e85;"">// Логирование полученных данных в случае успеха<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">catch</span><span style=""color:#ffba00;font-weight:bold;"">(</span>error <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'Error:'</span><span style=""color:#bcbec4;"">, </span>error<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">message</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Логирование ошибки в случае неудач<br></span></pre></div>	{}	487	2025-06-29 08:54:00.31	2025-06-29 08:54:00.31
cmchfo2gw00dk13mpmk6ds7x5	Lg+90H.q+}	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">data </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[<br></span><span style=""color:#fff83c;"">    </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#2aacb8;"">0</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">null</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">undefined</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">false</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#96d57d;"">""""</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">true</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#96d57d;"">'2'</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#7a7e85;"">// Написать функцию которая вернет все элементы массива кроме первого и последнего и выполнит проверку на true</span></pre></div>	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">getAllAreTrue </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>arr<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>arr<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">slice</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">, </span><span style=""color:#80a1ff;font-weight:bold;"">-</span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">every</span><span style=""color:#ffba00;font-weight:bold;"">(</span>element <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#56a8f5;"">Boolean</span><span style=""color:#ffba00;font-weight:bold;"">(</span>element<span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span></pre></div>	{}	488	2025-06-29 08:54:00.321	2025-06-29 08:54:00.321
cmchfo2h800dl13mpbuhtned8	Iy&lge9zz`	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<div><pre><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'setTimeout1'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise1'</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'setTimeout2'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise2'</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;""><br></span></pre></div>	promise1 promise2 setTimeout1 setTimeout2	{}	489	2025-06-29 08:54:00.333	2025-06-29 08:54:00.333
cmchfo2hl00dm13mpvmngqf0y	x-7]CER-)$	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<div><pre><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{} </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#ae6dff;font-weight:bold;"">{}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// <br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>x<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// <br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">var </span>x <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">var </span>x <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">x</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">x</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// <br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>x<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; //</span><span style=""color:#7a7e85;""><br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>x <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)()</span><span style=""color:#bcbec4;"">;</span></pre></div>	false<br>undefined<br>1<br>ReferenceError	{}	490	2025-06-29 08:54:00.346	2025-06-29 08:54:00.346
cmchfo2hx00dn13mpcvhu8a36	"y(lh#bJ[^$"	Простая	СБОРНИК::JS ПРАКТИКА::Строки	JS ПРАКТИКА	Строки	/**<br> * На вход дана строка символов. Надо вернуть ""сжатую"" строку.<br> * Для каждой группы последовательно повторяющихся символов:<br> * - если длина группы равна 1, то добавляется только этот символ<br> * - иначе добавьте символ, за которым следует длина группы.<br><br>console.log(compress('AAA'));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // '3A'<br>console.log(compress('ABCBD'));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 'ABCBD'<br>console.log(compress('AAABBOPP'));&nbsp;&nbsp; // '3A2BO2P'<br> */	"<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">compress</span><span style=""color:#ffba00;font-weight:bold;"">(</span>input<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>input<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#96d57d;"">""""</span><span style=""color:#bcbec4;"">;  </span><span style=""color:#7a7e85;"">// Handle empty string case<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>result <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#96d57d;"">""""</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Result to accumulate the compressed string<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>count <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">;   </span><span style=""color:#7a7e85;"">// Counter for the number of consecutive characters<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#7a7e85;"">    // Iterate over the string characters<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">for </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>i <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">; </span>i <span style=""color:#80a1ff;font-weight:bold;"">&lt; </span>input<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length</span><span style=""color:#bcbec4;"">; </span>i<span style=""color:#80a1ff;font-weight:bold;"">++</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>input<span style=""color:#fff83c;"">[</span>i<span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span>input<span style=""color:#fff83c;"">[</span>i <span style=""color:#80a1ff;font-weight:bold;"">- </span><span style=""color:#2aacb8;"">1</span><span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>count<span style=""color:#80a1ff;font-weight:bold;"">++</span><span style=""color:#bcbec4;"">;  </span><span style=""color:#7a7e85;"">// Increment the count if the current char is the same as the last<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">else </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#7a7e85;"">// Append the compressed part for the previous character group<br></span><span style=""color:#7a7e85;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>count <span style=""color:#80a1ff;font-weight:bold;"">&gt; </span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span>result <span style=""color:#80a1ff;font-weight:bold;"">+= </span>count <span style=""color:#80a1ff;font-weight:bold;"">+ </span>input<span style=""color:#fff83c;"">[</span>i <span style=""color:#80a1ff;font-weight:bold;"">- </span><span style=""color:#2aacb8;"">1</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">else </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span>result <span style=""color:#80a1ff;font-weight:bold;"">+= </span>input<span style=""color:#fff83c;"">[</span>i <span style=""color:#80a1ff;font-weight:bold;"">- </span><span style=""color:#2aacb8;"">1</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>count <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">;  </span><span style=""color:#7a7e85;"">// Reset count for the new character group<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    }<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#7a7e85;"">// Handle the last group of characters<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>count <span style=""color:#80a1ff;font-weight:bold;"">&gt; </span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span>result <span style=""color:#80a1ff;font-weight:bold;"">+= </span>count <span style=""color:#80a1ff;font-weight:bold;"">+ </span>input<span style=""color:#fff83c;"">[</span>input<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length </span><span style=""color:#80a1ff;font-weight:bold;"">- </span><span style=""color:#2aacb8;"">1</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">else </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span>result <span style=""color:#80a1ff;font-weight:bold;"">+= </span>input<span style=""color:#fff83c;"">[</span>input<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length </span><span style=""color:#80a1ff;font-weight:bold;"">- </span><span style=""color:#2aacb8;"">1</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>result<span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}	{}	491	2025-06-29 08:54:00.358	2025-06-29 08:54:00.358
cmchfo2ia00do13mpwvm0a7uk	N@F3mSpUwL	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f258bcc2fbf24ea62f38f3a46fcf77ccac929c94.jpg">	undefin	{}	492	2025-06-29 08:54:00.37	2025-06-29 08:54:00.37
cmchfo2ik00dp13mpykm3lvfp	J|Y~vT%D$-	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1c204ca104d07833db157ab76b146769777e9d48.jpg">	"Error: ooops!	{}	493	2025-06-29 08:54:00.381	2025-06-29 08:54:00.381
cmchfo2iv00dq13mp0vzwsi9k	B&vewvzZ*o	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-945b7d6079ec0ef116ab597eef0ad2a1863431b3.jpg">	reject&nbsp;<br><br><li>Функция <code>foo()</code> возвращает промис, который сразу же отклоняется с ошибкой <code>""reject""</code>.</li><li>В методе <code>then</code> вторым аргументом указан <code>console.log</code>. Так как промис отклонен, вызывается именно этот обработчик ошибок.</li><li>Ошибка, переданная в <code>console.log</code>, напрямую выводится в консоль как <code>""reject""</code>.</li><li>Метод <code>catch</code> в данном случае не срабатывает, так как ошибка уже была обработана в <code>then</code>.</li>	{}	494	2025-06-29 08:54:00.392	2025-06-29 08:54:00.392
cmchfo2j700dr13mpqrpelxai	OSPy-]xI2{	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b2a61c676e178e669a5b6521ad2e538a8e61c1a2.jpg">	i is not defined&nbsp;	{}	495	2025-06-29 08:54:00.403	2025-06-29 08:54:00.403
cmchfo2ji00ds13mp5a1b5gie	G8v:LEB9t5	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a9dffad12141607ba187f8dab35a47e98dc038c4.jpg">	'name: Ivan, post: manager'	{}	496	2025-06-29 08:54:00.415	2025-06-29 08:54:00.415
cmchfo2jt00dt13mpgtz23g59	ky:+z$OL$S	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9cc25a14c8bd1d3e5e0b79505fc4686ae642490a.jpg">&nbsp;отрефакторить		{}	497	2025-06-29 08:54:00.425	2025-06-29 08:54:00.425
cmchfo2k400du13mpghp91wbe	tOo9rfRd+d	Простая	СБОРНИК::JS ПРАКТИКА::Объекты	JS ПРАКТИКА	Объекты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ba780e9669f1849b3b2d9308edb778511c3609b9.jpg">написать функцию суммирования value		{}	498	2025-06-29 08:54:00.437	2025-06-29 08:54:00.437
cmchfo2kf00dv13mppd0w3gzl	v8h~.:MQ2t	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-069d5b8be5b1138f3fd80f7e7905a9c9404d4bda.jpg">		{}	499	2025-06-29 08:54:00.448	2025-06-29 08:54:00.448
cmchfo2kr00dw13mp2n75qn9p	cI4}.)&dKI	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-cd86faf451cdd1708304d78dc4eacae86ad5d0ed.jpg">		{}	500	2025-06-29 08:54:00.46	2025-06-29 08:54:00.46
cmchfo2l200dx13mp5bhu2vom	Ia2~N[$k!,	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6dbcae7f762fb0eaa4ee6a5aeac1b2c63fcb34ea.jpg">		{}	501	2025-06-29 08:54:00.471	2025-06-29 08:54:00.471
cmchfo2lg00dy13mpkrt5mpi3	cp~<0X{p+V	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9441c413b4f373cc87635375baa25255ed140da4.jpg">		{}	502	2025-06-29 08:54:00.484	2025-06-29 08:54:00.484
cmchfo2lr00dz13mpzfdifa6m	"swU{+h9Y#O"	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bdb2654210b86fa4a88c3c683ef09fc408d373f9.jpg">		{}	503	2025-06-29 08:54:00.496	2025-06-29 08:54:00.496
cmchfo2m500e013mpe7ng1lnp	hh=rv7OJ.M	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bfdfaa2f90fc45d006de30aa58ea3c26a6aab1bf.jpg">		{}	504	2025-06-29 08:54:00.51	2025-06-29 08:54:00.51
cmchfo2mg00e113mpndm742ea	Kf6Ec5N~Xq	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bafaa28f736cc704304fd3c8771f5d137bd8e038.jpg">что выведет		{}	505	2025-06-29 08:54:00.521	2025-06-29 08:54:00.521
cmchfo2mr00e213mpgemkbw6x	th(Xw~rDT}	Простая	СБОРНИК::JS ПРАКТИКА::Кастомные методы и функции	JS ПРАКТИКА	Кастомные методы и функции	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f74493dce2fa45fa9c486f2678e90dc2b0e958e2.jpg">		{}	506	2025-06-29 08:54:00.532	2025-06-29 08:54:00.532
cmchfo2n100e313mp62axwuc5	l>i9{As}D!	Простая	СБОРНИК::JS ПРАКТИКА::Кастомные методы и функции	JS ПРАКТИКА	Кастомные методы и функции	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-da72407bf93719a9e08cbb783080b7f9637e23cc.jpg">		{}	507	2025-06-29 08:54:00.541	2025-06-29 08:54:00.541
cmchfo2nc00e413mpibep1pp7	p!xi,3S9_x	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-36e2b648bb09be01a04c901023cd7f345e71658a.jpg">		{}	508	2025-06-29 08:54:00.553	2025-06-29 08:54:00.553
cmchfo2nn00e513mpzgwe8agj	k*+-PqS_%H	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6c43dff07c057a8e81b48389e43b43bee35650bd.jpg">		{}	509	2025-06-29 08:54:00.564	2025-06-29 08:54:00.564
cmchfo2nz00e613mp2x298bqo	uNN</|%=R;	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-724074d42f194b216376e85d5a218548f77375f8.jpg">		{}	510	2025-06-29 08:54:00.575	2025-06-29 08:54:00.575
cmchfo2oa00e713mpxqn219s4	"im3#n%H@xS"	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-c1cc2710e300851ff128eda2c3953a6a824b0fd9.jpg">		{}	511	2025-06-29 08:54:00.587	2025-06-29 08:54:00.587
cmchfo2ok00e813mp4dccx4si	fkYT5.Mf0%	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3e14a2d7165def34f00d5b82b771ec64aa594b6c.jpg">		{}	512	2025-06-29 08:54:00.597	2025-06-29 08:54:00.597
cmchfo2pj00eb13mpik64wnbv	rA7-~x7F%M	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-78a023bad569a10f75981861c0ecc15f4026f713.jpg">	'Promise 1'&nbsp;<br>'Promise 2'&nbsp;<br><br>'final'&nbsp;<br><br>'Promise 3' <br><br>'Promise 4' <br><br>'setTimeout 1' <br><br>'setTimeout 3' <br><br>'setTimeout 2'	{}	515	2025-06-29 08:54:00.632	2025-06-29 08:54:00.632
cmchfo2pu00ec13mp2xjgtc6o	d74v>_3QEQ	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	let obj = {<br>&nbsp;&nbsp;&nbsp; name: 'David',<br>&nbsp;&nbsp;&nbsp; getName() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; console.log(`name is: ${this.name}`);<br>&nbsp;&nbsp;&nbsp; },<br>};<br><br>let fn = obj.getName;<br><br>fn();<br><br>Что выведет	undefined	{}	516	2025-06-29 08:54:00.643	2025-06-29 08:54:00.643
cmchfo2q600ed13mpywetrkka	Hwk*gS|:}F	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	let obj = {<br>&nbsp;&nbsp;&nbsp; name: 'David',<br>&nbsp;&nbsp;&nbsp; getName() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; console.log(`name is: ${this.name}`);<br>&nbsp;&nbsp;&nbsp; },<br>};<br><br>let fn = obj.getName;<br><br>fn();<br><br>Как исправить чтоб работало&nbsp;	let obj = {<br>&nbsp;&nbsp;&nbsp; name: 'David',<br>&nbsp;&nbsp;&nbsp; getName() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; console.log(`name is: ${this.name}`);<br>&nbsp;&nbsp;&nbsp; },<br>};<br><br>let fn = obj.getName.bind(obj);<br><br>fn(); // Теперь это будет работать, и выведется ""name is: David""	{}	517	2025-06-29 08:54:00.655	2025-06-29 08:54:00.655
cmchfo2qg00ee13mp6we59vo0	j_?O`wom[t	Простая	СБОРНИК::TS Практика	TS Практика	\N	Создание дженерика для получения свойства объекта	<div><pre>function getProperty&lt;T, K&gt;(obj: T, key: keyof T) {<br>    return obj[key];<br>}<br></pre></div>	{}	518	2025-06-29 08:54:00.665	2025-06-29 08:54:00.665
cmchfo2qr00ef13mpz8mnpm37	"jF_`nZK9#s"	Простая	СБОРНИК::TS Практика	TS Практика	\N	Сделать все свойства интерфейса необязательными<br><br><div><pre><span style=""color: rgb(255, 146, 42);"">interface</span> Todo <span style=""color: rgb(174, 109, 255);"">{<br>    </span><span style=""color: rgb(255, 87, 236);"">title</span><span style=""color: rgb(128, 161, 255);"">: </span><span style=""color: rgb(255, 146, 42);"">string</span><span style=""color: rgb(188, 190, 196);"">;<br>    </span><span style=""color: rgb(255, 87, 236);"">description</span><span style=""color: rgb(128, 161, 255);"">: </span><span style=""color: rgb(255, 146, 42);"">string</span><span style=""color: rgb(188, 190, 196);"">;</span><br><span style=""color: rgb(174, 109, 255);"">}</span></pre></div>	type OptionalTodo = Partial&lt;Todo&gt;;	{}	519	2025-06-29 08:54:00.676	2025-06-29 08:54:00.676
cmchfo2r300eg13mplpwn9n7p	I`cwTJs]0>	Простая	СБОРНИК::TS Практика	TS Практика	\N	Сделать свойства интерфейса неизменяемыми<br><br><div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">interface </span><span style=""color:#fafafa;"">Todo </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">title</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">description</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div>	interface Todo <br>{<br>&nbsp; &nbsp; &nbsp; readonly title: string;<br>&nbsp; &nbsp; &nbsp; readonly description: string;<br>&nbsp;}	{}	520	2025-06-29 08:54:00.688	2025-06-29 08:54:00.688
cmchfo2rf00eh13mp7a18qrfp	d`KY_!1Ea$	Простая	СБОРНИК::TS Практика	TS Практика	\N	<div><pre><span style=""color:#7a7e85;"">// fix this ts code<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">Alien </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">species</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">    </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">    </span><span style=""color:#ff57ec;"">planet</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">    </span><span style=""color:#ff57ec;"">isAlien</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">true<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">Human </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">planet</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'Earch'<br></span><span style=""color:#96d57d;"">    </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">    </span><span style=""color:#ff57ec;"">species</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'human'<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">Person </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fafafa;"">Alien </span><span style=""color:#80a1ff;font-weight:bold;"">| </span><span style=""color:#fafafa;"">Human<br></span><span style=""color:#fafafa;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">checkAlien</span><span style=""color:#ffba00;font-weight:bold;"">(</span>person<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">Person</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>person<span style=""color:#bcbec4;"">.</span>isAlien<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>person<span style=""color:#bcbec4;"">.</span>isAlien<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">else </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'Not an alien'</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span></pre></div><br>	<div><pre><br><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">Alien </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">species</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">planet</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">isAlien</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">true</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">Human </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">planet</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'Earth'</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Исправлена опечатка<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">species</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'human'</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">isAlien</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">false</span><span style=""color:#bcbec4;"">;  </span><span style=""color:#7a7e85;"">// Добавлен дискриминатор<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">Person </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fafafa;"">Alien </span><span style=""color:#80a1ff;font-weight:bold;"">| </span><span style=""color:#fafafa;"">Human</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">checkAlien</span><span style=""color:#ffba00;font-weight:bold;"">(</span>person<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">Person</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>person<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">isAlien</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'Is an alien'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">else </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'Not an alien'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div>	{}	521	2025-06-29 08:54:00.699	2025-06-29 08:54:00.699
cmchfo2rr00ei13mpu0rtaxbe	MTDIBag+|K	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<div><pre><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">2</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">1000</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">3</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">4</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">5</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)()</span><span style=""color:#bcbec4;"">;</span></pre></div>	<div><pre><span style=""color:#7a7e85;"">1 4 5 3 2</span></pre></div>	{"() ./api; ./styles.css; ./TodoItem; ./types; <div <input = []); [filter",[todos,"api api.getTodos(); api.updateTodo(id","App() async await boolean) className=App> className=filter completed const data default export fetchTodos fetchTodos(); filter]); filteredTodos from function handleUpdateTodo import number","onChange= placeholder=Type return search setFilter] setTodos(data); setTodos] to Todo todo.title.toLowerCase().includes(filter.toLowerCase()))","TodoItem todos.filter(todo type=text useCallback useCallback((id useEffect useEffect(() useMemo(() useState(); useState<Todo[]>([]); { } }); }","}; вызывался Добавлен зависимостей","Использование компонента массив монтирования один после пустой раз ререндеров чтобы"}	522	2025-06-29 08:54:00.711	2025-06-29 08:54:00.711
cmchfo2wi00ew13mpl8zzjnee	NFBC~Y0<@~	Простая	СБОРНИК::JS ПРАКТИКА::Классы	JS ПРАКТИКА	Классы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-47eb7b9744ae89ef1e1a03c86e78f2cc2c05c611.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a3114abe7766ef2422e762ed71e39c34f4a3fa9b.jpg">		{}	536	2025-06-29 08:54:00.882	2025-06-29 08:54:00.882
cmchfo2s400ej13mp44mri4sg	B0F*,Gr&Fb	Простая	СБОРНИК::JS ПРАКТИКА::Кастомные методы и функции	JS ПРАКТИКА	Кастомные методы и функции	VK задачи&nbsp;<br><br>1.&nbsp;<br><span style=""white-space: pre-wrap; color: rgb(255, 146, 42); font-weight: bold; font-style: italic;"">export const </span><span style=""white-space: pre-wrap; color: rgb(255, 128, 239); font-style: italic;"">fs </span><span style=""white-space: pre-wrap; color: rgb(128, 161, 255); font-weight: bold;"">= </span><span style=""white-space: pre-wrap; color: rgb(255, 248, 60);"">[</span><div><pre><span style=""color: rgb(255, 248, 60);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir/subdir/../file.txt'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir/subdir/a/b/c/d/file.txt'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir//file.txt'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir////file.txt'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir/'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir/..'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir/./././././file.txt'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir/subdir/../../../file.txt'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir/subdir/../../../subdir/../file.txt'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir1'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir2/subdir1/file1.txt'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir2/subdir1/file2.txt'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir3/subdir1/file2.txt'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir3/subdir2'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(188, 190, 196);"">    </span><span style=""color: rgb(150, 213, 125);"">'/dir3/subdir2/file3.txt'</span><span style=""color: rgb(188, 190, 196);"">,<br></span><span style=""color: rgb(255, 248, 60);"">]</span><span style=""color: rgb(188, 190, 196);"">;</span></pre></div><div>Реализовать функцию <code>canonizePath</code>, которая переделывает путь, нормализуя его следующим образом:</div><ul><li>Схлопывает все последовательные слеши (<code>///</code> превращаются в один <code>/</code>).</li><li>Удаляет <code>..</code>, поднимаясь на уровень выше в иерархии путей.</li><li>Игнорирует все <code>.</code> как ссылки на текущую директорию.</li></ul>2. Используя функцию <code>canonizePath</code> из первой задачи, создать функцию <code>makeDirectoriesTree</code>, которая преобразует список путей в дерево директорий и файлов.&nbsp;<br>3. Отобразить результат функции <code>makeDirectoriesTree</code> в виде дерева, как показано на картинке.<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-8eb61d6f525c6bbbe6ce947008decf6b7f513e3e.jpg"><br>	"1.&nbsp;&nbsp;<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">export function </span><span style=""color:#56a8f5;"">canonizePath</span><span style=""color:#ffba00;font-weight:bold;"">(</span>path<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>arrPath <span style=""color:#80a1ff;font-weight:bold;"">= </span>path<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">split</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'/'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>arrResult <span style=""color:#80a1ff;font-weight:bold;"">= </span>arrPath<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">reduce</span><span style=""color:#ffba00;font-weight:bold;"">((</span>acc<span style=""color:#bcbec4;"">, </span>item<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>item <span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#96d57d;"">'..'</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>acc<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">pop</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;  </span><span style=""color:#7a7e85;"">// Удаляем последний элемент, ""поднимаясь"" на уровень выше<br></span><span style=""color:#7a7e85;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>acc<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">else if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#80a1ff;font-weight:bold;"">!</span><span style=""color:#ffba00;font-weight:bold;"">(</span>item <span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#96d57d;"">'.' </span><span style=""color:#80a1ff;font-weight:bold;"">|| </span>item <span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#96d57d;"">''</span><span style=""color:#ffba00;font-weight:bold;"">)) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>acc<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span>item<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;  </span><span style=""color:#7a7e85;"">// Добавляем элементы, которые не являются '.' или пустыми строками<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>acc<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#96d57d;"">'/' </span><span style=""color:#80a1ff;font-weight:bold;"">+ </span>arrResult<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">join</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'/'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;  </span><span style=""color:#7a7e85;"">// Возвращаем нормализованный путь<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff80ef;font-style:italic;"">fs</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">map</span><span style=""color:#ffba00;font-weight:bold;"">((</span>item<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">canonizePath</span><span style=""color:#ffba00;font-weight:bold;"">(</span>item<span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;	{}	523	2025-06-29 08:54:00.724	2025-06-29 08:54:00.724
cmchfo2sg00ek13mpu4dnkopr	Ba^hrW9$BL	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">data </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[<br></span><span style=""color:#fff83c;"">    </span><span style=""color:#96d57d;"">""index.ts""</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff57ec;"">src</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fff83c;"">[<br></span><span style=""color:#fff83c;"">            </span><span style=""color:#96d57d;"">""index.ts""</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span><span style=""color:#ff57ec;"">ui</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fff83c;"">[<br></span><span style=""color:#fff83c;"">                    </span><span style=""color:#96d57d;"">""index.ts""</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">                    </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                        </span><span style=""color:#ff57ec;"">cards</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fff83c;"">[</span><span style=""color:#96d57d;"">""cards.tsx""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""index.ts""</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">                        </span><span style=""color:#ff57ec;"">wallets</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fff83c;"">[</span><span style=""color:#96d57d;"">""index.ts""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""all-wallets.tsx""</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">                    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">                </span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">myFlat</span><span style=""color:#ffba00;font-weight:bold;"">(</span>arr<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#7a7e85;"">//реализация<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#56a8f5;"">myFlat</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">data</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">// [<br></span><span style=""color:#7a7e85;"">//   ""index.ts"",<br></span><span style=""color:#7a7e85;"">//   ""src/index.ts"",<br></span><span style=""color:#7a7e85;"">//   ""src/ui/index.ts"",<br></span><span style=""color:#7a7e85;"">//   ""src/ui/cards/cards.tsx"",<br></span><span style=""color:#7a7e85;"">//   ""src/ui/cards/index.ts"",<br></span><span style=""color:#7a7e85;"">//   ""src/ui/wallets/index.ts"",<br></span><span style=""color:#7a7e85;"">//   ""src/ui/wallets/all-wallets.tsx""<br></span><span style=""color:#7a7e85;"">// ]</span></pre></div>	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">myFlat</span><span style=""color:#ffba00;font-weight:bold;"">(</span>arr<span style=""color:#bcbec4;"">, </span>prefix <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#96d57d;"">''</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>result <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span>arr<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">forEach</span><span style=""color:#ffba00;font-weight:bold;"">(</span>item <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">typeof </span>item <span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#96d57d;"">'string'</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#7a7e85;"">// Если элемент является строкой, просто добавляем его в результат с префиксом<br></span><span style=""color:#7a7e85;"">            </span>result<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span>prefix <span style=""color:#80a1ff;font-weight:bold;"">+ </span>item<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">else if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">typeof </span>item <span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#96d57d;"">'object'</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#7a7e85;"">// Если элемент является объектом, рекурсивно обходим его свойства<br></span><span style=""color:#7a7e85;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">for </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>key <span style=""color:#ff922a;font-weight:bold;font-style:italic;"">in </span>item<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>newPrefix <span style=""color:#80a1ff;font-weight:bold;"">= </span>prefix <span style=""color:#80a1ff;font-weight:bold;"">+ </span>key <span style=""color:#80a1ff;font-weight:bold;"">+ </span><span style=""color:#96d57d;"">'/'</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">                </span>result <span style=""color:#80a1ff;font-weight:bold;"">= </span>result<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">concat</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">myFlat</span><span style=""color:#ffba00;font-weight:bold;"">(</span>item<span style=""color:#fff83c;"">[</span>key<span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">, </span>newPrefix<span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        }<br></span><span style=""color:#ae6dff;font-weight:bold;"">    }</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>result<span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span></pre></div>	{}	524	2025-06-29 08:54:00.737	2025-06-29 08:54:00.737
cmchfo2ss00el13mprm2xrk6h	icRrrTM]$Y	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-532cbd06b88e93db3e2ccc977f1058ec936d6015.jpg">	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">interface </span><span style=""color:#fafafa;"">SplitResult </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">left</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number</span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">inner</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number</span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">right</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number</span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">splitByPeriod</span><span style=""color:#ffba00;font-weight:bold;"">(</span>points<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number</span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">, </span>periods<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number</span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">SplitResult </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>minPeriod <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff80ef;font-style:italic;"">Math</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">min</span><span style=""color:#ffba00;font-weight:bold;"">(</span>...periods<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>maxPeriod <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff80ef;font-style:italic;"">Math</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">max</span><span style=""color:#ffba00;font-weight:bold;"">(</span>...periods<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>points<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">reduce</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#fafafa;"">SplitResult</span><span style=""color:#80a1ff;font-weight:bold;"">&gt;</span><span style=""color:#ffba00;font-weight:bold;"">((</span>acc<span style=""color:#bcbec4;"">, </span>point<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>point <span style=""color:#80a1ff;font-weight:bold;"">&lt; </span>minPeriod<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>acc<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">left</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span>point<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">else if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>point <span style=""color:#80a1ff;font-weight:bold;"">&gt; </span>maxPeriod<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>acc<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">right</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span>point<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">else </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>acc<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">inner</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span>point<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>acc<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">left</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">inner</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">right</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fff83c;"">[] </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span></pre></div>	{}	525	2025-06-29 08:54:00.748	2025-06-29 08:54:00.748
cmchfo2t400em13mpr0vrhgg8	M.5k5D4de4	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d94a85bae6785316affe52b34f23924fa161828b.jpg"><br>	<div><pre>interface TreeData {<br>    id: string;<br>    value: number;<br>    children?: TreeData[];<br>}<br><br>interface FlatData extends Omit&lt;TreeData, 'children'&gt; {<br>    parent?: string;<br>}<br><br>export const toFlatData = (tree: TreeData, parent?: string): FlatData[] =&gt; {<br>    const result: FlatData[] = [{ id: tree.id, value: tree.value, parent }];<br><br>    if (tree.children) {<br>        tree.children.forEach(child =&gt; {<br>            result.push(...toFlatData(child, tree.id));<br>        });<br>    }<br>    return result;<br>}<br></pre></div>	{}	526	2025-06-29 08:54:00.761	2025-06-29 08:54:00.761
cmchfo2tf00en13mp6m3vwu4o	pK+AyEd_0z	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e041a0a644265aa96b10a79f97fa92993ee1662d.jpg">	да все валидно<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1c3c7509cff1a4b314427968e4ec3ad786bfcdeb.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d0e36ca2f07ace7596088ae966d3d82e336b3ef3.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f4a5054b3291030cf19d0645bdb623043912bf02.jpg">	{}	527	2025-06-29 08:54:00.771	2025-06-29 08:54:00.771
cmchfo2ts00eo13mpnpck7xp4	NXY2HG0k/l	Простая	СБОРНИК::JS ПРАКТИКА::Числа	JS ПРАКТИКА	Числа	<div><pre><span style=""color:#9af064;font-style:italic;"">/**<br></span><span style=""color:#9af064;font-style:italic;""> * Функция, которая принимает число и возвращает его цифры в порядке убывания.<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{number} n </span><span style=""color:#9af064;font-style:italic;"">- Входное число.<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@returns </span><span style=""color:#abadb3;font-style:italic;"">{number} </span><span style=""color:#9af064;font-style:italic;"">- Число, составленное из цифр входного числа в порядке убывания.<br></span><span style=""color:#9af064;font-style:italic;""> */<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span>n<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">// Тесты<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;        </span><span style=""color:#7a7e85;"">// 0<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;        </span><span style=""color:#7a7e85;"">// 1<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">111</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;      </span><span style=""color:#7a7e85;"">// 111<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">15</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;       </span><span style=""color:#7a7e85;"">// 51<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1021</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;     </span><span style=""color:#7a7e85;"">// 2110<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">123456789</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// 987654321<br></span></pre></div>	<div><pre><span style=""color:#9af064;font-style:italic;"">/**<br></span><span style=""color:#9af064;font-style:italic;""> * Функция, которая принимает число и возвращает его цифры в порядке убывания.<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{number} n </span><span style=""color:#9af064;font-style:italic;"">- Входное число.<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@returns </span><span style=""color:#abadb3;font-style:italic;"">{number} </span><span style=""color:#9af064;font-style:italic;"">- Число, составленное из цифр входного числа в порядке убывания.<br></span><span style=""color:#9af064;font-style:italic;""> */<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span>n<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#56a8f5;"">parseInt</span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span>n<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">toString</span><span style=""color:#ffba00;font-weight:bold;"">()  </span><span style=""color:#7a7e85;"">// Преобразовать число в строку<br></span><span style=""color:#7a7e85;"">            </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">split</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">''</span><span style=""color:#ffba00;font-weight:bold;"">)  </span><span style=""color:#7a7e85;"">// Разбить строку на массив цифр<br></span><span style=""color:#7a7e85;"">            </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">sort</span><span style=""color:#ffba00;font-weight:bold;"">((</span>a<span style=""color:#bcbec4;"">, </span>b<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>b <span style=""color:#80a1ff;font-weight:bold;"">- </span>a<span style=""color:#ffba00;font-weight:bold;"">)  </span><span style=""color:#7a7e85;"">// Отсортировать массив в убывающем порядке<br></span><span style=""color:#7a7e85;"">            </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">join</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">''</span><span style=""color:#ffba00;font-weight:bold;"">)  </span><span style=""color:#7a7e85;"">// Объединить массив обратно в строку<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">// Тесты<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;        </span><span style=""color:#7a7e85;"">// 0<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;        </span><span style=""color:#7a7e85;"">// 1<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">111</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;      </span><span style=""color:#7a7e85;"">// 111<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">15</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;       </span><span style=""color:#7a7e85;"">// 51<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1021</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;     </span><span style=""color:#7a7e85;"">// 2110<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">descendingOrder</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">123456789</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// 987654321<br></span></pre></div>	{}	528	2025-06-29 08:54:00.785	2025-06-29 08:54:00.785
cmchfo34900fi13mpamj3yj8b	n-8>SFbagS	Простая	СБОРНИК::JS QUIZ::Объекты	JS QUIZ	Объекты	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#ff80ef;font-style:italic;"">b </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#ff80ef;font-style:italic;"">c</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">b</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">b </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">c </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff80ef;font-style:italic;"">b</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">c</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">b </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">2</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'b.b ='</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">b</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">b</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// ?<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'c.b ='</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">c</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">b</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// ?<br></span><span style=""color:#7a7e85;""><br></span></pre></div>	[ 'b.b =', 2 ]&nbsp;<br><br>[ 'c.b =', 2 ]	{}	558	2025-06-29 08:54:01.162	2025-06-29 08:54:01.162
cmchfo2u400ep13mprrflyht8	zTC$qt~OdE	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	/**<br> * 3. Дан массив целых чисел nums и целое число target, верните индексы этих двух чисел так, чтобы их сумма равнялась target.<br>Считаем, что в массиве только одна пара чисел, которые в сумме дают target<br>Вы можете возвращать ответы в любом порядке.<br>const nums = [0,1,2,5,3]; 4<br>[1, 4] - индексы<br><br>Граничные значения:<br>2 &lt;= nums.length &lt;= 10^4<br>-10^9 &lt;= nums[i] &lt;= 10^9<br>-10^9 &lt;= target &lt;= 10^9<br>Только один правильный ответ существует.<br><br> */<br>/**<br> * @param {number[]} nums<br> * @param {number} target<br> * @return {number[]}<br> */<br><br><br>const nums = [0,1,8,5,3]; <br>const target = 4;<br><br>var twoSum = function(nums, target) {<br><br>};<br><br>const res = twoSum(nums, target)<br><br>console.log(res);	<div><pre><span style=""color:#9af064;font-style:italic;"">/**<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{number[]} nums<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">* </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{number} target<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">* </span><span style=""color:#67a37c;font-style:italic;"">@return </span><span style=""color:#abadb3;font-style:italic;"">{number[]}<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">*/<br></span><span style=""color:#9af064;font-style:italic;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">nums </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[</span><span style=""color:#2aacb8;"">0</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">8</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">5</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">3</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">target </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">4</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#56a8f5;"">twoSum </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function</span><span style=""color:#ffba00;font-weight:bold;"">(</span>nums<span style=""color:#bcbec4;"">, </span>target<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#7a7e85;"">// Создаем объект для хранения разности target и текущего элемента<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>numMap <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">for </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>i <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">0</span><span style=""color:#bcbec4;"">; </span>i <span style=""color:#80a1ff;font-weight:bold;"">&lt; </span>nums<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length</span><span style=""color:#bcbec4;"">; </span>i<span style=""color:#80a1ff;font-weight:bold;"">++</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>complement <span style=""color:#80a1ff;font-weight:bold;"">= </span>target <span style=""color:#80a1ff;font-weight:bold;"">- </span>nums<span style=""color:#fff83c;"">[</span>i<span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#7a7e85;"">// Проверяем, есть ли нужная разность в объекте<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>numMap<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">hasOwnProperty</span><span style=""color:#ffba00;font-weight:bold;"">(</span>complement<span style=""color:#ffba00;font-weight:bold;"">)) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#fff83c;"">[</span>numMap<span style=""color:#fff83c;"">[</span>complement<span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">, </span>i<span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#7a7e85;"">// Сохраняем текущий элемент и его индекс в объект<br></span><span style=""color:#7a7e85;"">        </span>numMap<span style=""color:#fff83c;"">[</span>nums<span style=""color:#fff83c;"">[</span>i<span style=""color:#fff83c;"">]] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>i<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#7a7e85;"">// Если пара не найдена, возвращаем пустой массив (но по условию задачи это невозможно)<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">res </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">twoSum</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">nums</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">target</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">res</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// [1, 4]<br></span></pre></div>	{}	529	2025-06-29 08:54:00.797	2025-06-29 08:54:00.797
cmchfo2uh00eq13mpej96lqjb	NuYXmH`EWU	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">var </span><span style=""color:#ff80ef;font-style:italic;"">currentCity </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#96d57d;"">""Екатеринбург""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">sayWelcome</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""Welcome to"" </span><span style=""color:#80a1ff;font-weight:bold;"">+ </span><span style=""color:#ff80ef;font-style:italic;"">currentCity</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">var </span>currentCity <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#96d57d;"">""Москва""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#56a8f5;"">sayWelcome</span><span style=""color:#ffba00;font-weight:bold;"">()<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">1000</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span></pre></div>	Welcome toЕкатеринбург<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4f099b5b0a5664492435a0ce97997f966ae3d8e2.jpg">	{}	530	2025-06-29 08:54:00.81	2025-06-29 08:54:00.81
cmchfo2us00er13mp4cep3iaq	"A4`#nr{:oi"	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<div><pre><span style=""color:#7a7e85;"">// Что будет выведено в консоль<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#ff80ef;font-style:italic;"">clickCount </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">0</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">document</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">addEventListener</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""click""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">clickCount</span><span style=""color:#80a1ff;font-weight:bold;"">++</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""clicked""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">clickCount</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">while </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">clickCount </span><span style=""color:#80a1ff;font-weight:bold;"">!== </span><span style=""color:#2aacb8;"">5</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""wait""</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""5 clicks!""</span><span style=""color:#ffba00;font-weight:bold;"">)</span></pre></div>	Бесконечный цикл while&nbsp;<br><br>Как исправить :&nbsp;<br><div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#ff80ef;font-style:italic;"">clickCount </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">0</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">document</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">addEventListener</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""click""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">clickCount</span><span style=""color:#80a1ff;font-weight:bold;"">++</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""clicked""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">clickCount</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">clickCount </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#2aacb8;"">5</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""5 clicks!""</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span></pre></div>	{}	531	2025-06-29 08:54:00.821	2025-06-29 08:54:00.821
cmchfo2v400es13mpilg34no1	Hz(L~ZEa<&	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">var </span><span style=""color:#ff80ef;font-style:italic;"">whatIsTruthy </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[</span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">'dfd'</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""0""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ae6dff;font-weight:bold;"">{}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">''</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">NaN</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">true</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">false</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">0</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">Infinity</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">null</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">undefined</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">whatIsTruthy</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">filter</span><span style=""color:#ffba00;font-weight:bold;"">(</span>item <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>item<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span></pre></div>	8<br><br>Когда мы вызываем <code>.filter(item =&gt; item)</code> на массиве <code>whatIsTruthy</code>, мы оставляем только те элементы, которые являются truthy. Затем <code>.length</code> считает количество таких элементов. В результате в консоль будет выведено число <code>8</code>, так как в массиве <code>whatIsTruthy</code> ровно восемь элементов, которые оцениваются как truthy.	{}	532	2025-06-29 08:54:00.833	2025-06-29 08:54:00.833
cmchfo2vg00et13mpmxflzg4g	GzxyK5F4DI	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">2</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""a""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">a</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">b </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">b </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">2</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""b""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">b</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span></pre></div>	const неользя переназначить<br>['a', 2] - а вот let можно&nbsp;	{}	533	2025-06-29 08:54:00.845	2025-06-29 08:54:00.845
cmchfo2vt00eu13mpdjiejcpw	EY[~|;|7rh	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<div><pre><span style=""color:#7a7e85;"">// Что будет выведено в консоль<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">doAsync</span><span style=""color:#ffba00;font-weight:bold;"">(</span>x<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return new </span><span style=""color:#56a8f5;"">Promise</span><span style=""color:#ffba00;font-weight:bold;"">((</span>resolve<span style=""color:#bcbec4;"">, </span>reject<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>x<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>resolve<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">2</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">else </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>reject<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    }</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">0<br></span><span style=""color:#2aacb8;""><br></span><span style=""color:#56a8f5;"">doAsync</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">false</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>x <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>x<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>e <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>e<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;""><br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">a</span><span style=""color:#ffba00;font-weight:bold;"">)</span></pre></div>	catch не прописан, поэтому 0&nbsp;	{}	534	2025-06-29 08:54:00.858	2025-06-29 08:54:00.858
cmchfo2w500ev13mpv55y79r0	Dcbe41[@p=	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<div style=""background-color:#1a1f30;color:#ffffff""><pre><span style=""color:#2aacb8;"">7.<br></span><span style=""color:#7a7e85;"">// Что будет выведено в консоль<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">showFullName</span><span style=""color:#ffba00;font-weight:bold;"">(</span>firstName<span style=""color:#bcbec4;"">, </span>lastName<span style=""color:#bcbec4;"">, </span>...rest<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#96d57d;"">`</span>$<span style=""color:#ae6dff;font-weight:bold;"">{</span>firstName<span style=""color:#ae6dff;font-weight:bold;"">} </span>$<span style=""color:#ae6dff;font-weight:bold;"">{</span>lastName<span style=""color:#ae6dff;font-weight:bold;"">}</span>$<span style=""color:#ae6dff;font-weight:bold;"">{</span>rest<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length </span><span style=""color:#80a1ff;font-weight:bold;"">? </span><span style=""color:#96d57d;"">` - </span>$<span style=""color:#ae6dff;font-weight:bold;"">{</span>rest<span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#96d57d;"">` </span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">""""</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#96d57d;"">`<br></span><span style=""color:#96d57d;"">    </span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#56a8f5;"">showFullName</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""Екатерина""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""II""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""императрица""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""Всероссийская""</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span></pre></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-37330707affa338c7a8de6169aafb6d30ec70d38.jpg">	{}	535	2025-06-29 08:54:00.87	2025-06-29 08:54:00.87
cmchfo2wu00ex13mpqigbvr0i	uUjP8(jco>	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-505f5bee22fdd8aec242db67efe458e971455a8e.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a7dce9f615143c69851e04f74975643d00b4d6cf.jpg">	<h3>Что происходит при клике:</h3><ol><li>Клик по <code>div</code> вызывает изменение состояния через <code>setState(true)</code>.</li><li>Изменение состояния в <code>App</code> приводит к перерисовке, включая вызовы <code>cb</code> в <code>Child1</code> и <code>Child2</code>, что затем выводит в консоль <code>1</code> и <code>2</code>.<br><br><div><pre><span style=""color: rgb(255, 146, 42);""><i><b>import </b></i></span>React<span style=""color: rgb(188, 190, 196);"">, </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#56a8f5;"">useState</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">useCallback </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""react""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">Child1 </span><span style=""color: rgb(128, 161, 255);""><b>= </b></span>React<span style=""color: rgb(188, 190, 196);"">.</span><span style=""color:#56a8f5;"">memo</span><span style=""color:#ffba00;font-weight:bold;"">((</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>cb <span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span>cb<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">p</span><span style=""color:#d5b778;"">&gt;</span>1<span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">p</span><span style=""color:#d5b778;"">&gt;</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">Child2 </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>cb <span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span>cb<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">2</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">p</span><span style=""color:#d5b778;"">&gt;</span>2<span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">p</span><span style=""color:#d5b778;"">&gt;</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">App </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#fff83c;"">[</span>_<span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">setState</span><span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">useState</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">false</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>cb <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">useCallback</span><span style=""color:#ffba00;font-weight:bold;"">((</span>index<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>index<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">div </span><span style=""color:#bcbec4;"">onClick</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#56a8f5;"">setState</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">true</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">Child1 </span><span style=""color:#bcbec4;"">cb</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>cb<span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">/&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">Child2 </span><span style=""color:#bcbec4;"">cb</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>cb<span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">/&gt;<br></span><span style=""color:#d5b778;"">        &lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">    </span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">export default </span><span style=""color:#56a8f5;"">App</span><span style=""color:#bcbec4;"">;<br></span></pre></div></li></ol>	{}	537	2025-06-29 08:54:00.895	2025-06-29 08:54:00.895
cmchfo2x600ey13mp8uu6qivn	b><0)XdNzv	Простая	СБОРНИК::REACT Практика::Кастомные хуки	REACT Практика	Кастомные хуки	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2abc9e7797f2b6804ccbc4f6fe7f702102609938.jpg"><br><div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">export function </span><span style=""color:#56a8f5;"">useClickOutside</span><span style=""color:#ffba00;font-weight:bold;"">(</span>callback<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">void</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#7a7e85;"">// your code here<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span></pre></div>	<div><pre><div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#fafafa;"">React</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#56a8f5;"">useRef</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">useEffect </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">'react'<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">export function </span><span style=""color:#56a8f5;"">useClickOutside</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#507874;"">T </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">extends </span><span style=""color:#fafafa;"">HTMLElement</span><span style=""color:#80a1ff;font-weight:bold;"">&gt;</span><span style=""color:#ffba00;font-weight:bold;"">(</span>callback<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">void</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">React</span><span style=""color:#bcbec4;"">.</span><span style=""color:#fafafa;"">RefObject</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#507874;"">T</span><span style=""color:#80a1ff;font-weight:bold;"">&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>ref <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">useRef</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#507874;"">T</span><span style=""color:#80a1ff;font-weight:bold;"">&gt;</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">null</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;""><br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#56a8f5;"">useEffect</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">click </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>target <span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">Event</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">void </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>target <span style=""color:#80a1ff;font-weight:bold;"">&amp;&amp; </span>ref<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">current </span><span style=""color:#80a1ff;font-weight:bold;"">&amp;&amp; !</span>ref<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">current</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">contains</span><span style=""color:#ffba00;font-weight:bold;"">(</span>target <span style=""color:#ff922a;font-weight:bold;font-style:italic;"">as </span><span style=""color:#fafafa;"">Node</span><span style=""color:#ffba00;font-weight:bold;"">)) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>callback<span style=""color:#ffba00;font-weight:bold;"">()<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    }<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">document</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">addEventListener</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'mousedown'</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">click</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;""><br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff80ef;font-style:italic;"">document</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">removeEventListener</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'mousedown'</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">click</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>ref<br><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div></pre></div>	{}	538	2025-06-29 08:54:00.907	2025-06-29 08:54:00.907
cmchfo2xj00ez13mpvglj73h3	"u`#2@N]q/8"	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	const set = new Set([1, 1, 2, 3, 3, 3, 4, 5]);<br><br>console.log(set);	Set { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5 }	{}	539	2025-06-29 08:54:00.92	2025-06-29 08:54:00.92
cmchfo2xv00f013mp3e08bjif	xE4nOAmR.5	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-13aaad1c830e328b1f728eea70a1db98d0f4362c.jpg">		{}	540	2025-06-29 08:54:00.931	2025-06-29 08:54:00.931
cmchfo2y800f113mpqi8stdey	n{)p{hy8S5	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e9916bd5c2b1f34b2d67f9d53e4791dad0986e4e.jpg">		{}	541	2025-06-29 08:54:00.944	2025-06-29 08:54:00.944
cmchfo2yj00f213mpyykk8xa0	MHn86Zx/Xh	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0c0cd9e604855357ad0cd845f0ad382220678f06.jpg">		{}	542	2025-06-29 08:54:00.956	2025-06-29 08:54:00.956
cmchfo2yw00f313mpy9vlh5oz	/5G{^=n=-	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-9890285b744b36d0b392c2ab0031a2da0be0b3e8.jpg">		{}	543	2025-06-29 08:54:00.969	2025-06-29 08:54:00.969
cmchfo2z700f413mpximek9le	fNMrj~Yl8!	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1fff2baea7bea45f598f2b099d19ea7b37407739.jpg">написать кастомный OptRecord	<div><pre>type PersonList = 'Max' | 'Alex' | 'Boris';<br><br>type PersonProps = {<br>    age: number;<br>    height: number;<br>};<br><br>// Правильный тип для mans с обязательными свойствами<br>let mans: Record&lt;PersonList, PersonProps&gt; = {<br>    Alex: { age: 23, height: 170 },<br>    Max: { age: 20, height: 175 },<br>    Boris: { age: 19, height: 180 },<br>};<br><br>// Определяем тип OptRecord, который делает ключи и вложенные свойства опциональными<br>type OptRecord&lt;K extends keyof any, T&gt; = {<br>    [P in K]?: Partial&lt;T&gt;;<br>};<br><br>// Используем OptRecord для создания объекта с опциональными свойствами и вложенными объектами<br>let mans2: OptRecord&lt;PersonList, PersonProps&gt; = {<br>    Alex: { age: 23, height: 170 },<br>    Max: { height: 175 },<br>    // Boris отсутствует, что допустимо<br>};<br><br>console.log(mans);<br>console.log(mans2);<br></pre></div>	{}	544	2025-06-29 08:54:00.98	2025-06-29 08:54:00.98
cmchfo2zi00f513mp05fqrulr	ecOz@Y?U3x	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img alt=""Загруженное изображение"" src=""file-REgB4bWEnZb2emrv8Gyvethc.png""><br>отрефакторить	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">someFunc </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>props<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ff80ef;font-style:italic;"">Math</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">floor</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">Math</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">random</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#80a1ff;font-weight:bold;"">* </span>props<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">number</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">LazyInit </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>number <span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#fff83c;"">[</span>count<span style=""color:#bcbec4;"">, </span>setCount<span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>useState<span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#56a8f5;"">someFunc</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>number <span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;&gt;<br></span><span style=""color:#d5b778;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">{</span>count<span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">button </span><span style=""color:#bcbec4;"">onClick</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>setCount<span style=""color:#ffba00;font-weight:bold;"">((</span>prevCount<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>prevCount <span style=""color:#80a1ff;font-weight:bold;"">- </span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                </span>Decrement<br>            <span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">button</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">        &lt;/&gt;<br></span><span style=""color:#d5b778;"">    </span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#7a7e85;"">// Пример использования компонента LazyInit с переданным числовым prop<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">App </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">        &lt;</span><span style=""color:#fc6969;"">LazyInit </span><span style=""color:#bcbec4;"">number</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#2aacb8;"">10</span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">/&gt;<br></span><span style=""color:#d5b778;"">    &lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">export default </span><span style=""color:#56a8f5;"">App</span><span style=""color:#bcbec4;"">;<br></span></pre></div>	{}	545	2025-06-29 08:54:00.99	2025-06-29 08:54:00.99
cmchfo2zu00f613mpy891qmj1	f8pjr8cox!	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0c594d3f3f1d605550c20914c77403fb122aeeae.jpg">	<div><pre><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-dc7cadd1a8111fae43572679efea5401255fe4dd.jpg"><span style=""color:#ff922a;font-weight:bold;font-style:italic;""><br></span></pre><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#fafafa;"">React</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#56a8f5;"">useState</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">useCallback</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">memo </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""react""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">ParentElement </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#fff83c;"">[</span>count<span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">setCount</span><span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">useState</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>increment <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">useCallback</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#56a8f5;"">setCount</span><span style=""color:#ffba00;font-weight:bold;"">((</span>prevCount<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>prevCount <span style=""color:#80a1ff;font-weight:bold;"">+ </span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;&gt;<br></span><span style=""color:#d5b778;"">            </span>Parent: <span style=""color:#ae6dff;font-weight:bold;"">{</span>count<span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">br </span><span style=""color:#d5b778;"">/&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">SubElement </span><span style=""color:#bcbec4;"">clicker</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>increment<span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#bcbec4;"">count</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>count<span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">/&gt;<br></span><span style=""color:#d5b778;"">        &lt;/&gt;<br></span><span style=""color:#d5b778;"">    </span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">SubElement </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">memo</span><span style=""color:#ffba00;font-weight:bold;"">((</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>clicker<span style=""color:#bcbec4;"">, </span>count <span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;&gt;<br></span><span style=""color:#d5b778;"">            </span>Sub: <span style=""color:#ae6dff;font-weight:bold;"">{</span>count<span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">br </span><span style=""color:#d5b778;"">/&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">button </span><span style=""color:#bcbec4;"">onClick</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>clicker<span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#d5b778;"">&gt;</span>Increment<span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">button</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">        &lt;/&gt;<br></span><span style=""color:#d5b778;"">    </span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">export default </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;&lt;</span><span style=""color:#fc6969;"">ParentElement </span><span style=""color:#d5b778;"">/&gt;&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;</span><span style=""color:#bcbec4;"">;<br></span></pre></div>	{}	546	2025-06-29 08:54:01.003	2025-06-29 08:54:01.003
cmchfo30600f713mp7jg7catk	BoquJ4jAev	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-aa73b7f44c80c7a6af08c7d1b11ea8eb7de21851.jpg">	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">async function </span><span style=""color:#56a8f5;"">printIndicesWithDelay</span><span style=""color:#ffba00;font-weight:bold;"">(</span>arr<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">for </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>i <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">0</span><span style=""color:#bcbec4;"">; </span>i <span style=""color:#80a1ff;font-weight:bold;"">&lt; </span>arr<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length</span><span style=""color:#bcbec4;"">; </span>i<span style=""color:#80a1ff;font-weight:bold;"">++</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">await new </span><span style=""color:#56a8f5;"">Promise</span><span style=""color:#ffba00;font-weight:bold;"">(</span>resolve <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(</span>resolve<span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">1000</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>i<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">// Пример использования:<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">array </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[</span><span style=""color:#96d57d;"">'a'</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">'b'</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">'c'</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">'d'</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#56a8f5;"">printIndicesWithDelay</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">array</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span></pre></div>	{}	547	2025-06-29 08:54:01.015	2025-06-29 08:54:01.015
cmchfo30i00f813mpqfa1l4sj	C$!zV?d$r=	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fd9c5c26c94bc4dd65518dd88f5325518777f546.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0dc4def94b40845781cacac40eeeb40fa919fefd.jpg">	{}	548	2025-06-29 08:54:01.027	2025-06-29 08:54:01.027
cmchfo30u00f913mpo8rj21gc	I{AkBI6miz	Простая	СБОРНИК::TS Практика	TS Практика	\N	<div><pre><span style=""color:#7a7e85;"">// Определить, есть ли ошибка<br></span>type <span style=""color:#fafafa;"">A</span><span style=""color:#6f737a;font-weight:bold;"">&lt;</span><span style=""color:#6f737a;"">T</span><span style=""color:#6f737a;font-weight:bold;"">&gt; </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{</span>...<span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">///<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">interface </span><span style=""color:#fafafa;"">A </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">foo</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">interface </span><span style=""color:#fafafa;"">A </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">bar</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">///<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">interface </span><span style=""color:#fafafa;"">A </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">bar</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">interface </span><span style=""color:#fafafa;"">A </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">bar</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">///<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">A </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">bar</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">B </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fafafa;"">A </span><span style=""color:#80a1ff;font-weight:bold;"">&amp; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">bar</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span></pre></div>	<div><pre><div><pre><span style=""color:#7a7e85;"">// Пример 1: Обобщенный тип (синтаксически верен, но не завершен)<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">A</span><span style=""color:#6f737a;font-weight:bold;"">&lt;</span><span style=""color:#6f737a;"">T</span><span style=""color:#6f737a;font-weight:bold;"">&gt; </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#7a7e85;"">/* добавьте свою реализацию */ </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#7a7e85;"">// Пример 2: Корректное объединение интерфейсов<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">interface </span><span style=""color:#fafafa;"">B </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">foo</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">interface </span><span style=""color:#fafafa;"">B </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">bar</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">// Пример 3: Исправленный конфликт типов в интерфейсах<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">interface </span><span style=""color:#fafafa;"">C </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">bar</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string </span><span style=""color:#80a1ff;font-weight:bold;"">| </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">// Пример 4: Пересечение типов (синтаксически корректен, но вызовет ошибку при использовании)<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">D </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">bar</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">E </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fafafa;"">D </span><span style=""color:#80a1ff;font-weight:bold;"">&amp; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">bar</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">// Демонстрация использования исправленных примеров:<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#7a7e85;"">// Пример 1: Обобщенный тип<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">MyType</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#507874;"">T</span><span style=""color:#80a1ff;font-weight:bold;"">&gt; = </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">value</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#507874;"">T</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">myStringType</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">MyType</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#80a1ff;font-weight:bold;"">&gt; = </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">value</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">""Hello"" </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">myNumberType</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">MyType</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number</span><span style=""color:#80a1ff;font-weight:bold;"">&gt; = </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">value</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">42 </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#7a7e85;"">// Пример 2: Объединенные интерфейсы<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">objB</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">B </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">foo</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">""Hello""</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">bar</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">""World""<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#7a7e85;"">// Пример 3: Интерфейс с объединенными типами<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">objC1</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">C </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">bar</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">""Hello""<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">objC2</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">C </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">bar</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">42<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#7a7e85;"">// Пример 4: Пересечение типов (будет ошибка при использовании)<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">objE</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">E </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">bar</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">42 </span><span style=""color:#7a7e85;"">// Ошибка: Тип 'number' не может быть назначен для типа 'never'<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span></pre></div></pre></div>	{}	549	2025-06-29 08:54:01.039	2025-06-29 08:54:01.039
cmchfo31700fa13mp7q5rgr9n	A_k1oUZ?oS	Простая	СБОРНИК::REACT Практика::Кастомные хуки	REACT Практика	Кастомные хуки	<div><pre><span style=""color:#7a7e85;"">// 1. Допишите код хука и его типы:<br></span><span style=""color:#7a7e85;"">    </span><span style=""font-weight: bold; font-style: italic; color: rgb(255, 146, 42);"">type </span>UseArrayActions<span style=""color: rgb(250, 250, 250);""> </span><span style=""font-weight: bold; color: rgb(128, 161, 255);"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff57ec;"">push</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ffba00;font-weight:bold;"">(</span>item<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">void</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff57ec;"">removeByIndex</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ffba00;font-weight:bold;"">(</span>index<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">void<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">export function </span><span style=""color:#56a8f5;"">useArray</span><span style=""color:#ffba00;font-weight:bold;"">(</span>initialValue<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">value </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color: rgb(128, 161, 255);""><b>&amp; </b></span>UseArrayActions <span style=""color: rgb(174, 109, 255);""><b>{<br></b></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#fff83c;"">[</span>value<span style=""color:#bcbec4;"">, </span>setValue<span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>useState<span style=""color:#ffba00;font-weight:bold;"">(</span>initialValue<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">push </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#6f737a;"">item</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>setValue<span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">removeByIndex </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#6f737a;"">index</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>setValue<span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>value<span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">push</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">removeByIndex </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div>	<div><pre><b><span style=""color: rgb(255, 146, 42);""><i>import </i></span><span style=""color: rgb(174, 109, 255);"">{ </span></b><span style=""color: rgb(86, 168, 245);"">useState </span><b><span style=""color: rgb(174, 109, 255);"">} </span><span style=""color: rgb(255, 146, 42);""><i>from </i></span></b><span style=""color: rgb(150, 213, 125);"">""react""</span><span style=""color: rgb(188, 190, 196);"">;</span><br><br><span style=""color: rgb(255, 146, 42);""><i><b>type </b></i></span>UseArrayActions<span style=""color: rgb(128, 161, 255);""><b>&lt;</b></span><span style=""color: rgb(80, 120, 116);"">T</span><b><span style=""color: rgb(128, 161, 255);"">&gt; = </span><span style=""color: rgb(174, 109, 255);"">{<br>    </span></b><span style=""color: rgb(255, 87, 236);"">push</span><b><span style=""color: rgb(128, 161, 255);"">: </span><span style=""color: rgb(255, 186, 0);"">(</span></b>item<span style=""color: rgb(128, 161, 255);""><b>: </b></span><span style=""color: rgb(80, 120, 116);"">T</span><span style=""color: rgb(255, 186, 0);""><b>) </b></span><i><span style=""color: rgb(172, 108, 255);"">=&gt; </span><span style=""color: rgb(255, 146, 42);""><b>void</b></span></i><span style=""color: rgb(188, 190, 196);"">;<br>    </span><span style=""color: rgb(255, 87, 236);"">removeByIndex</span><b><span style=""color: rgb(128, 161, 255);"">: </span><span style=""color: rgb(255, 186, 0);"">(</span></b>index<b><span style=""color: rgb(128, 161, 255);"">: </span><span style=""color: rgb(255, 146, 42);""><i>number</i></span><span style=""color: rgb(255, 186, 0);"">) </span></b><i><span style=""color: rgb(172, 108, 255);"">=&gt; </span><span style=""color: rgb(255, 146, 42);""><b>void</b></span></i><span style=""color: rgb(188, 190, 196);"">;</span><br><span style=""color: rgb(174, 109, 255);""><b>}</b></span><span style=""color: rgb(188, 190, 196);"">;</span><br><br><span style=""color: rgb(255, 146, 42);""><i><b>export function </b></i></span><span style=""color: rgb(86, 168, 245);"">useArray</span><span style=""color: rgb(128, 161, 255);""><b>&lt;</b></span><span style=""color: rgb(80, 120, 116);"">T</span><b><span style=""color: rgb(128, 161, 255);"">&gt;</span><span style=""color: rgb(255, 186, 0);"">(</span></b>initialValue<span style=""color: rgb(128, 161, 255);""><b>: </b></span><span style=""color: rgb(80, 120, 116);"">T</span><span style=""color: rgb(255, 248, 60);"">[]</span><b><span style=""color: rgb(255, 186, 0);"">)</span><span style=""color: rgb(128, 161, 255);"">: </span><span style=""color: rgb(174, 109, 255);"">{ </span></b><span style=""color: rgb(255, 87, 236);"">value</span><span style=""color: rgb(128, 161, 255);""><b>: </b></span><span style=""color: rgb(80, 120, 116);"">T</span><span style=""color: rgb(255, 248, 60);"">[] </span><span style=""color: rgb(174, 109, 255);""><b>} </b></span><span style=""color: rgb(128, 161, 255);""><b>&amp;</b></span> UseArrayAction<span style=""color: rgb(250, 250, 250);"">s</span><span style=""color: rgb(128, 161, 255);""><b>&lt;</b></span><span style=""color: rgb(80, 120, 116);"">T</span><b><span style=""color: rgb(128, 161, 255);"">&gt; </span><span style=""color: rgb(174, 109, 255);"">{<br>    </span><span style=""color: rgb(255, 146, 42);""><i>const </i></span></b><span style=""color: rgb(255, 248, 60);"">[</span>value<span style=""color: rgb(188, 190, 196);"">, </span><span style=""color: rgb(86, 168, 245);"">setValue</span><span style=""color: rgb(255, 248, 60);"">] </span><span style=""color: rgb(128, 161, 255);""><b>= </b></span><span style=""color: rgb(86, 168, 245);"">useState</span><span style=""color: rgb(128, 161, 255);""><b>&lt;</b></span><span style=""color: rgb(80, 120, 116);"">T</span><span style=""color: rgb(255, 248, 60);"">[]</span><b><span style=""color: rgb(128, 161, 255);"">&gt;</span><span style=""color: rgb(255, 186, 0);"">(</span></b>initialValue<span style=""color: rgb(255, 186, 0);""><b>)</b></span><span style=""color: rgb(188, 190, 196);"">;<br><br>    </span><span style=""color: rgb(255, 146, 42);""><i><b>const </b></i></span><span style=""color: rgb(86, 168, 245);"">push </span><b><span style=""color: rgb(128, 161, 255);"">= </span><span style=""color: rgb(255, 186, 0);"">(</span></b>item<span style=""color: rgb(128, 161, 255);""><b>: </b></span><span style=""color: rgb(80, 120, 116);"">T</span><span style=""color: rgb(255, 186, 0);""><b>) </b></span><span style=""color: rgb(172, 108, 255);""><i>=&gt; </i></span><span style=""color: rgb(86, 168, 245);"">setValue</span><span style=""color: rgb(255, 186, 0);""><b>((</b></span>prev<span style=""color: rgb(255, 186, 0);""><b>) </b></span><span style=""color: rgb(172, 108, 255);""><i>=&gt; </i></span><span style=""color: rgb(255, 248, 60);"">[</span>...prev<span style=""color: rgb(188, 190, 196);"">, </span>item<span style=""color: rgb(255, 248, 60);"">]</span><span style=""color: rgb(255, 186, 0);""><b>)</b></span><span style=""color: rgb(188, 190, 196);"">;<br><br>    </span><span style=""color: rgb(255, 146, 42);""><i><b>const </b></i></span><span style=""color: rgb(86, 168, 245);"">removeByIndex </span><b><span style=""color: rgb(128, 161, 255);"">= </span><span style=""color: rgb(255, 186, 0);"">(</span></b>index<b><span style=""color: rgb(128, 161, 255);"">: </span><span style=""color: rgb(255, 146, 42);""><i>number</i></span><span style=""color: rgb(255, 186, 0);"">) </span></b><span style=""color: rgb(172, 108, 255);""><i>=&gt; </i></span><span style=""color: rgb(174, 109, 255);""><b>{<br>        </b></span><span style=""color: rgb(86, 168, 245);"">setValue</span><span style=""color: rgb(255, 186, 0);""><b>((</b></span>prev<span style=""color: rgb(255, 186, 0);""><b>) </b></span><span style=""color: rgb(172, 108, 255);""><i>=&gt; </i></span>prev<span style=""color: rgb(188, 190, 196);"">.</span><span style=""color: rgb(147, 206, 255);"">filter</span><span style=""color: rgb(255, 186, 0);""><b>((</b></span>_<span style=""color: rgb(188, 190, 196);"">, </span>i<span style=""color: rgb(255, 186, 0);""><b>) </b></span><span style=""color: rgb(172, 108, 255);""><i>=&gt; </i></span>i <span style=""color: rgb(128, 161, 255);""><b>!== </b></span>index<span style=""color: rgb(255, 186, 0);""><b>))</b></span><span style=""color: rgb(188, 190, 196);"">;<br>    </span><span style=""color: rgb(174, 109, 255);""><b>}</b></span><span style=""color: rgb(188, 190, 196);"">;<br><br>    </span><b><span style=""color: rgb(255, 146, 42);""><i>return </i></span><span style=""color: rgb(174, 109, 255);"">{ </span></b>value<span style=""color: rgb(188, 190, 196);"">, </span><span style=""color: rgb(86, 168, 245);"">push</span><span style=""color: rgb(188, 190, 196);"">, </span><span style=""color: rgb(86, 168, 245);"">removeByIndex </span><span style=""color: rgb(174, 109, 255);""><b>}</b></span><span style=""color: rgb(188, 190, 196);"">;</span><br><span style=""color: rgb(174, 109, 255);""><b>}<br></b></span></pre></div>	{}	550	2025-06-29 08:54:01.051	2025-06-29 08:54:01.051
cmchfo31j00fb13mpfl3uk1bn	s9{.r_5Y_7	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<div><pre><br><span style=""color:#7a7e85;"">// В каких случаях может выполниться “something code”?<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">checkIntervalMs </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">2000</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">toleranceMs </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">2000</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#ff80ef;font-style:italic;"">lastCheckStamp</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">null</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#56a8f5;"">setInterval</span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">    () </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>now <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">Date</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">now</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">lastCheckStamp </span><span style=""color:#80a1ff;font-weight:bold;"">&amp;&amp; </span>now <span style=""color:#80a1ff;font-weight:bold;"">- </span><span style=""color:#ff80ef;font-style:italic;"">lastCheckStamp </span><span style=""color:#80a1ff;font-weight:bold;"">&gt; </span><span style=""color:#ff80ef;font-style:italic;"">checkIntervalMs </span><span style=""color:#80a1ff;font-weight:bold;"">+ </span><span style=""color:#ff80ef;font-style:italic;"">toleranceMs</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#7a7e85;"">//something code<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff80ef;font-style:italic;"">lastCheckStamp </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>now<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff80ef;font-style:italic;"">checkIntervalMs<br></span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;</span></pre></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-409c6e0b2250f80c030bad85fcdd7abe42e96388.jpg"><br>	{}	551	2025-06-29 08:54:01.064	2025-06-29 08:54:01.064
cmchfo3gl00gg13mpfqf9p0uo	"wZ3<E#RkNg"	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-4deeafcdac603061b8c620012cecaf2827f98079.jpg">	"<ol><li><div><pre>Рекурсия	{}	592	2025-06-29 08:54:01.606	2025-06-29 08:54:01.606
cmchfo31y00fc13mp09hh6849	v/|+x|JQ@E	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7075841d4174120d2fdc5c33e3f2ac87c22cca13.jpg"><br><div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#ff80ef;font-style:italic;"">person </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'Anton'</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">age</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">37</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">location</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'Yekaterinburg'<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">get_info </span><span style=""color:#80a1ff;font-weight:bold;"">= &lt;</span><span style=""color:#507874;"">T </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">extends keyof typeof </span><span style=""color:#ff80ef;font-style:italic;"">person</span><span style=""color:#80a1ff;font-weight:bold;"">&gt;</span><span style=""color:#ffba00;font-weight:bold;"">(</span>key<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#507874;"">T</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string </span><span style=""color:#80a1ff;font-weight:bold;"">| </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ff80ef;font-style:italic;"">person</span><span style=""color:#fff83c;"">[</span>key<span style=""color:#fff83c;"">]<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span></pre></div>	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#ff80ef;font-style:italic;"">person </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'Anton'</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">age</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">37</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">location</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'Yekaterinburg'<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">get_info </span><span style=""color:#80a1ff;font-weight:bold;"">= &lt;</span><span style=""color:#507874;"">T </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">extends keyof typeof </span><span style=""color:#ff80ef;font-style:italic;"">person</span><span style=""color:#80a1ff;font-weight:bold;"">&gt;</span><span style=""color:#ffba00;font-weight:bold;"">(</span>key<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#507874;"">T</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">typeof </span><span style=""color:#ff80ef;font-style:italic;"">person</span><span style=""color:#fff83c;"">[</span><span style=""color:#507874;"">T</span><span style=""color:#fff83c;"">] </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ff80ef;font-style:italic;"">person</span><span style=""color:#fff83c;"">[</span>key<span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">// Примеры использования<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">get_info</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'name'</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// 'Anton'<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">get_info</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'age'</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// 37<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">get_info</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'location'</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// 'Yekaterinburg'<br></span></pre></div>	{}	552	2025-06-29 08:54:01.078	2025-06-29 08:54:01.078
cmchfo32b00fd13mpcgqy1rni	rwlv;-T},M	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<div><pre><span style=""color:#7a7e85;"">/*<br></span><span style=""color:#7a7e85;"">    Есть реализация компонента, от которого требуется 2 вещи:<br></span><span style=""color:#7a7e85;"">    1) выводить текущее значение вертикального скролла окна (window.scrollY)<br></span><span style=""color:#7a7e85;"">    2) после монтирования асинхронно получить число и вывести его<br></span><span style=""color:#7a7e85;"">    Нужно найти, объяснить и исправить как можно больше проблем в реализации<br></span><span style=""color:#7a7e85;"">*/<br></span><span style=""color:#7a7e85;""><br></span><div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#fafafa;"">React</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#56a8f5;"">useEffect</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">useState </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""react""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">fetchRandomNumber </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">Math</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">random</span><span style=""color:#ffba00;font-weight:bold;"">())</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">NumberAndScroll </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#fff83c;"">[</span>number<span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">setNumber</span><span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">useState</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">null</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#fff83c;"">[</span>scroll<span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">setScroll</span><span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">useState</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">window</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">scrollY</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#56a8f5;"">useEffect</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">handleScroll </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#56a8f5;"">setScroll</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">window</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">scrollY</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff80ef;font-style:italic;"">window</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">addEventListener</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'scroll'</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">handleScroll</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#7a7e85;"">// Clean up the event listener on component unmount<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">window</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">removeEventListener</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'scroll'</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">handleScroll</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#56a8f5;"">useEffect</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">async </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>randomNumber <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">await </span><span style=""color:#56a8f5;"">fetchRandomNumber</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#56a8f5;"">setNumber</span><span style=""color:#ffba00;font-weight:bold;"">(</span>randomNumber<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt; </span>Number: <span style=""color:#ae6dff;font-weight:bold;"">{</span>number<span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt; </span>Scroll: <span style=""color:#ae6dff;font-weight:bold;"">{</span>scroll<span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">        &lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">    </span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">export default </span><span style=""color:#56a8f5;"">NumberAndScroll</span><span style=""color:#bcbec4;"">;<br></span></pre></div></pre></div>	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#fafafa;"">React</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#56a8f5;"">useState</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">useEffect </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">'react'</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">fetchRandomNumber </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">Math</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">random</span><span style=""color:#ffba00;font-weight:bold;"">())</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">NumberAndScroll </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#fff83c;"">[</span>number<span style=""color:#bcbec4;"">, </span>setNumber<span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">useState</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">null</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#fff83c;"">[</span>scroll<span style=""color:#bcbec4;"">, </span>setScroll<span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">useState</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">window</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">scrollY</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#56a8f5;"">useEffect</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">fetchNumber </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">async </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>randomNumber <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">await </span><span style=""color:#56a8f5;"">fetchRandomNumber</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span>setNumber<span style=""color:#ffba00;font-weight:bold;"">(</span>randomNumber<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#56a8f5;"">fetchNumber</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#56a8f5;"">useEffect</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">handleScroll </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>setScroll<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">window</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">scrollY</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff80ef;font-style:italic;"">window</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">addEventListener</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'scroll'</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">handleScroll</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff80ef;font-style:italic;"">window</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">removeEventListener</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'scroll'</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">handleScroll</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;</span>Number: <span style=""color:#ae6dff;font-weight:bold;"">{</span>number<span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;</span>Scroll: <span style=""color:#ae6dff;font-weight:bold;"">{</span>scroll<span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">        &lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">    </span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">export default </span><span style=""color:#56a8f5;"">NumberAndScroll</span><span style=""color:#bcbec4;"">;<br></span></pre></div>	{}	553	2025-06-29 08:54:01.091	2025-06-29 08:54:01.091
cmchfo32n00fe13mpibaf19l8	PKUA8oxDn}	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<pre><div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">car </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'BMW'</span><span style=""color:#bcbec4;"">, </span><span style=""color:#7a7e85;"">// Название машины<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff57ec;"">year</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'2005'</span><span style=""color:#bcbec4;"">, </span><span style=""color:#7a7e85;"">// Год выпуска<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#93ceff;"">getName</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">name</span><span style=""color:#bcbec4;"">; <br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#93ceff;"">getYear</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">year <br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">getName </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff80ef;font-style:italic;"">car</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">getName</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Сохраняем метод getName<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#93ceff;"">getYear </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff80ef;font-style:italic;"">car</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">getYear</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Сохраняем метод getYear<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#ff80ef;font-style:italic;"">car</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">getName</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// <br></span><span style=""color:#ff80ef;font-style:italic;"">car</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">getYear</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// <br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#56a8f5;"">getName</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">//<br></span><span style=""color:#93ceff;"">getYear</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// </span></pre></div></pre>	<pre><span style=""color: rgb(86, 168, 245);"">getName</span><span style=""color: rgb(255, 186, 0); font-weight: bold;"">()</span><span style=""color: rgb(188, 190, 196);"">; </span><span style=""color: rgb(122, 126, 133);"">// undefined<br></span><span style=""color: rgb(147, 206, 255);"">getYear</span><span style=""color: rgb(255, 186, 0); font-weight: bold;"">()</span><span style=""color: rgb(188, 190, 196);"">; </span><span style=""color: rgb(122, 126, 133);"">// undefined</span></pre>	{}	554	2025-06-29 08:54:01.103	2025-06-29 08:54:01.103
cmchfo32z00ff13mpq5ah5eoy	jDrr8$)|un	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">getArr</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>arr <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Создаем пустой массив<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>i <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">0</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Инициализируем счетчик<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">while</span><span style=""color:#ffba00;font-weight:bold;"">(</span>i <span style=""color:#80a1ff;font-weight:bold;"">&lt; </span><span style=""color:#2aacb8;"">10</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#7a7e85;"">// Цикл от 0 до 9<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#56a8f5;"">func </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>i<span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Возвращает текущее значение i<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span>arr<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">func</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Добавляем функцию в массив<br></span><span style=""color:#7a7e85;"">        </span>i<span style=""color:#80a1ff;font-weight:bold;"">++</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Увеличиваем счетчик<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>arr<span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Возвращаем массив<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#ff80ef;font-style:italic;"">arr </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">getArr</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Вызываем функцию и сохраняем результат<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">arr</span><span style=""color:#fff83c;"">[</span><span style=""color:#2aacb8;"">0</span><span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">())</span><span style=""color:#bcbec4;"">; </span><span style=""color:#5394ec;"">// ??</span></pre></div>	<div><pre><span style=""color:#7a7e85;"">// ОТВЕТ: `console.log(arr[0]());` вернет `10`, так как все функции в массиве `arr` замкнуты на одно и то же значение переменной `i`, которая равна `10` к моменту выполнения.</span></pre></div>	{}	555	2025-06-29 08:54:01.115	2025-06-29 08:54:01.115
cmchfo33b00fg13mpx1lckefp	q%~g,p<V_;	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	<img alt=""Загруженное изображение"" src=""file-BDzSA3BFS2SztW157pWJjmwi.png"">	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#ff80ef;font-style:italic;"">loading </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">true</span><span style=""color:#bcbec4;"">;<br></span>fetchData<span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>data <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>processData<span style=""color:#ffba00;font-weight:bold;"">(</span>data<span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">catch</span><span style=""color:#ffba00;font-weight:bold;"">(</span>err <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>processError<span style=""color:#ffba00;font-weight:bold;"">(</span>err<span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">loading </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">false</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span></pre></div><br><br>	{}	556	2025-06-29 08:54:01.128	2025-06-29 08:54:01.128
cmchfo33o00fh13mp47gq4kdy	"i|LZy#G`>u"	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bae2b8e279fa35d4d7cc0aaf5db7dcd5a36ec2ae.jpg">	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d96f6ac869d1e8358f01170f52ae48cea6ead01e.jpg"><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bfab7d9702eb4fa025d862a28d5df4d04e684c57.jpg"><br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-03065085913df435ff3e2848cd876c03bf87dbe7.jpg">	{}	557	2025-06-29 08:54:01.141	2025-06-29 08:54:01.141
cmchfo34p00fj13mp7yjouaj1	x8|GWXHI6v	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<div><pre><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">new </span><span style=""color:#56a8f5;"">Promise</span><span style=""color:#ffba00;font-weight:bold;"">((</span>resolve<span style=""color:#bcbec4;"">, </span>reject<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>resolve<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">2</span><span style=""color:#ffba00;font-weight:bold;"">)))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff80ef;font-style:italic;"">a</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>res <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">3</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">4</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">5</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span></pre></div>	1 2 5 3 4	{}	559	2025-06-29 08:54:01.178	2025-06-29 08:54:01.178
cmchfo35100fk13mpppmwm8zl	Q~260>U^@x	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">var </span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">var </span><span style=""color:#ff80ef;font-style:italic;"">b </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">var </span><span style=""color:#ff80ef;font-style:italic;"">c </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#96d57d;"">'1'</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">var </span><span style=""color:#ff80ef;font-style:italic;"">d </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">1.0</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">var </span><span style=""color:#ff80ef;font-style:italic;"">f </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">1.0000000000000001</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">== </span><span style=""color:#ff80ef;font-style:italic;"">b</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">== </span><span style=""color:#ff80ef;font-style:italic;"">c</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#ff80ef;font-style:italic;"">c</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">== </span><span style=""color:#ff80ef;font-style:italic;"">d</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#ff80ef;font-style:italic;"">d</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">== </span><span style=""color:#ff80ef;font-style:italic;"">f</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span></pre></div>	true&nbsp;<br>true&nbsp;<br>false&nbsp;<br>true&nbsp;<br>true&nbsp;<br>true&nbsp;<br>	{}	560	2025-06-29 08:54:01.19	2025-06-29 08:54:01.19
cmchfo35f00fl13mpcch0bqzf	QeBGM!sD-k	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">fn </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>person<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>person <span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'amy' </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#96d57d;"">'hey amy'</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#96d57d;"">'hey arnold'</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#56a8f5;"">fn</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'amy' </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;</span></pre></div><br>Исправь функцию чтобы было хей арнольд<br>	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">fn </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>person<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>person<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">name </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#96d57d;"">'amy'</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#96d57d;"">'hey amy'</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#96d57d;"">'hey arnold'</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">fn</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'amy' </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// hey amy<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">fn</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'arnold' </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// hey arnold<br></span></pre></div>	{}	561	2025-06-29 08:54:01.203	2025-06-29 08:54:01.203
cmchfo35r00fm13mphsj86gry	LkhmZVj8V=	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<pre><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">2</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">3</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">4</span><span style=""color:#ffba00;font-weight:bold;"">)))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">5</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">6</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">7</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;""><br></span><br></pre>	<pre><span style=""color: rgb(122, 126, 133);"">//1 7 3 5 2 6 4</span></pre>	{}	562	2025-06-29 08:54:01.216	2025-06-29 08:54:01.216
cmchfo36g00fn13mph0og1civ	KiuI|;U%m,	Простая	СБОРНИК::TS Практика	TS Практика	\N	type A = Record&lt;number, number&gt;;<br><br>type B = {<br>&nbsp; [key: number]: number;<br>}<br><br>зачем нам рекорд, в чем разница&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d4bb518a78006a358f0929d5b9e64322f9289ea1.jpg"><br>	{}	563	2025-06-29 08:54:01.24	2025-06-29 08:54:01.24
cmchfo36x00fo13mpmxj7kaq8	E~I{jrjFaH	Простая	СБОРНИК::TS Практика	TS Практика	\N	type A = { foo: boolean };<br>type B = { bar: boolean };<br><br>type C = A | B;<br>type D = A &amp; B;<br><br>в чем разница&nbsp;	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-71f2abe3eed952474d86b9327108657f31608544.jpg">	{}	564	2025-06-29 08:54:01.257	2025-06-29 08:54:01.257
cmchfo37c00fp13mppbw77pnj	"sneJY$#h,J"	Простая	СБОРНИК::TS Практика	TS Практика	\N	type E&lt;T&gt; = T extends boolean ? string : never;<br>type F = E&lt;boolean&gt;; // string<br>// type F = E&lt;number&gt;; // never<br><br>чем будет равен тип F	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-deb5a76895b665da86bf2f2b5766e050492bd4b1.jpg">	{}	565	2025-06-29 08:54:01.273	2025-06-29 08:54:01.273
cmchfo37p00fq13mpep8xtro2	i2B{Pll8;q	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-41f5a39d119b4639e161982751fdff58cd61f756.jpg">	type A = { foo: boolean };<br>type B = { bar: number };<br><br>type C = A | B;<br><br>// Определяем функцию с использованием условного типа и infer<br>function fn&lt;T extends C&gt;(data: T): T extends { foo: infer R } ? R : T extends { bar: infer R } ? R : never {<br>&nbsp; if ('foo' in data) {<br>&nbsp;&nbsp;&nbsp; return (data as A).foo as any;<br>&nbsp; }<br>&nbsp; if ('bar' in data) {<br>&nbsp;&nbsp;&nbsp; return (data as B).bar as any;<br>&nbsp; }<br>&nbsp; throw new Error(""Invalid type"");<br>}<br><br>const a: A = { foo: true };<br>const b: B = { bar: 42 };<br><br>const c = fn(a); // c: boolean<br>const d = fn(b); // d: number<br><br>console.log(c); // true<br>console.log(d); // 42	{}	566	2025-06-29 08:54:01.285	2025-06-29 08:54:01.285
cmchfo38200fr13mpmakn8cp1	PR9,OC1ih.	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<div><pre><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'start'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'timeout'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">new </span><span style=""color:#56a8f5;"">Promise</span><span style=""color:#ffba00;font-weight:bold;"">((</span>resolve<span style=""color:#bcbec4;"">, </span>reject<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise constructor'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; <br></span><span style=""color:#bcbec4;"">    </span>reject<span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise'</span><span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">catch</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise1'</span><span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">catch</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise2'</span><span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise3'</span><span style=""color:#ffba00;font-weight:bold;"">)) <br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise4'</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'final'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;""><br></span></pre></div>	"<div><pre><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'start'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// 1<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'timeout'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// 6<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">new </span><span style=""color:#56a8f5;"">Promise</span><span style=""color:#ffba00;font-weight:bold;"">((</span>resolve<span style=""color:#bcbec4;"">, </span>reject<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise constructor'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// 2<br></span><span style=""color:#7a7e85;"">    </span>reject<span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise'</span><span style=""color:#ffba00;font-weight:bold;"">)) </span><span style=""color:#7a7e85;"">// Не выполнится из-за reject<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">catch</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise1'</span><span style=""color:#ffba00;font-weight:bold;"">)) </span><span style=""color:#7a7e85;"">// 4<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">catch</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise2'</span><span style=""color:#ffba00;font-weight:bold;"">)) </span><span style=""color:#7a7e85;"">// Не выполнится, т.к. ошибка уже обработана<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise3'</span><span style=""color:#ffba00;font-weight:bold;"">)) </span><span style=""color:#7a7e85;"">// 5<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'promise4'</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// 5<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'final'</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// 3	{}	567	2025-06-29 08:54:01.298	2025-06-29 08:54:01.298
cmchfo38f00fs13mpzckkhj2j	td1N;o|UD8	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<div><pre><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">()<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>x <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>x <span style=""color:#80a1ff;font-weight:bold;"">+ </span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>x <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">throw </span>x <span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>x <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>x<span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">catch</span><span style=""color:#ffba00;font-weight:bold;"">(</span>err <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>err<span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>x <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">catch</span><span style=""color:#ffba00;font-weight:bold;"">(</span>err <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>err<span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>x <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>x<span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span></pre></div>	NaN<br>1<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0681ad4c5f6e2a70d3c2dd1d7df08f3d7d87aba1.jpg"><br>	{}	568	2025-06-29 08:54:01.311	2025-06-29 08:54:01.311
cmchfo39300ft13mp1r7d1ah7	eUA`Jf*|F6	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-01d1f86fc8a4f91ed6b289239ca5874c419cf6d1.jpg">что выведет и как исправить	0<br>0<br><br>исправить : создавать новую область видимости для каждой итерации<br><br><div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#ff80ef;font-style:italic;"">i </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">10</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">arr </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">while </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#80a1ff;font-weight:bold;"">--</span><span style=""color:#ff80ef;font-style:italic;"">i</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ffba00;font-weight:bold;"">((</span>i<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff80ef;font-style:italic;"">arr</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>i<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)(</span><span style=""color:#ff80ef;font-style:italic;"">i</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff80ef;font-style:italic;"">arr</span><span style=""color:#fff83c;"">[</span><span style=""color:#2aacb8;"">5</span><span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// 5<br></span><span style=""color:#ff80ef;font-style:italic;"">arr</span><span style=""color:#fff83c;"">[</span><span style=""color:#2aacb8;"">6</span><span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// 4<br></span></pre></div>	{}	569	2025-06-29 08:54:01.335	2025-06-29 08:54:01.335
cmchfo39g00fu13mpchr7tftt	nPNa,x4AOV	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">b </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">p</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'b'</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#93ceff;"">b</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">p</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">a </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">p</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'a'</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#93ceff;"">a</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#93ceff;"">bl </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff80ef;font-style:italic;"">b</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">b</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff80ef;font-style:italic;"">b</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">b</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">//<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ff80ef;font-style:italic;"">a</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">b2 </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#93ceff;"">bl</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff80ef;font-style:italic;"">b</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">b</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">//<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ff80ef;font-style:italic;"">a</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">b2</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">//<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff80ef;font-style:italic;"">a</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">a</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">//</span></pre></div>	b<br>b<br>a<br>	{}	570	2025-06-29 08:54:01.348	2025-06-29 08:54:01.348
cmchfo39t00fv13mpziyxb88g	ABE7<w|WH}	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	<div><pre><span style=""color:#9af064;font-style:italic;"">/** Задача<br></span><span style=""color:#9af064;font-style:italic;""> - Получить список предметов из сервера getServerItemsApi();<br></span><span style=""color:#9af064;font-style:italic;""> - Получить список предметов из стима getSteamItemsApi();<br></span><span style=""color:#9af064;font-style:italic;""> - Отфильтровать список предметов стима оставив предметы, которых нет на сервере<br></span><span style=""color:#9af064;font-style:italic;""> - Добавить новые предметы на сервер saveItemToServerApi (Одновременно можно добавлять не более 2 предметов*);<br></span><span style=""color:#9af064;font-style:italic;""> * Дополнительно<br></span><span style=""color:#9af064;font-style:italic;""><br></span><span style=""color:#9af064;font-style:italic;""> */<br></span><span style=""color:#9af064;font-style:italic;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">mockServerItems </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[</span><span style=""color:#96d57d;"">""Aquamarine Revenge (Minimal Wear)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""Case Hardened (Field-Tested)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""Jet Set (Well-Worn)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""AUG | Daedalus (Field-Tested)""</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">mockSteamItems </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[</span><span style=""color:#96d57d;"">""Aquamarine Revenge (Minimal Wear)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""Case Hardened (Field-Tested)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""Jet Set (Well-Worn)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""AUG | Daedalus (Field-Tested)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""R8 Revolver | Crazy 8 (Factory New)""</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;</span></pre></div>	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">mockServerItems </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[</span><span style=""color:#96d57d;"">""Aquamarine Revenge (Minimal Wear)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""Case Hardened (Field-Tested)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""Jet Set (Well-Worn)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""AUG | Daedalus (Field-Tested)""</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">mockSteamItems </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[</span><span style=""color:#96d57d;"">""Aquamarine Revenge (Minimal Wear)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""Case Hardened (Field-Tested)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""Jet Set (Well-Worn)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""AUG | Daedalus (Field-Tested)""</span><span style=""color:#bcbec4;"">, </span><span style=""color:#96d57d;"">""R8 Revolver | Crazy 8 (Factory New)""</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">saveItemToServerApi</span><span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return new </span><span style=""color:#56a8f5;"">Promise</span><span style=""color:#ffba00;font-weight:bold;"">(</span>resolve <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>resolve<span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">1000</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">getServerItemsApi</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return new </span><span style=""color:#56a8f5;"">Promise</span><span style=""color:#ffba00;font-weight:bold;"">(</span>resolve <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>resolve<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">mockServerItems</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">1000</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">getSteamItemsApi</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return new </span><span style=""color:#56a8f5;"">Promise</span><span style=""color:#ffba00;font-weight:bold;"">(</span>resolve <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>resolve<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">mockSteamItems</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">1000</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">async function </span><span style=""color:#56a8f5;"">parsingNewItems</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">try </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#7a7e85;"">// Получить список предметов из сервера и стима<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#fff83c;"">[</span>serverItems<span style=""color:#bcbec4;"">, </span>steamItems<span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">await </span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">all</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#fff83c;"">[</span><span style=""color:#56a8f5;"">getServerItemsApi</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">, </span><span style=""color:#56a8f5;"">getSteamItemsApi</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'Server Items:'</span><span style=""color:#bcbec4;"">, </span>serverItems<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'Steam Items:'</span><span style=""color:#bcbec4;"">, </span>steamItems<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#7a7e85;"">// Отфильтровать список предметов из стима, оставив предметы, которых нет на сервере<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>newItems <span style=""color:#80a1ff;font-weight:bold;"">= </span>steamItems<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">filter</span><span style=""color:#ffba00;font-weight:bold;"">(</span>item <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#80a1ff;font-weight:bold;"">!</span>serverItems<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">includes</span><span style=""color:#ffba00;font-weight:bold;"">(</span>item<span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'New Items:'</span><span style=""color:#bcbec4;"">, </span>newItems<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#7a7e85;"">// Добавлять новые предметы на сервер, одновременно не более двух предметов<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">for </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>i <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">0</span><span style=""color:#bcbec4;"">; </span>i <span style=""color:#80a1ff;font-weight:bold;"">&lt; </span>newItems<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length</span><span style=""color:#bcbec4;"">; </span>i <span style=""color:#80a1ff;font-weight:bold;"">+= </span><span style=""color:#2aacb8;"">2</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>itemsToSave <span style=""color:#80a1ff;font-weight:bold;"">= </span>newItems<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">slice</span><span style=""color:#ffba00;font-weight:bold;"">(</span>i<span style=""color:#bcbec4;"">, </span>i <span style=""color:#80a1ff;font-weight:bold;"">+ </span><span style=""color:#2aacb8;"">2</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'Saving Items:'</span><span style=""color:#bcbec4;"">, </span>itemsToSave<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">await </span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">all</span><span style=""color:#ffba00;font-weight:bold;"">(</span>itemsToSave<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">map</span><span style=""color:#ffba00;font-weight:bold;"">(</span>item <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#56a8f5;"">saveItemToServerApi</span><span style=""color:#ffba00;font-weight:bold;"">(</span>item<span style=""color:#ffba00;font-weight:bold;"">)))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'Saved Items:'</span><span style=""color:#bcbec4;"">, </span>itemsToSave<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">    } </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">catch </span><span style=""color:#ffba00;font-weight:bold;"">(</span>error<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">error</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'Error:'</span><span style=""color:#bcbec4;"">, </span>error<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">// Запуск функции для проверки работы<br></span><span style=""color:#56a8f5;"">parsingNewItems</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;<br></span></pre></div>	{}	571	2025-06-29 08:54:01.361	2025-06-29 08:54:01.361
cmchfo3a600fw13mp1j1li91s	o*IFh!_&Mb	Простая	СБОРНИК::TS Практика	TS Практика	\N	<div><pre><span style=""color:#7a7e85;"">// типизировать функцию getDetails<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">mappingValues </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#93ceff;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#6f737a;"">value</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>Name<span style=""color:#80a1ff;font-weight:bold;"">: </span>${value}<span style=""color:#bcbec4;"">,<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">User </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">age</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">user</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">User </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'Oleg'</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">age</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">22</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">getDetails</span><span style=""color:#ffba00;font-weight:bold;"">(</span>obj<span style=""color:#bcbec4;"">, </span>mapping<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>result<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">Array</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">key</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#bcbec4;"">; </span><span style=""color:#ff57ec;"">value</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">unknown </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#80a1ff;font-weight:bold;"">&gt; = </span><span style=""color:#fff83c;"">[]<br></span><span style=""color:#fff83c;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">for </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>key <span style=""color:#ff922a;font-weight:bold;font-style:italic;"">in </span>obj<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>value <span style=""color:#80a1ff;font-weight:bold;"">= </span>obj<span style=""color:#fff83c;"">[</span>key<span style=""color:#fff83c;"">]<br></span><span style=""color:#fff83c;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>fn <span style=""color:#80a1ff;font-weight:bold;"">= </span>mapping<span style=""color:#fff83c;"">[</span>key<span style=""color:#fff83c;"">]<br></span><span style=""color:#fff83c;"">        </span>result<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>key<span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">value</span><span style=""color:#80a1ff;font-weight:bold;"">: </span>fn <span style=""color:#80a1ff;font-weight:bold;"">? </span>fn<span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#80a1ff;font-weight:bold;"">: </span>value <span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>result<br><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">details </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">getDetails</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">user</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">mappingValues</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">//решение<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">Mapping</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#507874;"">T</span><span style=""color:#80a1ff;font-weight:bold;"">&gt; = </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#fff83c;"">[</span><span style=""color:#507874;"">K </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">in keyof </span><span style=""color:#507874;"">T</span><span style=""color:#fff83c;"">]</span><span style=""color:#80a1ff;font-weight:bold;"">?: </span><span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#507874;"">T</span><span style=""color:#fff83c;"">[</span><span style=""color:#507874;"">K</span><span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">unknown</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">getDetails</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#507874;"">T </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">extends object</span><span style=""color:#80a1ff;font-weight:bold;"">&gt;</span><span style=""color:#ffba00;font-weight:bold;"">(</span>obj<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#507874;"">T</span><span style=""color:#bcbec4;"">, </span>mapping<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">Mapping</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#507874;"">T</span><span style=""color:#80a1ff;font-weight:bold;"">&gt;</span><span style=""color:#ffba00;font-weight:bold;"">)</span></pre></div>	<div><pre><span style=""color:#7a7e85;"">// Определение типов для функции mapping<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">Mapping</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#507874;"">T</span><span style=""color:#80a1ff;font-weight:bold;"">&gt; = </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#fff83c;"">[</span><span style=""color:#507874;"">K </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">in keyof </span><span style=""color:#507874;"">T</span><span style=""color:#fff83c;"">]</span><span style=""color:#80a1ff;font-weight:bold;"">?: </span><span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#507874;"">T</span><span style=""color:#fff83c;"">[</span><span style=""color:#507874;"">K</span><span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">unknown</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#7a7e85;"">// Определение типа User<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">type </span><span style=""color:#fafafa;"">User </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">age</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">number</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#7a7e85;"">// Создание экземпляра User<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">user</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">User </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'Oleg'</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff57ec;"">age</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">22</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#7a7e85;"">// Создание mapping функции с типизацией<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">mappingValues</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">Mapping</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#fafafa;"">User</span><span style=""color:#80a1ff;font-weight:bold;"">&gt; = </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#93ceff;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#96d57d;"">`Name: </span>$<span style=""color:#ae6dff;font-weight:bold;"">{</span>value<span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#96d57d;"">`</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#7a7e85;"">// Функция getDetails с типизацией<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">getDetails</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#507874;"">T </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">extends object</span><span style=""color:#80a1ff;font-weight:bold;"">&gt;</span><span style=""color:#ffba00;font-weight:bold;"">(</span>obj<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#507874;"">T</span><span style=""color:#bcbec4;"">, </span>mapping<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">Mapping</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#507874;"">T</span><span style=""color:#80a1ff;font-weight:bold;"">&gt;</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">Array</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">key</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">keyof </span><span style=""color:#507874;"">T</span><span style=""color:#bcbec4;"">; </span><span style=""color:#ff57ec;"">value</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">unknown </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#80a1ff;font-weight:bold;"">&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>result<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">Array</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">key</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">keyof </span><span style=""color:#507874;"">T</span><span style=""color:#bcbec4;"">; </span><span style=""color:#ff57ec;"">value</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">unknown </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#80a1ff;font-weight:bold;"">&gt; = </span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">for </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>key <span style=""color:#ff922a;font-weight:bold;font-style:italic;"">in </span>obj<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>value <span style=""color:#80a1ff;font-weight:bold;"">= </span>obj<span style=""color:#fff83c;"">[</span>key<span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>fn <span style=""color:#80a1ff;font-weight:bold;"">= </span>mapping<span style=""color:#fff83c;"">[</span>key<span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span>result<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>key<span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">value</span><span style=""color:#80a1ff;font-weight:bold;"">: </span>fn <span style=""color:#80a1ff;font-weight:bold;"">? </span>fn<span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#80a1ff;font-weight:bold;"">: </span>value <span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>result<span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">// Получение деталей пользователя с использованием mapping<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">details </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">getDetails</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">user</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">mappingValues</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#7a7e85;"">// Вывод результата<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">details</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span></pre></div>	{}	572	2025-06-29 08:54:01.374	2025-06-29 08:54:01.374
cmchfo3ai00fx13mpuo2v56tg	O~?q5a+%6`	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<div><pre>Отрефакторить по максималке<br></pre><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span>React<span style=""color:#bcbec4;"">, </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>useState <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""https://esm.sh/react@18""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span>ReactDOM <span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""https://esm.sh/react-dom@18""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">App</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">getEmployees </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ff80ef;font-style:italic;"">Array</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">from</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">length</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">50 </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ffba00;font-weight:bold;"">(</span>element<span style=""color:#bcbec4;"">, </span>index<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span>index<span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'Employee ' </span><span style=""color:#80a1ff;font-weight:bold;"">+ </span>index<span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ff57ec;"">salary</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">1000 </span><span style=""color:#80a1ff;font-weight:bold;"">+ </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">Math</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">random</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#80a1ff;font-weight:bold;"">* </span><span style=""color:#2aacb8;"">50</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">toFixed</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#fff83c;"">[</span>employees<span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>useState<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">getEmployees</span><span style=""color:#ffba00;font-weight:bold;"">())</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">handleRemove </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>index<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span>employees<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">splice</span><span style=""color:#ffba00;font-weight:bold;"">(</span>index<span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">RemoveButton </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>props<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>onClick <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>props<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">div </span><span style=""color:#bcbec4;"">onClick</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>onClick<span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#d5b778;"">&gt;</span>Remove<span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">div </span><span style=""color:#bcbec4;"">className</span><span style=""color:#96d57d;"">=""wrapper""</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">h1</span><span style=""color:#d5b778;"">&gt; </span>Current employees:<span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">h1</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;""><br></span><span style=""color:#d5b778;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">{</span>employees<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">map</span><span style=""color:#ffba00;font-weight:bold;"">((</span>value<span style=""color:#bcbec4;"">, </span>index<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">                </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">div </span><span style=""color:#bcbec4;"">className</span><span style=""color:#96d57d;"">=""card"" </span><span style=""color:#bcbec4;"">key</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>value<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">salary</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                    &lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                        &lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;</span>name: <span style=""color:#ae6dff;font-weight:bold;"">{</span>value<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">name</span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                        &lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;</span>salary: <span style=""color:#ae6dff;font-weight:bold;"">{</span>value<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">salary</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                    &lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;""><br></span><span style=""color:#d5b778;"">                    &lt;</span><span style=""color:#fc6969;"">RemoveButton </span><span style=""color:#bcbec4;"">onClick</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#56a8f5;"">handleRemove</span><span style=""color:#ffba00;font-weight:bold;"">(</span>index<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">/&gt;<br></span><span style=""color:#d5b778;"">                &lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">            </span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">    </span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span>ReactDOM<span style=""color:#bcbec4;"">.</span>render<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">App </span><span style=""color:#d5b778;"">/&gt;</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff80ef;font-style:italic;"">document</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">getElementById</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""root""</span><span style=""color:#ffba00;font-weight:bold;"">))</span></pre></div>	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span>React<span style=""color:#bcbec4;"">, </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>useState<span style=""color:#bcbec4;"">, </span>useCallback <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""https://esm.sh/react@18""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span>ReactDOM <span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""https://esm.sh/react-dom@18""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">App</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">getEmployees </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ff80ef;font-style:italic;"">Array</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">from</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">length</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">50 </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ffba00;font-weight:bold;"">(</span>element<span style=""color:#bcbec4;"">, </span>index<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span>index<span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'Employee ' </span><span style=""color:#80a1ff;font-weight:bold;"">+ </span>index<span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ff57ec;"">salary</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">1000 </span><span style=""color:#80a1ff;font-weight:bold;"">+ </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">Math</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">random</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#80a1ff;font-weight:bold;"">* </span><span style=""color:#2aacb8;"">50</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">toFixed</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#fff83c;"">[</span>employees<span style=""color:#bcbec4;"">, </span>setEmployees<span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>useState<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">getEmployees</span><span style=""color:#ffba00;font-weight:bold;"">())</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>handleRemove <span style=""color:#80a1ff;font-weight:bold;"">= </span>useCallback<span style=""color:#ffba00;font-weight:bold;"">((</span>id<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span>setEmployees<span style=""color:#ffba00;font-weight:bold;"">((</span>prevEmployees<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>prevEmployees<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">filter</span><span style=""color:#ffba00;font-weight:bold;"">(</span>emp <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>emp<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">id </span><span style=""color:#80a1ff;font-weight:bold;"">!== </span>id<span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">RemoveButton </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>onClick <span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">button </span><span style=""color:#bcbec4;"">onClick</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>onClick<span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#d5b778;"">&gt;</span>Remove<span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">button</span><span style=""color:#d5b778;"">&gt;</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">div </span><span style=""color:#bcbec4;"">className</span><span style=""color:#96d57d;"">=""wrapper""</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">h1</span><span style=""color:#d5b778;"">&gt; </span>Current employees:<span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">h1</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;""><br></span><span style=""color:#d5b778;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">{</span>employees<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">map</span><span style=""color:#ffba00;font-weight:bold;"">((</span>employee<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">                </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">div </span><span style=""color:#bcbec4;"">className</span><span style=""color:#96d57d;"">=""card"" </span><span style=""color:#bcbec4;"">key</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>employee<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">id</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                    &lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                        &lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;</span>name: <span style=""color:#ae6dff;font-weight:bold;"">{</span>employee<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">name</span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                        &lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;</span>salary: <span style=""color:#ae6dff;font-weight:bold;"">{</span>employee<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">salary</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                    &lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;""><br></span><span style=""color:#d5b778;"">                    &lt;</span><span style=""color:#fc6969;"">RemoveButton </span><span style=""color:#bcbec4;"">onClick</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>handleRemove<span style=""color:#ffba00;font-weight:bold;"">(</span>employee<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">id</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">/&gt;<br></span><span style=""color:#d5b778;"">                &lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">            </span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">    </span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span>ReactDOM<span style=""color:#bcbec4;"">.</span>render<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">App </span><span style=""color:#d5b778;"">/&gt;</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">document</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">getElementById</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""root""</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span></pre><pre><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1a174b774af547c8c270f8f8ee0092862f90a8b8.jpg"><span style=""color:#bcbec4;""><br></span></pre></div>	{}	573	2025-06-29 08:54:01.387	2025-06-29 08:54:01.387
cmchfo3av00fy13mptswn023t	v9fAeI{?YC	Простая	СБОРНИК::JS QUIZ::Event Loop	JS QUIZ	Event Loop	<div><pre><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">2</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">3</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">4</span><span style=""color:#ffba00;font-weight:bold;"">)))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">5</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">6</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">7</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">8</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;</span></pre></div>	<div><pre><span style=""color:#7a7e85;"">// Ответ: 17835264</span></pre></div>	{}	574	2025-06-29 08:54:01.399	2025-06-29 08:54:01.399
cmchfo3b700fz13mpeztqnayj	seZ)CA_!c;	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span><span style=""color:#56a8f5;"">func </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#56a8f5;"">func </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">2</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;""><br></span><span style=""color:#56a8f5;"">setTimeout</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">func</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">100</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span></pre></div>	1<br><img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e6a974f14e545d0b0ed263ca4783aebea0c28980.jpg">	{}	575	2025-06-29 08:54:01.412	2025-06-29 08:54:01.412
cmchfo3bk00g013mp7360soun	kaz.!y`8Xj	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>a<span style=""color:#bcbec4;"">,</span>b<span style=""color:#bcbec4;"">,</span>c<span style=""color:#bcbec4;"">,</span>d<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>a<span style=""color:#bcbec4;"">,</span>b<span style=""color:#bcbec4;"">,</span>c<span style=""color:#bcbec4;"">,</span>d<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span>arguments<span style=""color:#fff83c;"">[</span><span style=""color:#2aacb8;"">0</span><span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#96d57d;"">'bfe'<br></span><span style=""color:#96d57d;"">    </span>arguments<span style=""color:#fff83c;"">[</span><span style=""color:#2aacb8;"">3</span><span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#96d57d;"">'dev'<br></span><span style=""color:#96d57d;""><br></span><span style=""color:#96d57d;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>a<span style=""color:#bcbec4;"">,</span>b<span style=""color:#bcbec4;"">,</span>c<span style=""color:#bcbec4;"">,</span>d<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#56a8f5;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">,</span><span style=""color:#2aacb8;"">2</span><span style=""color:#bcbec4;"">,</span><span style=""color:#2aacb8;"">3</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span></pre></div>	[ 1, 2, 3, undefined ]<br><br>[ 'bfe', 2, 3, undefined ]<br>	{}	576	2025-06-29 08:54:01.424	2025-06-29 08:54:01.424
cmchfo3bw00g113mpf9uc4lmn	HKgc!*zyA>	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">class </span><span style=""color:#c44eff;"">MyArray </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">extends </span><span style=""color:#ff80ef;font-style:italic;"">Array </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">get </span><span style=""color:#93ceff;"">length</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#2aacb8;"">3<br></span><span style=""color:#2aacb8;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">arr1 </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">new </span><span style=""color:#c44eff;"">MyArray</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">10</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">arr1</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">length</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">arr2 </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">new </span><span style=""color:#ff80ef;font-style:italic;"">Array</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">10</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">arr2</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length</span><span style=""color:#ffba00;font-weight:bold;"">)</span></pre></div>	10 at arr1.length<br><br>10 at arr2.length	{}	577	2025-06-29 08:54:01.437	2025-06-29 08:54:01.437
cmchfo3c800g213mpkk3upvbh	nbF(<4,^mB	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">a</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">b </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">c </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">d</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">typeof </span><span style=""color:#56a8f5;"">d</span><span style=""color:#ffba00;font-weight:bold;"">) //<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#56a8f5;"">d </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#96d57d;"">'e'<br></span><span style=""color:#96d57d;"">    </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">typeof </span><span style=""color:#56a8f5;"">d</span><span style=""color:#ffba00;font-weight:bold;"">) //<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">typeof </span><span style=""color:#56a8f5;"">a</span><span style=""color:#ffba00;font-weight:bold;"">) //<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">typeof </span><span style=""color:#56a8f5;"">b</span><span style=""color:#ffba00;font-weight:bold;"">) //<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">typeof </span><span style=""color:#56a8f5;"">c</span><span style=""color:#ffba00;font-weight:bold;"">) //<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">typeof </span>d<span style=""color:#ffba00;font-weight:bold;"">) // <br></span><span style=""color:#56a8f5;"">c</span><span style=""color:#ffba00;font-weight:bold;"">()</span></pre></div>	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-ac8bb20be0eacaf12fa76762dd41282e362c0d7d.jpg">	{}	578	2025-06-29 08:54:01.449	2025-06-29 08:54:01.449
cmchfo3ck00g313mp3bztuyyh	N*[B=y].hy	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<div><pre><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">NaN </span><span style=""color:#80a1ff;font-weight:bold;"">== </span><span style=""color:#ff80ef;font-style:italic;"">NaN</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">NaN </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#ff80ef;font-style:italic;"">NaN</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">Object</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">is</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">NaN</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">NaN</span><span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#fff83c;"">[</span><span style=""color:#ff80ef;font-style:italic;"">NaN</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">indexOf</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">NaN</span><span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#fff83c;"">[</span><span style=""color:#ff80ef;font-style:italic;"">NaN</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">includes</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">NaN</span><span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">Math</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">max</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">NaN</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">Math</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">min</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">NaN</span><span style=""color:#bcbec4;"">, </span><span style=""color:#2aacb8;"">1</span><span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">Math</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">min</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">NaN</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff80ef;font-style:italic;"">Infinity</span><span style=""color:#ffba00;font-weight:bold;"">))<br></span></pre></div>	false<br>false<br>true&nbsp;<br>-1&nbsp;<br>true<br>NaN<br>NaN<br>NaN	{}	579	2025-06-29 08:54:01.461	2025-06-29 08:54:01.461
cmchfo3cx00g413mpxajkwkjs	P,cDZBbV)l	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-fda8b16a973a31b18e4cdcdb6c254d10bd004f12.jpg">	1<br>3	{}	580	2025-06-29 08:54:01.474	2025-06-29 08:54:01.474
cmchfo3d700g513mpcm0ypkd2	ohO0-{FO0=	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-d1bfd0777065e0446fab178bb597317571369b7f.jpg">	Error	{}	581	2025-06-29 08:54:01.483	2025-06-29 08:54:01.483
cmchfo3di00g613mp66p82uh2	d:WZpN{)!0	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b5d35012d8cc66cccf688cbd66fb8294ed06f3f3.jpg">	""dev""<br> Error	{}	582	2025-06-29 08:54:01.495	2025-06-29 08:54:01.495
cmchfo3dt00g713mpbbdaxxnr	t&%?*+a1|U	Простая	СБОРНИК::JS QUIZ::Операторы	JS QUIZ	Операторы	<div><div>const foo = [0]</div><div>if (foo) {</div><div>  console.log(foo == true)</div><div>} else {</div><div>  console.log(foo == false)</div><div>}</div></div>	false	{}	583	2025-06-29 08:54:01.505	2025-06-29 08:54:01.505
cmchfo3e500g813mpjixh1k04	K;j.~E_N|V	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-13c419a26348df3bb6772c3375671c1ba0d1e29e.jpg">	"<pre><code>false	{}	584	2025-06-29 08:54:01.517	2025-06-29 08:54:01.517
cmchfo3ee00g913mpqgbowb92	qRv<}&ZcL}	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-774a86050e0990aef29e53ce57c0f6a54602ccf7.jpg">	<pre><code>""undefined1"	{}	585	2025-06-29 08:54:01.527	2025-06-29 08:54:01.527
cmchfo3ep00ga13mpshi7q4ga	I|js^`Q+}@	Простая	СБОРНИК::JS QUIZ::Область видимости/замыкания	JS QUIZ	Область видимости/замыкания	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-f01ac75ea5dd7255e86140581f17632d023d3377.jpg">	"<pre><code>NaN	{}	586	2025-06-29 08:54:01.538	2025-06-29 08:54:01.538
cmchfo3f100gb13mpcnl2humd	L(XU,Pwz]y	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-bc90dbdf0ff994a5e363798e19cf14559f5e0e98.jpg">	"<pre><code>[0,111,1111,2,999]	{}	587	2025-06-29 08:54:01.55	2025-06-29 08:54:01.55
cmchfo3fc00gc13mpi6orjdrr	e[])_vANkA	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-573e4c8860f9e078252c97493aef58198c1d920f.jpg">	"<pre><code>1	{}	588	2025-06-29 08:54:01.561	2025-06-29 08:54:01.561
cmchfo3fo00gd13mpqngcg9se	t);LB%h~[h	Простая	СБОРНИК::JS QUIZ::Промисы/Таймауты	JS QUIZ	Промисы/Таймауты	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-57ad626ca6ddf1d4e2636d3e8ecf491f3e021a55.jpg">	"<pre><code>5	{}	589	2025-06-29 08:54:01.573	2025-06-29 08:54:01.573
cmchfo3fy00ge13mpt3h4kzwl	M+?|BQ=P),	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-27685ab43c110e5691fadedb18272928ee0b8eb3.jpg"><br><div><br><div><span style=""color: #608b4e;"">// This is a JavaScript coding problem from BFE.dev </span></div><div><span style=""color: #608b4e;"">/**</span></div><div><span style=""color: #608b4e;""> * @param { Array } arr</span></div><div><span style=""color: #608b4e;""> * @param { number } depth</span></div><div><span style=""color: #608b4e;""> * @returns { Array }</span></div><div><span style=""color: #608b4e;""> */</span></div><div><span style=""color: #569cd6;"">function</span><span style=""color: #d4d4d4;""> flat</span><span style=""color: #dcdcdc;"">(</span><span style=""color: #d4d4d4;"">arr</span><span style=""color: #dcdcdc;"">,</span><span style=""color: #d4d4d4;""> depth </span><span style=""color: #dcdcdc;"">=</span><span style=""color: #d4d4d4;""> </span><span style=""color: #b5cea8;"">1</span><span style=""color: #dcdcdc;"">)</span><span style=""color: #d4d4d4;""> </span><span style=""color: #dcdcdc;"">{</span></div><div><span style=""color: #d4d4d4;""> </span><span style=""color: #608b4e;"">// your imeplementation here</span></div><div><span style=""color: #dcdcdc;"">}</span></div><br><br><br></div>	"<pre><code>1. Рекурсивно	{}	590	2025-06-29 08:54:01.582	2025-06-29 08:54:01.582
cmchfo3ga00gf13mpdrkxyt1a	"rp#p{Aww!Z"	Простая	СБОРНИК::JS ПРАКТИКА::Числа	JS ПРАКТИКА	Числа	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6808827ad4d2ca8a6fbffe3f8b6a1852d276e1f5.jpg">	<pre><div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">sum</span><span style=""color:#ffba00;font-weight:bold;"">(</span>num<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">func </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function</span><span style=""color:#ffba00;font-weight:bold;"">(</span>num2<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#7a7e85;"">// #4<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>num2 <span style=""color:#80a1ff;font-weight:bold;"">? </span><span style=""color:#56a8f5;"">sum</span><span style=""color:#ffba00;font-weight:bold;"">(</span>num<span style=""color:#80a1ff;font-weight:bold;"">+</span>num2<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#80a1ff;font-weight:bold;"">: </span>num<span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// #3<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#56a8f5;"">func</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">valueOf </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>num<span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// #2<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#56a8f5;"">func</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// #1<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span></pre></div></pre>	{}	591	2025-06-29 08:54:01.595	2025-06-29 08:54:01.595
cmchfo3gy00gh13mpdjgrnlcl	"zJ,#ySdATo"	Простая	СБОРНИК::JS ПРАКТИКА::Классы	JS ПРАКТИКА	Классы	<div>You are asked to create an Event Emitter Class</div><pre><code><span style=""color: rgb(249, 117, 131);"">const</span><span style=""color: rgb(121, 184, 255);""> emitter</span><span style=""color: rgb(249, 117, 131);""> =</span><span style=""color: rgb(249, 117, 131);""> new</span><span style=""color: rgb(179, 146, 240);""> Emitter</span><span style=""color: rgb(225, 228, 232);"">()</span></code></pre><div>It should support event subscribing</div><pre><code><span style=""color: rgb(249, 117, 131);"">const</span><span style=""color: rgb(121, 184, 255);""> sub1</span><span style=""color: rgb(249, 117, 131);"">  =</span><span style=""color: rgb(225, 228, 232);""> emitter.</span><span style=""color: rgb(179, 146, 240);"">subscribe</span><span style=""color: rgb(225, 228, 232);"">(</span><span style=""color: rgb(158, 203, 255);"">'event1'</span><span style=""color: rgb(225, 228, 232);"">, callback1)</span><span style=""color: rgb(249, 117, 131);"">const</span><span style=""color: rgb(121, 184, 255);""> sub2</span><span style=""color: rgb(249, 117, 131);""> =</span><span style=""color: rgb(225, 228, 232);""> emitter.</span><span style=""color: rgb(179, 146, 240);"">subscribe</span><span style=""color: rgb(225, 228, 232);"">(</span><span style=""color: rgb(158, 203, 255);"">'event2'</span><span style=""color: rgb(225, 228, 232);"">, callback2)</span><span style=""color: rgb(106, 115, 125);"">// same callback could subscribe </span><span style=""color: rgb(106, 115, 125);"">// on same event multiple times</span><span style=""color: rgb(249, 117, 131);"">const</span><span style=""color: rgb(121, 184, 255);""> sub3</span><span style=""color: rgb(249, 117, 131);""> =</span><span style=""color: rgb(225, 228, 232);""> emitter.</span><span style=""color: rgb(179, 146, 240);"">subscribe</span><span style=""color: rgb(225, 228, 232);"">(</span><span style=""color: rgb(158, 203, 255);"">'event1'</span><span style=""color: rgb(225, 228, 232);"">, callback1)</span></code></pre><div><code>emit(eventName, ...args)</code>&nbsp;is used to trigger the callbacks, with args relayed</div><pre><code><span style=""color: rgb(225, 228, 232);"">emitter.</span><span style=""color: rgb(179, 146, 240);"">emit</span><span style=""color: rgb(225, 228, 232);"">(</span><span style=""color: rgb(158, 203, 255);"">'event1'</span><span style=""color: rgb(225, 228, 232);"">, </span><span style=""color: rgb(121, 184, 255);"">1</span><span style=""color: rgb(225, 228, 232);"">, </span><span style=""color: rgb(121, 184, 255);"">2</span><span style=""color: rgb(225, 228, 232);"">);</span><span style=""color: rgb(106, 115, 125);"">// callback1 will be called twice</span></code></pre><div>Subscription returned by&nbsp;<code>subscribe()</code>&nbsp;has a&nbsp;<code>release()</code>&nbsp;method that could be used to unsubscribe</div><pre><code><span style=""color: rgb(225, 228, 232); background-color: rgb(21, 32, 43);"">sub1.<span style=""color: rgb(179, 146, 240);"">release</span>()</span><span style=""color: rgb(225, 228, 232); background-color: rgb(21, 32, 43);"">sub3.<span style=""color: rgb(179, 146, 240);"">release</span>()</span><span style=""color: rgb(225, 228, 232); background-color: rgb(21, 32, 43);""><span style=""color: rgb(106, 115, 125);"">// now even if we emit 'event1' again, </span></span><span style=""color: rgb(225, 228, 232); background-color: rgb(21, 32, 43);""><span style=""color: rgb(106, 115, 125);"">// callback1 is not called anymore</span></span><br></code></pre>	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">class </span><span style=""color:#c44eff;"">EventEmitter </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff57ec;"">subscriptions </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">new </span><span style=""color:#ff80ef;font-style:italic;"">Map</span><span style=""color:#ffba00;font-weight:bold;"">()<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#93ceff;"">subscribe</span><span style=""color:#ffba00;font-weight:bold;"">(</span>eventName<span style=""color:#bcbec4;"">, </span>callback<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#80a1ff;font-weight:bold;"">!</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">subscriptions</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">has</span><span style=""color:#ffba00;font-weight:bold;"">(</span>eventName<span style=""color:#ffba00;font-weight:bold;"">)) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">subscriptions</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">set</span><span style=""color:#ffba00;font-weight:bold;"">(</span>eventName<span style=""color:#bcbec4;"">, </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">new </span><span style=""color:#ff80ef;font-style:italic;"">Set</span><span style=""color:#ffba00;font-weight:bold;"">())<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>subscriptions <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">subscriptions</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">get</span><span style=""color:#ffba00;font-weight:bold;"">(</span>eventName<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>callbackObj <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>callback <span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span>subscriptions<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">add</span><span style=""color:#ffba00;font-weight:bold;"">(</span>callbackObj<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#93ceff;"">release</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span>subscriptions<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">delete</span><span style=""color:#ffba00;font-weight:bold;"">(</span>callbackObj<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>subscriptions<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">size </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">delete this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">subscriptions</span><span style=""color:#bcbec4;"">.</span>eventName<br>                <span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">            }<br></span><span style=""color:#ae6dff;font-weight:bold;"">        }<br></span><span style=""color:#ae6dff;font-weight:bold;"">    }<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#93ceff;"">emit</span><span style=""color:#ffba00;font-weight:bold;"">(</span>eventName<span style=""color:#bcbec4;"">, </span>...args<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>subscriptions <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">subscriptions</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">get</span><span style=""color:#ffba00;font-weight:bold;"">(</span>eventName<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>subscriptions<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>subscriptions<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">forEach</span><span style=""color:#ffba00;font-weight:bold;"">(</span>cbObj <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span>cbObj<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">callback</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">apply</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">, </span>args<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    }<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span></pre></div>	{}	593	2025-06-29 08:54:01.618	2025-06-29 08:54:01.618
cmchfo3hb00gi13mpbh5oyve1	oR`}x^PfNF	Простая	СБОРНИК::JS ПРАКТИКА::Классы	JS ПРАКТИКА	Классы	<div>Can you implement a&nbsp;<code>MyPromise</code>&nbsp;Class by yourself?</div><div>At least it should match following requirements</div><ol><li>new promise:&nbsp;<code>new MyPromise((resolve, reject) =&gt; {})</code></li><li>chaining :&nbsp;<code>MyPromise.prototype.then()</code>&nbsp;<em><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"">then handlers</a>&nbsp;should be called asynchronously</em></li><li>rejection handler:&nbsp;<code>MyPromise.prototype.catch()</code></li><li>static methods:&nbsp;<code>MyPromise.resolve()</code>,&nbsp;<code>MyPromise.reject()</code>.<br><br><div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">class </span><span style=""color:#c44eff;"">MyPromise </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">constructor</span><span style=""color:#ffba00;font-weight:bold;"">(</span>executor<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#7a7e85;"">// your code here<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>onFulfilled<span style=""color:#bcbec4;"">, </span>onRejected<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#7a7e85;"">// your code here<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#93ceff;font-weight:bold;font-style:italic;"">catch</span><span style=""color:#ffba00;font-weight:bold;"">(</span>onRejected<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#7a7e85;"">// your code here<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">static </span><span style=""color:#57aaf7;font-style:italic;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#7a7e85;"">// your code here<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">static </span><span style=""color:#57aaf7;font-style:italic;"">reject</span><span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#7a7e85;"">// your code here<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div></li></ol>	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">class </span><span style=""color:#c44eff;"">MyPromise </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">constructor</span><span style=""color:#ffba00;font-weight:bold;"">(</span>executor<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">state </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#96d57d;"">'pending'</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">try </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>executor<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">_resolve</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">bind</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">_reject</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">bind</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">catch </span><span style=""color:#ffba00;font-weight:bold;"">(</span>error<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">_reject</span><span style=""color:#ffba00;font-weight:bold;"">(</span>error<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    }<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#93ceff;"">_resolve</span><span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">state </span><span style=""color:#80a1ff;font-weight:bold;"">!== </span><span style=""color:#96d57d;"">'pending'</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">state </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#96d57d;"">'fulfilled'</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">result </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>value<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#56a8f5;"">queueMicrotask</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">onFulfilled </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">undefined</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">try </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>returnValue <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">onFulfilled</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">result</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>isReturnValuePromise <span style=""color:#80a1ff;font-weight:bold;"">= </span>returnValue <span style=""color:#ff922a;font-weight:bold;font-style:italic;"">instanceof </span><span style=""color:#c44eff;"">MyPromise</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#80a1ff;font-weight:bold;"">!</span>isReturnValuePromise<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">thenPromiseResolve</span><span style=""color:#ffba00;font-weight:bold;"">(</span>returnValue<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">                </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">else </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                    </span>returnValue<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">thenPromiseResolve</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">thenPromiseReject</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">                </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">            } </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">catch </span><span style=""color:#ffba00;font-weight:bold;"">(</span>error<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">thenPromiseReject</span><span style=""color:#ffba00;font-weight:bold;"">(</span>error<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        }</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#93ceff;"">_reject</span><span style=""color:#ffba00;font-weight:bold;"">(</span>error<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">state </span><span style=""color:#80a1ff;font-weight:bold;"">!== </span><span style=""color:#96d57d;"">'pending'</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">state </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#96d57d;"">'rejected'</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">result </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>error<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#56a8f5;"">queueMicrotask</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">onRejected </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">undefined</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">try </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>returnValue <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">onRejected</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">result</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>isReturnValuePromise <span style=""color:#80a1ff;font-weight:bold;"">= </span>returnValue <span style=""color:#ff922a;font-weight:bold;font-style:italic;"">instanceof </span><span style=""color:#c44eff;"">MyPromise</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#80a1ff;font-weight:bold;"">!</span>isReturnValuePromise<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">thenPromiseResolve</span><span style=""color:#ffba00;font-weight:bold;"">(</span>returnValue<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">                </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">else </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                    </span>returnValue<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">thenPromiseResolve</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">thenPromiseReject</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">                </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">            } </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">catch </span><span style=""color:#ffba00;font-weight:bold;"">(</span>error<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">thenPromiseReject</span><span style=""color:#ffba00;font-weight:bold;"">(</span>error<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        }</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>onFulfilled<span style=""color:#bcbec4;"">, </span>onRejected<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#7a7e85;"">// Register consuming functions.<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>isOnFulfilledFunction <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">typeof </span>onFulfilled <span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#96d57d;"">'function'</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">onFulfilled </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>isOnFulfilledFunction <span style=""color:#80a1ff;font-weight:bold;"">? </span>onFulfilled <span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>value<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>isOnRejectedFunction <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">typeof </span>onRejected <span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#96d57d;"">'function'</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">onRejected </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>isOnRejectedFunction<br>            <span style=""color:#80a1ff;font-weight:bold;"">? </span>onRejected<br>            <span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ffba00;font-weight:bold;"">(</span>error<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">throw </span>error<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return new </span><span style=""color:#c44eff;"">MyPromise</span><span style=""color:#ffba00;font-weight:bold;"">((</span>resolve<span style=""color:#bcbec4;"">, </span>reject<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#7a7e85;"">// Register `resolve` and `reject`, so that we can<br></span><span style=""color:#7a7e85;"">            // resolve or reject this promise in `_resolve`<br></span><span style=""color:#7a7e85;"">            // or `_reject`.<br></span><span style=""color:#7a7e85;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">thenPromiseResolve </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>resolve<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">thenPromiseReject </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>reject<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#93ceff;font-weight:bold;font-style:italic;"">catch</span><span style=""color:#ffba00;font-weight:bold;"">(</span>onRejected<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return this</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">undefined</span><span style=""color:#bcbec4;"">, </span>onRejected<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">static </span><span style=""color:#57aaf7;font-style:italic;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>isValuePromise <span style=""color:#80a1ff;font-weight:bold;"">= </span>value <span style=""color:#ff922a;font-weight:bold;font-style:italic;"">instanceof </span><span style=""color:#c44eff;"">MyPromise</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>isValuePromise<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>value<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return new </span><span style=""color:#c44eff;"">MyPromise</span><span style=""color:#ffba00;font-weight:bold;"">((</span>resolve<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>resolve<span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">static </span><span style=""color:#57aaf7;font-style:italic;"">reject</span><span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return new </span><span style=""color:#c44eff;"">MyPromise</span><span style=""color:#ffba00;font-weight:bold;"">((</span>_<span style=""color:#bcbec4;"">, </span>reject<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>reject<span style=""color:#ffba00;font-weight:bold;"">(</span>value<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span></pre></div>	{}	594	2025-06-29 08:54:01.631	2025-06-29 08:54:01.631
cmchfo3hn00gj13mpkkvjcgr2	qH$eq5(k/:	Простая	СБОРНИК::JS ПРАКТИКА::Кастомные методы и функции	JS ПРАКТИКА	Кастомные методы и функции	<div>Here you are asked to create a&nbsp;<code>pipe()</code>&nbsp;function, which chains multiple functions together to create a new function.</div><div>Suppose we have some simple functions like this</div><pre><code><div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">times </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>y<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt;  </span><span style=""color:#ffba00;font-weight:bold;"">(</span>x<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>x <span style=""color:#80a1ff;font-weight:bold;"">* </span>y<br><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">plus </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>y<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ffba00;font-weight:bold;"">(</span>x<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>x <span style=""color:#80a1ff;font-weight:bold;"">+ </span>y<br><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">subtract </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>y<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt;  </span><span style=""color:#ffba00;font-weight:bold;"">(</span>x<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>x <span style=""color:#80a1ff;font-weight:bold;"">- </span>y<br><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">divide </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>y<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ffba00;font-weight:bold;"">(</span>x<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>x <span style=""color:#80a1ff;font-weight:bold;"">/ </span>y</pre><pre><div><pre><span style=""color:#7a7e85;"">// Your pipe() would be used to generate new functions<br></span><span style=""color:#7a7e85;""><br></span>pipe<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#fff83c;"">[<br></span><span style=""color:#fff83c;"">    </span>times<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">2</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span>times<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">3</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#7a7e85;"">// x * 2 * 3<br></span>pipe<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#fff83c;"">[<br></span><span style=""color:#fff83c;"">    </span>times<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">2</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span>plus<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">3</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span>times<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">4</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#7a7e85;"">// (x * 2 + 3) * 4<br></span>pipe<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#fff83c;"">[<br></span><span style=""color:#fff83c;"">    </span>times<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">2</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span>subtract<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">3</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span>divide<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#2aacb8;"">4</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#7a7e85;"">// (x * 2 - 3) / 4<br></span></pre></div></pre></div></code></pre>	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">pipe</span><span style=""color:#ffba00;font-weight:bold;"">(</span>funcs<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return function</span><span style=""color:#ffba00;font-weight:bold;"">(</span>arg<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>funcs<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">reduce</span><span style=""color:#ffba00;font-weight:bold;"">((</span>result<span style=""color:#bcbec4;"">, </span>func<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>func<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">call</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">this</span><span style=""color:#bcbec4;"">, </span>result<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span>arg<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div>	{}	595	2025-06-29 08:54:01.643	2025-06-29 08:54:01.643
cmchfo3hy00gk13mpycouu834	wW)N]G=Z`8	Простая	СБОРНИК::JS ПРАКТИКА::Строки	JS ПРАКТИКА	Строки	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-518a0406f5a4190a2b790b1e33908c88269ba23b.jpg"><br><div><pre><span style=""color:#9af064;font-style:italic;"">/**<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{string} str<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">* </span><span style=""color:#67a37c;font-style:italic;"">@returns </span><span style=""color:#abadb3;font-style:italic;"">{string}<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">*/<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">uncompress</span><span style=""color:#ffba00;font-weight:bold;"">(</span>str<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#7a7e85;"">// your code here<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div>	<div><pre><div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">isNumeric </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span>str<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#80a1ff;font-weight:bold;"">!</span><span style=""color:#56a8f5;"">isNaN</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">parseFloat</span><span style=""color:#ffba00;font-weight:bold;"">(</span>str<span style=""color:#ffba00;font-weight:bold;"">)) </span><span style=""color:#80a1ff;font-weight:bold;"">&amp;&amp; </span><span style=""color:#56a8f5;"">isFinite</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">Number</span><span style=""color:#ffba00;font-weight:bold;"">(</span>str<span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">uncompress</span><span style=""color:#ffba00;font-weight:bold;"">(</span>str<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>stack<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#fff83c;"">[] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[]<br></span><span style=""color:#fff83c;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">for </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>char <span style=""color:#ff922a;font-weight:bold;font-style:italic;"">of </span>str<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>char <span style=""color:#80a1ff;font-weight:bold;"">!== </span><span style=""color:#96d57d;"">')'</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>stack<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span>char<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">else </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>word <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#96d57d;"">''<br></span><span style=""color:#96d57d;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>count <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#96d57d;"">''<br></span><span style=""color:#96d57d;""><br></span><span style=""color:#96d57d;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">while </span><span style=""color:#ffba00;font-weight:bold;"">(</span>stack<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length </span><span style=""color:#80a1ff;font-weight:bold;"">&amp;&amp; </span>stack<span style=""color:#fff83c;"">[</span>stack<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length </span><span style=""color:#80a1ff;font-weight:bold;"">- </span><span style=""color:#2aacb8;"">1</span><span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">!== </span><span style=""color:#96d57d;"">'('</span><span style=""color:#ffba00;font-weight:bold;"">) </span>word <span style=""color:#80a1ff;font-weight:bold;"">= </span>stack<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">pop</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#80a1ff;font-weight:bold;"">+ </span>word<br>            stack<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">pop</span><span style=""color:#ffba00;font-weight:bold;"">()<br></span><span style=""color:#ffba00;font-weight:bold;""><br></span><span style=""color:#ffba00;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">while </span><span style=""color:#ffba00;font-weight:bold;"">(</span>stack<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length </span><span style=""color:#80a1ff;font-weight:bold;"">&amp;&amp; </span><span style=""color:#56a8f5;"">isNumeric</span><span style=""color:#ffba00;font-weight:bold;"">(</span>stack<span style=""color:#fff83c;"">[</span>stack<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length </span><span style=""color:#80a1ff;font-weight:bold;"">- </span><span style=""color:#2aacb8;"">1</span><span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">)) </span>count <span style=""color:#80a1ff;font-weight:bold;"">= </span>stack<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">pop</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#80a1ff;font-weight:bold;"">+ </span>count<br>            stack<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span>word<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">repeat</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#56a8f5;"">Number</span><span style=""color:#ffba00;font-weight:bold;"">(</span>count<span style=""color:#ffba00;font-weight:bold;"">)))<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    }<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>stack<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">join</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">''</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span></pre></div></pre></div>	{}	596	2025-06-29 08:54:01.654	2025-06-29 08:54:01.654
cmchfo3ia00gl13mpb22o5ppk	E)19-xe}s5	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-dbd4e9c572e7ea30df8eec1aa216757dba8cdfbf.jpg"><br><div><pre><span style=""color:#9af064;font-style:italic;"">/**<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{Array&lt;Promise&gt;} promises<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">* </span><span style=""color:#67a37c;font-style:italic;"">@return </span><span style=""color:#abadb3;font-style:italic;"">{Promise}<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">*/<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">race</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#6f737a;"">promises</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#7a7e85;"">// your code here<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div>	<div><pre><div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">race</span><span style=""color:#ffba00;font-weight:bold;"">(</span>promises<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return new </span><span style=""color:#56a8f5;"">Promise</span><span style=""color:#ffba00;font-weight:bold;"">((</span>resolve<span style=""color:#bcbec4;"">, </span>reject<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span>promises<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">forEach</span><span style=""color:#ffba00;font-weight:bold;"">((</span>promise<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>promise<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>resolve<span style=""color:#bcbec4;"">, </span>reject<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div></pre></div>	{}	597	2025-06-29 08:54:01.666	2025-06-29 08:54:01.666
cmchfo3in00gm13mpifbljqoj	v1{T4vjS:q	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-a32cdd4438d6e0b22b8d35f309c48acb51d948dd.jpg"><br><div><pre><span style=""color:#9af064;font-style:italic;"">/**<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{Array&lt;any&gt;} promises </span><span style=""color:#9af064;font-style:italic;"">- notice input might have non-Promises<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@return </span><span style=""color:#abadb3;font-style:italic;"">{Promise&lt;any[]&gt;}<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">*/<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">all</span><span style=""color:#ffba00;font-weight:bold;"">(</span>promises<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#7a7e85;"">// your code here<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div>	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">all</span><span style=""color:#ffba00;font-weight:bold;"">(</span>promises<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return new </span><span style=""color:#56a8f5;"">Promise</span><span style=""color:#ffba00;font-weight:bold;"">((</span>resolve<span style=""color:#bcbec4;"">, </span>reject<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>result <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>promises<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>resolve<span style=""color:#ffba00;font-weight:bold;"">(</span>result<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>countPending <span style=""color:#80a1ff;font-weight:bold;"">= </span>promises<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span>promises<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">forEach</span><span style=""color:#ffba00;font-weight:bold;"">((</span>promise<span style=""color:#bcbec4;"">, </span>index<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">(</span>promise<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">((</span>value<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span>result<span style=""color:#fff83c;"">[</span>index<span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>value<span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">                </span>countPending<span style=""color:#80a1ff;font-weight:bold;"">--</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">                </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>countPending <span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                    </span>resolve<span style=""color:#ffba00;font-weight:bold;"">(</span>result<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">                </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">            }</span><span style=""color:#bcbec4;"">, </span>reject<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div>	{}	598	2025-06-29 08:54:01.679	2025-06-29 08:54:01.679
cmchfo3iz00gn13mpr74ca2kq	e>@-F6E/d|	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-adf1fff64f712ccfbb23ec44db35a55dc4447c16.jpg"><br><div><pre><span style=""color:#9af064;font-style:italic;"">/**<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{Array&lt;any&gt;} promises </span><span style=""color:#9af064;font-style:italic;"">- notice that input might contains non-promises<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@return </span><span style=""color:#abadb3;font-style:italic;"">{Promise&lt;Array&lt;{status: 'fulfilled', value: any} | {status: 'rejected', reason: any}&gt;&gt;}<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">*/<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">allSettled</span><span style=""color:#ffba00;font-weight:bold;"">(</span>promises<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#7a7e85;"">// your code here<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div>	<div><pre><div><pre><span style=""color:#9af064;font-style:italic;"">/**<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{Array&lt;any&gt;} promises </span><span style=""color:#9af064;font-style:italic;"">- notice that input might contains non-promises<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@return </span><span style=""color:#abadb3;font-style:italic;"">{Promise&lt;Array&lt;{status: 'fulfilled', value: any} | {status: 'rejected', reason: any}&gt;&gt;}<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">*/<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">allSettled</span><span style=""color:#ffba00;font-weight:bold;"">(</span>promises<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>promises<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>results <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[]<br></span><span style=""color:#fff83c;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>completed <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">0<br></span><span style=""color:#2aacb8;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return new </span><span style=""color:#56a8f5;"">Promise</span><span style=""color:#ffba00;font-weight:bold;"">((</span>resolve<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">for </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>i <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">0</span><span style=""color:#bcbec4;"">; </span>i<span style=""color:#80a1ff;font-weight:bold;"">&lt; </span>promises<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length</span><span style=""color:#bcbec4;"">; </span>i<span style=""color:#80a1ff;font-weight:bold;"">++</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff80ef;font-style:italic;"">Promise</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">resolve</span><span style=""color:#ffba00;font-weight:bold;"">(</span>promises<span style=""color:#fff83c;"">[</span>i<span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">                </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>value <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                    </span>results<span style=""color:#fff83c;"">[</span>i<span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">status</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'fulfilled'</span><span style=""color:#bcbec4;"">, </span>value <span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">                }</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">                </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">catch</span><span style=""color:#ffba00;font-weight:bold;"">(</span>reason <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                    </span>results<span style=""color:#fff83c;"">[</span>i<span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">status</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'rejected'</span><span style=""color:#bcbec4;"">, </span>reason <span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">                }</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">                </span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">finally</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                    </span>completed<span style=""color:#80a1ff;font-weight:bold;"">++<br></span><span style=""color:#80a1ff;font-weight:bold;"">                    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>completed <span style=""color:#80a1ff;font-weight:bold;"">=== </span>promises<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                        </span>resolve<span style=""color:#ffba00;font-weight:bold;"">(</span>results<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">                    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">                }</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    }</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div></pre></div>	{}	599	2025-06-29 08:54:01.692	2025-06-29 08:54:01.692
cmchfo3jd00go13mpcoek0l42	md|UJnE:AF	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-04787059b6cefc967180bf021e765c0d51edee43.jpg"><br><div><pre><span style=""color:#9af064;font-style:italic;"">/**<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{Array&lt;Promise&gt;} promises<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">* </span><span style=""color:#67a37c;font-style:italic;"">@return </span><span style=""color:#abadb3;font-style:italic;"">{Promise}<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">*/<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">any</span><span style=""color:#ffba00;font-weight:bold;"">(</span>promises<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#7a7e85;"">// your code here<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span></pre></div>	<div><pre><span style=""color:#9af064;font-style:italic;"">/**<br></span><span style=""color:#9af064;font-style:italic;""> * </span><span style=""color:#67a37c;font-style:italic;"">@param </span><span style=""color:#abadb3;font-style:italic;"">{Array&lt;Promise&gt;} promises<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">* </span><span style=""color:#67a37c;font-style:italic;"">@returns </span><span style=""color:#abadb3;font-style:italic;"">{Promise}<br></span><span style=""color:#abadb3;font-style:italic;""> </span><span style=""color:#9af064;font-style:italic;"">*/<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">any</span><span style=""color:#ffba00;font-weight:bold;"">(</span>promises<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#7a7e85;"">// return a Promise, which resolves as soon as one promise resolves<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return new </span><span style=""color:#56a8f5;"">Promise</span><span style=""color:#ffba00;font-weight:bold;"">((</span>resolve<span style=""color:#bcbec4;"">, </span>reject<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>isFulfilled <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">false<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">        const </span>errors <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[]<br></span><span style=""color:#fff83c;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">let </span>errorCount <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#2aacb8;"">0<br></span><span style=""color:#2aacb8;"">        </span>promises<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">forEach</span><span style=""color:#ffba00;font-weight:bold;"">((</span>promise<span style=""color:#bcbec4;"">, </span>index<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>promise<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">((</span>data<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#80a1ff;font-weight:bold;"">!</span>isFulfilled<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span>resolve<span style=""color:#ffba00;font-weight:bold;"">(</span>data<span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ffba00;font-weight:bold;"">                </span>isFulfilled <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">true<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        }</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ffba00;font-weight:bold;"">(</span>error<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>errors<span style=""color:#fff83c;"">[</span>index<span style=""color:#fff83c;"">] </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>error<br>            errorCount <span style=""color:#80a1ff;font-weight:bold;"">+= </span><span style=""color:#2aacb8;"">1<br></span><span style=""color:#2aacb8;""><br></span><span style=""color:#2aacb8;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>errorCount <span style=""color:#80a1ff;font-weight:bold;"">=== </span>promises<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span>reject<span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">new </span><span style=""color:#ff80ef;font-style:italic;"">AggregateError</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">'none resolved'</span><span style=""color:#bcbec4;"">, </span>errors<span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ffba00;font-weight:bold;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        }</span><span style=""color:#ffba00;font-weight:bold;"">))<br></span><span style=""color:#ffba00;font-weight:bold;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span></pre></div>	{}	600	2025-06-29 08:54:01.705	2025-06-29 08:54:01.705
cmchfo3jp00gp13mppk6syunm	kfl`0~RIgs	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-431ea3adc2f3084419a036abd234cadb7a1c6363.jpg">	<pre><code>""render App"	{}	601	2025-06-29 08:54:01.718	2025-06-29 08:54:01.718
cmchfo3k200gq13mpp8qufpob	GD$ea,6d>L	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-48769e28a7aa6fff0daa65491e53e5fda08e4642.jpg">	"<pre><code>1	{}	602	2025-06-29 08:54:01.731	2025-06-29 08:54:01.731
cmchfo3ke00gr13mprfprmrlg	y9SUIP^K<U	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-2c7f1ebc923e8dd1c2eaf8059e0f725fcd287ff9.jpg">	1<br>2<br>3<br>4<br>5<br>6<br>1<br>2<br>3<br>4	{}	603	2025-06-29 08:54:01.743	2025-06-29 08:54:01.743
cmchfo3kq00gs13mp8sq8g1p6	z!s9Pn1zT_	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-e9c6432c8059f3332625f487b72e9caafe3119e0.jpg">	false<br>false	{}	604	2025-06-29 08:54:01.754	2025-06-29 08:54:01.754
cmchfo3l200gt13mp2t2rwy0i	u7^U{SCe*M	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-6cc6e5660db0a8329deed5cd7ef61219cd3b1fee.jpg">	1<br>5<br>2<br>1<br>2<br>3<br>3<br>4<br>4	{}	605	2025-06-29 08:54:01.766	2025-06-29 08:54:01.766
cmchfo3lm00gu13mpbpqx8jue	B/F=&bZHv-	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-06b377c9b557ebcefb058071be972b03944b8363.jpg">	"<pre><code>1	{}	606	2025-06-29 08:54:01.786	2025-06-29 08:54:01.786
cmchfo3lw00gv13mp64ek9d70	b-B<BC0234	Простая	СБОРНИК::REACT QUIZ::React Quizzes	REACT QUIZ	React Quizzes	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-1416cc88c0c9d5d06d779a401c3800017b3fea05.jpg">	"<pre><code>1	{}	607	2025-06-29 08:54:01.797	2025-06-29 08:54:01.797
cmchfo3ma00gw13mp4e6vtq3d	tO_eJX!v8Y	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<div><pre><span style=""color:#7a7e85;"">// Необходимо провести ревью кода<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>rowNumberOptions <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""./config""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#fafafa;"">React</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#56a8f5;"">useLayoutEffect </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""react""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>useDispatch<span style=""color:#bcbec4;"">, </span>useSelector <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""react-redux""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>enrichmentPost <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""./utils""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>fetchPosts<span style=""color:#bcbec4;"">, </span>fetchOffers <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""./api""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>Select <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""./ components""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#9af064;font-style:italic;"">/** Компонент для вывода списка постов */<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#6f737a;"">Posts </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>onChangePagination <span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">data</span><span style=""color:#80a1ff;font-weight:bold;"">: </span>posts<span style=""color:#bcbec4;"">, </span>isLoading <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>useSelector<span style=""color:#ffba00;font-weight:bold;"">((</span>state<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>state<span style=""color:#bcbec4;"">.</span>userPosts<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">data</span><span style=""color:#80a1ff;font-weight:bold;"">: </span>offer <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>useSelector<span style=""color:#ffba00;font-weight:bold;"">((</span>state<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span>state<span style=""color:#bcbec4;"">.</span>offer<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>dispatch <span style=""color:#80a1ff;font-weight:bold;"">= </span>useDispatch<span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>paginationOptions <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[<br></span><span style=""color:#fff83c;"">        </span>...rowNumberOptions<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">map</span><span style=""color:#ffba00;font-weight:bold;"">((</span>option<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">                </span><span style=""color:#ff57ec;"">label</span><span style=""color:#80a1ff;font-weight:bold;"">: </span>option<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">name</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">                </span><span style=""color:#ff57ec;"">value</span><span style=""color:#80a1ff;font-weight:bold;"">: </span>option<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">id</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>postToRender <span style=""color:#80a1ff;font-weight:bold;"">= </span>posts<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">reduce</span><span style=""color:#ffba00;font-weight:bold;"">((</span>acc<span style=""color:#bcbec4;"">, </span>post<span style=""color:#bcbec4;"">, </span>idx<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#7a7e85;"">// после каждых 10 постов вставляем рекламу<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>idx <span style=""color:#80a1ff;font-weight:bold;"">% </span><span style=""color:#2aacb8;"">10 </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>acc<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span>offer<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#7a7e85;"">// обогащаем данными<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#fff83c;"">[</span>...acc<span style=""color:#bcbec4;"">, </span>enrichmentPost<span style=""color:#ffba00;font-weight:bold;"">(</span>post<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>isLoading<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">Skeleton </span><span style=""color:#d5b778;"">/&gt;</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#56a8f5;"">useLayoutEffect</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span>dispatch<span style=""color:#ffba00;font-weight:bold;"">(</span>fetchPosts<span style=""color:#ffba00;font-weight:bold;"">())</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span>dispatch<span style=""color:#ffba00;font-weight:bold;"">(</span>fetchOffers<span style=""color:#ffba00;font-weight:bold;"">())</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">ul</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                </span><span style=""color:#ae6dff;font-weight:bold;"">{</span>postToRender<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">map</span><span style=""color:#ffba00;font-weight:bold;"">((</span>post<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">                    </span><span style=""color:#d5b778;"">&lt;&gt;<br></span><span style=""color:#d5b778;"">                        &lt;</span><span style=""color:#fc6969;"">li</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                            </span><span style=""color:#ae6dff;font-weight:bold;"">{</span>post<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">title</span><span style=""color:#ae6dff;font-weight:bold;"">} </span>- <span style=""color:#ae6dff;font-weight:bold;"">{</span>post<span style=""color:#bcbec4;"">.</span>date<span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">                        </span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">li</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                    &lt;/&gt;<br></span><span style=""color:#d5b778;"">                </span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">ul</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">Select </span><span style=""color:#bcbec4;"">option</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>paginationOptions<span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#bcbec4;"">onSelect</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>onChangePagination<span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">/&gt;<br></span><span style=""color:#d5b778;"">        &lt;/&gt;<br></span><span style=""color:#d5b778;"">    </span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;</span></pre></div>	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#fafafa;"">React</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#56a8f5;"">useEffect </span><span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""react""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>useDispatch<span style=""color:#bcbec4;"">, </span>useSelector <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""react-redux""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>enrichmentPost <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""./utils""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>fetchPosts<span style=""color:#bcbec4;"">, </span>fetchOffers <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""./api""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>Select <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""./components""</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Убедитесь, что путь корректный<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">import </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>rowNumberOptions <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">from </span><span style=""color:#96d57d;"">""./config""</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#9af064;font-style:italic;"">/** Компонент для вывода списка постов */<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">Posts </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>onChangePagination <span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#7a7e85;"">// Объединяем селекторы для извлечения данных по постам и предложениям<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>posts<span style=""color:#bcbec4;"">, </span>isLoading<span style=""color:#bcbec4;"">, </span>offers <span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#80a1ff;font-weight:bold;"">= </span>useSelector<span style=""color:#ffba00;font-weight:bold;"">(</span>state <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff57ec;"">posts</span><span style=""color:#80a1ff;font-weight:bold;"">: </span>state<span style=""color:#bcbec4;"">.</span>userPosts<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">data</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff57ec;"">isLoading</span><span style=""color:#80a1ff;font-weight:bold;"">: </span>state<span style=""color:#bcbec4;"">.</span>userPosts<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">isLoading</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff57ec;"">offers</span><span style=""color:#80a1ff;font-weight:bold;"">: </span>state<span style=""color:#bcbec4;"">.</span>offer<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">data<br></span><span style=""color:#ff57ec;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>dispatch <span style=""color:#80a1ff;font-weight:bold;"">= </span>useDispatch<span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#7a7e85;"">// Загрузка данных сразу после монтирования компонента<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#56a8f5;"">useEffect</span><span style=""color:#ffba00;font-weight:bold;"">(() </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span>dispatch<span style=""color:#ffba00;font-weight:bold;"">(</span>fetchPosts<span style=""color:#ffba00;font-weight:bold;"">())</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span>dispatch<span style=""color:#ffba00;font-weight:bold;"">(</span>fetchOffers<span style=""color:#ffba00;font-weight:bold;"">())</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[</span>dispatch<span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// добавить dispatch в массив зависимостей<br></span><span style=""color:#7a7e85;""><br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>isLoading<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;</span>Loading...<span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Используйте конкретный компонент загрузки, если он есть<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>paginationOptions <span style=""color:#80a1ff;font-weight:bold;"">= </span>rowNumberOptions<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">map</span><span style=""color:#ffba00;font-weight:bold;"">((</span>option<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff57ec;"">label</span><span style=""color:#80a1ff;font-weight:bold;"">: </span>option<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">name</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ff57ec;"">value</span><span style=""color:#80a1ff;font-weight:bold;"">: </span>option<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">id</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#7a7e85;"">// Интеграция предложений в список постов с обогащением<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>postToRender <span style=""color:#80a1ff;font-weight:bold;"">= </span>posts<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">reduce</span><span style=""color:#ffba00;font-weight:bold;"">((</span>acc<span style=""color:#bcbec4;"">, </span>post<span style=""color:#bcbec4;"">, </span>idx<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#7a7e85;"">// Вставляем рекламу после каждых 10 постов, если предложения доступны<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span>idx <span style=""color:#80a1ff;font-weight:bold;"">% </span><span style=""color:#2aacb8;"">10 </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#2aacb8;"">0 </span><span style=""color:#80a1ff;font-weight:bold;"">&amp;&amp; </span>offers<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length </span><span style=""color:#80a1ff;font-weight:bold;"">&gt; </span><span style=""color:#2aacb8;"">0</span><span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>acc<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span>offers<span style=""color:#fff83c;"">[</span><span style=""color:#2aacb8;"">0</span><span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Предполагается, что offers - это массив<br></span><span style=""color:#7a7e85;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#fff83c;"">[</span>...acc<span style=""color:#bcbec4;"">, </span>enrichmentPost<span style=""color:#ffba00;font-weight:bold;"">(</span>post<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#fff83c;"">]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#fff83c;"">[]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">ul</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                </span><span style=""color:#ae6dff;font-weight:bold;"">{</span>postToRender<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">map</span><span style=""color:#ffba00;font-weight:bold;"">((</span>post<span style=""color:#bcbec4;"">, </span>idx<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">                    </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">li </span><span style=""color:#bcbec4;"">key</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>idx<span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#d5b778;"">&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#7a7e85;"">/* Добавление ключа для оптимизации рендеринга */</span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">                        {</span>post<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">title</span><span style=""color:#ae6dff;font-weight:bold;"">} </span>- <span style=""color:#ae6dff;font-weight:bold;"">{</span>post<span style=""color:#bcbec4;"">.</span>date<span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">                    </span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">li</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">                </span><span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">ul</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">            &lt;</span><span style=""color:#fc6969;"">Select </span><span style=""color:#bcbec4;"">options</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>paginationOptions<span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#bcbec4;"">onSelect</span><span style=""color:#96d57d;"">=</span><span style=""color:#ae6dff;font-weight:bold;"">{</span>onChangePagination<span style=""color:#ae6dff;font-weight:bold;"">} </span><span style=""color:#d5b778;"">/&gt;<br></span><span style=""color:#d5b778;"">        &lt;/&gt;<br></span><span style=""color:#d5b778;"">    </span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">export default </span><span style=""color:#56a8f5;"">Posts</span><span style=""color:#bcbec4;"">;<br></span></pre></div>	{}	608	2025-06-29 08:54:01.81	2025-06-29 08:54:01.81
cmchfo3mk00gx13mp3z81iw7k	Gb12<H;QS4	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-03d82c27c8c071e3f3b061b732f4d3cb6ad977ed.jpg">	"<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">export default function </span><span style=""color:#56a8f5;"">App</span><span style=""color:#ffba00;font-weight:bold;"">() </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>list <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#7a7e85;"">// Проверка, пуст ли список, и отображение сообщения, если это так<br></span><span style=""color:#7a7e85;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ffba00;font-weight:bold;"">(<br></span><span style=""color:#ffba00;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">            </span><span style=""color:#ae6dff;font-weight:bold;"">{</span>list<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">length </span><span style=""color:#80a1ff;font-weight:bold;"">=== </span><span style=""color:#2aacb8;"">0 </span><span style=""color:#80a1ff;font-weight:bold;"">&amp;&amp; </span><span style=""color:#d5b778;"">&lt;</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;</span>This list is empty<span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;</span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#d5b778;"">&lt;/</span><span style=""color:#fc6969;"">div</span><span style=""color:#d5b778;"">&gt;<br></span><span style=""color:#d5b778;"">    </span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}	{}	609	2025-06-29 08:54:01.821	2025-06-29 08:54:01.821
cmchfo3mv00gy13mprl9u6gw5	y+Fe,vfLR>	Простая	СБОРНИК::JS QUIZ::Массивы	JS QUIZ	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-7a13efa216964da046929e4e5b69159b963dff21.jpg">	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">uniq</span><span style=""color:#ffba00;font-weight:bold;"">(</span>arr<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>seen <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">new </span><span style=""color:#ff80ef;font-style:italic;"">Map</span><span style=""color:#ffba00;font-weight:bold;"">()</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>uniqueArr <span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#fff83c;"">[]</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">for </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span>item <span style=""color:#ff922a;font-weight:bold;font-style:italic;"">of </span>arr<span style=""color:#ffba00;font-weight:bold;"">) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">        </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">if </span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#80a1ff;font-weight:bold;"">!</span>seen<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">has</span><span style=""color:#ffba00;font-weight:bold;"">(</span>item<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">id</span><span style=""color:#ffba00;font-weight:bold;"">)) </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">            </span>seen<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">set</span><span style=""color:#ffba00;font-weight:bold;"">(</span>item<span style=""color:#bcbec4;"">.</span><span style=""color:#ff57ec;"">id</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">true</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">            </span>uniqueArr<span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">push</span><span style=""color:#ffba00;font-weight:bold;"">(</span>item<span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;"">        </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;"">    }<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>uniqueArr<span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#7a7e85;"">// Пример использования<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">res </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">uniq</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#fff83c;"">[<br></span><span style=""color:#fff83c;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">""item #1"" </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">3</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">""item #2"" </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">1</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">""item #3"" </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">4</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">""item #4"" </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">2</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">""item #5"" </span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">,<br></span><span style=""color:#bcbec4;"">    </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span><span style=""color:#ff57ec;"">id</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">3</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">name</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">""item #5"" </span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#fff83c;"">]</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">res</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span></pre></div>	{}	610	2025-06-29 08:54:01.831	2025-06-29 08:54:01.831
cmchfo3n700gz13mpzsuw6a74	C&AmsTTX^E	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-0bdef014d10f5d2f1db776e0ef30af04ca893e8e.jpg">	<div><pre><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">function </span><span style=""color:#56a8f5;"">merge</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#507874;"">T</span><span style=""color:#bcbec4;"">, </span><span style=""color:#507874;"">U</span><span style=""color:#80a1ff;font-weight:bold;"">&gt;</span><span style=""color:#ffba00;font-weight:bold;"">(</span>obj1<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#507874;"">T</span><span style=""color:#bcbec4;"">, </span>obj2<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#507874;"">U</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#507874;"">T </span><span style=""color:#80a1ff;font-weight:bold;"">&amp; </span><span style=""color:#507874;"">U </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span><span style=""color:#ae6dff;font-weight:bold;"">{ </span>...obj1<span style=""color:#bcbec4;"">, </span>...obj2 <span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ae6dff;font-weight:bold;"">}<br></span><span style=""color:#ae6dff;font-weight:bold;""><br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#ff80ef;font-style:italic;"">res </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#56a8f5;"">merge</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ff57ec;"">a</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">5</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ae6dff;font-weight:bold;"">{</span><span style=""color:#ff57ec;"">b</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#2aacb8;"">10</span><span style=""color:#bcbec4;"">, </span><span style=""color:#ff57ec;"">mes</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#96d57d;"">'test'</span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#ff80ef;font-style:italic;"">res</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">; </span><span style=""color:#7a7e85;"">// Output: { a: 5, b: 10, mes: 'test' }<br></span></pre></div>	{}	611	2025-06-29 08:54:01.844	2025-06-29 08:54:01.844
cmchfo3nj00h013mp1chuk0o4	HSeWcsH?Kb	Простая	СБОРНИК::TS Практика	TS Практика	\N	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-3b87700487335695c2783b0d56e0573cb6237d5c.jpg">	<div><pre><span style=""color:#7a7e85;"">// Определение асинхронной функции<br></span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">const </span><span style=""color:#56a8f5;"">myAsyncFunction </span><span style=""color:#80a1ff;font-weight:bold;"">= </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">async </span><span style=""color:#ffba00;font-weight:bold;"">(</span>url<span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#80a1ff;font-weight:bold;"">: </span><span style=""color:#fafafa;"">Promise</span><span style=""color:#80a1ff;font-weight:bold;"">&lt;</span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">string</span><span style=""color:#80a1ff;font-weight:bold;"">&gt; </span><span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ae6dff;font-weight:bold;"">{<br></span><span style=""color:#ae6dff;font-weight:bold;"">    </span><span style=""color:#ff922a;font-weight:bold;font-style:italic;"">return </span>url<span style=""color:#bcbec4;"">;  </span><span style=""color:#7a7e85;"">// Возвращает полученный URL<br></span><span style=""color:#ae6dff;font-weight:bold;"">}</span><span style=""color:#bcbec4;"">;<br></span><span style=""color:#bcbec4;""><br></span><span style=""color:#7a7e85;"">// Вызов асинхронной функции<br></span><span style=""color:#56a8f5;"">myAsyncFunction</span><span style=""color:#ffba00;font-weight:bold;"">(</span><span style=""color:#96d57d;"">""123""</span><span style=""color:#ffba00;font-weight:bold;"">)</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">then</span><span style=""color:#ffba00;font-weight:bold;"">(</span>result <span style=""color:#ac6cff;font-style:italic;"">=&gt; </span><span style=""color:#ff80ef;font-style:italic;"">console</span><span style=""color:#bcbec4;"">.</span><span style=""color:#93ceff;"">log</span><span style=""color:#ffba00;font-weight:bold;"">(</span>result<span style=""color:#ffba00;font-weight:bold;"">))</span><span style=""color:#bcbec4;"">;  </span><span style=""color:#7a7e85;"">// Выводит: ""123""<br></span></pre></div>	{}	612	2025-06-29 08:54:01.855	2025-06-29 08:54:01.855
cmchfo3nv00h113mpotjw7oii	wpY~D)}DO+	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<img alt=""Загруженное изображение"" src=""file-JnFYaHxjadLYX9NMUNaohXFh.png"">	<div><pre><span style=""color: rgb(255, 146, 42);""><i><b>import</b></i></span> React, <span style=""color: rgb(174, 109, 255);""><b>{ </b></span><span style=""color: rgb(86, 168, 245);"">useState</span><span style=""color: rgb(188, 190, 196);"">, </span><span style=""color: rgb(86, 168, 245);"">useEffect </span><b><span style=""color: rgb(174, 109, 255);"">} </span><span style=""color: rgb(255, 146, 42);""><i>from </i></span></b><span style=""color: rgb(150, 213, 125);"">'react'</span><span style=""color: rgb(188, 190, 196);"">;</span><br><br><span style=""color: rgb(255, 146, 42);""><i><b>function </b></i></span><span style=""color: rgb(86, 168, 245);"">EffectTest</span><b><span style=""color: rgb(255, 186, 0);"">() </span><span style=""color: rgb(174, 109, 255);"">{<br>    </span><span style=""color: rgb(255, 146, 42);""><i>const </i></span></b><span style=""color: rgb(255, 248, 60);"">[</span>test<span style=""color: rgb(188, 190, 196);"">, </span><span style=""color: rgb(86, 168, 245);"">setTest</span><span style=""color: rgb(255, 248, 60);"">] </span><span style=""color: rgb(128, 161, 255);""><b>= </b></span><span style=""color: rgb(86, 168, 245);"">useState</span><span style=""color: rgb(255, 186, 0);""><b>(</b></span><span style=""color: rgb(42, 172, 184);"">1</span><span style=""color: rgb(255, 186, 0);""><b>)</b></span><span style=""color: rgb(188, 190, 196);"">;<br><br>    </span><span style=""color: rgb(86, 168, 245);"">useEffect</span><span style=""color: rgb(255, 186, 0);""><b>(() </b></span><span style=""color: rgb(172, 108, 255);""><i>=&gt; </i></span><b><span style=""color: rgb(174, 109, 255);"">{<br>        </span><span style=""color: rgb(255, 146, 42);""><i>const </i></span></b>interval <span style=""color: rgb(128, 161, 255);""><b>= </b></span><span style=""color: rgb(86, 168, 245);"">setInterval</span><span style=""color: rgb(255, 186, 0);""><b>(() </b></span><span style=""color: rgb(172, 108, 255);""><i>=&gt; </i></span><span style=""color: rgb(174, 109, 255);""><b>{<br>            </b></span><span style=""color: rgb(86, 168, 245);"">setTest</span><span style=""color: rgb(255, 186, 0);""><b>(</b></span>prevTest <span style=""color: rgb(172, 108, 255);""><i>=&gt; </i></span>prevTest <span style=""color: rgb(128, 161, 255);""><b>+ </b></span><span style=""color: rgb(42, 172, 184);"">1</span><span style=""color: rgb(255, 186, 0);""><b>)</b></span><span style=""color: rgb(188, 190, 196);"">;  </span><span style=""color: rgb(122, 126, 133);"">// Использование функционального обновления для избежания замыканий<br>        </span><span style=""color: rgb(174, 109, 255);""><b>}</b></span><span style=""color: rgb(188, 190, 196);"">, </span><span style=""color: rgb(42, 172, 184);"">1000</span><span style=""color: rgb(255, 186, 0);""><b>)</b></span><span style=""color: rgb(188, 190, 196);"">;<br><br>        </span><b><span style=""color: rgb(255, 146, 42);""><i>return </i></span><span style=""color: rgb(255, 186, 0);"">() </span></b><span style=""color: rgb(172, 108, 255);""><i>=&gt; </i></span><span style=""color: rgb(86, 168, 245);"">clearInterval</span><span style=""color: rgb(255, 186, 0);""><b>(</b></span>interval<span style=""color: rgb(255, 186, 0);""><b>)</b></span><span style=""color: rgb(188, 190, 196);"">;  </span><span style=""color: rgb(122, 126, 133);"">// Очистка интервала при демонтировании компонента<br>    </span><span style=""color: rgb(174, 109, 255);""><b>}</b></span><span style=""color: rgb(188, 190, 196);"">, </span><span style=""color: rgb(255, 248, 60);"">[]</span><span style=""color: rgb(255, 186, 0);""><b>)</b></span><span style=""color: rgb(188, 190, 196);"">;  </span><span style=""color: rgb(122, 126, 133);"">// Пустой массив зависимостей, так как интервал устанавливается один раз<br><br>    </span><span style=""color: rgb(255, 146, 42);""><i><b>return </b></i></span><span style=""color: rgb(213, 183, 120);"">&lt;</span><span style=""color: rgb(252, 105, 105);"">div</span><span style=""color: rgb(213, 183, 120);"">&gt;</span><span style=""color: rgb(174, 109, 255);""><b>{</b></span>test<span style=""color: rgb(174, 109, 255);""><b>}</b></span><span style=""color: rgb(213, 183, 120);"">&lt;/</span><span style=""color: rgb(252, 105, 105);"">div</span><span style=""color: rgb(213, 183, 120);"">&gt;</span><span style=""color: rgb(188, 190, 196);"">;</span><br><b><span style=""color: rgb(174, 109, 255);"">}</span><br><br><span style=""color: rgb(255, 146, 42);""><i>export default </i></span></b><span style=""color: rgb(86, 168, 245);"">EffectTest</span><span style=""color: rgb(188, 190, 196);"">;</span><br></pre></div>	{}	613	2025-06-29 08:54:01.868	2025-06-29 08:54:01.868
cmchfo3o900h213mpn7rq4pif	EqLHk{zIzG	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240824102517.png">	<div><pre><div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>rangeExtraction<span style=""font-weight: bold;"">(</span>list<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// Результат будет храниться в массиве строк<br>    <span style=""font-weight: bold; font-style: italic;"">let </span>result <span style=""font-weight: bold;"">= </span>[];<br><br>    // Перебираем элементы массива<br>    <span style=""font-weight: bold; font-style: italic;"">for </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">let </span>i <span style=""font-weight: bold;"">= </span>0; i <span style=""font-weight: bold;"">&lt; </span>list.length; i<span style=""font-weight: bold;"">++</span><span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>// Начало текущего диапазона<br>        <span style=""font-weight: bold; font-style: italic;"">let </span>start <span style=""font-weight: bold;"">= </span>list[i];<br><br>        // Поиск конца диапазона<br>        <span style=""font-weight: bold; font-style: italic;"">while </span><span style=""font-weight: bold;"">(</span>list[i <span style=""font-weight: bold;"">+ </span>1] <span style=""font-weight: bold;"">- </span>list[i] <span style=""font-weight: bold;"">=== </span>1<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>i<span style=""font-weight: bold;"">++</span>;<br>        <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">        </span>// Конец текущего диапазона<br>        <span style=""font-weight: bold; font-style: italic;"">let </span>end <span style=""font-weight: bold;"">= </span>list[i];<br><br>        // Проверяем, состоит ли диапазон из 3 и более чисел<br>        <span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>end <span style=""font-weight: bold;"">- </span>start <span style=""font-weight: bold;"">&gt;= </span>2<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>// Добавляем диапазон в виде ""начало-конец""<br>            result.push<span style=""font-weight: bold;"">(</span>`$<span style=""font-weight: bold;"">{</span>start<span style=""font-weight: bold;"">}</span>-$<span style=""font-weight: bold;"">{</span>end<span style=""font-weight: bold;"">}</span>`<span style=""font-weight: bold;"">)</span>;<br>        <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">else </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>// Для отдельных чисел или пар чисел добавляем каждое число отдельно<br>            <span style=""font-weight: bold; font-style: italic;"">for </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">let </span>j <span style=""font-weight: bold;"">= </span>start; j <span style=""font-weight: bold;"">&lt;= </span>end; j<span style=""font-weight: bold;"">++</span><span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                </span>result.push<span style=""font-weight: bold;"">(</span>j.toString<span style=""font-weight: bold;"">())</span>;<br>            <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        }<br></span><span style=""font-weight: bold;"">    }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>// Преобразуем массив в строку, разделяя элементы запятой<br>    <span style=""font-weight: bold; font-style: italic;"">return </span>result.join<span style=""font-weight: bold;"">(</span>','<span style=""font-weight: bold;"">)</span>;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span>// Пример использования функции<br><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">range </span><span style=""font-weight: bold;"">= </span>[<span style=""font-weight: bold;"">-</span>10, <span style=""font-weight: bold;"">-</span>9, <span style=""font-weight: bold;"">-</span>8, <span style=""font-weight: bold;"">-</span>7, <span style=""font-weight: bold;"">-</span>3, <span style=""font-weight: bold;"">-</span>2, <span style=""font-weight: bold;"">-</span>1, 0, 1, 3, 4, 5, 14, 15, 17, 18, 19, 20];<br><span style=""font-style: italic;"">console</span>.info<span style=""font-weight: bold;"">(</span>rangeExtraction<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">range</span><span style=""font-weight: bold;"">))</span>; // Вывод: ""-10--7,-3-1,3-5,14,15,17-20""<br></pre></div></pre></div>	{}	614	2025-06-29 08:54:01.881	2025-06-29 08:54:01.881
cmchfo3ol00h313mp9yb2piuo	l=ior4VjQc	Простая	СБОРНИК::REACT Практика::Кастомные хуки	REACT Практика	Кастомные хуки	напиши кастомный hook useState<br><br>const useStateWithCallback = (initialState, callback) =&gt; {<br>&nbsp;...<br>}	const useStateWithCallback = (initialState, callback) =&gt; {<br>&nbsp;&nbsp;&nbsp; const [state, setState] = useState(initialState);<br>&nbsp;&nbsp;&nbsp; useEffect(() =&gt; callback(state), [state, callback]);<br>&nbsp;&nbsp;&nbsp; return [state, setState];<br>};	{}	615	2025-06-29 08:54:01.894	2025-06-29 08:54:01.894
cmchfo3ow00h413mpg694mnbh	KCe]p5Nt_M	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/Pasted image 20240824110146.png">	<div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>concatefunction <span style=""font-family: Arial;"">concatenateValues</span><span style=""font-family: Arial; font-weight: bold;"">(</span><span style=""font-family: Arial;"">input</span><span style=""font-family: Arial; font-weight: bold;"">) </span><span style=""font-family: Arial; font-weight: bold;"">{</span></pre><div><pre><span style=""font-weight: bold;"">    </span>// Фильтруем массив, исключая просроченные элементы<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>filtered <span style=""font-weight: bold;"">= </span>input.filter<span style=""font-weight: bold;"">(</span>item <span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">!</span>item.expired<span style=""font-weight: bold;"">)</span>;<br><br>    // Сортируем элементы по порядку<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>sorted <span style=""font-weight: bold;"">= </span>filtered.sort<span style=""font-weight: bold;"">((</span>a, b<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>a.order <span style=""font-weight: bold;"">- </span>b.order<span style=""font-weight: bold;"">)</span>;<br><br>    // Объединяем значения в одну строку<br>    <span style=""font-weight: bold; font-style: italic;"">let </span>concatenated <span style=""font-weight: bold;"">= </span>sorted.map<span style=""font-weight: bold;"">(</span>item <span style=""font-style: italic;"">=&gt; </span>item.value<span style=""font-weight: bold;"">)</span>.join<span style=""font-weight: bold;"">(</span>''<span style=""font-weight: bold;"">)</span>;<br><br>    // Удаляем дубликаты символов<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>uniqueChars <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">new </span><span style=""font-style: italic;"">Set</span><span style=""font-weight: bold;"">(</span>concatenated<span style=""font-weight: bold;"">)</span>;<br>    concatenated <span style=""font-weight: bold;"">= </span><span style=""font-style: italic;"">Array</span>.from<span style=""font-weight: bold;"">(</span>uniqueChars<span style=""font-weight: bold;"">)</span>.join<span style=""font-weight: bold;"">(</span>''<span style=""font-weight: bold;"">)</span>;<br><br>    <span style=""font-weight: bold; font-style: italic;"">return </span>concatenated;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span>// Тестирование функции с данными из примера<br><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">input </span><span style=""font-weight: bold;"">= </span>[<br>    <span style=""font-weight: bold;"">{ </span>value<span style=""font-weight: bold;"">: </span>'abcd', order<span style=""font-weight: bold;"">: </span>4, expired<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">false </span><span style=""font-weight: bold;"">}</span>,<br>    <span style=""font-weight: bold;"">{ </span>value<span style=""font-weight: bold;"">: </span>'qwer', order<span style=""font-weight: bold;"">: </span>2, expired<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">true </span><span style=""font-weight: bold;"">}</span>,<br>    <span style=""font-weight: bold;"">{ </span>value<span style=""font-weight: bold;"">: </span>'xyz1', order<span style=""font-weight: bold;"">: </span>1, expired<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">false </span><span style=""font-weight: bold;"">}</span>,<br>    <span style=""font-weight: bold;"">{ </span>value<span style=""font-weight: bold;"">: </span>'abx2', order<span style=""font-weight: bold;"">: </span>3, expired<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">false </span><span style=""font-weight: bold;"">}</span>,<br>];<br><br></pre></div><pre><span style=""font-family: Arial; font-style: italic;"">console</span><span style=""font-family: Arial;"">.</span><span style=""font-family: Arial;"">log</span><span style=""font-family: Arial; font-weight: bold;"">(</span><span style=""font-family: Arial;"">concatenateValues</span><span style=""font-family: Arial; font-weight: bold;"">(</span><span style=""font-family: Arial; font-style: italic;"">input</span><span style=""font-family: Arial; font-weight: bold;"">))</span><span style=""font-family: Arial;"">; </span><span style=""font-family: Arial;"">// Вывод должен быть 'xyz1abcd2' или похожий, в зависимости от того, какие буквы повторяются</span>nateValues<span style=""font-weight: bold;"">(</span>input<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>// Фильтруем массив, исключая просроченные элементы<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>filtered <span style=""font-weight: bold;"">= </span>input.filter<span style=""font-weight: bold;"">(</span>item <span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">!</span>item.expired<span style=""font-weight: bold;"">)</span>;<br><br>    // Сортируем элементы по порядку<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>sorted <span style=""font-weight: bold;"">= </span>filtered.sort<span style=""font-weight: bold;"">((</span>a, b<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>a.order <span style=""font-weight: bold;"">- </span>b.order<span style=""font-weight: bold;"">)</span>;<br><br>    // Объединяем значения в одну строку<br>    <span style=""font-weight: bold; font-style: italic;"">let </span>concatenated <span style=""font-weight: bold;"">= </span>sorted.map<span style=""font-weight: bold;"">(</span>item <span style=""font-style: italic;"">=&gt; </span>item.value<span style=""font-weight: bold;"">)</span>.join<span style=""font-weight: bold;"">(</span>''<span style=""font-weight: bold;"">)</span>;<br><br>    // Удаляем дубликаты символов<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>uniqueChars <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">new </span><span style=""font-style: italic;"">Set</span><span style=""font-weight: bold;"">(</span>concatenated<span style=""font-weight: bold;"">)</span>;<br>    concatenated <span style=""font-weight: bold;"">= </span><span style=""font-style: italic;"">Array</span>.from<span style=""font-weight: bold;"">(</span>uniqueChars<span style=""font-weight: bold;"">)</span>.join<span style=""font-weight: bold;"">(</span>''<span style=""font-weight: bold;"">)</span>;<br><br>    <span style=""font-weight: bold; font-style: italic;"">return </span>concatenated;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span>// Тестирование функции с данными из примера<br><span style=""font-weight: bold; font-style: italic;"">const </span><span style=""font-style: italic;"">input </span><span style=""font-weight: bold;"">= </span>[<br>    <span style=""font-weight: bold;"">{ </span>value<span style=""font-weight: bold;"">: </span>'abcd', order<span style=""font-weight: bold;"">: </span>4, expired<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">false </span><span style=""font-weight: bold;"">}</span>,<br>    <span style=""font-weight: bold;"">{ </span>value<span style=""font-weight: bold;"">: </span>'qwer', order<span style=""font-weight: bold;"">: </span>2, expired<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">true </span><span style=""font-weight: bold;"">}</span>,<br>    <span style=""font-weight: bold;"">{ </span>value<span style=""font-weight: bold;"">: </span>'xyz1', order<span style=""font-weight: bold;"">: </span>1, expired<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">false </span><span style=""font-weight: bold;"">}</span>,<br>    <span style=""font-weight: bold;"">{ </span>value<span style=""font-weight: bold;"">: </span>'abx2', order<span style=""font-weight: bold;"">: </span>3, expired<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">false </span><span style=""font-weight: bold;"">}</span>,<br>];<br><br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>concatenateValues<span style=""font-weight: bold;"">(</span><span style=""font-style: italic;"">input</span><span style=""font-weight: bold;"">))</span>; // Вывод должен быть 'xyz1abcd2' или похожий, в зависимости от того, какие буквы повторяются<br></pre></div>	{}	616	2025-06-29 08:54:01.905	2025-06-29 08:54:01.905
cmchfo3p700h513mppztdqmwg	"K#./y849#Y"	Простая	СБОРНИК::JS ПРАКТИКА::Массивы	JS ПРАКТИКА	Массивы	// Найти максимальную длину отрезка из рядом стоящих 1<br><br>function maxLenNumbers(numbers) {<br>}<br><br>console.log(maxLenNumbers([0, 0, 1, 1, 1, 0, 0, 1, 1])); // 3<br>console.log(maxLenNumbers([0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1])); // 3<br>console.log(maxLenNumbers([0, 0, 1, 1, 0, 0, 1, 1])); // 2<br>console.log(maxLenNumbers([1, 1, 1, 1])); // 4<br>console.log(maxLenNumbers([0, 0, 0, 0])); // 0<br>console.log(maxLenNumbers([])); // 0	<div><pre><span style=""font-weight: bold; font-style: italic;"">function </span>maxLenNumbers<span style=""font-weight: bold;"">(</span>numbers<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">let </span>maxLen <span style=""font-weight: bold;"">= </span>0;   // Для хранения максимальной длины<br>    <span style=""font-weight: bold; font-style: italic;"">let </span>currentLen <span style=""font-weight: bold;"">= </span>0;  // Для хранения текущей длины последовательности 1<br><br>    // Перебор массива чисел<br>    <span style=""font-weight: bold; font-style: italic;"">for </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">const </span>num <span style=""font-weight: bold; font-style: italic;"">of </span>numbers<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>num <span style=""font-weight: bold;"">=== </span>1<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>// Если текущий элемент равен 1, увеличиваем текущую длину<br>            currentLen<span style=""font-weight: bold;"">++</span>;<br>        <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">else </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>// Если встречаем 0, сравниваем текущую длину с максимальной и сбрасываем текущую длину<br>            maxLen <span style=""font-weight: bold;"">= </span><span style=""font-style: italic;"">Math</span>.max<span style=""font-weight: bold;"">(</span>maxLen, currentLen<span style=""font-weight: bold;"">)</span>;<br>            currentLen <span style=""font-weight: bold;"">= </span>0;<br>        <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>// После завершения цикла проверяем, не окончился ли массив на последовательности единиц<br>    maxLen <span style=""font-weight: bold;"">= </span><span style=""font-style: italic;"">Math</span>.max<span style=""font-weight: bold;"">(</span>maxLen, currentLen<span style=""font-weight: bold;"">)</span>;<br><br>    <span style=""font-weight: bold; font-style: italic;"">return </span>maxLen;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span>// Примеры использования<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>maxLenNumbers<span style=""font-weight: bold;"">(</span>[0, 0, 1, 1, 1, 0, 0, 1, 1]<span style=""font-weight: bold;"">))</span>; // 3<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>maxLenNumbers<span style=""font-weight: bold;"">(</span>[0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1]<span style=""font-weight: bold;"">))</span>; // 7, в вашем примере было указано 3, возможно, ошибка<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>maxLenNumbers<span style=""font-weight: bold;"">(</span>[0, 0, 1, 1, 0, 0, 1, 1]<span style=""font-weight: bold;"">))</span>; // 2<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>maxLenNumbers<span style=""font-weight: bold;"">(</span>[1, 1, 1, 1]<span style=""font-weight: bold;"">))</span>; // 4<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>maxLenNumbers<span style=""font-weight: bold;"">(</span>[0, 0, 0, 0]<span style=""font-weight: bold;"">))</span>; // 0<br><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>maxLenNumbers<span style=""font-weight: bold;"">(</span>[]<span style=""font-weight: bold;"">))</span>; // 0</pre></div>	{}	617	2025-06-29 08:54:01.916	2025-06-29 08:54:01.916
cmchfo3pk00h613mp7crrgnkv	t_1ZJXv`m$	Простая	СБОРНИК::JS ПРАКТИКА::промисы	JS ПРАКТИКА	промисы	// Доступно REST API<br>// GET /settings -&gt; {...}&nbsp;&nbsp; // 20сек<br>// GET /currentUser -&gt; {lang, ...} // 10 сек<br>// GET /dictionaries/$lang -&gt; {...} Использует lang из ответа /currentUser ! // 10 сек<br><br><br>// общее время для 3х запросов до 20 сек<br><br>function fetchJson(url) {<br>&nbsp; return fetch(url).then(response =&gt; response.json());<br>}<br><br>function startApp(settings, user, dictionary) {<br>&nbsp; console.info(settings, user, dictionary);<br>}<br><br>function bootstrap() {<br>&nbsp; // TODO: Получить все данные и вызвать метод startApp со всеми полученными данными.<br><br>&nbsp; startApp(settings, user, dictionary);<br>}		{}	618	2025-06-29 08:54:01.929	2025-06-29 08:54:01.929
cmchfo3px00h713mpbtp3m4cj	zuN|;SUD+;	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	import React from ""react"";<br><br>interface Post {<br>&nbsp; id: number;<br>&nbsp; userId: number;<br>&nbsp; title: string;<br>&nbsp; body: string;<br>}<br><br>type Comment = {<br>&nbsp; id: number;<br>&nbsp; postId: number;<br>&nbsp; name: string;<br>&nbsp; email: string;<br>&nbsp; body: string;<br>};<br><br>const LargeList = ({ commentPrefix, error = false }: any) =&gt; {<br>&nbsp; const [posts, setPosts] = React.useState([]);<br>&nbsp; const [comments, setComments] = React.useState([]);<br><br>&nbsp; // if (error) {<br>&nbsp; //&nbsp;&nbsp; return;<br>&nbsp; // }<br><br>&nbsp; /* fetch data */<br>&nbsp; // @ts-ignore<br>&nbsp; React.useEffect(async () =&gt; {<br>&nbsp;&nbsp;&nbsp; const postsResponse = await fetch(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ""https://jsonplaceholder.typicode.com/posts""<br>&nbsp;&nbsp;&nbsp; );<br>&nbsp;&nbsp;&nbsp; const postsJson = await postsResponse.json();<br>&nbsp;&nbsp;&nbsp; setPosts(postsJson);<br>&nbsp;&nbsp;&nbsp; const commentsResponse = await fetch(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ""https://jsonplaceholder.typicode.com/comments""<br>&nbsp;&nbsp;&nbsp; );<br>&nbsp;&nbsp;&nbsp; const commentsJson = await commentsResponse.json();<br>&nbsp;&nbsp;&nbsp; setComments(commentsJson);<br>&nbsp; }, [setPosts, setComments]);<br><br>&nbsp; /* get all comments by postId */<br>&nbsp; const findRelatedComments = (postId: number) =&gt; {<br>&nbsp;&nbsp;&nbsp; let answer: any[] = [];<br><br>&nbsp;&nbsp;&nbsp; for (var i = 0; i &lt; comments.length; i++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const comment = comments[i];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (comment.postId === postId) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; answer = [...answer, comment];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; return answer;<br>&nbsp; };<br><br>&nbsp; return (<br>&nbsp;&nbsp;&nbsp; &lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {/* render posts */}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {posts.map(({ title, body, id }) =&gt; (<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;main className=""post""&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;h1 className=""post-Item_red""&gt;{title}&lt;/h1&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;p&gt;{body}&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;hr /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {/* render comments list */}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ul className=""postList""&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {(findRelatedComments(id) as Comment[]).map(({ body }) =&gt; (<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div className=""post__header""&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {commentPrefix} {body}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ))}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ul&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/main&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ))}<br>&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br>&nbsp; );<br>};<br><br>var loaded = false;<br>var value = 10;<br><br>export const App = () =&gt; {<br>&nbsp; const [counter, setCounter] = React.useState(10);<br>&nbsp; let commentPrefix = ""*"";<br><br>&nbsp; const onDecrease = () =&gt; {<br>&nbsp;&nbsp;&nbsp; if (value &gt; 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setCounter(value);<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp; };<br><br>&nbsp; React.useLayoutEffect(() =&gt; {<br>&nbsp;&nbsp;&nbsp; if (!loaded) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setInterval(() =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; onDecrease();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }, 1000);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loaded = true;<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp; });<br><br>&nbsp; return (<br>&nbsp;&nbsp;&nbsp; &lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Counter: {counter}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;LargeList commentPrefix={commentPrefix} /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br>&nbsp; );<br>};		{}	619	2025-06-29 08:54:01.941	2025-06-29 08:54:01.941
cmchfo3s900he13mpg81rga2z	lk3?H~>~)@	Простая	СБОРНИК::REACT Практика::Реакт мини-апп	REACT Практика	Реакт мини-апп	- В компоненте есть примитивная кнопка, при нажатии увеличивает значение счетчика<br> - Начальное значение счетчик получает через пропс<br> - Значение счетчика может измениться через пропс<br> - Значение счетчика выводится в div/span элемент (это не существенно)<br> - Значение счетчика отправляется на фиктивный API один раз в момент размонтирования<br> - Задание надо выполнить с наименьшим количеством&nbsp; ререндеров<br> <br> const Comp = ({counter}) =&gt; {<br>&nbsp;&nbsp; const [count, setCount] = useState(counter);<br>&nbsp;&nbsp; const val = useRef(counter)&nbsp; <br>&nbsp;&nbsp; <br>&nbsp;&nbsp; useEffect(() =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp; setCount(counter)<br>&nbsp;&nbsp;&nbsp;&nbsp; val.current = counter<br>&nbsp;&nbsp; }, [counter])<br>&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; useEffect(() =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return () =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fetch('blabla', {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; method: 'POST',<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; body: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; JSON.strignify({count: val.current})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }, [])<br>&nbsp;&nbsp;&nbsp; <br><br>&nbsp;&nbsp; const handleSetCount = () =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp; setCount(prev =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; val.current = prev + 1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return prev + 1<br>&nbsp;&nbsp;&nbsp;&nbsp; })<br>&nbsp; <br>&nbsp;&nbsp; }<br>&nbsp;&nbsp; <br>&nbsp;&nbsp; <br>&nbsp;&nbsp; return (<br>&nbsp;&nbsp;&nbsp;&nbsp; &lt;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;span&gt;{count}&lt;/span&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;button onClick={handleSetCount}&gt;Increment&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/&gt;<br>&nbsp;&nbsp; )<br> }		{}	626	2025-06-29 08:54:02.026	2025-06-29 08:54:02.026
cmchfo3so00hf13mpznc1tiz3	kt2/<GMf8*	Простая	СБОРНИК::REACT Практика::Реакт мини-апп	REACT Практика	Реакт мини-апп	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-b20da588245162a0bd1d5c7da1ebada1cfed7c47.jpg"><br><a href=""https://codesandbox.io/p/sandbox/cy6dq3"">https://codesandbox.io/p/sandbox/cy6dq3</a>	<div><pre><div><pre><div><pre><span style=""font-weight: bold; font-style: italic;"">import </span>React, <span style=""font-weight: bold;"">{ </span>useState, useEffect <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react';<br><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-style: italic;"">axios </span><span style=""font-weight: bold; font-style: italic;"">from </span>'axios';<br><br><span style=""font-weight: bold; font-style: italic;"">const </span>URL <span style=""font-weight: bold;"">= </span>'https://backend-hub.openapi.software/gotbit-staff-mock';<br><br><span style=""font-weight: bold; font-style: italic;"">interface </span>StaffProps <span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>id<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">number</span>;<br>    name<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">string</span>;<br>    surname<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">string</span>;<br>    job<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">string</span>;<br>    sort<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">number</span>;<br>    sex<span style=""font-weight: bold;"">: </span>'male' <span style=""font-weight: bold;"">| </span>'female';<br>    staff<span style=""font-weight: bold;"">?: </span>StaffProps[];<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span>PageFetch <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[staff, setStaff] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">&lt;</span>StaffProps[]<span style=""font-weight: bold;"">&gt;</span><span style=""font-weight: bold;"">(</span>[]<span style=""font-weight: bold;"">)</span>;<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>[frontend, setFrontend] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">&lt;</span>StaffProps <span style=""font-weight: bold;"">| </span><span style=""font-weight: bold; font-style: italic;"">null</span><span style=""font-weight: bold;"">&gt;</span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">null</span><span style=""font-weight: bold;"">)</span>;<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>[loading, setLoading] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">&lt;</span><span style=""font-weight: bold; font-style: italic;"">boolean</span><span style=""font-weight: bold;"">&gt;</span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">true</span><span style=""font-weight: bold;"">)</span>;<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>[error, setError] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">&lt;</span><span style=""font-weight: bold; font-style: italic;"">string </span><span style=""font-weight: bold;"">| </span><span style=""font-weight: bold; font-style: italic;"">null</span><span style=""font-weight: bold;"">&gt;</span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">null</span><span style=""font-weight: bold;"">)</span>;<br><br>    <span style=""font-weight: bold; font-style: italic;"">const </span>fetchStaffData <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">async </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span><span style=""font-weight: bold; font-style: italic;"">try </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span><span style=""font-weight: bold; font-style: italic;"">const </span>response <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">await </span>axios.get<span style=""font-weight: bold;"">&lt;</span>StaffProps[]<span style=""font-weight: bold;"">&gt;</span><span style=""font-weight: bold;"">(</span>URL<span style=""font-weight: bold;"">)</span>;<br>            <span style=""font-weight: bold; font-style: italic;"">const </span>initialData<span style=""font-weight: bold;"">: </span>StaffProps[] <span style=""font-weight: bold;"">= </span>[<br>                <span style=""font-weight: bold;"">{ </span>id<span style=""font-weight: bold;"">: </span>1, name<span style=""font-weight: bold;"">: </span>""Илон"", surname<span style=""font-weight: bold;"">: </span>""Маск"", job<span style=""font-weight: bold;"">: </span>""Фронтендер"", sex<span style=""font-weight: bold;"">: </span>""male"", sort<span style=""font-weight: bold;"">: </span>1 <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">as </span>StaffProps, // Cast to StaffProps<br>                ...response.data,<br>                <span style=""font-weight: bold;"">{ </span>id<span style=""font-weight: bold;"">: </span>55, name<span style=""font-weight: bold;"">: </span>""Константин"", surname<span style=""font-weight: bold;"">: </span>""Константинов"", job<span style=""font-weight: bold;"">: </span>""Курьер"", sex<span style=""font-weight: bold;"">: </span>""male"", sort<span style=""font-weight: bold;"">: </span>30 <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">as </span>StaffProps // Cast to StaffProps<br>            ];<br>            <span style=""font-weight: bold; font-style: italic;"">const </span>filteredSortedData <span style=""font-weight: bold;"">= </span>initialData.filter<span style=""font-weight: bold;"">(</span>item <span style=""font-style: italic;"">=&gt; </span>item.sex <span style=""font-weight: bold;"">=== </span>'male'<span style=""font-weight: bold;"">)</span>.sort<span style=""font-weight: bold;"">((</span>a, b<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span>a.sort <span style=""font-weight: bold;"">- </span>b.sort<span style=""font-weight: bold;"">)</span>;<br>            setStaff<span style=""font-weight: bold;"">(</span>filteredSortedData<span style=""font-weight: bold;"">)</span>;<br>            <span style=""font-weight: bold; font-style: italic;"">const </span>frontendDeveloper <span style=""font-weight: bold;"">= </span>filteredSortedData.find<span style=""font-weight: bold;"">(</span>item <span style=""font-style: italic;"">=&gt; </span>item.job <span style=""font-weight: bold;"">=== </span>""Фронтендер""<span style=""font-weight: bold;"">)</span>;<br>            <span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>frontendDeveloper<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">                </span>setFrontend<span style=""font-weight: bold;"">(</span>frontendDeveloper<span style=""font-weight: bold;"">)</span>;<br>            <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">        } </span><span style=""font-weight: bold; font-style: italic;"">catch </span><span style=""font-weight: bold;"">(</span>error<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>setError<span style=""font-weight: bold;"">(</span>'Error fetching data'<span style=""font-weight: bold;"">)</span>;<br>        <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">finally </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">            </span>setLoading<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)</span>;<br>        <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span>useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">        </span>fetchStaffData<span style=""font-weight: bold;"">()</span>;<br>    <span style=""font-weight: bold;"">}</span>, []<span style=""font-weight: bold;"">)</span>;<br><br>    <span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>loading<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold; font-style: italic;"">return </span>&lt;p&gt;Loading...&lt;/p&gt;;<br>    <span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>error<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold; font-style: italic;"">return </span>&lt;p&gt;Error: <span style=""font-weight: bold;"">{</span>error<span style=""font-weight: bold;"">}</span>&lt;/p&gt;;<br><br>    <span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">        </span>&lt;div&gt;<br>            &lt;p&gt;Команда&lt;/p&gt;<br>            &lt;ul&gt;<br>                <span style=""font-weight: bold;"">{</span>staff.map<span style=""font-weight: bold;"">(</span>s <span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">                    </span>&lt;li key=<span style=""font-weight: bold;"">{</span>s.id<span style=""font-weight: bold;"">}</span>&gt;<span style=""font-weight: bold;"">{</span>s.id<span style=""font-weight: bold;"">} {</span>s.name<span style=""font-weight: bold;"">} {</span>s.surname<span style=""font-weight: bold;"">} {</span>s.job<span style=""font-weight: bold;"">}</span>&lt;/li&gt;<br>                <span style=""font-weight: bold;"">))</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            </span>&lt;/ul&gt;<br>            <span style=""font-weight: bold;"">{</span>frontend <span style=""font-weight: bold;"">&amp;&amp; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">                </span>&lt;div&gt;<br>                    &lt;p&gt;Старый фронтендер&lt;/p&gt;<br>                    &lt;div&gt;<span style=""font-weight: bold;"">{</span>frontend.name<span style=""font-weight: bold;"">} {</span>frontend.surname<span style=""font-weight: bold;"">} </span>- <span style=""font-weight: bold;"">{</span>frontend.job<span style=""font-weight: bold;"">}</span>&lt;/div&gt;<br>                &lt;/div&gt;<br>            <span style=""font-weight: bold;"">)</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">            </span>&lt;div&gt;<br>                &lt;p&gt;Новый фронтендер&lt;/p&gt;<br>                &lt;div&gt;Вы Фамилия - Фронтендер&lt;/div&gt;<br>            &lt;/div&gt;<br>            &lt;p&gt;Фронтендерские умения&lt;/p&gt;<br>            &lt;ul&gt;<br>                &lt;li&gt;TypeScript&lt;/li&gt;<br>                &lt;li&gt;JavaScript&lt;/li&gt;<br>                &lt;li&gt;NodeJS&lt;/li&gt;<br>                &lt;li&gt;SASS&lt;/li&gt;<br>            &lt;/ul&gt;<br>        &lt;/div&gt;<br>    <span style=""font-weight: bold;"">)</span>;<br><span style=""font-weight: bold;"">}</span>;<br><br><span style=""font-weight: bold; font-style: italic;"">export default </span>PageFetch;<br></pre></div></pre></div></pre></div>	{}	627	2025-06-29 08:54:02.04	2025-06-29 08:54:02.04
cmchfo3q700h813mpgpntswa4	nXwIA@{DQ3	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<br>import React, { useEffect, useState, useCallback } from 'react';<br><br>type Item = {<br>&nbsp; id: string;<br>&nbsp; count: number;<br>}<br><br>export type Items = {<br>&nbsp; items: Item[]<br>}<br><br>export const ItemCounter = () =&gt; {<br>&nbsp; const [items, setItems] = useState&lt;Item[] | null&gt;(null);<br><br>&nbsp; useEffect(() =&gt; {<br>&nbsp;&nbsp;&nbsp; fetch('https://example.com/items/get')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .then((response) =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const result = response.json();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setItems(result);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<br>&nbsp; });<br><br>&nbsp; return (<br>&nbsp;&nbsp;&nbsp; &lt;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {items &amp;&amp; items.length &amp;&amp; (<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {items.map((item, i) =&gt; (<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Item key={i} {...item} /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ))}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )}<br>&nbsp;&nbsp;&nbsp; &lt;&gt;<br>&nbsp; )<br>}<br><br>export const Item = (props: Item) =&gt; {<br>&nbsp; const [counter, setCounter] = useState(0);<br>&nbsp; const [counterIsReady, setCounterIsReady] = useState(false);<br><br>&nbsp; useEffect(() =&gt; {<br>&nbsp;&nbsp;&nbsp; setTimeout(() =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setCounterIsReady(true);<br>&nbsp;&nbsp;&nbsp; }, 1000);<br>&nbsp; }, []);<br><br>&nbsp; const handleCounterClick = () =&gt; {<br><br>&nbsp; }<br>&nbsp; // ... не сохранилось<br>}		{}	620	2025-06-29 08:54:01.951	2025-06-29 08:54:01.951
cmchfo3qj00h913mpwrwznpkz	sb5$bE@g;I	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	//&nbsp; рефактор кода, избавится от ререндеров лишних<br><br>import React from ""react"";<br>import { ToDo } from ""./ToDo"";<br><br>const ToDoItem = React.memo(({ item, updateHandler, deleteHandler }) =&gt; {<br>&nbsp; console.log(""render ToDoItem"", item.id); // Добавим item.id для ясности<br>&nbsp; return (<br>&nbsp;&nbsp;&nbsp; &lt;li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;input<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; id={item.id}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value={item.text}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; onChange={(e) =&gt; updateHandler(item.id, e.target.value)}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;button onClick={() =&gt; deleteHandler(item.id)}&gt;X&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/li&gt;<br>&nbsp; );<br>});<br><br>const ToDoList = () =&gt; {<br>&nbsp; const [todoList, setToDoList] = React.useState([]);<br><br>&nbsp; const addToDo = () =&gt; {<br>&nbsp;&nbsp;&nbsp; const todoListNext = [...todoList, new ToDo()];<br>&nbsp;&nbsp;&nbsp; setToDoList(todoListNext);<br>&nbsp; };<br><br>&nbsp; const deleteToDo = (id) =&gt; {<br>&nbsp;&nbsp;&nbsp; const todoListNext = todoList.filter((i) =&gt; i.id !== id);<br>&nbsp;&nbsp;&nbsp; setToDoList(todoListNext);<br>&nbsp; };<br><br>&nbsp; const updateToDoById = (id, value) =&gt; {<br>&nbsp;&nbsp;&nbsp; const index = todoList.findIndex((todo) =&gt; todo.id === id);<br>&nbsp;&nbsp;&nbsp; const listLocal = [...todoList];<br>&nbsp;&nbsp;&nbsp; const item = { ...listLocal[index], text: value };<br>&nbsp;&nbsp;&nbsp; listLocal[index] = item;<br><br>&nbsp;&nbsp;&nbsp; setToDoList(listLocal);<br>&nbsp; };<br><br>&nbsp; console.log(""------render ToDoList----------"");<br><br>&nbsp; return (<br>&nbsp;&nbsp;&nbsp; &lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;p&gt;ToDo on hooks&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ul&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {todoList.map((l) =&gt; (<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ToDoItem<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; key={l.id}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; item={l}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; updateHandler={updateToDoById}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deleteHandler={deleteToDo}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ))}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ul&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;button onClick={addToDo}&gt;Add ToDoItem&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br>&nbsp; );<br>};<br><br>export default ToDoList;		{}	621	2025-06-29 08:54:01.964	2025-06-29 08:54:01.964
cmchfo3qv00ha13mpo64s0xgn	"Py#l0f=)2`"	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	import * as React from 'react';<br>import axios from 'axios';<br>import userRoles from '@hooks'<br><br>export default function App() {<br>&nbsp; const [open, setOpen] = React.useState&lt;boolean&gt;(false);<br>&nbsp; return (<br>&nbsp;&nbsp;&nbsp; &lt;div className=""App""&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;h1&gt;User account&lt;/h1&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ListOfBestOffers /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;YourCurrentDiscount /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;button onClick={setOpen(true)}&gt;Open&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;PromoDialog name=""Promo generator"" open={open} onClose={setOpen(false)}&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;span&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Your rating is: &lt;UserRating /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/span&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/PromoDialog&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br>&nbsp; );<br>}<br><br>const UserRating = () =&gt; {<br>&nbsp; const [rating, setRating] = React.useState(null);<br>&nbsp;&nbsp;&nbsp; const [isLoading, setLoading] = React.useState(null)<br><br>&nbsp; const getRating = () =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setLoading(true)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; const result = axios.get&lt;string&gt;('http://someurl.com') // '5'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .finally(() =&gt; setLoading(false))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .then(resolve)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .catch(e){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; console.log(e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br><br>&nbsp;&nbsp;&nbsp; setRating(result.data);<br>&nbsp; };<br>&nbsp;&nbsp;&nbsp; // Нужно реализовать отображение звезд у пользователя<br>&nbsp; return (<br>&nbsp;&nbsp;&nbsp; &lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {(rating as string[]).map(star =&gt; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return &lt;div className=""star"" /&gt;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })}<br>&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br>&nbsp; );<br>};<br><br>interface PromoDialogProps {<br>&nbsp; open: boolean;<br>&nbsp; name: string;<br>&nbsp; children: any;<br>&nbsp; onClose: (event) =&gt; void;<br>}<br><br>type Type&lt;T&gt; = T extends Array&lt;infer R&gt; ? R : never; // Прочитать<br><br><br>const PromoDialog = ({ name, open, children, onClose }: PromoDialogProps) =&gt; {<br>&nbsp; const [code, setCode] = React.useState&lt;string&gt;();<br>&nbsp; const [phone, setPhone] = React.useState&lt;number&gt;();<br><br>&nbsp;&nbsp;&nbsp; // посчитать количество ререндеров компонента<br><br>&nbsp; const fetchCode = React.useCallback(async () =&gt; {<br>&nbsp; if (phone &amp;&amp; !isError) {<br>&nbsp;&nbsp;&nbsp; const { data } = await axios.get&lt;string[]&gt;('http://someurl.com');<br><br>&nbsp;&nbsp;&nbsp; setCode(data[0]);<br>&nbsp; }<br>&nbsp; }, []);<br><br>&nbsp; const getPromo = () =&gt; {<br>&nbsp;&nbsp;&nbsp; setCode('Loading');<br>&nbsp;&nbsp;&nbsp; fetchCode();<br>&nbsp; };<br>&nbsp; <br><br>&nbsp; return (<br>&nbsp;&nbsp;&nbsp; &lt;Dialog open={open} onClose={onClose}&gt; {/* Компонент UI kit */}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DialogContent&gt; {/* Компонент UI kit */}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;h1&gt;{name}&lt;/h1&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div&gt;{children}&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TextField value={code} contentEditable={false} /&gt; {/* Компонент UI kit */}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TextInput value={phone} onInput={setPhone} /&gt;&nbsp; {/* Компонент UI kit */}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/DialogContent&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DialogActions&gt; {/* Компонент UI kit */}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;button onClick={getPromo}&gt;Get Code&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;button onClick={onClose}&gt;Cancel&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/DialogActions&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/Dialog&gt;<br>&nbsp; );<br>};<br><br>const ListOfBestOffers = () =&gt; {<br>&nbsp; return &lt;p&gt;List of all best offers&lt;/p&gt;<br>}<br><br>const YourCurrentDiscount = () =&gt; {<br>&nbsp; return &lt;p&gt;Calculate your discount&lt;/p&gt;<br>}		{}	622	2025-06-29 08:54:01.976	2025-06-29 08:54:01.976
cmchfo3r800hb13mpxslx20bb	KU@k,LaQ4%	Простая	СБОРНИК::REACT Практика::Реакт рефактор	REACT Практика	Реакт рефактор	<div><pre>/* eslint-disable */<br><br><span style=""font-weight: bold; font-style: italic;"">import </span><span style=""font-weight: bold;"">{</span>ReactNode, memo, useCallback, useEffect, useState<span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">from </span>'react';<br><span style=""font-weight: bold; font-style: italic;"">import </span>'./App.css';<br><br><span style=""font-weight: bold; font-style: italic;"">interface </span>IPost <span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span>userId<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">number</span>;<br>    id<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">number</span>;<br>    title<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">string</span>;<br>    body<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold; font-style: italic;"">string</span>;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">function </span>App<span style=""font-weight: bold;"">() </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[posts, setPosts] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">()</span>;<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>[isLoading, setIsLoading] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)</span>;<br><br>    <span style=""font-weight: bold; font-style: italic;"">const </span>getPosts <span style=""font-weight: bold;"">= </span>useCallback<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">async </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">       </span><span style=""font-weight: bold; font-style: italic;"">try </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">          </span>setIsLoading<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">true</span><span style=""font-weight: bold;"">)</span>;<br>          <span style=""font-weight: bold; font-style: italic;"">const </span>response <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">await </span>fetch<span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">             </span>""https://jsonplaceholder.typicode.com/posts""<br>          <span style=""font-weight: bold;"">)</span>;<br>          <span style=""font-weight: bold; font-style: italic;"">const </span>newPosts <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold; font-style: italic;"">await </span>response.json<span style=""font-weight: bold;"">()</span>;<br>          setPosts<span style=""font-weight: bold;"">(</span>newPosts <span style=""font-weight: bold; font-style: italic;"">as unknown as </span>IPost[]<span style=""font-weight: bold;"">)</span>;<br>          setIsLoading<span style=""font-weight: bold;"">(</span><span style=""font-weight: bold; font-style: italic;"">false</span><span style=""font-weight: bold;"">)</span>;<br>       <span style=""font-weight: bold;"">} </span><span style=""font-weight: bold; font-style: italic;"">catch </span><span style=""font-weight: bold;"">(</span>error<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">          </span><span style=""font-style: italic;"">console</span>.log<span style=""font-weight: bold;"">(</span>error<span style=""font-weight: bold;"">)</span>;<br>       <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    }</span>, []<span style=""font-weight: bold;"">)</span>;<br><br>    useEffect<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">       </span>getPosts<span style=""font-weight: bold;"">()</span>;<br>    <span style=""font-weight: bold;"">}</span>, [getPosts]<span style=""font-weight: bold;"">)</span>;<br><br>    <span style=""font-weight: bold; font-style: italic;"">if </span><span style=""font-weight: bold;"">(</span>isLoading<span style=""font-weight: bold;"">) </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">       </span><span style=""font-weight: bold; font-style: italic;"">return </span>&lt;div&gt;Посты загружаются&lt;/div&gt;;<br>    <span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">       </span>&lt;div className='app'&gt;<br>          <span style=""font-weight: bold;"">{</span>posts.map<span style=""font-weight: bold;"">((</span>post, i<span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">             </span>&lt;Post post=<span style=""font-weight: bold;"">{</span>post<span style=""font-weight: bold;"">} </span>key=<span style=""font-weight: bold;"">{</span>i<span style=""font-weight: bold;"">} </span>/&gt;<br>          <span style=""font-weight: bold;"">))</span><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">       </span>&lt;/div&gt;<br>    <span style=""font-weight: bold;"">)</span>;<br><span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;""><br></span><span style=""font-weight: bold; font-style: italic;"">const </span>Post <span style=""font-weight: bold;"">= </span>memo<span style=""font-weight: bold;"">((</span><span style=""font-weight: bold;"">{</span>post<span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">: </span><span style=""font-weight: bold;"">{</span>post<span style=""font-weight: bold;"">: </span>IPost<span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">    </span><span style=""font-weight: bold; font-style: italic;"">const </span>[likes, setLikes] <span style=""font-weight: bold;"">= </span>useState<span style=""font-weight: bold;"">()</span>;<br>    <span style=""font-weight: bold; font-style: italic;"">const </span>icon <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">       </span>&lt;div&gt;<br>          &lt;div&gt;💖&lt;/div&gt;<br>          <span style=""font-weight: bold;"">{</span>likes<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">       </span>&lt;/div&gt;<br>    <span style=""font-weight: bold;"">)</span>;<br><br>    <span style=""font-weight: bold; font-style: italic;"">const </span>handleLike <span style=""font-weight: bold;"">= </span>useCallback<span style=""font-weight: bold;"">(() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">{<br></span><span style=""font-weight: bold;"">       </span><span style=""font-weight: bold; font-style: italic;"">const </span>newLikes <span style=""font-weight: bold;"">= </span>likes <span style=""font-weight: bold;"">+ </span>1;<br>       setLikes<span style=""font-weight: bold;"">(</span>newLikes<span style=""font-weight: bold;"">)</span>;<br>    <span style=""font-weight: bold;"">}</span>, []<span style=""font-weight: bold;"">)</span>;<br><br>    <span style=""font-weight: bold; font-style: italic;"">return </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">       </span>&lt;div className='post'&gt;<br>          &lt;div className=""container""&gt;<br>             &lt;div className='title'&gt;<span style=""font-weight: bold;"">{</span>post.title<span style=""font-weight: bold;"">}</span>&lt;/div&gt;<br>             &lt;div className='body'&gt;<span style=""font-weight: bold;"">{</span>post.body<span style=""font-weight: bold;"">}</span>&lt;/div&gt;<br>          &lt;/div&gt;<br>          &lt;div className=""container""&gt;<br>             &lt;Button icon=<span style=""font-weight: bold;"">{</span>icon<span style=""font-weight: bold;"">} </span>onClick=<span style=""font-weight: bold;"">{</span>handleLike<span style=""font-weight: bold;"">}</span>/&gt;<br>          &lt;/div&gt;<br>       &lt;/div&gt;<br>    <span style=""font-weight: bold;"">)</span>;<br><span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">)</span>;<br><br><span style=""font-weight: bold; font-style: italic;"">const </span>Button <span style=""font-weight: bold;"">= </span><span style=""font-weight: bold;"">(</span><span style=""font-weight: bold;"">{</span>icon, onClick<span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">: </span><span style=""font-weight: bold;"">{</span>icon<span style=""font-weight: bold;"">: </span>ReactNode, onClick<span style=""font-weight: bold;"">: </span><span style=""font-weight: bold;"">() </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold; font-style: italic;"">void</span><span style=""font-weight: bold;"">}</span><span style=""font-weight: bold;"">) </span><span style=""font-style: italic;"">=&gt; </span><span style=""font-weight: bold;"">(<br></span><span style=""font-weight: bold;"">    </span>&lt;button className=""button"" onClick=<span style=""font-weight: bold;"">{</span>onClick<span style=""font-weight: bold;"">}</span>&gt;<br>       <span style=""font-weight: bold;"">{</span>icon<span style=""font-weight: bold;"">}<br></span><span style=""font-weight: bold;"">    </span>&lt;/button&gt;<br><span style=""font-weight: bold;"">)</span>;<br><br><span style=""font-weight: bold; font-style: italic;"">export default </span>App;<br></pre></div>		{}	623	2025-06-29 08:54:01.988	2025-06-29 08:54:01.988
cmchfo3rk00hc13mpjhir48rf	OC;O)F7=!D	Простая	СБОРНИК::REACT Практика::Реакт мини-апп	REACT Практика	Реакт мини-апп	<img src="https://dydifvbmwsuxxxnixbep.supabase.co/storage/v1/object/public/anreshka-storage/paste-068171b2af6e672ade8d2c734b4a739f9be3da0c.jpg"><br><a href=""https://codesandbox.io/p/sandbox/react-switch-to-new-api-forked-xvm27x?workspaceId=f1cb77c0-3a01-41fb-bdc8-dc17dd25b062"">https://codesandbox.io/p/sandbox/react-switch-to-new-api-forked-xvm27x?workspaceId=f1cb77c0-3a01-41fb-bdc8-dc17dd25b062</a>&nbsp;		{}	624	2025-06-29 08:54:02	2025-06-29 08:54:02
cmchfo3rw00hd13mpyapb52oy	P]Typ9SF{E	Простая	СБОРНИК::JS ПРАКТИКА::Объекты	JS ПРАКТИКА	Объекты	// 1<br>const users = {<br>&nbsp; oleg: {<br>&nbsp;&nbsp;&nbsp; age: 20,<br>&nbsp;&nbsp;&nbsp; info: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; created: ""Thu Nov 01 2021 05:10:21 GMT+0500"",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastUpdate: ""Thu Nov 01 2022 05:10:21 GMT+0500"",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rating: 5<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp; },<br>&nbsp; fedor: {<br>&nbsp;&nbsp;&nbsp; age: 22,<br>&nbsp;&nbsp;&nbsp; info: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; created: ""Thu Nov 01 2021 05:10:21 GMT+0500"",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastUpdate: ""Thu Nov 01 2022 05:10:21 GMT+0500"",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rating: 4<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp; },<br>&nbsp; natasha: {<br>&nbsp;&nbsp;&nbsp; age: 35,<br>&nbsp;&nbsp;&nbsp; info: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; created: ""Thu Nov 01 2021 05:10:21 GMT+0500"",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastUpdate: ""Thu Nov 01 2022 05:10:21 GMT+0500"",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rating: 4<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp; },<br>&nbsp; sasha: {<br>&nbsp;&nbsp;&nbsp; age: 26,<br>&nbsp;&nbsp;&nbsp; info: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; created: ""Thu Nov 01 2021 05:10:21 GMT+0500"",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastUpdate: ""Thu Nov 01 2022 05:10:21 GMT+0500"",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rating: 7<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp; }<br>};<br><br>const MALE_NAMES = [""oleg"", ""fedor""];<br>const FEMALE_NAMES = [""natasha""];<br><br>// Задача: из объекта users сделать массив users, где каждый объект имеет следующую структуру<br><br>{<br>&nbsp; name: 'Fedor', // ключ объекта с заглавной буквы<br>&nbsp; age: 20, // возраст без изменений<br>&nbsp; gender: 'male', // oleg, fedor — 'male', natasha — 'female', остальные имена 'unknown', <br>&nbsp; info: {<br>&nbsp;&nbsp;&nbsp; lastUpdate: 'Mon, 01 Nov 2021 00:10:21 GMT' // дата в формате new Date().toUTCString()<br>&nbsp;&nbsp;&nbsp; // все остальные поля без изменений<br>&nbsp; }<br>}		{}	625	2025-06-29 08:54:02.013	2025-06-29 08:54:02.013
\.


--
-- Data for Name: User; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."User" (id, email, password, "createdAt", "updatedAt", role, "totalTasksSolved", "lastActivityDate") FROM stdin;
3	test@example.com	$2b$12$ksOOTIiPf9sUgJenSKHsUeW.TvR1hCuq3y0DDN3/Ud8Z.wPlnT3jW	2025-07-06 13:38:15.579	2025-07-06 13:38:15.579	USER	0	\N
4	asd2@asd.ru	$2b$12$ZlOTAbnroDeYxcp/Fke.LezFmbl/WQhXcgVvveMHcFOMubs6pbnA.	2025-07-06 13:38:34.599	2025-07-06 13:38:34.599	USER	0	\N
5	testuser@test.com	$2b$12$MFa2i1is6QQAv08JL339qeU2jbWT58i1VFHhoCccDZIpug3yO9Cc.	2025-07-06 14:40:45.64	2025-07-06 14:40:45.64	USER	0	\N
7	test123@test.com	$2b$12$fDKBMiuC/9zwZymfdUZ.yeZ/S0GzgJ.xAU1UDYNTOzYvVWGo/SJGe	2025-07-06 17:04:45.265	2025-07-06 17:04:45.265	USER	0	\N
1	asd@asd.ru	$2b$12$y.O2vMPPNwoqn42DrEnm6.KBKXoEUiW8ojPmqrFcVZBWG2N/I9eYK	2025-06-29 08:51:34.934	2025-06-29 08:51:34.934	ADMIN	0	\N
6	morphinethings@gmail.com	$2b$12$bycpnpZp0y752QilauKCHO/T/yiu.8zDpfA3EjW07oT7Yd0Z2/hz.	2025-07-06 15:52:56.851	2025-07-06 20:47:56.254	ADMIN	0	\N
\.


--
-- Data for Name: UserCategoryProgress; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."UserCategoryProgress" (id, "userId", "mainCategory", "subCategory", "totalTasks", "completedTasks", "attemptedTasks", "averageAttempts", "totalTimeSpentMinutes", "successRate", "firstAttempt", "lastActivity", "createdAt", "updatedAt") FROM stdin;
\.


--
-- Data for Name: UserCodeSolution; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."UserCodeSolution" (id, "userId", "blockId", "languageId", "sourceCode", "isCompleted", "executionCount", "successfulExecutions", "lastExecutionId", "createdAt", "updatedAt") FROM stdin;
\.


--
-- Data for Name: UserContentProgress; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."UserContentProgress" (id, "userId", "blockId", "solvedCount", "createdAt", "updatedAt") FROM stdin;
60d3d0ac-9d84-4f57-ad88-c7e902b79f5a	6	cmchmquf4005213sxse6fbxvu	2	2025-07-06 20:45:09.414	2025-07-07 11:42:35.414
aabb3928-e4e4-4034-873d-e93d5d4c807e	1	cmchmqwv1005l13sxhj8rammy	2	2025-07-11 13:47:44.764	2025-07-11 13:47:46.144
\.


--
-- Data for Name: UserPathProgress; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."UserPathProgress" (id, "userId", "pathId", "currentBlockIndex", "completedBlockIds", "isCompleted", "startedAt", "completedAt", "lastActivity", "createdAt", "updatedAt") FROM stdin;
\.


--
-- Data for Name: UserTheoryProgress; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."UserTheoryProgress" (id, "userId", "cardId", "solvedCount", "createdAt", "updatedAt", "cardState", "dueDate", "easeFactor", "interval", "lapseCount", "lastReviewDate", "learningStep", "reviewCount") FROM stdin;
\.


--
-- Data for Name: alembic_version; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.alembic_version (version_num) FROM stdin;
5563f9444a1b
\.


--
-- Name: User_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."User_id_seq"', 7, true);


--
-- Name: CodeExecution CodeExecution_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CodeExecution"
    ADD CONSTRAINT "CodeExecution_pkey" PRIMARY KEY (id);


--
-- Name: ContentBlock ContentBlock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ContentBlock"
    ADD CONSTRAINT "ContentBlock_pkey" PRIMARY KEY (id);


--
-- Name: ContentFile ContentFile_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ContentFile"
    ADD CONSTRAINT "ContentFile_pkey" PRIMARY KEY (id);


--
-- Name: ContentFile ContentFile_webdavPath_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ContentFile"
    ADD CONSTRAINT "ContentFile_webdavPath_key" UNIQUE ("webdavPath");


--
-- Name: LearningPath LearningPath_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LearningPath"
    ADD CONSTRAINT "LearningPath_pkey" PRIMARY KEY (id);


--
-- Name: SupportedLanguage SupportedLanguage_language_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SupportedLanguage"
    ADD CONSTRAINT "SupportedLanguage_language_key" UNIQUE (language);


--
-- Name: SupportedLanguage SupportedLanguage_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SupportedLanguage"
    ADD CONSTRAINT "SupportedLanguage_pkey" PRIMARY KEY (id);


--
-- Name: TaskAttempt TaskAttempt_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TaskAttempt"
    ADD CONSTRAINT "TaskAttempt_pkey" PRIMARY KEY (id);


--
-- Name: TaskSolution TaskSolution_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TaskSolution"
    ADD CONSTRAINT "TaskSolution_pkey" PRIMARY KEY (id);


--
-- Name: TestCase TestCase_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TestCase"
    ADD CONSTRAINT "TestCase_pkey" PRIMARY KEY (id);


--
-- Name: TestValidationResult TestValidationResult_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TestValidationResult"
    ADD CONSTRAINT "TestValidationResult_pkey" PRIMARY KEY (id);


--
-- Name: TheoryCard TheoryCard_ankiGuid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TheoryCard"
    ADD CONSTRAINT "TheoryCard_ankiGuid_key" UNIQUE ("ankiGuid");


--
-- Name: TheoryCard TheoryCard_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TheoryCard"
    ADD CONSTRAINT "TheoryCard_pkey" PRIMARY KEY (id);


--
-- Name: UserCategoryProgress UserCategoryProgress_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserCategoryProgress"
    ADD CONSTRAINT "UserCategoryProgress_pkey" PRIMARY KEY (id);


--
-- Name: UserCodeSolution UserCodeSolution_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserCodeSolution"
    ADD CONSTRAINT "UserCodeSolution_pkey" PRIMARY KEY (id);


--
-- Name: UserContentProgress UserContentProgress_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserContentProgress"
    ADD CONSTRAINT "UserContentProgress_pkey" PRIMARY KEY (id);


--
-- Name: UserPathProgress UserPathProgress_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserPathProgress"
    ADD CONSTRAINT "UserPathProgress_pkey" PRIMARY KEY (id);


--
-- Name: UserTheoryProgress UserTheoryProgress_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserTheoryProgress"
    ADD CONSTRAINT "UserTheoryProgress_pkey" PRIMARY KEY (id);


--
-- Name: User User_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."User"
    ADD CONSTRAINT "User_email_key" UNIQUE (email);


--
-- Name: User User_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."User"
    ADD CONSTRAINT "User_pkey" PRIMARY KEY (id);


--
-- Name: alembic_version alembic_version_pkc; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.alembic_version
    ADD CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num);


--
-- Name: idx_codeexecution_blockid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_codeexecution_blockid ON public."CodeExecution" USING btree ("blockId");


--
-- Name: idx_codeexecution_createdat; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_codeexecution_createdat ON public."CodeExecution" USING btree ("createdAt");


--
-- Name: idx_codeexecution_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_codeexecution_status ON public."CodeExecution" USING btree (status);


--
-- Name: idx_codeexecution_userid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_codeexecution_userid ON public."CodeExecution" USING btree ("userId");


--
-- Name: idx_contentblock_fileid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_contentblock_fileid ON public."ContentBlock" USING btree ("fileId");


--
-- Name: idx_learningpath_difficulty; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_learningpath_difficulty ON public."LearningPath" USING btree (difficulty);


--
-- Name: idx_learningpath_isactive; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_learningpath_isactive ON public."LearningPath" USING btree ("isActive");


--
-- Name: idx_taskattempt_blockid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_taskattempt_blockid ON public."TaskAttempt" USING btree ("blockId");


--
-- Name: idx_taskattempt_createdat; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_taskattempt_createdat ON public."TaskAttempt" USING btree ("createdAt");


--
-- Name: idx_taskattempt_issuccessful; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_taskattempt_issuccessful ON public."TaskAttempt" USING btree ("isSuccessful");


--
-- Name: idx_taskattempt_userid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_taskattempt_userid ON public."TaskAttempt" USING btree ("userId");


--
-- Name: idx_taskattempt_userid_blockid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_taskattempt_userid_blockid ON public."TaskAttempt" USING btree ("userId", "blockId");


--
-- Name: idx_tasksolution_blockid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tasksolution_blockid ON public."TaskSolution" USING btree ("blockId");


--
-- Name: idx_tasksolution_solvedat; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tasksolution_solvedat ON public."TaskSolution" USING btree ("solvedAt");


--
-- Name: idx_tasksolution_userid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tasksolution_userid ON public."TaskSolution" USING btree ("userId");


--
-- Name: idx_tasksolution_userid_blockid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX idx_tasksolution_userid_blockid ON public."TaskSolution" USING btree ("userId", "blockId");


--
-- Name: idx_testcase_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_testcase_active ON public."TestCase" USING btree ("isActive");


--
-- Name: idx_testcase_blockid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_testcase_blockid ON public."TestCase" USING btree ("blockId");


--
-- Name: idx_testcase_difficulty; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_testcase_difficulty ON public."TestCase" USING btree (difficulty);


--
-- Name: idx_testvalidation_attemptid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_testvalidation_attemptid ON public."TestValidationResult" USING btree ("attemptId");


--
-- Name: idx_testvalidation_testcaseid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_testvalidation_testcaseid ON public."TestValidationResult" USING btree ("testCaseId");


--
-- Name: idx_theorycard_category; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_theorycard_category ON public."TheoryCard" USING btree (category);


--
-- Name: idx_theorycard_deck; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_theorycard_deck ON public."TheoryCard" USING btree (deck);


--
-- Name: idx_usercategoryprogress_lastactivity; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_usercategoryprogress_lastactivity ON public."UserCategoryProgress" USING btree ("lastActivity");


--
-- Name: idx_usercategoryprogress_maincategory; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_usercategoryprogress_maincategory ON public."UserCategoryProgress" USING btree ("mainCategory");


--
-- Name: idx_usercategoryprogress_subcategory; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_usercategoryprogress_subcategory ON public."UserCategoryProgress" USING btree ("subCategory");


--
-- Name: idx_usercategoryprogress_userid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_usercategoryprogress_userid ON public."UserCategoryProgress" USING btree ("userId");


--
-- Name: idx_usercategoryprogress_userid_maincategory_subcategory; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX idx_usercategoryprogress_userid_maincategory_subcategory ON public."UserCategoryProgress" USING btree ("userId", "mainCategory", "subCategory");


--
-- Name: idx_usercodesolution_blockid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_usercodesolution_blockid ON public."UserCodeSolution" USING btree ("blockId");


--
-- Name: idx_usercodesolution_userid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_usercodesolution_userid ON public."UserCodeSolution" USING btree ("userId");


--
-- Name: idx_usercodesolution_userid_blockid_languageid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX idx_usercodesolution_userid_blockid_languageid ON public."UserCodeSolution" USING btree ("userId", "blockId", "languageId");


--
-- Name: idx_usercontentprogress_blockid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_usercontentprogress_blockid ON public."UserContentProgress" USING btree ("blockId");


--
-- Name: idx_usercontentprogress_userid_blockid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX idx_usercontentprogress_userid_blockid ON public."UserContentProgress" USING btree ("userId", "blockId");


--
-- Name: idx_userpathprogress_lastactivity; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_userpathprogress_lastactivity ON public."UserPathProgress" USING btree ("lastActivity");


--
-- Name: idx_userpathprogress_pathid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_userpathprogress_pathid ON public."UserPathProgress" USING btree ("pathId");


--
-- Name: idx_userpathprogress_userid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_userpathprogress_userid ON public."UserPathProgress" USING btree ("userId");


--
-- Name: idx_userpathprogress_userid_pathid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX idx_userpathprogress_userid_pathid ON public."UserPathProgress" USING btree ("userId", "pathId");


--
-- Name: idx_usertheoryprogress_cardid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_usertheoryprogress_cardid ON public."UserTheoryProgress" USING btree ("cardId");


--
-- Name: idx_usertheoryprogress_cardstate; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_usertheoryprogress_cardstate ON public."UserTheoryProgress" USING btree ("cardState");


--
-- Name: idx_usertheoryprogress_duedate; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_usertheoryprogress_duedate ON public."UserTheoryProgress" USING btree ("dueDate");


--
-- Name: idx_usertheoryprogress_userid_cardid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX idx_usertheoryprogress_userid_cardid ON public."UserTheoryProgress" USING btree ("userId", "cardId");


--
-- Name: CodeExecution CodeExecution_blockId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CodeExecution"
    ADD CONSTRAINT "CodeExecution_blockId_fkey" FOREIGN KEY ("blockId") REFERENCES public."ContentBlock"(id) ON DELETE CASCADE;


--
-- Name: CodeExecution CodeExecution_languageId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CodeExecution"
    ADD CONSTRAINT "CodeExecution_languageId_fkey" FOREIGN KEY ("languageId") REFERENCES public."SupportedLanguage"(id) ON DELETE CASCADE;


--
-- Name: CodeExecution CodeExecution_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CodeExecution"
    ADD CONSTRAINT "CodeExecution_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON DELETE CASCADE;


--
-- Name: ContentBlock ContentBlock_fileId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ContentBlock"
    ADD CONSTRAINT "ContentBlock_fileId_fkey" FOREIGN KEY ("fileId") REFERENCES public."ContentFile"(id) ON DELETE CASCADE;


--
-- Name: TaskAttempt TaskAttempt_blockId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TaskAttempt"
    ADD CONSTRAINT "TaskAttempt_blockId_fkey" FOREIGN KEY ("blockId") REFERENCES public."ContentBlock"(id) ON DELETE CASCADE;


--
-- Name: TaskAttempt TaskAttempt_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TaskAttempt"
    ADD CONSTRAINT "TaskAttempt_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON DELETE CASCADE;


--
-- Name: TaskSolution TaskSolution_blockId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TaskSolution"
    ADD CONSTRAINT "TaskSolution_blockId_fkey" FOREIGN KEY ("blockId") REFERENCES public."ContentBlock"(id) ON DELETE CASCADE;


--
-- Name: TaskSolution TaskSolution_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TaskSolution"
    ADD CONSTRAINT "TaskSolution_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON DELETE CASCADE;


--
-- Name: TestCase TestCase_blockId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TestCase"
    ADD CONSTRAINT "TestCase_blockId_fkey" FOREIGN KEY ("blockId") REFERENCES public."ContentBlock"(id) ON DELETE CASCADE;


--
-- Name: TestValidationResult TestValidationResult_attemptId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TestValidationResult"
    ADD CONSTRAINT "TestValidationResult_attemptId_fkey" FOREIGN KEY ("attemptId") REFERENCES public."TaskAttempt"(id) ON DELETE CASCADE;


--
-- Name: TestValidationResult TestValidationResult_testCaseId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TestValidationResult"
    ADD CONSTRAINT "TestValidationResult_testCaseId_fkey" FOREIGN KEY ("testCaseId") REFERENCES public."TestCase"(id) ON DELETE CASCADE;


--
-- Name: UserCategoryProgress UserCategoryProgress_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserCategoryProgress"
    ADD CONSTRAINT "UserCategoryProgress_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON DELETE CASCADE;


--
-- Name: UserCodeSolution UserCodeSolution_blockId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserCodeSolution"
    ADD CONSTRAINT "UserCodeSolution_blockId_fkey" FOREIGN KEY ("blockId") REFERENCES public."ContentBlock"(id) ON DELETE CASCADE;


--
-- Name: UserCodeSolution UserCodeSolution_languageId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserCodeSolution"
    ADD CONSTRAINT "UserCodeSolution_languageId_fkey" FOREIGN KEY ("languageId") REFERENCES public."SupportedLanguage"(id) ON DELETE CASCADE;


--
-- Name: UserCodeSolution UserCodeSolution_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserCodeSolution"
    ADD CONSTRAINT "UserCodeSolution_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON DELETE CASCADE;


--
-- Name: UserContentProgress UserContentProgress_blockId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserContentProgress"
    ADD CONSTRAINT "UserContentProgress_blockId_fkey" FOREIGN KEY ("blockId") REFERENCES public."ContentBlock"(id) ON DELETE CASCADE;


--
-- Name: UserContentProgress UserContentProgress_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserContentProgress"
    ADD CONSTRAINT "UserContentProgress_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON DELETE CASCADE;


--
-- Name: UserPathProgress UserPathProgress_pathId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserPathProgress"
    ADD CONSTRAINT "UserPathProgress_pathId_fkey" FOREIGN KEY ("pathId") REFERENCES public."LearningPath"(id) ON DELETE CASCADE;


--
-- Name: UserPathProgress UserPathProgress_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserPathProgress"
    ADD CONSTRAINT "UserPathProgress_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON DELETE CASCADE;


--
-- Name: UserTheoryProgress UserTheoryProgress_cardId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserTheoryProgress"
    ADD CONSTRAINT "UserTheoryProgress_cardId_fkey" FOREIGN KEY ("cardId") REFERENCES public."TheoryCard"(id) ON DELETE CASCADE;


--
-- Name: UserTheoryProgress UserTheoryProgress_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserTheoryProgress"
    ADD CONSTRAINT "UserTheoryProgress_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

