import React, { useCallback, useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Mic, 
  Building2, 
  BookOpen, 
  CheckCircle, 
  Code,
  Clock,
  Brain,
  ExternalLink,
  PlayCircle,
  FileText
} from 'lucide-react';
import type { UniversalContentItem } from '@/shared/types/learning';
import { CONTENT_TYPE_CONFIG } from '@/shared/types/learning';
import { useLearningStore } from '@/pages/Learning/model/learningStore';
import styles from './UniversalContentCard.module.scss';

interface UniversalContentCardProps {
  item: UniversalContentItem;
  viewMode: 'cards' | 'list' | 'compact';
  interviewCounts?: Record<string, number>;
}

export const UniversalContentCard: React.FC<UniversalContentCardProps> = ({ 
  item, 
  viewMode,
  interviewCounts = {}
}) => {
  const navigate = useNavigate();
  const config = CONTENT_TYPE_CONFIG[item.type];
  const { updateFilters } = useLearningStore();
  
  const [showAnswer, setShowAnswer] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  const previewTimerRef = useRef<NodeJS.Timeout | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ localStorage –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏
  const getProgress = () => {
    if (item.type !== 'practice') return false;
    const progress = localStorage.getItem('practice_progress');
    if (!progress) return false;
    try {
      const progressData = JSON.parse(progress);
      return progressData[item.id] === true;
    } catch {
      return false;
    }
  };

  const isCompleted = getProgress();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const getFullContent = () => {
    if (item.type === 'interviews') {
      const originalData = item.metadata.originalData;
      return item.metadata.fullContent || (originalData && 'content' in originalData ? originalData.content as string : '') || '';
    }
    if (item.type === 'practice') {
      return item.metadata.textContent || '';
    }
    return '';
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–≤—å—é —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏
  const canShowPreview = (item.type === 'interviews' || item.type === 'practice') && getFullContent();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–µ–≤—å—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  const handleMouseEnter = useCallback(() => {
    if (!canShowPreview) return;
    previewTimerRef.current = setTimeout(() => {
      setShowPreview(true);
    }, 500);
  }, [canShowPreview]);

  const handleMouseLeave = useCallback(() => {
    if (previewTimerRef.current) {
      clearTimeout(previewTimerRef.current);
      previewTimerRef.current = null;
    }
    setShowPreview(false);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
  const handleCardClick = useCallback(() => {
    switch (item.type) {
      case 'interviews':
        navigate(`/interviews/${item.id}`);
        break;
      case 'questions':
        // –ö–æ–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        navigator.clipboard.writeText(item.title);
        break;
      case 'practice':
        navigate(`/code-editor?blockId=${item.id}`);
        break;
      case 'theory':
        // –î–ª—è —Ç–µ–æ—Ä–∏–∏ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–∫–∞–∑ –æ—Ç–≤–µ—Ç–∞ –≤–º–µ—Å—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        setShowAnswer(prev => !prev);
        break;
    }
  }, [item, navigate]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é-—Ç–µ–≥ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
  const handleInterviewTagClick = useCallback((e: React.MouseEvent, interviewId: string) => {
    e.stopPropagation();
    updateFilters({
      categories: [],
      clusters: [],
      companies: [],
      search: `interview:${interviewId}`
    });
  }, [updateFilters]);

  // –†–µ–Ω–¥–µ—Ä –∏–∫–æ–Ω–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  const renderTypeIcon = () => {
    switch (item.type) {
      case 'interviews':
        return item.hasAudio ? <Mic size={16} /> : <Building2 size={16} />;
      case 'questions':
        return <Brain size={16} />;
      case 'practice':
        return <Code size={16} />;
      case 'theory':
        return <BookOpen size={16} />;
    }
  };

  // –†–µ–Ω–¥–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  const renderMetaInfo = () => {
    const metaItems = [];

    if (item.company) {
      metaItems.push(
        <span key="company" className={styles.metaItem}>
          <Building2 size={14} />
          {item.company}
        </span>
      );
    }

    if (item.category) {
      metaItems.push(
        <span key="category" className={styles.metaItem}>
          üìÅ {item.category}
        </span>
      );
    }

    if (item.subCategory) {
      metaItems.push(
        <span key="subcategory" className={styles.metaItem}>
          üìÇ {item.subCategory}
        </span>
      );
    }

    // –ó–Ω–∞—á–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
    // if (item.difficulty) {
    //   ...
    // }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é
    if (item.type === 'interviews') {
      if (item.metadata?.duration) {
        metaItems.push(
          <span key="duration" className={styles.metaItem}>
            <Clock size={14} />
            {item.metadata.duration} –º–∏–Ω
          </span>
        );
      }
      
      const technologies = item.metadata.technologies;
      if (technologies && technologies.length > 0) {
        metaItems.push(
          <span key="tech" className={styles.metaItem}>
            <Code size={14} />
            {technologies.slice(0, 2).join(', ')}
            {technologies.length > 2 ? '...' : ''}
          </span>
        );
      }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ - —É–±–∏—Ä–∞–µ–º —Ç–µ–≥ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    // if (item.type === 'practice' && item.codeLanguage) {
    //   metaItems.push(
    //     <span key="language" className={styles.metaItem}>
    //       <Code2 size={14} />
    //       {item.codeLanguage.toUpperCase()}
    //     </span>
    //   );
    // }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–µ–æ—Ä–∏–∏
    if (item.type === 'theory' && item.metadata?.cardType) {
      metaItems.push(
        <span key="cardtype" className={styles.metaItem}>
          üìö {item.metadata.cardType}
        </span>
      );
    }

    if (item.isCompleted || isCompleted) {
      metaItems.push(
        <span key="completed" className={styles.completed}>
          <CheckCircle size={14} />
          {item.type === 'practice' ? '–†–µ—à–µ–Ω–æ' : '–ò–∑—É—á–µ–Ω–æ'}
        </span>
      );
    }

    if (item.hasAudio) {
      metaItems.push(
        <span key="audio" className={styles.hasAudio}>
          <PlayCircle size={14} />
          –ï—Å—Ç—å –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –∑–∞–ø–∏—Å—å
        </span>
      );
    }

    return metaItems;
  };

  // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥
  if (viewMode === 'compact') {
    return (
      <div 
        className={`${styles.cardCompact} ${styles[item.type]}`}
        onClick={handleCardClick}
      >
        <div className={styles.compactLeft}>
          <span className={styles.typeIcon}>{renderTypeIcon()}</span>
          <span className={styles.title}>{item.title}</span>
        </div>
        <div className={styles.compactRight}>
          {renderMetaInfo()}
        </div>
      </div>
    );
  }

  // –í–∏–¥ —Å–ø–∏—Å–∫–æ–º
  if (viewMode === 'list') {
    return (
      <div 
        className={`${styles.cardList} ${styles[item.type]}`}
        onClick={handleCardClick}
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
      >
        <div className={styles.listLeft}>
          <div className={styles.typeIndicator} style={{ backgroundColor: config.color }}>
            {renderTypeIcon()}
          </div>
          <div className={styles.listContent}>
            <h3 className={styles.title}>{item.title}</h3>
            {item.type === 'theory' && showAnswer ? (
              <div className={styles.theoryAnswer}>
                <p className={styles.answerLabel}>–û—Ç–≤–µ—Ç:</p>
                <div 
                  className={styles.answerContent}
                  dangerouslySetInnerHTML={{ __html: item.metadata?.answerBlock || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞' }}
                />
              </div>
            ) : (
              item.description && (
                <p className={styles.description}>{item.description}</p>
              )
            )}
            <div className={styles.meta}>
              {renderMetaInfo()}
            </div>
            {/* –ò–Ω—Ç–µ—Ä–≤—å—é-—Ç–µ–≥–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ */}
            {item.type === 'questions' && item.metadata.interviewInfo ? (() => {
              const interviewInfo = item.metadata.interviewInfo;
              if (!interviewInfo || !interviewInfo.id || !interviewInfo.formattedName) return null;
              return (
                <div className={styles.interviewTag}>
                  <button
                    className={styles.interviewBadge}
                    onClick={(e) => handleInterviewTagClick(e, interviewInfo.id)}
                    title={`–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ ${interviewInfo.formattedName}`}
                  >
                    <FileText size={12} />
                    <span>
                      {interviewInfo.formattedName}
                      {interviewCounts[interviewInfo.id] > 1 && (
                        <span className={styles.interviewCount}>
                          {' '}‚Ä¢ {interviewCounts[interviewInfo.id]} –≤–æ–ø—Ä
                        </span>
                      )}
                    </span>
                  </button>
                </div>
              );
            })() : null}
          </div>
        </div>
        <div className={styles.listActions}>
          {item.type === 'interviews' && (
            <button className={styles.actionBtn}>
              <ExternalLink size={16} />
            </button>
          )}
        </div>
        
        {/* –ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */}
        {showPreview && canShowPreview && (
          <div className={styles.contentPreview}>
            <div className={styles.previewContent}>
              <div className={styles.previewHeader}>
                {item.type === 'interviews' ? 'üìÑ –ü–æ–ª–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é' : 'üíª –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'}
              </div>
              <div className={styles.previewText}>
{String(getFullContent() || '')}
              </div>
            </div>
          </div>
        )}
      </div>
    );
  }

  // –í–∏–¥ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  return (
    <div 
      className={`${styles.card} ${styles[item.type]}`}
      onClick={handleCardClick}
    >
      <div className={styles.cardHeader}>
        <div 
          className={styles.typeLabel}
          style={{ backgroundColor: config.color }}
        >
          {renderTypeIcon()}
          <span>{config.label}</span>
        </div>
        {item.hasAudio && (
          <span className={styles.audioBadge}>
            <Mic size={14} />
          </span>
        )}
        {item.isCompleted && (
          <span className={styles.completedBadge}>
            <CheckCircle size={14} />
          </span>
        )}
      </div>

      <div className={styles.cardBody}>
        <h3 className={styles.title}>{item.title}</h3>
        
        {item.description && (
          <p className={styles.description}>
            {item.description.length > 150 
              ? `${item.description.substring(0, 150)}...` 
              : item.description}
          </p>
        )}

        <div className={styles.meta}>
          {renderMetaInfo()}
        </div>

        {item.tags && item.tags.length > 0 && (
          <div className={styles.tags}>
            {item.tags.slice(0, 3).map(tag => (
              <span key={tag} className={styles.tag}>
                #{tag}
              </span>
            ))}
            {item.tags.length > 3 && (
              <span className={styles.moreTag}>
                +{item.tags.length - 3}
              </span>
            )}
          </div>
        )}
      </div>

      <div className={styles.cardFooter}>
        <button 
          className={styles.primaryAction}
          onClick={(e) => {
            e.stopPropagation();
            handleCardClick();
          }}
        >
          {item.type === 'interviews' && '–ß–∏—Ç–∞—Ç—å'}
          {item.type === 'questions' && '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}
          {item.type === 'practice' && '–†–µ—à–∞—Ç—å'}
          {item.type === 'theory' && '–ò–∑—É—á–∞—Ç—å'}
        </button>
      </div>
    </div>
  );
};