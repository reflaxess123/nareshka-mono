import { TechnologySwitcher } from '@/features/TechnologySwitcher';
import { useGenerateMindmapApiV2MindmapGenerateGet, useGetCategoriesApiV2InterviewCategoriesGet } from '@/shared/api/generated/api';
import { BottomNavBar } from '@/shared/components/BottomNavBar';
import type { TechnologyType } from '@/types/mindmap';
import {
  Background,
  Controls,
  type Edge,
  MiniMap,
  type Node,
  type NodeTypes,
  ReactFlow,
  useEdgesState,
  useNodesState,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';
import React, { useCallback, useEffect, useState } from 'react';
import { useSearchParams } from 'react-router-dom';
import { TaskDetailModal } from '@/widgets/TaskDetailModal';
import { CenterNode, TopicNode } from '@/features/visualizations/MindMapNodes';
import { MindMapProgressSidebar } from '@/widgets/MindMapProgressSidebar';
import { InterviewRootNode, InterviewCategoryNode } from '@/features/visualizations/InterviewMapNodes';
import { InterviewCategorySidebar } from '@/widgets/InterviewCategorySidebar';
import { useTaskDetails } from '../../../hooks/useMindMap';
import styles from './MindMapPage.module.scss';

interface MindMapData {
  nodes: Node[];
  edges: Edge[];
  layout: string;
  total_nodes: number;
  total_edges: number;
  structure_type: string;
  active_topics: number;
  applied_filters: {
    difficulty?: string;
    topic?: string;
  };
  overall_progress?: {
    totalTasks: number;
    completedTasks: number;
    completionRate: number;
  } | null;
}

interface SelectedTopicData {
  key: string;
  title: string;
  description: string;
  color: string;
  icon: string;
}

const defaultNodeTypes: NodeTypes = {
  center: CenterNode,
  centerNode: CenterNode,
  topic: TopicNode,
  topicNode: TopicNode,
  conceptNode: TopicNode,
};

const interviewNodeTypes: NodeTypes = {
  interviewRoot: InterviewRootNode,
  interviewCategory: InterviewCategoryNode,
};

const NewMindMapPage: React.FC = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const [nodes, setNodes, onNodesChange] = useNodesState<Node>([]);

  // –ü–æ–¥–∞–≤–ª—è–µ–º ResizeObserver –æ—à–∏–±–∫–∏ (—ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ React Flow)
  useEffect(() => {
    const originalError = console.error;
    console.error = (...args) => {
      if (args[0]?.includes?.('ResizeObserver loop completed')) {
        return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º ResizeObserver –æ—à–∏–±–∫–∏
      }
      originalError(...args);
    };
    return () => {
      console.error = originalError;
    };
  }, []);
  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge>([]);
  const [selectedTopic, setSelectedTopic] = useState<SelectedTopicData | null>(
    null
  );
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [theoreticalTaskId, setTheoreticalTaskId] = useState<string | null>(
    null
  );
  const { task: theoreticalTaskDetail } = useTaskDetails(theoreticalTaskId);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const currentTechnology = (searchParams.get('tech') as TechnologyType) || 'javascript';

  console.log('üéÜ Current Technology:', currentTechnology, 'is interviews?', currentTechnology === 'interviews');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
  const selectedCategoryId = searchParams.get('category');
  const [selectedCategory, setSelectedCategory] = useState<{
    id: string;
    name: string;
    questionsCount: number;
    clustersCount: number;
    percentage: number;
  } | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω—Ç–µ—Ä–≤—å—é —á–µ—Ä–µ–∑ API
  const queryResult = useGetCategoriesApiV2InterviewCategoriesGet({
    query: {
      enabled: currentTechnology === 'interviews'
    }
  });

  console.log('üîß Full React Query result:', {
    queryResult: Object.keys(queryResult),
    data: queryResult.data,
    isLoading: queryResult.isLoading,
    error: queryResult.error,
    isSuccess: queryResult.isSuccess,
    status: queryResult.status
  });

  const {
    data: interviewCategoriesResponse,
    isLoading: interviewCategoriesLoading,
    error: interviewCategoriesError
  } = queryResult;

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è React Flow
  const interviewsData = React.useMemo(() => {
    if (!interviewCategoriesResponse || !Array.isArray(interviewCategoriesResponse)) {
      return {
        nodes: [],
        edges: [],
        data: { categories: [], nodes: [], edges: [] },
        isLoading: interviewCategoriesLoading,
        error: interviewCategoriesError
      };
    }

    const categories = interviewCategoriesResponse;
    const totalQuestions = categories.reduce((sum, cat) => sum + (cat.questions_count || 0), 0);
    const totalClusters = categories.reduce((sum, cat) => sum + (cat.clusters_count || 0), 0);

    // –ò–¥–µ–∞–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è React Flow
    // React Flow –ª—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å fitView, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    const centerX = 0;
    const centerY = 0;

    const rootNode = {
      id: 'root',
      type: 'interviewRoot',
      position: { x: centerX, y: centerY },
      data: {
        totalQuestions,
        totalClusters,
        totalCategories: categories.length
      }
    };

    // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫—Ä—É–≥—É
    const categoryNodes = categories.map((category, index) => {
      // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è (12 —á–∞—Å–æ–≤) –∏ –¥–≤–∏–≥–∞–µ–º—Å—è –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ
      const angle = (2 * Math.PI * index) / categories.length - Math.PI / 2;

      // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–¥–∏—É—Å –¥–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å —á—Ç–æ–±—ã –Ω–µ –Ω–∞–ª–µ–∑–∞–ª–∏: ~450px
      const radius = 550;

      const x = centerX + radius * Math.cos(angle);
      const y = centerY + radius * Math.sin(angle);

      return {
        id: category.id.toString(),
        type: 'interviewCategory',
        position: { x, y },
        data: {
          id: category.id.toString(),
          name: category.name,
          questionsCount: category.questions_count || 0,
          clustersCount: category.clusters_count || 0,
          percentage: category.percentage || 0
        }
      };
    });

    const nodes = [rootNode, ...categoryNodes];

    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const edges = categoryNodes.map((node, index) => ({
      id: `e${index + 1}`,
      source: 'root',
      target: node.id
    }));

    return {
      nodes,
      edges,
      data: {
        categories: categories.map(cat => ({
          id: cat.id.toString(),
          name: cat.name,
          questionsCount: cat.questions_count || 0,
          clustersCount: cat.clusters_count || 0,
          percentage: cat.percentage || 0
        })),
        nodes,
        edges
      },
      isLoading: interviewCategoriesLoading,
      error: interviewCategoriesError
    };
  }, [interviewCategoriesResponse, interviewCategoriesLoading, interviewCategoriesError]);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º generated hook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö mindmap
  const {
    data: mindMapResponse,
    isLoading: mindMapLoading,
    error: mindMapError,
  } = useGenerateMindmapApiV2MindmapGenerateGet(
    currentTechnology !== 'interviews' ? {
      technology: currentTechnology,
      structure_type: 'topics',
    } : undefined,
    {
      query: {
        enabled: currentTechnology !== 'interviews'
      }
    }
  );

  const mindMapData = mindMapResponse?.data as MindMapData | undefined;

  // –í—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  const isInterviewsMode = currentTechnology === 'interviews';
  const loading = isInterviewsMode ? interviewsData.isLoading : mindMapLoading;
  const error = isInterviewsMode ? interviewsData.error : mindMapError;
  const nodeTypes = isInterviewsMode ? interviewNodeTypes : defaultNodeTypes;

  const handleTechnologyChange = useCallback((technology: TechnologyType) => {
    const newParams = new URLSearchParams(searchParams);
    newParams.set('tech', technology);
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    if (newParams.has('category')) {
      newParams.delete('category');
    }
    setSearchParams(newParams);
    setSelectedCategory(null);
  }, [searchParams, setSearchParams]);

  const onNodeClick = useCallback((_event: React.MouseEvent, node: Node) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è interviews —Ä–µ–∂–∏–º–∞
    if (currentTechnology === 'interviews') {
      if (node.type === 'interviewCategory') {
        const categoryData = {
          id: node.data.id as string,
          name: node.data.name as string,
          questionsCount: node.data.questionsCount as number,
          clustersCount: node.data.clustersCount as number,
          percentage: node.data.percentage as number
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º category
        const newParams = new URLSearchParams(searchParams);
        newParams.set('tech', 'interviews');
        newParams.set('category', categoryData.id);
        setSearchParams(newParams);

        setSelectedCategory(categoryData);
      }
      return;
    }

    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
    if (node.type === 'topic' && node.data.topic_key) {
      const topicData: SelectedTopicData = {
        key: node.data.topic_key as string,
        title: node.data.title as string,
        description: node.data.description as string,
        color: node.data.color as string,
        icon: node.data.icon as string,
      };
      setSelectedTopic(topicData);
      setIsSidebarOpen(true);
    }
  }, [currentTechnology, searchParams, setSearchParams]);

  const handleCloseSidebar = useCallback(() => {
    setIsSidebarOpen(false);
    setSelectedTopic(null);
  }, []);

  const handleTaskClick = useCallback((taskId: string) => {
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É –∫–æ–¥–∞
    window.location.href = `/code-editor?blockId=${taskId}`;
  }, []);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º selectedCategory —Å URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
  useEffect(() => {
    if (currentTechnology === 'interviews' && selectedCategoryId && interviewsData.data) {
      // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ nodes
      const categoryNode = interviewsData.data.nodes.find(
        (node) => node.type === 'interviewCategory' && 
        'id' in node.data && node.data.id === selectedCategoryId
      );

      if (categoryNode && categoryNode.type === 'interviewCategory' && (!selectedCategory || selectedCategory.id !== selectedCategoryId)) {
        const nodeData = categoryNode.data;
        if ('id' in nodeData && 'name' in nodeData && 'questionsCount' in nodeData && 'clustersCount' in nodeData && 'percentage' in nodeData) {
          setSelectedCategory({
            id: nodeData.id as string,
            name: nodeData.name as string,
            questionsCount: nodeData.questionsCount as number,
            clustersCount: nodeData.clustersCount as number,
            percentage: nodeData.percentage as number
          });
        }
      }
    } else if (!selectedCategoryId && selectedCategory) {
      // –ï—Å–ª–∏ –≤ URL –Ω–µ—Ç category, –Ω–æ –≤ state –µ—Å—Ç—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
      setSelectedCategory(null);
    }
  }, [selectedCategoryId, currentTechnology, interviewsData, selectedCategory]);

  // –û–±–Ω–æ–≤–ª—è–µ–º nodes –∏ edges –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (isInterviewsMode) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é
      if (interviewsData.nodes && interviewsData.edges) {
        setNodes(interviewsData.nodes);
        setEdges(interviewsData.edges);
      }
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ mindmap –¥–∞–Ω–Ω—ã–µ
      if (mindMapData?.nodes && mindMapData?.edges) {
        setNodes(mindMapData.nodes);
        setEdges(mindMapData.edges);
      }
    }
  }, [mindMapData, interviewsData, isInterviewsMode, setNodes, setEdges]);

  if (loading) {
    return (
      <div
        style={{
          width: '100vw',
          height: '100vh',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          fontSize: '18px',
          color: '#666',
        }}
      >
        üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ MindMap...
      </div>
    );
  }

  if (error) {
    return (
      <div
        style={{
          width: '100vw',
          height: '100vh',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          fontSize: '18px',
          color: '#666',
        }}
      >
        ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:{' '}
        {error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'}
      </div>
    );
  }

  if (isInterviewsMode && (!interviewsData.nodes || interviewsData.nodes.length === 0)) {
    return (
      <div
        style={{
          width: '100vw',
          height: '100vh',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          fontSize: '18px',
          color: '#666',
        }}
      >
        ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      </div>
    );
  }

  if (!isInterviewsMode && !mindMapData) {
    return (
      <div
        style={{
          width: '100vw',
          height: '100vh',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          fontSize: '18px',
          color: '#666',
        }}
      >
        ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      </div>
    );
  }

  return (
    <div className={styles.mindmapContainer}>
      <div className={styles.technologySwitcherWrapper}>
        <TechnologySwitcher
          currentTechnology={currentTechnology}
          onTechnologyChange={handleTechnologyChange}
        />
      </div>


      <div
        style={{
          width: isSidebarOpen ? 'calc(100% - 400px)' : '100%',
          height: '100%',
          transition: 'width 0.3s ease-in-out',
        }}
      >
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onNodeClick={onNodeClick}
          nodeTypes={nodeTypes}
          fitView
          fitViewOptions={{
            padding: 0.15, // –ë–æ–ª—å—à–µ –ø–∞–¥–¥–∏–Ω–≥–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ–±—Ä–∞–º–ª–µ–Ω–∏—è
            includeHiddenNodes: false,
            maxZoom: 1.2 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–≤—Ç–æ-–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
          }}
          defaultViewport={{ x: 0, y: 0, zoom: 0.9 }}
          minZoom={0.4}
          maxZoom={1.8}
          deleteKeyCode={null}
          multiSelectionKeyCode={null}
          panOnDrag={true}
          zoomOnScroll={true}
          zoomOnPinch={true}
          panOnScroll={false}
          elementsSelectable={true}
          nodesDraggable={true}
          nodesConnectable={false}
          nodesFocusable={true}
          className={styles.reactFlow}
        >
          <Background color="#f1f5f9" gap={20} />
          <div
            className={styles.controlsBottomLeft + ' ' + styles.hideOnMobile}
          >
            <Controls showInteractive={false} />
          </div>
          <div
            className={styles.miniMapBottomRight + ' ' + styles.hideOnMobile}
          >
            <MiniMap
              nodeColor={(node) => {
                const data = node.data as { color?: string };
                return (data.color as string) || '#e2e8f0';
              }}
              maskColor="rgba(0, 0, 0, 0.05)"
              pannable
              zoomable
            />
          </div>
        </ReactFlow>
      </div>

      {!isInterviewsMode && (
        <MindMapProgressSidebar
          isOpen={isSidebarOpen}
          onClose={handleCloseSidebar}
          selectedTopic={selectedTopic}
          currentTechnology={currentTechnology}
          onTaskClick={handleTaskClick}
          onTheoreticalTaskClick={setTheoreticalTaskId}
        />
      )}

      <TaskDetailModal
        isOpen={!!theoreticalTaskId}
        onClose={() => setTheoreticalTaskId(null)}
        task={theoreticalTaskDetail}
      />

      {currentTechnology === 'interviews' && selectedCategory && (
        <InterviewCategorySidebar
          isOpen={!!selectedCategory}
          onClose={() => {
            // –£–¥–∞–ª—è–µ–º category –∏–∑ URL –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ sidebar
            const newParams = new URLSearchParams(searchParams);
            if (newParams.has('category')) {
              newParams.delete('category');
            }
            setSearchParams(newParams);
            // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º setSelectedCategory(null) –∑–¥–µ—Å—å -
            // useEffect —Å–∞–º —Å–±—Ä–æ—Å–∏—Ç state –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL
          }}
          categoryId={selectedCategory.id}
          categoryName={selectedCategory.name}
          questionsCount={selectedCategory.questionsCount}
          clustersCount={selectedCategory.clustersCount}
          percentage={selectedCategory.percentage}
        />
      )}

      <div className={styles.mobileNav}>
        <BottomNavBar />
      </div>
    </div>
  );
};

export default NewMindMapPage;
