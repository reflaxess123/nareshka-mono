import { ButtonVariant } from '@/shared/components/Button/model/types';
import { Button } from '@/shared/components/Button/ui/Button';
import { PageWrapper } from '@/shared/components/PageWrapper/ui/PageWrapper';
import { Text, TextSize } from '@/shared/components/Text';
import { useDetailedStats } from '@/shared/hooks/useAdminAPI';
import { BarChart3, FileText, Target, TrendingUp, Users } from 'lucide-react';
import styles from './DetailedStats.module.scss';

export const DetailedStats = () => {
  const {
    data: stats,
    isLoading: loading,
    error,
    refetch,
  } = useDetailedStats();

  const formatTime = (minutes: number) => {
    if (minutes < 60) return `${Math.round(minutes)} –º–∏–Ω`;
    const hours = Math.floor(minutes / 60);
    const mins = Math.round(minutes % 60);
    return `${hours}—á ${mins}–º`;
  };

  const formatUptime = (hours: number) => {
    if (hours < 24) return `${Math.round(hours)} —á`;
    const days = Math.floor(hours / 24);
    const remainingHours = Math.round(hours % 24);
    return `${days}–¥ ${remainingHours}—á`;
  };

  const formatPercentage = (value: number) => {
    return `${(value * 100).toFixed(1)}%`;
  };

  if (loading) {
    return (
      <PageWrapper>
        <div className={styles.detailedStats}>
          <div className={styles.loading}>
            <BarChart3 size={48} className={styles.loadingIcon} />
            <Text
              text="üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."
              size={TextSize.LG}
            />
          </div>
        </div>
      </PageWrapper>
    );
  }

  if (error || !stats) {
    return (
      <PageWrapper>
        <div className={styles.detailedStats}>
          <div className={styles.error}>
            <Text text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏" size={TextSize.LG} />
            <Text
              text={error instanceof Error ? error.message : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
              size={TextSize.MD}
            />
            <Button onClick={() => refetch()} variant={ButtonVariant.PRIMARY}>
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </div>
        </div>
      </PageWrapper>
    );
  }

  return (
    <PageWrapper>
      <div className={styles.detailedStats}>
        <div className={styles.header}>
          <div className={styles.titleSection}>
            <BarChart3 size={32} className={styles.titleIcon} />
            <div>
              <Text text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" size={TextSize.LG} />
              <Text
                text="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
                size={TextSize.MD}
                className={styles.subtitle}
              />
            </div>
          </div>

          <div className={styles.actions}>
            <Button
              onClick={() => refetch()}
              variant={ButtonVariant.SECONDARY}
              disabled={loading}
            >
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
            <button className={styles.actionButton}>
              üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </button>
            <button className={styles.actionButton}>
              üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            </button>
          </div>
        </div>

        <div className={styles.statsGrid}>
          {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ */}
          <div className={styles.statsSection}>
            <div className={styles.sectionHeader}>
              <Users size={24} />
              <Text text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" size={TextSize.LG} />
            </div>

            <div className={styles.metricsGrid}>
              <div className={styles.metricCard}>
                <div className={styles.metricValue}>{stats.users.total}</div>
                <div className={styles.metricLabel}>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
              </div>

              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {stats.users.activeThisMonth}
                </div>
                <div className={styles.metricLabel}>–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤ –º–µ—Å—è—Ü–µ</div>
              </div>

              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {stats.users.newThisWeek}
                </div>
                <div className={styles.metricLabel}>–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é</div>
              </div>

              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {formatTime(stats.users.avgSessionTime)}
                </div>
                <div className={styles.metricLabel}>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏</div>
              </div>
            </div>
          </div>

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
          <div className={styles.statsSection}>
            <div className={styles.sectionHeader}>
              <FileText size={24} />
              <Text text="üìö –ö–æ–Ω—Ç–µ–Ω—Ç" size={TextSize.LG} />
            </div>

            <div className={styles.metricsGrid}>
              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {stats.content.totalBlocks}
                </div>
                <div className={styles.metricLabel}>–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤</div>
              </div>

              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {stats.content.totalTheoryCards}
                </div>
                <div className={styles.metricLabel}>–ö–∞—Ä—Ç–æ—á–µ–∫ —Ç–µ–æ—Ä–∏–∏</div>
              </div>

              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {stats.content.categoriesCount}
                </div>
                <div className={styles.metricLabel}>–ö–∞—Ç–µ–≥–æ—Ä–∏–π</div>
              </div>

              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {stats.content.avgBlocksPerFile.toFixed(1)}
                </div>
                <div className={styles.metricLabel}>–ë–ª–æ–∫–æ–≤ –Ω–∞ —Ñ–∞–π–ª</div>
              </div>
            </div>
          </div>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
          <div className={styles.statsSection}>
            <div className={styles.sectionHeader}>
              <Target size={24} />
              <Text text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å" size={TextSize.LG} />
            </div>

            <div className={styles.metricsGrid}>
              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {stats.progress.totalContentProgress}
                </div>
                <div className={styles.metricLabel}>–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞</div>
              </div>

              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {stats.progress.totalTheoryProgress}
                </div>
                <div className={styles.metricLabel}>–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–æ—Ä–∏–∏</div>
              </div>

              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {stats.progress.avgProgressPerUser.toFixed(1)}
                </div>
                <div className={styles.metricLabel}>
                  –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                </div>
              </div>
            </div>

            {/* –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
            {stats.progress.mostActiveUsers.length > 0 && (
              <div className={styles.topList}>
                <Text
                  text="üèÜ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
                  size={TextSize.MD}
                />
                <div className={styles.topItems}>
                  {stats.progress.mostActiveUsers
                    .slice(0, 5)
                    .map((user, index) => (
                      <div key={user.email} className={styles.topItem}>
                        <span className={styles.topRank}>#{index + 1}</span>
                        <span className={styles.topName}>{user.email}</span>
                        <span className={styles.topValue}>
                          {user.progressCount}
                        </span>
                      </div>
                    ))}
                </div>
              </div>
            )}
          </div>

          {/* –°–∏—Å—Ç–µ–º–∞ */}
          <div className={styles.statsSection}>
            <div className={styles.sectionHeader}>
              <TrendingUp size={24} />
              <Text text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞" size={TextSize.LG} />
            </div>

            <div className={styles.metricsGrid}>
              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {formatUptime(stats.system.uptime)}
                </div>
                <div className={styles.metricLabel}>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
              </div>

              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {stats.system.responseTime}–º—Å
                </div>
                <div className={styles.metricLabel}>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞</div>
              </div>

              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {formatPercentage(stats.system.errorRate)}
                </div>
                <div className={styles.metricLabel}>–£—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫</div>
              </div>

              <div className={styles.metricCard}>
                <div className={styles.metricValue}>
                  {stats.system.apiCalls24h}
                </div>
                <div className={styles.metricLabel}>API-–≤—ã–∑–æ–≤–æ–≤ –∑–∞ 24—á</div>
              </div>
            </div>
          </div>

          {/* –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          {stats.progress.topCategories.length > 0 && (
            <div className={styles.statsSection}>
              <div className={styles.sectionHeader}>
                <Target size={24} />
                <Text text="üìÇ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" size={TextSize.LG} />
              </div>

              <div className={styles.topList}>
                <div className={styles.topItems}>
                  {stats.progress.topCategories
                    .slice(0, 10)
                    .map((category, index) => (
                      <div key={category.category} className={styles.topItem}>
                        <span className={styles.topRank}>#{index + 1}</span>
                        <span className={styles.topName}>
                          {category.category}
                        </span>
                        <span className={styles.topValue}>
                          {category.progressCount}
                        </span>
                      </div>
                    ))}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </PageWrapper>
  );
};
