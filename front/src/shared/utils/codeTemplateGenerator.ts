/**
 * üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –®–ê–ë–õ–û–ù–û–í –ö–û–î–ê
 *
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ JavaScript, TypeScript –∏ React (JSX)
 *
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:
 * ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç —Å–∫–æ–±–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
 * ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 * ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π JS/TS/JSX —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
 * ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π (—Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ, –º–µ—Ç–æ–¥—ã, async)
 * ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–¥–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
 */

interface ParsedToken {
  type: 'string' | 'comment' | 'brace_open' | 'brace_close' | 'other';
  value: string;
  line: number;
  column: number;
}

interface FunctionInfo {
  startLine: number;
  endLine: number;
  signature: string;
  type: 'function' | 'arrow' | 'method' | 'async';
  indentation: string;
}

export class CodeTemplateGenerator {
  /**
   * üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –∫–æ–¥–∞
   */
  static generateTemplate(sourceCode: string, language: string): string {
    const generator = new CodeTemplateGenerator();
    return generator.processCode(sourceCode, language);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ JavaScript/TypeScript (—Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  static isJavaScriptTask(block: {
    codeLanguage?: string;
    file: { mainCategory: string; subCategory: string };
    codeContent?: string;
  }): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ –∫–æ–¥–∞
    if (block.codeLanguage) {
      const lang = block.codeLanguage.toLowerCase();
      return (
        lang === 'javascript' ||
        lang === 'js' ||
        lang === 'typescript' ||
        lang === 'ts' ||
        lang === 'jsx' ||
        lang === 'tsx' ||
        lang === 'react'
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (
      block.file?.mainCategory?.toLowerCase().includes('javascript') ||
      block.file?.subCategory?.toLowerCase().includes('javascript') ||
      block.file?.mainCategory?.toLowerCase().includes('react') ||
      block.file?.subCategory?.toLowerCase().includes('react')
    ) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–¥–∞ –Ω–∞ JS —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if (block.codeContent) {
      const jsPatterns = [
        /function\s+\w+/,
        /const\s+\w+\s*=/,
        /let\s+\w+\s*=/,
        /var\s+\w+\s*=/,
        /class\s+\w+/,
        /=>\s*{/,
        /console\.log/,
        /require\(/,
        /import\s+/,
        /export\s+/,
        /<[A-Z]\w*/, // JSX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        /useState/,
        /useEffect/,
      ];

      return jsPatterns.some((pattern) => pattern.test(block.codeContent!));
    }

    return false;
  }

  /**
   * üìã –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞
   */
  processCode(sourceCode: string, language: string): string {
    if (!sourceCode || !sourceCode.trim()) {
      return this.getDefaultTemplate(language);
    }

    try {
      const lang = language.toLowerCase();
      if (
        [
          'javascript',
          'js',
          'typescript',
          'ts',
          'jsx',
          'tsx',
          'react',
        ].includes(lang)
      ) {
        return this.processJavaScript(sourceCode);
      }

      // –î–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
      console.warn(
        `Language ${language} not supported, returning original code`
      );
      return sourceCode;
    } catch (error) {
      console.warn(
        'Template generation failed, returning original code:',
        error
      );
      return sourceCode;
    }
  }

  /**
   * üîß –û–ë–†–ê–ë–û–¢–ö–ê JAVASCRIPT/TYPESCRIPT/JSX (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
   */
  private processJavaScript(code: string): string {
    const lines = code.split('\n');
    const tokens = this.tokenize(code);

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ–¥–µ
    const functions = this.findJavaScriptFunctions(lines, tokens);

    // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω
    if (functions.length === 0) {
      return this.getDefaultTemplate('javascript');
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞–º–µ–Ω—è—è –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —à–∞–±–ª–æ–Ω—ã
    const template = this.replaceFunctionBodies(lines, functions);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const validation = this.validateResult(template);

    if (!validation.isValid) {
      console.warn('–ü—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —à–∞–±–ª–æ–Ω–∞:', validation.issues);

      // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–æ —Å–∫–æ–±–∫–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      if (validation.issues.some((issue) => issue.includes('—Å–∫–æ–±–æ–∫'))) {
        return this.createSimpleFallbackTemplate(code);
      }
    }

    return template;
  }

  /**
   * üõ°Ô∏è –ü–†–û–°–¢–û–ô FALLBACK –®–ê–ë–õ–û–ù
   */
  private createSimpleFallbackTemplate(code: string): string {
    const lines = code.split('\n');
    const firstLine = lines[0] || '';

    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å–∏–≥–Ω–∞—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    const funcMatch = firstLine.match(
      /^(\s*)(async\s+)?(function\s+\w+|const\s+\w+\s*=|class\s+\w+|\w+\s*\()/
    );

    if (funcMatch) {
      const indentation = funcMatch[1] || '';

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
      if (firstLine.includes('class ')) {
        return firstLine.replace(
          /\{.*/,
          '{\n' + indentation + '  // Implement class\n' + indentation + '}'
        );
      } else if (firstLine.includes('function ') || firstLine.includes('(')) {
        return firstLine.replace(
          /\{.*/,
          '{\n' + indentation + '  // Implement function\n' + indentation + '}'
        );
      }
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    return this.getDefaultTemplate('javascript');
  }

  /**
   * üîç –¢–û–ö–ï–ù–ò–ó–ê–¶–ò–Ø: –†–∞–∑–±–∏–≤–∞–µ—Ç –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä–æ–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   */
  private tokenize(code: string): ParsedToken[] {
    const tokens: ParsedToken[] = [];
    const lines = code.split('\n');

    for (let lineNum = 0; lineNum < lines.length; lineNum++) {
      const line = lines[lineNum];
      let col = 0;

      while (col < line.length) {
        const char = line[col];

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        if (char === '"') {
          const [token, newCol] = this.parseString(line, col, '"', lineNum);
          tokens.push(token);
          col = newCol;
          continue;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        if (char === "'") {
          const [token, newCol] = this.parseString(line, col, "'", lineNum);
          tokens.push(token);
          col = newCol;
          continue;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –ª–∏—Ç–µ—Ä–∞–ª–æ–≤
        if (char === '`') {
          const [token, newCol] = this.parseString(line, col, '`', lineNum);
          tokens.push(token);
          col = newCol;
          continue;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if (char === '/' && col + 1 < line.length && line[col + 1] === '/') {
          tokens.push({
            type: 'comment',
            value: line.substring(col),
            line: lineNum,
            column: col,
          });
          break; // –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if (char === '/' && col + 1 < line.length && line[col + 1] === '*') {
          const [token, newCol, shouldBreak] = this.parseMultilineComment(
            lines,
            lineNum,
            col
          );
          tokens.push(token);
          if (shouldBreak) break;
          col = newCol;
          continue;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫
        if (char === '{') {
          tokens.push({
            type: 'brace_open',
            value: char,
            line: lineNum,
            column: col,
          });
          col++;
          continue;
        }

        if (char === '}') {
          tokens.push({
            type: 'brace_close',
            value: char,
            line: lineNum,
            column: col,
          });
          col++;
          continue;
        }

        // –ü—Ä–æ—á–∏–µ —Å–∏–º–≤–æ–ª—ã
        tokens.push({
          type: 'other',
          value: char,
          line: lineNum,
          column: col,
        });
        col++;
      }
    }

    return tokens;
  }

  /**
   * üìù –ü–ê–†–°–ò–ù–ì –°–¢–†–û–ö
   */
  private parseString(
    line: string,
    startCol: number,
    quote: string,
    lineNum: number
  ): [ParsedToken, number] {
    let col = startCol + 1; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É
    let value = quote;

    while (col < line.length) {
      const char = line[col];

      if (char === '\\') {
        // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª
        value += char;
        col++;
        if (col < line.length) {
          value += line[col];
          col++;
        }
        continue;
      }

      value += char;

      if (char === quote) {
        // –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
        col++;
        break;
      }

      col++;
    }

    return [
      {
        type: 'string',
        value,
        line: lineNum,
        column: startCol,
      },
      col,
    ];
  }

  /**
   * üí¨ –ü–ê–†–°–ò–ù–ì –ú–ù–û–ì–û–°–¢–†–û–ß–ù–´–• –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
   */
  private parseMultilineComment(
    lines: string[],
    startLine: number,
    startCol: number
  ): [ParsedToken, number, boolean] {
    let lineNum = startLine;
    let col = startCol + 2; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º /*
    let value = '/*';

    while (lineNum < lines.length) {
      const line = lines[lineNum];

      while (col < line.length) {
        const char = line[col];
        value += char;

        if (char === '*' && col + 1 < line.length && line[col + 1] === '/') {
          value += '/';
          col += 2; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º */
          return [
            {
              type: 'comment',
              value,
              line: startLine,
              column: startCol,
            },
            col,
            false,
          ];
        }

        col++;
      }

      lineNum++;
      col = 0;
      if (lineNum < lines.length) {
        value += '\n';
      }
    }

    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –∑–∞–∫—Ä—ã—Ç
    return [
      {
        type: 'comment',
        value,
        line: startLine,
        column: startCol,
      },
      col,
      true,
    ];
  }

  /**
   * üîç –ü–û–ò–°–ö –§–£–ù–ö–¶–ò–ô –í JAVASCRIPT/TYPESCRIPT
   */
  private findJavaScriptFunctions(
    lines: string[],
    tokens: ParsedToken[]
  ): FunctionInfo[] {
    const functions: FunctionInfo[] = [];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const funcMatch = this.matchFunction(line);

      if (funcMatch) {
        const endLine = this.findFunctionEnd(lines, tokens, i);

        if (endLine > i) {
          functions.push({
            startLine: i,
            endLine,
            signature: funcMatch.signature,
            type: funcMatch.type,
            indentation: funcMatch.indentation,
          });
        }
      }
    }

    return functions;
  }

  /**
   * üéØ –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
   */
  private matchFunction(line: string): {
    signature: string;
    type: 'function' | 'arrow' | 'method' | 'async';
    indentation: string;
  } | null {
    const trimmed = line.trim();

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
    const indentMatch = line.match(/^(\s*)/);
    const indentation = indentMatch ? indentMatch[1] : '';

    // –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    if (
      trimmed.startsWith('//') ||
      trimmed.startsWith('/*') ||
      trimmed.startsWith('*') ||
      trimmed.includes('return ') ||
      trimmed.startsWith('if') ||
      trimmed.startsWith('for') ||
      trimmed.startsWith('while') ||
      trimmed.startsWith('switch') ||
      trimmed.startsWith('else') ||
      trimmed.startsWith('catch') ||
      trimmed.startsWith('try') ||
      !line.includes('{')
    ) {
      return null;
    }

    // 1. Function declarations
    const funcDeclaration = line.match(
      /^(\s*)(async\s+)?function\s+(\w+)\s*\([^)]*\)\s*\{/
    );
    if (funcDeclaration) {
      return {
        signature: line,
        type: funcDeclaration[2] ? 'async' : 'function',
        indentation,
      };
    }

    // 2. Arrow functions (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const arrowFunc = line.match(
      /^(\s*)(const|let|var)\s+(\w+)\s*=\s*(async\s+)?(\([^)]*\)|\w+)\s*=>\s*\{/
    );
    if (arrowFunc) {
      return {
        signature: line,
        type: arrowFunc[4] ? 'async' : 'arrow',
        indentation,
      };
    }

    // 3. Class methods (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    const classMethod = line.match(
      /^(\s*)(static\s+)?(async\s+)?(\w+)\s*\([^)]*\)\s*\{/
    );
    if (classMethod) {
      return {
        signature: line,
        type: classMethod[3] ? 'async' : 'method',
        indentation,
      };
    }

    // 4. Object methods
    const objectMethod = line.match(
      /^(\s*)(\w+):\s*(async\s+)?function\s*\([^)]*\)\s*\{/
    );
    if (objectMethod) {
      return {
        signature: line,
        type: objectMethod[3] ? 'async' : 'method',
        indentation,
      };
    }

    // 5. Object method shorthand
    const objectMethodShorthand = line.match(
      /^(\s*)(async\s+)?(\w+)\s*\([^)]*\)\s*\{/
    );
    if (objectMethodShorthand && !trimmed.includes('class ')) {
      return {
        signature: line,
        type: objectMethodShorthand[2] ? 'async' : 'method',
        indentation,
      };
    }

    // 6. Anonymous function assignments
    const anonFunc = line.match(
      /^(\s*)(const|let|var)\s+(\w+)\s*=\s*(async\s+)?function\s*\([^)]*\)\s*\{/
    );
    if (anonFunc) {
      return {
        signature: line,
        type: anonFunc[4] ? 'async' : 'function',
        indentation,
      };
    }

    return null;
  }

  /**
   * üîç –ü–û–ò–°–ö –ö–û–ù–¶–ê –§–£–ù–ö–¶–ò–ò (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
   */
  private findFunctionEnd(
    lines: string[],
    tokens: ParsedToken[],
    startLine: number
  ): number {
    let braceCount = 0;
    let foundFirstBrace = false;

    // –ù–∞–π–¥–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—è —Å–æ startLine
    const relevantTokens = tokens.filter((token) => token.line >= startLine);

    for (const token of relevantTokens) {
      // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–æ–±–∫–∏ –≤ –∫–æ–¥–µ (–Ω–µ –≤ —Å—Ç—Ä–æ–∫–∞—Ö –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö)
      if (token.type === 'brace_open') {
        braceCount++;
        foundFirstBrace = true;
      } else if (token.type === 'brace_close') {
        braceCount--;

        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
        if (foundFirstBrace && braceCount === 0) {
          return token.line;
        }
      }
    }

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ–º–æ–≥–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    return this.findFunctionEndFallback(lines, startLine);
  }

  /**
   * üîß FALLBACK –ú–ï–¢–û–î –ü–û–ò–°–ö–ê –ö–û–ù–¶–ê –§–£–ù–ö–¶–ò–ò
   */
  private findFunctionEndFallback(lines: string[], startLine: number): number {
    let braceCount = 0;
    let foundFirstBrace = false;

    for (let i = startLine; i < lines.length; i++) {
      const line = lines[i];
      let inString = false;
      let stringChar = '';
      let inComment = false;

      for (let j = 0; j < line.length; j++) {
        const char = line[j];
        const nextChar = line[j + 1];

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if (!inString && char === '/' && nextChar === '/') {
          inComment = true;
          break; // –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫
        if (
          !inComment &&
          !inString &&
          (char === '"' || char === "'" || char === '`')
        ) {
          inString = true;
          stringChar = char;
        } else if (inString && char === stringChar && line[j - 1] !== '\\') {
          inString = false;
          stringChar = '';
        }

        // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–±–∫–∏ —Ç–æ–ª—å–∫–æ –≤–Ω–µ —Å—Ç—Ä–æ–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if (!inString && !inComment) {
          if (char === '{') {
            braceCount++;
            foundFirstBrace = true;
          } else if (char === '}') {
            braceCount--;

            if (foundFirstBrace && braceCount === 0) {
              return i;
            }
          }
        }
      }
    }

    return startLine; // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–µ—Ü
  }

  /**
   * üîÑ –ó–ê–ú–ï–ù–ê –¢–ï–õ–ê –§–£–ù–ö–¶–ò–ô –ù–ê –®–ê–ë–õ–û–ù–´ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
   */
  private replaceFunctionBodies(
    lines: string[],
    functions: FunctionInfo[]
  ): string {
    const result = [...lines];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã
    functions
      .sort((a, b) => b.startLine - a.startLine)
      .forEach((func) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≥—Ä–∞–Ω–∏—Ü —Ñ—É–Ω–∫—Ü–∏–∏
        if (func.endLine <= func.startLine || func.endLine >= result.length) {
          console.warn(
            `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Ñ—É–Ω–∫—Ü–∏–∏: ${func.startLine}-${func.endLine}`
          );
          return;
        }

        const commentLine = func.indentation + '  // Implement function';

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ñ—É–Ω–∫—Ü–∏–∏ (—Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π)
        const functionSignature = result[func.startLine];

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
        const openBraceIndex = functionSignature.indexOf('{');

        if (openBraceIndex === -1) {
          console.warn(
            `–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${func.startLine}`
          );
          return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        const signatureWithComment =
          functionSignature.substring(0, openBraceIndex + 1) +
          '\n' +
          commentLine +
          '\n' +
          func.indentation +
          '}';

        // –ó–∞–º–µ–Ω—è–µ–º –≤—Å—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
        const linesToRemove = func.endLine - func.startLine;
        result.splice(func.startLine, linesToRemove + 1, signatureWithComment);
      });

    return result.join('\n');
  }

  /**
   * ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê
   */
  private validateResult(template: string): {
    isValid: boolean;
    issues: string[];
  } {
    const issues: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–∫–æ–±–æ–∫
    const openBraces = (template.match(/\{/g) || []).length;
    const closeBraces = (template.match(/\}/g) || []).length;

    if (openBraces !== closeBraces) {
      issues.push(
        `–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∫–æ–±–æ–∫: ${openBraces} –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö, ${closeBraces} –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö`
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if (!template.includes('// Implement')) {
      issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —Å–∫–æ–±–æ–∫ (–ø—Ä–∏–∑–Ω–∞–∫ –æ—à–∏–±–∫–∏)
    if (template.includes('}}') || template.includes('{ }')) {
      issues.push('–ù–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–∫–æ–±–æ–∫');
    }

    return {
      isValid: issues.length === 0,
      issues,
    };
  }

  /**
   * üìù –®–ê–ë–õ–û–ù –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
   */
  private getDefaultTemplate(language: string): string {
    const lang = language.toLowerCase();

    if (
      ['javascript', 'js', 'typescript', 'ts', 'jsx', 'tsx', 'react'].includes(
        lang
      )
    ) {
      return `function solution() {
  // Implement your solution here
  return null;
}`;
    }

    return '// Write your code here';
  }
}
