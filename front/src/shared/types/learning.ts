/**
 * –û–±—â–∏–µ —Ç–∏–ø—ã –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è
 */

import type { InterviewResponse, ContentBlockResponse, TheoryCardResponse, QuestionResponse } from './api-responses';

export type ContentType = 'interviews' | 'questions' | 'practice' | 'theory';

export interface UniversalContentItem {
  id: string;
  type: ContentType;
  title: string;
  description?: string;
  
  // –û–±—â–∏–µ –ø–æ–ª—è
  company?: string;           // –¥–ª—è interviews –∏ questions
  category?: string;          // –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
  subCategory?: string;       // –¥–ª—è practice/theory
  cluster?: string;           // –¥–ª—è questions
  tags?: string[];
  difficulty?: 'easy' | 'medium' | 'hard';
  
  // –°—Ç–∞—Ç—É—Å–Ω—ã–µ –ø–æ–ª—è
  hasAudio?: boolean;         // –¥–ª—è interviews
  isCompleted?: boolean;      // –¥–ª—è practice/theory
  studyCount?: number;        // –¥–ª—è theory (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–µ–Ω–∏–π)
  solvedCount?: number;       // –¥–ª—è practice (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π)
  codeLanguage?: string;      // –¥–ª—è practice
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  createdAt: string;
  updatedAt?: string;
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ metadata
  metadata: {
    interviewInfo?: {
      formattedName: string;
      id: string;
    };
    webdavPath?: string;
    technologies?: string[];
    duration?: string;
    cardType?: string;
    questionBlock?: string;
    answerBlock?: string;
    fullContent?: string;
    textContent?: string;
    interviewId?: string;
    originalData?: InterviewResponse | ContentBlockResponse | TheoryCardResponse | QuestionResponse;
  };
}

export interface LearningFilters {
  contentTypes?: ContentType[];
  search?: string;
  companies?: string[];
  categories?: string[];
  clusters?: number[];
  subCategories?: string[];
  difficulty?: ('easy' | 'medium' | 'hard')[];
  has_audio?: boolean;
  hasAudio?: boolean; // deprecated, use has_audio
  onlyCompleted?: boolean;
  onlyUnstudied?: boolean;
}

export interface LearningStats {
  totalItems: number;
  completedItems: number;
  itemsByType: Record<ContentType, number>;
  completionByType: Record<ContentType, number>;
}

export interface ContentTypeConfig {
  type: ContentType;
  label: string;
  icon: string;
  description: string;
  color: string;
  supportsAudio: boolean;
  supportsCompletion: boolean;
  supportsCompany: boolean;
  supportsCluster: boolean;
  defaultSort: string;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export const CONTENT_TYPE_CONFIG: Record<ContentType, ContentTypeConfig> = {
  interviews: {
    type: 'interviews',
    label: '–ò–Ω—Ç–µ—Ä–≤—å—é',
    icon: 'üé§',
    description: '–†–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ IT –∫–æ–º–ø–∞–Ω–∏–π',
    color: '#3B82F6',
    supportsAudio: true,
    supportsCompletion: false,
    supportsCompany: true,
    supportsCluster: false,
    defaultSort: 'interview_date'
  },
  questions: {
    type: 'questions',
    label: '–ë–∞–Ω–∫ –≤–æ–ø—Ä–æ—Å–æ–≤',
    icon: '‚ùì',
    description: '8,560 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ 380+ –∫–æ–º–ø–∞–Ω–∏–π',
    color: '#10B981',
    supportsAudio: false,
    supportsCompletion: false,
    supportsCompany: true,
    supportsCluster: true,
    defaultSort: 'created_at'
  },
  practice: {
    type: 'practice',
    label: '–ü—Ä–∞–∫—Ç–∏–∫–∞',
    icon: 'üí™',
    description: '–ó–∞–¥–∞—á–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
    color: '#F59E0B',
    supportsAudio: false,
    supportsCompletion: true,
    supportsCompany: false,
    supportsCluster: false,
    defaultSort: 'orderInFile'
  },
  theory: {
    type: 'theory',
    label: '–¢–µ–æ—Ä–∏—è',
    icon: 'üìö',
    description: '–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∫–∞—Ä—Ç–æ—á–∫–∏',
    color: '#8B5CF6',
    supportsAudio: false,
    supportsCompletion: true,
    supportsCompany: false,
    supportsCluster: false,
    defaultSort: 'orderIndex'
  }
};

// –¢–∏–ø—ã –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
export interface LearningSearchResponse {
  items: UniversalContentItem[];
  total: number;
  hasNext: boolean;
  page: number;
  limit: number;
  stats?: LearningStats;
}

export interface LearningSearchRequest {
  contentTypes: ContentType[];
  search?: string;
  companies?: string[];
  categories?: string[];
  clusters?: number[];
  subCategories?: string[];
  difficulty?: ('easy' | 'medium' | 'hard')[];
  has_audio?: boolean;
  hasAudio?: boolean; // deprecated, use has_audio
  onlyCompleted?: boolean;
  onlyUnstudied?: boolean;
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
  userId?: string;
}