/**
 * /**
 *  * Generated by orval v.7.10.0 üçª
 *  * Do not edit manually.
 *  * Nareshka API
 *  * Nareshka Learning Platform API
 *  *\/
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { apiClient } from '../base';
export type AdminContentBlockResponseTypeTextContent = string | null;

export type AdminContentBlockResponseTypeCodeContent = string | null;

export type AdminContentBlockResponseTypeCodeLanguage = string | null;

export type AdminContentBlockResponseTypeCodeFoldTitle = string | null;

export interface AdminContentBlockResponseType {
  id: string;
  file_id: string;
  path_titles: string[];
  block_title: string;
  block_level: number;
  order_in_file: number;
  text_content?: AdminContentBlockResponseTypeTextContent;
  code_content?: AdminContentBlockResponseTypeCodeContent;
  code_language?: AdminContentBlockResponseTypeCodeLanguage;
  is_code_foldable?: boolean;
  code_fold_title?: AdminContentBlockResponseTypeCodeFoldTitle;
  extracted_urls?: string[];
  created_at: string;
  updated_at: string;
}

export interface AdminContentFileResponseType {
  id: string;
  webdav_path: string;
  main_category: string;
  sub_category: string;
  created_at: string;
  updated_at: string;
}

export type AdminTheoryCardResponseTypeAnkiGuid = string | null;

export type AdminTheoryCardResponseTypeSubCategory = string | null;

export interface AdminTheoryCardResponseType {
  id: string;
  anki_guid?: AdminTheoryCardResponseTypeAnkiGuid;
  card_type: string;
  deck: string;
  category: string;
  sub_category?: AdminTheoryCardResponseTypeSubCategory;
  question_block: string;
  answer_block: string;
  tags?: string[];
  order_index?: number;
  created_at: string;
  updated_at: string;
}

export interface AdminUserResponseType {
  id: string;
  email: string;
  role: string;
  created_at: string;
  updated_at: string;
}

export interface BulkDeleteRequestType {
  ids: string[];
}

export interface BulkDeleteResponseType {
  deleted_count: number;
  failed_ids?: string[];
  error_messages?: string[];
}

export type CardStateType = typeof CardStateType[keyof typeof CardStateType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CardStateType = {
  NEW: 'NEW',
  LEARNING: 'LEARNING',
  REVIEW: 'REVIEW',
  RELEARNING: 'RELEARNING',
} as const;

export type CategoryProgressSummaryDTOTypeSubCategory = string | null;

export interface CategoryProgressSummaryDTOType {
  mainCategory: string;
  subCategory?: CategoryProgressSummaryDTOTypeSubCategory;
  totalTasks: number;
  completedTasks: number;
  completionRate: number;
  status: string;
}

export type CodeExecutionRequestDTOTypeStdin = string | null;

export type CodeExecutionRequestDTOTypeBlockId = string | null;

export interface CodeExecutionRequestDTOType {
  sourceCode: string;
  language: string;
  stdin?: CodeExecutionRequestDTOTypeStdin;
  blockId?: CodeExecutionRequestDTOTypeBlockId;
}

export type CodeExecutionResponseDTOTypeUserId = number | null;

export type CodeExecutionResponseDTOTypeBlockId = string | null;

export type CodeExecutionResponseDTOTypeStdin = string | null;

export type CodeExecutionResponseDTOTypeStdout = string | null;

export type CodeExecutionResponseDTOTypeStderr = string | null;

export type CodeExecutionResponseDTOTypeExitCode = number | null;

export type CodeExecutionResponseDTOTypeExecutionTimeMs = number | null;

export type CodeExecutionResponseDTOTypeMemoryUsedMB = number | null;

export type CodeExecutionResponseDTOTypeContainerLogs = string | null;

export type CodeExecutionResponseDTOTypeErrorMessage = string | null;

export type CodeExecutionResponseDTOTypeCompletedAt = string | null;

export interface CodeExecutionResponseDTOType {
  id: string;
  userId?: CodeExecutionResponseDTOTypeUserId;
  blockId?: CodeExecutionResponseDTOTypeBlockId;
  languageId: string;
  sourceCode: string;
  stdin?: CodeExecutionResponseDTOTypeStdin;
  status: ExecutionStatusType;
  stdout?: CodeExecutionResponseDTOTypeStdout;
  stderr?: CodeExecutionResponseDTOTypeStderr;
  exitCode?: CodeExecutionResponseDTOTypeExitCode;
  executionTimeMs?: CodeExecutionResponseDTOTypeExecutionTimeMs;
  memoryUsedMB?: CodeExecutionResponseDTOTypeMemoryUsedMB;
  containerLogs?: CodeExecutionResponseDTOTypeContainerLogs;
  errorMessage?: CodeExecutionResponseDTOTypeErrorMessage;
  createdAt: string;
  completedAt?: CodeExecutionResponseDTOTypeCompletedAt;
}

export type CodeLanguageType = typeof CodeLanguageType[keyof typeof CodeLanguageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CodeLanguageType = {
  PYTHON: 'PYTHON',
  JAVASCRIPT: 'JAVASCRIPT',
  TYPESCRIPT: 'TYPESCRIPT',
  JAVA: 'JAVA',
  CPP: 'CPP',
  C: 'C',
  GO: 'GO',
  RUST: 'RUST',
  PHP: 'PHP',
  RUBY: 'RUBY',
} as const;

export type ContentBlockResponseTypeTextContent = string | null;

export type ContentBlockResponseTypeCodeContent = string | null;

export type ContentBlockResponseTypeCodeLanguage = string | null;

export type ContentBlockResponseTypeCodeFoldTitle = string | null;

export type ContentBlockResponseTypeRawBlockContentHash = string | null;

export type ContentBlockResponseTypeFile = ContentFileResponseType | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª–æ–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
export interface ContentBlockResponseType {
  id: string;
  fileId: string;
  pathTitles: string[];
  blockTitle: string;
  blockLevel: number;
  orderInFile: number;
  textContent?: ContentBlockResponseTypeTextContent;
  codeContent?: ContentBlockResponseTypeCodeContent;
  codeLanguage?: ContentBlockResponseTypeCodeLanguage;
  isCodeFoldable?: boolean;
  codeFoldTitle?: ContentBlockResponseTypeCodeFoldTitle;
  extractedUrls?: string[];
  companies?: string[];
  rawBlockContentHash?: ContentBlockResponseTypeRawBlockContentHash;
  createdAt: string;
  updatedAt: string;
  file?: ContentBlockResponseTypeFile;
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
export interface ContentBlocksListResponseType {
  blocks: ContentBlockResponseType[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export interface ContentCategoriesResponseType {
  categories: string[];
}

export type ContentFileResponseTypeLastFileHash = string | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
export interface ContentFileResponseType {
  id: string;
  webdavPath: string;
  mainCategory: string;
  subCategory: string;
  lastFileHash?: ContentFileResponseTypeLastFileHash;
  createdAt: string;
  updatedAt: string;
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
export interface ContentFilesListResponseType {
  files: ContentFileResponseType[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

export type ContentStatsDTOTypeCategories = { [key: string]: unknown };

export interface ContentStatsDTOType {
  categories: ContentStatsDTOTypeCategories;
  totalBlocks: number;
  solvedBlocks: number;
  averageSolveCount: number;
}

export type ContentStatsResponseTypeFilesByCategory = {[key: string]: number};

export type ContentStatsResponseTypeBlocksByCategory = {[key: string]: number};

export interface ContentStatsResponseType {
  total_files: number;
  total_blocks: number;
  files_by_category: ContentStatsResponseTypeFilesByCategory;
  blocks_by_category: ContentStatsResponseTypeBlocksByCategory;
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export interface ContentSubcategoriesResponseType {
  subcategories: string[];
}

export type CreateContentBlockRequestTypeTextContent = string | null;

export type CreateContentBlockRequestTypeCodeContent = string | null;

export type CreateContentBlockRequestTypeCodeLanguage = string | null;

export type CreateContentBlockRequestTypeCodeFoldTitle = string | null;

export interface CreateContentBlockRequestType {
  file_id: string;
  path_titles: string[];
  block_title: string;
  block_level: number;
  order_in_file: number;
  text_content?: CreateContentBlockRequestTypeTextContent;
  code_content?: CreateContentBlockRequestTypeCodeContent;
  code_language?: CreateContentBlockRequestTypeCodeLanguage;
  is_code_foldable?: boolean;
  code_fold_title?: CreateContentBlockRequestTypeCodeFoldTitle;
  extracted_urls?: string[];
}

export interface CreateContentFileRequestType {
  webdav_path: string;
  main_category: string;
  sub_category: string;
}

export type CreateTheoryCardRequestTypeAnkiGuid = string | null;

export type CreateTheoryCardRequestTypeSubCategory = string | null;

export interface CreateTheoryCardRequestType {
  anki_guid?: CreateTheoryCardRequestTypeAnkiGuid;
  card_type: string;
  deck: string;
  category: string;
  sub_category?: CreateTheoryCardRequestTypeSubCategory;
  question_block: string;
  answer_block: string;
  tags?: string[];
  order_index?: number;
}

export interface CreateUserRequestType {
  email: string;
  password: string;
  role?: string;
}

/**
 * –û—Ç–≤–µ—Ç —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
 */
export interface DueCardsResponseType {
  cards: TheoryCardResponseType[];
  total: number;
}

export type ExecutionStatsDTOTypeLanguageStatsItem = { [key: string]: unknown };

export interface ExecutionStatsDTOType {
  totalExecutions: number;
  successfulExecutions: number;
  averageExecutionTime: number;
  languageStats: ExecutionStatsDTOTypeLanguageStatsItem[];
}

export type ExecutionStatusType = typeof ExecutionStatusType[keyof typeof ExecutionStatusType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExecutionStatusType = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  SUCCESS: 'SUCCESS',
  ERROR: 'ERROR',
  TIMEOUT: 'TIMEOUT',
  MEMORY_LIMIT: 'MEMORY_LIMIT',
} as const;

export type FileResponseTypeSubCategory = string | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
 */
export interface FileResponseType {
  id: string;
  webdavPath: string;
  mainCategory: string;
  subCategory?: FileResponseTypeSubCategory;
}

export interface GroupedCategoryProgressDTOType {
  mainCategory: string;
  totalTasks: number;
  completedTasks: number;
  completionRate: number;
  status: string;
  subCategories: SubCategoryProgressDTOType[];
}

export interface HTTPValidationErrorType {
  detail?: ValidationErrorType[];
}

export interface LoginRequestType {
  email: string;
  password: string;
}

export interface LoginResponseType {
  access_token: string;
  token_type: string;
  user: UserResponseType;
}

export type MindMapResponseTypeData = { [key: string]: unknown };

export type MindMapResponseTypeMetadata = { [key: string]: unknown };

/**
 * –û—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ mindmap
 */
export interface MindMapResponseType {
  success?: boolean;
  data: MindMapResponseTypeData;
  structure_type: string;
  metadata: MindMapResponseTypeMetadata;
}

export interface PaginatedContentBlocksResponseType {
  blocks: AdminContentBlockResponseType[];
  total: number;
  page: number;
  limit: number;
  totalPages?: number;
}

export interface PaginatedContentFilesResponseType {
  files: AdminContentFileResponseType[];
  total: number;
  page: number;
  limit: number;
  totalPages?: number;
}

export interface PaginatedTheoryCardsResponseType {
  cards: AdminTheoryCardResponseType[];
  total: number;
  page: number;
  limit: number;
  totalPages?: number;
}

export interface PaginatedUsersResponseType {
  users: UserStatsResponseType[];
  total: number;
  page: number;
  limit: number;
  totalPages?: number;
}

/**
 * –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
export interface ProgressActionType {
  action: string;
}

export type ProgressAnalyticsDTOTypeMostPopularCategoriesItem = { [key: string]: unknown };

export type ProgressAnalyticsDTOTypeStrugglingAreasItem = { [key: string]: unknown };

export interface ProgressAnalyticsDTOType {
  totalUsers: number;
  activeUsers: number;
  totalTasksSolved: number;
  averageTasksPerUser: number;
  mostPopularCategories: ProgressAnalyticsDTOTypeMostPopularCategoriesItem[];
  strugglingAreas: ProgressAnalyticsDTOTypeStrugglingAreasItem[];
}

export type RecentActivityItemDTOTypeSubCategory = string | null;

export interface RecentActivityItemDTOType {
  id: string;
  blockId: string;
  blockTitle: string;
  category: string;
  subCategory: RecentActivityItemDTOTypeSubCategory;
  isSuccessful: boolean;
  activityType: string;
  timestamp: string;
}

export interface RegisterRequestType {
  email: string;
  password: string;
}

export interface RegisterResponseType {
  user: UserResponseType;
  message: string;
}

/**
 * –û—Ü–µ–Ω–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
 */
export interface ReviewRatingType {
  rating: string;
}

export type RoadmapStatsDTOTypeCategoriesItem = { [key: string]: unknown };

export interface RoadmapStatsDTOType {
  categories: RoadmapStatsDTOTypeCategoriesItem[];
}

export interface SimplifiedOverallStatsDTOType {
  totalTasksSolved: number;
  totalTasksAvailable: number;
  completionRate: number;
}

export interface SubCategoryProgressDTOType {
  subCategory: string;
  totalTasks: number;
  completedTasks: number;
  completionRate: number;
  status: string;
}

export interface SupportedLanguageResponseDTOType {
  id: string;
  name: string;
  language: CodeLanguageType;
  version: string;
  fileExtension: string;
  timeoutSeconds: number;
  memoryLimitMB: number;
  isEnabled: boolean;
}

export type SystemStatsResponseTypeUsers = {[key: string]: number};

export type SystemStatsResponseTypeContent = {[key: string]: number};

export type SystemStatsResponseTypeProgress = {[key: string]: number};

export interface SystemStatsResponseType {
  users: SystemStatsResponseTypeUsers;
  content: SystemStatsResponseTypeContent;
  progress: SystemStatsResponseTypeProgress;
}

export type TaskAttemptCreateDTOTypeExecutionTimeMs = number | null;

export type TaskAttemptCreateDTOTypeMemoryUsedMB = number | null;

export type TaskAttemptCreateDTOTypeErrorMessage = string | null;

export type TaskAttemptCreateDTOTypeStderr = string | null;

export type TaskAttemptCreateDTOTypeDurationMinutes = number | null;

export interface TaskAttemptCreateDTOType {
  userId: number;
  blockId: string;
  sourceCode: string;
  language: string;
  isSuccessful?: boolean;
  executionTimeMs?: TaskAttemptCreateDTOTypeExecutionTimeMs;
  memoryUsedMB?: TaskAttemptCreateDTOTypeMemoryUsedMB;
  errorMessage?: TaskAttemptCreateDTOTypeErrorMessage;
  stderr?: TaskAttemptCreateDTOTypeStderr;
  durationMinutes?: TaskAttemptCreateDTOTypeDurationMinutes;
}

export type TaskAttemptResponseDTOTypeExecutionTimeMs = number | null;

export type TaskAttemptResponseDTOTypeMemoryUsedMB = number | null;

export type TaskAttemptResponseDTOTypeErrorMessage = string | null;

export type TaskAttemptResponseDTOTypeStderr = string | null;

export type TaskAttemptResponseDTOTypeDurationMinutes = number | null;

export interface TaskAttemptResponseDTOType {
  id: string;
  userId: number;
  blockId: string;
  sourceCode: string;
  language: string;
  isSuccessful: boolean;
  attemptNumber: number;
  createdAt: string;
  executionTimeMs?: TaskAttemptResponseDTOTypeExecutionTimeMs;
  memoryUsedMB?: TaskAttemptResponseDTOTypeMemoryUsedMB;
  errorMessage?: TaskAttemptResponseDTOTypeErrorMessage;
  stderr?: TaskAttemptResponseDTOTypeStderr;
  durationMinutes?: TaskAttemptResponseDTOTypeDurationMinutes;
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞–Ω–∏–π
 */
export interface TaskCategoriesResponseType {
  categories: TaskCategoryResponseType[];
}

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π
 */
export interface TaskCategoryResponseType {
  name: string;
  subCategories: string[];
  totalCount: number;
  contentBlockCount: number;
  theoryQuizCount: number;
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–π
 */
export interface TaskCompaniesResponseType {
  companies: TaskCompanyResponseType[];
}

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏
 */
export interface TaskCompanyResponseType {
  name: string;
  count: number;
}

export type TaskDetailResponseTypeCodeContent = string | null;

export type TaskDetailResponseTypeCodeLanguage = string | null;

export type TaskDetailResponseTypeProgress = TaskProgressResponseType | null;

/**
 * –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
 */
export interface TaskDetailResponseType {
  id: string;
  title: string;
  description: string;
  hasCode: boolean;
  codeContent?: TaskDetailResponseTypeCodeContent;
  codeLanguage?: TaskDetailResponseTypeCodeLanguage;
  progress?: TaskDetailResponseTypeProgress;
}

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
 */
export interface TaskDetailResponseWrapperType {
  success?: boolean;
  task: TaskDetailResponseType;
}

/**
 * –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞—á–µ
 */
export interface TaskProgressResponseType {
  solvedCount: number;
  isCompleted: boolean;
}

export type TasksListResponseTypePagination = { [key: string]: unknown };

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞–Ω–∏–π
 */
export interface TasksListResponseType {
  data: AppApplicationDtoTaskDtoTaskResponseType[];
  pagination: TasksListResponseTypePagination;
}

export type TechnologiesResponseTypeData = { [key: string]: unknown };

/**
 * –û—Ç–≤–µ—Ç —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏
 */
export interface TechnologiesResponseType {
  success?: boolean;
  data: TechnologiesResponseTypeData;
}

export type TestCaseExecutionTypeExecutionTimeMs = number | null;

export type TestCaseExecutionTypeErrorMessage = string | null;

export interface TestCaseExecutionType {
  testCaseId: string;
  testName: string;
  input: string;
  expectedOutput: string;
  actualOutput: string;
  passed: boolean;
  executionTimeMs?: TestCaseExecutionTypeExecutionTimeMs;
  errorMessage?: TestCaseExecutionTypeErrorMessage;
}

export type TestCaseResponseDTOTypeDescription = string | null;

export type TestCaseResponseDTOTypeGenerationPrompt = string | null;

export type TestCaseResponseDTOTypeGeneratedAt = string | null;

export type TestCaseResponseDTOTypeGenerationModel = string | null;

export interface TestCaseResponseDTOType {
  id: string;
  blockId: string;
  name: string;
  description?: TestCaseResponseDTOTypeDescription;
  input?: string;
  expectedOutput: string;
  isPublic?: boolean;
  difficulty?: string;
  weight?: number;
  timeoutSeconds?: number;
  isActive?: boolean;
  orderIndex?: number;
  isAIGenerated?: boolean;
  generationPrompt?: TestCaseResponseDTOTypeGenerationPrompt;
  generatedAt?: TestCaseResponseDTOTypeGeneratedAt;
  generationModel?: TestCaseResponseDTOTypeGenerationModel;
  executionCount?: number;
  passRate?: number;
  createdAt: string;
  updatedAt: string;
}

export type TestCasesResponseDTOTypeLastGenerated = string | null;

export interface TestCasesResponseDTOType {
  blockId: string;
  testCases: TestCaseResponseDTOType[];
  totalTests: number;
  publicTests: number;
  hiddenTests: number;
  lastGenerated?: TestCasesResponseDTOTypeLastGenerated;
}

export type TheoryCardResponseTypeSubCategory = string | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
 */
export interface TheoryCardResponseType {
  id: string;
  ankiGuid: string;
  cardType: string;
  deck: string;
  category: string;
  subCategory?: TheoryCardResponseTypeSubCategory;
  questionBlock: string;
  answerBlock: string;
  tags?: string[];
  orderIndex?: number;
  createdAt: string;
  updatedAt: string;
}

export type TheoryCardsListResponseTypePagination = { [key: string]: unknown };

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
 */
export interface TheoryCardsListResponseType {
  cards: TheoryCardResponseType[];
  pagination: TheoryCardsListResponseTypePagination;
}

export type TheoryCategoriesResponseTypeCategoriesItem = { [key: string]: unknown };

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export interface TheoryCategoriesResponseType {
  categories: TheoryCategoriesResponseTypeCategoriesItem[];
}

export type TheoryStatsDTOTypeCategories = { [key: string]: unknown };

export interface TheoryStatsDTOType {
  categories: TheoryStatsDTOTypeCategories;
  totalCards: number;
  reviewedCards: number;
  averageReviewCount: number;
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏
 */
export interface TheoryStatsResponseType {
  totalCards: number;
  studiedCards: number;
  dueCards: number;
  averageEaseFactor: number;
  studyProgress: number;
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export interface TheorySubcategoriesResponseType {
  subcategories: string[];
}

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ
 */
export interface TopicResponseType {
  key: string;
  title: string;
  icon: string;
  color: string;
  description: string;
}

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–µ
 */
export interface TopicStatsResponseType {
  totalTasks: number;
  completedTasks: number;
  completionRate: number;
}

export type TopicTasksResponseTypeStats = TopicStatsResponseType | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∑–∞–¥–∞—á–∞–º–∏ –ø–æ —Ç–µ–º–µ
 */
export interface TopicTasksResponseType {
  success?: boolean;
  topic: TopicResponseType;
  tasks: AppApplicationDtoMindmapDtoTaskResponseType[];
  stats?: TopicTasksResponseTypeStats;
}

export type UpdateContentBlockRequestTypeFileId = string | null;

export type UpdateContentBlockRequestTypePathTitles = string[] | null;

export type UpdateContentBlockRequestTypeBlockTitle = string | null;

export type UpdateContentBlockRequestTypeBlockLevel = number | null;

export type UpdateContentBlockRequestTypeOrderInFile = number | null;

export type UpdateContentBlockRequestTypeTextContent = string | null;

export type UpdateContentBlockRequestTypeCodeContent = string | null;

export type UpdateContentBlockRequestTypeCodeLanguage = string | null;

export type UpdateContentBlockRequestTypeIsCodeFoldable = boolean | null;

export type UpdateContentBlockRequestTypeCodeFoldTitle = string | null;

export type UpdateContentBlockRequestTypeExtractedUrls = string[] | null;

export interface UpdateContentBlockRequestType {
  file_id?: UpdateContentBlockRequestTypeFileId;
  path_titles?: UpdateContentBlockRequestTypePathTitles;
  block_title?: UpdateContentBlockRequestTypeBlockTitle;
  block_level?: UpdateContentBlockRequestTypeBlockLevel;
  order_in_file?: UpdateContentBlockRequestTypeOrderInFile;
  text_content?: UpdateContentBlockRequestTypeTextContent;
  code_content?: UpdateContentBlockRequestTypeCodeContent;
  code_language?: UpdateContentBlockRequestTypeCodeLanguage;
  is_code_foldable?: UpdateContentBlockRequestTypeIsCodeFoldable;
  code_fold_title?: UpdateContentBlockRequestTypeCodeFoldTitle;
  extracted_urls?: UpdateContentBlockRequestTypeExtractedUrls;
}

export type UpdateContentFileRequestTypeWebdavPath = string | null;

export type UpdateContentFileRequestTypeMainCategory = string | null;

export type UpdateContentFileRequestTypeSubCategory = string | null;

export interface UpdateContentFileRequestType {
  webdav_path?: UpdateContentFileRequestTypeWebdavPath;
  main_category?: UpdateContentFileRequestTypeMainCategory;
  sub_category?: UpdateContentFileRequestTypeSubCategory;
}

export type UpdateTheoryCardRequestTypeAnkiGuid = string | null;

export type UpdateTheoryCardRequestTypeCardType = string | null;

export type UpdateTheoryCardRequestTypeDeck = string | null;

export type UpdateTheoryCardRequestTypeCategory = string | null;

export type UpdateTheoryCardRequestTypeSubCategory = string | null;

export type UpdateTheoryCardRequestTypeQuestionBlock = string | null;

export type UpdateTheoryCardRequestTypeAnswerBlock = string | null;

export type UpdateTheoryCardRequestTypeTags = string[] | null;

export type UpdateTheoryCardRequestTypeOrderIndex = number | null;

export interface UpdateTheoryCardRequestType {
  anki_guid?: UpdateTheoryCardRequestTypeAnkiGuid;
  card_type?: UpdateTheoryCardRequestTypeCardType;
  deck?: UpdateTheoryCardRequestTypeDeck;
  category?: UpdateTheoryCardRequestTypeCategory;
  sub_category?: UpdateTheoryCardRequestTypeSubCategory;
  question_block?: UpdateTheoryCardRequestTypeQuestionBlock;
  answer_block?: UpdateTheoryCardRequestTypeAnswerBlock;
  tags?: UpdateTheoryCardRequestTypeTags;
  order_index?: UpdateTheoryCardRequestTypeOrderIndex;
}

export type UpdateUserRequestTypeEmail = string | null;

export type UpdateUserRequestTypePassword = string | null;

export type UpdateUserRequestTypeRole = string | null;

export interface UpdateUserRequestType {
  email?: UpdateUserRequestTypeEmail;
  password?: UpdateUserRequestTypePassword;
  role?: UpdateUserRequestTypeRole;
}

export interface UserCodeSolutionCreateDTOType {
  blockId: string;
  language: CodeLanguageType;
  sourceCode: string;
  isCompleted?: boolean;
}

export type UserCodeSolutionResponseDTOTypeLastExecutionId = string | null;

export interface UserCodeSolutionResponseDTOType {
  id: string;
  userId: number;
  blockId: string;
  languageId: string;
  sourceCode: string;
  isCompleted: boolean;
  executionCount: number;
  successfulExecutions: number;
  lastExecutionId?: UserCodeSolutionResponseDTOTypeLastExecutionId;
  createdAt: string;
  updatedAt: string;
}

export type UserCodeSolutionUpdateDTOTypeSourceCode = string | null;

export type UserCodeSolutionUpdateDTOTypeIsCompleted = boolean | null;

export interface UserCodeSolutionUpdateDTOType {
  sourceCode?: UserCodeSolutionUpdateDTOTypeSourceCode;
  isCompleted?: UserCodeSolutionUpdateDTOTypeIsCompleted;
}

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface UserContentProgressResponseType {
  id: string;
  userId: number;
  blockId: string;
  solvedCount: number;
  createdAt: string;
  updatedAt: string;
}

export type UserDetailedProgressResponseDTOTypeLastActivityDate = string | null;

export interface UserDetailedProgressResponseDTOType {
  userId: number;
  lastActivityDate: UserDetailedProgressResponseDTOTypeLastActivityDate;
  overallStats: SimplifiedOverallStatsDTOType;
  categoryProgress: CategoryProgressSummaryDTOType[];
  groupedCategoryProgress: GroupedCategoryProgressDTOType[];
  recentActivity: RecentActivityItemDTOType[];
}

export type UserResponseTypeLastActivityDate = string | null;

export interface UserResponseType {
  id: number;
  email: string;
  role: UserRoleType;
  createdAt: string;
  totalTasksSolved: number;
  lastActivityDate: UserResponseTypeLastActivityDate;
}

export type UserRoleType = typeof UserRoleType[keyof typeof UserRoleType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRoleType = {
  GUEST: 'GUEST',
  USER: 'USER',
  ADMIN: 'ADMIN',
} as const;

export type UserStatsOverviewDTOTypeContentProgress = { [key: string]: unknown };

export type UserStatsOverviewDTOTypeTheoryProgress = { [key: string]: unknown };

export type UserStatsOverviewDTOTypeOverallProgress = { [key: string]: unknown };

export interface UserStatsOverviewDTOType {
  userId: number;
  totalContentBlocks: number;
  solvedContentBlocks: number;
  totalTheoryCards: number;
  reviewedTheoryCards: number;
  contentProgress: UserStatsOverviewDTOTypeContentProgress;
  theoryProgress: UserStatsOverviewDTOTypeTheoryProgress;
  overallProgress: UserStatsOverviewDTOTypeOverallProgress;
}

export interface UserStatsResponseType {
  id: string;
  email: string;
  role: string;
  created_at: string;
  updated_at: string;
}

export type UserTheoryProgressResponseTypeDueDate = string | null;

export type UserTheoryProgressResponseTypeLastReviewDate = string | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
 */
export interface UserTheoryProgressResponseType {
  id: string;
  userId: number;
  cardId: string;
  solvedCount?: number;
  easeFactor?: string;
  interval?: number;
  dueDate?: UserTheoryProgressResponseTypeDueDate;
  reviewCount?: number;
  lapseCount?: number;
  cardState?: CardStateType;
  learningStep?: number;
  lastReviewDate?: UserTheoryProgressResponseTypeLastReviewDate;
  createdAt: string;
  updatedAt: string;
}

export type ValidationErrorTypeLocItem = string | number;

export interface ValidationErrorType {
  loc: ValidationErrorTypeLocItem[];
  msg: string;
  type: string;
}

export type ValidationRequestDTOTypeStdin = string | null;

export interface ValidationRequestDTOType {
  sourceCode: string;
  language: CodeLanguageType;
  stdin?: ValidationRequestDTOTypeStdin;
}

export interface ValidationResultDTOType {
  blockId: string;
  sourceCode: string;
  language: string;
  allTestsPassed: boolean;
  totalTests: number;
  passedTests: number;
  score: number;
  validatedAt: string;
  testResults: TestCaseExecutionType[];
}

export interface AppApplicationDtoAdminDtoHealthResponseType {
  status: string;
  module: string;
}

/**
 * –û—Ç–≤–µ—Ç health check
 */
export interface AppApplicationDtoMindmapDtoHealthResponseType {
  status: string;
  module: string;
}

export type AppApplicationDtoMindmapDtoTaskResponseTypeProgress = TaskProgressResponseType | null;

/**
 * –ó–∞–¥–∞—á–∞
 */
export interface AppApplicationDtoMindmapDtoTaskResponseType {
  id: string;
  title: string;
  description: string;
  hasCode: boolean;
  progress?: AppApplicationDtoMindmapDtoTaskResponseTypeProgress;
}

export type AppApplicationDtoTaskDtoTaskResponseTypeDescription = string | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeSubCategory = string | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeFileId = string | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeFile = FileResponseType | null;

export type AppApplicationDtoTaskDtoTaskResponseTypePathTitles = string[] | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeBlockLevel = number | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeOrderInFile = number | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeTextContent = string | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeCodeContent = string | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeCodeLanguage = string | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeIsCodeFoldable = boolean | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeCodeFoldTitle = string | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeExtractedUrls = string[] | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeCompanies = string[] | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeQuestionBlock = string | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeAnswerBlock = string | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeTags = string[] | null;

export type AppApplicationDtoTaskDtoTaskResponseTypeOrderIndex = number | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞–Ω–∏–∏
 */
export interface AppApplicationDtoTaskDtoTaskResponseType {
  id: string;
  type: string;
  title: string;
  description?: AppApplicationDtoTaskDtoTaskResponseTypeDescription;
  category: string;
  subCategory?: AppApplicationDtoTaskDtoTaskResponseTypeSubCategory;
  fileId?: AppApplicationDtoTaskDtoTaskResponseTypeFileId;
  file?: AppApplicationDtoTaskDtoTaskResponseTypeFile;
  pathTitles?: AppApplicationDtoTaskDtoTaskResponseTypePathTitles;
  blockLevel?: AppApplicationDtoTaskDtoTaskResponseTypeBlockLevel;
  orderInFile?: AppApplicationDtoTaskDtoTaskResponseTypeOrderInFile;
  textContent?: AppApplicationDtoTaskDtoTaskResponseTypeTextContent;
  codeContent?: AppApplicationDtoTaskDtoTaskResponseTypeCodeContent;
  codeLanguage?: AppApplicationDtoTaskDtoTaskResponseTypeCodeLanguage;
  isCodeFoldable?: AppApplicationDtoTaskDtoTaskResponseTypeIsCodeFoldable;
  codeFoldTitle?: AppApplicationDtoTaskDtoTaskResponseTypeCodeFoldTitle;
  extractedUrls?: AppApplicationDtoTaskDtoTaskResponseTypeExtractedUrls;
  companies?: AppApplicationDtoTaskDtoTaskResponseTypeCompanies;
  questionBlock?: AppApplicationDtoTaskDtoTaskResponseTypeQuestionBlock;
  answerBlock?: AppApplicationDtoTaskDtoTaskResponseTypeAnswerBlock;
  tags?: AppApplicationDtoTaskDtoTaskResponseTypeTags;
  orderIndex?: AppApplicationDtoTaskDtoTaskResponseTypeOrderIndex;
  currentUserSolvedCount?: number;
  createdAt: string;
  updatedAt: string;
}

export type GetContentBlocksApiV2ContentBlocksGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –ß–∞—Å—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É WebDAV
 */
webdavPath?: string | null;
/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
mainCategory?: string | null;
/**
 * –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
subCategory?: string | null;
/**
 * ID —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤
 */
filePathId?: string | null;
/**
 * –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
 */
q?: string | null;
/**
 * –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortBy?: string;
/**
 * –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortOrder?: string;
};

export type GetContentFilesApiV2ContentFilesGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
mainCategory?: string | null;
/**
 * –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
subCategory?: string | null;
/**
 * –ü–æ–∏—Å–∫ –ø–æ –ø—É—Ç–∏ WebDAV
 */
webdavPath?: string | null;
};

export type GetTheoryCardsApiV2TheoryCardsGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
category?: string | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
subCategory?: string | null;
/**
 * –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–ª–æ–¥—ã
 */
deck?: string | null;
/**
 * –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortBy?: string;
/**
 * –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortOrder?: string;
/**
 * –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
 */
q?: string | null;
/**
 * –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
 */
onlyUnstudied?: boolean;
};

export type GetDueTheoryCardsApiV2TheoryCardsDueGetParams = {
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type GetTaskItemsApiV2TasksItemsGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)
 */
mainCategories?: string[];
/**
 * –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)
 */
subCategories?: string[];
/**
 * –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
 */
q?: string | null;
/**
 * –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortBy?: string;
/**
 * –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortOrder?: string;
/**
 * –¢–∏–ø: content_block, theory_quiz –∏–ª–∏ all
 */
itemType?: string | null;
/**
 * –¢–æ–ª—å–∫–æ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–µ
 */
onlyUnsolved?: boolean | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, deprecated)
 */
companies?: string | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)
 */
companiesList?: string[];
};

export type GetCompaniesApiV2TasksCompaniesGetParams = {
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
mainCategories?: string[];
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
subCategories?: string[];
};

export type GetUserExecutionsApiV2CodeEditorExecutionsGetParams = {
blockId?: string | null;
limit?: number;
offset?: number;
};

export type GenerateMindmapApiV2MindmapGenerateGetParams = {
/**
 * –¢–∏–ø —Å—Ç—Ä—É–∫—Ç—É—Ä—ã mindmap
 */
structure_type?: string;
/**
 * –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è
 */
technology?: string;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
 */
difficulty_filter?: string | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–µ
 */
topic_filter?: string | null;
};

export type GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams = {
/**
 * –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è
 */
technology?: string;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
 */
difficulty_filter?: string | null;
};

export type GetUsersApiV2AdminUsersGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
 */
role?: string | null;
/**
 * –ü–æ–∏—Å–∫ –ø–æ email
 */
search?: string | null;
};

export type GetContentFilesApiV2AdminContentFilesGetParams = {
/**
 * @minimum 1
 */
page?: number;
/**
 * @minimum 1
 * @maximum 100
 */
limit?: number;
category?: string | null;
search?: string | null;
};

export type GetContentBlocksApiV2AdminContentBlocksGetParams = {
/**
 * @minimum 1
 */
page?: number;
/**
 * @minimum 1
 * @maximum 100
 */
limit?: number;
file_id?: string | null;
search?: string | null;
};

export type GetTheoryCardsApiV2AdminTheoryCardsGetParams = {
/**
 * @minimum 1
 */
page?: number;
/**
 * @minimum 1
 * @maximum 100
 */
limit?: number;
category?: string | null;
search?: string | null;
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
 * @summary Health Check
 */
export const healthCheckApiHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckApiHealthGetQueryKey = () => {
    return [`/api/health`] as const;
    }

    
export const getHealthCheckApiHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckApiHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckApiHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckApiHealthGet>>> = ({ signal }) => healthCheckApiHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckApiHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckApiHealthGet>>>
export type HealthCheckApiHealthGetQueryError = unknown


export function useHealthCheckApiHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckApiHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckApiHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Api Root
 */
export const apiRootApiGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/`, method: 'GET', signal
    },
      );
    }
  

export const getApiRootApiGetQueryKey = () => {
    return [`/api/`] as const;
    }

    
export const getApiRootApiGetQueryOptions = <TData = Awaited<ReturnType<typeof apiRootApiGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiRootApiGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiRootApiGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiRootApiGet>>> = ({ signal }) => apiRootApiGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiRootApiGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiRootApiGetQueryResult = NonNullable<Awaited<ReturnType<typeof apiRootApiGet>>>
export type ApiRootApiGetQueryError = unknown


export function useApiRootApiGet<TData = Awaited<ReturnType<typeof apiRootApiGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiRootApiGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiRootApiGet>>,
          TError,
          Awaited<ReturnType<typeof apiRootApiGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiRootApiGet<TData = Awaited<ReturnType<typeof apiRootApiGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiRootApiGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiRootApiGet>>,
          TError,
          Awaited<ReturnType<typeof apiRootApiGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiRootApiGet<TData = Awaited<ReturnType<typeof apiRootApiGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiRootApiGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Api Root
 */

export function useApiRootApiGet<TData = Awaited<ReturnType<typeof apiRootApiGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiRootApiGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiRootApiGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Login
 */
export const loginApiV2AuthLoginPost = (
    loginRequestType: LoginRequestType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<LoginResponseType>(
      {url: `/api/v2/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequestType, signal
    },
      );
    }
  


export const getLoginApiV2AuthLoginPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginApiV2AuthLoginPost>>, TError,{data: LoginRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof loginApiV2AuthLoginPost>>, TError,{data: LoginRequestType}, TContext> => {

const mutationKey = ['loginApiV2AuthLoginPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginApiV2AuthLoginPost>>, {data: LoginRequestType}> = (props) => {
          const {data} = props ?? {};

          return  loginApiV2AuthLoginPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginApiV2AuthLoginPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginApiV2AuthLoginPost>>>
    export type LoginApiV2AuthLoginPostMutationBody = LoginRequestType
    export type LoginApiV2AuthLoginPostMutationError = HTTPValidationErrorType

    /**
 * @summary Login
 */
export const useLoginApiV2AuthLoginPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginApiV2AuthLoginPost>>, TError,{data: LoginRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof loginApiV2AuthLoginPost>>,
        TError,
        {data: LoginRequestType},
        TContext
      > => {

      const mutationOptions = getLoginApiV2AuthLoginPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Register
 */
export const registerApiV2AuthRegisterPost = (
    registerRequestType: RegisterRequestType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<RegisterResponseType>(
      {url: `/api/v2/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerRequestType, signal
    },
      );
    }
  


export const getRegisterApiV2AuthRegisterPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerApiV2AuthRegisterPost>>, TError,{data: RegisterRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof registerApiV2AuthRegisterPost>>, TError,{data: RegisterRequestType}, TContext> => {

const mutationKey = ['registerApiV2AuthRegisterPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerApiV2AuthRegisterPost>>, {data: RegisterRequestType}> = (props) => {
          const {data} = props ?? {};

          return  registerApiV2AuthRegisterPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterApiV2AuthRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerApiV2AuthRegisterPost>>>
    export type RegisterApiV2AuthRegisterPostMutationBody = RegisterRequestType
    export type RegisterApiV2AuthRegisterPostMutationError = HTTPValidationErrorType

    /**
 * @summary Register
 */
export const useRegisterApiV2AuthRegisterPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerApiV2AuthRegisterPost>>, TError,{data: RegisterRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerApiV2AuthRegisterPost>>,
        TError,
        {data: RegisterRequestType},
        TContext
      > => {

      const mutationOptions = getRegisterApiV2AuthRegisterPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get Me
 */
export const getMeApiV2AuthMeGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserResponseType>(
      {url: `/api/v2/auth/me`, method: 'GET', signal
    },
      );
    }
  

export const getGetMeApiV2AuthMeGetQueryKey = () => {
    return [`/api/v2/auth/me`] as const;
    }

    
export const getGetMeApiV2AuthMeGetQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiV2AuthMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>> = ({ signal }) => getMeApiV2AuthMeGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMeApiV2AuthMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>>
export type GetMeApiV2AuthMeGetQueryError = unknown


export function useGetMeApiV2AuthMeGet<TData = Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>,
          TError,
          Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeApiV2AuthMeGet<TData = Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>,
          TError,
          Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeApiV2AuthMeGet<TData = Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Me
 */

export function useGetMeApiV2AuthMeGet<TData = Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiV2AuthMeGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMeApiV2AuthMeGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 * @summary Logout
 */
export const logoutApiV2AuthLogoutPost = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/v2/auth/logout`, method: 'POST', signal
    },
      );
    }
  


export const getLogoutApiV2AuthLogoutPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logoutApiV2AuthLogoutPost>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof logoutApiV2AuthLogoutPost>>, TError,void, TContext> => {

const mutationKey = ['logoutApiV2AuthLogoutPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logoutApiV2AuthLogoutPost>>, void> = () => {
          

          return  logoutApiV2AuthLogoutPost()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LogoutApiV2AuthLogoutPostMutationResult = NonNullable<Awaited<ReturnType<typeof logoutApiV2AuthLogoutPost>>>
    
    export type LogoutApiV2AuthLogoutPostMutationError = unknown

    /**
 * @summary Logout
 */
export const useLogoutApiV2AuthLogoutPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logoutApiV2AuthLogoutPost>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof logoutApiV2AuthLogoutPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getLogoutApiV2AuthLogoutPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 * @summary Get Content Blocks
 */
export const getContentBlocksApiV2ContentBlocksGet = (
    params?: GetContentBlocksApiV2ContentBlocksGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<ContentBlocksListResponseType>(
      {url: `/api/v2/content/blocks`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetContentBlocksApiV2ContentBlocksGetQueryKey = (params?: GetContentBlocksApiV2ContentBlocksGetParams,) => {
    return [`/api/v2/content/blocks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetContentBlocksApiV2ContentBlocksGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError = HTTPValidationErrorType>(params?: GetContentBlocksApiV2ContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentBlocksApiV2ContentBlocksGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>> = ({ signal }) => getContentBlocksApiV2ContentBlocksGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentBlocksApiV2ContentBlocksGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>>
export type GetContentBlocksApiV2ContentBlocksGetQueryError = HTTPValidationErrorType


export function useGetContentBlocksApiV2ContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetContentBlocksApiV2ContentBlocksGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlocksApiV2ContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentBlocksApiV2ContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlocksApiV2ContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentBlocksApiV2ContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Blocks
 */

export function useGetContentBlocksApiV2ContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentBlocksApiV2ContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentBlocksApiV2ContentBlocksGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 * @summary Get Content Files
 */
export const getContentFilesApiV2ContentFilesGet = (
    params?: GetContentFilesApiV2ContentFilesGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<ContentFilesListResponseType>(
      {url: `/api/v2/content/files`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetContentFilesApiV2ContentFilesGetQueryKey = (params?: GetContentFilesApiV2ContentFilesGetParams,) => {
    return [`/api/v2/content/files`, ...(params ? [params]: [])] as const;
    }

    
export const getGetContentFilesApiV2ContentFilesGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError = HTTPValidationErrorType>(params?: GetContentFilesApiV2ContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentFilesApiV2ContentFilesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>> = ({ signal }) => getContentFilesApiV2ContentFilesGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentFilesApiV2ContentFilesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>>
export type GetContentFilesApiV2ContentFilesGetQueryError = HTTPValidationErrorType


export function useGetContentFilesApiV2ContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetContentFilesApiV2ContentFilesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentFilesApiV2ContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentFilesApiV2ContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentFilesApiV2ContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentFilesApiV2ContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Files
 */

export function useGetContentFilesApiV2ContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentFilesApiV2ContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentFilesApiV2ContentFilesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Get Content Categories
 */
export const getContentCategoriesApiV2ContentCategoriesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<ContentCategoriesResponseType>(
      {url: `/api/v2/content/categories`, method: 'GET', signal
    },
      );
    }
  

export const getGetContentCategoriesApiV2ContentCategoriesGetQueryKey = () => {
    return [`/api/v2/content/categories`] as const;
    }

    
export const getGetContentCategoriesApiV2ContentCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentCategoriesApiV2ContentCategoriesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>> = ({ signal }) => getContentCategoriesApiV2ContentCategoriesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentCategoriesApiV2ContentCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>>
export type GetContentCategoriesApiV2ContentCategoriesGetQueryError = unknown


export function useGetContentCategoriesApiV2ContentCategoriesGet<TData = Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentCategoriesApiV2ContentCategoriesGet<TData = Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentCategoriesApiV2ContentCategoriesGet<TData = Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Categories
 */

export function useGetContentCategoriesApiV2ContentCategoriesGet<TData = Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentCategoriesApiV2ContentCategoriesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @summary Get Content Subcategories
 */
export const getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet = (
    category: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<ContentSubcategoriesResponseType>(
      {url: `/api/v2/content/categories/${category}/subcategories`, method: 'GET', signal
    },
      );
    }
  

export const getGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGetQueryKey = (category: string,) => {
    return [`/api/v2/content/categories/${category}/subcategories`] as const;
    }

    
export const getGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGetQueryKey(category);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>> = ({ signal }) => getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet(category, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(category), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>>
export type GetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGetQueryError = HTTPValidationErrorType


export function useGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Subcategories
 */

export function useGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGetQueryOptions(category,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ ID
 * @summary Get Content Block
 */
export const getContentBlockApiV2ContentBlocksBlockIdGet = (
    blockId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<ContentBlockResponseType>(
      {url: `/api/v2/content/blocks/${blockId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetContentBlockApiV2ContentBlocksBlockIdGetQueryKey = (blockId: string,) => {
    return [`/api/v2/content/blocks/${blockId}`] as const;
    }

    
export const getGetContentBlockApiV2ContentBlocksBlockIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentBlockApiV2ContentBlocksBlockIdGetQueryKey(blockId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>> = ({ signal }) => getContentBlockApiV2ContentBlocksBlockIdGet(blockId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(blockId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentBlockApiV2ContentBlocksBlockIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>>
export type GetContentBlockApiV2ContentBlocksBlockIdGetQueryError = HTTPValidationErrorType


export function useGetContentBlockApiV2ContentBlocksBlockIdGet<TData = Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlockApiV2ContentBlocksBlockIdGet<TData = Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlockApiV2ContentBlocksBlockIdGet<TData = Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Block
 */

export function useGetContentBlockApiV2ContentBlocksBlockIdGet<TData = Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentBlockApiV2ContentBlocksBlockIdGetQueryOptions(blockId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –±–ª–æ–∫—É
 * @summary Update Content Block Progress
 */
export const updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch = (
    blockId: string,
    progressActionType: ProgressActionType,
 ) => {
      
      
      return apiClient<UserContentProgressResponseType>(
      {url: `/api/v2/content/blocks/${blockId}/progress`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: progressActionType
    },
      );
    }
  


export const getUpdateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatchMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch>>, TError,{blockId: string;data: ProgressActionType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch>>, TError,{blockId: string;data: ProgressActionType}, TContext> => {

const mutationKey = ['updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch>>, {blockId: string;data: ProgressActionType}> = (props) => {
          const {blockId,data} = props ?? {};

          return  updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch(blockId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch>>>
    export type UpdateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatchMutationBody = ProgressActionType
    export type UpdateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatchMutationError = HTTPValidationErrorType

    /**
 * @summary Update Content Block Progress
 */
export const useUpdateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch>>, TError,{blockId: string;data: ProgressActionType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch>>,
        TError,
        {blockId: string;data: ProgressActionType},
        TContext
      > => {

      const mutationOptions = getUpdateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 * @summary Get Theory Cards
 */
export const getTheoryCardsApiV2TheoryCardsGet = (
    params?: GetTheoryCardsApiV2TheoryCardsGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<TheoryCardsListResponseType>(
      {url: `/api/v2/theory/cards`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTheoryCardsApiV2TheoryCardsGetQueryKey = (params?: GetTheoryCardsApiV2TheoryCardsGetParams,) => {
    return [`/api/v2/theory/cards`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTheoryCardsApiV2TheoryCardsGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError = HTTPValidationErrorType>(params?: GetTheoryCardsApiV2TheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryCardsApiV2TheoryCardsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>> = ({ signal }) => getTheoryCardsApiV2TheoryCardsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryCardsApiV2TheoryCardsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>>
export type GetTheoryCardsApiV2TheoryCardsGetQueryError = HTTPValidationErrorType


export function useGetTheoryCardsApiV2TheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetTheoryCardsApiV2TheoryCardsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardsApiV2TheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTheoryCardsApiV2TheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardsApiV2TheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTheoryCardsApiV2TheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Cards
 */

export function useGetTheoryCardsApiV2TheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTheoryCardsApiV2TheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryCardsApiV2TheoryCardsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ–æ—Ä–∏–∏
 * @summary Get Theory Categories
 */
export const getTheoryCategoriesApiV2TheoryCategoriesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<TheoryCategoriesResponseType>(
      {url: `/api/v2/theory/categories`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryCategoriesApiV2TheoryCategoriesGetQueryKey = () => {
    return [`/api/v2/theory/categories`] as const;
    }

    
export const getGetTheoryCategoriesApiV2TheoryCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryCategoriesApiV2TheoryCategoriesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>> = ({ signal }) => getTheoryCategoriesApiV2TheoryCategoriesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryCategoriesApiV2TheoryCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>>
export type GetTheoryCategoriesApiV2TheoryCategoriesGetQueryError = unknown


export function useGetTheoryCategoriesApiV2TheoryCategoriesGet<TData = Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCategoriesApiV2TheoryCategoriesGet<TData = Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCategoriesApiV2TheoryCategoriesGet<TData = Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Categories
 */

export function useGetTheoryCategoriesApiV2TheoryCategoriesGet<TData = Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryCategoriesApiV2TheoryCategoriesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @summary Get Theory Subcategories
 */
export const getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet = (
    category: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<TheorySubcategoriesResponseType>(
      {url: `/api/v2/theory/categories/${category}/subcategories`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGetQueryKey = (category: string,) => {
    return [`/api/v2/theory/categories/${category}/subcategories`] as const;
    }

    
export const getGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGetQueryKey(category);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>> = ({ signal }) => getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet(category, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(category), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>>
export type GetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGetQueryError = HTTPValidationErrorType


export function useGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Subcategories
 */

export function useGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGetQueryOptions(category,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID
 * @summary Get Theory Card
 */
export const getTheoryCardApiV2TheoryCardsCardIdGet = (
    cardId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<TheoryCardResponseType>(
      {url: `/api/v2/theory/cards/${cardId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryCardApiV2TheoryCardsCardIdGetQueryKey = (cardId: string,) => {
    return [`/api/v2/theory/cards/${cardId}`] as const;
    }

    
export const getGetTheoryCardApiV2TheoryCardsCardIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryCardApiV2TheoryCardsCardIdGetQueryKey(cardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>> = ({ signal }) => getTheoryCardApiV2TheoryCardsCardIdGet(cardId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cardId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryCardApiV2TheoryCardsCardIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>>
export type GetTheoryCardApiV2TheoryCardsCardIdGetQueryError = HTTPValidationErrorType


export function useGetTheoryCardApiV2TheoryCardsCardIdGet<TData = Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardApiV2TheoryCardsCardIdGet<TData = Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardApiV2TheoryCardsCardIdGet<TData = Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Card
 */

export function useGetTheoryCardApiV2TheoryCardsCardIdGet<TData = Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryCardApiV2TheoryCardsCardIdGetQueryOptions(cardId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
 * @summary Update Theory Card Progress
 */
export const updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch = (
    cardId: string,
    progressActionType: ProgressActionType,
 ) => {
      
      
      return apiClient<UserTheoryProgressResponseType>(
      {url: `/api/v2/theory/cards/${cardId}/progress`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: progressActionType
    },
      );
    }
  


export const getUpdateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatchMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch>>, TError,{cardId: string;data: ProgressActionType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch>>, TError,{cardId: string;data: ProgressActionType}, TContext> => {

const mutationKey = ['updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch>>, {cardId: string;data: ProgressActionType}> = (props) => {
          const {cardId,data} = props ?? {};

          return  updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch(cardId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch>>>
    export type UpdateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatchMutationBody = ProgressActionType
    export type UpdateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatchMutationError = HTTPValidationErrorType

    /**
 * @summary Update Theory Card Progress
 */
export const useUpdateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch>>, TError,{cardId: string;data: ProgressActionType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch>>,
        TError,
        {cardId: string;data: ProgressActionType},
        TContext
      > => {

      const mutationOptions = getUpdateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π
 * @summary Review Theory Card
 */
export const reviewTheoryCardApiV2TheoryCardsCardIdReviewPost = (
    cardId: string,
    reviewRatingType: ReviewRatingType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserTheoryProgressResponseType>(
      {url: `/api/v2/theory/cards/${cardId}/review`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reviewRatingType, signal
    },
      );
    }
  


export const getReviewTheoryCardApiV2TheoryCardsCardIdReviewPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reviewTheoryCardApiV2TheoryCardsCardIdReviewPost>>, TError,{cardId: string;data: ReviewRatingType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof reviewTheoryCardApiV2TheoryCardsCardIdReviewPost>>, TError,{cardId: string;data: ReviewRatingType}, TContext> => {

const mutationKey = ['reviewTheoryCardApiV2TheoryCardsCardIdReviewPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof reviewTheoryCardApiV2TheoryCardsCardIdReviewPost>>, {cardId: string;data: ReviewRatingType}> = (props) => {
          const {cardId,data} = props ?? {};

          return  reviewTheoryCardApiV2TheoryCardsCardIdReviewPost(cardId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReviewTheoryCardApiV2TheoryCardsCardIdReviewPostMutationResult = NonNullable<Awaited<ReturnType<typeof reviewTheoryCardApiV2TheoryCardsCardIdReviewPost>>>
    export type ReviewTheoryCardApiV2TheoryCardsCardIdReviewPostMutationBody = ReviewRatingType
    export type ReviewTheoryCardApiV2TheoryCardsCardIdReviewPostMutationError = HTTPValidationErrorType

    /**
 * @summary Review Theory Card
 */
export const useReviewTheoryCardApiV2TheoryCardsCardIdReviewPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reviewTheoryCardApiV2TheoryCardsCardIdReviewPost>>, TError,{cardId: string;data: ReviewRatingType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof reviewTheoryCardApiV2TheoryCardsCardIdReviewPost>>,
        TError,
        {cardId: string;data: ReviewRatingType},
        TContext
      > => {

      const mutationOptions = getReviewTheoryCardApiV2TheoryCardsCardIdReviewPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
 * @summary Get Due Theory Cards
 */
export const getDueTheoryCardsApiV2TheoryCardsDueGet = (
    params?: GetDueTheoryCardsApiV2TheoryCardsDueGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<DueCardsResponseType>(
      {url: `/api/v2/theory/cards/due`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDueTheoryCardsApiV2TheoryCardsDueGetQueryKey = (params?: GetDueTheoryCardsApiV2TheoryCardsDueGetParams,) => {
    return [`/api/v2/theory/cards/due`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDueTheoryCardsApiV2TheoryCardsDueGetQueryOptions = <TData = Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError = HTTPValidationErrorType>(params?: GetDueTheoryCardsApiV2TheoryCardsDueGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDueTheoryCardsApiV2TheoryCardsDueGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>> = ({ signal }) => getDueTheoryCardsApiV2TheoryCardsDueGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDueTheoryCardsApiV2TheoryCardsDueGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>>
export type GetDueTheoryCardsApiV2TheoryCardsDueGetQueryError = HTTPValidationErrorType


export function useGetDueTheoryCardsApiV2TheoryCardsDueGet<TData = Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetDueTheoryCardsApiV2TheoryCardsDueGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>,
          TError,
          Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDueTheoryCardsApiV2TheoryCardsDueGet<TData = Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError = HTTPValidationErrorType>(
 params?: GetDueTheoryCardsApiV2TheoryCardsDueGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>,
          TError,
          Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDueTheoryCardsApiV2TheoryCardsDueGet<TData = Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError = HTTPValidationErrorType>(
 params?: GetDueTheoryCardsApiV2TheoryCardsDueGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Due Theory Cards
 */

export function useGetDueTheoryCardsApiV2TheoryCardsDueGet<TData = Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError = HTTPValidationErrorType>(
 params?: GetDueTheoryCardsApiV2TheoryCardsDueGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDueTheoryCardsApiV2TheoryCardsDueGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get Theory Stats Overview
 */
export const getTheoryStatsOverviewApiV2TheoryStatsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<TheoryStatsResponseType>(
      {url: `/api/v2/theory/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryStatsOverviewApiV2TheoryStatsGetQueryKey = () => {
    return [`/api/v2/theory/stats`] as const;
    }

    
export const getGetTheoryStatsOverviewApiV2TheoryStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryStatsOverviewApiV2TheoryStatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>> = ({ signal }) => getTheoryStatsOverviewApiV2TheoryStatsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryStatsOverviewApiV2TheoryStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>>
export type GetTheoryStatsOverviewApiV2TheoryStatsGetQueryError = unknown


export function useGetTheoryStatsOverviewApiV2TheoryStatsGet<TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryStatsOverviewApiV2TheoryStatsGet<TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryStatsOverviewApiV2TheoryStatsGet<TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Stats Overview
 */

export function useGetTheoryStatsOverviewApiV2TheoryStatsGet<TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryStatsOverviewApiV2TheoryStatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
 * @summary Reset Theory Card Progress
 */
export const resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost = (
    cardId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/v2/theory/cards/${cardId}/reset`, method: 'POST', signal
    },
      );
    }
  


export const getResetTheoryCardProgressApiV2TheoryCardsCardIdResetPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost>>, TError,{cardId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost>>, TError,{cardId: string}, TContext> => {

const mutationKey = ['resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost>>, {cardId: string}> = (props) => {
          const {cardId} = props ?? {};

          return  resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost(cardId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResetTheoryCardProgressApiV2TheoryCardsCardIdResetPostMutationResult = NonNullable<Awaited<ReturnType<typeof resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost>>>
    
    export type ResetTheoryCardProgressApiV2TheoryCardsCardIdResetPostMutationError = HTTPValidationErrorType

    /**
 * @summary Reset Theory Card Progress
 */
export const useResetTheoryCardProgressApiV2TheoryCardsCardIdResetPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost>>, TError,{cardId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost>>,
        TError,
        {cardId: string},
        TContext
      > => {

      const mutationOptions = getResetTheoryCardProgressApiV2TheoryCardsCardIdResetPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (content blocks + quiz –∫–∞—Ä—Ç–æ—á–∫–∏)
 * @summary Get Task Items
 */
export const getTaskItemsApiV2TasksItemsGet = (
    params?: GetTaskItemsApiV2TasksItemsGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<TasksListResponseType>(
      {url: `/api/v2/tasks/items`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTaskItemsApiV2TasksItemsGetQueryKey = (params?: GetTaskItemsApiV2TasksItemsGetParams,) => {
    return [`/api/v2/tasks/items`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTaskItemsApiV2TasksItemsGetQueryOptions = <TData = Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError = HTTPValidationErrorType>(params?: GetTaskItemsApiV2TasksItemsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTaskItemsApiV2TasksItemsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>> = ({ signal }) => getTaskItemsApiV2TasksItemsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTaskItemsApiV2TasksItemsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>>
export type GetTaskItemsApiV2TasksItemsGetQueryError = HTTPValidationErrorType


export function useGetTaskItemsApiV2TasksItemsGet<TData = Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetTaskItemsApiV2TasksItemsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskItemsApiV2TasksItemsGet<TData = Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTaskItemsApiV2TasksItemsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskItemsApiV2TasksItemsGet<TData = Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTaskItemsApiV2TasksItemsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Task Items
 */

export function useGetTaskItemsApiV2TasksItemsGet<TData = Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTaskItemsApiV2TasksItemsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTaskItemsApiV2TasksItemsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞–Ω–∏–π —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 * @summary Get Task Categories
 */
export const getTaskCategoriesApiV2TasksCategoriesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<TaskCategoriesResponseType>(
      {url: `/api/v2/tasks/categories`, method: 'GET', signal
    },
      );
    }
  

export const getGetTaskCategoriesApiV2TasksCategoriesGetQueryKey = () => {
    return [`/api/v2/tasks/categories`] as const;
    }

    
export const getGetTaskCategoriesApiV2TasksCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTaskCategoriesApiV2TasksCategoriesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>> = ({ signal }) => getTaskCategoriesApiV2TasksCategoriesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTaskCategoriesApiV2TasksCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>>
export type GetTaskCategoriesApiV2TasksCategoriesGetQueryError = unknown


export function useGetTaskCategoriesApiV2TasksCategoriesGet<TData = Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskCategoriesApiV2TasksCategoriesGet<TData = Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskCategoriesApiV2TasksCategoriesGet<TData = Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Task Categories
 */

export function useGetTaskCategoriesApiV2TasksCategoriesGet<TData = Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTaskCategoriesApiV2TasksCategoriesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –∑–∞–¥–∞–Ω–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
 * @summary Get Companies
 */
export const getCompaniesApiV2TasksCompaniesGet = (
    params?: GetCompaniesApiV2TasksCompaniesGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<TaskCompaniesResponseType>(
      {url: `/api/v2/tasks/companies`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetCompaniesApiV2TasksCompaniesGetQueryKey = (params?: GetCompaniesApiV2TasksCompaniesGetParams,) => {
    return [`/api/v2/tasks/companies`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCompaniesApiV2TasksCompaniesGetQueryOptions = <TData = Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError = HTTPValidationErrorType>(params?: GetCompaniesApiV2TasksCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompaniesApiV2TasksCompaniesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>> = ({ signal }) => getCompaniesApiV2TasksCompaniesGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCompaniesApiV2TasksCompaniesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>>
export type GetCompaniesApiV2TasksCompaniesGetQueryError = HTTPValidationErrorType


export function useGetCompaniesApiV2TasksCompaniesGet<TData = Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetCompaniesApiV2TasksCompaniesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>,
          TError,
          Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompaniesApiV2TasksCompaniesGet<TData = Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError = HTTPValidationErrorType>(
 params?: GetCompaniesApiV2TasksCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>,
          TError,
          Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompaniesApiV2TasksCompaniesGet<TData = Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError = HTTPValidationErrorType>(
 params?: GetCompaniesApiV2TasksCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Companies
 */

export function useGetCompaniesApiV2TasksCompaniesGet<TData = Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError = HTTPValidationErrorType>(
 params?: GetCompaniesApiV2TasksCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCompaniesApiV2TasksCompaniesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 * @summary Create Task Attempt
 */
export const createTaskAttemptApiV2ProgressAttemptsPost = (
    taskAttemptCreateDTOType: TaskAttemptCreateDTOType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<TaskAttemptResponseDTOType>(
      {url: `/api/v2/progress/attempts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: taskAttemptCreateDTOType, signal
    },
      );
    }
  


export const getCreateTaskAttemptApiV2ProgressAttemptsPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTaskAttemptApiV2ProgressAttemptsPost>>, TError,{data: TaskAttemptCreateDTOType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createTaskAttemptApiV2ProgressAttemptsPost>>, TError,{data: TaskAttemptCreateDTOType}, TContext> => {

const mutationKey = ['createTaskAttemptApiV2ProgressAttemptsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTaskAttemptApiV2ProgressAttemptsPost>>, {data: TaskAttemptCreateDTOType}> = (props) => {
          const {data} = props ?? {};

          return  createTaskAttemptApiV2ProgressAttemptsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTaskAttemptApiV2ProgressAttemptsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createTaskAttemptApiV2ProgressAttemptsPost>>>
    export type CreateTaskAttemptApiV2ProgressAttemptsPostMutationBody = TaskAttemptCreateDTOType
    export type CreateTaskAttemptApiV2ProgressAttemptsPostMutationError = HTTPValidationErrorType

    /**
 * @summary Create Task Attempt
 */
export const useCreateTaskAttemptApiV2ProgressAttemptsPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTaskAttemptApiV2ProgressAttemptsPost>>, TError,{data: TaskAttemptCreateDTOType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createTaskAttemptApiV2ProgressAttemptsPost>>,
        TError,
        {data: TaskAttemptCreateDTOType},
        TContext
      > => {

      const mutationOptions = getCreateTaskAttemptApiV2ProgressAttemptsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get My Detailed Progress
 */
export const getMyDetailedProgressApiV2ProgressUserMyDetailedGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserDetailedProgressResponseDTOType>(
      {url: `/api/v2/progress/user/my/detailed`, method: 'GET', signal
    },
      );
    }
  

export const getGetMyDetailedProgressApiV2ProgressUserMyDetailedGetQueryKey = () => {
    return [`/api/v2/progress/user/my/detailed`] as const;
    }

    
export const getGetMyDetailedProgressApiV2ProgressUserMyDetailedGetQueryOptions = <TData = Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyDetailedProgressApiV2ProgressUserMyDetailedGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>> = ({ signal }) => getMyDetailedProgressApiV2ProgressUserMyDetailedGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMyDetailedProgressApiV2ProgressUserMyDetailedGetQueryResult = NonNullable<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>>
export type GetMyDetailedProgressApiV2ProgressUserMyDetailedGetQueryError = unknown


export function useGetMyDetailedProgressApiV2ProgressUserMyDetailedGet<TData = Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyDetailedProgressApiV2ProgressUserMyDetailedGet<TData = Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyDetailedProgressApiV2ProgressUserMyDetailedGet<TData = Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get My Detailed Progress
 */

export function useGetMyDetailedProgressApiV2ProgressUserMyDetailedGet<TData = Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMyDetailedProgressApiV2ProgressUserMyDetailedGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 * @summary Get User Detailed Progress
 */
export const getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserDetailedProgressResponseDTOType>(
      {url: `/api/v2/progress/user/${userId}/detailed`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserDetailedProgressApiV2ProgressUserUserIdDetailedGetQueryKey = (userId: number,) => {
    return [`/api/v2/progress/user/${userId}/detailed`] as const;
    }

    
export const getGetUserDetailedProgressApiV2ProgressUserUserIdDetailedGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>, TError = HTTPValidationErrorType>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserDetailedProgressApiV2ProgressUserUserIdDetailedGetQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>> = ({ signal }) => getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserDetailedProgressApiV2ProgressUserUserIdDetailedGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>>
export type GetUserDetailedProgressApiV2ProgressUserUserIdDetailedGetQueryError = HTTPValidationErrorType


export function useGetUserDetailedProgressApiV2ProgressUserUserIdDetailedGet<TData = Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>, TError = HTTPValidationErrorType>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserDetailedProgressApiV2ProgressUserUserIdDetailedGet<TData = Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>, TError = HTTPValidationErrorType>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserDetailedProgressApiV2ProgressUserUserIdDetailedGet<TData = Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>, TError = HTTPValidationErrorType>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Detailed Progress
 */

export function useGetUserDetailedProgressApiV2ProgressUserUserIdDetailedGet<TData = Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>, TError = HTTPValidationErrorType>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressUserUserIdDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserDetailedProgressApiV2ProgressUserUserIdDetailedGetQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 * @summary Get Progress Analytics
 */
export const getProgressAnalyticsApiV2ProgressAnalyticsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<ProgressAnalyticsDTOType>(
      {url: `/api/v2/progress/analytics`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressAnalyticsApiV2ProgressAnalyticsGetQueryKey = () => {
    return [`/api/v2/progress/analytics`] as const;
    }

    
export const getGetProgressAnalyticsApiV2ProgressAnalyticsGetQueryOptions = <TData = Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressAnalyticsApiV2ProgressAnalyticsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>> = ({ signal }) => getProgressAnalyticsApiV2ProgressAnalyticsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressAnalyticsApiV2ProgressAnalyticsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>>
export type GetProgressAnalyticsApiV2ProgressAnalyticsGetQueryError = unknown


export function useGetProgressAnalyticsApiV2ProgressAnalyticsGet<TData = Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>,
          TError,
          Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressAnalyticsApiV2ProgressAnalyticsGet<TData = Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>,
          TError,
          Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressAnalyticsApiV2ProgressAnalyticsGet<TData = Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Progress Analytics
 */

export function useGetProgressAnalyticsApiV2ProgressAnalyticsGet<TData = Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressAnalyticsApiV2ProgressAnalyticsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Progress API
 * @summary Health Check
 */
export const healthCheckApiV2ProgressHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/v2/progress/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckApiV2ProgressHealthGetQueryKey = () => {
    return [`/api/v2/progress/health`] as const;
    }

    
export const getHealthCheckApiV2ProgressHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckApiV2ProgressHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>> = ({ signal }) => healthCheckApiV2ProgressHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckApiV2ProgressHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>>
export type HealthCheckApiV2ProgressHealthGetQueryError = unknown


export function useHealthCheckApiV2ProgressHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2ProgressHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2ProgressHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckApiV2ProgressHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2ProgressHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckApiV2ProgressHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
 * @summary Get Supported Languages
 */
export const getSupportedLanguagesApiV2CodeEditorLanguagesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<SupportedLanguageResponseDTOType[]>(
      {url: `/api/v2/code-editor/languages`, method: 'GET', signal
    },
      );
    }
  

export const getGetSupportedLanguagesApiV2CodeEditorLanguagesGetQueryKey = () => {
    return [`/api/v2/code-editor/languages`] as const;
    }

    
export const getGetSupportedLanguagesApiV2CodeEditorLanguagesGetQueryOptions = <TData = Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSupportedLanguagesApiV2CodeEditorLanguagesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>> = ({ signal }) => getSupportedLanguagesApiV2CodeEditorLanguagesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSupportedLanguagesApiV2CodeEditorLanguagesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>>
export type GetSupportedLanguagesApiV2CodeEditorLanguagesGetQueryError = unknown


export function useGetSupportedLanguagesApiV2CodeEditorLanguagesGet<TData = Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>,
          TError,
          Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSupportedLanguagesApiV2CodeEditorLanguagesGet<TData = Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>,
          TError,
          Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSupportedLanguagesApiV2CodeEditorLanguagesGet<TData = Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Supported Languages
 */

export function useGetSupportedLanguagesApiV2CodeEditorLanguagesGet<TData = Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSupportedLanguagesApiV2CodeEditorLanguagesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ
 * @summary Execute Code
 */
export const executeCodeApiV2CodeEditorExecutePost = (
    codeExecutionRequestDTOType: CodeExecutionRequestDTOType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<CodeExecutionResponseDTOType>(
      {url: `/api/v2/code-editor/execute`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: codeExecutionRequestDTOType, signal
    },
      );
    }
  


export const getExecuteCodeApiV2CodeEditorExecutePostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof executeCodeApiV2CodeEditorExecutePost>>, TError,{data: CodeExecutionRequestDTOType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof executeCodeApiV2CodeEditorExecutePost>>, TError,{data: CodeExecutionRequestDTOType}, TContext> => {

const mutationKey = ['executeCodeApiV2CodeEditorExecutePost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof executeCodeApiV2CodeEditorExecutePost>>, {data: CodeExecutionRequestDTOType}> = (props) => {
          const {data} = props ?? {};

          return  executeCodeApiV2CodeEditorExecutePost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ExecuteCodeApiV2CodeEditorExecutePostMutationResult = NonNullable<Awaited<ReturnType<typeof executeCodeApiV2CodeEditorExecutePost>>>
    export type ExecuteCodeApiV2CodeEditorExecutePostMutationBody = CodeExecutionRequestDTOType
    export type ExecuteCodeApiV2CodeEditorExecutePostMutationError = HTTPValidationErrorType

    /**
 * @summary Execute Code
 */
export const useExecuteCodeApiV2CodeEditorExecutePost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof executeCodeApiV2CodeEditorExecutePost>>, TError,{data: CodeExecutionRequestDTOType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof executeCodeApiV2CodeEditorExecutePost>>,
        TError,
        {data: CodeExecutionRequestDTOType},
        TContext
      > => {

      const mutationOptions = getExecuteCodeApiV2CodeEditorExecutePostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 * @summary Get Execution Result
 */
export const getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet = (
    executionId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<CodeExecutionResponseDTOType>(
      {url: `/api/v2/code-editor/executions/${executionId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGetQueryKey = (executionId: string,) => {
    return [`/api/v2/code-editor/executions/${executionId}`] as const;
    }

    
export const getGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGetQueryKey(executionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>> = ({ signal }) => getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet(executionId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(executionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExecutionResultApiV2CodeEditorExecutionsExecutionIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>>
export type GetExecutionResultApiV2CodeEditorExecutionsExecutionIdGetQueryError = HTTPValidationErrorType


export function useGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGet<TData = Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(
 executionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>,
          TError,
          Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGet<TData = Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(
 executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>,
          TError,
          Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGet<TData = Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(
 executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Execution Result
 */

export function useGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGet<TData = Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(
 executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGetQueryOptions(executionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Executions
 */
export const getUserExecutionsApiV2CodeEditorExecutionsGet = (
    params?: GetUserExecutionsApiV2CodeEditorExecutionsGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<CodeExecutionResponseDTOType[]>(
      {url: `/api/v2/code-editor/executions`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserExecutionsApiV2CodeEditorExecutionsGetQueryKey = (params?: GetUserExecutionsApiV2CodeEditorExecutionsGetParams,) => {
    return [`/api/v2/code-editor/executions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserExecutionsApiV2CodeEditorExecutionsGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(params?: GetUserExecutionsApiV2CodeEditorExecutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserExecutionsApiV2CodeEditorExecutionsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>> = ({ signal }) => getUserExecutionsApiV2CodeEditorExecutionsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserExecutionsApiV2CodeEditorExecutionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>>
export type GetUserExecutionsApiV2CodeEditorExecutionsGetQueryError = HTTPValidationErrorType


export function useGetUserExecutionsApiV2CodeEditorExecutionsGet<TData = Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetUserExecutionsApiV2CodeEditorExecutionsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserExecutionsApiV2CodeEditorExecutionsGet<TData = Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserExecutionsApiV2CodeEditorExecutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserExecutionsApiV2CodeEditorExecutionsGet<TData = Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserExecutionsApiV2CodeEditorExecutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Executions
 */

export function useGetUserExecutionsApiV2CodeEditorExecutionsGet<TData = Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserExecutionsApiV2CodeEditorExecutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserExecutionsApiV2CodeEditorExecutionsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Save Solution
 */
export const saveSolutionApiV2CodeEditorSolutionsPost = (
    userCodeSolutionCreateDTOType: UserCodeSolutionCreateDTOType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserCodeSolutionResponseDTOType>(
      {url: `/api/v2/code-editor/solutions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCodeSolutionCreateDTOType, signal
    },
      );
    }
  


export const getSaveSolutionApiV2CodeEditorSolutionsPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveSolutionApiV2CodeEditorSolutionsPost>>, TError,{data: UserCodeSolutionCreateDTOType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof saveSolutionApiV2CodeEditorSolutionsPost>>, TError,{data: UserCodeSolutionCreateDTOType}, TContext> => {

const mutationKey = ['saveSolutionApiV2CodeEditorSolutionsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveSolutionApiV2CodeEditorSolutionsPost>>, {data: UserCodeSolutionCreateDTOType}> = (props) => {
          const {data} = props ?? {};

          return  saveSolutionApiV2CodeEditorSolutionsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SaveSolutionApiV2CodeEditorSolutionsPostMutationResult = NonNullable<Awaited<ReturnType<typeof saveSolutionApiV2CodeEditorSolutionsPost>>>
    export type SaveSolutionApiV2CodeEditorSolutionsPostMutationBody = UserCodeSolutionCreateDTOType
    export type SaveSolutionApiV2CodeEditorSolutionsPostMutationError = HTTPValidationErrorType

    /**
 * @summary Save Solution
 */
export const useSaveSolutionApiV2CodeEditorSolutionsPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveSolutionApiV2CodeEditorSolutionsPost>>, TError,{data: UserCodeSolutionCreateDTOType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof saveSolutionApiV2CodeEditorSolutionsPost>>,
        TError,
        {data: UserCodeSolutionCreateDTOType},
        TContext
      > => {

      const mutationOptions = getSaveSolutionApiV2CodeEditorSolutionsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞
 * @summary Get Block Solutions
 */
export const getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet = (
    blockId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserCodeSolutionResponseDTOType[]>(
      {url: `/api/v2/code-editor/solutions/${blockId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGetQueryKey = (blockId: string,) => {
    return [`/api/v2/code-editor/solutions/${blockId}`] as const;
    }

    
export const getGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGetQueryKey(blockId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>> = ({ signal }) => getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet(blockId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(blockId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>>
export type GetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGetQueryError = HTTPValidationErrorType


export function useGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet<TData = Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet<TData = Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet<TData = Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Block Solutions
 */

export function useGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet<TData = Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGetQueryOptions(blockId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Update Solution
 */
export const updateSolutionApiV2CodeEditorSolutionsSolutionIdPut = (
    solutionId: string,
    userCodeSolutionUpdateDTOType: UserCodeSolutionUpdateDTOType,
 ) => {
      
      
      return apiClient<UserCodeSolutionResponseDTOType>(
      {url: `/api/v2/code-editor/solutions/${solutionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userCodeSolutionUpdateDTOType
    },
      );
    }
  


export const getUpdateSolutionApiV2CodeEditorSolutionsSolutionIdPutMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSolutionApiV2CodeEditorSolutionsSolutionIdPut>>, TError,{solutionId: string;data: UserCodeSolutionUpdateDTOType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateSolutionApiV2CodeEditorSolutionsSolutionIdPut>>, TError,{solutionId: string;data: UserCodeSolutionUpdateDTOType}, TContext> => {

const mutationKey = ['updateSolutionApiV2CodeEditorSolutionsSolutionIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSolutionApiV2CodeEditorSolutionsSolutionIdPut>>, {solutionId: string;data: UserCodeSolutionUpdateDTOType}> = (props) => {
          const {solutionId,data} = props ?? {};

          return  updateSolutionApiV2CodeEditorSolutionsSolutionIdPut(solutionId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateSolutionApiV2CodeEditorSolutionsSolutionIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateSolutionApiV2CodeEditorSolutionsSolutionIdPut>>>
    export type UpdateSolutionApiV2CodeEditorSolutionsSolutionIdPutMutationBody = UserCodeSolutionUpdateDTOType
    export type UpdateSolutionApiV2CodeEditorSolutionsSolutionIdPutMutationError = HTTPValidationErrorType

    /**
 * @summary Update Solution
 */
export const useUpdateSolutionApiV2CodeEditorSolutionsSolutionIdPut = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSolutionApiV2CodeEditorSolutionsSolutionIdPut>>, TError,{solutionId: string;data: UserCodeSolutionUpdateDTOType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateSolutionApiV2CodeEditorSolutionsSolutionIdPut>>,
        TError,
        {solutionId: string;data: UserCodeSolutionUpdateDTOType},
        TContext
      > => {

      const mutationOptions = getUpdateSolutionApiV2CodeEditorSolutionsSolutionIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get Execution Stats
 */
export const getExecutionStatsApiV2CodeEditorStatsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<ExecutionStatsDTOType>(
      {url: `/api/v2/code-editor/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetExecutionStatsApiV2CodeEditorStatsGetQueryKey = () => {
    return [`/api/v2/code-editor/stats`] as const;
    }

    
export const getGetExecutionStatsApiV2CodeEditorStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExecutionStatsApiV2CodeEditorStatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>> = ({ signal }) => getExecutionStatsApiV2CodeEditorStatsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExecutionStatsApiV2CodeEditorStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>>
export type GetExecutionStatsApiV2CodeEditorStatsGetQueryError = unknown


export function useGetExecutionStatsApiV2CodeEditorStatsGet<TData = Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExecutionStatsApiV2CodeEditorStatsGet<TData = Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExecutionStatsApiV2CodeEditorStatsGet<TData = Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Execution Stats
 */

export function useGetExecutionStatsApiV2CodeEditorStatsGet<TData = Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetExecutionStatsApiV2CodeEditorStatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –¥–ª—è –±–ª–æ–∫–∞
 * @summary Get Test Cases
 */
export const getTestCasesApiV2CodeEditorTestCasesBlockIdGet = (
    blockId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<TestCasesResponseDTOType>(
      {url: `/api/v2/code-editor/test-cases/${blockId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTestCasesApiV2CodeEditorTestCasesBlockIdGetQueryKey = (blockId: string,) => {
    return [`/api/v2/code-editor/test-cases/${blockId}`] as const;
    }

    
export const getGetTestCasesApiV2CodeEditorTestCasesBlockIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError = HTTPValidationErrorType>(blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTestCasesApiV2CodeEditorTestCasesBlockIdGetQueryKey(blockId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>> = ({ signal }) => getTestCasesApiV2CodeEditorTestCasesBlockIdGet(blockId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(blockId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTestCasesApiV2CodeEditorTestCasesBlockIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>>
export type GetTestCasesApiV2CodeEditorTestCasesBlockIdGetQueryError = HTTPValidationErrorType


export function useGetTestCasesApiV2CodeEditorTestCasesBlockIdGet<TData = Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTestCasesApiV2CodeEditorTestCasesBlockIdGet<TData = Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTestCasesApiV2CodeEditorTestCasesBlockIdGet<TData = Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Test Cases
 */

export function useGetTestCasesApiV2CodeEditorTestCasesBlockIdGet<TData = Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTestCasesApiV2CodeEditorTestCasesBlockIdGetQueryOptions(blockId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤
 * @summary Validate Solution
 */
export const validateSolutionApiV2CodeEditorValidateBlockIdPost = (
    blockId: string,
    validationRequestDTOType: ValidationRequestDTOType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<ValidationResultDTOType>(
      {url: `/api/v2/code-editor/validate/${blockId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: validationRequestDTOType, signal
    },
      );
    }
  


export const getValidateSolutionApiV2CodeEditorValidateBlockIdPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validateSolutionApiV2CodeEditorValidateBlockIdPost>>, TError,{blockId: string;data: ValidationRequestDTOType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof validateSolutionApiV2CodeEditorValidateBlockIdPost>>, TError,{blockId: string;data: ValidationRequestDTOType}, TContext> => {

const mutationKey = ['validateSolutionApiV2CodeEditorValidateBlockIdPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof validateSolutionApiV2CodeEditorValidateBlockIdPost>>, {blockId: string;data: ValidationRequestDTOType}> = (props) => {
          const {blockId,data} = props ?? {};

          return  validateSolutionApiV2CodeEditorValidateBlockIdPost(blockId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ValidateSolutionApiV2CodeEditorValidateBlockIdPostMutationResult = NonNullable<Awaited<ReturnType<typeof validateSolutionApiV2CodeEditorValidateBlockIdPost>>>
    export type ValidateSolutionApiV2CodeEditorValidateBlockIdPostMutationBody = ValidationRequestDTOType
    export type ValidateSolutionApiV2CodeEditorValidateBlockIdPostMutationError = HTTPValidationErrorType

    /**
 * @summary Validate Solution
 */
export const useValidateSolutionApiV2CodeEditorValidateBlockIdPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validateSolutionApiV2CodeEditorValidateBlockIdPost>>, TError,{blockId: string;data: ValidationRequestDTOType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof validateSolutionApiV2CodeEditorValidateBlockIdPost>>,
        TError,
        {blockId: string;data: ValidationRequestDTOType},
        TContext
      > => {

      const mutationOptions = getValidateSolutionApiV2CodeEditorValidateBlockIdPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Code Editor API
 * @summary Health Check
 */
export const healthCheckApiV2CodeEditorHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/v2/code-editor/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckApiV2CodeEditorHealthGetQueryKey = () => {
    return [`/api/v2/code-editor/health`] as const;
    }

    
export const getHealthCheckApiV2CodeEditorHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckApiV2CodeEditorHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>> = ({ signal }) => healthCheckApiV2CodeEditorHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckApiV2CodeEditorHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>>
export type HealthCheckApiV2CodeEditorHealthGetQueryError = unknown


export function useHealthCheckApiV2CodeEditorHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2CodeEditorHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2CodeEditorHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckApiV2CodeEditorHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckApiV2CodeEditorHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Stats Overview
 */
export const getUserStatsOverviewApiV2StatsOverviewGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserStatsOverviewDTOType>(
      {url: `/api/v2/stats/overview`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserStatsOverviewApiV2StatsOverviewGetQueryKey = () => {
    return [`/api/v2/stats/overview`] as const;
    }

    
export const getGetUserStatsOverviewApiV2StatsOverviewGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserStatsOverviewApiV2StatsOverviewGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>> = ({ signal }) => getUserStatsOverviewApiV2StatsOverviewGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserStatsOverviewApiV2StatsOverviewGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>>
export type GetUserStatsOverviewApiV2StatsOverviewGetQueryError = unknown


export function useGetUserStatsOverviewApiV2StatsOverviewGet<TData = Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>,
          TError,
          Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserStatsOverviewApiV2StatsOverviewGet<TData = Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>,
          TError,
          Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserStatsOverviewApiV2StatsOverviewGet<TData = Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Stats Overview
 */

export function useGetUserStatsOverviewApiV2StatsOverviewGet<TData = Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsOverviewGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserStatsOverviewApiV2StatsOverviewGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
 * @summary Get Content Stats
 */
export const getContentStatsApiV2StatsContentGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<ContentStatsDTOType>(
      {url: `/api/v2/stats/content`, method: 'GET', signal
    },
      );
    }
  

export const getGetContentStatsApiV2StatsContentGetQueryKey = () => {
    return [`/api/v2/stats/content`] as const;
    }

    
export const getGetContentStatsApiV2StatsContentGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentStatsApiV2StatsContentGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>> = ({ signal }) => getContentStatsApiV2StatsContentGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentStatsApiV2StatsContentGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>>
export type GetContentStatsApiV2StatsContentGetQueryError = unknown


export function useGetContentStatsApiV2StatsContentGet<TData = Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>,
          TError,
          Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentStatsApiV2StatsContentGet<TData = Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>,
          TError,
          Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentStatsApiV2StatsContentGet<TData = Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Stats
 */

export function useGetContentStatsApiV2StatsContentGet<TData = Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2StatsContentGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentStatsApiV2StatsContentGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–æ—Ä–∏–∏
 * @summary Get Theory Stats
 */
export const getTheoryStatsApiV2StatsTheoryGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<TheoryStatsDTOType>(
      {url: `/api/v2/stats/theory`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryStatsApiV2StatsTheoryGetQueryKey = () => {
    return [`/api/v2/stats/theory`] as const;
    }

    
export const getGetTheoryStatsApiV2StatsTheoryGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryStatsApiV2StatsTheoryGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>> = ({ signal }) => getTheoryStatsApiV2StatsTheoryGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryStatsApiV2StatsTheoryGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>>
export type GetTheoryStatsApiV2StatsTheoryGetQueryError = unknown


export function useGetTheoryStatsApiV2StatsTheoryGet<TData = Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryStatsApiV2StatsTheoryGet<TData = Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryStatsApiV2StatsTheoryGet<TData = Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Stats
 */

export function useGetTheoryStatsApiV2StatsTheoryGet<TData = Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsTheoryGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryStatsApiV2StatsTheoryGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ roadmap —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 * @summary Get Roadmap Stats
 */
export const getRoadmapStatsApiV2StatsRoadmapGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<RoadmapStatsDTOType>(
      {url: `/api/v2/stats/roadmap`, method: 'GET', signal
    },
      );
    }
  

export const getGetRoadmapStatsApiV2StatsRoadmapGetQueryKey = () => {
    return [`/api/v2/stats/roadmap`] as const;
    }

    
export const getGetRoadmapStatsApiV2StatsRoadmapGetQueryOptions = <TData = Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoadmapStatsApiV2StatsRoadmapGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>> = ({ signal }) => getRoadmapStatsApiV2StatsRoadmapGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRoadmapStatsApiV2StatsRoadmapGetQueryResult = NonNullable<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>>
export type GetRoadmapStatsApiV2StatsRoadmapGetQueryError = unknown


export function useGetRoadmapStatsApiV2StatsRoadmapGet<TData = Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>,
          TError,
          Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoadmapStatsApiV2StatsRoadmapGet<TData = Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>,
          TError,
          Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoadmapStatsApiV2StatsRoadmapGet<TData = Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Roadmap Stats
 */

export function useGetRoadmapStatsApiV2StatsRoadmapGet<TData = Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsRoadmapGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRoadmapStatsApiV2StatsRoadmapGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @summary Test Auth
 */
export const testAuthApiV2StatsTestAuthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/v2/stats/test-auth`, method: 'GET', signal
    },
      );
    }
  

export const getTestAuthApiV2StatsTestAuthGetQueryKey = () => {
    return [`/api/v2/stats/test-auth`] as const;
    }

    
export const getTestAuthApiV2StatsTestAuthGetQueryOptions = <TData = Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTestAuthApiV2StatsTestAuthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>> = ({ signal }) => testAuthApiV2StatsTestAuthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TestAuthApiV2StatsTestAuthGetQueryResult = NonNullable<Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>>
export type TestAuthApiV2StatsTestAuthGetQueryError = unknown


export function useTestAuthApiV2StatsTestAuthGet<TData = Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>,
          TError,
          Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTestAuthApiV2StatsTestAuthGet<TData = Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>,
          TError,
          Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTestAuthApiV2StatsTestAuthGet<TData = Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Test Auth
 */

export function useTestAuthApiV2StatsTestAuthGet<TData = Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testAuthApiV2StatsTestAuthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTestAuthApiV2StatsTestAuthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Stats API
 * @summary Health Check
 */
export const healthCheckApiV2StatsHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/v2/stats/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckApiV2StatsHealthGetQueryKey = () => {
    return [`/api/v2/stats/health`] as const;
    }

    
export const getHealthCheckApiV2StatsHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckApiV2StatsHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>> = ({ signal }) => healthCheckApiV2StatsHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckApiV2StatsHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>>
export type HealthCheckApiV2StatsHealthGetQueryError = unknown


export function useHealthCheckApiV2StatsHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2StatsHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2StatsHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckApiV2StatsHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2StatsHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckApiV2StatsHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è mindmap
 * @summary Generate Mindmap
 */
export const generateMindmapApiV2MindmapGenerateGet = (
    params?: GenerateMindmapApiV2MindmapGenerateGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<MindMapResponseType>(
      {url: `/api/v2/mindmap/generate`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGenerateMindmapApiV2MindmapGenerateGetQueryKey = (params?: GenerateMindmapApiV2MindmapGenerateGetParams,) => {
    return [`/api/v2/mindmap/generate`, ...(params ? [params]: [])] as const;
    }

    
export const getGenerateMindmapApiV2MindmapGenerateGetQueryOptions = <TData = Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError = HTTPValidationErrorType>(params?: GenerateMindmapApiV2MindmapGenerateGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGenerateMindmapApiV2MindmapGenerateGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>> = ({ signal }) => generateMindmapApiV2MindmapGenerateGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GenerateMindmapApiV2MindmapGenerateGetQueryResult = NonNullable<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>>
export type GenerateMindmapApiV2MindmapGenerateGetQueryError = HTTPValidationErrorType


export function useGenerateMindmapApiV2MindmapGenerateGet<TData = Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GenerateMindmapApiV2MindmapGenerateGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>,
          TError,
          Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGenerateMindmapApiV2MindmapGenerateGet<TData = Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError = HTTPValidationErrorType>(
 params?: GenerateMindmapApiV2MindmapGenerateGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>,
          TError,
          Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGenerateMindmapApiV2MindmapGenerateGet<TData = Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError = HTTPValidationErrorType>(
 params?: GenerateMindmapApiV2MindmapGenerateGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Generate Mindmap
 */

export function useGenerateMindmapApiV2MindmapGenerateGet<TData = Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError = HTTPValidationErrorType>(
 params?: GenerateMindmapApiV2MindmapGenerateGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGenerateMindmapApiV2MindmapGenerateGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è mindmap
 * @summary Get Available Technologies
 */
export const getAvailableTechnologiesApiV2MindmapTechnologiesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<TechnologiesResponseType>(
      {url: `/api/v2/mindmap/technologies`, method: 'GET', signal
    },
      );
    }
  

export const getGetAvailableTechnologiesApiV2MindmapTechnologiesGetQueryKey = () => {
    return [`/api/v2/mindmap/technologies`] as const;
    }

    
export const getGetAvailableTechnologiesApiV2MindmapTechnologiesGetQueryOptions = <TData = Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAvailableTechnologiesApiV2MindmapTechnologiesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>> = ({ signal }) => getAvailableTechnologiesApiV2MindmapTechnologiesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAvailableTechnologiesApiV2MindmapTechnologiesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>>
export type GetAvailableTechnologiesApiV2MindmapTechnologiesGetQueryError = unknown


export function useGetAvailableTechnologiesApiV2MindmapTechnologiesGet<TData = Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>,
          TError,
          Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableTechnologiesApiV2MindmapTechnologiesGet<TData = Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>,
          TError,
          Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableTechnologiesApiV2MindmapTechnologiesGet<TData = Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Available Technologies
 */

export function useGetAvailableTechnologiesApiV2MindmapTechnologiesGet<TData = Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAvailableTechnologiesApiV2MindmapTechnologiesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
 * @summary Get Topic Tasks
 */
export const getTopicTasksApiV2MindmapTopicTopicKeyTasksGet = (
    topicKey: string,
    params?: GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<TopicTasksResponseType>(
      {url: `/api/v2/mindmap/topic/${topicKey}/tasks`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTopicTasksApiV2MindmapTopicTopicKeyTasksGetQueryKey = (topicKey: string,
    params?: GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams,) => {
    return [`/api/v2/mindmap/topic/${topicKey}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTopicTasksApiV2MindmapTopicTopicKeyTasksGetQueryOptions = <TData = Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(topicKey: string,
    params?: GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTopicTasksApiV2MindmapTopicTopicKeyTasksGetQueryKey(topicKey,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>> = ({ signal }) => getTopicTasksApiV2MindmapTopicTopicKeyTasksGet(topicKey,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(topicKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>>
export type GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetQueryError = HTTPValidationErrorType


export function useGetTopicTasksApiV2MindmapTopicTopicKeyTasksGet<TData = Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(
 topicKey: string,
    params: undefined |  GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>,
          TError,
          Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopicTasksApiV2MindmapTopicTopicKeyTasksGet<TData = Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(
 topicKey: string,
    params?: GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>,
          TError,
          Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopicTasksApiV2MindmapTopicTopicKeyTasksGet<TData = Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(
 topicKey: string,
    params?: GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Topic Tasks
 */

export function useGetTopicTasksApiV2MindmapTopicTopicKeyTasksGet<TData = Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(
 topicKey: string,
    params?: GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTopicTasksApiV2MindmapTopicTopicKeyTasksGetQueryOptions(topicKey,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
 * @summary Get Task Detail
 */
export const getTaskDetailApiV2MindmapTaskTaskIdGet = (
    taskId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<TaskDetailResponseWrapperType>(
      {url: `/api/v2/mindmap/task/${taskId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTaskDetailApiV2MindmapTaskTaskIdGetQueryKey = (taskId: string,) => {
    return [`/api/v2/mindmap/task/${taskId}`] as const;
    }

    
export const getGetTaskDetailApiV2MindmapTaskTaskIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError = HTTPValidationErrorType>(taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTaskDetailApiV2MindmapTaskTaskIdGetQueryKey(taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>> = ({ signal }) => getTaskDetailApiV2MindmapTaskTaskIdGet(taskId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTaskDetailApiV2MindmapTaskTaskIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>>
export type GetTaskDetailApiV2MindmapTaskTaskIdGetQueryError = HTTPValidationErrorType


export function useGetTaskDetailApiV2MindmapTaskTaskIdGet<TData = Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskDetailApiV2MindmapTaskTaskIdGet<TData = Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskDetailApiV2MindmapTaskTaskIdGet<TData = Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Task Detail
 */

export function useGetTaskDetailApiV2MindmapTaskTaskIdGet<TData = Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTaskDetailApiV2MindmapTaskTaskIdGetQueryOptions(taskId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Health check –¥–ª—è mindmap –º–æ–¥—É–ª—è
 * @summary Health Check
 */
export const healthCheckApiV2MindmapHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<AppApplicationDtoMindmapDtoHealthResponseType>(
      {url: `/api/v2/mindmap/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckApiV2MindmapHealthGetQueryKey = () => {
    return [`/api/v2/mindmap/health`] as const;
    }

    
export const getHealthCheckApiV2MindmapHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckApiV2MindmapHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>> = ({ signal }) => healthCheckApiV2MindmapHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckApiV2MindmapHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>>
export type HealthCheckApiV2MindmapHealthGetQueryError = unknown


export function useHealthCheckApiV2MindmapHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2MindmapHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2MindmapHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckApiV2MindmapHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckApiV2MindmapHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Admin –º–æ–¥—É–ª—è
 * @summary Health Check
 */
export const healthCheckApiV2AdminHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<AppApplicationDtoAdminDtoHealthResponseType>(
      {url: `/api/v2/admin/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckApiV2AdminHealthGetQueryKey = () => {
    return [`/api/v2/admin/health`] as const;
    }

    
export const getHealthCheckApiV2AdminHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckApiV2AdminHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>> = ({ signal }) => healthCheckApiV2AdminHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckApiV2AdminHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>>
export type HealthCheckApiV2AdminHealthGetQueryError = unknown


export function useHealthCheckApiV2AdminHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2AdminHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2AdminHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckApiV2AdminHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2AdminHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckApiV2AdminHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
 * @summary Get System Stats
 */
export const getSystemStatsApiV2AdminStatsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<SystemStatsResponseType>(
      {url: `/api/v2/admin/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetSystemStatsApiV2AdminStatsGetQueryKey = () => {
    return [`/api/v2/admin/stats`] as const;
    }

    
export const getGetSystemStatsApiV2AdminStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSystemStatsApiV2AdminStatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>> = ({ signal }) => getSystemStatsApiV2AdminStatsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSystemStatsApiV2AdminStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>>
export type GetSystemStatsApiV2AdminStatsGetQueryError = unknown


export function useGetSystemStatsApiV2AdminStatsGet<TData = Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSystemStatsApiV2AdminStatsGet<TData = Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSystemStatsApiV2AdminStatsGet<TData = Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get System Stats
 */

export function useGetSystemStatsApiV2AdminStatsGet<TData = Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemStatsApiV2AdminStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSystemStatsApiV2AdminStatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @summary Get Users
 */
export const getUsersApiV2AdminUsersGet = (
    params?: GetUsersApiV2AdminUsersGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<PaginatedUsersResponseType>(
      {url: `/api/v2/admin/users`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUsersApiV2AdminUsersGetQueryKey = (params?: GetUsersApiV2AdminUsersGetParams,) => {
    return [`/api/v2/admin/users`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUsersApiV2AdminUsersGetQueryOptions = <TData = Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>, TError = HTTPValidationErrorType>(params?: GetUsersApiV2AdminUsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersApiV2AdminUsersGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>> = ({ signal }) => getUsersApiV2AdminUsersGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersApiV2AdminUsersGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>>
export type GetUsersApiV2AdminUsersGetQueryError = HTTPValidationErrorType


export function useGetUsersApiV2AdminUsersGet<TData = Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetUsersApiV2AdminUsersGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersApiV2AdminUsersGet<TData = Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>, TError = HTTPValidationErrorType>(
 params?: GetUsersApiV2AdminUsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersApiV2AdminUsersGet<TData = Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>, TError = HTTPValidationErrorType>(
 params?: GetUsersApiV2AdminUsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Users
 */

export function useGetUsersApiV2AdminUsersGet<TData = Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>, TError = HTTPValidationErrorType>(
 params?: GetUsersApiV2AdminUsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersApiV2AdminUsersGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersApiV2AdminUsersGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Create User
 */
export const createUserApiV2AdminUsersPost = (
    createUserRequestType: CreateUserRequestType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<AdminUserResponseType>(
      {url: `/api/v2/admin/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserRequestType, signal
    },
      );
    }
  


export const getCreateUserApiV2AdminUsersPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserApiV2AdminUsersPost>>, TError,{data: CreateUserRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createUserApiV2AdminUsersPost>>, TError,{data: CreateUserRequestType}, TContext> => {

const mutationKey = ['createUserApiV2AdminUsersPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUserApiV2AdminUsersPost>>, {data: CreateUserRequestType}> = (props) => {
          const {data} = props ?? {};

          return  createUserApiV2AdminUsersPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserApiV2AdminUsersPostMutationResult = NonNullable<Awaited<ReturnType<typeof createUserApiV2AdminUsersPost>>>
    export type CreateUserApiV2AdminUsersPostMutationBody = CreateUserRequestType
    export type CreateUserApiV2AdminUsersPostMutationError = HTTPValidationErrorType

    /**
 * @summary Create User
 */
export const useCreateUserApiV2AdminUsersPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserApiV2AdminUsersPost>>, TError,{data: CreateUserRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createUserApiV2AdminUsersPost>>,
        TError,
        {data: CreateUserRequestType},
        TContext
      > => {

      const mutationOptions = getCreateUserApiV2AdminUsersPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Update User
 */
export const updateUserApiV2AdminUsersUserIdPut = (
    userId: string,
    updateUserRequestType: UpdateUserRequestType,
 ) => {
      
      
      return apiClient<AdminUserResponseType>(
      {url: `/api/v2/admin/users/${userId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserRequestType
    },
      );
    }
  


export const getUpdateUserApiV2AdminUsersUserIdPutMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserApiV2AdminUsersUserIdPut>>, TError,{userId: string;data: UpdateUserRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateUserApiV2AdminUsersUserIdPut>>, TError,{userId: string;data: UpdateUserRequestType}, TContext> => {

const mutationKey = ['updateUserApiV2AdminUsersUserIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserApiV2AdminUsersUserIdPut>>, {userId: string;data: UpdateUserRequestType}> = (props) => {
          const {userId,data} = props ?? {};

          return  updateUserApiV2AdminUsersUserIdPut(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserApiV2AdminUsersUserIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserApiV2AdminUsersUserIdPut>>>
    export type UpdateUserApiV2AdminUsersUserIdPutMutationBody = UpdateUserRequestType
    export type UpdateUserApiV2AdminUsersUserIdPutMutationError = HTTPValidationErrorType

    /**
 * @summary Update User
 */
export const useUpdateUserApiV2AdminUsersUserIdPut = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserApiV2AdminUsersUserIdPut>>, TError,{userId: string;data: UpdateUserRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateUserApiV2AdminUsersUserIdPut>>,
        TError,
        {userId: string;data: UpdateUserRequestType},
        TContext
      > => {

      const mutationOptions = getUpdateUserApiV2AdminUsersUserIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Delete User
 */
export const deleteUserApiV2AdminUsersUserIdDelete = (
    userId: string,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/v2/admin/users/${userId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteUserApiV2AdminUsersUserIdDeleteMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserApiV2AdminUsersUserIdDelete>>, TError,{userId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteUserApiV2AdminUsersUserIdDelete>>, TError,{userId: string}, TContext> => {

const mutationKey = ['deleteUserApiV2AdminUsersUserIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUserApiV2AdminUsersUserIdDelete>>, {userId: string}> = (props) => {
          const {userId} = props ?? {};

          return  deleteUserApiV2AdminUsersUserIdDelete(userId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserApiV2AdminUsersUserIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUserApiV2AdminUsersUserIdDelete>>>
    
    export type DeleteUserApiV2AdminUsersUserIdDeleteMutationError = HTTPValidationErrorType

    /**
 * @summary Delete User
 */
export const useDeleteUserApiV2AdminUsersUserIdDelete = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserApiV2AdminUsersUserIdDelete>>, TError,{userId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteUserApiV2AdminUsersUserIdDelete>>,
        TError,
        {userId: string},
        TContext
      > => {

      const mutationOptions = getDeleteUserApiV2AdminUsersUserIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Get Content Stats
 */
export const getContentStatsApiV2AdminContentStatsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<ContentStatsResponseType>(
      {url: `/api/v2/admin/content/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetContentStatsApiV2AdminContentStatsGetQueryKey = () => {
    return [`/api/v2/admin/content/stats`] as const;
    }

    
export const getGetContentStatsApiV2AdminContentStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentStatsApiV2AdminContentStatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>> = ({ signal }) => getContentStatsApiV2AdminContentStatsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentStatsApiV2AdminContentStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>>
export type GetContentStatsApiV2AdminContentStatsGetQueryError = unknown


export function useGetContentStatsApiV2AdminContentStatsGet<TData = Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentStatsApiV2AdminContentStatsGet<TData = Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentStatsApiV2AdminContentStatsGet<TData = Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Stats
 */

export function useGetContentStatsApiV2AdminContentStatsGet<TData = Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2AdminContentStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentStatsApiV2AdminContentStatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Get Content Files
 */
export const getContentFilesApiV2AdminContentFilesGet = (
    params?: GetContentFilesApiV2AdminContentFilesGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<PaginatedContentFilesResponseType>(
      {url: `/api/v2/admin/content/files`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetContentFilesApiV2AdminContentFilesGetQueryKey = (params?: GetContentFilesApiV2AdminContentFilesGetParams,) => {
    return [`/api/v2/admin/content/files`, ...(params ? [params]: [])] as const;
    }

    
export const getGetContentFilesApiV2AdminContentFilesGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>, TError = HTTPValidationErrorType>(params?: GetContentFilesApiV2AdminContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentFilesApiV2AdminContentFilesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>> = ({ signal }) => getContentFilesApiV2AdminContentFilesGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentFilesApiV2AdminContentFilesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>>
export type GetContentFilesApiV2AdminContentFilesGetQueryError = HTTPValidationErrorType


export function useGetContentFilesApiV2AdminContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetContentFilesApiV2AdminContentFilesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentFilesApiV2AdminContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentFilesApiV2AdminContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentFilesApiV2AdminContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentFilesApiV2AdminContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Files
 */

export function useGetContentFilesApiV2AdminContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentFilesApiV2AdminContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2AdminContentFilesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentFilesApiV2AdminContentFilesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Create Content File
 */
export const createContentFileApiV2AdminContentFilesPost = (
    createContentFileRequestType: CreateContentFileRequestType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<AdminContentFileResponseType>(
      {url: `/api/v2/admin/content/files`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createContentFileRequestType, signal
    },
      );
    }
  


export const getCreateContentFileApiV2AdminContentFilesPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createContentFileApiV2AdminContentFilesPost>>, TError,{data: CreateContentFileRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createContentFileApiV2AdminContentFilesPost>>, TError,{data: CreateContentFileRequestType}, TContext> => {

const mutationKey = ['createContentFileApiV2AdminContentFilesPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createContentFileApiV2AdminContentFilesPost>>, {data: CreateContentFileRequestType}> = (props) => {
          const {data} = props ?? {};

          return  createContentFileApiV2AdminContentFilesPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateContentFileApiV2AdminContentFilesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createContentFileApiV2AdminContentFilesPost>>>
    export type CreateContentFileApiV2AdminContentFilesPostMutationBody = CreateContentFileRequestType
    export type CreateContentFileApiV2AdminContentFilesPostMutationError = HTTPValidationErrorType

    /**
 * @summary Create Content File
 */
export const useCreateContentFileApiV2AdminContentFilesPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createContentFileApiV2AdminContentFilesPost>>, TError,{data: CreateContentFileRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createContentFileApiV2AdminContentFilesPost>>,
        TError,
        {data: CreateContentFileRequestType},
        TContext
      > => {

      const mutationOptions = getCreateContentFileApiV2AdminContentFilesPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Update Content File
 */
export const updateContentFileApiV2AdminContentFilesFileIdPut = (
    fileId: string,
    updateContentFileRequestType: UpdateContentFileRequestType,
 ) => {
      
      
      return apiClient<AdminContentFileResponseType>(
      {url: `/api/v2/admin/content/files/${fileId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateContentFileRequestType
    },
      );
    }
  


export const getUpdateContentFileApiV2AdminContentFilesFileIdPutMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentFileApiV2AdminContentFilesFileIdPut>>, TError,{fileId: string;data: UpdateContentFileRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateContentFileApiV2AdminContentFilesFileIdPut>>, TError,{fileId: string;data: UpdateContentFileRequestType}, TContext> => {

const mutationKey = ['updateContentFileApiV2AdminContentFilesFileIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateContentFileApiV2AdminContentFilesFileIdPut>>, {fileId: string;data: UpdateContentFileRequestType}> = (props) => {
          const {fileId,data} = props ?? {};

          return  updateContentFileApiV2AdminContentFilesFileIdPut(fileId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateContentFileApiV2AdminContentFilesFileIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateContentFileApiV2AdminContentFilesFileIdPut>>>
    export type UpdateContentFileApiV2AdminContentFilesFileIdPutMutationBody = UpdateContentFileRequestType
    export type UpdateContentFileApiV2AdminContentFilesFileIdPutMutationError = HTTPValidationErrorType

    /**
 * @summary Update Content File
 */
export const useUpdateContentFileApiV2AdminContentFilesFileIdPut = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentFileApiV2AdminContentFilesFileIdPut>>, TError,{fileId: string;data: UpdateContentFileRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateContentFileApiV2AdminContentFilesFileIdPut>>,
        TError,
        {fileId: string;data: UpdateContentFileRequestType},
        TContext
      > => {

      const mutationOptions = getUpdateContentFileApiV2AdminContentFilesFileIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Delete Content File
 */
export const deleteContentFileApiV2AdminContentFilesFileIdDelete = (
    fileId: string,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/v2/admin/content/files/${fileId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteContentFileApiV2AdminContentFilesFileIdDeleteMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContentFileApiV2AdminContentFilesFileIdDelete>>, TError,{fileId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteContentFileApiV2AdminContentFilesFileIdDelete>>, TError,{fileId: string}, TContext> => {

const mutationKey = ['deleteContentFileApiV2AdminContentFilesFileIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteContentFileApiV2AdminContentFilesFileIdDelete>>, {fileId: string}> = (props) => {
          const {fileId} = props ?? {};

          return  deleteContentFileApiV2AdminContentFilesFileIdDelete(fileId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteContentFileApiV2AdminContentFilesFileIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteContentFileApiV2AdminContentFilesFileIdDelete>>>
    
    export type DeleteContentFileApiV2AdminContentFilesFileIdDeleteMutationError = HTTPValidationErrorType

    /**
 * @summary Delete Content File
 */
export const useDeleteContentFileApiV2AdminContentFilesFileIdDelete = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContentFileApiV2AdminContentFilesFileIdDelete>>, TError,{fileId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteContentFileApiV2AdminContentFilesFileIdDelete>>,
        TError,
        {fileId: string},
        TContext
      > => {

      const mutationOptions = getDeleteContentFileApiV2AdminContentFilesFileIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Get Content Blocks
 */
export const getContentBlocksApiV2AdminContentBlocksGet = (
    params?: GetContentBlocksApiV2AdminContentBlocksGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<PaginatedContentBlocksResponseType>(
      {url: `/api/v2/admin/content/blocks`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetContentBlocksApiV2AdminContentBlocksGetQueryKey = (params?: GetContentBlocksApiV2AdminContentBlocksGetParams,) => {
    return [`/api/v2/admin/content/blocks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetContentBlocksApiV2AdminContentBlocksGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>, TError = HTTPValidationErrorType>(params?: GetContentBlocksApiV2AdminContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentBlocksApiV2AdminContentBlocksGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>> = ({ signal }) => getContentBlocksApiV2AdminContentBlocksGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentBlocksApiV2AdminContentBlocksGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>>
export type GetContentBlocksApiV2AdminContentBlocksGetQueryError = HTTPValidationErrorType


export function useGetContentBlocksApiV2AdminContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetContentBlocksApiV2AdminContentBlocksGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlocksApiV2AdminContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentBlocksApiV2AdminContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlocksApiV2AdminContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentBlocksApiV2AdminContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Blocks
 */

export function useGetContentBlocksApiV2AdminContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentBlocksApiV2AdminContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2AdminContentBlocksGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentBlocksApiV2AdminContentBlocksGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Create Content Block
 */
export const createContentBlockApiV2AdminContentBlocksPost = (
    createContentBlockRequestType: CreateContentBlockRequestType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<AdminContentBlockResponseType>(
      {url: `/api/v2/admin/content/blocks`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createContentBlockRequestType, signal
    },
      );
    }
  


export const getCreateContentBlockApiV2AdminContentBlocksPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createContentBlockApiV2AdminContentBlocksPost>>, TError,{data: CreateContentBlockRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createContentBlockApiV2AdminContentBlocksPost>>, TError,{data: CreateContentBlockRequestType}, TContext> => {

const mutationKey = ['createContentBlockApiV2AdminContentBlocksPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createContentBlockApiV2AdminContentBlocksPost>>, {data: CreateContentBlockRequestType}> = (props) => {
          const {data} = props ?? {};

          return  createContentBlockApiV2AdminContentBlocksPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateContentBlockApiV2AdminContentBlocksPostMutationResult = NonNullable<Awaited<ReturnType<typeof createContentBlockApiV2AdminContentBlocksPost>>>
    export type CreateContentBlockApiV2AdminContentBlocksPostMutationBody = CreateContentBlockRequestType
    export type CreateContentBlockApiV2AdminContentBlocksPostMutationError = HTTPValidationErrorType

    /**
 * @summary Create Content Block
 */
export const useCreateContentBlockApiV2AdminContentBlocksPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createContentBlockApiV2AdminContentBlocksPost>>, TError,{data: CreateContentBlockRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createContentBlockApiV2AdminContentBlocksPost>>,
        TError,
        {data: CreateContentBlockRequestType},
        TContext
      > => {

      const mutationOptions = getCreateContentBlockApiV2AdminContentBlocksPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Update Content Block
 */
export const updateContentBlockApiV2AdminContentBlocksBlockIdPut = (
    blockId: string,
    updateContentBlockRequestType: UpdateContentBlockRequestType,
 ) => {
      
      
      return apiClient<AdminContentBlockResponseType>(
      {url: `/api/v2/admin/content/blocks/${blockId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateContentBlockRequestType
    },
      );
    }
  


export const getUpdateContentBlockApiV2AdminContentBlocksBlockIdPutMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentBlockApiV2AdminContentBlocksBlockIdPut>>, TError,{blockId: string;data: UpdateContentBlockRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateContentBlockApiV2AdminContentBlocksBlockIdPut>>, TError,{blockId: string;data: UpdateContentBlockRequestType}, TContext> => {

const mutationKey = ['updateContentBlockApiV2AdminContentBlocksBlockIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateContentBlockApiV2AdminContentBlocksBlockIdPut>>, {blockId: string;data: UpdateContentBlockRequestType}> = (props) => {
          const {blockId,data} = props ?? {};

          return  updateContentBlockApiV2AdminContentBlocksBlockIdPut(blockId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateContentBlockApiV2AdminContentBlocksBlockIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateContentBlockApiV2AdminContentBlocksBlockIdPut>>>
    export type UpdateContentBlockApiV2AdminContentBlocksBlockIdPutMutationBody = UpdateContentBlockRequestType
    export type UpdateContentBlockApiV2AdminContentBlocksBlockIdPutMutationError = HTTPValidationErrorType

    /**
 * @summary Update Content Block
 */
export const useUpdateContentBlockApiV2AdminContentBlocksBlockIdPut = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentBlockApiV2AdminContentBlocksBlockIdPut>>, TError,{blockId: string;data: UpdateContentBlockRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateContentBlockApiV2AdminContentBlocksBlockIdPut>>,
        TError,
        {blockId: string;data: UpdateContentBlockRequestType},
        TContext
      > => {

      const mutationOptions = getUpdateContentBlockApiV2AdminContentBlocksBlockIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Delete Content Block
 */
export const deleteContentBlockApiV2AdminContentBlocksBlockIdDelete = (
    blockId: string,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/v2/admin/content/blocks/${blockId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteContentBlockApiV2AdminContentBlocksBlockIdDeleteMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContentBlockApiV2AdminContentBlocksBlockIdDelete>>, TError,{blockId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteContentBlockApiV2AdminContentBlocksBlockIdDelete>>, TError,{blockId: string}, TContext> => {

const mutationKey = ['deleteContentBlockApiV2AdminContentBlocksBlockIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteContentBlockApiV2AdminContentBlocksBlockIdDelete>>, {blockId: string}> = (props) => {
          const {blockId} = props ?? {};

          return  deleteContentBlockApiV2AdminContentBlocksBlockIdDelete(blockId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteContentBlockApiV2AdminContentBlocksBlockIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteContentBlockApiV2AdminContentBlocksBlockIdDelete>>>
    
    export type DeleteContentBlockApiV2AdminContentBlocksBlockIdDeleteMutationError = HTTPValidationErrorType

    /**
 * @summary Delete Content Block
 */
export const useDeleteContentBlockApiV2AdminContentBlocksBlockIdDelete = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContentBlockApiV2AdminContentBlocksBlockIdDelete>>, TError,{blockId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteContentBlockApiV2AdminContentBlocksBlockIdDelete>>,
        TError,
        {blockId: string},
        TContext
      > => {

      const mutationOptions = getDeleteContentBlockApiV2AdminContentBlocksBlockIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
 * @summary Get Theory Cards
 */
export const getTheoryCardsApiV2AdminTheoryCardsGet = (
    params?: GetTheoryCardsApiV2AdminTheoryCardsGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<PaginatedTheoryCardsResponseType>(
      {url: `/api/v2/admin/theory/cards`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTheoryCardsApiV2AdminTheoryCardsGetQueryKey = (params?: GetTheoryCardsApiV2AdminTheoryCardsGetParams,) => {
    return [`/api/v2/admin/theory/cards`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTheoryCardsApiV2AdminTheoryCardsGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>, TError = HTTPValidationErrorType>(params?: GetTheoryCardsApiV2AdminTheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryCardsApiV2AdminTheoryCardsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>> = ({ signal }) => getTheoryCardsApiV2AdminTheoryCardsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryCardsApiV2AdminTheoryCardsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>>
export type GetTheoryCardsApiV2AdminTheoryCardsGetQueryError = HTTPValidationErrorType


export function useGetTheoryCardsApiV2AdminTheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetTheoryCardsApiV2AdminTheoryCardsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardsApiV2AdminTheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTheoryCardsApiV2AdminTheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardsApiV2AdminTheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTheoryCardsApiV2AdminTheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Cards
 */

export function useGetTheoryCardsApiV2AdminTheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTheoryCardsApiV2AdminTheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2AdminTheoryCardsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryCardsApiV2AdminTheoryCardsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
 * @summary Create Theory Card
 */
export const createTheoryCardApiV2AdminTheoryCardsPost = (
    createTheoryCardRequestType: CreateTheoryCardRequestType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<AdminTheoryCardResponseType>(
      {url: `/api/v2/admin/theory/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTheoryCardRequestType, signal
    },
      );
    }
  


export const getCreateTheoryCardApiV2AdminTheoryCardsPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTheoryCardApiV2AdminTheoryCardsPost>>, TError,{data: CreateTheoryCardRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createTheoryCardApiV2AdminTheoryCardsPost>>, TError,{data: CreateTheoryCardRequestType}, TContext> => {

const mutationKey = ['createTheoryCardApiV2AdminTheoryCardsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTheoryCardApiV2AdminTheoryCardsPost>>, {data: CreateTheoryCardRequestType}> = (props) => {
          const {data} = props ?? {};

          return  createTheoryCardApiV2AdminTheoryCardsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTheoryCardApiV2AdminTheoryCardsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createTheoryCardApiV2AdminTheoryCardsPost>>>
    export type CreateTheoryCardApiV2AdminTheoryCardsPostMutationBody = CreateTheoryCardRequestType
    export type CreateTheoryCardApiV2AdminTheoryCardsPostMutationError = HTTPValidationErrorType

    /**
 * @summary Create Theory Card
 */
export const useCreateTheoryCardApiV2AdminTheoryCardsPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTheoryCardApiV2AdminTheoryCardsPost>>, TError,{data: CreateTheoryCardRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createTheoryCardApiV2AdminTheoryCardsPost>>,
        TError,
        {data: CreateTheoryCardRequestType},
        TContext
      > => {

      const mutationOptions = getCreateTheoryCardApiV2AdminTheoryCardsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
 * @summary Update Theory Card
 */
export const updateTheoryCardApiV2AdminTheoryCardsCardIdPut = (
    cardId: string,
    updateTheoryCardRequestType: UpdateTheoryCardRequestType,
 ) => {
      
      
      return apiClient<AdminTheoryCardResponseType>(
      {url: `/api/v2/admin/theory/cards/${cardId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateTheoryCardRequestType
    },
      );
    }
  


export const getUpdateTheoryCardApiV2AdminTheoryCardsCardIdPutMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTheoryCardApiV2AdminTheoryCardsCardIdPut>>, TError,{cardId: string;data: UpdateTheoryCardRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateTheoryCardApiV2AdminTheoryCardsCardIdPut>>, TError,{cardId: string;data: UpdateTheoryCardRequestType}, TContext> => {

const mutationKey = ['updateTheoryCardApiV2AdminTheoryCardsCardIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTheoryCardApiV2AdminTheoryCardsCardIdPut>>, {cardId: string;data: UpdateTheoryCardRequestType}> = (props) => {
          const {cardId,data} = props ?? {};

          return  updateTheoryCardApiV2AdminTheoryCardsCardIdPut(cardId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateTheoryCardApiV2AdminTheoryCardsCardIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateTheoryCardApiV2AdminTheoryCardsCardIdPut>>>
    export type UpdateTheoryCardApiV2AdminTheoryCardsCardIdPutMutationBody = UpdateTheoryCardRequestType
    export type UpdateTheoryCardApiV2AdminTheoryCardsCardIdPutMutationError = HTTPValidationErrorType

    /**
 * @summary Update Theory Card
 */
export const useUpdateTheoryCardApiV2AdminTheoryCardsCardIdPut = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTheoryCardApiV2AdminTheoryCardsCardIdPut>>, TError,{cardId: string;data: UpdateTheoryCardRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateTheoryCardApiV2AdminTheoryCardsCardIdPut>>,
        TError,
        {cardId: string;data: UpdateTheoryCardRequestType},
        TContext
      > => {

      const mutationOptions = getUpdateTheoryCardApiV2AdminTheoryCardsCardIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
 * @summary Delete Theory Card
 */
export const deleteTheoryCardApiV2AdminTheoryCardsCardIdDelete = (
    cardId: string,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/v2/admin/theory/cards/${cardId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteTheoryCardApiV2AdminTheoryCardsCardIdDeleteMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTheoryCardApiV2AdminTheoryCardsCardIdDelete>>, TError,{cardId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteTheoryCardApiV2AdminTheoryCardsCardIdDelete>>, TError,{cardId: string}, TContext> => {

const mutationKey = ['deleteTheoryCardApiV2AdminTheoryCardsCardIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTheoryCardApiV2AdminTheoryCardsCardIdDelete>>, {cardId: string}> = (props) => {
          const {cardId} = props ?? {};

          return  deleteTheoryCardApiV2AdminTheoryCardsCardIdDelete(cardId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTheoryCardApiV2AdminTheoryCardsCardIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTheoryCardApiV2AdminTheoryCardsCardIdDelete>>>
    
    export type DeleteTheoryCardApiV2AdminTheoryCardsCardIdDeleteMutationError = HTTPValidationErrorType

    /**
 * @summary Delete Theory Card
 */
export const useDeleteTheoryCardApiV2AdminTheoryCardsCardIdDelete = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTheoryCardApiV2AdminTheoryCardsCardIdDelete>>, TError,{cardId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteTheoryCardApiV2AdminTheoryCardsCardIdDelete>>,
        TError,
        {cardId: string},
        TContext
      > => {

      const mutationOptions = getDeleteTheoryCardApiV2AdminTheoryCardsCardIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Bulk Delete Content
 */
export const bulkDeleteContentApiV2AdminContentBulkDeleteDelete = (
    bulkDeleteRequestType: BulkDeleteRequestType,
 ) => {
      
      
      return apiClient<BulkDeleteResponseType>(
      {url: `/api/v2/admin/content/bulk-delete`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: bulkDeleteRequestType
    },
      );
    }
  


export const getBulkDeleteContentApiV2AdminContentBulkDeleteDeleteMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bulkDeleteContentApiV2AdminContentBulkDeleteDelete>>, TError,{data: BulkDeleteRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof bulkDeleteContentApiV2AdminContentBulkDeleteDelete>>, TError,{data: BulkDeleteRequestType}, TContext> => {

const mutationKey = ['bulkDeleteContentApiV2AdminContentBulkDeleteDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bulkDeleteContentApiV2AdminContentBulkDeleteDelete>>, {data: BulkDeleteRequestType}> = (props) => {
          const {data} = props ?? {};

          return  bulkDeleteContentApiV2AdminContentBulkDeleteDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BulkDeleteContentApiV2AdminContentBulkDeleteDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof bulkDeleteContentApiV2AdminContentBulkDeleteDelete>>>
    export type BulkDeleteContentApiV2AdminContentBulkDeleteDeleteMutationBody = BulkDeleteRequestType
    export type BulkDeleteContentApiV2AdminContentBulkDeleteDeleteMutationError = HTTPValidationErrorType

    /**
 * @summary Bulk Delete Content
 */
export const useBulkDeleteContentApiV2AdminContentBulkDeleteDelete = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bulkDeleteContentApiV2AdminContentBulkDeleteDelete>>, TError,{data: BulkDeleteRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof bulkDeleteContentApiV2AdminContentBulkDeleteDelete>>,
        TError,
        {data: BulkDeleteRequestType},
        TContext
      > => {

      const mutationOptions = getBulkDeleteContentApiV2AdminContentBulkDeleteDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
 * @summary Bulk Delete Theory
 */
export const bulkDeleteTheoryApiV2AdminTheoryBulkDeleteDelete = (
    bulkDeleteRequestType: BulkDeleteRequestType,
 ) => {
      
      
      return apiClient<BulkDeleteResponseType>(
      {url: `/api/v2/admin/theory/bulk-delete`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: bulkDeleteRequestType
    },
      );
    }
  


export const getBulkDeleteTheoryApiV2AdminTheoryBulkDeleteDeleteMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bulkDeleteTheoryApiV2AdminTheoryBulkDeleteDelete>>, TError,{data: BulkDeleteRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof bulkDeleteTheoryApiV2AdminTheoryBulkDeleteDelete>>, TError,{data: BulkDeleteRequestType}, TContext> => {

const mutationKey = ['bulkDeleteTheoryApiV2AdminTheoryBulkDeleteDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bulkDeleteTheoryApiV2AdminTheoryBulkDeleteDelete>>, {data: BulkDeleteRequestType}> = (props) => {
          const {data} = props ?? {};

          return  bulkDeleteTheoryApiV2AdminTheoryBulkDeleteDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BulkDeleteTheoryApiV2AdminTheoryBulkDeleteDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof bulkDeleteTheoryApiV2AdminTheoryBulkDeleteDelete>>>
    export type BulkDeleteTheoryApiV2AdminTheoryBulkDeleteDeleteMutationBody = BulkDeleteRequestType
    export type BulkDeleteTheoryApiV2AdminTheoryBulkDeleteDeleteMutationError = HTTPValidationErrorType

    /**
 * @summary Bulk Delete Theory
 */
export const useBulkDeleteTheoryApiV2AdminTheoryBulkDeleteDelete = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bulkDeleteTheoryApiV2AdminTheoryBulkDeleteDelete>>, TError,{data: BulkDeleteRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof bulkDeleteTheoryApiV2AdminTheoryBulkDeleteDelete>>,
        TError,
        {data: BulkDeleteRequestType},
        TContext
      > => {

      const mutationOptions = getBulkDeleteTheoryApiV2AdminTheoryBulkDeleteDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Root
 */
export const rootGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  

export const getRootGetQueryKey = () => {
    return [`/`] as const;
    }

    
export const getRootGetQueryOptions = <TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRootGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rootGet>>> = ({ signal }) => rootGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RootGetQueryResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>
export type RootGetQueryError = unknown


export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Root
 */

export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRootGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Redirect
 */
export const redirectRedirectGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/redirect`, method: 'GET', signal
    },
      );
    }
  

export const getRedirectRedirectGetQueryKey = () => {
    return [`/redirect`] as const;
    }

    
export const getRedirectRedirectGetQueryOptions = <TData = Awaited<ReturnType<typeof redirectRedirectGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof redirectRedirectGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRedirectRedirectGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof redirectRedirectGet>>> = ({ signal }) => redirectRedirectGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof redirectRedirectGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RedirectRedirectGetQueryResult = NonNullable<Awaited<ReturnType<typeof redirectRedirectGet>>>
export type RedirectRedirectGetQueryError = unknown


export function useRedirectRedirectGet<TData = Awaited<ReturnType<typeof redirectRedirectGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof redirectRedirectGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof redirectRedirectGet>>,
          TError,
          Awaited<ReturnType<typeof redirectRedirectGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRedirectRedirectGet<TData = Awaited<ReturnType<typeof redirectRedirectGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof redirectRedirectGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof redirectRedirectGet>>,
          TError,
          Awaited<ReturnType<typeof redirectRedirectGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRedirectRedirectGet<TData = Awaited<ReturnType<typeof redirectRedirectGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof redirectRedirectGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Redirect
 */

export function useRedirectRedirectGet<TData = Awaited<ReturnType<typeof redirectRedirectGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof redirectRedirectGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRedirectRedirectGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
