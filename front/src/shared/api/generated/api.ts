/**
 * /**
 *  * Generated by orval v.7.10.0 üçª
 *  * Do not edit manually.
 *  * Nareshka
 *  * Nareshka - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
 *  *\/
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { generatedApiClient } from '../generated-mutator';
export type AnalyticsResponseTypeMonthlyStatsItem = { [key: string]: unknown };

/**
 * –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
 */
export interface AnalyticsResponseType {
  total_interviews: number;
  total_companies: number;
  top_companies: CompanyStatsResponseType[];
  monthly_stats: AnalyticsResponseTypeMonthlyStatsItem[];
}

/**
 * –õ—É—á—à–µ–µ –≤—Ä–µ–º—è
 */
export type AttemptHistoryResponseTypeBestTimeMs = number | null;

/**
 * –ù–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
 */
export type AttemptHistoryResponseTypeFirstSuccessAttempt = number | null;

/**
 * –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
 */
export type AttemptHistoryResponseTypeSolution = AppFeaturesProgressDtoResponsesTaskSolutionResponseType | null;

/**
 * –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫
 */
export interface AttemptHistoryResponseType {
  /** ID –∑–∞–¥–∞—á–∏ */
  task_id: string;
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  user_id: number;
  /** –°–ø–∏—Å–æ–∫ –ø–æ–ø—ã—Ç–æ–∫ */
  attempts: AppFeaturesProgressDtoResponsesTaskAttemptResponseType[];
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ */
  total_attempts: number;
  /** –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ */
  successful_attempts: number;
  /** –õ—É—á—à–µ–µ –≤—Ä–µ–º—è */
  best_time_ms?: AttemptHistoryResponseTypeBestTimeMs;
  /** –ù–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ */
  first_success_attempt?: AttemptHistoryResponseTypeFirstSuccessAttempt;
  /** –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ */
  solution?: AttemptHistoryResponseTypeSolution;
}

export type BrowserLogEntryTypeUrl = string | null;

export type BrowserLogEntryTypeUserId = number | null;

export type BrowserLogEntryTypeStackTrace = string | null;

export type BrowserLogEntryTypeMetadataAnyOf = { [key: string]: unknown };

export type BrowserLogEntryTypeMetadata = BrowserLogEntryTypeMetadataAnyOf | null;

export interface BrowserLogEntryType {
  level: string;
  message: string;
  timestamp: string;
  url?: BrowserLogEntryTypeUrl;
  user_id?: BrowserLogEntryTypeUserId;
  source?: string;
  stack_trace?: BrowserLogEntryTypeStackTrace;
  metadata?: BrowserLogEntryTypeMetadata;
}

export type BrowserLogsRequestTypePageUrl = string | null;

export type BrowserLogsRequestTypeUserAgent = string | null;

export type BrowserLogsRequestTypeSessionId = string | null;

export interface BrowserLogsRequestType {
  console_logs?: BrowserLogEntryType[];
  network_logs?: NetworkLogEntryType[];
  page_url?: BrowserLogsRequestTypePageUrl;
  user_agent?: BrowserLogsRequestTypeUserAgent;
  session_id?: BrowserLogsRequestTypeSessionId;
}

export type CardStateType = typeof CardStateType[keyof typeof CardStateType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CardStateType = {
  NEW: 'NEW',
  LEARNING: 'LEARNING',
  REVIEW: 'REVIEW',
  RELEARNING: 'RELEARNING',
} as const;

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
export interface CategoriesStatisticsResponseType {
  /** –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ */
  total_questions: number;
  /** –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ */
  categorized_questions: number;
  /** –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */
  total_categories: number;
  /** –í—Å–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ */
  total_clusters: number;
  /** –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ */
  categorization_rate: number;
}

/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export interface CategoryDetailResponseType {
  /** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  category: CategoryResponseType;
  /** –ö–ª–∞—Å—Ç–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  clusters: ClusterResponseType[];
  /** –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ */
  sample_questions: QuestionResponseType[];
}

/**
 * –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
export type CategoryProgressResponseTypeSubCategory = string | null;

/**
 * –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
 */
export type CategoryProgressResponseTypeFirstAttempt = string | null;

/**
 * –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 */
export type CategoryProgressResponseTypeLastActivity = string | null;

/**
 * –û—Ç–≤–µ—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export interface CategoryProgressResponseType {
  /** ID –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */
  id: string;
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  user_id: number;
  /** –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è */
  main_category: string;
  /** –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è */
  sub_category?: CategoryProgressResponseTypeSubCategory;
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á */
  total_tasks: number;
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á */
  completed_tasks: number;
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ */
  attempted_tasks: number;
  /** –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ */
  average_attempts: string;
  /** –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö */
  total_time_spent_minutes: number;
  /** –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ */
  success_rate: string;
  /** –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */
  completion_percentage: number;
  /** –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */
  status: string;
  /** –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è */
  display_name: string;
  /** –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ */
  first_attempt?: CategoryProgressResponseTypeFirstAttempt;
  /** –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */
  last_activity?: CategoryProgressResponseTypeLastActivity;
  /** –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è */
  created_at: string;
  /** –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */
  updated_at: string;
}

/**
 * –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
export type CategoryProgressSummaryResponseTypeSubCategory = string | null;

/**
 * –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 */
export type CategoryProgressSummaryResponseTypeLastActivity = string | null;

/**
 * –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export interface CategoryProgressSummaryResponseType {
  /** –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è */
  main_category: string;
  /** –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è */
  sub_category?: CategoryProgressSummaryResponseTypeSubCategory;
  /** –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á */
  completed_tasks: number;
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á */
  total_tasks: number;
  /** –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */
  completion_percentage: number;
  /** –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */
  status: string;
  /** –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */
  last_activity?: CategoryProgressSummaryResponseTypeLastActivity;
}

/**
 * –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
export type CategoryProgressUpdateRequestTypeSubCategory = string | null;

/**
 * –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
 */
export type CategoryProgressUpdateRequestTypeTimeSpentMinutes = number | null;

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export interface CategoryProgressUpdateRequestType {
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  user_id: number;
  /** –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è */
  main_category: string;
  /** –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è */
  sub_category?: CategoryProgressUpdateRequestTypeSubCategory;
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á */
  total_tasks: number;
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á */
  completed_tasks: number;
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ */
  attempted_tasks: number;
  /** –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö */
  time_spent_minutes?: CategoryProgressUpdateRequestTypeTimeSpentMinutes;
}

/**
 * –¶–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è UI
 */
export type CategoryResponseTypeColor = string | null;

/**
 * –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export type CategoryResponseTypeIcon = string | null;

/**
 * –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export interface CategoryResponseType {
  /** ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  id: string;
  /** –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  name: string;
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ */
  questions_count: number;
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ */
  clusters_count: number;
  /** –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ */
  percentage: number;
  /** –¶–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è UI */
  color?: CategoryResponseTypeColor;
  /** –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  icon?: CategoryResponseTypeIcon;
}

export type ClusterConstellationResponseTypeCategories = {[key: string]: string};

export type ClusterConstellationResponseTypeStats = { [key: string]: unknown };

export interface ClusterConstellationResponseType {
  nodes: ClusterNodeType[];
  links: ClusterLinkType[];
  categories: ClusterConstellationResponseTypeCategories;
  stats: ClusterConstellationResponseTypeStats;
}

export interface ClusterLinkType {
  source: number;
  target: number;
  weight: number;
  strength: number;
}

export type ClusterNodeTypeDifficultyDistribution = {[key: string]: number};

export interface ClusterNodeType {
  id: number;
  name: string;
  category_id: string;
  category_name: string;
  questions_count: number;
  interview_penetration: number;
  keywords: string[];
  example_question: string;
  size: number;
  top_companies: string[];
  difficulty_distribution: ClusterNodeTypeDifficultyDistribution;
}

/**
 * –ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
 */
export type ClusterResponseTypeExampleQuestion = string | null;

/**
 * –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞
 */
export interface ClusterResponseType {
  /** ID –∫–ª–∞—Å—Ç–µ—Ä–∞ */
  id: number;
  /** –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ */
  name: string;
  /** ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  category_id: string;
  /** –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ */
  keywords: string[];
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ */
  questions_count: number;
  /** –ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ */
  example_question?: ClusterResponseTypeExampleQuestion;
}

/**
 * –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
 */
export type CodeExecutionRequestTypeStdin = string | null;

/**
 * ID –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
export type CodeExecutionRequestTypeBlockId = string | null;

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
 */
export interface CodeExecutionRequestType {
  /** –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */
  sourceCode: string;
  /** –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è */
  language: string;
  /** –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã */
  stdin?: CodeExecutionRequestTypeStdin;
  /** ID –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
  blockId?: CodeExecutionRequestTypeBlockId;
}

export type CodeExecutionResponseTypeUserId = number | null;

export type CodeExecutionResponseTypeBlockId = string | null;

export type CodeExecutionResponseTypeStdin = string | null;

export type CodeExecutionResponseTypeStdout = string | null;

export type CodeExecutionResponseTypeStderr = string | null;

export type CodeExecutionResponseTypeExitCode = number | null;

export type CodeExecutionResponseTypeExecutionTimeMs = number | null;

export type CodeExecutionResponseTypeMemoryUsedMB = number | null;

export type CodeExecutionResponseTypeContainerLogs = string | null;

export type CodeExecutionResponseTypeErrorMessage = string | null;

export type CodeExecutionResponseTypeCompletedAt = string | null;

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 */
export interface CodeExecutionResponseType {
  id: string;
  userId?: CodeExecutionResponseTypeUserId;
  blockId?: CodeExecutionResponseTypeBlockId;
  languageId: string;
  sourceCode: string;
  stdin?: CodeExecutionResponseTypeStdin;
  status: ExecutionStatusType;
  stdout?: CodeExecutionResponseTypeStdout;
  stderr?: CodeExecutionResponseTypeStderr;
  exitCode?: CodeExecutionResponseTypeExitCode;
  executionTimeMs?: CodeExecutionResponseTypeExecutionTimeMs;
  memoryUsedMB?: CodeExecutionResponseTypeMemoryUsedMB;
  containerLogs?: CodeExecutionResponseTypeContainerLogs;
  errorMessage?: CodeExecutionResponseTypeErrorMessage;
  createdAt: string;
  completedAt?: CodeExecutionResponseTypeCompletedAt;
}

export type CodeLanguageType = typeof CodeLanguageType[keyof typeof CodeLanguageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CodeLanguageType = {
  PYTHON: 'PYTHON',
  JAVASCRIPT: 'JAVASCRIPT',
  TYPESCRIPT: 'TYPESCRIPT',
  JAVA: 'JAVA',
  CPP: 'CPP',
  C: 'C',
  GO: 'GO',
  RUST: 'RUST',
  PHP: 'PHP',
  RUBY: 'RUBY',
} as const;

/**
 * –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
 */
export interface CompaniesListResponseType {
  companies: string[];
}

/**
 * –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
 */
export interface CompanyResponseType {
  /** –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ */
  name: string;
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ */
  count: number;
}

export type CompanyStatsResponseTypeAvgDuration = number | null;

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
 */
export interface CompanyStatsResponseType {
  company_name: string;
  total_interviews: number;
  avg_duration: CompanyStatsResponseTypeAvgDuration;
}

/**
 * –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞
 */
export type ContentBlockResponseTypeTextContent = string | null;

/**
 * –ö–æ–¥ –≤ –±–ª–æ–∫–µ
 */
export type ContentBlockResponseTypeCodeContent = string | null;

/**
 * –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
 */
export type ContentBlockResponseTypeCodeLanguage = string | null;

/**
 * –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–¥–∞
 */
export type ContentBlockResponseTypeCodeFoldTitle = string | null;

/**
 * –•—ç—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
 */
export type ContentBlockResponseTypeRawBlockContentHash = string | null;

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
 */
export type ContentBlockResponseTypeFile = ContentFileResponseType | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª–æ–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
export interface ContentBlockResponseType {
  createdAt: string;
  updatedAt: string;
  id: string;
  /** ID —Ñ–∞–π–ª–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–ª–æ–∫ */
  fileId: string;
  /** –ü—É—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */
  pathTitles: string[];
  /** –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ */
  blockTitle: string;
  /** –£—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∞ */
  blockLevel: number;
  /** –ü–æ—Ä—è–¥–æ–∫ –±–ª–æ–∫–∞ –≤ —Ñ–∞–π–ª–µ */
  orderInFile: number;
  /** –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ */
  textContent?: ContentBlockResponseTypeTextContent;
  /** –ö–æ–¥ –≤ –±–ª–æ–∫–µ */
  codeContent?: ContentBlockResponseTypeCodeContent;
  /** –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ */
  codeLanguage?: ContentBlockResponseTypeCodeLanguage;
  /** –ú–æ–∂–Ω–æ –ª–∏ —Å–≤–µ—Ä–Ω—É—Ç—å –∫–æ–¥ */
  isCodeFoldable?: boolean;
  /** –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–¥–∞ */
  codeFoldTitle?: ContentBlockResponseTypeCodeFoldTitle;
  /** –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ URL */
  extractedUrls?: string[];
  /** –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ */
  companies?: string[];
  /** –•—ç—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ */
  rawBlockContentHash?: ContentBlockResponseTypeRawBlockContentHash;
  /** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ */
  file?: ContentBlockResponseTypeFile;
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
export interface ContentCategoriesResponseType {
  /** –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π */
  categories: string[];
}

/**
 * –•—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞
 */
export type ContentFileResponseTypeLastFileHash = string | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
export interface ContentFileResponseType {
  createdAt: string;
  updatedAt: string;
  id: string;
  /** –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ WebDAV —Å–∏—Å—Ç–µ–º–µ */
  webdavPath: string;
  /** –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
  mainCategory: string;
  /** –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
  subCategory: string;
  /** –•—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞ */
  lastFileHash?: ContentFileResponseTypeLastFileHash;
}

/**
 * –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
 */
export type ContentProgressResponseTypeFirstAttemptAt = string | null;

/**
 * –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
 */
export type ContentProgressResponseTypeLastAttemptAt = string | null;

/**
 * –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
 */
export type ContentProgressResponseTypeCompletionTimeMinutes = number | null;

export type ContentProgressResponseTypeMetadataAnyOf = { [key: string]: unknown };

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export type ContentProgressResponseTypeMetadata = ContentProgressResponseTypeMetadataAnyOf | null;

/**
 * –û—Ç–≤–µ—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
 */
export interface ContentProgressResponseType {
  /** ID –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */
  id: string;
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  user_id: number;
  /** ID –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
  block_id: string;
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π */
  solved_count: number;
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ */
  attempt_count: number;
  /** –ó–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –±–ª–æ–∫ */
  is_completed: boolean;
  /** –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */
  status: string;
  /** –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ */
  first_attempt_at?: ContentProgressResponseTypeFirstAttemptAt;
  /** –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ */
  last_attempt_at?: ContentProgressResponseTypeLastAttemptAt;
  /** –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */
  completion_time_minutes?: ContentProgressResponseTypeCompletionTimeMinutes;
  /** –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è */
  created_at: string;
  /** –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */
  updated_at: string;
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */
  metadata?: ContentProgressResponseTypeMetadata;
}

/**
 * –ó–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –±–ª–æ–∫
 */
export type ContentProgressUpdateRequestTypeIsCompleted = boolean | null;

/**
 * –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
 */
export type ContentProgressUpdateRequestTypeTimeSpentMinutes = number | null;

export type ContentProgressUpdateRequestTypeMetadataAnyOf = { [key: string]: unknown };

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export type ContentProgressUpdateRequestTypeMetadata = ContentProgressUpdateRequestTypeMetadataAnyOf | null;

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
 */
export interface ContentProgressUpdateRequestType {
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  user_id: number;
  /** ID –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
  block_id: string;
  /** –ó–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –±–ª–æ–∫ */
  is_completed?: ContentProgressUpdateRequestTypeIsCompleted;
  /** –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö */
  time_spent_minutes?: ContentProgressUpdateRequestTypeTimeSpentMinutes;
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */
  metadata?: ContentProgressUpdateRequestTypeMetadata;
}

export type ContentStatsResponseTypeCategories = { [key: string]: unknown };

/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
 */
export interface ContentStatsResponseType {
  categories: ContentStatsResponseTypeCategories;
  totalBlocks: number;
  solvedBlocks: number;
  averageSolveCount: number;
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
export interface ContentSubcategoriesResponseType {
  /** –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π */
  subcategories: string[];
}

/**
 * –û—Ç–≤–µ—Ç —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
 */
export interface DueCardsResponseType {
  cards: TheoryCardResponseType[];
  total: number;
}

export type ExecutionStatsResponseTypeLanguageStatsItem = { [key: string]: unknown };

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
 */
export interface ExecutionStatsResponseType {
  totalExecutions: number;
  successfulExecutions: number;
  averageExecutionTime: number;
  languageStats: ExecutionStatsResponseTypeLanguageStatsItem[];
}

export type ExecutionStatusType = typeof ExecutionStatusType[keyof typeof ExecutionStatusType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExecutionStatusType = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  SUCCESS: 'SUCCESS',
  ERROR: 'ERROR',
  TIMEOUT: 'TIMEOUT',
  MEMORY_LIMIT: 'MEMORY_LIMIT',
} as const;

export type FileResponseTypeSubCategory = string | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
 */
export interface FileResponseType {
  id: string;
  webdavPath: string;
  mainCategory: string;
  subCategory?: FileResponseTypeSubCategory;
}

/**
 * –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 */
export type GroupedCategoryProgressResponseTypeLastActivity = string | null;

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export interface GroupedCategoryProgressResponseType {
  /** –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è */
  main_category: string;
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö */
  total_completed: number;
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á */
  total_tasks: number;
  /** –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */
  overall_completion_percentage: number;
  /** –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  sub_categories: CategoryProgressSummaryResponseType[];
  /** –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */
  last_activity?: GroupedCategoryProgressResponseTypeLastActivity;
}

export interface HTTPValidationErrorType {
  detail?: ValidationErrorType[];
}

export type InterviewDetailResponseTypePosition = string | null;

/**
 * –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
 */
export interface InterviewDetailResponseType {
  id: string;
  company_name: string;
  interview_date: string;
  position: InterviewDetailResponseTypePosition;
  full_content: string;
  tags: string[];
  companies: string[];
  extracted_urls: string[];
  has_audio_recording: boolean;
}

export type InterviewRecordResponseTypePosition = string | null;

/**
 * –û—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
 */
export interface InterviewRecordResponseType {
  id: string;
  company_name: string;
  interview_date: string;
  position: InterviewRecordResponseTypePosition;
  full_content: string;
  tags: string[];
  has_audio_recording: boolean;
}

/**
 * –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
export interface InterviewsListResponseType {
  interviews: InterviewRecordResponseType[];
  total: number;
  page: number;
  limit: number;
  has_next: boolean;
  has_prev: boolean;
}

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥
 */
export interface LoginRequestType {
  email: string;
  password: string;
}

export type LoginResponseTypeSessionId = string | null;

/**
 * –û—Ç–≤–µ—Ç –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
 */
export interface LoginResponseType {
  access_token: string;
  token_type: string;
  user: UserResponseType;
  session_id?: LoginResponseTypeSessionId;
}

/**
 * –û—Ç–≤–µ—Ç –Ω–∞ –≤—ã—Ö–æ–¥
 */
export interface LogoutResponseType {
  message: string;
}

export type MindMapDataResponseTypeAppliedFilters = {[key: string]: string | null};

export type MindMapDataResponseTypeOverallProgressAnyOf = { [key: string]: unknown };

export type MindMapDataResponseTypeOverallProgress = MindMapDataResponseTypeOverallProgressAnyOf | null;

/**
 * –î–∞–Ω–Ω—ã–µ mindmap
 */
export interface MindMapDataResponseType {
  nodes: MindMapNodeResponseType[];
  edges: MindMapEdgeResponseType[];
  layout: string;
  total_nodes: number;
  total_edges: number;
  structure_type: string;
  active_topics: number;
  applied_filters: MindMapDataResponseTypeAppliedFilters;
  overall_progress?: MindMapDataResponseTypeOverallProgress;
}

export type MindMapEdgeResponseTypeStyle = { [key: string]: unknown };

/**
 * –°–≤—è–∑—å mindmap
 */
export interface MindMapEdgeResponseType {
  id: string;
  source: string;
  target: string;
  style: MindMapEdgeResponseTypeStyle;
  animated: boolean;
}

export type MindMapNodeResponseTypePosition = {[key: string]: number};

export type MindMapNodeResponseTypeData = { [key: string]: unknown };

/**
 * –£–∑–µ–ª mindmap
 */
export interface MindMapNodeResponseType {
  id: string;
  type: string;
  position: MindMapNodeResponseTypePosition;
  data: MindMapNodeResponseTypeData;
}

export type MindMapResponseTypeMetadata = { [key: string]: unknown };

/**
 * –û—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ mindmap
 */
export interface MindMapResponseType {
  success?: boolean;
  data: MindMapDataResponseType;
  structure_type: string;
  metadata: MindMapResponseTypeMetadata;
}

export type NetworkLogEntryTypeStatusCode = number | null;

export type NetworkLogEntryTypeRequestHeadersAnyOf = {[key: string]: string};

export type NetworkLogEntryTypeRequestHeaders = NetworkLogEntryTypeRequestHeadersAnyOf | null;

export type NetworkLogEntryTypeResponseHeadersAnyOf = {[key: string]: string};

export type NetworkLogEntryTypeResponseHeaders = NetworkLogEntryTypeResponseHeadersAnyOf | null;

export type NetworkLogEntryTypeErrorMessage = string | null;

export type NetworkLogEntryTypeUserId = number | null;

export interface NetworkLogEntryType {
  url: string;
  method: string;
  status_code?: NetworkLogEntryTypeStatusCode;
  timestamp: string;
  request_headers?: NetworkLogEntryTypeRequestHeaders;
  response_headers?: NetworkLogEntryTypeResponseHeaders;
  error_message?: NetworkLogEntryTypeErrorMessage;
  user_id?: NetworkLogEntryTypeUserId;
}

export interface PaginatedResponseContentBlockResponseType {
  items: ContentBlockResponseType[];
  pagination: PaginationInfoType;
}

export interface PaginatedResponseContentFileResponseType {
  items: ContentFileResponseType[];
  pagination: PaginationInfoType;
}

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
export interface PaginationInfoType {
  page: number;
  limit: number;
  total: number;
  totalPages: number;
}

/**
 * –û—Ç–≤–µ—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
export interface ProgressAnalyticsResponseType {
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */
  total_users: number;
  /** –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è */
  active_users_today: number;
  /** –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é */
  active_users_week: number;
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á */
  total_tasks_solved: number;
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ */
  total_attempts: number;
  /** –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ */
  average_success_rate: string;
  /** –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  most_popular_categories: string[];
  /** –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ */
  most_difficult_tasks: string[];
  /** –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ */
  generated_at: string;
}

/**
 * –¢–µ–º–ø —É–ª—É—á—à–µ–Ω–∏—è
 */
export type ProgressStatsResponseTypeImprovementRate = string | null;

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
export interface ProgressStatsResponseType {
  /** –ü–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */
  period: string;
  /** –†–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á */
  tasks_solved: number;
  /** –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ */
  time_spent_hours: number;
  /** –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ */
  success_rate: string;
  /** –¢–µ–º–ø —É–ª—É—á—à–µ–Ω–∏—è */
  improvement_rate?: ProgressStatsResponseTypeImprovementRate;
  /** –î–Ω–µ–π –ø–æ–¥—Ä—è–¥ */
  streak_days: number;
  /** –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π */
  categories_active: number;
}

/**
 * –ö–æ–º–ø–∞–Ω–∏—è
 */
export type QuestionResponseTypeCompany = string | null;

/**
 * ID –∫–ª–∞—Å—Ç–µ—Ä–∞
 */
export type QuestionResponseTypeClusterId = number | null;

/**
 * ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export type QuestionResponseTypeCategoryId = string | null;

/**
 * –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
 */
export type QuestionResponseTypeTopicName = string | null;

/**
 * –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
 */
export type QuestionResponseTypeCanonicalQuestion = string | null;

/**
 * –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
 */
export interface QuestionResponseType {
  /** ID –≤–æ–ø—Ä–æ—Å–∞ */
  id: string;
  /** –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ */
  question_text: string;
  /** –ö–æ–º–ø–∞–Ω–∏—è */
  company?: QuestionResponseTypeCompany;
  /** ID –∫–ª–∞—Å—Ç–µ—Ä–∞ */
  cluster_id?: QuestionResponseTypeClusterId;
  /** ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  category_id?: QuestionResponseTypeCategoryId;
  /** –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ */
  topic_name?: QuestionResponseTypeTopicName;
  /** –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å */
  canonical_question?: QuestionResponseTypeCanonicalQuestion;
}

/**
 * –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
export interface QuestionsListResponseType {
  /** –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ */
  questions: QuestionResponseType[];
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ */
  total: number;
  /** –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ */
  page: number;
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ */
  limit: number;
  /** –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ */
  has_next: boolean;
}

/**
 * ID –∑–∞–¥–∞—á–∏
 */
export type RecentActivityResponseTypeTaskId = string | null;

/**
 * –ö–∞—Ç–µ–≥–æ—Ä–∏—è
 */
export type RecentActivityResponseTypeCategory = string | null;

export type RecentActivityResponseTypeMetadataAnyOf = { [key: string]: unknown };

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export type RecentActivityResponseTypeMetadata = RecentActivityResponseTypeMetadataAnyOf | null;

/**
 * –û—Ç–≤–µ—Ç —Å –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
 */
export interface RecentActivityResponseType {
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  user_id: number;
  /** –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */
  activity_type: string;
  /** –û–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */
  description: string;
  /** ID –∑–∞–¥–∞—á–∏ */
  task_id?: RecentActivityResponseTypeTaskId;
  /** –ö–∞—Ç–µ–≥–æ—Ä–∏—è */
  category?: RecentActivityResponseTypeCategory;
  /** –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */
  timestamp: string;
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */
  metadata?: RecentActivityResponseTypeMetadata;
}

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
 */
export interface RegisterRequestType {
  email: string;
  password: string;
}

/**
 * –û—Ç–≤–µ—Ç –Ω–∞ —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
 */
export interface RegisterResponseType {
  user: UserResponseType;
  message: string;
}

/**
 * –û—Ü–µ–Ω–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
 */
export interface ReviewRatingType {
  /** again, hard, good, easy */
  rating: string;
}

export type RoadmapStatsResponseTypeCategoriesItem = { [key: string]: unknown };

/**
 * Roadmap —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
export interface RoadmapStatsResponseType {
  categories: RoadmapStatsResponseTypeCategoriesItem[];
}

/**
 * –û—Ç–≤–µ—Ç health check –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
export interface StatsHealthResponseType {
  status: string;
  module: string;
}

/**
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export interface SupportedLanguageResponseType {
  id: string;
  name: string;
  language: CodeLanguageType;
  version: string;
  fileExtension: string;
  timeoutSeconds: number;
  memoryLimitMB: number;
  isEnabled: boolean;
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞–Ω–∏–π
 */
export interface TaskCategoriesResponseType {
  categories: TaskCategoryResponseType[];
}

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π
 */
export interface TaskCategoryResponseType {
  name: string;
  subCategories?: string[];
  totalCount: number;
  contentBlockCount?: number;
  theoryQuizCount?: number;
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–π
 */
export interface TaskCompaniesResponseType {
  companies: TaskCompanyResponseType[];
}

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏
 */
export interface TaskCompanyResponseType {
  name: string;
  count: number;
}

export type TaskDetailResponseTypeCodeContent = string | null;

export type TaskDetailResponseTypeCodeLanguage = string | null;

export type TaskDetailResponseTypeProgress = TaskProgressResponseType | null;

/**
 * –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
 */
export interface TaskDetailResponseType {
  id: string;
  title: string;
  description: string;
  hasCode: boolean;
  codeContent?: TaskDetailResponseTypeCodeContent;
  codeLanguage?: TaskDetailResponseTypeCodeLanguage;
  progress?: TaskDetailResponseTypeProgress;
}

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
 */
export interface TaskDetailResponseWrapperType {
  success?: boolean;
  task: TaskDetailResponseType;
}

/**
 * –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞—á–µ
 */
export interface TaskProgressResponseType {
  solvedCount: number;
  isCompleted: boolean;
}

export type TasksListResponseTypePagination = { [key: string]: unknown };

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞–Ω–∏–π
 */
export interface TasksListResponseType {
  data: AppFeaturesTaskDtoResponsesTaskResponseType[];
  pagination: TasksListResponseTypePagination;
}

export type TechnologiesDataResponseTypeConfigs = {[key: string]: TechnologyConfigResponseType};

/**
 * –î–∞–Ω–Ω—ã–µ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
 */
export interface TechnologiesDataResponseType {
  technologies: string[];
  configs: TechnologiesDataResponseTypeConfigs;
}

/**
 * –û—Ç–≤–µ—Ç —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏
 */
export interface TechnologiesResponseType {
  success?: boolean;
  data: TechnologiesDataResponseType;
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
 */
export interface TechnologyConfigResponseType {
  title: string;
  description: string;
  icon: string;
  color: string;
}

export type TestCaseExecutionResponseTypeExecutionTimeMs = number | null;

export type TestCaseExecutionResponseTypeErrorMessage = string | null;

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç-–∫–µ–π—Å–∞
 */
export interface TestCaseExecutionResponseType {
  testCaseId: string;
  testName: string;
  input: string;
  expectedOutput: string;
  actualOutput: string;
  passed: boolean;
  executionTimeMs?: TestCaseExecutionResponseTypeExecutionTimeMs;
  errorMessage?: TestCaseExecutionResponseTypeErrorMessage;
}

export type TestCaseResponseTypeDescription = string | null;

export type TestCaseResponseTypeGenerationPrompt = string | null;

export type TestCaseResponseTypeGeneratedAt = string | null;

export type TestCaseResponseTypeGenerationModel = string | null;

/**
 * –¢–µ—Å—Ç-–∫–µ–π—Å
 */
export interface TestCaseResponseType {
  id: string;
  blockId: string;
  name: string;
  description?: TestCaseResponseTypeDescription;
  input?: string;
  expectedOutput: string;
  isPublic?: boolean;
  difficulty?: string;
  weight?: number;
  timeoutSeconds?: number;
  isActive?: boolean;
  orderIndex?: number;
  isAIGenerated?: boolean;
  generationPrompt?: TestCaseResponseTypeGenerationPrompt;
  generatedAt?: TestCaseResponseTypeGeneratedAt;
  generationModel?: TestCaseResponseTypeGenerationModel;
  executionCount?: number;
  passRate?: number;
  createdAt: string;
  updatedAt: string;
}

export type TestCasesResponseTypeLastGenerated = string | null;

/**
 * –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –¥–ª—è –±–ª–æ–∫–∞
 */
export interface TestCasesResponseType {
  blockId: string;
  testCases: TestCaseResponseType[];
  totalTests: number;
  publicTests: number;
  hiddenTests: number;
  lastGenerated?: TestCasesResponseTypeLastGenerated;
}

export type TheoryCardResponseTypeSubCategory = string | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
 */
export interface TheoryCardResponseType {
  id: string;
  ankiGuid: string;
  cardType: string;
  deck: string;
  category: string;
  subCategory?: TheoryCardResponseTypeSubCategory;
  questionBlock: string;
  answerBlock: string;
  tags?: string[];
  orderIndex?: number;
  createdAt: string;
  updatedAt: string;
}

export type TheoryCardsListResponseTypePagination = { [key: string]: unknown };

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
 */
export interface TheoryCardsListResponseType {
  cards: TheoryCardResponseType[];
  pagination: TheoryCardsListResponseTypePagination;
}

export type TheoryCategoriesResponseTypeCategoriesItem = { [key: string]: unknown };

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export interface TheoryCategoriesResponseType {
  categories: TheoryCategoriesResponseTypeCategoriesItem[];
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export interface TheorySubcategoriesResponseType {
  subcategories: string[];
}

export type TopicResponseTypeProgressAnyOf = { [key: string]: unknown };

export type TopicResponseTypeProgress = TopicResponseTypeProgressAnyOf | null;

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ
 */
export interface TopicResponseType {
  key: string;
  title: string;
  icon: string;
  color: string;
  description: string;
  progress?: TopicResponseTypeProgress;
}

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–µ
 */
export interface TopicStatsResponseType {
  totalTasks: number;
  completedTasks: number;
  completionRate: number;
}

export type TopicTasksResponseTypeStats = TopicStatsResponseType | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∑–∞–¥–∞—á–∞–º–∏ –ø–æ —Ç–µ–º–µ
 */
export interface TopicTasksResponseType {
  success?: boolean;
  topic: TopicResponseType;
  tasks: AppFeaturesMindmapDtoResponsesTaskResponseType[];
  stats?: TopicTasksResponseTypeStats;
}

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface UserCodeSolutionCreateRequestType {
  /** ID –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
  blockId: string;
  /** –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è */
  language: CodeLanguageType;
  /** –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è */
  sourceCode: string;
  /** –†–µ—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ */
  isCompleted?: boolean;
}

export type UserCodeSolutionResponseTypeLastExecutionId = string | null;

/**
 * –†–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface UserCodeSolutionResponseType {
  id: string;
  userId: number;
  blockId: string;
  languageId: string;
  sourceCode: string;
  isCompleted: boolean;
  executionCount: number;
  successfulExecutions: number;
  lastExecutionId?: UserCodeSolutionResponseTypeLastExecutionId;
  createdAt: string;
  updatedAt: string;
}

/**
 * –ù–æ–≤—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
 */
export type UserCodeSolutionUpdateRequestTypeSourceCode = string | null;

/**
 * –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
 */
export type UserCodeSolutionUpdateRequestTypeIsCompleted = boolean | null;

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface UserCodeSolutionUpdateRequestType {
  /** –ù–æ–≤—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ */
  sourceCode?: UserCodeSolutionUpdateRequestTypeSourceCode;
  /** –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ */
  isCompleted?: UserCodeSolutionUpdateRequestTypeIsCompleted;
}

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface UserContentProgressResponseType {
  createdAt: string;
  updatedAt: string;
  id: string;
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  userId: number;
  /** ID –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
  blockId: string;
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –±–ª–æ–∫–µ */
  solvedCount: number;
}

/**
 * –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface UserDetailedProgressResponseType {
  /** –°–≤–æ–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  user_summary: UserProgressSummaryResponseType;
  /** –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */
  category_progress: CategoryProgressResponseType[];
  /** –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  grouped_categories: GroupedCategoryProgressResponseType[];
  /** –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */
  recent_activity: RecentActivityResponseType[];
  /** –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */
  achievements: string[];
  /** –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */
  recommendations: string[];
}

/**
 * –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 */
export type UserProgressSummaryResponseTypeLastActivity = string | null;

/**
 * –°–≤–æ–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface UserProgressSummaryResponseType {
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  user_id: number;
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á */
  total_tasks_solved: number;
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ */
  total_attempts: number;
  /** –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö */
  total_time_spent_minutes: number;
  /** –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ */
  overall_success_rate: string;
  /** –ù–∞—á–∞—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π */
  categories_started: number;
  /** –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π */
  categories_completed: number;
  /** –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è */
  current_streak: number;
  /** –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å–µ—Ä–∏—è */
  longest_streak: number;
  /** –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */
  last_activity?: UserProgressSummaryResponseTypeLastActivity;
  /** –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */
  registration_date: string;
}

export type UserResponseTypeLastActivityDate = string | null;

/**
 * –û—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface UserResponseType {
  id: number;
  createdAt: string;
  updatedAt: string;
  email: string;
  role: UserRoleType;
  totalTasksSolved: number;
  lastActivityDate: UserResponseTypeLastActivityDate;
}

export type UserRoleType = typeof UserRoleType[keyof typeof UserRoleType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRoleType = {
  GUEST: 'GUEST',
  USER: 'USER',
  ADMIN: 'ADMIN',
} as const;

export type UserStatsOverviewResponseTypeContentProgress = { [key: string]: unknown };

export type UserStatsOverviewResponseTypeTheoryProgress = { [key: string]: unknown };

export type UserStatsOverviewResponseTypeOverallProgress = { [key: string]: unknown };

/**
 * –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface UserStatsOverviewResponseType {
  userId: number;
  totalContentBlocks: number;
  solvedContentBlocks: number;
  totalTheoryCards: number;
  reviewedTheoryCards: number;
  contentProgress: UserStatsOverviewResponseTypeContentProgress;
  theoryProgress: UserStatsOverviewResponseTypeTheoryProgress;
  overallProgress: UserStatsOverviewResponseTypeOverallProgress;
}

export type UserTheoryProgressResponseTypeDueDate = string | null;

export type UserTheoryProgressResponseTypeLastReviewDate = string | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
 */
export interface UserTheoryProgressResponseType {
  id: string;
  userId: number;
  cardId: string;
  solvedCount?: number;
  easeFactor?: string;
  interval?: number;
  dueDate?: UserTheoryProgressResponseTypeDueDate;
  reviewCount?: number;
  lapseCount?: number;
  cardState?: CardStateType;
  learningStep?: number;
  lastReviewDate?: UserTheoryProgressResponseTypeLastReviewDate;
  createdAt: string;
  updatedAt: string;
}

export type ValidationErrorTypeLocItem = string | number;

export interface ValidationErrorType {
  loc: ValidationErrorTypeLocItem[];
  msg: string;
  type: string;
}

/**
 * –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
 */
export type ValidationRequestTypeStdin = string | null;

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–µ—à–µ–Ω–∏—è
 */
export interface ValidationRequestType {
  /** –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */
  sourceCode: string;
  /** –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è */
  language: CodeLanguageType;
  /** –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ */
  stdin?: ValidationRequestTypeStdin;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è
 */
export interface ValidationResultResponseType {
  blockId: string;
  sourceCode: string;
  language: string;
  allTestsPassed: boolean;
  totalTests: number;
  passedTests: number;
  score: number;
  validatedAt: string;
  testResults: TestCaseExecutionResponseType[];
}

/**
 * –û—Ç–≤–µ—Ç health check
 */
export interface AppFeaturesCodeEditorDtoResponsesHealthResponseType {
  status: string;
  module: string;
  supportedLanguages: number;
  totalExecutions: number;
}

/**
 * –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: increment (—É–≤–µ–ª–∏—á–∏—Ç—å) –∏–ª–∏ decrement (—É–º–µ–Ω—å—à–∏—Ç—å)
 */
export type AppFeaturesContentDtoRequestsProgressActionTypeAction = typeof AppFeaturesContentDtoRequestsProgressActionTypeAction[keyof typeof AppFeaturesContentDtoRequestsProgressActionTypeAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AppFeaturesContentDtoRequestsProgressActionTypeAction = {
  increment: 'increment',
  decrement: 'decrement',
} as const;

/**
 * –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
 */
export interface AppFeaturesContentDtoRequestsProgressActionType {
  /** –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: increment (—É–≤–µ–ª–∏—á–∏—Ç—å) –∏–ª–∏ decrement (—É–º–µ–Ω—å—à–∏—Ç—å) */
  action: AppFeaturesContentDtoRequestsProgressActionTypeAction;
}

/**
 * –û—Ç–≤–µ—Ç health check
 */
export interface AppFeaturesMindmapDtoResponsesHealthResponseType {
  status: string;
  module: string;
}

export type AppFeaturesMindmapDtoResponsesTaskResponseTypeProgress = TaskProgressResponseType | null;

/**
 * –ó–∞–¥–∞—á–∞
 */
export interface AppFeaturesMindmapDtoResponsesTaskResponseType {
  id: string;
  title: string;
  description: string;
  hasCode: boolean;
  progress?: AppFeaturesMindmapDtoResponsesTaskResponseTypeProgress;
}

/**
 * –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è
 */
export type AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeSourceCode = string | null;

/**
 * –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export type AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeLanguage = string | null;

/**
 * –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º—Å
 */
export type AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeExecutionTimeMs = number | null;

/**
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –≤ –ú–ë
 */
export type AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeMemoryUsedMb = number | string | null;

/**
 * –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
export type AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeErrorMessage = string | null;

/**
 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—à–∏–±–æ–∫
 */
export type AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeStderr = string | null;

export type AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeMetadataAnyOf = { [key: string]: unknown };

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export type AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeMetadata = AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeMetadataAnyOf | null;

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
export interface AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestType {
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  user_id: number;
  /** ID –∑–∞–¥–∞—á–∏/–±–ª–æ–∫–∞ */
  task_id: string;
  /** –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è */
  source_code?: AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeSourceCode;
  /** –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è */
  language?: AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeLanguage;
  /** –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏ */
  is_successful?: boolean;
  /** –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º—Å */
  execution_time_ms?: AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeExecutionTimeMs;
  /** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –≤ –ú–ë */
  memory_used_mb?: AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeMemoryUsedMb;
  /** –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */
  error_message?: AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeErrorMessage;
  /** –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—à–∏–±–æ–∫ */
  stderr?: AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeStderr;
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */
  metadata?: AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestTypeMetadata;
}

/**
 * –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º—Å
 */
export type AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestTypeExecutionTimeMs = number | null;

/**
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –≤ –ú–ë
 */
export type AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestTypeMemoryUsedMb = number | string | null;

/**
 * –†–µ–π—Ç–∏–Ω–≥ —Ä–µ—à–µ–Ω–∏—è (1-5)
 */
export type AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestTypeSolutionRating = number | null;

export type AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestTypeMetadataAnyOf = { [key: string]: unknown };

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export type AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestTypeMetadata = AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestTypeMetadataAnyOf | null;

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
export interface AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestType {
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  user_id: number;
  /** ID –∑–∞–¥–∞—á–∏ */
  task_id: string;
  /** –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è */
  source_code: string;
  /** –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è */
  language: string;
  /** –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º—Å */
  execution_time_ms?: AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestTypeExecutionTimeMs;
  /** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –≤ –ú–ë */
  memory_used_mb?: AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestTypeMemoryUsedMb;
  /** –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ—à–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º */
  is_optimal?: boolean;
  /** –†–µ–π—Ç–∏–Ω–≥ —Ä–µ—à–µ–Ω–∏—è (1-5) */
  solution_rating?: AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestTypeSolutionRating;
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */
  metadata?: AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestTypeMetadata;
}

/**
 * –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è
 */
export type AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeSourceCode = string | null;

/**
 * –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export type AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeLanguage = string | null;

/**
 * –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º—Å
 */
export type AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeExecutionTimeMs = number | null;

/**
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –≤ –ú–ë
 */
export type AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeMemoryUsedMb = string | null;

/**
 * –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
export type AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeErrorMessage = string | null;

/**
 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—à–∏–±–æ–∫
 */
export type AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeStderr = string | null;

/**
 * –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
 */
export type AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeDurationMinutes = number | null;

export type AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeMetadataAnyOf = { [key: string]: unknown };

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export type AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeMetadata = AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeMetadataAnyOf | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ø—ã—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
export interface AppFeaturesProgressDtoResponsesTaskAttemptResponseType {
  /** ID –ø–æ–ø—ã—Ç–∫–∏ */
  id: string;
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  user_id: number;
  /** ID –∑–∞–¥–∞—á–∏ */
  task_id: string;
  /** –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è */
  source_code?: AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeSourceCode;
  /** –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è */
  language?: AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeLanguage;
  /** –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */
  result: string;
  /** –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏ */
  is_successful: boolean;
  /** –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º—Å */
  execution_time_ms?: AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeExecutionTimeMs;
  /** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –≤ –ú–ë */
  memory_used_mb?: AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeMemoryUsedMb;
  /** –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */
  error_message?: AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeErrorMessage;
  /** –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—à–∏–±–æ–∫ */
  stderr?: AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeStderr;
  /** –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ */
  attempt_number: number;
  /** –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö */
  duration_minutes?: AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeDurationMinutes;
  /** –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è */
  created_at: string;
  /** –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */
  updated_at: string;
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */
  metadata?: AppFeaturesProgressDtoResponsesTaskAttemptResponseTypeMetadata;
}

/**
 * –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export type AppFeaturesProgressDtoResponsesTaskSolutionResponseTypeBestExecutionTimeMs = number | null;

/**
 * –õ—É—á—à–∞—è –ø–∞–º—è—Ç—å
 */
export type AppFeaturesProgressDtoResponsesTaskSolutionResponseTypeBestMemoryUsedMb = string | null;

/**
 * –†–µ–π—Ç–∏–Ω–≥ —Ä–µ—à–µ–Ω–∏—è
 */
export type AppFeaturesProgressDtoResponsesTaskSolutionResponseTypeSolutionRating = number | null;

export type AppFeaturesProgressDtoResponsesTaskSolutionResponseTypeMetadataAnyOf = { [key: string]: unknown };

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export type AppFeaturesProgressDtoResponsesTaskSolutionResponseTypeMetadata = AppFeaturesProgressDtoResponsesTaskSolutionResponseTypeMetadataAnyOf | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
 */
export interface AppFeaturesProgressDtoResponsesTaskSolutionResponseType {
  /** ID —Ä–µ—à–µ–Ω–∏—è */
  id: string;
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  user_id: number;
  /** ID –∑–∞–¥–∞—á–∏ */
  task_id: string;
  /** –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è */
  source_code: string;
  /** –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è */
  language: string;
  /** –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */
  best_execution_time_ms?: AppFeaturesProgressDtoResponsesTaskSolutionResponseTypeBestExecutionTimeMs;
  /** –õ—É—á—à–∞—è –ø–∞–º—è—Ç—å */
  best_memory_used_mb?: AppFeaturesProgressDtoResponsesTaskSolutionResponseTypeBestMemoryUsedMb;
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ */
  total_attempts: number;
  /** –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ—à–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º */
  is_optimal: boolean;
  /** –†–µ–π—Ç–∏–Ω–≥ —Ä–µ—à–µ–Ω–∏—è */
  solution_rating?: AppFeaturesProgressDtoResponsesTaskSolutionResponseTypeSolutionRating;
  /** –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è */
  created_at: string;
  /** –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */
  updated_at: string;
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */
  metadata?: AppFeaturesProgressDtoResponsesTaskSolutionResponseTypeMetadata;
}

export type AppFeaturesStatsDtoResponsesTheoryStatsResponseTypeCategories = { [key: string]: unknown };

/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–æ—Ä–∏–∏
 */
export interface AppFeaturesStatsDtoResponsesTheoryStatsResponseType {
  categories: AppFeaturesStatsDtoResponsesTheoryStatsResponseTypeCategories;
  totalCards: number;
  reviewedCards: number;
  averageReviewCount: number;
}

/**
 * –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º—Å
 */
export type AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestTypeExecutionTimeMs = number | null;

/**
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –≤ –ú–ë
 */
export type AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestTypeMemoryUsedMB = number | null;

/**
 * –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
export type AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestTypeErrorMessage = string | null;

/**
 * –í—ã–≤–æ–¥ stderr
 */
export type AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestTypeStderr = string | null;

/**
 * –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
 */
export type AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestTypeDurationMinutes = number | null;

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
export interface AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestType {
  /** ID –±–ª–æ–∫–∞ –∑–∞–¥–∞—á–∏ */
  blockId: string;
  /** –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è */
  sourceCode: string;
  /** –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è */
  language: string;
  /** –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏ */
  isSuccessful?: boolean;
  /** –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ */
  attemptNumber: number;
  /** –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º—Å */
  executionTimeMs?: AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestTypeExecutionTimeMs;
  /** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –≤ –ú–ë */
  memoryUsedMB?: AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestTypeMemoryUsedMB;
  /** –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */
  errorMessage?: AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestTypeErrorMessage;
  /** –í—ã–≤–æ–¥ stderr */
  stderr?: AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestTypeStderr;
  /** –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö */
  durationMinutes?: AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestTypeDurationMinutes;
}

/**
 * –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
 */
export type AppFeaturesTaskDtoRequestsTaskSolutionCreateRequestTypeSolvedAt = string | null;

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
export interface AppFeaturesTaskDtoRequestsTaskSolutionCreateRequestType {
  /** ID –±–ª–æ–∫–∞ –∑–∞–¥–∞—á–∏ */
  blockId: string;
  /** –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è */
  finalCode: string;
  /** –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è */
  language: string;
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ */
  totalAttempts: number;
  /** –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö */
  timeToSolveMinutes: number;
  /** –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ */
  firstAttempt: string;
  /** –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è */
  solvedAt?: AppFeaturesTaskDtoRequestsTaskSolutionCreateRequestTypeSolvedAt;
}

export type AppFeaturesTaskDtoResponsesTaskAttemptResponseTypeExecutionTimeMs = number | null;

export type AppFeaturesTaskDtoResponsesTaskAttemptResponseTypeMemoryUsedMB = number | null;

export type AppFeaturesTaskDtoResponsesTaskAttemptResponseTypeErrorMessage = string | null;

export type AppFeaturesTaskDtoResponsesTaskAttemptResponseTypeStderr = string | null;

export type AppFeaturesTaskDtoResponsesTaskAttemptResponseTypeDurationMinutes = number | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ø—ã—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è
 */
export interface AppFeaturesTaskDtoResponsesTaskAttemptResponseType {
  id: string;
  userId: number;
  blockId: string;
  sourceCode: string;
  language: string;
  isSuccessful: boolean;
  attemptNumber: number;
  executionTimeMs?: AppFeaturesTaskDtoResponsesTaskAttemptResponseTypeExecutionTimeMs;
  memoryUsedMB?: AppFeaturesTaskDtoResponsesTaskAttemptResponseTypeMemoryUsedMB;
  errorMessage?: AppFeaturesTaskDtoResponsesTaskAttemptResponseTypeErrorMessage;
  stderr?: AppFeaturesTaskDtoResponsesTaskAttemptResponseTypeStderr;
  durationMinutes?: AppFeaturesTaskDtoResponsesTaskAttemptResponseTypeDurationMinutes;
  createdAt: string;
  updatedAt: string;
}

export type AppFeaturesTaskDtoResponsesTaskResponseTypeDescription = string | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeSubCategory = string | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeFileId = string | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeFile = FileResponseType | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypePathTitles = string[] | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeBlockLevel = number | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeOrderInFile = number | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeTextContent = string | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeCodeContent = string | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeCodeLanguage = string | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeIsCodeFoldable = boolean | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeCodeFoldTitle = string | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeExtractedUrls = string[] | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeCompanies = string[] | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeQuestionBlock = string | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeAnswerBlock = string | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeTags = string[] | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeOrderIndex = number | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeCreatedAt = string | null;

export type AppFeaturesTaskDtoResponsesTaskResponseTypeUpdatedAt = string | null;

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞–Ω–∏–∏
 */
export interface AppFeaturesTaskDtoResponsesTaskResponseType {
  id: string;
  type: string;
  title: string;
  description?: AppFeaturesTaskDtoResponsesTaskResponseTypeDescription;
  category: string;
  subCategory?: AppFeaturesTaskDtoResponsesTaskResponseTypeSubCategory;
  fileId?: AppFeaturesTaskDtoResponsesTaskResponseTypeFileId;
  file?: AppFeaturesTaskDtoResponsesTaskResponseTypeFile;
  pathTitles?: AppFeaturesTaskDtoResponsesTaskResponseTypePathTitles;
  blockLevel?: AppFeaturesTaskDtoResponsesTaskResponseTypeBlockLevel;
  orderInFile?: AppFeaturesTaskDtoResponsesTaskResponseTypeOrderInFile;
  textContent?: AppFeaturesTaskDtoResponsesTaskResponseTypeTextContent;
  codeContent?: AppFeaturesTaskDtoResponsesTaskResponseTypeCodeContent;
  codeLanguage?: AppFeaturesTaskDtoResponsesTaskResponseTypeCodeLanguage;
  isCodeFoldable?: AppFeaturesTaskDtoResponsesTaskResponseTypeIsCodeFoldable;
  codeFoldTitle?: AppFeaturesTaskDtoResponsesTaskResponseTypeCodeFoldTitle;
  extractedUrls?: AppFeaturesTaskDtoResponsesTaskResponseTypeExtractedUrls;
  companies?: AppFeaturesTaskDtoResponsesTaskResponseTypeCompanies;
  questionBlock?: AppFeaturesTaskDtoResponsesTaskResponseTypeQuestionBlock;
  answerBlock?: AppFeaturesTaskDtoResponsesTaskResponseTypeAnswerBlock;
  tags?: AppFeaturesTaskDtoResponsesTaskResponseTypeTags;
  orderIndex?: AppFeaturesTaskDtoResponsesTaskResponseTypeOrderIndex;
  currentUserSolvedCount?: number;
  createdAt?: AppFeaturesTaskDtoResponsesTaskResponseTypeCreatedAt;
  updatedAt?: AppFeaturesTaskDtoResponsesTaskResponseTypeUpdatedAt;
}

/**
 * –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
 */
export interface AppFeaturesTaskDtoResponsesTaskSolutionResponseType {
  id: string;
  userId: number;
  blockId: string;
  finalCode: string;
  language: string;
  totalAttempts: number;
  timeToSolveMinutes: number;
  firstAttempt: string;
  solvedAt: string;
  createdAt: string;
  updatedAt: string;
}

/**
 * –î–µ–π—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
 */
export interface AppFeaturesTheoryDtoRequestsProgressActionType {
  /** increment –∏–ª–∏ decrement */
  action: string;
}

/**
 * –û—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏
 */
export interface AppFeaturesTheoryDtoResponsesTheoryStatsResponseType {
  totalCards: number;
  studiedCards: number;
  dueCards: number;
  averageEaseFactor: number;
  studyProgress: number;
}

export type GetContentBlocksApiV2ContentBlocksGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –ß–∞—Å—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É WebDAV
 */
webdavPath?: string | null;
/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
mainCategory?: string | null;
/**
 * –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
subCategory?: string | null;
/**
 * ID —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤
 */
filePathId?: string | null;
/**
 * –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
 */
q?: string | null;
/**
 * –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortBy?: string;
/**
 * –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortOrder?: string;
};

export type GetContentFilesApiV2ContentFilesGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
mainCategory?: string | null;
/**
 * –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
subCategory?: string | null;
/**
 * –ü–æ–∏—Å–∫ –ø–æ –ø—É—Ç–∏ WebDAV
 */
webdavPath?: string | null;
};

export type GetInterviewsApiV2InterviewsGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏ (—É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ companies)
 */
company?: string | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ —Å–ø–∏—Å–∫—É –∫–æ–º–ø–∞–Ω–∏–π
 */
companies?: string[] | null;
/**
 * –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏–Ω—Ç–µ—Ä–≤—å—é
 */
search?: string | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –∑–∞–ø–∏—Å–∏
 */
has_audio?: boolean | null;
};

export type GetTopCompaniesApiV2InterviewsTopCompaniesGetParams = {
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π –≤ —Ç–æ–ø–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type GetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 200
 */
limit?: number;
};

export type SearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetParams = {
/**
 * –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª, * –¥–ª—è –≤—Å–µ—Ö)
 * @minLength 1
 */
q: string;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
category_id?: string | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
 */
company?: string | null;
/**
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * @minimum 1
 * @maximum 500
 */
limit?: number;
/**
 * –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * @minimum 0
 */
offset?: number;
};

export type GetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetParams = {
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π –≤ —Ç–æ–ø–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type GetCategoryDetailApiV2InterviewCategoriesCategoryIdGetParams = {
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
 * @minimum 1
 * @maximum 50
 */
limit_questions?: number;
};

export type GetTopCompaniesApiV2CompaniesTopGetParams = {
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π –≤ —Ç–æ–ø–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type GetClusterConstellationApiV2ClusterVisualizationConstellationGetParams = {
/**
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞
 */
min_interview_count?: number;
/**
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å —Å–≤—è–∑–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
min_link_weight?: number;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
category_filter?: string[] | null;
};

export type GetTheoryCardsApiV2TheoryCardsGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
category?: string | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
subCategory?: string | null;
/**
 * –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–ª–æ–¥—ã
 */
deck?: string | null;
/**
 * –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortBy?: string;
/**
 * –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortOrder?: string;
/**
 * –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
 */
q?: string | null;
/**
 * –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
 */
onlyUnstudied?: boolean;
};

export type GetDueTheoryCardsApiV2TheoryCardsDueGetParams = {
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type GetTaskItemsApiV2TasksItemsGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)
 */
mainCategories?: string[];
/**
 * –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)
 */
subCategories?: string[];
/**
 * –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
 */
q?: string | null;
/**
 * –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortBy?: string;
/**
 * –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortOrder?: string;
/**
 * –¢–∏–ø: content_block, theory_quiz –∏–ª–∏ all
 */
itemType?: string | null;
/**
 * –¢–æ–ª—å–∫–æ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–µ
 */
onlyUnsolved?: boolean | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, deprecated)
 */
companies?: string | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)
 */
companiesList?: string[];
};

export type GetCompaniesApiV2TasksCompaniesGetParams = {
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
mainCategories?: string[];
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
subCategories?: string[];
};

export type GetUserTaskAttemptsApiV2TasksAttemptsGetParams = {
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ ID –±–ª–æ–∫–∞
 */
blockId?: string | null;
};

export type GetUserTaskSolutionsApiV2TasksSolutionsGetParams = {
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ ID –±–ª–æ–∫–∞
 */
blockId?: string | null;
};

export type GetUserAttemptsApiV2ProgressAttemptsGetParams = {
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ ID –∑–∞–¥–∞—á–∏
 */
task_id?: string | null;
/**
 * –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
limit?: number;
};

export type GetUserSolutionsApiV2ProgressSolutionsGetParams = {
/**
 * –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
limit?: number;
};

export type GetUserContentProgressApiV2ProgressContentGetParams = {
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ ID –±–ª–æ–∫–∞
 */
block_id?: string | null;
};

export type GetUserCategoryProgressApiV2ProgressCategoriesGetParams = {
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
main_category?: string | null;
};

export type GetProgressStatsApiV2ProgressStatsGetParams = {
/**
 * –ü–µ—Ä–∏–æ–¥: day, week, month
 */
period?: string;
};

export type GetProgressAnalyticsApiV2ProgressAnalyticsGetParams = {
/**
 * ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
user_id?: number | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
category?: string | null;
/**
 * –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
limit?: number;
/**
 * –°–º–µ—â–µ–Ω–∏–µ
 */
offset?: number;
};

export type GetRecentActivityApiV2ProgressActivityGetParams = {
/**
 * –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
limit?: number;
};

export type GetAllRecentActivityApiV2ProgressAdminActivityAllGetParams = {
/**
 * –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
limit?: number;
};

export type GetUserExecutionsApiV2CodeEditorExecutionsGetParams = {
blockId?: string | null;
};

export type GenerateMindmapApiV2MindmapGenerateGetParams = {
/**
 * –¢–∏–ø —Å—Ç—Ä—É–∫—Ç—É—Ä—ã mindmap
 */
structure_type?: string;
/**
 * –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è
 */
technology?: string;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
 */
difficulty_filter?: string | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–µ
 */
topic_filter?: string | null;
};

export type GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams = {
/**
 * –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è
 */
technology?: string;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
 */
difficulty_filter?: string | null;
};

/**
 * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Login
 */
export const loginApiV2AuthLoginPost = (
    loginRequestType: LoginRequestType,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<LoginResponseType>(
      {url: `/api/v2/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequestType, signal
    },
      );
    }
  


export const getLoginApiV2AuthLoginPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginApiV2AuthLoginPost>>, TError,{data: LoginRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof loginApiV2AuthLoginPost>>, TError,{data: LoginRequestType}, TContext> => {

const mutationKey = ['loginApiV2AuthLoginPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginApiV2AuthLoginPost>>, {data: LoginRequestType}> = (props) => {
          const {data} = props ?? {};

          return  loginApiV2AuthLoginPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginApiV2AuthLoginPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginApiV2AuthLoginPost>>>
    export type LoginApiV2AuthLoginPostMutationBody = LoginRequestType
    export type LoginApiV2AuthLoginPostMutationError = HTTPValidationErrorType

    /**
 * @summary Login
 */
export const useLoginApiV2AuthLoginPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginApiV2AuthLoginPost>>, TError,{data: LoginRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof loginApiV2AuthLoginPost>>,
        TError,
        {data: LoginRequestType},
        TContext
      > => {

      const mutationOptions = getLoginApiV2AuthLoginPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Register
 */
export const registerApiV2AuthRegisterPost = (
    registerRequestType: RegisterRequestType,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<RegisterResponseType>(
      {url: `/api/v2/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerRequestType, signal
    },
      );
    }
  


export const getRegisterApiV2AuthRegisterPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerApiV2AuthRegisterPost>>, TError,{data: RegisterRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof registerApiV2AuthRegisterPost>>, TError,{data: RegisterRequestType}, TContext> => {

const mutationKey = ['registerApiV2AuthRegisterPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerApiV2AuthRegisterPost>>, {data: RegisterRequestType}> = (props) => {
          const {data} = props ?? {};

          return  registerApiV2AuthRegisterPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterApiV2AuthRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerApiV2AuthRegisterPost>>>
    export type RegisterApiV2AuthRegisterPostMutationBody = RegisterRequestType
    export type RegisterApiV2AuthRegisterPostMutationError = HTTPValidationErrorType

    /**
 * @summary Register
 */
export const useRegisterApiV2AuthRegisterPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerApiV2AuthRegisterPost>>, TError,{data: RegisterRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerApiV2AuthRegisterPost>>,
        TError,
        {data: RegisterRequestType},
        TContext
      > => {

      const mutationOptions = getRegisterApiV2AuthRegisterPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Logout
 */
export const logoutApiV2AuthLogoutPost = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<LogoutResponseType>(
      {url: `/api/v2/auth/logout`, method: 'POST', signal
    },
      );
    }
  


export const getLogoutApiV2AuthLogoutPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logoutApiV2AuthLogoutPost>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof logoutApiV2AuthLogoutPost>>, TError,void, TContext> => {

const mutationKey = ['logoutApiV2AuthLogoutPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logoutApiV2AuthLogoutPost>>, void> = () => {
          

          return  logoutApiV2AuthLogoutPost()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LogoutApiV2AuthLogoutPostMutationResult = NonNullable<Awaited<ReturnType<typeof logoutApiV2AuthLogoutPost>>>
    
    export type LogoutApiV2AuthLogoutPostMutationError = unknown

    /**
 * @summary Logout
 */
export const useLogoutApiV2AuthLogoutPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logoutApiV2AuthLogoutPost>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof logoutApiV2AuthLogoutPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getLogoutApiV2AuthLogoutPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * @summary Get Current User Info
 */
export const getCurrentUserInfoApiV2AuthMeGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/api/v2/auth/me`, method: 'GET', signal
    },
      );
    }
  

export const getGetCurrentUserInfoApiV2AuthMeGetQueryKey = () => {
    return [`/api/v2/auth/me`] as const;
    }

    
export const getGetCurrentUserInfoApiV2AuthMeGetQueryOptions = <TData = Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentUserInfoApiV2AuthMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>> = ({ signal }) => getCurrentUserInfoApiV2AuthMeGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCurrentUserInfoApiV2AuthMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>>
export type GetCurrentUserInfoApiV2AuthMeGetQueryError = unknown


export function useGetCurrentUserInfoApiV2AuthMeGet<TData = Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCurrentUserInfoApiV2AuthMeGet<TData = Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCurrentUserInfoApiV2AuthMeGet<TData = Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Current User Info
 */

export function useGetCurrentUserInfoApiV2AuthMeGet<TData = Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiV2AuthMeGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCurrentUserInfoApiV2AuthMeGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Endpoint for receiving browser logs from Browser Tools MCP server
 * @summary Receive Browser Logs
 */
export const receiveBrowserLogsApiBrowserLogsPost = (
    browserLogsRequestType: BrowserLogsRequestType,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/api/browser-logs/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: browserLogsRequestType, signal
    },
      );
    }
  


export const getReceiveBrowserLogsApiBrowserLogsPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof receiveBrowserLogsApiBrowserLogsPost>>, TError,{data: BrowserLogsRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof receiveBrowserLogsApiBrowserLogsPost>>, TError,{data: BrowserLogsRequestType}, TContext> => {

const mutationKey = ['receiveBrowserLogsApiBrowserLogsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof receiveBrowserLogsApiBrowserLogsPost>>, {data: BrowserLogsRequestType}> = (props) => {
          const {data} = props ?? {};

          return  receiveBrowserLogsApiBrowserLogsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReceiveBrowserLogsApiBrowserLogsPostMutationResult = NonNullable<Awaited<ReturnType<typeof receiveBrowserLogsApiBrowserLogsPost>>>
    export type ReceiveBrowserLogsApiBrowserLogsPostMutationBody = BrowserLogsRequestType
    export type ReceiveBrowserLogsApiBrowserLogsPostMutationError = HTTPValidationErrorType

    /**
 * @summary Receive Browser Logs
 */
export const useReceiveBrowserLogsApiBrowserLogsPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof receiveBrowserLogsApiBrowserLogsPost>>, TError,{data: BrowserLogsRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof receiveBrowserLogsApiBrowserLogsPost>>,
        TError,
        {data: BrowserLogsRequestType},
        TContext
      > => {

      const mutationOptions = getReceiveBrowserLogsApiBrowserLogsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Health check for browser logs endpoint
 * @summary Browser Logs Health
 */
export const browserLogsHealthApiBrowserLogsHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/api/browser-logs/health`, method: 'GET', signal
    },
      );
    }
  

export const getBrowserLogsHealthApiBrowserLogsHealthGetQueryKey = () => {
    return [`/api/browser-logs/health`] as const;
    }

    
export const getBrowserLogsHealthApiBrowserLogsHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBrowserLogsHealthApiBrowserLogsHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>> = ({ signal }) => browserLogsHealthApiBrowserLogsHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BrowserLogsHealthApiBrowserLogsHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>>
export type BrowserLogsHealthApiBrowserLogsHealthGetQueryError = unknown


export function useBrowserLogsHealthApiBrowserLogsHealthGet<TData = Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>,
          TError,
          Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBrowserLogsHealthApiBrowserLogsHealthGet<TData = Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>,
          TError,
          Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBrowserLogsHealthApiBrowserLogsHealthGet<TData = Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Browser Logs Health
 */

export function useBrowserLogsHealthApiBrowserLogsHealthGet<TData = Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof browserLogsHealthApiBrowserLogsHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBrowserLogsHealthApiBrowserLogsHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get statistics about browser logs
 * @summary Get Browser Logs Stats
 */
export const getBrowserLogsStatsApiBrowserLogsStatsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/api/browser-logs/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetBrowserLogsStatsApiBrowserLogsStatsGetQueryKey = () => {
    return [`/api/browser-logs/stats`] as const;
    }

    
export const getGetBrowserLogsStatsApiBrowserLogsStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBrowserLogsStatsApiBrowserLogsStatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>> = ({ signal }) => getBrowserLogsStatsApiBrowserLogsStatsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBrowserLogsStatsApiBrowserLogsStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>>
export type GetBrowserLogsStatsApiBrowserLogsStatsGetQueryError = unknown


export function useGetBrowserLogsStatsApiBrowserLogsStatsGet<TData = Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBrowserLogsStatsApiBrowserLogsStatsGet<TData = Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBrowserLogsStatsApiBrowserLogsStatsGet<TData = Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Browser Logs Stats
 */

export function useGetBrowserLogsStatsApiBrowserLogsStatsGet<TData = Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBrowserLogsStatsApiBrowserLogsStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBrowserLogsStatsApiBrowserLogsStatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 * @summary Get Content Blocks
 */
export const getContentBlocksApiV2ContentBlocksGet = (
    params?: GetContentBlocksApiV2ContentBlocksGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<PaginatedResponseContentBlockResponseType>(
      {url: `/api/v2/content/blocks`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetContentBlocksApiV2ContentBlocksGetQueryKey = (params?: GetContentBlocksApiV2ContentBlocksGetParams,) => {
    return [`/api/v2/content/blocks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetContentBlocksApiV2ContentBlocksGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError = HTTPValidationErrorType>(params?: GetContentBlocksApiV2ContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentBlocksApiV2ContentBlocksGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>> = ({ signal }) => getContentBlocksApiV2ContentBlocksGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentBlocksApiV2ContentBlocksGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>>
export type GetContentBlocksApiV2ContentBlocksGetQueryError = HTTPValidationErrorType


export function useGetContentBlocksApiV2ContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetContentBlocksApiV2ContentBlocksGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlocksApiV2ContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentBlocksApiV2ContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlocksApiV2ContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentBlocksApiV2ContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Blocks
 */

export function useGetContentBlocksApiV2ContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentBlocksApiV2ContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiV2ContentBlocksGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentBlocksApiV2ContentBlocksGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 * @summary Get Content Files
 */
export const getContentFilesApiV2ContentFilesGet = (
    params?: GetContentFilesApiV2ContentFilesGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<PaginatedResponseContentFileResponseType>(
      {url: `/api/v2/content/files`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetContentFilesApiV2ContentFilesGetQueryKey = (params?: GetContentFilesApiV2ContentFilesGetParams,) => {
    return [`/api/v2/content/files`, ...(params ? [params]: [])] as const;
    }

    
export const getGetContentFilesApiV2ContentFilesGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError = HTTPValidationErrorType>(params?: GetContentFilesApiV2ContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentFilesApiV2ContentFilesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>> = ({ signal }) => getContentFilesApiV2ContentFilesGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentFilesApiV2ContentFilesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>>
export type GetContentFilesApiV2ContentFilesGetQueryError = HTTPValidationErrorType


export function useGetContentFilesApiV2ContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetContentFilesApiV2ContentFilesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentFilesApiV2ContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentFilesApiV2ContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentFilesApiV2ContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentFilesApiV2ContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Files
 */

export function useGetContentFilesApiV2ContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentFilesApiV2ContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiV2ContentFilesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentFilesApiV2ContentFilesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Get Content Categories
 */
export const getContentCategoriesApiV2ContentCategoriesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<ContentCategoriesResponseType>(
      {url: `/api/v2/content/categories`, method: 'GET', signal
    },
      );
    }
  

export const getGetContentCategoriesApiV2ContentCategoriesGetQueryKey = () => {
    return [`/api/v2/content/categories`] as const;
    }

    
export const getGetContentCategoriesApiV2ContentCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentCategoriesApiV2ContentCategoriesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>> = ({ signal }) => getContentCategoriesApiV2ContentCategoriesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentCategoriesApiV2ContentCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>>
export type GetContentCategoriesApiV2ContentCategoriesGetQueryError = unknown


export function useGetContentCategoriesApiV2ContentCategoriesGet<TData = Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentCategoriesApiV2ContentCategoriesGet<TData = Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentCategoriesApiV2ContentCategoriesGet<TData = Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Categories
 */

export function useGetContentCategoriesApiV2ContentCategoriesGet<TData = Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiV2ContentCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentCategoriesApiV2ContentCategoriesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @summary Get Content Subcategories
 */
export const getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet = (
    category: string,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<ContentSubcategoriesResponseType>(
      {url: `/api/v2/content/categories/${category}/subcategories`, method: 'GET', signal
    },
      );
    }
  

export const getGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGetQueryKey = (category?: string,) => {
    return [`/api/v2/content/categories/${category}/subcategories`] as const;
    }

    
export const getGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGetQueryKey(category);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>> = ({ signal }) => getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet(category, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(category), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>>
export type GetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGetQueryError = HTTPValidationErrorType


export function useGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Subcategories
 */

export function useGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentSubcategoriesApiV2ContentCategoriesCategorySubcategoriesGetQueryOptions(category,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ ID
 * @summary Get Content Block
 */
export const getContentBlockApiV2ContentBlocksBlockIdGet = (
    blockId: string,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<ContentBlockResponseType>(
      {url: `/api/v2/content/blocks/${blockId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetContentBlockApiV2ContentBlocksBlockIdGetQueryKey = (blockId?: string,) => {
    return [`/api/v2/content/blocks/${blockId}`] as const;
    }

    
export const getGetContentBlockApiV2ContentBlocksBlockIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentBlockApiV2ContentBlocksBlockIdGetQueryKey(blockId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>> = ({ signal }) => getContentBlockApiV2ContentBlocksBlockIdGet(blockId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(blockId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentBlockApiV2ContentBlocksBlockIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>>
export type GetContentBlockApiV2ContentBlocksBlockIdGetQueryError = HTTPValidationErrorType


export function useGetContentBlockApiV2ContentBlocksBlockIdGet<TData = Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlockApiV2ContentBlocksBlockIdGet<TData = Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlockApiV2ContentBlocksBlockIdGet<TData = Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Block
 */

export function useGetContentBlockApiV2ContentBlocksBlockIdGet<TData = Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiV2ContentBlocksBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentBlockApiV2ContentBlocksBlockIdGetQueryOptions(blockId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –±–ª–æ–∫—É
 * @summary Update Content Block Progress
 */
export const updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch = (
    blockId: string,
    appFeaturesContentDtoRequestsProgressActionType: AppFeaturesContentDtoRequestsProgressActionType,
 ) => {
      
      
      return generatedApiClient<UserContentProgressResponseType>(
      {url: `/api/v2/content/blocks/${blockId}/progress`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: appFeaturesContentDtoRequestsProgressActionType
    },
      );
    }
  


export const getUpdateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatchMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch>>, TError,{blockId: string;data: AppFeaturesContentDtoRequestsProgressActionType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch>>, TError,{blockId: string;data: AppFeaturesContentDtoRequestsProgressActionType}, TContext> => {

const mutationKey = ['updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch>>, {blockId: string;data: AppFeaturesContentDtoRequestsProgressActionType}> = (props) => {
          const {blockId,data} = props ?? {};

          return  updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch(blockId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch>>>
    export type UpdateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatchMutationBody = AppFeaturesContentDtoRequestsProgressActionType
    export type UpdateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatchMutationError = HTTPValidationErrorType

    /**
 * @summary Update Content Block Progress
 */
export const useUpdateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch>>, TError,{blockId: string;data: AppFeaturesContentDtoRequestsProgressActionType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatch>>,
        TError,
        {blockId: string;data: AppFeaturesContentDtoRequestsProgressActionType},
        TContext
      > => {

      const mutationOptions = getUpdateContentBlockProgressApiV2ContentBlocksBlockIdProgressPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é
 */
export const getInterviewsApiV2InterviewsGet = (
    params?: GetInterviewsApiV2InterviewsGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<InterviewsListResponseType>(
      {url: `/api/v2/interviews/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetInterviewsApiV2InterviewsGetQueryKey = (params?: GetInterviewsApiV2InterviewsGetParams,) => {
    return [`/api/v2/interviews/`, ...(params ? [params]: [])] as const;
    }

    
export const getGetInterviewsApiV2InterviewsGetQueryOptions = <TData = Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>, TError = null | HTTPValidationErrorType>(params?: GetInterviewsApiV2InterviewsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInterviewsApiV2InterviewsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>> = ({ signal }) => getInterviewsApiV2InterviewsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInterviewsApiV2InterviewsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>>
export type GetInterviewsApiV2InterviewsGetQueryError = null | HTTPValidationErrorType


export function useGetInterviewsApiV2InterviewsGet<TData = Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>, TError = null | HTTPValidationErrorType>(
 params: undefined |  GetInterviewsApiV2InterviewsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>,
          TError,
          Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInterviewsApiV2InterviewsGet<TData = Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>, TError = null | HTTPValidationErrorType>(
 params?: GetInterviewsApiV2InterviewsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>,
          TError,
          Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInterviewsApiV2InterviewsGet<TData = Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>, TError = null | HTTPValidationErrorType>(
 params?: GetInterviewsApiV2InterviewsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é
 */

export function useGetInterviewsApiV2InterviewsGet<TData = Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>, TError = null | HTTPValidationErrorType>(
 params?: GetInterviewsApiV2InterviewsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInterviewsApiV2InterviewsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInterviewsApiV2InterviewsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
 * @summary –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
 */
export const getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet = (
    companyName: string,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<CompanyStatsResponseType>(
      {url: `/api/v2/interviews/company/${companyName}/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGetQueryKey = (companyName?: string,) => {
    return [`/api/v2/interviews/company/${companyName}/stats`] as const;
    }

    
export const getGetCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>, TError = null | HTTPValidationErrorType>(companyName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGetQueryKey(companyName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>> = ({ signal }) => getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet(companyName, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(companyName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>>
export type GetCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGetQueryError = null | HTTPValidationErrorType


export function useGetCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet<TData = Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>, TError = null | HTTPValidationErrorType>(
 companyName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet<TData = Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>, TError = null | HTTPValidationErrorType>(
 companyName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet<TData = Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>, TError = null | HTTPValidationErrorType>(
 companyName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
 */

export function useGetCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet<TData = Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>, TError = null | HTTPValidationErrorType>(
 companyName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCompanyStatsApiV2InterviewsCompanyCompanyNameStatsGetQueryOptions(companyName,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é –≤ —Å–∏—Å—Ç–µ–º–µ
 * @summary –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
 */
export const getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AnalyticsResponseType>(
      {url: `/api/v2/interviews/analytics/overview`, method: 'GET', signal
    },
      );
    }
  

export const getGetAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGetQueryKey = () => {
    return [`/api/v2/interviews/analytics/overview`] as const;
    }

    
export const getGetAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGetQueryOptions = <TData = Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>, TError = null>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>> = ({ signal }) => getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>>
export type GetAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGetQueryError = null


export function useGetAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet<TData = Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>, TError = null>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>,
          TError,
          Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet<TData = Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>, TError = null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>,
          TError,
          Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet<TData = Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>, TError = null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
 */

export function useGetAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet<TData = Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>, TError = null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAnalyticsOverviewApiV2InterviewsAnalyticsOverviewGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
 * @summary –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
 */
export const getCompaniesListApiV2InterviewsCompaniesListGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<CompaniesListResponseType>(
      {url: `/api/v2/interviews/companies/list`, method: 'GET', signal
    },
      );
    }
  

export const getGetCompaniesListApiV2InterviewsCompaniesListGetQueryKey = () => {
    return [`/api/v2/interviews/companies/list`] as const;
    }

    
export const getGetCompaniesListApiV2InterviewsCompaniesListGetQueryOptions = <TData = Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>, TError = null>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompaniesListApiV2InterviewsCompaniesListGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>> = ({ signal }) => getCompaniesListApiV2InterviewsCompaniesListGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCompaniesListApiV2InterviewsCompaniesListGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>>
export type GetCompaniesListApiV2InterviewsCompaniesListGetQueryError = null


export function useGetCompaniesListApiV2InterviewsCompaniesListGet<TData = Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>, TError = null>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>,
          TError,
          Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompaniesListApiV2InterviewsCompaniesListGet<TData = Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>, TError = null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>,
          TError,
          Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompaniesListApiV2InterviewsCompaniesListGet<TData = Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>, TError = null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
 */

export function useGetCompaniesListApiV2InterviewsCompaniesListGet<TData = Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>, TError = null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesListApiV2InterviewsCompaniesListGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCompaniesListApiV2InterviewsCompaniesListGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–æ–º–ø–∞–Ω–∏–π
 */
export const getTopCompaniesApiV2InterviewsTopCompaniesGet = (
    params?: GetTopCompaniesApiV2InterviewsTopCompaniesGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<CompanyResponseType[]>(
      {url: `/api/v2/interviews/top-companies`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTopCompaniesApiV2InterviewsTopCompaniesGetQueryKey = (params?: GetTopCompaniesApiV2InterviewsTopCompaniesGetParams,) => {
    return [`/api/v2/interviews/top-companies`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTopCompaniesApiV2InterviewsTopCompaniesGetQueryOptions = <TData = Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>, TError = null | HTTPValidationErrorType>(params?: GetTopCompaniesApiV2InterviewsTopCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTopCompaniesApiV2InterviewsTopCompaniesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>> = ({ signal }) => getTopCompaniesApiV2InterviewsTopCompaniesGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTopCompaniesApiV2InterviewsTopCompaniesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>>
export type GetTopCompaniesApiV2InterviewsTopCompaniesGetQueryError = null | HTTPValidationErrorType


export function useGetTopCompaniesApiV2InterviewsTopCompaniesGet<TData = Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>, TError = null | HTTPValidationErrorType>(
 params: undefined |  GetTopCompaniesApiV2InterviewsTopCompaniesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>,
          TError,
          Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopCompaniesApiV2InterviewsTopCompaniesGet<TData = Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>, TError = null | HTTPValidationErrorType>(
 params?: GetTopCompaniesApiV2InterviewsTopCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>,
          TError,
          Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopCompaniesApiV2InterviewsTopCompaniesGet<TData = Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>, TError = null | HTTPValidationErrorType>(
 params?: GetTopCompaniesApiV2InterviewsTopCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–æ–º–ø–∞–Ω–∏–π
 */

export function useGetTopCompaniesApiV2InterviewsTopCompaniesGet<TData = Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>, TError = null | HTTPValidationErrorType>(
 params?: GetTopCompaniesApiV2InterviewsTopCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesApiV2InterviewsTopCompaniesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTopCompaniesApiV2InterviewsTopCompaniesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–≤—å—é –≤–∫–ª—é—á–∞—è –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
 */
export const getInterviewDetailApiV2InterviewsDetailInterviewIdGet = (
    interviewId: string,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<InterviewDetailResponseType>(
      {url: `/api/v2/interviews/detail/${interviewId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetInterviewDetailApiV2InterviewsDetailInterviewIdGetQueryKey = (interviewId?: string,) => {
    return [`/api/v2/interviews/detail/${interviewId}`] as const;
    }

    
export const getGetInterviewDetailApiV2InterviewsDetailInterviewIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>, TError = null | HTTPValidationErrorType>(interviewId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInterviewDetailApiV2InterviewsDetailInterviewIdGetQueryKey(interviewId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>> = ({ signal }) => getInterviewDetailApiV2InterviewsDetailInterviewIdGet(interviewId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(interviewId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInterviewDetailApiV2InterviewsDetailInterviewIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>>
export type GetInterviewDetailApiV2InterviewsDetailInterviewIdGetQueryError = null | HTTPValidationErrorType


export function useGetInterviewDetailApiV2InterviewsDetailInterviewIdGet<TData = Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>, TError = null | HTTPValidationErrorType>(
 interviewId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>,
          TError,
          Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInterviewDetailApiV2InterviewsDetailInterviewIdGet<TData = Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>, TError = null | HTTPValidationErrorType>(
 interviewId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>,
          TError,
          Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInterviewDetailApiV2InterviewsDetailInterviewIdGet<TData = Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>, TError = null | HTTPValidationErrorType>(
 interviewId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
 */

export function useGetInterviewDetailApiV2InterviewsDetailInterviewIdGet<TData = Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>, TError = null | HTTPValidationErrorType>(
 interviewId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInterviewDetailApiV2InterviewsDetailInterviewIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInterviewDetailApiV2InterviewsDetailInterviewIdGetQueryOptions(interviewId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export const getCategoriesApiV2InterviewCategoriesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<CategoryResponseType[]>(
      {url: `/api/v2/interview-categories/`, method: 'GET', signal
    },
      );
    }
  

export const getGetCategoriesApiV2InterviewCategoriesGetQueryKey = () => {
    return [`/api/v2/interview-categories/`] as const;
    }

    
export const getGetCategoriesApiV2InterviewCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>, TError = null | null>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoriesApiV2InterviewCategoriesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>> = ({ signal }) => getCategoriesApiV2InterviewCategoriesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCategoriesApiV2InterviewCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>>
export type GetCategoriesApiV2InterviewCategoriesGetQueryError = null | null


export function useGetCategoriesApiV2InterviewCategoriesGet<TData = Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>, TError = null | null>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoriesApiV2InterviewCategoriesGet<TData = Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>, TError = null | null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoriesApiV2InterviewCategoriesGet<TData = Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>, TError = null | null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */

export function useGetCategoriesApiV2InterviewCategoriesGet<TData = Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>, TError = null | null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiV2InterviewCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCategoriesApiV2InterviewCategoriesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export const getStatisticsApiV2InterviewCategoriesStatisticsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<CategoriesStatisticsResponseType>(
      {url: `/api/v2/interview-categories/statistics`, method: 'GET', signal
    },
      );
    }
  

export const getGetStatisticsApiV2InterviewCategoriesStatisticsGetQueryKey = () => {
    return [`/api/v2/interview-categories/statistics`] as const;
    }

    
export const getGetStatisticsApiV2InterviewCategoriesStatisticsGetQueryOptions = <TData = Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>, TError = null | null>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStatisticsApiV2InterviewCategoriesStatisticsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>> = ({ signal }) => getStatisticsApiV2InterviewCategoriesStatisticsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStatisticsApiV2InterviewCategoriesStatisticsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>>
export type GetStatisticsApiV2InterviewCategoriesStatisticsGetQueryError = null | null


export function useGetStatisticsApiV2InterviewCategoriesStatisticsGet<TData = Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>, TError = null | null>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>,
          TError,
          Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStatisticsApiV2InterviewCategoriesStatisticsGet<TData = Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>, TError = null | null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>,
          TError,
          Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStatisticsApiV2InterviewCategoriesStatisticsGet<TData = Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>, TError = null | null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
 */

export function useGetStatisticsApiV2InterviewCategoriesStatisticsGet<TData = Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>, TError = null | null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatisticsApiV2InterviewCategoriesStatisticsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStatisticsApiV2InterviewCategoriesStatisticsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∞—Å—Ç–µ—Ä–∞
 */
export const getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet = (
    clusterId: number,
    params?: GetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<QuestionResponseType[]>(
      {url: `/api/v2/interview-categories/cluster/${clusterId}/questions`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetQueryKey = (clusterId?: number,
    params?: GetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetParams,) => {
    return [`/api/v2/interview-categories/cluster/${clusterId}/questions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetQueryOptions = <TData = Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>, TError = null | HTTPValidationErrorType | null>(clusterId: number,
    params?: GetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetQueryKey(clusterId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>> = ({ signal }) => getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet(clusterId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(clusterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>>
export type GetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetQueryError = null | HTTPValidationErrorType | null


export function useGetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet<TData = Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>, TError = null | HTTPValidationErrorType | null>(
 clusterId: number,
    params: undefined |  GetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>,
          TError,
          Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet<TData = Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>, TError = null | HTTPValidationErrorType | null>(
 clusterId: number,
    params?: GetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>,
          TError,
          Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet<TData = Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>, TError = null | HTTPValidationErrorType | null>(
 clusterId: number,
    params?: GetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∞—Å—Ç–µ—Ä–∞
 */

export function useGetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet<TData = Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>, TError = null | HTTPValidationErrorType | null>(
 clusterId: number,
    params?: GetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetClusterQuestionsApiV2InterviewCategoriesClusterClusterIdQuestionsGetQueryOptions(clusterId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏–Ω—Ç–µ—Ä–≤—å—é —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 * @summary –ü–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
 */
export const searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet = (
    params: SearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<QuestionsListResponseType>(
      {url: `/api/v2/interview-categories/search/questions`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getSearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetQueryKey = (params?: SearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetParams,) => {
    return [`/api/v2/interview-categories/search/questions`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetQueryOptions = <TData = Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>, TError = null | HTTPValidationErrorType | null>(params: SearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>> = ({ signal }) => searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>>
export type SearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetQueryError = null | HTTPValidationErrorType | null


export function useSearchQuestionsApiV2InterviewCategoriesSearchQuestionsGet<TData = Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>, TError = null | HTTPValidationErrorType | null>(
 params: SearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>,
          TError,
          Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchQuestionsApiV2InterviewCategoriesSearchQuestionsGet<TData = Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>, TError = null | HTTPValidationErrorType | null>(
 params: SearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>,
          TError,
          Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchQuestionsApiV2InterviewCategoriesSearchQuestionsGet<TData = Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>, TError = null | HTTPValidationErrorType | null>(
 params: SearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
 */

export function useSearchQuestionsApiV2InterviewCategoriesSearchQuestionsGet<TData = Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>, TError = null | HTTPValidationErrorType | null>(
 params: SearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchQuestionsApiV2InterviewCategoriesSearchQuestionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchQuestionsApiV2InterviewCategoriesSearchQuestionsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–æ–º–ø–∞–Ω–∏–π
 */
export const getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet = (
    params?: GetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<CompanyResponseType[]>(
      {url: `/api/v2/interview-categories/companies/top`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetQueryKey = (params?: GetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetParams,) => {
    return [`/api/v2/interview-categories/companies/top`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetQueryOptions = <TData = Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>, TError = null | HTTPValidationErrorType | null>(params?: GetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>> = ({ signal }) => getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>>
export type GetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetQueryError = null | HTTPValidationErrorType | null


export function useGetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet<TData = Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>, TError = null | HTTPValidationErrorType | null>(
 params: undefined |  GetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>,
          TError,
          Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet<TData = Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>, TError = null | HTTPValidationErrorType | null>(
 params?: GetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>,
          TError,
          Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet<TData = Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>, TError = null | HTTPValidationErrorType | null>(
 params?: GetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–æ–º–ø–∞–Ω–∏–π
 */

export function useGetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet<TData = Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>, TError = null | HTTPValidationErrorType | null>(
 params?: GetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTopCompaniesEndpointApiV2InterviewCategoriesCompaniesTopGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @summary –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π
 */
export const getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<number>(
      {url: `/api/v2/interview-categories/companies/count`, method: 'GET', signal
    },
      );
    }
  

export const getGetTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGetQueryKey = () => {
    return [`/api/v2/interview-categories/companies/count`] as const;
    }

    
export const getGetTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGetQueryOptions = <TData = Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>, TError = null | null>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>> = ({ signal }) => getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>>
export type GetTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGetQueryError = null | null


export function useGetTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet<TData = Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>, TError = null | null>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>,
          TError,
          Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet<TData = Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>, TError = null | null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>,
          TError,
          Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet<TData = Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>, TError = null | null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π
 */

export function useGetTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet<TData = Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>, TError = null | null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTotalCompaniesCountApiV2InterviewCategoriesCompaniesCountGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export const getCategoryDetailApiV2InterviewCategoriesCategoryIdGet = (
    categoryId: string,
    params?: GetCategoryDetailApiV2InterviewCategoriesCategoryIdGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<CategoryDetailResponseType>(
      {url: `/api/v2/interview-categories/${categoryId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetCategoryDetailApiV2InterviewCategoriesCategoryIdGetQueryKey = (categoryId?: string,
    params?: GetCategoryDetailApiV2InterviewCategoriesCategoryIdGetParams,) => {
    return [`/api/v2/interview-categories/${categoryId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCategoryDetailApiV2InterviewCategoriesCategoryIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>, TError = null | HTTPValidationErrorType | null>(categoryId: string,
    params?: GetCategoryDetailApiV2InterviewCategoriesCategoryIdGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoryDetailApiV2InterviewCategoriesCategoryIdGetQueryKey(categoryId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>> = ({ signal }) => getCategoryDetailApiV2InterviewCategoriesCategoryIdGet(categoryId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(categoryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCategoryDetailApiV2InterviewCategoriesCategoryIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>>
export type GetCategoryDetailApiV2InterviewCategoriesCategoryIdGetQueryError = null | HTTPValidationErrorType | null


export function useGetCategoryDetailApiV2InterviewCategoriesCategoryIdGet<TData = Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>, TError = null | HTTPValidationErrorType | null>(
 categoryId: string,
    params: undefined |  GetCategoryDetailApiV2InterviewCategoriesCategoryIdGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>,
          TError,
          Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoryDetailApiV2InterviewCategoriesCategoryIdGet<TData = Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>, TError = null | HTTPValidationErrorType | null>(
 categoryId: string,
    params?: GetCategoryDetailApiV2InterviewCategoriesCategoryIdGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>,
          TError,
          Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoryDetailApiV2InterviewCategoriesCategoryIdGet<TData = Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>, TError = null | HTTPValidationErrorType | null>(
 categoryId: string,
    params?: GetCategoryDetailApiV2InterviewCategoriesCategoryIdGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */

export function useGetCategoryDetailApiV2InterviewCategoriesCategoryIdGet<TData = Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>, TError = null | HTTPValidationErrorType | null>(
 categoryId: string,
    params?: GetCategoryDetailApiV2InterviewCategoriesCategoryIdGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryDetailApiV2InterviewCategoriesCategoryIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCategoryDetailApiV2InterviewCategoriesCategoryIdGetQueryOptions(categoryId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–æ–º–ø–∞–Ω–∏–π
 */
export const getTopCompaniesApiV2CompaniesTopGet = (
    params?: GetTopCompaniesApiV2CompaniesTopGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<CompanyResponseType[]>(
      {url: `/api/v2/companies/top`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTopCompaniesApiV2CompaniesTopGetQueryKey = (params?: GetTopCompaniesApiV2CompaniesTopGetParams,) => {
    return [`/api/v2/companies/top`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTopCompaniesApiV2CompaniesTopGetQueryOptions = <TData = Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>, TError = null | HTTPValidationErrorType | null>(params?: GetTopCompaniesApiV2CompaniesTopGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTopCompaniesApiV2CompaniesTopGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>> = ({ signal }) => getTopCompaniesApiV2CompaniesTopGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTopCompaniesApiV2CompaniesTopGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>>
export type GetTopCompaniesApiV2CompaniesTopGetQueryError = null | HTTPValidationErrorType | null


export function useGetTopCompaniesApiV2CompaniesTopGet<TData = Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>, TError = null | HTTPValidationErrorType | null>(
 params: undefined |  GetTopCompaniesApiV2CompaniesTopGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>,
          TError,
          Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopCompaniesApiV2CompaniesTopGet<TData = Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>, TError = null | HTTPValidationErrorType | null>(
 params?: GetTopCompaniesApiV2CompaniesTopGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>,
          TError,
          Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopCompaniesApiV2CompaniesTopGet<TData = Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>, TError = null | HTTPValidationErrorType | null>(
 params?: GetTopCompaniesApiV2CompaniesTopGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–æ–º–ø–∞–Ω–∏–π
 */

export function useGetTopCompaniesApiV2CompaniesTopGet<TData = Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>, TError = null | HTTPValidationErrorType | null>(
 params?: GetTopCompaniesApiV2CompaniesTopGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesApiV2CompaniesTopGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTopCompaniesApiV2CompaniesTopGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∑–ª—ã –∏ —Å–≤—è–∑–∏ –¥–ª—è D3.js / ReactFlow –≥—Ä–∞—Ñ–∞
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–≤–µ–∑–¥–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
 */
export const getClusterConstellationApiV2ClusterVisualizationConstellationGet = (
    params?: GetClusterConstellationApiV2ClusterVisualizationConstellationGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<ClusterConstellationResponseType>(
      {url: `/api/v2/cluster-visualization/constellation`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetClusterConstellationApiV2ClusterVisualizationConstellationGetQueryKey = (params?: GetClusterConstellationApiV2ClusterVisualizationConstellationGetParams,) => {
    return [`/api/v2/cluster-visualization/constellation`, ...(params ? [params]: [])] as const;
    }

    
export const getGetClusterConstellationApiV2ClusterVisualizationConstellationGetQueryOptions = <TData = Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>, TError = null | HTTPValidationErrorType>(params?: GetClusterConstellationApiV2ClusterVisualizationConstellationGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterConstellationApiV2ClusterVisualizationConstellationGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>> = ({ signal }) => getClusterConstellationApiV2ClusterVisualizationConstellationGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClusterConstellationApiV2ClusterVisualizationConstellationGetQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>>
export type GetClusterConstellationApiV2ClusterVisualizationConstellationGetQueryError = null | HTTPValidationErrorType


export function useGetClusterConstellationApiV2ClusterVisualizationConstellationGet<TData = Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>, TError = null | HTTPValidationErrorType>(
 params: undefined |  GetClusterConstellationApiV2ClusterVisualizationConstellationGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>,
          TError,
          Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClusterConstellationApiV2ClusterVisualizationConstellationGet<TData = Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>, TError = null | HTTPValidationErrorType>(
 params?: GetClusterConstellationApiV2ClusterVisualizationConstellationGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>,
          TError,
          Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClusterConstellationApiV2ClusterVisualizationConstellationGet<TData = Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>, TError = null | HTTPValidationErrorType>(
 params?: GetClusterConstellationApiV2ClusterVisualizationConstellationGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–≤–µ–∑–¥–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
 */

export function useGetClusterConstellationApiV2ClusterVisualizationConstellationGet<TData = Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>, TError = null | HTTPValidationErrorType>(
 params?: GetClusterConstellationApiV2ClusterVisualizationConstellationGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterConstellationApiV2ClusterVisualizationConstellationGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetClusterConstellationApiV2ClusterVisualizationConstellationGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞
 * @summary Get Cluster Questions
 */
export const getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet = (
    clusterId: number,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/api/v2/cluster-visualization/cluster/${clusterId}/questions`, method: 'GET', signal
    },
      );
    }
  

export const getGetClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGetQueryKey = (clusterId?: number,) => {
    return [`/api/v2/cluster-visualization/cluster/${clusterId}/questions`] as const;
    }

    
export const getGetClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGetQueryOptions = <TData = Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>, TError = null | HTTPValidationErrorType>(clusterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGetQueryKey(clusterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>> = ({ signal }) => getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet(clusterId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(clusterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>>
export type GetClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGetQueryError = null | HTTPValidationErrorType


export function useGetClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet<TData = Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>, TError = null | HTTPValidationErrorType>(
 clusterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>,
          TError,
          Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet<TData = Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>, TError = null | HTTPValidationErrorType>(
 clusterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>,
          TError,
          Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet<TData = Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>, TError = null | HTTPValidationErrorType>(
 clusterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Cluster Questions
 */

export function useGetClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet<TData = Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>, TError = null | HTTPValidationErrorType>(
 clusterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetClusterQuestionsApiV2ClusterVisualizationClusterClusterIdQuestionsGetQueryOptions(clusterId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 * @summary Get Theory Cards
 */
export const getTheoryCardsApiV2TheoryCardsGet = (
    params?: GetTheoryCardsApiV2TheoryCardsGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<TheoryCardsListResponseType>(
      {url: `/api/v2/theory/cards`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTheoryCardsApiV2TheoryCardsGetQueryKey = (params?: GetTheoryCardsApiV2TheoryCardsGetParams,) => {
    return [`/api/v2/theory/cards`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTheoryCardsApiV2TheoryCardsGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError = HTTPValidationErrorType>(params?: GetTheoryCardsApiV2TheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryCardsApiV2TheoryCardsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>> = ({ signal }) => getTheoryCardsApiV2TheoryCardsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryCardsApiV2TheoryCardsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>>
export type GetTheoryCardsApiV2TheoryCardsGetQueryError = HTTPValidationErrorType


export function useGetTheoryCardsApiV2TheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetTheoryCardsApiV2TheoryCardsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardsApiV2TheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTheoryCardsApiV2TheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardsApiV2TheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTheoryCardsApiV2TheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Cards
 */

export function useGetTheoryCardsApiV2TheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTheoryCardsApiV2TheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiV2TheoryCardsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryCardsApiV2TheoryCardsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ–æ—Ä–∏–∏
 * @summary Get Theory Categories
 */
export const getTheoryCategoriesApiV2TheoryCategoriesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<TheoryCategoriesResponseType>(
      {url: `/api/v2/theory/categories`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryCategoriesApiV2TheoryCategoriesGetQueryKey = () => {
    return [`/api/v2/theory/categories`] as const;
    }

    
export const getGetTheoryCategoriesApiV2TheoryCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryCategoriesApiV2TheoryCategoriesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>> = ({ signal }) => getTheoryCategoriesApiV2TheoryCategoriesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryCategoriesApiV2TheoryCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>>
export type GetTheoryCategoriesApiV2TheoryCategoriesGetQueryError = unknown


export function useGetTheoryCategoriesApiV2TheoryCategoriesGet<TData = Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCategoriesApiV2TheoryCategoriesGet<TData = Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCategoriesApiV2TheoryCategoriesGet<TData = Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Categories
 */

export function useGetTheoryCategoriesApiV2TheoryCategoriesGet<TData = Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiV2TheoryCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryCategoriesApiV2TheoryCategoriesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @summary Get Theory Subcategories
 */
export const getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet = (
    category: string,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<TheorySubcategoriesResponseType>(
      {url: `/api/v2/theory/categories/${category}/subcategories`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGetQueryKey = (category?: string,) => {
    return [`/api/v2/theory/categories/${category}/subcategories`] as const;
    }

    
export const getGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGetQueryKey(category);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>> = ({ signal }) => getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet(category, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(category), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>>
export type GetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGetQueryError = HTTPValidationErrorType


export function useGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Subcategories
 */

export function useGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheorySubcategoriesApiV2TheoryCategoriesCategorySubcategoriesGetQueryOptions(category,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
 * @summary Get Due Theory Cards
 */
export const getDueTheoryCardsApiV2TheoryCardsDueGet = (
    params?: GetDueTheoryCardsApiV2TheoryCardsDueGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<DueCardsResponseType>(
      {url: `/api/v2/theory/cards/due`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDueTheoryCardsApiV2TheoryCardsDueGetQueryKey = (params?: GetDueTheoryCardsApiV2TheoryCardsDueGetParams,) => {
    return [`/api/v2/theory/cards/due`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDueTheoryCardsApiV2TheoryCardsDueGetQueryOptions = <TData = Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError = HTTPValidationErrorType>(params?: GetDueTheoryCardsApiV2TheoryCardsDueGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDueTheoryCardsApiV2TheoryCardsDueGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>> = ({ signal }) => getDueTheoryCardsApiV2TheoryCardsDueGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDueTheoryCardsApiV2TheoryCardsDueGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>>
export type GetDueTheoryCardsApiV2TheoryCardsDueGetQueryError = HTTPValidationErrorType


export function useGetDueTheoryCardsApiV2TheoryCardsDueGet<TData = Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetDueTheoryCardsApiV2TheoryCardsDueGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>,
          TError,
          Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDueTheoryCardsApiV2TheoryCardsDueGet<TData = Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError = HTTPValidationErrorType>(
 params?: GetDueTheoryCardsApiV2TheoryCardsDueGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>,
          TError,
          Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDueTheoryCardsApiV2TheoryCardsDueGet<TData = Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError = HTTPValidationErrorType>(
 params?: GetDueTheoryCardsApiV2TheoryCardsDueGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Due Theory Cards
 */

export function useGetDueTheoryCardsApiV2TheoryCardsDueGet<TData = Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError = HTTPValidationErrorType>(
 params?: GetDueTheoryCardsApiV2TheoryCardsDueGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiV2TheoryCardsDueGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDueTheoryCardsApiV2TheoryCardsDueGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID
 * @summary Get Theory Card
 */
export const getTheoryCardApiV2TheoryCardsCardIdGet = (
    cardId: string,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<TheoryCardResponseType>(
      {url: `/api/v2/theory/cards/${cardId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryCardApiV2TheoryCardsCardIdGetQueryKey = (cardId?: string,) => {
    return [`/api/v2/theory/cards/${cardId}`] as const;
    }

    
export const getGetTheoryCardApiV2TheoryCardsCardIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryCardApiV2TheoryCardsCardIdGetQueryKey(cardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>> = ({ signal }) => getTheoryCardApiV2TheoryCardsCardIdGet(cardId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cardId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryCardApiV2TheoryCardsCardIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>>
export type GetTheoryCardApiV2TheoryCardsCardIdGetQueryError = HTTPValidationErrorType


export function useGetTheoryCardApiV2TheoryCardsCardIdGet<TData = Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardApiV2TheoryCardsCardIdGet<TData = Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardApiV2TheoryCardsCardIdGet<TData = Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Card
 */

export function useGetTheoryCardApiV2TheoryCardsCardIdGet<TData = Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiV2TheoryCardsCardIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryCardApiV2TheoryCardsCardIdGetQueryOptions(cardId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
 * @summary Update Theory Card Progress
 */
export const updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch = (
    cardId: string,
    appFeaturesTheoryDtoRequestsProgressActionType: AppFeaturesTheoryDtoRequestsProgressActionType,
 ) => {
      
      
      return generatedApiClient<UserTheoryProgressResponseType>(
      {url: `/api/v2/theory/cards/${cardId}/progress`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: appFeaturesTheoryDtoRequestsProgressActionType
    },
      );
    }
  


export const getUpdateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatchMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch>>, TError,{cardId: string;data: AppFeaturesTheoryDtoRequestsProgressActionType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch>>, TError,{cardId: string;data: AppFeaturesTheoryDtoRequestsProgressActionType}, TContext> => {

const mutationKey = ['updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch>>, {cardId: string;data: AppFeaturesTheoryDtoRequestsProgressActionType}> = (props) => {
          const {cardId,data} = props ?? {};

          return  updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch(cardId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch>>>
    export type UpdateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatchMutationBody = AppFeaturesTheoryDtoRequestsProgressActionType
    export type UpdateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatchMutationError = HTTPValidationErrorType

    /**
 * @summary Update Theory Card Progress
 */
export const useUpdateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch>>, TError,{cardId: string;data: AppFeaturesTheoryDtoRequestsProgressActionType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatch>>,
        TError,
        {cardId: string;data: AppFeaturesTheoryDtoRequestsProgressActionType},
        TContext
      > => {

      const mutationOptions = getUpdateTheoryCardProgressApiV2TheoryCardsCardIdProgressPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π
 * @summary Review Theory Card
 */
export const reviewTheoryCardApiV2TheoryCardsCardIdReviewPost = (
    cardId: string,
    reviewRatingType: ReviewRatingType,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<UserTheoryProgressResponseType>(
      {url: `/api/v2/theory/cards/${cardId}/review`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reviewRatingType, signal
    },
      );
    }
  


export const getReviewTheoryCardApiV2TheoryCardsCardIdReviewPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reviewTheoryCardApiV2TheoryCardsCardIdReviewPost>>, TError,{cardId: string;data: ReviewRatingType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof reviewTheoryCardApiV2TheoryCardsCardIdReviewPost>>, TError,{cardId: string;data: ReviewRatingType}, TContext> => {

const mutationKey = ['reviewTheoryCardApiV2TheoryCardsCardIdReviewPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof reviewTheoryCardApiV2TheoryCardsCardIdReviewPost>>, {cardId: string;data: ReviewRatingType}> = (props) => {
          const {cardId,data} = props ?? {};

          return  reviewTheoryCardApiV2TheoryCardsCardIdReviewPost(cardId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReviewTheoryCardApiV2TheoryCardsCardIdReviewPostMutationResult = NonNullable<Awaited<ReturnType<typeof reviewTheoryCardApiV2TheoryCardsCardIdReviewPost>>>
    export type ReviewTheoryCardApiV2TheoryCardsCardIdReviewPostMutationBody = ReviewRatingType
    export type ReviewTheoryCardApiV2TheoryCardsCardIdReviewPostMutationError = HTTPValidationErrorType

    /**
 * @summary Review Theory Card
 */
export const useReviewTheoryCardApiV2TheoryCardsCardIdReviewPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reviewTheoryCardApiV2TheoryCardsCardIdReviewPost>>, TError,{cardId: string;data: ReviewRatingType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof reviewTheoryCardApiV2TheoryCardsCardIdReviewPost>>,
        TError,
        {cardId: string;data: ReviewRatingType},
        TContext
      > => {

      const mutationOptions = getReviewTheoryCardApiV2TheoryCardsCardIdReviewPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏
 * @summary Get Theory Stats Overview
 */
export const getTheoryStatsOverviewApiV2TheoryStatsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AppFeaturesTheoryDtoResponsesTheoryStatsResponseType>(
      {url: `/api/v2/theory/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryStatsOverviewApiV2TheoryStatsGetQueryKey = () => {
    return [`/api/v2/theory/stats`] as const;
    }

    
export const getGetTheoryStatsOverviewApiV2TheoryStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryStatsOverviewApiV2TheoryStatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>> = ({ signal }) => getTheoryStatsOverviewApiV2TheoryStatsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryStatsOverviewApiV2TheoryStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>>
export type GetTheoryStatsOverviewApiV2TheoryStatsGetQueryError = unknown


export function useGetTheoryStatsOverviewApiV2TheoryStatsGet<TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryStatsOverviewApiV2TheoryStatsGet<TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryStatsOverviewApiV2TheoryStatsGet<TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Stats Overview
 */

export function useGetTheoryStatsOverviewApiV2TheoryStatsGet<TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiV2TheoryStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryStatsOverviewApiV2TheoryStatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
 * @summary Reset Theory Card Progress
 */
export const resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost = (
    cardId: string,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/api/v2/theory/cards/${cardId}/reset`, method: 'POST', signal
    },
      );
    }
  


export const getResetTheoryCardProgressApiV2TheoryCardsCardIdResetPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost>>, TError,{cardId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost>>, TError,{cardId: string}, TContext> => {

const mutationKey = ['resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost>>, {cardId: string}> = (props) => {
          const {cardId} = props ?? {};

          return  resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost(cardId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResetTheoryCardProgressApiV2TheoryCardsCardIdResetPostMutationResult = NonNullable<Awaited<ReturnType<typeof resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost>>>
    
    export type ResetTheoryCardProgressApiV2TheoryCardsCardIdResetPostMutationError = HTTPValidationErrorType

    /**
 * @summary Reset Theory Card Progress
 */
export const useResetTheoryCardProgressApiV2TheoryCardsCardIdResetPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost>>, TError,{cardId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof resetTheoryCardProgressApiV2TheoryCardsCardIdResetPost>>,
        TError,
        {cardId: string},
        TContext
      > => {

      const mutationOptions = getResetTheoryCardProgressApiV2TheoryCardsCardIdResetPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ camelCase
 * @summary Test Camel Case
 */
export const testCamelCaseApiV2TheoryTestCamelCaseGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<TheoryCardResponseType>(
      {url: `/api/v2/theory/test-camel-case`, method: 'GET', signal
    },
      );
    }
  

export const getTestCamelCaseApiV2TheoryTestCamelCaseGetQueryKey = () => {
    return [`/api/v2/theory/test-camel-case`] as const;
    }

    
export const getTestCamelCaseApiV2TheoryTestCamelCaseGetQueryOptions = <TData = Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTestCamelCaseApiV2TheoryTestCamelCaseGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>> = ({ signal }) => testCamelCaseApiV2TheoryTestCamelCaseGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TestCamelCaseApiV2TheoryTestCamelCaseGetQueryResult = NonNullable<Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>>
export type TestCamelCaseApiV2TheoryTestCamelCaseGetQueryError = unknown


export function useTestCamelCaseApiV2TheoryTestCamelCaseGet<TData = Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>,
          TError,
          Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTestCamelCaseApiV2TheoryTestCamelCaseGet<TData = Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>,
          TError,
          Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTestCamelCaseApiV2TheoryTestCamelCaseGet<TData = Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Test Camel Case
 */

export function useTestCamelCaseApiV2TheoryTestCamelCaseGet<TData = Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testCamelCaseApiV2TheoryTestCamelCaseGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTestCamelCaseApiV2TheoryTestCamelCaseGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (content blocks + quiz –∫–∞—Ä—Ç–æ—á–∫–∏)
 * @summary Get Task Items
 */
export const getTaskItemsApiV2TasksItemsGet = (
    params?: GetTaskItemsApiV2TasksItemsGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<TasksListResponseType>(
      {url: `/api/v2/tasks/items`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTaskItemsApiV2TasksItemsGetQueryKey = (params?: GetTaskItemsApiV2TasksItemsGetParams,) => {
    return [`/api/v2/tasks/items`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTaskItemsApiV2TasksItemsGetQueryOptions = <TData = Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError = HTTPValidationErrorType>(params?: GetTaskItemsApiV2TasksItemsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTaskItemsApiV2TasksItemsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>> = ({ signal }) => getTaskItemsApiV2TasksItemsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTaskItemsApiV2TasksItemsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>>
export type GetTaskItemsApiV2TasksItemsGetQueryError = HTTPValidationErrorType


export function useGetTaskItemsApiV2TasksItemsGet<TData = Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetTaskItemsApiV2TasksItemsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskItemsApiV2TasksItemsGet<TData = Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTaskItemsApiV2TasksItemsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskItemsApiV2TasksItemsGet<TData = Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTaskItemsApiV2TasksItemsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Task Items
 */

export function useGetTaskItemsApiV2TasksItemsGet<TData = Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTaskItemsApiV2TasksItemsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiV2TasksItemsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTaskItemsApiV2TasksItemsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞–Ω–∏–π —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 * @summary Get Task Categories
 */
export const getTaskCategoriesApiV2TasksCategoriesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<TaskCategoriesResponseType>(
      {url: `/api/v2/tasks/categories`, method: 'GET', signal
    },
      );
    }
  

export const getGetTaskCategoriesApiV2TasksCategoriesGetQueryKey = () => {
    return [`/api/v2/tasks/categories`] as const;
    }

    
export const getGetTaskCategoriesApiV2TasksCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTaskCategoriesApiV2TasksCategoriesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>> = ({ signal }) => getTaskCategoriesApiV2TasksCategoriesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTaskCategoriesApiV2TasksCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>>
export type GetTaskCategoriesApiV2TasksCategoriesGetQueryError = unknown


export function useGetTaskCategoriesApiV2TasksCategoriesGet<TData = Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskCategoriesApiV2TasksCategoriesGet<TData = Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskCategoriesApiV2TasksCategoriesGet<TData = Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Task Categories
 */

export function useGetTaskCategoriesApiV2TasksCategoriesGet<TData = Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiV2TasksCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTaskCategoriesApiV2TasksCategoriesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –∑–∞–¥–∞–Ω–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
 * @summary Get Companies
 */
export const getCompaniesApiV2TasksCompaniesGet = (
    params?: GetCompaniesApiV2TasksCompaniesGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<TaskCompaniesResponseType>(
      {url: `/api/v2/tasks/companies`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetCompaniesApiV2TasksCompaniesGetQueryKey = (params?: GetCompaniesApiV2TasksCompaniesGetParams,) => {
    return [`/api/v2/tasks/companies`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCompaniesApiV2TasksCompaniesGetQueryOptions = <TData = Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError = HTTPValidationErrorType>(params?: GetCompaniesApiV2TasksCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompaniesApiV2TasksCompaniesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>> = ({ signal }) => getCompaniesApiV2TasksCompaniesGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCompaniesApiV2TasksCompaniesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>>
export type GetCompaniesApiV2TasksCompaniesGetQueryError = HTTPValidationErrorType


export function useGetCompaniesApiV2TasksCompaniesGet<TData = Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetCompaniesApiV2TasksCompaniesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>,
          TError,
          Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompaniesApiV2TasksCompaniesGet<TData = Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError = HTTPValidationErrorType>(
 params?: GetCompaniesApiV2TasksCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>,
          TError,
          Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompaniesApiV2TasksCompaniesGet<TData = Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError = HTTPValidationErrorType>(
 params?: GetCompaniesApiV2TasksCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Companies
 */

export function useGetCompaniesApiV2TasksCompaniesGet<TData = Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError = HTTPValidationErrorType>(
 params?: GetCompaniesApiV2TasksCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiV2TasksCompaniesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCompaniesApiV2TasksCompaniesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 * @summary Create Task Attempt
 */
export const createTaskAttemptApiV2TasksAttemptsPost = (
    appFeaturesTaskDtoRequestsTaskAttemptCreateRequestType: AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestType,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AppFeaturesTaskDtoResponsesTaskAttemptResponseType>(
      {url: `/api/v2/tasks/attempts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: appFeaturesTaskDtoRequestsTaskAttemptCreateRequestType, signal
    },
      );
    }
  


export const getCreateTaskAttemptApiV2TasksAttemptsPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTaskAttemptApiV2TasksAttemptsPost>>, TError,{data: AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createTaskAttemptApiV2TasksAttemptsPost>>, TError,{data: AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestType}, TContext> => {

const mutationKey = ['createTaskAttemptApiV2TasksAttemptsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTaskAttemptApiV2TasksAttemptsPost>>, {data: AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestType}> = (props) => {
          const {data} = props ?? {};

          return  createTaskAttemptApiV2TasksAttemptsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTaskAttemptApiV2TasksAttemptsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createTaskAttemptApiV2TasksAttemptsPost>>>
    export type CreateTaskAttemptApiV2TasksAttemptsPostMutationBody = AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestType
    export type CreateTaskAttemptApiV2TasksAttemptsPostMutationError = HTTPValidationErrorType

    /**
 * @summary Create Task Attempt
 */
export const useCreateTaskAttemptApiV2TasksAttemptsPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTaskAttemptApiV2TasksAttemptsPost>>, TError,{data: AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createTaskAttemptApiV2TasksAttemptsPost>>,
        TError,
        {data: AppFeaturesTaskDtoRequestsTaskAttemptCreateRequestType},
        TContext
      > => {

      const mutationOptions = getCreateTaskAttemptApiV2TasksAttemptsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Task Attempts
 */
export const getUserTaskAttemptsApiV2TasksAttemptsGet = (
    params?: GetUserTaskAttemptsApiV2TasksAttemptsGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AppFeaturesTaskDtoResponsesTaskAttemptResponseType[]>(
      {url: `/api/v2/tasks/attempts`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserTaskAttemptsApiV2TasksAttemptsGetQueryKey = (params?: GetUserTaskAttemptsApiV2TasksAttemptsGetParams,) => {
    return [`/api/v2/tasks/attempts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserTaskAttemptsApiV2TasksAttemptsGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>, TError = HTTPValidationErrorType>(params?: GetUserTaskAttemptsApiV2TasksAttemptsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserTaskAttemptsApiV2TasksAttemptsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>> = ({ signal }) => getUserTaskAttemptsApiV2TasksAttemptsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserTaskAttemptsApiV2TasksAttemptsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>>
export type GetUserTaskAttemptsApiV2TasksAttemptsGetQueryError = HTTPValidationErrorType


export function useGetUserTaskAttemptsApiV2TasksAttemptsGet<TData = Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetUserTaskAttemptsApiV2TasksAttemptsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserTaskAttemptsApiV2TasksAttemptsGet<TData = Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserTaskAttemptsApiV2TasksAttemptsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserTaskAttemptsApiV2TasksAttemptsGet<TData = Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserTaskAttemptsApiV2TasksAttemptsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Task Attempts
 */

export function useGetUserTaskAttemptsApiV2TasksAttemptsGet<TData = Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserTaskAttemptsApiV2TasksAttemptsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTaskAttemptsApiV2TasksAttemptsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserTaskAttemptsApiV2TasksAttemptsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 * @summary Create Task Solution
 */
export const createTaskSolutionApiV2TasksSolutionsPost = (
    appFeaturesTaskDtoRequestsTaskSolutionCreateRequestType: AppFeaturesTaskDtoRequestsTaskSolutionCreateRequestType,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AppFeaturesTaskDtoResponsesTaskSolutionResponseType>(
      {url: `/api/v2/tasks/solutions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: appFeaturesTaskDtoRequestsTaskSolutionCreateRequestType, signal
    },
      );
    }
  


export const getCreateTaskSolutionApiV2TasksSolutionsPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTaskSolutionApiV2TasksSolutionsPost>>, TError,{data: AppFeaturesTaskDtoRequestsTaskSolutionCreateRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createTaskSolutionApiV2TasksSolutionsPost>>, TError,{data: AppFeaturesTaskDtoRequestsTaskSolutionCreateRequestType}, TContext> => {

const mutationKey = ['createTaskSolutionApiV2TasksSolutionsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTaskSolutionApiV2TasksSolutionsPost>>, {data: AppFeaturesTaskDtoRequestsTaskSolutionCreateRequestType}> = (props) => {
          const {data} = props ?? {};

          return  createTaskSolutionApiV2TasksSolutionsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTaskSolutionApiV2TasksSolutionsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createTaskSolutionApiV2TasksSolutionsPost>>>
    export type CreateTaskSolutionApiV2TasksSolutionsPostMutationBody = AppFeaturesTaskDtoRequestsTaskSolutionCreateRequestType
    export type CreateTaskSolutionApiV2TasksSolutionsPostMutationError = HTTPValidationErrorType

    /**
 * @summary Create Task Solution
 */
export const useCreateTaskSolutionApiV2TasksSolutionsPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTaskSolutionApiV2TasksSolutionsPost>>, TError,{data: AppFeaturesTaskDtoRequestsTaskSolutionCreateRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createTaskSolutionApiV2TasksSolutionsPost>>,
        TError,
        {data: AppFeaturesTaskDtoRequestsTaskSolutionCreateRequestType},
        TContext
      > => {

      const mutationOptions = getCreateTaskSolutionApiV2TasksSolutionsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Task Solutions
 */
export const getUserTaskSolutionsApiV2TasksSolutionsGet = (
    params?: GetUserTaskSolutionsApiV2TasksSolutionsGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AppFeaturesTaskDtoResponsesTaskSolutionResponseType[]>(
      {url: `/api/v2/tasks/solutions`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserTaskSolutionsApiV2TasksSolutionsGetQueryKey = (params?: GetUserTaskSolutionsApiV2TasksSolutionsGetParams,) => {
    return [`/api/v2/tasks/solutions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserTaskSolutionsApiV2TasksSolutionsGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>, TError = HTTPValidationErrorType>(params?: GetUserTaskSolutionsApiV2TasksSolutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserTaskSolutionsApiV2TasksSolutionsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>> = ({ signal }) => getUserTaskSolutionsApiV2TasksSolutionsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserTaskSolutionsApiV2TasksSolutionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>>
export type GetUserTaskSolutionsApiV2TasksSolutionsGetQueryError = HTTPValidationErrorType


export function useGetUserTaskSolutionsApiV2TasksSolutionsGet<TData = Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetUserTaskSolutionsApiV2TasksSolutionsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserTaskSolutionsApiV2TasksSolutionsGet<TData = Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserTaskSolutionsApiV2TasksSolutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserTaskSolutionsApiV2TasksSolutionsGet<TData = Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserTaskSolutionsApiV2TasksSolutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Task Solutions
 */

export function useGetUserTaskSolutionsApiV2TasksSolutionsGet<TData = Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserTaskSolutionsApiV2TasksSolutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTaskSolutionsApiV2TasksSolutionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserTaskSolutionsApiV2TasksSolutionsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è
 */
export const createTaskAttemptApiV2ProgressAttemptsPost = (
    appFeaturesProgressDtoRequestsTaskAttemptCreateRequestType: AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestType,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AppFeaturesProgressDtoResponsesTaskAttemptResponseType>(
      {url: `/api/v2/progress/attempts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: appFeaturesProgressDtoRequestsTaskAttemptCreateRequestType, signal
    },
      );
    }
  


export const getCreateTaskAttemptApiV2ProgressAttemptsPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTaskAttemptApiV2ProgressAttemptsPost>>, TError,{data: AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createTaskAttemptApiV2ProgressAttemptsPost>>, TError,{data: AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestType}, TContext> => {

const mutationKey = ['createTaskAttemptApiV2ProgressAttemptsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTaskAttemptApiV2ProgressAttemptsPost>>, {data: AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestType}> = (props) => {
          const {data} = props ?? {};

          return  createTaskAttemptApiV2ProgressAttemptsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTaskAttemptApiV2ProgressAttemptsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createTaskAttemptApiV2ProgressAttemptsPost>>>
    export type CreateTaskAttemptApiV2ProgressAttemptsPostMutationBody = AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestType
    export type CreateTaskAttemptApiV2ProgressAttemptsPostMutationError = HTTPValidationErrorType

    /**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è
 */
export const useCreateTaskAttemptApiV2ProgressAttemptsPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTaskAttemptApiV2ProgressAttemptsPost>>, TError,{data: AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createTaskAttemptApiV2ProgressAttemptsPost>>,
        TError,
        {data: AppFeaturesProgressDtoRequestsTaskAttemptCreateRequestType},
        TContext
      > => {

      const mutationOptions = getCreateTaskAttemptApiV2ProgressAttemptsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getUserAttemptsApiV2ProgressAttemptsGet = (
    params?: GetUserAttemptsApiV2ProgressAttemptsGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AppFeaturesProgressDtoResponsesTaskAttemptResponseType[]>(
      {url: `/api/v2/progress/attempts`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserAttemptsApiV2ProgressAttemptsGetQueryKey = (params?: GetUserAttemptsApiV2ProgressAttemptsGetParams,) => {
    return [`/api/v2/progress/attempts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserAttemptsApiV2ProgressAttemptsGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>, TError = HTTPValidationErrorType>(params?: GetUserAttemptsApiV2ProgressAttemptsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserAttemptsApiV2ProgressAttemptsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>> = ({ signal }) => getUserAttemptsApiV2ProgressAttemptsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserAttemptsApiV2ProgressAttemptsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>>
export type GetUserAttemptsApiV2ProgressAttemptsGetQueryError = HTTPValidationErrorType


export function useGetUserAttemptsApiV2ProgressAttemptsGet<TData = Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetUserAttemptsApiV2ProgressAttemptsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserAttemptsApiV2ProgressAttemptsGet<TData = Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserAttemptsApiV2ProgressAttemptsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserAttemptsApiV2ProgressAttemptsGet<TData = Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserAttemptsApiV2ProgressAttemptsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetUserAttemptsApiV2ProgressAttemptsGet<TData = Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserAttemptsApiV2ProgressAttemptsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAttemptsApiV2ProgressAttemptsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserAttemptsApiV2ProgressAttemptsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
 * @summary –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫ –ø–æ –∑–∞–¥–∞—á–µ
 */
export const getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet = (
    taskId: string,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AttemptHistoryResponseType>(
      {url: `/api/v2/progress/attempts/${taskId}/history`, method: 'GET', signal
    },
      );
    }
  

export const getGetAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGetQueryKey = (taskId?: string,) => {
    return [`/api/v2/progress/attempts/${taskId}/history`] as const;
    }

    
export const getGetAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGetQueryOptions = <TData = Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>, TError = HTTPValidationErrorType>(taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGetQueryKey(taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>> = ({ signal }) => getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet(taskId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>>
export type GetAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGetQueryError = HTTPValidationErrorType


export function useGetAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet<TData = Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>,
          TError,
          Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet<TData = Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>,
          TError,
          Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet<TData = Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫ –ø–æ –∑–∞–¥–∞—á–µ
 */

export function useGetAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet<TData = Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAttemptHistoryApiV2ProgressAttemptsTaskIdHistoryGetQueryOptions(taskId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
export const createTaskSolutionApiV2ProgressSolutionsPost = (
    appFeaturesProgressDtoRequestsTaskSolutionCreateRequestType: AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestType,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AppFeaturesProgressDtoResponsesTaskSolutionResponseType>(
      {url: `/api/v2/progress/solutions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: appFeaturesProgressDtoRequestsTaskSolutionCreateRequestType, signal
    },
      );
    }
  


export const getCreateTaskSolutionApiV2ProgressSolutionsPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTaskSolutionApiV2ProgressSolutionsPost>>, TError,{data: AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createTaskSolutionApiV2ProgressSolutionsPost>>, TError,{data: AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestType}, TContext> => {

const mutationKey = ['createTaskSolutionApiV2ProgressSolutionsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTaskSolutionApiV2ProgressSolutionsPost>>, {data: AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestType}> = (props) => {
          const {data} = props ?? {};

          return  createTaskSolutionApiV2ProgressSolutionsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTaskSolutionApiV2ProgressSolutionsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createTaskSolutionApiV2ProgressSolutionsPost>>>
    export type CreateTaskSolutionApiV2ProgressSolutionsPostMutationBody = AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestType
    export type CreateTaskSolutionApiV2ProgressSolutionsPostMutationError = HTTPValidationErrorType

    /**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
export const useCreateTaskSolutionApiV2ProgressSolutionsPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTaskSolutionApiV2ProgressSolutionsPost>>, TError,{data: AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createTaskSolutionApiV2ProgressSolutionsPost>>,
        TError,
        {data: AppFeaturesProgressDtoRequestsTaskSolutionCreateRequestType},
        TContext
      > => {

      const mutationOptions = getCreateTaskSolutionApiV2ProgressSolutionsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏–π –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getUserSolutionsApiV2ProgressSolutionsGet = (
    params?: GetUserSolutionsApiV2ProgressSolutionsGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AppFeaturesProgressDtoResponsesTaskSolutionResponseType[]>(
      {url: `/api/v2/progress/solutions`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserSolutionsApiV2ProgressSolutionsGetQueryKey = (params?: GetUserSolutionsApiV2ProgressSolutionsGetParams,) => {
    return [`/api/v2/progress/solutions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserSolutionsApiV2ProgressSolutionsGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>, TError = HTTPValidationErrorType>(params?: GetUserSolutionsApiV2ProgressSolutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserSolutionsApiV2ProgressSolutionsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>> = ({ signal }) => getUserSolutionsApiV2ProgressSolutionsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserSolutionsApiV2ProgressSolutionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>>
export type GetUserSolutionsApiV2ProgressSolutionsGetQueryError = HTTPValidationErrorType


export function useGetUserSolutionsApiV2ProgressSolutionsGet<TData = Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetUserSolutionsApiV2ProgressSolutionsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserSolutionsApiV2ProgressSolutionsGet<TData = Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserSolutionsApiV2ProgressSolutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserSolutionsApiV2ProgressSolutionsGet<TData = Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserSolutionsApiV2ProgressSolutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetUserSolutionsApiV2ProgressSolutionsGet<TData = Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserSolutionsApiV2ProgressSolutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSolutionsApiV2ProgressSolutionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserSolutionsApiV2ProgressSolutionsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
export const getTaskSolutionApiV2ProgressSolutionsTaskIdGet = (
    taskId: string,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AppFeaturesProgressDtoResponsesTaskSolutionResponseType>(
      {url: `/api/v2/progress/solutions/${taskId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTaskSolutionApiV2ProgressSolutionsTaskIdGetQueryKey = (taskId?: string,) => {
    return [`/api/v2/progress/solutions/${taskId}`] as const;
    }

    
export const getGetTaskSolutionApiV2ProgressSolutionsTaskIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>, TError = HTTPValidationErrorType>(taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTaskSolutionApiV2ProgressSolutionsTaskIdGetQueryKey(taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>> = ({ signal }) => getTaskSolutionApiV2ProgressSolutionsTaskIdGet(taskId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTaskSolutionApiV2ProgressSolutionsTaskIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>>
export type GetTaskSolutionApiV2ProgressSolutionsTaskIdGetQueryError = HTTPValidationErrorType


export function useGetTaskSolutionApiV2ProgressSolutionsTaskIdGet<TData = Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskSolutionApiV2ProgressSolutionsTaskIdGet<TData = Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskSolutionApiV2ProgressSolutionsTaskIdGet<TData = Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */

export function useGetTaskSolutionApiV2ProgressSolutionsTaskIdGet<TData = Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskSolutionApiV2ProgressSolutionsTaskIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTaskSolutionApiV2ProgressSolutionsTaskIdGetQueryOptions(taskId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
 */
export const updateContentProgressApiV2ProgressContentPut = (
    contentProgressUpdateRequestType: ContentProgressUpdateRequestType,
 ) => {
      
      
      return generatedApiClient<ContentProgressResponseType>(
      {url: `/api/v2/progress/content`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: contentProgressUpdateRequestType
    },
      );
    }
  


export const getUpdateContentProgressApiV2ProgressContentPutMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentProgressApiV2ProgressContentPut>>, TError,{data: ContentProgressUpdateRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateContentProgressApiV2ProgressContentPut>>, TError,{data: ContentProgressUpdateRequestType}, TContext> => {

const mutationKey = ['updateContentProgressApiV2ProgressContentPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateContentProgressApiV2ProgressContentPut>>, {data: ContentProgressUpdateRequestType}> = (props) => {
          const {data} = props ?? {};

          return  updateContentProgressApiV2ProgressContentPut(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateContentProgressApiV2ProgressContentPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateContentProgressApiV2ProgressContentPut>>>
    export type UpdateContentProgressApiV2ProgressContentPutMutationBody = ContentProgressUpdateRequestType
    export type UpdateContentProgressApiV2ProgressContentPutMutationError = HTTPValidationErrorType

    /**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
 */
export const useUpdateContentProgressApiV2ProgressContentPut = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentProgressApiV2ProgressContentPut>>, TError,{data: ContentProgressUpdateRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateContentProgressApiV2ProgressContentPut>>,
        TError,
        {data: ContentProgressUpdateRequestType},
        TContext
      > => {

      const mutationOptions = getUpdateContentProgressApiV2ProgressContentPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö –±–ª–æ–∫–æ–≤
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
 */
export const getUserContentProgressApiV2ProgressContentGet = (
    params?: GetUserContentProgressApiV2ProgressContentGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<ContentProgressResponseType[]>(
      {url: `/api/v2/progress/content`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserContentProgressApiV2ProgressContentGetQueryKey = (params?: GetUserContentProgressApiV2ProgressContentGetParams,) => {
    return [`/api/v2/progress/content`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserContentProgressApiV2ProgressContentGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>, TError = HTTPValidationErrorType>(params?: GetUserContentProgressApiV2ProgressContentGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserContentProgressApiV2ProgressContentGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>> = ({ signal }) => getUserContentProgressApiV2ProgressContentGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserContentProgressApiV2ProgressContentGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>>
export type GetUserContentProgressApiV2ProgressContentGetQueryError = HTTPValidationErrorType


export function useGetUserContentProgressApiV2ProgressContentGet<TData = Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetUserContentProgressApiV2ProgressContentGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>,
          TError,
          Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserContentProgressApiV2ProgressContentGet<TData = Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserContentProgressApiV2ProgressContentGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>,
          TError,
          Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserContentProgressApiV2ProgressContentGet<TData = Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserContentProgressApiV2ProgressContentGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
 */

export function useGetUserContentProgressApiV2ProgressContentGet<TData = Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserContentProgressApiV2ProgressContentGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserContentProgressApiV2ProgressContentGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserContentProgressApiV2ProgressContentGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export const updateCategoryProgressApiV2ProgressCategoriesPut = (
    categoryProgressUpdateRequestType: CategoryProgressUpdateRequestType,
 ) => {
      
      
      return generatedApiClient<CategoryProgressResponseType>(
      {url: `/api/v2/progress/categories`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: categoryProgressUpdateRequestType
    },
      );
    }
  


export const getUpdateCategoryProgressApiV2ProgressCategoriesPutMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCategoryProgressApiV2ProgressCategoriesPut>>, TError,{data: CategoryProgressUpdateRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateCategoryProgressApiV2ProgressCategoriesPut>>, TError,{data: CategoryProgressUpdateRequestType}, TContext> => {

const mutationKey = ['updateCategoryProgressApiV2ProgressCategoriesPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCategoryProgressApiV2ProgressCategoriesPut>>, {data: CategoryProgressUpdateRequestType}> = (props) => {
          const {data} = props ?? {};

          return  updateCategoryProgressApiV2ProgressCategoriesPut(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCategoryProgressApiV2ProgressCategoriesPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateCategoryProgressApiV2ProgressCategoriesPut>>>
    export type UpdateCategoryProgressApiV2ProgressCategoriesPutMutationBody = CategoryProgressUpdateRequestType
    export type UpdateCategoryProgressApiV2ProgressCategoriesPutMutationError = HTTPValidationErrorType

    /**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export const useUpdateCategoryProgressApiV2ProgressCategoriesPut = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCategoryProgressApiV2ProgressCategoriesPut>>, TError,{data: CategoryProgressUpdateRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCategoryProgressApiV2ProgressCategoriesPut>>,
        TError,
        {data: CategoryProgressUpdateRequestType},
        TContext
      > => {

      const mutationOptions = getUpdateCategoryProgressApiV2ProgressCategoriesPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
export const getUserCategoryProgressApiV2ProgressCategoriesGet = (
    params?: GetUserCategoryProgressApiV2ProgressCategoriesGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<CategoryProgressResponseType[]>(
      {url: `/api/v2/progress/categories`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserCategoryProgressApiV2ProgressCategoriesGetQueryKey = (params?: GetUserCategoryProgressApiV2ProgressCategoriesGetParams,) => {
    return [`/api/v2/progress/categories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserCategoryProgressApiV2ProgressCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>, TError = HTTPValidationErrorType>(params?: GetUserCategoryProgressApiV2ProgressCategoriesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCategoryProgressApiV2ProgressCategoriesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>> = ({ signal }) => getUserCategoryProgressApiV2ProgressCategoriesGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserCategoryProgressApiV2ProgressCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>>
export type GetUserCategoryProgressApiV2ProgressCategoriesGetQueryError = HTTPValidationErrorType


export function useGetUserCategoryProgressApiV2ProgressCategoriesGet<TData = Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetUserCategoryProgressApiV2ProgressCategoriesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserCategoryProgressApiV2ProgressCategoriesGet<TData = Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserCategoryProgressApiV2ProgressCategoriesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserCategoryProgressApiV2ProgressCategoriesGet<TData = Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserCategoryProgressApiV2ProgressCategoriesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */

export function useGetUserCategoryProgressApiV2ProgressCategoriesGet<TData = Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserCategoryProgressApiV2ProgressCategoriesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCategoryProgressApiV2ProgressCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserCategoryProgressApiV2ProgressCategoriesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary –°–≤–æ–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getUserProgressSummaryApiV2ProgressSummaryGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<UserProgressSummaryResponseType>(
      {url: `/api/v2/progress/summary`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserProgressSummaryApiV2ProgressSummaryGetQueryKey = () => {
    return [`/api/v2/progress/summary`] as const;
    }

    
export const getGetUserProgressSummaryApiV2ProgressSummaryGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserProgressSummaryApiV2ProgressSummaryGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>> = ({ signal }) => getUserProgressSummaryApiV2ProgressSummaryGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserProgressSummaryApiV2ProgressSummaryGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>>
export type GetUserProgressSummaryApiV2ProgressSummaryGetQueryError = unknown


export function useGetUserProgressSummaryApiV2ProgressSummaryGet<TData = Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>,
          TError,
          Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserProgressSummaryApiV2ProgressSummaryGet<TData = Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>,
          TError,
          Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserProgressSummaryApiV2ProgressSummaryGet<TData = Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –°–≤–æ–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetUserProgressSummaryApiV2ProgressSummaryGet<TData = Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProgressSummaryApiV2ProgressSummaryGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserProgressSummaryApiV2ProgressSummaryGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getUserDetailedProgressApiV2ProgressDetailedGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<UserDetailedProgressResponseType>(
      {url: `/api/v2/progress/detailed`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserDetailedProgressApiV2ProgressDetailedGetQueryKey = () => {
    return [`/api/v2/progress/detailed`] as const;
    }

    
export const getGetUserDetailedProgressApiV2ProgressDetailedGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserDetailedProgressApiV2ProgressDetailedGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>> = ({ signal }) => getUserDetailedProgressApiV2ProgressDetailedGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserDetailedProgressApiV2ProgressDetailedGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>>
export type GetUserDetailedProgressApiV2ProgressDetailedGetQueryError = unknown


export function useGetUserDetailedProgressApiV2ProgressDetailedGet<TData = Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserDetailedProgressApiV2ProgressDetailedGet<TData = Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserDetailedProgressApiV2ProgressDetailedGet<TData = Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetUserDetailedProgressApiV2ProgressDetailedGet<TData = Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiV2ProgressDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserDetailedProgressApiV2ProgressDetailedGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å)
 */
export const getMyDetailedProgressApiV2ProgressUserMyDetailedGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<UserDetailedProgressResponseType>(
      {url: `/api/v2/progress/user/my/detailed`, method: 'GET', signal
    },
      );
    }
  

export const getGetMyDetailedProgressApiV2ProgressUserMyDetailedGetQueryKey = () => {
    return [`/api/v2/progress/user/my/detailed`] as const;
    }

    
export const getGetMyDetailedProgressApiV2ProgressUserMyDetailedGetQueryOptions = <TData = Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyDetailedProgressApiV2ProgressUserMyDetailedGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>> = ({ signal }) => getMyDetailedProgressApiV2ProgressUserMyDetailedGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMyDetailedProgressApiV2ProgressUserMyDetailedGetQueryResult = NonNullable<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>>
export type GetMyDetailedProgressApiV2ProgressUserMyDetailedGetQueryError = unknown


export function useGetMyDetailedProgressApiV2ProgressUserMyDetailedGet<TData = Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyDetailedProgressApiV2ProgressUserMyDetailedGet<TData = Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyDetailedProgressApiV2ProgressUserMyDetailedGet<TData = Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å)
 */

export function useGetMyDetailedProgressApiV2ProgressUserMyDetailedGet<TData = Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiV2ProgressUserMyDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMyDetailedProgressApiV2ProgressUserMyDetailedGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
 * @summary –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
export const getProgressStatsApiV2ProgressStatsGet = (
    params?: GetProgressStatsApiV2ProgressStatsGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<ProgressStatsResponseType>(
      {url: `/api/v2/progress/stats`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetProgressStatsApiV2ProgressStatsGetQueryKey = (params?: GetProgressStatsApiV2ProgressStatsGetParams,) => {
    return [`/api/v2/progress/stats`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProgressStatsApiV2ProgressStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>, TError = HTTPValidationErrorType>(params?: GetProgressStatsApiV2ProgressStatsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressStatsApiV2ProgressStatsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>> = ({ signal }) => getProgressStatsApiV2ProgressStatsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressStatsApiV2ProgressStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>>
export type GetProgressStatsApiV2ProgressStatsGetQueryError = HTTPValidationErrorType


export function useGetProgressStatsApiV2ProgressStatsGet<TData = Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetProgressStatsApiV2ProgressStatsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressStatsApiV2ProgressStatsGet<TData = Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>, TError = HTTPValidationErrorType>(
 params?: GetProgressStatsApiV2ProgressStatsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressStatsApiV2ProgressStatsGet<TData = Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>, TError = HTTPValidationErrorType>(
 params?: GetProgressStatsApiV2ProgressStatsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */

export function useGetProgressStatsApiV2ProgressStatsGet<TData = Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>, TError = HTTPValidationErrorType>(
 params?: GetProgressStatsApiV2ProgressStatsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressStatsApiV2ProgressStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressStatsApiV2ProgressStatsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
 * @summary –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
export const getProgressAnalyticsApiV2ProgressAnalyticsGet = (
    params?: GetProgressAnalyticsApiV2ProgressAnalyticsGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<ProgressAnalyticsResponseType>(
      {url: `/api/v2/progress/analytics`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetProgressAnalyticsApiV2ProgressAnalyticsGetQueryKey = (params?: GetProgressAnalyticsApiV2ProgressAnalyticsGetParams,) => {
    return [`/api/v2/progress/analytics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProgressAnalyticsApiV2ProgressAnalyticsGetQueryOptions = <TData = Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError = HTTPValidationErrorType>(params?: GetProgressAnalyticsApiV2ProgressAnalyticsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressAnalyticsApiV2ProgressAnalyticsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>> = ({ signal }) => getProgressAnalyticsApiV2ProgressAnalyticsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressAnalyticsApiV2ProgressAnalyticsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>>
export type GetProgressAnalyticsApiV2ProgressAnalyticsGetQueryError = HTTPValidationErrorType


export function useGetProgressAnalyticsApiV2ProgressAnalyticsGet<TData = Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetProgressAnalyticsApiV2ProgressAnalyticsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>,
          TError,
          Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressAnalyticsApiV2ProgressAnalyticsGet<TData = Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError = HTTPValidationErrorType>(
 params?: GetProgressAnalyticsApiV2ProgressAnalyticsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>,
          TError,
          Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressAnalyticsApiV2ProgressAnalyticsGet<TData = Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError = HTTPValidationErrorType>(
 params?: GetProgressAnalyticsApiV2ProgressAnalyticsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */

export function useGetProgressAnalyticsApiV2ProgressAnalyticsGet<TData = Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError = HTTPValidationErrorType>(
 params?: GetProgressAnalyticsApiV2ProgressAnalyticsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiV2ProgressAnalyticsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressAnalyticsApiV2ProgressAnalyticsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @summary –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 */
export const getRecentActivityApiV2ProgressActivityGet = (
    params?: GetRecentActivityApiV2ProgressActivityGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<RecentActivityResponseType[]>(
      {url: `/api/v2/progress/activity`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRecentActivityApiV2ProgressActivityGetQueryKey = (params?: GetRecentActivityApiV2ProgressActivityGetParams,) => {
    return [`/api/v2/progress/activity`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRecentActivityApiV2ProgressActivityGetQueryOptions = <TData = Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>, TError = HTTPValidationErrorType>(params?: GetRecentActivityApiV2ProgressActivityGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRecentActivityApiV2ProgressActivityGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>> = ({ signal }) => getRecentActivityApiV2ProgressActivityGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRecentActivityApiV2ProgressActivityGetQueryResult = NonNullable<Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>>
export type GetRecentActivityApiV2ProgressActivityGetQueryError = HTTPValidationErrorType


export function useGetRecentActivityApiV2ProgressActivityGet<TData = Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetRecentActivityApiV2ProgressActivityGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>,
          TError,
          Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRecentActivityApiV2ProgressActivityGet<TData = Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>, TError = HTTPValidationErrorType>(
 params?: GetRecentActivityApiV2ProgressActivityGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>,
          TError,
          Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRecentActivityApiV2ProgressActivityGet<TData = Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>, TError = HTTPValidationErrorType>(
 params?: GetRecentActivityApiV2ProgressActivityGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 */

export function useGetRecentActivityApiV2ProgressActivityGet<TData = Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>, TError = HTTPValidationErrorType>(
 params?: GetRecentActivityApiV2ProgressActivityGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecentActivityApiV2ProgressActivityGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRecentActivityApiV2ProgressActivityGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
 * @summary –°–≤–æ–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)
 */
export const getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<UserProgressSummaryResponseType>(
      {url: `/api/v2/progress/admin/users/${userId}/summary`, method: 'GET', signal
    },
      );
    }
  

export const getGetAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGetQueryKey = (userId?: number,) => {
    return [`/api/v2/progress/admin/users/${userId}/summary`] as const;
    }

    
export const getGetAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>, TError = HTTPValidationErrorType>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGetQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>> = ({ signal }) => getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>>
export type GetAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGetQueryError = HTTPValidationErrorType


export function useGetAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet<TData = Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>, TError = HTTPValidationErrorType>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet<TData = Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>, TError = HTTPValidationErrorType>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet<TData = Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>, TError = HTTPValidationErrorType>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –°–≤–æ–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)
 */

export function useGetAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet<TData = Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>, TError = HTTPValidationErrorType>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminUserProgressSummaryApiV2ProgressAdminUsersUserIdSummaryGetQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
 * @summary –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)
 */
export const getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<UserDetailedProgressResponseType>(
      {url: `/api/v2/progress/admin/users/${userId}/detailed`, method: 'GET', signal
    },
      );
    }
  

export const getGetAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGetQueryKey = (userId?: number,) => {
    return [`/api/v2/progress/admin/users/${userId}/detailed`] as const;
    }

    
export const getGetAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>, TError = HTTPValidationErrorType>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGetQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>> = ({ signal }) => getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>>
export type GetAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGetQueryError = HTTPValidationErrorType


export function useGetAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet<TData = Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>, TError = HTTPValidationErrorType>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet<TData = Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>, TError = HTTPValidationErrorType>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet<TData = Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>, TError = HTTPValidationErrorType>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)
 */

export function useGetAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet<TData = Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>, TError = HTTPValidationErrorType>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminUserDetailedProgressApiV2ProgressAdminUsersUserIdDetailedGetQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
 * @summary –í—Å—è –Ω–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∞–¥–º–∏–Ω)
 */
export const getAllRecentActivityApiV2ProgressAdminActivityAllGet = (
    params?: GetAllRecentActivityApiV2ProgressAdminActivityAllGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<RecentActivityResponseType[]>(
      {url: `/api/v2/progress/admin/activity/all`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAllRecentActivityApiV2ProgressAdminActivityAllGetQueryKey = (params?: GetAllRecentActivityApiV2ProgressAdminActivityAllGetParams,) => {
    return [`/api/v2/progress/admin/activity/all`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllRecentActivityApiV2ProgressAdminActivityAllGetQueryOptions = <TData = Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>, TError = HTTPValidationErrorType>(params?: GetAllRecentActivityApiV2ProgressAdminActivityAllGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllRecentActivityApiV2ProgressAdminActivityAllGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>> = ({ signal }) => getAllRecentActivityApiV2ProgressAdminActivityAllGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllRecentActivityApiV2ProgressAdminActivityAllGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>>
export type GetAllRecentActivityApiV2ProgressAdminActivityAllGetQueryError = HTTPValidationErrorType


export function useGetAllRecentActivityApiV2ProgressAdminActivityAllGet<TData = Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetAllRecentActivityApiV2ProgressAdminActivityAllGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>,
          TError,
          Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllRecentActivityApiV2ProgressAdminActivityAllGet<TData = Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>, TError = HTTPValidationErrorType>(
 params?: GetAllRecentActivityApiV2ProgressAdminActivityAllGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>,
          TError,
          Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllRecentActivityApiV2ProgressAdminActivityAllGet<TData = Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>, TError = HTTPValidationErrorType>(
 params?: GetAllRecentActivityApiV2ProgressAdminActivityAllGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –í—Å—è –Ω–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∞–¥–º–∏–Ω)
 */

export function useGetAllRecentActivityApiV2ProgressAdminActivityAllGet<TData = Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>, TError = HTTPValidationErrorType>(
 params?: GetAllRecentActivityApiV2ProgressAdminActivityAllGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRecentActivityApiV2ProgressAdminActivityAllGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllRecentActivityApiV2ProgressAdminActivityAllGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
 * @summary Get Supported Languages
 */
export const getSupportedLanguagesApiV2CodeEditorLanguagesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<SupportedLanguageResponseType[]>(
      {url: `/api/v2/code-editor/languages`, method: 'GET', signal
    },
      );
    }
  

export const getGetSupportedLanguagesApiV2CodeEditorLanguagesGetQueryKey = () => {
    return [`/api/v2/code-editor/languages`] as const;
    }

    
export const getGetSupportedLanguagesApiV2CodeEditorLanguagesGetQueryOptions = <TData = Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSupportedLanguagesApiV2CodeEditorLanguagesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>> = ({ signal }) => getSupportedLanguagesApiV2CodeEditorLanguagesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSupportedLanguagesApiV2CodeEditorLanguagesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>>
export type GetSupportedLanguagesApiV2CodeEditorLanguagesGetQueryError = unknown


export function useGetSupportedLanguagesApiV2CodeEditorLanguagesGet<TData = Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>,
          TError,
          Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSupportedLanguagesApiV2CodeEditorLanguagesGet<TData = Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>,
          TError,
          Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSupportedLanguagesApiV2CodeEditorLanguagesGet<TData = Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Supported Languages
 */

export function useGetSupportedLanguagesApiV2CodeEditorLanguagesGet<TData = Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiV2CodeEditorLanguagesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSupportedLanguagesApiV2CodeEditorLanguagesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ
 * @summary Execute Code
 */
export const executeCodeApiV2CodeEditorExecutePost = (
    codeExecutionRequestType: CodeExecutionRequestType,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<CodeExecutionResponseType>(
      {url: `/api/v2/code-editor/execute`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: codeExecutionRequestType, signal
    },
      );
    }
  


export const getExecuteCodeApiV2CodeEditorExecutePostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof executeCodeApiV2CodeEditorExecutePost>>, TError,{data: CodeExecutionRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof executeCodeApiV2CodeEditorExecutePost>>, TError,{data: CodeExecutionRequestType}, TContext> => {

const mutationKey = ['executeCodeApiV2CodeEditorExecutePost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof executeCodeApiV2CodeEditorExecutePost>>, {data: CodeExecutionRequestType}> = (props) => {
          const {data} = props ?? {};

          return  executeCodeApiV2CodeEditorExecutePost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ExecuteCodeApiV2CodeEditorExecutePostMutationResult = NonNullable<Awaited<ReturnType<typeof executeCodeApiV2CodeEditorExecutePost>>>
    export type ExecuteCodeApiV2CodeEditorExecutePostMutationBody = CodeExecutionRequestType
    export type ExecuteCodeApiV2CodeEditorExecutePostMutationError = HTTPValidationErrorType

    /**
 * @summary Execute Code
 */
export const useExecuteCodeApiV2CodeEditorExecutePost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof executeCodeApiV2CodeEditorExecutePost>>, TError,{data: CodeExecutionRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof executeCodeApiV2CodeEditorExecutePost>>,
        TError,
        {data: CodeExecutionRequestType},
        TContext
      > => {

      const mutationOptions = getExecuteCodeApiV2CodeEditorExecutePostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 * @summary Get Execution Result
 */
export const getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet = (
    executionId: string,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<CodeExecutionResponseType>(
      {url: `/api/v2/code-editor/executions/${executionId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGetQueryKey = (executionId?: string,) => {
    return [`/api/v2/code-editor/executions/${executionId}`] as const;
    }

    
export const getGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGetQueryKey(executionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>> = ({ signal }) => getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet(executionId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(executionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExecutionResultApiV2CodeEditorExecutionsExecutionIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>>
export type GetExecutionResultApiV2CodeEditorExecutionsExecutionIdGetQueryError = HTTPValidationErrorType


export function useGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGet<TData = Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(
 executionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>,
          TError,
          Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGet<TData = Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(
 executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>,
          TError,
          Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGet<TData = Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(
 executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Execution Result
 */

export function useGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGet<TData = Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(
 executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiV2CodeEditorExecutionsExecutionIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetExecutionResultApiV2CodeEditorExecutionsExecutionIdGetQueryOptions(executionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Executions
 */
export const getUserExecutionsApiV2CodeEditorExecutionsGet = (
    params?: GetUserExecutionsApiV2CodeEditorExecutionsGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<CodeExecutionResponseType[]>(
      {url: `/api/v2/code-editor/executions`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserExecutionsApiV2CodeEditorExecutionsGetQueryKey = (params?: GetUserExecutionsApiV2CodeEditorExecutionsGetParams,) => {
    return [`/api/v2/code-editor/executions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserExecutionsApiV2CodeEditorExecutionsGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(params?: GetUserExecutionsApiV2CodeEditorExecutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserExecutionsApiV2CodeEditorExecutionsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>> = ({ signal }) => getUserExecutionsApiV2CodeEditorExecutionsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserExecutionsApiV2CodeEditorExecutionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>>
export type GetUserExecutionsApiV2CodeEditorExecutionsGetQueryError = HTTPValidationErrorType


export function useGetUserExecutionsApiV2CodeEditorExecutionsGet<TData = Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetUserExecutionsApiV2CodeEditorExecutionsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserExecutionsApiV2CodeEditorExecutionsGet<TData = Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserExecutionsApiV2CodeEditorExecutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserExecutionsApiV2CodeEditorExecutionsGet<TData = Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserExecutionsApiV2CodeEditorExecutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Executions
 */

export function useGetUserExecutionsApiV2CodeEditorExecutionsGet<TData = Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserExecutionsApiV2CodeEditorExecutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiV2CodeEditorExecutionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserExecutionsApiV2CodeEditorExecutionsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Save Solution
 */
export const saveSolutionApiV2CodeEditorSolutionsPost = (
    userCodeSolutionCreateRequestType: UserCodeSolutionCreateRequestType,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<UserCodeSolutionResponseType>(
      {url: `/api/v2/code-editor/solutions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCodeSolutionCreateRequestType, signal
    },
      );
    }
  


export const getSaveSolutionApiV2CodeEditorSolutionsPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveSolutionApiV2CodeEditorSolutionsPost>>, TError,{data: UserCodeSolutionCreateRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof saveSolutionApiV2CodeEditorSolutionsPost>>, TError,{data: UserCodeSolutionCreateRequestType}, TContext> => {

const mutationKey = ['saveSolutionApiV2CodeEditorSolutionsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveSolutionApiV2CodeEditorSolutionsPost>>, {data: UserCodeSolutionCreateRequestType}> = (props) => {
          const {data} = props ?? {};

          return  saveSolutionApiV2CodeEditorSolutionsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SaveSolutionApiV2CodeEditorSolutionsPostMutationResult = NonNullable<Awaited<ReturnType<typeof saveSolutionApiV2CodeEditorSolutionsPost>>>
    export type SaveSolutionApiV2CodeEditorSolutionsPostMutationBody = UserCodeSolutionCreateRequestType
    export type SaveSolutionApiV2CodeEditorSolutionsPostMutationError = HTTPValidationErrorType

    /**
 * @summary Save Solution
 */
export const useSaveSolutionApiV2CodeEditorSolutionsPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveSolutionApiV2CodeEditorSolutionsPost>>, TError,{data: UserCodeSolutionCreateRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof saveSolutionApiV2CodeEditorSolutionsPost>>,
        TError,
        {data: UserCodeSolutionCreateRequestType},
        TContext
      > => {

      const mutationOptions = getSaveSolutionApiV2CodeEditorSolutionsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∞
 * @summary Get Block Solutions
 */
export const getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet = (
    blockId: string,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<UserCodeSolutionResponseType[]>(
      {url: `/api/v2/code-editor/solutions/${blockId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGetQueryKey = (blockId?: string,) => {
    return [`/api/v2/code-editor/solutions/${blockId}`] as const;
    }

    
export const getGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGetQueryKey(blockId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>> = ({ signal }) => getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet(blockId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(blockId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>>
export type GetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGetQueryError = HTTPValidationErrorType


export function useGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet<TData = Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet<TData = Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet<TData = Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Block Solutions
 */

export function useGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet<TData = Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiV2CodeEditorSolutionsBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBlockSolutionsApiV2CodeEditorSolutionsBlockIdGetQueryOptions(blockId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Update Solution
 */
export const updateSolutionApiV2CodeEditorSolutionsSolutionIdPut = (
    solutionId: string,
    userCodeSolutionUpdateRequestType: UserCodeSolutionUpdateRequestType,
 ) => {
      
      
      return generatedApiClient<UserCodeSolutionResponseType>(
      {url: `/api/v2/code-editor/solutions/${solutionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userCodeSolutionUpdateRequestType
    },
      );
    }
  


export const getUpdateSolutionApiV2CodeEditorSolutionsSolutionIdPutMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSolutionApiV2CodeEditorSolutionsSolutionIdPut>>, TError,{solutionId: string;data: UserCodeSolutionUpdateRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateSolutionApiV2CodeEditorSolutionsSolutionIdPut>>, TError,{solutionId: string;data: UserCodeSolutionUpdateRequestType}, TContext> => {

const mutationKey = ['updateSolutionApiV2CodeEditorSolutionsSolutionIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSolutionApiV2CodeEditorSolutionsSolutionIdPut>>, {solutionId: string;data: UserCodeSolutionUpdateRequestType}> = (props) => {
          const {solutionId,data} = props ?? {};

          return  updateSolutionApiV2CodeEditorSolutionsSolutionIdPut(solutionId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateSolutionApiV2CodeEditorSolutionsSolutionIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateSolutionApiV2CodeEditorSolutionsSolutionIdPut>>>
    export type UpdateSolutionApiV2CodeEditorSolutionsSolutionIdPutMutationBody = UserCodeSolutionUpdateRequestType
    export type UpdateSolutionApiV2CodeEditorSolutionsSolutionIdPutMutationError = HTTPValidationErrorType

    /**
 * @summary Update Solution
 */
export const useUpdateSolutionApiV2CodeEditorSolutionsSolutionIdPut = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSolutionApiV2CodeEditorSolutionsSolutionIdPut>>, TError,{solutionId: string;data: UserCodeSolutionUpdateRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateSolutionApiV2CodeEditorSolutionsSolutionIdPut>>,
        TError,
        {solutionId: string;data: UserCodeSolutionUpdateRequestType},
        TContext
      > => {

      const mutationOptions = getUpdateSolutionApiV2CodeEditorSolutionsSolutionIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get Execution Stats
 */
export const getExecutionStatsApiV2CodeEditorStatsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<ExecutionStatsResponseType>(
      {url: `/api/v2/code-editor/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetExecutionStatsApiV2CodeEditorStatsGetQueryKey = () => {
    return [`/api/v2/code-editor/stats`] as const;
    }

    
export const getGetExecutionStatsApiV2CodeEditorStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExecutionStatsApiV2CodeEditorStatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>> = ({ signal }) => getExecutionStatsApiV2CodeEditorStatsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExecutionStatsApiV2CodeEditorStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>>
export type GetExecutionStatsApiV2CodeEditorStatsGetQueryError = unknown


export function useGetExecutionStatsApiV2CodeEditorStatsGet<TData = Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExecutionStatsApiV2CodeEditorStatsGet<TData = Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExecutionStatsApiV2CodeEditorStatsGet<TData = Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Execution Stats
 */

export function useGetExecutionStatsApiV2CodeEditorStatsGet<TData = Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiV2CodeEditorStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetExecutionStatsApiV2CodeEditorStatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –¥–ª—è –±–ª–æ–∫–∞
 * @summary Get Test Cases
 */
export const getTestCasesApiV2CodeEditorTestCasesBlockIdGet = (
    blockId: string,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<TestCasesResponseType>(
      {url: `/api/v2/code-editor/test_cases/${blockId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTestCasesApiV2CodeEditorTestCasesBlockIdGetQueryKey = (blockId?: string,) => {
    return [`/api/v2/code-editor/test_cases/${blockId}`] as const;
    }

    
export const getGetTestCasesApiV2CodeEditorTestCasesBlockIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError = HTTPValidationErrorType>(blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTestCasesApiV2CodeEditorTestCasesBlockIdGetQueryKey(blockId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>> = ({ signal }) => getTestCasesApiV2CodeEditorTestCasesBlockIdGet(blockId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(blockId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTestCasesApiV2CodeEditorTestCasesBlockIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>>
export type GetTestCasesApiV2CodeEditorTestCasesBlockIdGetQueryError = HTTPValidationErrorType


export function useGetTestCasesApiV2CodeEditorTestCasesBlockIdGet<TData = Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTestCasesApiV2CodeEditorTestCasesBlockIdGet<TData = Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTestCasesApiV2CodeEditorTestCasesBlockIdGet<TData = Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Test Cases
 */

export function useGetTestCasesApiV2CodeEditorTestCasesBlockIdGet<TData = Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTestCasesApiV2CodeEditorTestCasesBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTestCasesApiV2CodeEditorTestCasesBlockIdGetQueryOptions(blockId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤
 * @summary Validate Solution
 */
export const validateSolutionApiV2CodeEditorValidateBlockIdPost = (
    blockId: string,
    validationRequestType: ValidationRequestType,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<ValidationResultResponseType>(
      {url: `/api/v2/code-editor/validate/${blockId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: validationRequestType, signal
    },
      );
    }
  


export const getValidateSolutionApiV2CodeEditorValidateBlockIdPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validateSolutionApiV2CodeEditorValidateBlockIdPost>>, TError,{blockId: string;data: ValidationRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof validateSolutionApiV2CodeEditorValidateBlockIdPost>>, TError,{blockId: string;data: ValidationRequestType}, TContext> => {

const mutationKey = ['validateSolutionApiV2CodeEditorValidateBlockIdPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof validateSolutionApiV2CodeEditorValidateBlockIdPost>>, {blockId: string;data: ValidationRequestType}> = (props) => {
          const {blockId,data} = props ?? {};

          return  validateSolutionApiV2CodeEditorValidateBlockIdPost(blockId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ValidateSolutionApiV2CodeEditorValidateBlockIdPostMutationResult = NonNullable<Awaited<ReturnType<typeof validateSolutionApiV2CodeEditorValidateBlockIdPost>>>
    export type ValidateSolutionApiV2CodeEditorValidateBlockIdPostMutationBody = ValidationRequestType
    export type ValidateSolutionApiV2CodeEditorValidateBlockIdPostMutationError = HTTPValidationErrorType

    /**
 * @summary Validate Solution
 */
export const useValidateSolutionApiV2CodeEditorValidateBlockIdPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validateSolutionApiV2CodeEditorValidateBlockIdPost>>, TError,{blockId: string;data: ValidationRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof validateSolutionApiV2CodeEditorValidateBlockIdPost>>,
        TError,
        {blockId: string;data: ValidationRequestType},
        TContext
      > => {

      const mutationOptions = getValidateSolutionApiV2CodeEditorValidateBlockIdPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–¥–∞
 * @summary Health Check
 */
export const healthCheckApiV2CodeEditorHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AppFeaturesCodeEditorDtoResponsesHealthResponseType>(
      {url: `/api/v2/code-editor/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckApiV2CodeEditorHealthGetQueryKey = () => {
    return [`/api/v2/code-editor/health`] as const;
    }

    
export const getHealthCheckApiV2CodeEditorHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckApiV2CodeEditorHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>> = ({ signal }) => healthCheckApiV2CodeEditorHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckApiV2CodeEditorHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>>
export type HealthCheckApiV2CodeEditorHealthGetQueryError = unknown


export function useHealthCheckApiV2CodeEditorHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2CodeEditorHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2CodeEditorHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckApiV2CodeEditorHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2CodeEditorHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckApiV2CodeEditorHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Stats Overview
 */
export const getUserStatsOverviewApiV2StatsStatsOverviewGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<UserStatsOverviewResponseType>(
      {url: `/api/v2/stats/stats/overview`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserStatsOverviewApiV2StatsStatsOverviewGetQueryKey = () => {
    return [`/api/v2/stats/stats/overview`] as const;
    }

    
export const getGetUserStatsOverviewApiV2StatsStatsOverviewGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserStatsOverviewApiV2StatsStatsOverviewGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>> = ({ signal }) => getUserStatsOverviewApiV2StatsStatsOverviewGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserStatsOverviewApiV2StatsStatsOverviewGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>>
export type GetUserStatsOverviewApiV2StatsStatsOverviewGetQueryError = unknown


export function useGetUserStatsOverviewApiV2StatsStatsOverviewGet<TData = Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>,
          TError,
          Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserStatsOverviewApiV2StatsStatsOverviewGet<TData = Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>,
          TError,
          Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserStatsOverviewApiV2StatsStatsOverviewGet<TData = Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Stats Overview
 */

export function useGetUserStatsOverviewApiV2StatsStatsOverviewGet<TData = Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiV2StatsStatsOverviewGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserStatsOverviewApiV2StatsStatsOverviewGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
 * @summary Get Content Stats
 */
export const getContentStatsApiV2StatsStatsContentGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<ContentStatsResponseType>(
      {url: `/api/v2/stats/stats/content`, method: 'GET', signal
    },
      );
    }
  

export const getGetContentStatsApiV2StatsStatsContentGetQueryKey = () => {
    return [`/api/v2/stats/stats/content`] as const;
    }

    
export const getGetContentStatsApiV2StatsStatsContentGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentStatsApiV2StatsStatsContentGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>> = ({ signal }) => getContentStatsApiV2StatsStatsContentGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentStatsApiV2StatsStatsContentGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>>
export type GetContentStatsApiV2StatsStatsContentGetQueryError = unknown


export function useGetContentStatsApiV2StatsStatsContentGet<TData = Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>,
          TError,
          Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentStatsApiV2StatsStatsContentGet<TData = Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>,
          TError,
          Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentStatsApiV2StatsStatsContentGet<TData = Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Stats
 */

export function useGetContentStatsApiV2StatsStatsContentGet<TData = Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiV2StatsStatsContentGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentStatsApiV2StatsStatsContentGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–æ—Ä–∏–∏
 * @summary Get Theory Stats
 */
export const getTheoryStatsApiV2StatsStatsTheoryGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AppFeaturesStatsDtoResponsesTheoryStatsResponseType>(
      {url: `/api/v2/stats/stats/theory`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryStatsApiV2StatsStatsTheoryGetQueryKey = () => {
    return [`/api/v2/stats/stats/theory`] as const;
    }

    
export const getGetTheoryStatsApiV2StatsStatsTheoryGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryStatsApiV2StatsStatsTheoryGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>> = ({ signal }) => getTheoryStatsApiV2StatsStatsTheoryGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryStatsApiV2StatsStatsTheoryGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>>
export type GetTheoryStatsApiV2StatsStatsTheoryGetQueryError = unknown


export function useGetTheoryStatsApiV2StatsStatsTheoryGet<TData = Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryStatsApiV2StatsStatsTheoryGet<TData = Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryStatsApiV2StatsStatsTheoryGet<TData = Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Stats
 */

export function useGetTheoryStatsApiV2StatsStatsTheoryGet<TData = Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiV2StatsStatsTheoryGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryStatsApiV2StatsStatsTheoryGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ roadmap —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 * @summary Get Roadmap Stats
 */
export const getRoadmapStatsApiV2StatsStatsRoadmapGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<RoadmapStatsResponseType>(
      {url: `/api/v2/stats/stats/roadmap`, method: 'GET', signal
    },
      );
    }
  

export const getGetRoadmapStatsApiV2StatsStatsRoadmapGetQueryKey = () => {
    return [`/api/v2/stats/stats/roadmap`] as const;
    }

    
export const getGetRoadmapStatsApiV2StatsStatsRoadmapGetQueryOptions = <TData = Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoadmapStatsApiV2StatsStatsRoadmapGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>> = ({ signal }) => getRoadmapStatsApiV2StatsStatsRoadmapGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRoadmapStatsApiV2StatsStatsRoadmapGetQueryResult = NonNullable<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>>
export type GetRoadmapStatsApiV2StatsStatsRoadmapGetQueryError = unknown


export function useGetRoadmapStatsApiV2StatsStatsRoadmapGet<TData = Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>,
          TError,
          Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoadmapStatsApiV2StatsStatsRoadmapGet<TData = Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>,
          TError,
          Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoadmapStatsApiV2StatsStatsRoadmapGet<TData = Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Roadmap Stats
 */

export function useGetRoadmapStatsApiV2StatsStatsRoadmapGet<TData = Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiV2StatsStatsRoadmapGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRoadmapStatsApiV2StatsStatsRoadmapGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Stats API
 * @summary Health Check
 */
export const healthCheckApiV2StatsStatsHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<StatsHealthResponseType>(
      {url: `/api/v2/stats/stats/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckApiV2StatsStatsHealthGetQueryKey = () => {
    return [`/api/v2/stats/stats/health`] as const;
    }

    
export const getHealthCheckApiV2StatsStatsHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckApiV2StatsStatsHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>> = ({ signal }) => healthCheckApiV2StatsStatsHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckApiV2StatsStatsHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>>
export type HealthCheckApiV2StatsStatsHealthGetQueryError = unknown


export function useHealthCheckApiV2StatsStatsHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2StatsStatsHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2StatsStatsHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckApiV2StatsStatsHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2StatsStatsHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckApiV2StatsStatsHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Progress Summary
 */
export const getUserProgressSummaryApiV2StatsStatsSummaryGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/api/v2/stats/stats/summary`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserProgressSummaryApiV2StatsStatsSummaryGetQueryKey = () => {
    return [`/api/v2/stats/stats/summary`] as const;
    }

    
export const getGetUserProgressSummaryApiV2StatsStatsSummaryGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserProgressSummaryApiV2StatsStatsSummaryGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>> = ({ signal }) => getUserProgressSummaryApiV2StatsStatsSummaryGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserProgressSummaryApiV2StatsStatsSummaryGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>>
export type GetUserProgressSummaryApiV2StatsStatsSummaryGetQueryError = unknown


export function useGetUserProgressSummaryApiV2StatsStatsSummaryGet<TData = Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>,
          TError,
          Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserProgressSummaryApiV2StatsStatsSummaryGet<TData = Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>,
          TError,
          Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserProgressSummaryApiV2StatsStatsSummaryGet<TData = Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Progress Summary
 */

export function useGetUserProgressSummaryApiV2StatsStatsSummaryGet<TData = Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProgressSummaryApiV2StatsStatsSummaryGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserProgressSummaryApiV2StatsStatsSummaryGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 * @summary Get Category Comparison
 */
export const getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/api/v2/stats/stats/categories/comparison`, method: 'GET', signal
    },
      );
    }
  

export const getGetCategoryComparisonApiV2StatsStatsCategoriesComparisonGetQueryKey = () => {
    return [`/api/v2/stats/stats/categories/comparison`] as const;
    }

    
export const getGetCategoryComparisonApiV2StatsStatsCategoriesComparisonGetQueryOptions = <TData = Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoryComparisonApiV2StatsStatsCategoriesComparisonGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>> = ({ signal }) => getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCategoryComparisonApiV2StatsStatsCategoriesComparisonGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>>
export type GetCategoryComparisonApiV2StatsStatsCategoriesComparisonGetQueryError = unknown


export function useGetCategoryComparisonApiV2StatsStatsCategoriesComparisonGet<TData = Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>,
          TError,
          Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoryComparisonApiV2StatsStatsCategoriesComparisonGet<TData = Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>,
          TError,
          Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoryComparisonApiV2StatsStatsCategoriesComparisonGet<TData = Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Category Comparison
 */

export function useGetCategoryComparisonApiV2StatsStatsCategoriesComparisonGet<TData = Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryComparisonApiV2StatsStatsCategoriesComparisonGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCategoryComparisonApiV2StatsStatsCategoriesComparisonGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è mindmap
 * @summary Generate Mindmap
 */
export const generateMindmapApiV2MindmapGenerateGet = (
    params?: GenerateMindmapApiV2MindmapGenerateGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<MindMapResponseType>(
      {url: `/api/v2/mindmap/generate`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGenerateMindmapApiV2MindmapGenerateGetQueryKey = (params?: GenerateMindmapApiV2MindmapGenerateGetParams,) => {
    return [`/api/v2/mindmap/generate`, ...(params ? [params]: [])] as const;
    }

    
export const getGenerateMindmapApiV2MindmapGenerateGetQueryOptions = <TData = Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError = HTTPValidationErrorType>(params?: GenerateMindmapApiV2MindmapGenerateGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGenerateMindmapApiV2MindmapGenerateGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>> = ({ signal }) => generateMindmapApiV2MindmapGenerateGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GenerateMindmapApiV2MindmapGenerateGetQueryResult = NonNullable<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>>
export type GenerateMindmapApiV2MindmapGenerateGetQueryError = HTTPValidationErrorType


export function useGenerateMindmapApiV2MindmapGenerateGet<TData = Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GenerateMindmapApiV2MindmapGenerateGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>,
          TError,
          Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGenerateMindmapApiV2MindmapGenerateGet<TData = Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError = HTTPValidationErrorType>(
 params?: GenerateMindmapApiV2MindmapGenerateGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>,
          TError,
          Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGenerateMindmapApiV2MindmapGenerateGet<TData = Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError = HTTPValidationErrorType>(
 params?: GenerateMindmapApiV2MindmapGenerateGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Generate Mindmap
 */

export function useGenerateMindmapApiV2MindmapGenerateGet<TData = Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError = HTTPValidationErrorType>(
 params?: GenerateMindmapApiV2MindmapGenerateGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiV2MindmapGenerateGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGenerateMindmapApiV2MindmapGenerateGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
 * @summary Get Available Technologies
 */
export const getAvailableTechnologiesApiV2MindmapTechnologiesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<TechnologiesResponseType>(
      {url: `/api/v2/mindmap/technologies`, method: 'GET', signal
    },
      );
    }
  

export const getGetAvailableTechnologiesApiV2MindmapTechnologiesGetQueryKey = () => {
    return [`/api/v2/mindmap/technologies`] as const;
    }

    
export const getGetAvailableTechnologiesApiV2MindmapTechnologiesGetQueryOptions = <TData = Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAvailableTechnologiesApiV2MindmapTechnologiesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>> = ({ signal }) => getAvailableTechnologiesApiV2MindmapTechnologiesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAvailableTechnologiesApiV2MindmapTechnologiesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>>
export type GetAvailableTechnologiesApiV2MindmapTechnologiesGetQueryError = unknown


export function useGetAvailableTechnologiesApiV2MindmapTechnologiesGet<TData = Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>,
          TError,
          Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableTechnologiesApiV2MindmapTechnologiesGet<TData = Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>,
          TError,
          Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableTechnologiesApiV2MindmapTechnologiesGet<TData = Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Available Technologies
 */

export function useGetAvailableTechnologiesApiV2MindmapTechnologiesGet<TData = Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTechnologiesApiV2MindmapTechnologiesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAvailableTechnologiesApiV2MindmapTechnologiesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–µ
 * @summary Get Topic Tasks
 */
export const getTopicTasksApiV2MindmapTopicTopicKeyTasksGet = (
    topicKey: string,
    params?: GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<TopicTasksResponseType>(
      {url: `/api/v2/mindmap/topic/${topicKey}/tasks`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTopicTasksApiV2MindmapTopicTopicKeyTasksGetQueryKey = (topicKey?: string,
    params?: GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams,) => {
    return [`/api/v2/mindmap/topic/${topicKey}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTopicTasksApiV2MindmapTopicTopicKeyTasksGetQueryOptions = <TData = Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(topicKey: string,
    params?: GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTopicTasksApiV2MindmapTopicTopicKeyTasksGetQueryKey(topicKey,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>> = ({ signal }) => getTopicTasksApiV2MindmapTopicTopicKeyTasksGet(topicKey,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(topicKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>>
export type GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetQueryError = HTTPValidationErrorType


export function useGetTopicTasksApiV2MindmapTopicTopicKeyTasksGet<TData = Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(
 topicKey: string,
    params: undefined |  GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>,
          TError,
          Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopicTasksApiV2MindmapTopicTopicKeyTasksGet<TData = Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(
 topicKey: string,
    params?: GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>,
          TError,
          Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopicTasksApiV2MindmapTopicTopicKeyTasksGet<TData = Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(
 topicKey: string,
    params?: GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Topic Tasks
 */

export function useGetTopicTasksApiV2MindmapTopicTopicKeyTasksGet<TData = Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(
 topicKey: string,
    params?: GetTopicTasksApiV2MindmapTopicTopicKeyTasksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiV2MindmapTopicTopicKeyTasksGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTopicTasksApiV2MindmapTopicTopicKeyTasksGetQueryOptions(topicKey,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
 * @summary Get Task Detail
 */
export const getTaskDetailApiV2MindmapTaskTaskIdGet = (
    taskId: string,
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<TaskDetailResponseWrapperType>(
      {url: `/api/v2/mindmap/task/${taskId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTaskDetailApiV2MindmapTaskTaskIdGetQueryKey = (taskId?: string,) => {
    return [`/api/v2/mindmap/task/${taskId}`] as const;
    }

    
export const getGetTaskDetailApiV2MindmapTaskTaskIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError = HTTPValidationErrorType>(taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTaskDetailApiV2MindmapTaskTaskIdGetQueryKey(taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>> = ({ signal }) => getTaskDetailApiV2MindmapTaskTaskIdGet(taskId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTaskDetailApiV2MindmapTaskTaskIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>>
export type GetTaskDetailApiV2MindmapTaskTaskIdGetQueryError = HTTPValidationErrorType


export function useGetTaskDetailApiV2MindmapTaskTaskIdGet<TData = Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskDetailApiV2MindmapTaskTaskIdGet<TData = Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskDetailApiV2MindmapTaskTaskIdGet<TData = Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Task Detail
 */

export function useGetTaskDetailApiV2MindmapTaskTaskIdGet<TData = Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError = HTTPValidationErrorType>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskDetailApiV2MindmapTaskTaskIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTaskDetailApiV2MindmapTaskTaskIdGetQueryOptions(taskId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª—è
 * @summary Health Check
 */
export const healthCheckApiV2MindmapHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<AppFeaturesMindmapDtoResponsesHealthResponseType>(
      {url: `/api/v2/mindmap/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckApiV2MindmapHealthGetQueryKey = () => {
    return [`/api/v2/mindmap/health`] as const;
    }

    
export const getHealthCheckApiV2MindmapHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckApiV2MindmapHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>> = ({ signal }) => healthCheckApiV2MindmapHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckApiV2MindmapHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>>
export type HealthCheckApiV2MindmapHealthGetQueryError = unknown


export function useHealthCheckApiV2MindmapHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2MindmapHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiV2MindmapHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckApiV2MindmapHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiV2MindmapHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckApiV2MindmapHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Debug endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á –ø–æ –∫–ª–∞—Å—Å–∞–º
 * @summary Debug Classes Tasks
 */
export const debugClassesTasksApiV2MindmapDebugClassesTasksGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/api/v2/mindmap/debug/classes-tasks`, method: 'GET', signal
    },
      );
    }
  

export const getDebugClassesTasksApiV2MindmapDebugClassesTasksGetQueryKey = () => {
    return [`/api/v2/mindmap/debug/classes-tasks`] as const;
    }

    
export const getDebugClassesTasksApiV2MindmapDebugClassesTasksGetQueryOptions = <TData = Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDebugClassesTasksApiV2MindmapDebugClassesTasksGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>> = ({ signal }) => debugClassesTasksApiV2MindmapDebugClassesTasksGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DebugClassesTasksApiV2MindmapDebugClassesTasksGetQueryResult = NonNullable<Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>>
export type DebugClassesTasksApiV2MindmapDebugClassesTasksGetQueryError = unknown


export function useDebugClassesTasksApiV2MindmapDebugClassesTasksGet<TData = Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>,
          TError,
          Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDebugClassesTasksApiV2MindmapDebugClassesTasksGet<TData = Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>,
          TError,
          Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDebugClassesTasksApiV2MindmapDebugClassesTasksGet<TData = Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Debug Classes Tasks
 */

export function useDebugClassesTasksApiV2MindmapDebugClassesTasksGet<TData = Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof debugClassesTasksApiV2MindmapDebugClassesTasksGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDebugClassesTasksApiV2MindmapDebugClassesTasksGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
 * @summary Test Db
 */
export const testDbApiV2MindmapTestDbGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/api/v2/mindmap/test-db`, method: 'GET', signal
    },
      );
    }
  

export const getTestDbApiV2MindmapTestDbGetQueryKey = () => {
    return [`/api/v2/mindmap/test-db`] as const;
    }

    
export const getTestDbApiV2MindmapTestDbGetQueryOptions = <TData = Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTestDbApiV2MindmapTestDbGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>> = ({ signal }) => testDbApiV2MindmapTestDbGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TestDbApiV2MindmapTestDbGetQueryResult = NonNullable<Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>>
export type TestDbApiV2MindmapTestDbGetQueryError = unknown


export function useTestDbApiV2MindmapTestDbGet<TData = Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>,
          TError,
          Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTestDbApiV2MindmapTestDbGet<TData = Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>,
          TError,
          Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTestDbApiV2MindmapTestDbGet<TData = Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Test Db
 */

export function useTestDbApiV2MindmapTestDbGet<TData = Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testDbApiV2MindmapTestDbGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTestDbApiV2MindmapTestDbGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
 * @summary Get Admin Stats
 */
export const getAdminStatsApiV2AdminStatsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/api/v2/admin/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetAdminStatsApiV2AdminStatsGetQueryKey = () => {
    return [`/api/v2/admin/stats`] as const;
    }

    
export const getGetAdminStatsApiV2AdminStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminStatsApiV2AdminStatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>> = ({ signal }) => getAdminStatsApiV2AdminStatsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminStatsApiV2AdminStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>>
export type GetAdminStatsApiV2AdminStatsGetQueryError = unknown


export function useGetAdminStatsApiV2AdminStatsGet<TData = Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminStatsApiV2AdminStatsGet<TData = Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminStatsApiV2AdminStatsGet<TData = Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin Stats
 */

export function useGetAdminStatsApiV2AdminStatsGet<TData = Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminStatsApiV2AdminStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminStatsApiV2AdminStatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Root
 */
export const rootGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  

export const getRootGetQueryKey = () => {
    return [`/`] as const;
    }

    
export const getRootGetQueryOptions = <TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRootGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rootGet>>> = ({ signal }) => rootGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RootGetQueryResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>
export type RootGetQueryError = unknown


export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Root
 */

export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRootGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Api Root
 */
export const apiRootApiGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/api/`, method: 'GET', signal
    },
      );
    }
  

export const getApiRootApiGetQueryKey = () => {
    return [`/api/`] as const;
    }

    
export const getApiRootApiGetQueryOptions = <TData = Awaited<ReturnType<typeof apiRootApiGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiRootApiGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiRootApiGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiRootApiGet>>> = ({ signal }) => apiRootApiGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiRootApiGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiRootApiGetQueryResult = NonNullable<Awaited<ReturnType<typeof apiRootApiGet>>>
export type ApiRootApiGetQueryError = unknown


export function useApiRootApiGet<TData = Awaited<ReturnType<typeof apiRootApiGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiRootApiGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiRootApiGet>>,
          TError,
          Awaited<ReturnType<typeof apiRootApiGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiRootApiGet<TData = Awaited<ReturnType<typeof apiRootApiGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiRootApiGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiRootApiGet>>,
          TError,
          Awaited<ReturnType<typeof apiRootApiGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiRootApiGet<TData = Awaited<ReturnType<typeof apiRootApiGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiRootApiGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Api Root
 */

export function useApiRootApiGet<TData = Awaited<ReturnType<typeof apiRootApiGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiRootApiGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiRootApiGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Redirect
 */
export const redirectRedirectGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/redirect`, method: 'GET', signal
    },
      );
    }
  

export const getRedirectRedirectGetQueryKey = () => {
    return [`/redirect`] as const;
    }

    
export const getRedirectRedirectGetQueryOptions = <TData = Awaited<ReturnType<typeof redirectRedirectGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof redirectRedirectGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRedirectRedirectGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof redirectRedirectGet>>> = ({ signal }) => redirectRedirectGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof redirectRedirectGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RedirectRedirectGetQueryResult = NonNullable<Awaited<ReturnType<typeof redirectRedirectGet>>>
export type RedirectRedirectGetQueryError = unknown


export function useRedirectRedirectGet<TData = Awaited<ReturnType<typeof redirectRedirectGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof redirectRedirectGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof redirectRedirectGet>>,
          TError,
          Awaited<ReturnType<typeof redirectRedirectGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRedirectRedirectGet<TData = Awaited<ReturnType<typeof redirectRedirectGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof redirectRedirectGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof redirectRedirectGet>>,
          TError,
          Awaited<ReturnType<typeof redirectRedirectGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRedirectRedirectGet<TData = Awaited<ReturnType<typeof redirectRedirectGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof redirectRedirectGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Redirect
 */

export function useRedirectRedirectGet<TData = Awaited<ReturnType<typeof redirectRedirectGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof redirectRedirectGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRedirectRedirectGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Top Companies Simple
 */
export const getTopCompaniesSimpleApiTestCompaniesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return generatedApiClient<unknown>(
      {url: `/api/test-companies`, method: 'GET', signal
    },
      );
    }
  

export const getGetTopCompaniesSimpleApiTestCompaniesGetQueryKey = () => {
    return [`/api/test-companies`] as const;
    }

    
export const getGetTopCompaniesSimpleApiTestCompaniesGetQueryOptions = <TData = Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTopCompaniesSimpleApiTestCompaniesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>> = ({ signal }) => getTopCompaniesSimpleApiTestCompaniesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTopCompaniesSimpleApiTestCompaniesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>>
export type GetTopCompaniesSimpleApiTestCompaniesGetQueryError = unknown


export function useGetTopCompaniesSimpleApiTestCompaniesGet<TData = Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>,
          TError,
          Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopCompaniesSimpleApiTestCompaniesGet<TData = Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>,
          TError,
          Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopCompaniesSimpleApiTestCompaniesGet<TData = Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Top Companies Simple
 */

export function useGetTopCompaniesSimpleApiTestCompaniesGet<TData = Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopCompaniesSimpleApiTestCompaniesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTopCompaniesSimpleApiTestCompaniesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
