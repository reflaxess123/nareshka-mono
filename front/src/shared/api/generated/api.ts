/**
 * /**
 *  * Generated by orval v.7.10.0 üçª
 *  * Do not edit manually.
 *  * Nareshka Learning Platform API
 *  * API –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
 *  *\/
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { apiClient } from '../base';
export interface BulkDeleteRequestType {
  ids: string[];
}

export type CategoryProgressSummaryTypeSubCategory = string | null;

export type CategoryProgressSummaryTypeLastActivity = string | null;

export interface CategoryProgressSummaryType {
  mainCategory: string;
  subCategory?: CategoryProgressSummaryTypeSubCategory;
  totalTasks: number;
  completedTasks: number;
  attemptedTasks: number;
  completionRate: number;
  averageAttempts: number;
  totalTimeSpent: number;
  lastActivity: CategoryProgressSummaryTypeLastActivity;
  status: string;
}

export type CodeExecutionRequestTypeStdin = string | null;

export type CodeExecutionRequestTypeBlockId = string | null;

export interface CodeExecutionRequestType {
  sourceCode: string;
  language: string;
  stdin?: CodeExecutionRequestTypeStdin;
  blockId?: CodeExecutionRequestTypeBlockId;
}

export type CodeExecutionResponseTypeUserId = number | null;

export type CodeExecutionResponseTypeBlockId = string | null;

export type CodeExecutionResponseTypeStdin = string | null;

export type CodeExecutionResponseTypeStdout = string | null;

export type CodeExecutionResponseTypeStderr = string | null;

export type CodeExecutionResponseTypeExitCode = number | null;

export type CodeExecutionResponseTypeExecutionTimeMs = number | null;

export type CodeExecutionResponseTypeMemoryUsedMB = number | null;

export type CodeExecutionResponseTypeContainerLogs = string | null;

export type CodeExecutionResponseTypeErrorMessage = string | null;

export type CodeExecutionResponseTypeCompletedAt = string | null;

export interface CodeExecutionResponseType {
  id: string;
  userId?: CodeExecutionResponseTypeUserId;
  blockId?: CodeExecutionResponseTypeBlockId;
  languageId: string;
  sourceCode: string;
  stdin?: CodeExecutionResponseTypeStdin;
  status: ExecutionStatusType;
  stdout?: CodeExecutionResponseTypeStdout;
  stderr?: CodeExecutionResponseTypeStderr;
  exitCode?: CodeExecutionResponseTypeExitCode;
  executionTimeMs?: CodeExecutionResponseTypeExecutionTimeMs;
  memoryUsedMB?: CodeExecutionResponseTypeMemoryUsedMB;
  containerLogs?: CodeExecutionResponseTypeContainerLogs;
  errorMessage?: CodeExecutionResponseTypeErrorMessage;
  createdAt: string;
  completedAt?: CodeExecutionResponseTypeCompletedAt;
}

export type CodeLanguageType = typeof CodeLanguageType[keyof typeof CodeLanguageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CodeLanguageType = {
  PYTHON: 'PYTHON',
  JAVASCRIPT: 'JAVASCRIPT',
  TYPESCRIPT: 'TYPESCRIPT',
  JAVA: 'JAVA',
  CPP: 'CPP',
  C: 'C',
  GO: 'GO',
  RUST: 'RUST',
  PHP: 'PHP',
  RUBY: 'RUBY',
} as const;

export type CreateContentBlockRequestTypeTextContent = string | null;

export type CreateContentBlockRequestTypeCodeContent = string | null;

export type CreateContentBlockRequestTypeCodeLanguage = string | null;

export type CreateContentBlockRequestTypeCodeFoldTitle = string | null;

export interface CreateContentBlockRequestType {
  fileId: string;
  pathTitles: unknown[];
  blockTitle: string;
  blockLevel: number;
  orderInFile: number;
  textContent?: CreateContentBlockRequestTypeTextContent;
  codeContent?: CreateContentBlockRequestTypeCodeContent;
  codeLanguage?: CreateContentBlockRequestTypeCodeLanguage;
  isCodeFoldable?: boolean;
  codeFoldTitle?: CreateContentBlockRequestTypeCodeFoldTitle;
  extractedUrls?: unknown[];
}

export interface CreateContentFileRequestType {
  webdavPath: string;
  mainCategory: string;
  subCategory: string;
}

export type CreateTheoryCardRequestTypeAnkiGuid = string | null;

export type CreateTheoryCardRequestTypeSubCategory = string | null;

export interface CreateTheoryCardRequestType {
  ankiGuid?: CreateTheoryCardRequestTypeAnkiGuid;
  cardType: string;
  deck: string;
  category: string;
  subCategory?: CreateTheoryCardRequestTypeSubCategory;
  questionBlock: string;
  answerBlock: string;
  tags?: unknown[];
  orderIndex?: number;
}

export interface CreateUserRequestType {
  email: string;
  password: string;
  role?: string;
}

export interface ExecutionStatsType {
  totalExecutions: number;
  successfulExecutions: number;
  averageExecutionTime: number;
  languageStats: LanguageStatType[];
}

export type ExecutionStatusType = typeof ExecutionStatusType[keyof typeof ExecutionStatusType];



export const ExecutionStatusType = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  SUCCESS: 'SUCCESS',
  ERROR: 'ERROR',
  TIMEOUT: 'TIMEOUT',
  MEMORY_LIMIT: 'MEMORY_LIMIT',
} as const;

export interface HTTPValidationErrorType {
  detail?: ValidationErrorType[];
}

export interface LanguageStatType {
  language: CodeLanguageType;
  name: string;
  executions: number;
}

export interface ProgressActionType {
  action: string;
}

export type ProgressAnalyticsTypeMostPopularCategoriesItem = { [key: string]: unknown };

export type ProgressAnalyticsTypeStrugglingAreasItem = { [key: string]: unknown };

export interface ProgressAnalyticsType {
  totalUsers: number;
  activeUsers: number;
  totalTasksSolved: number;
  averageTasksPerUser: number;
  mostPopularCategories: ProgressAnalyticsTypeMostPopularCategoriesItem[];
  strugglingAreas: ProgressAnalyticsTypeStrugglingAreasItem[];
}

export interface ReviewRatingType {
  rating: string;
}

export interface SupportedLanguagePublicType {
  id: string;
  name: string;
  language: CodeLanguageType;
  version: string;
  fileExtension: string;
  timeoutSeconds: number;
  memoryLimitMB: number;
  isEnabled: boolean;
}

export type TaskAttemptCreateTypeExecutionTimeMs = number | null;

export type TaskAttemptCreateTypeMemoryUsedMB = number | null;

export type TaskAttemptCreateTypeErrorMessage = string | null;

export type TaskAttemptCreateTypeStderr = string | null;

export type TaskAttemptCreateTypeDurationMinutes = number | null;

export interface TaskAttemptCreateType {
  sourceCode: string;
  language: string;
  isSuccessful?: boolean;
  attemptNumber: number;
  executionTimeMs?: TaskAttemptCreateTypeExecutionTimeMs;
  memoryUsedMB?: TaskAttemptCreateTypeMemoryUsedMB;
  errorMessage?: TaskAttemptCreateTypeErrorMessage;
  stderr?: TaskAttemptCreateTypeStderr;
  durationMinutes?: TaskAttemptCreateTypeDurationMinutes;
  userId: number;
  blockId: string;
}

export type TaskAttemptResponseTypeExecutionTimeMs = number | null;

export type TaskAttemptResponseTypeMemoryUsedMB = number | null;

export type TaskAttemptResponseTypeErrorMessage = string | null;

export type TaskAttemptResponseTypeStderr = string | null;

export type TaskAttemptResponseTypeDurationMinutes = number | null;

export interface TaskAttemptResponseType {
  sourceCode: string;
  language: string;
  isSuccessful?: boolean;
  attemptNumber: number;
  executionTimeMs?: TaskAttemptResponseTypeExecutionTimeMs;
  memoryUsedMB?: TaskAttemptResponseTypeMemoryUsedMB;
  errorMessage?: TaskAttemptResponseTypeErrorMessage;
  stderr?: TaskAttemptResponseTypeStderr;
  durationMinutes?: TaskAttemptResponseTypeDurationMinutes;
  id: string;
  userId: number;
  blockId: string;
  createdAt: string;
}

export interface TaskSolutionResponseType {
  finalCode: string;
  language: string;
  totalAttempts: number;
  timeToSolveMinutes: number;
  firstAttempt: string;
  id: string;
  userId: number;
  blockId: string;
  solvedAt: string;
  createdAt: string;
  updatedAt: string;
}

export type UpdateContentBlockRequestTypeFileId = string | null;

export type UpdateContentBlockRequestTypePathTitles = unknown[] | null;

export type UpdateContentBlockRequestTypeBlockTitle = string | null;

export type UpdateContentBlockRequestTypeBlockLevel = number | null;

export type UpdateContentBlockRequestTypeOrderInFile = number | null;

export type UpdateContentBlockRequestTypeTextContent = string | null;

export type UpdateContentBlockRequestTypeCodeContent = string | null;

export type UpdateContentBlockRequestTypeCodeLanguage = string | null;

export type UpdateContentBlockRequestTypeIsCodeFoldable = boolean | null;

export type UpdateContentBlockRequestTypeCodeFoldTitle = string | null;

export type UpdateContentBlockRequestTypeExtractedUrls = unknown[] | null;

export interface UpdateContentBlockRequestType {
  fileId?: UpdateContentBlockRequestTypeFileId;
  pathTitles?: UpdateContentBlockRequestTypePathTitles;
  blockTitle?: UpdateContentBlockRequestTypeBlockTitle;
  blockLevel?: UpdateContentBlockRequestTypeBlockLevel;
  orderInFile?: UpdateContentBlockRequestTypeOrderInFile;
  textContent?: UpdateContentBlockRequestTypeTextContent;
  codeContent?: UpdateContentBlockRequestTypeCodeContent;
  codeLanguage?: UpdateContentBlockRequestTypeCodeLanguage;
  isCodeFoldable?: UpdateContentBlockRequestTypeIsCodeFoldable;
  codeFoldTitle?: UpdateContentBlockRequestTypeCodeFoldTitle;
  extractedUrls?: UpdateContentBlockRequestTypeExtractedUrls;
}

export type UpdateContentFileRequestTypeWebdavPath = string | null;

export type UpdateContentFileRequestTypeMainCategory = string | null;

export type UpdateContentFileRequestTypeSubCategory = string | null;

export interface UpdateContentFileRequestType {
  webdavPath?: UpdateContentFileRequestTypeWebdavPath;
  mainCategory?: UpdateContentFileRequestTypeMainCategory;
  subCategory?: UpdateContentFileRequestTypeSubCategory;
}

export type UpdateTheoryCardRequestTypeAnkiGuid = string | null;

export type UpdateTheoryCardRequestTypeCardType = string | null;

export type UpdateTheoryCardRequestTypeDeck = string | null;

export type UpdateTheoryCardRequestTypeCategory = string | null;

export type UpdateTheoryCardRequestTypeSubCategory = string | null;

export type UpdateTheoryCardRequestTypeQuestionBlock = string | null;

export type UpdateTheoryCardRequestTypeAnswerBlock = string | null;

export type UpdateTheoryCardRequestTypeTags = unknown[] | null;

export type UpdateTheoryCardRequestTypeOrderIndex = number | null;

export interface UpdateTheoryCardRequestType {
  ankiGuid?: UpdateTheoryCardRequestTypeAnkiGuid;
  cardType?: UpdateTheoryCardRequestTypeCardType;
  deck?: UpdateTheoryCardRequestTypeDeck;
  category?: UpdateTheoryCardRequestTypeCategory;
  subCategory?: UpdateTheoryCardRequestTypeSubCategory;
  questionBlock?: UpdateTheoryCardRequestTypeQuestionBlock;
  answerBlock?: UpdateTheoryCardRequestTypeAnswerBlock;
  tags?: UpdateTheoryCardRequestTypeTags;
  orderIndex?: UpdateTheoryCardRequestTypeOrderIndex;
}

export type UpdateUserRequestTypeEmail = string | null;

export type UpdateUserRequestTypePassword = string | null;

export type UpdateUserRequestTypeRole = string | null;

export interface UpdateUserRequestType {
  email?: UpdateUserRequestTypeEmail;
  password?: UpdateUserRequestTypePassword;
  role?: UpdateUserRequestTypeRole;
}

export interface UserCodeSolutionCreateType {
  blockId: string;
  language: CodeLanguageType;
  sourceCode: string;
  isCompleted?: boolean;
}

export type UserCodeSolutionResponseTypeLastExecutionId = string | null;

export interface UserCodeSolutionResponseType {
  id: string;
  userId: number;
  blockId: string;
  languageId: string;
  sourceCode: string;
  isCompleted: boolean;
  executionCount: number;
  successfulExecutions: number;
  lastExecutionId?: UserCodeSolutionResponseTypeLastExecutionId;
  createdAt: string;
  updatedAt: string;
}

export type UserCodeSolutionUpdateTypeSourceCode = string | null;

export type UserCodeSolutionUpdateTypeIsCompleted = boolean | null;

export interface UserCodeSolutionUpdateType {
  sourceCode?: UserCodeSolutionUpdateTypeSourceCode;
  isCompleted?: UserCodeSolutionUpdateTypeIsCompleted;
}

export interface UserCreateType {
  email: string;
  password: string;
}

export type UserDetailedProgressResponseTypeLastActivityDate = string | null;

export type UserDetailedProgressResponseTypeOverallStats = { [key: string]: unknown };

export interface UserDetailedProgressResponseType {
  userId: number;
  totalTasksSolved: number;
  lastActivityDate: UserDetailedProgressResponseTypeLastActivityDate;
  overallStats: UserDetailedProgressResponseTypeOverallStats;
  categoryProgress: CategoryProgressSummaryType[];
  recentAttempts: TaskAttemptResponseType[];
  recentSolutions: TaskSolutionResponseType[];
  learningPaths: UserPathProgressResponseType[];
}

export interface UserLoginType {
  email: string;
  password: string;
}

export type UserPathProgressResponseTypeCompletedAt = string | null;

export type UserPathProgressResponseTypeLastActivity = string | null;

export interface UserPathProgressResponseType {
  currentBlockIndex?: number;
  completedBlockIds?: string[];
  isCompleted?: boolean;
  startedAt: string;
  completedAt?: UserPathProgressResponseTypeCompletedAt;
  lastActivity?: UserPathProgressResponseTypeLastActivity;
  id: string;
  userId: number;
  pathId: string;
  createdAt: string;
  updatedAt: string;
}

export interface UserResponseType {
  email: string;
  id: number;
  role: UserRoleType;
  createdAt: string;
}

export type UserRoleType = typeof UserRoleType[keyof typeof UserRoleType];


export const UserRoleType = {
  GUEST: 'GUEST',
  USER: 'USER',
  ADMIN: 'ADMIN',
} as const;

export type ValidationErrorTypeLocItem = string | number;

export interface ValidationErrorType {
  loc: ValidationErrorTypeLocItem[];
  msg: string;
  type: string;
}

export type GetTheoryCardsApiTheoryCardsGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
category?: string | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
subCategory?: string | null;
/**
 * –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–ª–æ–¥—ã
 */
deck?: string | null;
/**
 * –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortBy?: string;
/**
 * –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortOrder?: string;
/**
 * –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
 */
q?: string | null;
/**
 * –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
 */
onlyUnstudied?: boolean;
};

export type GetDueTheoryCardsApiTheoryCardsDueGetParams = {
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type GetContentBlocksApiContentBlocksGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –ß–∞—Å—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É WebDAV
 */
webdavPath?: string | null;
/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
mainCategory?: string | null;
/**
 * –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
subCategory?: string | null;
/**
 * ID —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤
 */
filePathId?: string | null;
/**
 * –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
 */
q?: string | null;
/**
 * –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortBy?: string;
/**
 * –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortOrder?: string;
};

export type GetContentFilesApiContentFilesGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
mainCategory?: string | null;
/**
 * –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
subCategory?: string | null;
/**
 * –ü–æ–∏—Å–∫ –ø–æ –ø—É—Ç–∏ WebDAV
 */
webdavPath?: string | null;
};

export type GetTaskItemsApiTasksItemsGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)
 */
mainCategories?: string[];
/**
 * –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)
 */
subCategories?: string[];
/**
 * –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
 */
q?: string | null;
/**
 * –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortBy?: string;
/**
 * –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
sortOrder?: string;
/**
 * –¢–∏–ø: content_block, theory_quiz –∏–ª–∏ all
 */
itemType?: string | null;
/**
 * –¢–æ–ª—å–∫–æ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–µ
 */
onlyUnsolved?: boolean | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, deprecated)
 */
companies?: string | null;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)
 */
companiesList?: string[];
};

export type GetCompaniesApiTasksCompaniesGetParams = {
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
mainCategories?: string[];
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
subCategories?: string[];
};

export type GetAdminUsersApiAdminUsersGetParams = {
/**
 * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @minimum 1
 */
page?: number;
/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
 */
role?: string | null;
/**
 * –ü–æ–∏—Å–∫ –ø–æ email
 */
search?: string | null;
};

export type GetAdminContentFilesApiAdminContentFilesGetParams = {
/**
 * @minimum 1
 */
page?: number;
/**
 * @minimum 1
 * @maximum 100
 */
limit?: number;
category?: string | null;
search?: string | null;
};

export type GetAdminContentBlocksApiAdminContentBlocksGetParams = {
/**
 * @minimum 1
 */
page?: number;
/**
 * @minimum 1
 * @maximum 100
 */
limit?: number;
fileId?: string | null;
search?: string | null;
};

export type GetAdminTheoryCardsApiAdminTheoryCardsGetParams = {
/**
 * @minimum 1
 */
page?: number;
/**
 * @minimum 1
 * @maximum 100
 */
limit?: number;
category?: string | null;
search?: string | null;
};

export type GetUserExecutionsApiCodeEditorExecutionsGetParams = {
blockId?: string | null;
limit?: number;
offset?: number;
};

export type GenerateMindmapApiMindmapGenerateGetParams = {
structure_type?: string;
difficulty_filter?: string | null;
topic_filter?: string | null;
};

export type GenerateMindmapApiMindmapGenerateGet200 = { [key: string]: unknown };

export type GetTopicTasksApiMindmapTopicTopicKeyTasksGetParams = {
difficulty_filter?: string | null;
};

export type GetTopicTasksApiMindmapTopicTopicKeyTasksGet200 = { [key: string]: unknown };

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Node.js –≤–µ—Ä—Å–∏–∏)
 * @summary Register
 */
export const registerApiAuthRegisterPost = (
    userCreateType: UserCreateType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCreateType, signal
    },
      );
    }
  


export const getRegisterApiAuthRegisterPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerApiAuthRegisterPost>>, TError,{data: UserCreateType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof registerApiAuthRegisterPost>>, TError,{data: UserCreateType}, TContext> => {

const mutationKey = ['registerApiAuthRegisterPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerApiAuthRegisterPost>>, {data: UserCreateType}> = (props) => {
          const {data} = props ?? {};

          return  registerApiAuthRegisterPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterApiAuthRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerApiAuthRegisterPost>>>
    export type RegisterApiAuthRegisterPostMutationBody = UserCreateType
    export type RegisterApiAuthRegisterPostMutationError = HTTPValidationErrorType

    /**
 * @summary Register
 */
export const useRegisterApiAuthRegisterPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerApiAuthRegisterPost>>, TError,{data: UserCreateType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerApiAuthRegisterPost>>,
        TError,
        {data: UserCreateType},
        TContext
      > => {

      const mutationOptions = getRegisterApiAuthRegisterPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Node.js –≤–µ—Ä—Å–∏–∏)
 * @summary Login
 */
export const loginApiAuthLoginPost = (
    userLoginType: UserLoginType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userLoginType, signal
    },
      );
    }
  


export const getLoginApiAuthLoginPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginApiAuthLoginPost>>, TError,{data: UserLoginType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof loginApiAuthLoginPost>>, TError,{data: UserLoginType}, TContext> => {

const mutationKey = ['loginApiAuthLoginPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginApiAuthLoginPost>>, {data: UserLoginType}> = (props) => {
          const {data} = props ?? {};

          return  loginApiAuthLoginPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginApiAuthLoginPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginApiAuthLoginPost>>>
    export type LoginApiAuthLoginPostMutationBody = UserLoginType
    export type LoginApiAuthLoginPostMutationError = HTTPValidationErrorType

    /**
 * @summary Login
 */
export const useLoginApiAuthLoginPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginApiAuthLoginPost>>, TError,{data: UserLoginType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof loginApiAuthLoginPost>>,
        TError,
        {data: UserLoginType},
        TContext
      > => {

      const mutationOptions = getLoginApiAuthLoginPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Node.js –≤–µ—Ä—Å–∏–∏)
 * @summary Logout
 */
export const logoutApiAuthLogoutPost = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/auth/logout`, method: 'POST', signal
    },
      );
    }
  


export const getLogoutApiAuthLogoutPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>, TError,void, TContext> => {

const mutationKey = ['logoutApiAuthLogoutPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>, void> = () => {
          

          return  logoutApiAuthLogoutPost()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LogoutApiAuthLogoutPostMutationResult = NonNullable<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>>
    
    export type LogoutApiAuthLogoutPostMutationError = unknown

    /**
 * @summary Logout
 */
export const useLogoutApiAuthLogoutPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getLogoutApiAuthLogoutPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * @summary Get Current User Info
 */
export const getCurrentUserInfoApiAuthMeGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserResponseType>(
      {url: `/api/auth/me`, method: 'GET', signal
    },
      );
    }
  

export const getGetCurrentUserInfoApiAuthMeGetQueryKey = () => {
    return [`/api/auth/me`] as const;
    }

    
export const getGetCurrentUserInfoApiAuthMeGetQueryOptions = <TData = Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentUserInfoApiAuthMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>> = ({ signal }) => getCurrentUserInfoApiAuthMeGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCurrentUserInfoApiAuthMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>>
export type GetCurrentUserInfoApiAuthMeGetQueryError = unknown


export function useGetCurrentUserInfoApiAuthMeGet<TData = Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCurrentUserInfoApiAuthMeGet<TData = Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCurrentUserInfoApiAuthMeGet<TData = Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Current User Info
 */

export function useGetCurrentUserInfoApiAuthMeGet<TData = Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCurrentUserInfoApiAuthMeGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Check Auth
 */
export const checkAuthApiAuthCheckGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/auth/check`, method: 'GET', signal
    },
      );
    }
  

export const getCheckAuthApiAuthCheckGetQueryKey = () => {
    return [`/api/auth/check`] as const;
    }

    
export const getCheckAuthApiAuthCheckGetQueryOptions = <TData = Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCheckAuthApiAuthCheckGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>> = ({ signal }) => checkAuthApiAuthCheckGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CheckAuthApiAuthCheckGetQueryResult = NonNullable<Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>>
export type CheckAuthApiAuthCheckGetQueryError = unknown


export function useCheckAuthApiAuthCheckGet<TData = Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>,
          TError,
          Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCheckAuthApiAuthCheckGet<TData = Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>,
          TError,
          Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCheckAuthApiAuthCheckGet<TData = Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Check Auth
 */

export function useCheckAuthApiAuthCheckGet<TData = Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkAuthApiAuthCheckGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCheckAuthApiAuthCheckGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @summary Debug Users
 */
export const debugUsersApiAuthDebugUsersGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/auth/debug/users`, method: 'GET', signal
    },
      );
    }
  

export const getDebugUsersApiAuthDebugUsersGetQueryKey = () => {
    return [`/api/auth/debug/users`] as const;
    }

    
export const getDebugUsersApiAuthDebugUsersGetQueryOptions = <TData = Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDebugUsersApiAuthDebugUsersGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>> = ({ signal }) => debugUsersApiAuthDebugUsersGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DebugUsersApiAuthDebugUsersGetQueryResult = NonNullable<Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>>
export type DebugUsersApiAuthDebugUsersGetQueryError = unknown


export function useDebugUsersApiAuthDebugUsersGet<TData = Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>,
          TError,
          Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDebugUsersApiAuthDebugUsersGet<TData = Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>,
          TError,
          Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDebugUsersApiAuthDebugUsersGet<TData = Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Debug Users
 */

export function useDebugUsersApiAuthDebugUsersGet<TData = Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof debugUsersApiAuthDebugUsersGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDebugUsersApiAuthDebugUsersGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 * @summary Get Theory Cards
 */
export const getTheoryCardsApiTheoryCardsGet = (
    params?: GetTheoryCardsApiTheoryCardsGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/theory/cards`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTheoryCardsApiTheoryCardsGetQueryKey = (params?: GetTheoryCardsApiTheoryCardsGetParams,) => {
    return [`/api/theory/cards`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTheoryCardsApiTheoryCardsGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>, TError = HTTPValidationErrorType>(params?: GetTheoryCardsApiTheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryCardsApiTheoryCardsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>> = ({ signal }) => getTheoryCardsApiTheoryCardsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryCardsApiTheoryCardsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>>
export type GetTheoryCardsApiTheoryCardsGetQueryError = HTTPValidationErrorType


export function useGetTheoryCardsApiTheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetTheoryCardsApiTheoryCardsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardsApiTheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTheoryCardsApiTheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardsApiTheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTheoryCardsApiTheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Cards
 */

export function useGetTheoryCardsApiTheoryCardsGet<TData = Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTheoryCardsApiTheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardsApiTheoryCardsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryCardsApiTheoryCardsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ–æ—Ä–∏–∏
 * @summary Get Theory Categories
 */
export const getTheoryCategoriesApiTheoryCategoriesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/theory/categories`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryCategoriesApiTheoryCategoriesGetQueryKey = () => {
    return [`/api/theory/categories`] as const;
    }

    
export const getGetTheoryCategoriesApiTheoryCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryCategoriesApiTheoryCategoriesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>> = ({ signal }) => getTheoryCategoriesApiTheoryCategoriesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryCategoriesApiTheoryCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>>
export type GetTheoryCategoriesApiTheoryCategoriesGetQueryError = unknown


export function useGetTheoryCategoriesApiTheoryCategoriesGet<TData = Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCategoriesApiTheoryCategoriesGet<TData = Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCategoriesApiTheoryCategoriesGet<TData = Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Categories
 */

export function useGetTheoryCategoriesApiTheoryCategoriesGet<TData = Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCategoriesApiTheoryCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryCategoriesApiTheoryCategoriesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Theory Subcategories
 */
export const getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet = (
    category: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/theory/categories/${category}/subcategories`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGetQueryKey = (category: string,) => {
    return [`/api/theory/categories/${category}/subcategories`] as const;
    }

    
export const getGetTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGetQueryKey(category);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>> = ({ signal }) => getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet(category, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(category), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>>
export type GetTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGetQueryError = HTTPValidationErrorType


export function useGetTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Subcategories
 */

export function useGetTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheorySubcategoriesApiTheoryCategoriesCategorySubcategoriesGetQueryOptions(category,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID
 * @summary Get Theory Card
 */
export const getTheoryCardApiTheoryCardsCardIdGet = (
    cardId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/theory/cards/${cardId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryCardApiTheoryCardsCardIdGetQueryKey = (cardId: string,) => {
    return [`/api/theory/cards/${cardId}`] as const;
    }

    
export const getGetTheoryCardApiTheoryCardsCardIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryCardApiTheoryCardsCardIdGetQueryKey(cardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>> = ({ signal }) => getTheoryCardApiTheoryCardsCardIdGet(cardId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cardId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryCardApiTheoryCardsCardIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>>
export type GetTheoryCardApiTheoryCardsCardIdGetQueryError = HTTPValidationErrorType


export function useGetTheoryCardApiTheoryCardsCardIdGet<TData = Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardApiTheoryCardsCardIdGet<TData = Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardApiTheoryCardsCardIdGet<TData = Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Card
 */

export function useGetTheoryCardApiTheoryCardsCardIdGet<TData = Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardApiTheoryCardsCardIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryCardApiTheoryCardsCardIdGetQueryOptions(cardId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
 * @summary Update Theory Card Progress
 */
export const updateTheoryCardProgressApiTheoryCardsCardIdProgressPatch = (
    cardId: string,
    progressActionType: ProgressActionType,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/theory/cards/${cardId}/progress`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: progressActionType
    },
      );
    }
  


export const getUpdateTheoryCardProgressApiTheoryCardsCardIdProgressPatchMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTheoryCardProgressApiTheoryCardsCardIdProgressPatch>>, TError,{cardId: string;data: ProgressActionType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateTheoryCardProgressApiTheoryCardsCardIdProgressPatch>>, TError,{cardId: string;data: ProgressActionType}, TContext> => {

const mutationKey = ['updateTheoryCardProgressApiTheoryCardsCardIdProgressPatch'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTheoryCardProgressApiTheoryCardsCardIdProgressPatch>>, {cardId: string;data: ProgressActionType}> = (props) => {
          const {cardId,data} = props ?? {};

          return  updateTheoryCardProgressApiTheoryCardsCardIdProgressPatch(cardId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateTheoryCardProgressApiTheoryCardsCardIdProgressPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateTheoryCardProgressApiTheoryCardsCardIdProgressPatch>>>
    export type UpdateTheoryCardProgressApiTheoryCardsCardIdProgressPatchMutationBody = ProgressActionType
    export type UpdateTheoryCardProgressApiTheoryCardsCardIdProgressPatchMutationError = HTTPValidationErrorType

    /**
 * @summary Update Theory Card Progress
 */
export const useUpdateTheoryCardProgressApiTheoryCardsCardIdProgressPatch = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTheoryCardProgressApiTheoryCardsCardIdProgressPatch>>, TError,{cardId: string;data: ProgressActionType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateTheoryCardProgressApiTheoryCardsCardIdProgressPatch>>,
        TError,
        {cardId: string;data: ProgressActionType},
        TContext
      > => {

      const mutationOptions = getUpdateTheoryCardProgressApiTheoryCardsCardIdProgressPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
 * @summary Review Theory Card
 */
export const reviewTheoryCardApiTheoryCardsCardIdReviewPost = (
    cardId: string,
    reviewRatingType: ReviewRatingType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/theory/cards/${cardId}/review`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reviewRatingType, signal
    },
      );
    }
  


export const getReviewTheoryCardApiTheoryCardsCardIdReviewPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reviewTheoryCardApiTheoryCardsCardIdReviewPost>>, TError,{cardId: string;data: ReviewRatingType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof reviewTheoryCardApiTheoryCardsCardIdReviewPost>>, TError,{cardId: string;data: ReviewRatingType}, TContext> => {

const mutationKey = ['reviewTheoryCardApiTheoryCardsCardIdReviewPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof reviewTheoryCardApiTheoryCardsCardIdReviewPost>>, {cardId: string;data: ReviewRatingType}> = (props) => {
          const {cardId,data} = props ?? {};

          return  reviewTheoryCardApiTheoryCardsCardIdReviewPost(cardId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReviewTheoryCardApiTheoryCardsCardIdReviewPostMutationResult = NonNullable<Awaited<ReturnType<typeof reviewTheoryCardApiTheoryCardsCardIdReviewPost>>>
    export type ReviewTheoryCardApiTheoryCardsCardIdReviewPostMutationBody = ReviewRatingType
    export type ReviewTheoryCardApiTheoryCardsCardIdReviewPostMutationError = HTTPValidationErrorType

    /**
 * @summary Review Theory Card
 */
export const useReviewTheoryCardApiTheoryCardsCardIdReviewPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reviewTheoryCardApiTheoryCardsCardIdReviewPost>>, TError,{cardId: string;data: ReviewRatingType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof reviewTheoryCardApiTheoryCardsCardIdReviewPost>>,
        TError,
        {cardId: string;data: ReviewRatingType},
        TContext
      > => {

      const mutationOptions = getReviewTheoryCardApiTheoryCardsCardIdReviewPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
 * @summary Get Theory Card Stats
 */
export const getTheoryCardStatsApiTheoryCardsCardIdStatsGet = (
    cardId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/theory/cards/${cardId}/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryCardStatsApiTheoryCardsCardIdStatsGetQueryKey = (cardId: string,) => {
    return [`/api/theory/cards/${cardId}/stats`] as const;
    }

    
export const getGetTheoryCardStatsApiTheoryCardsCardIdStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>, TError = HTTPValidationErrorType>(cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryCardStatsApiTheoryCardsCardIdStatsGetQueryKey(cardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>> = ({ signal }) => getTheoryCardStatsApiTheoryCardsCardIdStatsGet(cardId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cardId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryCardStatsApiTheoryCardsCardIdStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>>
export type GetTheoryCardStatsApiTheoryCardsCardIdStatsGetQueryError = HTTPValidationErrorType


export function useGetTheoryCardStatsApiTheoryCardsCardIdStatsGet<TData = Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardStatsApiTheoryCardsCardIdStatsGet<TData = Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardStatsApiTheoryCardsCardIdStatsGet<TData = Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Card Stats
 */

export function useGetTheoryCardStatsApiTheoryCardsCardIdStatsGet<TData = Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardStatsApiTheoryCardsCardIdStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryCardStatsApiTheoryCardsCardIdStatsGetQueryOptions(cardId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
 * @summary Reset Theory Card Progress
 */
export const resetTheoryCardProgressApiTheoryCardsCardIdResetPost = (
    cardId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/theory/cards/${cardId}/reset`, method: 'POST', signal
    },
      );
    }
  


export const getResetTheoryCardProgressApiTheoryCardsCardIdResetPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetTheoryCardProgressApiTheoryCardsCardIdResetPost>>, TError,{cardId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof resetTheoryCardProgressApiTheoryCardsCardIdResetPost>>, TError,{cardId: string}, TContext> => {

const mutationKey = ['resetTheoryCardProgressApiTheoryCardsCardIdResetPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetTheoryCardProgressApiTheoryCardsCardIdResetPost>>, {cardId: string}> = (props) => {
          const {cardId} = props ?? {};

          return  resetTheoryCardProgressApiTheoryCardsCardIdResetPost(cardId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResetTheoryCardProgressApiTheoryCardsCardIdResetPostMutationResult = NonNullable<Awaited<ReturnType<typeof resetTheoryCardProgressApiTheoryCardsCardIdResetPost>>>
    
    export type ResetTheoryCardProgressApiTheoryCardsCardIdResetPostMutationError = HTTPValidationErrorType

    /**
 * @summary Reset Theory Card Progress
 */
export const useResetTheoryCardProgressApiTheoryCardsCardIdResetPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetTheoryCardProgressApiTheoryCardsCardIdResetPost>>, TError,{cardId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof resetTheoryCardProgressApiTheoryCardsCardIdResetPost>>,
        TError,
        {cardId: string},
        TContext
      > => {

      const mutationOptions = getResetTheoryCardProgressApiTheoryCardsCardIdResetPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
 * @summary Get Theory Card Intervals
 */
export const getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet = (
    cardId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/theory/cards/${cardId}/intervals`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGetQueryKey = (cardId: string,) => {
    return [`/api/theory/cards/${cardId}/intervals`] as const;
    }

    
export const getGetTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>, TError = HTTPValidationErrorType>(cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGetQueryKey(cardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>> = ({ signal }) => getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet(cardId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cardId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>>
export type GetTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGetQueryError = HTTPValidationErrorType


export function useGetTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet<TData = Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet<TData = Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet<TData = Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Card Intervals
 */

export function useGetTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet<TData = Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>, TError = HTTPValidationErrorType>(
 cardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryCardIntervalsApiTheoryCardsCardIdIntervalsGetQueryOptions(cardId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é
 * @summary Get Due Theory Cards
 */
export const getDueTheoryCardsApiTheoryCardsDueGet = (
    params?: GetDueTheoryCardsApiTheoryCardsDueGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/theory/cards/due`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDueTheoryCardsApiTheoryCardsDueGetQueryKey = (params?: GetDueTheoryCardsApiTheoryCardsDueGetParams,) => {
    return [`/api/theory/cards/due`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDueTheoryCardsApiTheoryCardsDueGetQueryOptions = <TData = Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>, TError = HTTPValidationErrorType>(params?: GetDueTheoryCardsApiTheoryCardsDueGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDueTheoryCardsApiTheoryCardsDueGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>> = ({ signal }) => getDueTheoryCardsApiTheoryCardsDueGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDueTheoryCardsApiTheoryCardsDueGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>>
export type GetDueTheoryCardsApiTheoryCardsDueGetQueryError = HTTPValidationErrorType


export function useGetDueTheoryCardsApiTheoryCardsDueGet<TData = Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetDueTheoryCardsApiTheoryCardsDueGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>,
          TError,
          Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDueTheoryCardsApiTheoryCardsDueGet<TData = Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>, TError = HTTPValidationErrorType>(
 params?: GetDueTheoryCardsApiTheoryCardsDueGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>,
          TError,
          Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDueTheoryCardsApiTheoryCardsDueGet<TData = Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>, TError = HTTPValidationErrorType>(
 params?: GetDueTheoryCardsApiTheoryCardsDueGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Due Theory Cards
 */

export function useGetDueTheoryCardsApiTheoryCardsDueGet<TData = Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>, TError = HTTPValidationErrorType>(
 params?: GetDueTheoryCardsApiTheoryCardsDueGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDueTheoryCardsApiTheoryCardsDueGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDueTheoryCardsApiTheoryCardsDueGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
 * @summary Get Theory Stats Overview
 */
export const getTheoryStatsOverviewApiTheoryStatsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/theory/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryStatsOverviewApiTheoryStatsGetQueryKey = () => {
    return [`/api/theory/stats`] as const;
    }

    
export const getGetTheoryStatsOverviewApiTheoryStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryStatsOverviewApiTheoryStatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>> = ({ signal }) => getTheoryStatsOverviewApiTheoryStatsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryStatsOverviewApiTheoryStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>>
export type GetTheoryStatsOverviewApiTheoryStatsGetQueryError = unknown


export function useGetTheoryStatsOverviewApiTheoryStatsGet<TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryStatsOverviewApiTheoryStatsGet<TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryStatsOverviewApiTheoryStatsGet<TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Stats Overview
 */

export function useGetTheoryStatsOverviewApiTheoryStatsGet<TData = Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsOverviewApiTheoryStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryStatsOverviewApiTheoryStatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 * @summary Get Content Blocks
 */
export const getContentBlocksApiContentBlocksGet = (
    params?: GetContentBlocksApiContentBlocksGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/content/blocks`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetContentBlocksApiContentBlocksGetQueryKey = (params?: GetContentBlocksApiContentBlocksGetParams,) => {
    return [`/api/content/blocks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetContentBlocksApiContentBlocksGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>, TError = HTTPValidationErrorType>(params?: GetContentBlocksApiContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentBlocksApiContentBlocksGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>> = ({ signal }) => getContentBlocksApiContentBlocksGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentBlocksApiContentBlocksGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>>
export type GetContentBlocksApiContentBlocksGetQueryError = HTTPValidationErrorType


export function useGetContentBlocksApiContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetContentBlocksApiContentBlocksGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlocksApiContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentBlocksApiContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlocksApiContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentBlocksApiContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Blocks
 */

export function useGetContentBlocksApiContentBlocksGet<TData = Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentBlocksApiContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlocksApiContentBlocksGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentBlocksApiContentBlocksGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Get Content Files
 */
export const getContentFilesApiContentFilesGet = (
    params?: GetContentFilesApiContentFilesGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/content/files`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetContentFilesApiContentFilesGetQueryKey = (params?: GetContentFilesApiContentFilesGetParams,) => {
    return [`/api/content/files`, ...(params ? [params]: [])] as const;
    }

    
export const getGetContentFilesApiContentFilesGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>, TError = HTTPValidationErrorType>(params?: GetContentFilesApiContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentFilesApiContentFilesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>> = ({ signal }) => getContentFilesApiContentFilesGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentFilesApiContentFilesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>>
export type GetContentFilesApiContentFilesGetQueryError = HTTPValidationErrorType


export function useGetContentFilesApiContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetContentFilesApiContentFilesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentFilesApiContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentFilesApiContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentFilesApiContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentFilesApiContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Files
 */

export function useGetContentFilesApiContentFilesGet<TData = Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetContentFilesApiContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentFilesApiContentFilesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentFilesApiContentFilesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Get Content Categories
 */
export const getContentCategoriesApiContentCategoriesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/content/categories`, method: 'GET', signal
    },
      );
    }
  

export const getGetContentCategoriesApiContentCategoriesGetQueryKey = () => {
    return [`/api/content/categories`] as const;
    }

    
export const getGetContentCategoriesApiContentCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentCategoriesApiContentCategoriesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>> = ({ signal }) => getContentCategoriesApiContentCategoriesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentCategoriesApiContentCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>>
export type GetContentCategoriesApiContentCategoriesGetQueryError = unknown


export function useGetContentCategoriesApiContentCategoriesGet<TData = Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentCategoriesApiContentCategoriesGet<TData = Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentCategoriesApiContentCategoriesGet<TData = Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Categories
 */

export function useGetContentCategoriesApiContentCategoriesGet<TData = Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentCategoriesApiContentCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentCategoriesApiContentCategoriesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @summary Get Content Subcategories
 */
export const getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet = (
    category: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/content/categories/${category}/subcategories`, method: 'GET', signal
    },
      );
    }
  

export const getGetContentSubcategoriesApiContentCategoriesCategorySubcategoriesGetQueryKey = (category: string,) => {
    return [`/api/content/categories/${category}/subcategories`] as const;
    }

    
export const getGetContentSubcategoriesApiContentCategoriesCategorySubcategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentSubcategoriesApiContentCategoriesCategorySubcategoriesGetQueryKey(category);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>> = ({ signal }) => getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet(category, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(category), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentSubcategoriesApiContentCategoriesCategorySubcategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>>
export type GetContentSubcategoriesApiContentCategoriesCategorySubcategoriesGetQueryError = HTTPValidationErrorType


export function useGetContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Subcategories
 */

export function useGetContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet<TData = Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>, TError = HTTPValidationErrorType>(
 category: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentSubcategoriesApiContentCategoriesCategorySubcategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentSubcategoriesApiContentCategoriesCategorySubcategoriesGetQueryOptions(category,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ ID
 * @summary Get Content Block
 */
export const getContentBlockApiContentBlocksBlockIdGet = (
    blockId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/content/blocks/${blockId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetContentBlockApiContentBlocksBlockIdGetQueryKey = (blockId: string,) => {
    return [`/api/content/blocks/${blockId}`] as const;
    }

    
export const getGetContentBlockApiContentBlocksBlockIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentBlockApiContentBlocksBlockIdGetQueryKey(blockId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>> = ({ signal }) => getContentBlockApiContentBlocksBlockIdGet(blockId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(blockId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentBlockApiContentBlocksBlockIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>>
export type GetContentBlockApiContentBlocksBlockIdGetQueryError = HTTPValidationErrorType


export function useGetContentBlockApiContentBlocksBlockIdGet<TData = Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlockApiContentBlocksBlockIdGet<TData = Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentBlockApiContentBlocksBlockIdGet<TData = Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Block
 */

export function useGetContentBlockApiContentBlocksBlockIdGet<TData = Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentBlockApiContentBlocksBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentBlockApiContentBlocksBlockIdGetQueryOptions(blockId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –±–ª–æ–∫—É
 * @summary Update Content Block Progress
 */
export const updateContentBlockProgressApiContentBlocksBlockIdProgressPatch = (
    blockId: string,
    progressActionType: ProgressActionType,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/content/blocks/${blockId}/progress`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: progressActionType
    },
      );
    }
  


export const getUpdateContentBlockProgressApiContentBlocksBlockIdProgressPatchMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentBlockProgressApiContentBlocksBlockIdProgressPatch>>, TError,{blockId: string;data: ProgressActionType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateContentBlockProgressApiContentBlocksBlockIdProgressPatch>>, TError,{blockId: string;data: ProgressActionType}, TContext> => {

const mutationKey = ['updateContentBlockProgressApiContentBlocksBlockIdProgressPatch'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateContentBlockProgressApiContentBlocksBlockIdProgressPatch>>, {blockId: string;data: ProgressActionType}> = (props) => {
          const {blockId,data} = props ?? {};

          return  updateContentBlockProgressApiContentBlocksBlockIdProgressPatch(blockId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateContentBlockProgressApiContentBlocksBlockIdProgressPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateContentBlockProgressApiContentBlocksBlockIdProgressPatch>>>
    export type UpdateContentBlockProgressApiContentBlocksBlockIdProgressPatchMutationBody = ProgressActionType
    export type UpdateContentBlockProgressApiContentBlocksBlockIdProgressPatchMutationError = HTTPValidationErrorType

    /**
 * @summary Update Content Block Progress
 */
export const useUpdateContentBlockProgressApiContentBlocksBlockIdProgressPatch = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContentBlockProgressApiContentBlocksBlockIdProgressPatch>>, TError,{blockId: string;data: ProgressActionType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateContentBlockProgressApiContentBlocksBlockIdProgressPatch>>,
        TError,
        {blockId: string;data: ProgressActionType},
        TContext
      > => {

      const mutationOptions = getUpdateContentBlockProgressApiContentBlocksBlockIdProgressPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (content blocks + quiz –∫–∞—Ä—Ç–æ—á–∫–∏)
 * @summary Get Task Items
 */
export const getTaskItemsApiTasksItemsGet = (
    params?: GetTaskItemsApiTasksItemsGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/tasks/items`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTaskItemsApiTasksItemsGetQueryKey = (params?: GetTaskItemsApiTasksItemsGetParams,) => {
    return [`/api/tasks/items`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTaskItemsApiTasksItemsGetQueryOptions = <TData = Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>, TError = HTTPValidationErrorType>(params?: GetTaskItemsApiTasksItemsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTaskItemsApiTasksItemsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>> = ({ signal }) => getTaskItemsApiTasksItemsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTaskItemsApiTasksItemsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>>
export type GetTaskItemsApiTasksItemsGetQueryError = HTTPValidationErrorType


export function useGetTaskItemsApiTasksItemsGet<TData = Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetTaskItemsApiTasksItemsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskItemsApiTasksItemsGet<TData = Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTaskItemsApiTasksItemsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskItemsApiTasksItemsGet<TData = Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTaskItemsApiTasksItemsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Task Items
 */

export function useGetTaskItemsApiTasksItemsGet<TData = Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>, TError = HTTPValidationErrorType>(
 params?: GetTaskItemsApiTasksItemsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskItemsApiTasksItemsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTaskItemsApiTasksItemsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Task Categories
 */
export const getTaskCategoriesApiTasksCategoriesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/tasks/categories`, method: 'GET', signal
    },
      );
    }
  

export const getGetTaskCategoriesApiTasksCategoriesGetQueryKey = () => {
    return [`/api/tasks/categories`] as const;
    }

    
export const getGetTaskCategoriesApiTasksCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTaskCategoriesApiTasksCategoriesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>> = ({ signal }) => getTaskCategoriesApiTasksCategoriesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTaskCategoriesApiTasksCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>>
export type GetTaskCategoriesApiTasksCategoriesGetQueryError = unknown


export function useGetTaskCategoriesApiTasksCategoriesGet<TData = Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskCategoriesApiTasksCategoriesGet<TData = Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTaskCategoriesApiTasksCategoriesGet<TData = Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Task Categories
 */

export function useGetTaskCategoriesApiTasksCategoriesGet<TData = Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskCategoriesApiTasksCategoriesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTaskCategoriesApiTasksCategoriesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –∑–∞–¥–∞—á —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
 * @summary Get Companies
 */
export const getCompaniesApiTasksCompaniesGet = (
    params?: GetCompaniesApiTasksCompaniesGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/tasks/companies`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetCompaniesApiTasksCompaniesGetQueryKey = (params?: GetCompaniesApiTasksCompaniesGetParams,) => {
    return [`/api/tasks/companies`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCompaniesApiTasksCompaniesGetQueryOptions = <TData = Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>, TError = HTTPValidationErrorType>(params?: GetCompaniesApiTasksCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompaniesApiTasksCompaniesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>> = ({ signal }) => getCompaniesApiTasksCompaniesGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCompaniesApiTasksCompaniesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>>
export type GetCompaniesApiTasksCompaniesGetQueryError = HTTPValidationErrorType


export function useGetCompaniesApiTasksCompaniesGet<TData = Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetCompaniesApiTasksCompaniesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>,
          TError,
          Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompaniesApiTasksCompaniesGet<TData = Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>, TError = HTTPValidationErrorType>(
 params?: GetCompaniesApiTasksCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>,
          TError,
          Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompaniesApiTasksCompaniesGet<TData = Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>, TError = HTTPValidationErrorType>(
 params?: GetCompaniesApiTasksCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Companies
 */

export function useGetCompaniesApiTasksCompaniesGet<TData = Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>, TError = HTTPValidationErrorType>(
 params?: GetCompaniesApiTasksCompaniesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompaniesApiTasksCompaniesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCompaniesApiTasksCompaniesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Stats Overview
 */
export const getUserStatsOverviewApiStatsOverviewGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/stats/overview`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserStatsOverviewApiStatsOverviewGetQueryKey = () => {
    return [`/api/stats/overview`] as const;
    }

    
export const getGetUserStatsOverviewApiStatsOverviewGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserStatsOverviewApiStatsOverviewGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>> = ({ signal }) => getUserStatsOverviewApiStatsOverviewGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserStatsOverviewApiStatsOverviewGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>>
export type GetUserStatsOverviewApiStatsOverviewGetQueryError = unknown


export function useGetUserStatsOverviewApiStatsOverviewGet<TData = Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>,
          TError,
          Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserStatsOverviewApiStatsOverviewGet<TData = Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>,
          TError,
          Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserStatsOverviewApiStatsOverviewGet<TData = Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Stats Overview
 */

export function useGetUserStatsOverviewApiStatsOverviewGet<TData = Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatsOverviewApiStatsOverviewGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserStatsOverviewApiStatsOverviewGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
 * @summary Get Content Stats
 */
export const getContentStatsApiStatsContentGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/stats/content`, method: 'GET', signal
    },
      );
    }
  

export const getGetContentStatsApiStatsContentGetQueryKey = () => {
    return [`/api/stats/content`] as const;
    }

    
export const getGetContentStatsApiStatsContentGetQueryOptions = <TData = Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContentStatsApiStatsContentGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>> = ({ signal }) => getContentStatsApiStatsContentGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContentStatsApiStatsContentGetQueryResult = NonNullable<Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>>
export type GetContentStatsApiStatsContentGetQueryError = unknown


export function useGetContentStatsApiStatsContentGet<TData = Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>,
          TError,
          Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentStatsApiStatsContentGet<TData = Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>,
          TError,
          Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContentStatsApiStatsContentGet<TData = Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Content Stats
 */

export function useGetContentStatsApiStatsContentGet<TData = Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContentStatsApiStatsContentGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContentStatsApiStatsContentGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–æ—Ä–∏–∏
 * @summary Get Theory Stats
 */
export const getTheoryStatsApiStatsTheoryGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/stats/theory`, method: 'GET', signal
    },
      );
    }
  

export const getGetTheoryStatsApiStatsTheoryGetQueryKey = () => {
    return [`/api/stats/theory`] as const;
    }

    
export const getGetTheoryStatsApiStatsTheoryGetQueryOptions = <TData = Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTheoryStatsApiStatsTheoryGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>> = ({ signal }) => getTheoryStatsApiStatsTheoryGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTheoryStatsApiStatsTheoryGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>>
export type GetTheoryStatsApiStatsTheoryGetQueryError = unknown


export function useGetTheoryStatsApiStatsTheoryGet<TData = Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryStatsApiStatsTheoryGet<TData = Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>,
          TError,
          Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTheoryStatsApiStatsTheoryGet<TData = Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Theory Stats
 */

export function useGetTheoryStatsApiStatsTheoryGet<TData = Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTheoryStatsApiStatsTheoryGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTheoryStatsApiStatsTheoryGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ roadmap —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 * @summary Get Roadmap Stats
 */
export const getRoadmapStatsApiStatsRoadmapGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/stats/roadmap`, method: 'GET', signal
    },
      );
    }
  

export const getGetRoadmapStatsApiStatsRoadmapGetQueryKey = () => {
    return [`/api/stats/roadmap`] as const;
    }

    
export const getGetRoadmapStatsApiStatsRoadmapGetQueryOptions = <TData = Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoadmapStatsApiStatsRoadmapGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>> = ({ signal }) => getRoadmapStatsApiStatsRoadmapGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRoadmapStatsApiStatsRoadmapGetQueryResult = NonNullable<Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>>
export type GetRoadmapStatsApiStatsRoadmapGetQueryError = unknown


export function useGetRoadmapStatsApiStatsRoadmapGet<TData = Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>,
          TError,
          Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoadmapStatsApiStatsRoadmapGet<TData = Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>,
          TError,
          Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoadmapStatsApiStatsRoadmapGet<TData = Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Roadmap Stats
 */

export function useGetRoadmapStatsApiStatsRoadmapGet<TData = Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoadmapStatsApiStatsRoadmapGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRoadmapStatsApiStatsRoadmapGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
 * @summary Get Admin Stats
 */
export const getAdminStatsApiAdminStatsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetAdminStatsApiAdminStatsGetQueryKey = () => {
    return [`/api/admin/stats`] as const;
    }

    
export const getGetAdminStatsApiAdminStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminStatsApiAdminStatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>> = ({ signal }) => getAdminStatsApiAdminStatsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminStatsApiAdminStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>>
export type GetAdminStatsApiAdminStatsGetQueryError = unknown


export function useGetAdminStatsApiAdminStatsGet<TData = Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminStatsApiAdminStatsGet<TData = Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminStatsApiAdminStatsGet<TData = Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin Stats
 */

export function useGetAdminStatsApiAdminStatsGet<TData = Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminStatsApiAdminStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminStatsApiAdminStatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @summary Get Admin Users
 */
export const getAdminUsersApiAdminUsersGet = (
    params?: GetAdminUsersApiAdminUsersGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/users`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAdminUsersApiAdminUsersGetQueryKey = (params?: GetAdminUsersApiAdminUsersGetParams,) => {
    return [`/api/admin/users`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminUsersApiAdminUsersGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError = HTTPValidationErrorType>(params?: GetAdminUsersApiAdminUsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminUsersApiAdminUsersGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>> = ({ signal }) => getAdminUsersApiAdminUsersGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminUsersApiAdminUsersGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>>
export type GetAdminUsersApiAdminUsersGetQueryError = HTTPValidationErrorType


export function useGetAdminUsersApiAdminUsersGet<TData = Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetAdminUsersApiAdminUsersGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminUsersApiAdminUsersGet<TData = Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError = HTTPValidationErrorType>(
 params?: GetAdminUsersApiAdminUsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminUsersApiAdminUsersGet<TData = Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError = HTTPValidationErrorType>(
 params?: GetAdminUsersApiAdminUsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin Users
 */

export function useGetAdminUsersApiAdminUsersGet<TData = Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError = HTTPValidationErrorType>(
 params?: GetAdminUsersApiAdminUsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminUsersApiAdminUsersGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Create Admin User
 */
export const createAdminUserApiAdminUsersPost = (
    createUserRequestType: CreateUserRequestType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserRequestType, signal
    },
      );
    }
  


export const getCreateAdminUserApiAdminUsersPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminUserApiAdminUsersPost>>, TError,{data: CreateUserRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createAdminUserApiAdminUsersPost>>, TError,{data: CreateUserRequestType}, TContext> => {

const mutationKey = ['createAdminUserApiAdminUsersPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAdminUserApiAdminUsersPost>>, {data: CreateUserRequestType}> = (props) => {
          const {data} = props ?? {};

          return  createAdminUserApiAdminUsersPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAdminUserApiAdminUsersPostMutationResult = NonNullable<Awaited<ReturnType<typeof createAdminUserApiAdminUsersPost>>>
    export type CreateAdminUserApiAdminUsersPostMutationBody = CreateUserRequestType
    export type CreateAdminUserApiAdminUsersPostMutationError = HTTPValidationErrorType

    /**
 * @summary Create Admin User
 */
export const useCreateAdminUserApiAdminUsersPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminUserApiAdminUsersPost>>, TError,{data: CreateUserRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createAdminUserApiAdminUsersPost>>,
        TError,
        {data: CreateUserRequestType},
        TContext
      > => {

      const mutationOptions = getCreateAdminUserApiAdminUsersPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Update Admin User
 */
export const updateAdminUserApiAdminUsersUserIdPut = (
    userId: number,
    updateUserRequestType: UpdateUserRequestType,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/users/${userId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserRequestType
    },
      );
    }
  


export const getUpdateAdminUserApiAdminUsersUserIdPutMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminUserApiAdminUsersUserIdPut>>, TError,{userId: number;data: UpdateUserRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateAdminUserApiAdminUsersUserIdPut>>, TError,{userId: number;data: UpdateUserRequestType}, TContext> => {

const mutationKey = ['updateAdminUserApiAdminUsersUserIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAdminUserApiAdminUsersUserIdPut>>, {userId: number;data: UpdateUserRequestType}> = (props) => {
          const {userId,data} = props ?? {};

          return  updateAdminUserApiAdminUsersUserIdPut(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAdminUserApiAdminUsersUserIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdminUserApiAdminUsersUserIdPut>>>
    export type UpdateAdminUserApiAdminUsersUserIdPutMutationBody = UpdateUserRequestType
    export type UpdateAdminUserApiAdminUsersUserIdPutMutationError = HTTPValidationErrorType

    /**
 * @summary Update Admin User
 */
export const useUpdateAdminUserApiAdminUsersUserIdPut = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminUserApiAdminUsersUserIdPut>>, TError,{userId: number;data: UpdateUserRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAdminUserApiAdminUsersUserIdPut>>,
        TError,
        {userId: number;data: UpdateUserRequestType},
        TContext
      > => {

      const mutationOptions = getUpdateAdminUserApiAdminUsersUserIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Delete Admin User
 */
export const deleteAdminUserApiAdminUsersUserIdDelete = (
    userId: number,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/users/${userId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteAdminUserApiAdminUsersUserIdDeleteMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminUserApiAdminUsersUserIdDelete>>, TError,{userId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminUserApiAdminUsersUserIdDelete>>, TError,{userId: number}, TContext> => {

const mutationKey = ['deleteAdminUserApiAdminUsersUserIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminUserApiAdminUsersUserIdDelete>>, {userId: number}> = (props) => {
          const {userId} = props ?? {};

          return  deleteAdminUserApiAdminUsersUserIdDelete(userId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminUserApiAdminUsersUserIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminUserApiAdminUsersUserIdDelete>>>
    
    export type DeleteAdminUserApiAdminUsersUserIdDeleteMutationError = HTTPValidationErrorType

    /**
 * @summary Delete Admin User
 */
export const useDeleteAdminUserApiAdminUsersUserIdDelete = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminUserApiAdminUsersUserIdDelete>>, TError,{userId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminUserApiAdminUsersUserIdDelete>>,
        TError,
        {userId: number},
        TContext
      > => {

      const mutationOptions = getDeleteAdminUserApiAdminUsersUserIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
 * @summary Get Admin Content Stats
 */
export const getAdminContentStatsApiAdminContentStatsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/content/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetAdminContentStatsApiAdminContentStatsGetQueryKey = () => {
    return [`/api/admin/content/stats`] as const;
    }

    
export const getGetAdminContentStatsApiAdminContentStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminContentStatsApiAdminContentStatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>> = ({ signal }) => getAdminContentStatsApiAdminContentStatsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminContentStatsApiAdminContentStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>>
export type GetAdminContentStatsApiAdminContentStatsGetQueryError = unknown


export function useGetAdminContentStatsApiAdminContentStatsGet<TData = Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminContentStatsApiAdminContentStatsGet<TData = Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminContentStatsApiAdminContentStatsGet<TData = Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin Content Stats
 */

export function useGetAdminContentStatsApiAdminContentStatsGet<TData = Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentStatsApiAdminContentStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminContentStatsApiAdminContentStatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
 * @summary Get Admin Content Files
 */
export const getAdminContentFilesApiAdminContentFilesGet = (
    params?: GetAdminContentFilesApiAdminContentFilesGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/content/files`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAdminContentFilesApiAdminContentFilesGetQueryKey = (params?: GetAdminContentFilesApiAdminContentFilesGetParams,) => {
    return [`/api/admin/content/files`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminContentFilesApiAdminContentFilesGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>, TError = HTTPValidationErrorType>(params?: GetAdminContentFilesApiAdminContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminContentFilesApiAdminContentFilesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>> = ({ signal }) => getAdminContentFilesApiAdminContentFilesGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminContentFilesApiAdminContentFilesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>>
export type GetAdminContentFilesApiAdminContentFilesGetQueryError = HTTPValidationErrorType


export function useGetAdminContentFilesApiAdminContentFilesGet<TData = Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetAdminContentFilesApiAdminContentFilesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminContentFilesApiAdminContentFilesGet<TData = Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetAdminContentFilesApiAdminContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminContentFilesApiAdminContentFilesGet<TData = Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetAdminContentFilesApiAdminContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin Content Files
 */

export function useGetAdminContentFilesApiAdminContentFilesGet<TData = Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>, TError = HTTPValidationErrorType>(
 params?: GetAdminContentFilesApiAdminContentFilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentFilesApiAdminContentFilesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminContentFilesApiAdminContentFilesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Create Admin Content File
 */
export const createAdminContentFileApiAdminContentFilesPost = (
    createContentFileRequestType: CreateContentFileRequestType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/content/files`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createContentFileRequestType, signal
    },
      );
    }
  


export const getCreateAdminContentFileApiAdminContentFilesPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminContentFileApiAdminContentFilesPost>>, TError,{data: CreateContentFileRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createAdminContentFileApiAdminContentFilesPost>>, TError,{data: CreateContentFileRequestType}, TContext> => {

const mutationKey = ['createAdminContentFileApiAdminContentFilesPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAdminContentFileApiAdminContentFilesPost>>, {data: CreateContentFileRequestType}> = (props) => {
          const {data} = props ?? {};

          return  createAdminContentFileApiAdminContentFilesPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAdminContentFileApiAdminContentFilesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createAdminContentFileApiAdminContentFilesPost>>>
    export type CreateAdminContentFileApiAdminContentFilesPostMutationBody = CreateContentFileRequestType
    export type CreateAdminContentFileApiAdminContentFilesPostMutationError = HTTPValidationErrorType

    /**
 * @summary Create Admin Content File
 */
export const useCreateAdminContentFileApiAdminContentFilesPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminContentFileApiAdminContentFilesPost>>, TError,{data: CreateContentFileRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createAdminContentFileApiAdminContentFilesPost>>,
        TError,
        {data: CreateContentFileRequestType},
        TContext
      > => {

      const mutationOptions = getCreateAdminContentFileApiAdminContentFilesPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
 * @summary Get Admin Content Blocks
 */
export const getAdminContentBlocksApiAdminContentBlocksGet = (
    params?: GetAdminContentBlocksApiAdminContentBlocksGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/content/blocks`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAdminContentBlocksApiAdminContentBlocksGetQueryKey = (params?: GetAdminContentBlocksApiAdminContentBlocksGetParams,) => {
    return [`/api/admin/content/blocks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminContentBlocksApiAdminContentBlocksGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>, TError = HTTPValidationErrorType>(params?: GetAdminContentBlocksApiAdminContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminContentBlocksApiAdminContentBlocksGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>> = ({ signal }) => getAdminContentBlocksApiAdminContentBlocksGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminContentBlocksApiAdminContentBlocksGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>>
export type GetAdminContentBlocksApiAdminContentBlocksGetQueryError = HTTPValidationErrorType


export function useGetAdminContentBlocksApiAdminContentBlocksGet<TData = Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetAdminContentBlocksApiAdminContentBlocksGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminContentBlocksApiAdminContentBlocksGet<TData = Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetAdminContentBlocksApiAdminContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminContentBlocksApiAdminContentBlocksGet<TData = Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetAdminContentBlocksApiAdminContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin Content Blocks
 */

export function useGetAdminContentBlocksApiAdminContentBlocksGet<TData = Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>, TError = HTTPValidationErrorType>(
 params?: GetAdminContentBlocksApiAdminContentBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminContentBlocksApiAdminContentBlocksGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminContentBlocksApiAdminContentBlocksGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Create Admin Content Block
 */
export const createAdminContentBlockApiAdminContentBlocksPost = (
    createContentBlockRequestType: CreateContentBlockRequestType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/content/blocks`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createContentBlockRequestType, signal
    },
      );
    }
  


export const getCreateAdminContentBlockApiAdminContentBlocksPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminContentBlockApiAdminContentBlocksPost>>, TError,{data: CreateContentBlockRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createAdminContentBlockApiAdminContentBlocksPost>>, TError,{data: CreateContentBlockRequestType}, TContext> => {

const mutationKey = ['createAdminContentBlockApiAdminContentBlocksPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAdminContentBlockApiAdminContentBlocksPost>>, {data: CreateContentBlockRequestType}> = (props) => {
          const {data} = props ?? {};

          return  createAdminContentBlockApiAdminContentBlocksPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAdminContentBlockApiAdminContentBlocksPostMutationResult = NonNullable<Awaited<ReturnType<typeof createAdminContentBlockApiAdminContentBlocksPost>>>
    export type CreateAdminContentBlockApiAdminContentBlocksPostMutationBody = CreateContentBlockRequestType
    export type CreateAdminContentBlockApiAdminContentBlocksPostMutationError = HTTPValidationErrorType

    /**
 * @summary Create Admin Content Block
 */
export const useCreateAdminContentBlockApiAdminContentBlocksPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminContentBlockApiAdminContentBlocksPost>>, TError,{data: CreateContentBlockRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createAdminContentBlockApiAdminContentBlocksPost>>,
        TError,
        {data: CreateContentBlockRequestType},
        TContext
      > => {

      const mutationOptions = getCreateAdminContentBlockApiAdminContentBlocksPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–µ–æ—Ä–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
 * @summary Get Admin Theory Cards
 */
export const getAdminTheoryCardsApiAdminTheoryCardsGet = (
    params?: GetAdminTheoryCardsApiAdminTheoryCardsGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/theory/cards`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAdminTheoryCardsApiAdminTheoryCardsGetQueryKey = (params?: GetAdminTheoryCardsApiAdminTheoryCardsGetParams,) => {
    return [`/api/admin/theory/cards`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminTheoryCardsApiAdminTheoryCardsGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>, TError = HTTPValidationErrorType>(params?: GetAdminTheoryCardsApiAdminTheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminTheoryCardsApiAdminTheoryCardsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>> = ({ signal }) => getAdminTheoryCardsApiAdminTheoryCardsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminTheoryCardsApiAdminTheoryCardsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>>
export type GetAdminTheoryCardsApiAdminTheoryCardsGetQueryError = HTTPValidationErrorType


export function useGetAdminTheoryCardsApiAdminTheoryCardsGet<TData = Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetAdminTheoryCardsApiAdminTheoryCardsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminTheoryCardsApiAdminTheoryCardsGet<TData = Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetAdminTheoryCardsApiAdminTheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminTheoryCardsApiAdminTheoryCardsGet<TData = Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetAdminTheoryCardsApiAdminTheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin Theory Cards
 */

export function useGetAdminTheoryCardsApiAdminTheoryCardsGet<TData = Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>, TError = HTTPValidationErrorType>(
 params?: GetAdminTheoryCardsApiAdminTheoryCardsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminTheoryCardsApiAdminTheoryCardsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminTheoryCardsApiAdminTheoryCardsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ–æ—Ä–∏–∏
 * @summary Create Admin Theory Card
 */
export const createAdminTheoryCardApiAdminTheoryCardsPost = (
    createTheoryCardRequestType: CreateTheoryCardRequestType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/theory/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTheoryCardRequestType, signal
    },
      );
    }
  


export const getCreateAdminTheoryCardApiAdminTheoryCardsPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminTheoryCardApiAdminTheoryCardsPost>>, TError,{data: CreateTheoryCardRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createAdminTheoryCardApiAdminTheoryCardsPost>>, TError,{data: CreateTheoryCardRequestType}, TContext> => {

const mutationKey = ['createAdminTheoryCardApiAdminTheoryCardsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAdminTheoryCardApiAdminTheoryCardsPost>>, {data: CreateTheoryCardRequestType}> = (props) => {
          const {data} = props ?? {};

          return  createAdminTheoryCardApiAdminTheoryCardsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAdminTheoryCardApiAdminTheoryCardsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createAdminTheoryCardApiAdminTheoryCardsPost>>>
    export type CreateAdminTheoryCardApiAdminTheoryCardsPostMutationBody = CreateTheoryCardRequestType
    export type CreateAdminTheoryCardApiAdminTheoryCardsPostMutationError = HTTPValidationErrorType

    /**
 * @summary Create Admin Theory Card
 */
export const useCreateAdminTheoryCardApiAdminTheoryCardsPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminTheoryCardApiAdminTheoryCardsPost>>, TError,{data: CreateTheoryCardRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createAdminTheoryCardApiAdminTheoryCardsPost>>,
        TError,
        {data: CreateTheoryCardRequestType},
        TContext
      > => {

      const mutationOptions = getCreateAdminTheoryCardApiAdminTheoryCardsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Delete Admin Content File
 */
export const deleteAdminContentFileApiAdminContentFilesFileIdDelete = (
    fileId: string,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/content/files/${fileId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteAdminContentFileApiAdminContentFilesFileIdDeleteMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminContentFileApiAdminContentFilesFileIdDelete>>, TError,{fileId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminContentFileApiAdminContentFilesFileIdDelete>>, TError,{fileId: string}, TContext> => {

const mutationKey = ['deleteAdminContentFileApiAdminContentFilesFileIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminContentFileApiAdminContentFilesFileIdDelete>>, {fileId: string}> = (props) => {
          const {fileId} = props ?? {};

          return  deleteAdminContentFileApiAdminContentFilesFileIdDelete(fileId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminContentFileApiAdminContentFilesFileIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminContentFileApiAdminContentFilesFileIdDelete>>>
    
    export type DeleteAdminContentFileApiAdminContentFilesFileIdDeleteMutationError = HTTPValidationErrorType

    /**
 * @summary Delete Admin Content File
 */
export const useDeleteAdminContentFileApiAdminContentFilesFileIdDelete = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminContentFileApiAdminContentFilesFileIdDelete>>, TError,{fileId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminContentFileApiAdminContentFilesFileIdDelete>>,
        TError,
        {fileId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminContentFileApiAdminContentFilesFileIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Update Admin Content File
 */
export const updateAdminContentFileApiAdminContentFilesFileIdPut = (
    fileId: string,
    updateContentFileRequestType: UpdateContentFileRequestType,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/content/files/${fileId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateContentFileRequestType
    },
      );
    }
  


export const getUpdateAdminContentFileApiAdminContentFilesFileIdPutMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminContentFileApiAdminContentFilesFileIdPut>>, TError,{fileId: string;data: UpdateContentFileRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateAdminContentFileApiAdminContentFilesFileIdPut>>, TError,{fileId: string;data: UpdateContentFileRequestType}, TContext> => {

const mutationKey = ['updateAdminContentFileApiAdminContentFilesFileIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAdminContentFileApiAdminContentFilesFileIdPut>>, {fileId: string;data: UpdateContentFileRequestType}> = (props) => {
          const {fileId,data} = props ?? {};

          return  updateAdminContentFileApiAdminContentFilesFileIdPut(fileId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAdminContentFileApiAdminContentFilesFileIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdminContentFileApiAdminContentFilesFileIdPut>>>
    export type UpdateAdminContentFileApiAdminContentFilesFileIdPutMutationBody = UpdateContentFileRequestType
    export type UpdateAdminContentFileApiAdminContentFilesFileIdPutMutationError = HTTPValidationErrorType

    /**
 * @summary Update Admin Content File
 */
export const useUpdateAdminContentFileApiAdminContentFilesFileIdPut = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminContentFileApiAdminContentFilesFileIdPut>>, TError,{fileId: string;data: UpdateContentFileRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAdminContentFileApiAdminContentFilesFileIdPut>>,
        TError,
        {fileId: string;data: UpdateContentFileRequestType},
        TContext
      > => {

      const mutationOptions = getUpdateAdminContentFileApiAdminContentFilesFileIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Update Admin Content Block
 */
export const updateAdminContentBlockApiAdminContentBlocksBlockIdPut = (
    blockId: string,
    updateContentBlockRequestType: UpdateContentBlockRequestType,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/content/blocks/${blockId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateContentBlockRequestType
    },
      );
    }
  


export const getUpdateAdminContentBlockApiAdminContentBlocksBlockIdPutMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminContentBlockApiAdminContentBlocksBlockIdPut>>, TError,{blockId: string;data: UpdateContentBlockRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateAdminContentBlockApiAdminContentBlocksBlockIdPut>>, TError,{blockId: string;data: UpdateContentBlockRequestType}, TContext> => {

const mutationKey = ['updateAdminContentBlockApiAdminContentBlocksBlockIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAdminContentBlockApiAdminContentBlocksBlockIdPut>>, {blockId: string;data: UpdateContentBlockRequestType}> = (props) => {
          const {blockId,data} = props ?? {};

          return  updateAdminContentBlockApiAdminContentBlocksBlockIdPut(blockId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAdminContentBlockApiAdminContentBlocksBlockIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdminContentBlockApiAdminContentBlocksBlockIdPut>>>
    export type UpdateAdminContentBlockApiAdminContentBlocksBlockIdPutMutationBody = UpdateContentBlockRequestType
    export type UpdateAdminContentBlockApiAdminContentBlocksBlockIdPutMutationError = HTTPValidationErrorType

    /**
 * @summary Update Admin Content Block
 */
export const useUpdateAdminContentBlockApiAdminContentBlocksBlockIdPut = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminContentBlockApiAdminContentBlocksBlockIdPut>>, TError,{blockId: string;data: UpdateContentBlockRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAdminContentBlockApiAdminContentBlocksBlockIdPut>>,
        TError,
        {blockId: string;data: UpdateContentBlockRequestType},
        TContext
      > => {

      const mutationOptions = getUpdateAdminContentBlockApiAdminContentBlocksBlockIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Delete Admin Content Block
 */
export const deleteAdminContentBlockApiAdminContentBlocksBlockIdDelete = (
    blockId: string,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/content/blocks/${blockId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteAdminContentBlockApiAdminContentBlocksBlockIdDeleteMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminContentBlockApiAdminContentBlocksBlockIdDelete>>, TError,{blockId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminContentBlockApiAdminContentBlocksBlockIdDelete>>, TError,{blockId: string}, TContext> => {

const mutationKey = ['deleteAdminContentBlockApiAdminContentBlocksBlockIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminContentBlockApiAdminContentBlocksBlockIdDelete>>, {blockId: string}> = (props) => {
          const {blockId} = props ?? {};

          return  deleteAdminContentBlockApiAdminContentBlocksBlockIdDelete(blockId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminContentBlockApiAdminContentBlocksBlockIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminContentBlockApiAdminContentBlocksBlockIdDelete>>>
    
    export type DeleteAdminContentBlockApiAdminContentBlocksBlockIdDeleteMutationError = HTTPValidationErrorType

    /**
 * @summary Delete Admin Content Block
 */
export const useDeleteAdminContentBlockApiAdminContentBlocksBlockIdDelete = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminContentBlockApiAdminContentBlocksBlockIdDelete>>, TError,{blockId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminContentBlockApiAdminContentBlocksBlockIdDelete>>,
        TError,
        {blockId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminContentBlockApiAdminContentBlocksBlockIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ–æ—Ä–∏–∏
 * @summary Update Admin Theory Card
 */
export const updateAdminTheoryCardApiAdminTheoryCardsCardIdPut = (
    cardId: string,
    updateTheoryCardRequestType: UpdateTheoryCardRequestType,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/theory/cards/${cardId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateTheoryCardRequestType
    },
      );
    }
  


export const getUpdateAdminTheoryCardApiAdminTheoryCardsCardIdPutMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminTheoryCardApiAdminTheoryCardsCardIdPut>>, TError,{cardId: string;data: UpdateTheoryCardRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateAdminTheoryCardApiAdminTheoryCardsCardIdPut>>, TError,{cardId: string;data: UpdateTheoryCardRequestType}, TContext> => {

const mutationKey = ['updateAdminTheoryCardApiAdminTheoryCardsCardIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAdminTheoryCardApiAdminTheoryCardsCardIdPut>>, {cardId: string;data: UpdateTheoryCardRequestType}> = (props) => {
          const {cardId,data} = props ?? {};

          return  updateAdminTheoryCardApiAdminTheoryCardsCardIdPut(cardId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAdminTheoryCardApiAdminTheoryCardsCardIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdminTheoryCardApiAdminTheoryCardsCardIdPut>>>
    export type UpdateAdminTheoryCardApiAdminTheoryCardsCardIdPutMutationBody = UpdateTheoryCardRequestType
    export type UpdateAdminTheoryCardApiAdminTheoryCardsCardIdPutMutationError = HTTPValidationErrorType

    /**
 * @summary Update Admin Theory Card
 */
export const useUpdateAdminTheoryCardApiAdminTheoryCardsCardIdPut = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminTheoryCardApiAdminTheoryCardsCardIdPut>>, TError,{cardId: string;data: UpdateTheoryCardRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAdminTheoryCardApiAdminTheoryCardsCardIdPut>>,
        TError,
        {cardId: string;data: UpdateTheoryCardRequestType},
        TContext
      > => {

      const mutationOptions = getUpdateAdminTheoryCardApiAdminTheoryCardsCardIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ–æ—Ä–∏–∏
 * @summary Delete Admin Theory Card
 */
export const deleteAdminTheoryCardApiAdminTheoryCardsCardIdDelete = (
    cardId: string,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/theory/cards/${cardId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteAdminTheoryCardApiAdminTheoryCardsCardIdDeleteMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminTheoryCardApiAdminTheoryCardsCardIdDelete>>, TError,{cardId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminTheoryCardApiAdminTheoryCardsCardIdDelete>>, TError,{cardId: string}, TContext> => {

const mutationKey = ['deleteAdminTheoryCardApiAdminTheoryCardsCardIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminTheoryCardApiAdminTheoryCardsCardIdDelete>>, {cardId: string}> = (props) => {
          const {cardId} = props ?? {};

          return  deleteAdminTheoryCardApiAdminTheoryCardsCardIdDelete(cardId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminTheoryCardApiAdminTheoryCardsCardIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminTheoryCardApiAdminTheoryCardsCardIdDelete>>>
    
    export type DeleteAdminTheoryCardApiAdminTheoryCardsCardIdDeleteMutationError = HTTPValidationErrorType

    /**
 * @summary Delete Admin Theory Card
 */
export const useDeleteAdminTheoryCardApiAdminTheoryCardsCardIdDelete = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminTheoryCardApiAdminTheoryCardsCardIdDelete>>, TError,{cardId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminTheoryCardApiAdminTheoryCardsCardIdDelete>>,
        TError,
        {cardId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminTheoryCardApiAdminTheoryCardsCardIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @summary Bulk Delete Content
 */
export const bulkDeleteContentApiAdminContentBulkDeleteDelete = (
    bulkDeleteRequestType: BulkDeleteRequestType,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/content/bulk-delete`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: bulkDeleteRequestType
    },
      );
    }
  


export const getBulkDeleteContentApiAdminContentBulkDeleteDeleteMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bulkDeleteContentApiAdminContentBulkDeleteDelete>>, TError,{data: BulkDeleteRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof bulkDeleteContentApiAdminContentBulkDeleteDelete>>, TError,{data: BulkDeleteRequestType}, TContext> => {

const mutationKey = ['bulkDeleteContentApiAdminContentBulkDeleteDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bulkDeleteContentApiAdminContentBulkDeleteDelete>>, {data: BulkDeleteRequestType}> = (props) => {
          const {data} = props ?? {};

          return  bulkDeleteContentApiAdminContentBulkDeleteDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BulkDeleteContentApiAdminContentBulkDeleteDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof bulkDeleteContentApiAdminContentBulkDeleteDelete>>>
    export type BulkDeleteContentApiAdminContentBulkDeleteDeleteMutationBody = BulkDeleteRequestType
    export type BulkDeleteContentApiAdminContentBulkDeleteDeleteMutationError = HTTPValidationErrorType

    /**
 * @summary Bulk Delete Content
 */
export const useBulkDeleteContentApiAdminContentBulkDeleteDelete = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bulkDeleteContentApiAdminContentBulkDeleteDelete>>, TError,{data: BulkDeleteRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof bulkDeleteContentApiAdminContentBulkDeleteDelete>>,
        TError,
        {data: BulkDeleteRequestType},
        TContext
      > => {

      const mutationOptions = getBulkDeleteContentApiAdminContentBulkDeleteDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–µ–æ—Ä–∏–∏
 * @summary Bulk Delete Theory
 */
export const bulkDeleteTheoryApiAdminTheoryBulkDeleteDelete = (
    bulkDeleteRequestType: BulkDeleteRequestType,
 ) => {
      
      
      return apiClient<unknown>(
      {url: `/api/admin/theory/bulk-delete`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: bulkDeleteRequestType
    },
      );
    }
  


export const getBulkDeleteTheoryApiAdminTheoryBulkDeleteDeleteMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bulkDeleteTheoryApiAdminTheoryBulkDeleteDelete>>, TError,{data: BulkDeleteRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof bulkDeleteTheoryApiAdminTheoryBulkDeleteDelete>>, TError,{data: BulkDeleteRequestType}, TContext> => {

const mutationKey = ['bulkDeleteTheoryApiAdminTheoryBulkDeleteDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bulkDeleteTheoryApiAdminTheoryBulkDeleteDelete>>, {data: BulkDeleteRequestType}> = (props) => {
          const {data} = props ?? {};

          return  bulkDeleteTheoryApiAdminTheoryBulkDeleteDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BulkDeleteTheoryApiAdminTheoryBulkDeleteDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof bulkDeleteTheoryApiAdminTheoryBulkDeleteDelete>>>
    export type BulkDeleteTheoryApiAdminTheoryBulkDeleteDeleteMutationBody = BulkDeleteRequestType
    export type BulkDeleteTheoryApiAdminTheoryBulkDeleteDeleteMutationError = HTTPValidationErrorType

    /**
 * @summary Bulk Delete Theory
 */
export const useBulkDeleteTheoryApiAdminTheoryBulkDeleteDelete = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bulkDeleteTheoryApiAdminTheoryBulkDeleteDelete>>, TError,{data: BulkDeleteRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof bulkDeleteTheoryApiAdminTheoryBulkDeleteDelete>>,
        TError,
        {data: BulkDeleteRequestType},
        TContext
      > => {

      const mutationOptions = getBulkDeleteTheoryApiAdminTheoryBulkDeleteDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
 * @summary Get Supported Languages
 */
export const getSupportedLanguagesApiCodeEditorLanguagesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<SupportedLanguagePublicType[]>(
      {url: `/api/code-editor/languages`, method: 'GET', signal
    },
      );
    }
  

export const getGetSupportedLanguagesApiCodeEditorLanguagesGetQueryKey = () => {
    return [`/api/code-editor/languages`] as const;
    }

    
export const getGetSupportedLanguagesApiCodeEditorLanguagesGetQueryOptions = <TData = Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSupportedLanguagesApiCodeEditorLanguagesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>> = ({ signal }) => getSupportedLanguagesApiCodeEditorLanguagesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSupportedLanguagesApiCodeEditorLanguagesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>>
export type GetSupportedLanguagesApiCodeEditorLanguagesGetQueryError = unknown


export function useGetSupportedLanguagesApiCodeEditorLanguagesGet<TData = Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>,
          TError,
          Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSupportedLanguagesApiCodeEditorLanguagesGet<TData = Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>,
          TError,
          Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSupportedLanguagesApiCodeEditorLanguagesGet<TData = Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Supported Languages
 */

export function useGetSupportedLanguagesApiCodeEditorLanguagesGet<TData = Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportedLanguagesApiCodeEditorLanguagesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSupportedLanguagesApiCodeEditorLanguagesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ
 * @summary Execute Code
 */
export const executeCodeApiCodeEditorExecutePost = (
    codeExecutionRequestType: CodeExecutionRequestType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<CodeExecutionResponseType>(
      {url: `/api/code-editor/execute`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: codeExecutionRequestType, signal
    },
      );
    }
  


export const getExecuteCodeApiCodeEditorExecutePostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof executeCodeApiCodeEditorExecutePost>>, TError,{data: CodeExecutionRequestType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof executeCodeApiCodeEditorExecutePost>>, TError,{data: CodeExecutionRequestType}, TContext> => {

const mutationKey = ['executeCodeApiCodeEditorExecutePost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof executeCodeApiCodeEditorExecutePost>>, {data: CodeExecutionRequestType}> = (props) => {
          const {data} = props ?? {};

          return  executeCodeApiCodeEditorExecutePost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ExecuteCodeApiCodeEditorExecutePostMutationResult = NonNullable<Awaited<ReturnType<typeof executeCodeApiCodeEditorExecutePost>>>
    export type ExecuteCodeApiCodeEditorExecutePostMutationBody = CodeExecutionRequestType
    export type ExecuteCodeApiCodeEditorExecutePostMutationError = HTTPValidationErrorType

    /**
 * @summary Execute Code
 */
export const useExecuteCodeApiCodeEditorExecutePost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof executeCodeApiCodeEditorExecutePost>>, TError,{data: CodeExecutionRequestType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof executeCodeApiCodeEditorExecutePost>>,
        TError,
        {data: CodeExecutionRequestType},
        TContext
      > => {

      const mutationOptions = getExecuteCodeApiCodeEditorExecutePostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 * @summary Get Execution Result
 */
export const getExecutionResultApiCodeEditorExecutionsExecutionIdGet = (
    executionId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<CodeExecutionResponseType>(
      {url: `/api/code-editor/executions/${executionId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetExecutionResultApiCodeEditorExecutionsExecutionIdGetQueryKey = (executionId: string,) => {
    return [`/api/code-editor/executions/${executionId}`] as const;
    }

    
export const getGetExecutionResultApiCodeEditorExecutionsExecutionIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExecutionResultApiCodeEditorExecutionsExecutionIdGetQueryKey(executionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>> = ({ signal }) => getExecutionResultApiCodeEditorExecutionsExecutionIdGet(executionId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(executionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExecutionResultApiCodeEditorExecutionsExecutionIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>>
export type GetExecutionResultApiCodeEditorExecutionsExecutionIdGetQueryError = HTTPValidationErrorType


export function useGetExecutionResultApiCodeEditorExecutionsExecutionIdGet<TData = Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(
 executionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>,
          TError,
          Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExecutionResultApiCodeEditorExecutionsExecutionIdGet<TData = Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(
 executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>,
          TError,
          Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExecutionResultApiCodeEditorExecutionsExecutionIdGet<TData = Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(
 executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Execution Result
 */

export function useGetExecutionResultApiCodeEditorExecutionsExecutionIdGet<TData = Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>, TError = HTTPValidationErrorType>(
 executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionResultApiCodeEditorExecutionsExecutionIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetExecutionResultApiCodeEditorExecutionsExecutionIdGetQueryOptions(executionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Executions
 */
export const getUserExecutionsApiCodeEditorExecutionsGet = (
    params?: GetUserExecutionsApiCodeEditorExecutionsGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<CodeExecutionResponseType[]>(
      {url: `/api/code-editor/executions`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserExecutionsApiCodeEditorExecutionsGetQueryKey = (params?: GetUserExecutionsApiCodeEditorExecutionsGetParams,) => {
    return [`/api/code-editor/executions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserExecutionsApiCodeEditorExecutionsGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(params?: GetUserExecutionsApiCodeEditorExecutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserExecutionsApiCodeEditorExecutionsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>> = ({ signal }) => getUserExecutionsApiCodeEditorExecutionsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserExecutionsApiCodeEditorExecutionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>>
export type GetUserExecutionsApiCodeEditorExecutionsGetQueryError = HTTPValidationErrorType


export function useGetUserExecutionsApiCodeEditorExecutionsGet<TData = Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GetUserExecutionsApiCodeEditorExecutionsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserExecutionsApiCodeEditorExecutionsGet<TData = Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserExecutionsApiCodeEditorExecutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserExecutionsApiCodeEditorExecutionsGet<TData = Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserExecutionsApiCodeEditorExecutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Executions
 */

export function useGetUserExecutionsApiCodeEditorExecutionsGet<TData = Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>, TError = HTTPValidationErrorType>(
 params?: GetUserExecutionsApiCodeEditorExecutionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserExecutionsApiCodeEditorExecutionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserExecutionsApiCodeEditorExecutionsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Save Solution
 */
export const saveSolutionApiCodeEditorSolutionsPost = (
    userCodeSolutionCreateType: UserCodeSolutionCreateType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserCodeSolutionResponseType>(
      {url: `/api/code-editor/solutions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCodeSolutionCreateType, signal
    },
      );
    }
  


export const getSaveSolutionApiCodeEditorSolutionsPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveSolutionApiCodeEditorSolutionsPost>>, TError,{data: UserCodeSolutionCreateType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof saveSolutionApiCodeEditorSolutionsPost>>, TError,{data: UserCodeSolutionCreateType}, TContext> => {

const mutationKey = ['saveSolutionApiCodeEditorSolutionsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveSolutionApiCodeEditorSolutionsPost>>, {data: UserCodeSolutionCreateType}> = (props) => {
          const {data} = props ?? {};

          return  saveSolutionApiCodeEditorSolutionsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SaveSolutionApiCodeEditorSolutionsPostMutationResult = NonNullable<Awaited<ReturnType<typeof saveSolutionApiCodeEditorSolutionsPost>>>
    export type SaveSolutionApiCodeEditorSolutionsPostMutationBody = UserCodeSolutionCreateType
    export type SaveSolutionApiCodeEditorSolutionsPostMutationError = HTTPValidationErrorType

    /**
 * @summary Save Solution
 */
export const useSaveSolutionApiCodeEditorSolutionsPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveSolutionApiCodeEditorSolutionsPost>>, TError,{data: UserCodeSolutionCreateType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof saveSolutionApiCodeEditorSolutionsPost>>,
        TError,
        {data: UserCodeSolutionCreateType},
        TContext
      > => {

      const mutationOptions = getSaveSolutionApiCodeEditorSolutionsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞
 * @summary Get Block Solutions
 */
export const getBlockSolutionsApiCodeEditorSolutionsBlockIdGet = (
    blockId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserCodeSolutionResponseType[]>(
      {url: `/api/code-editor/solutions/${blockId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetBlockSolutionsApiCodeEditorSolutionsBlockIdGetQueryKey = (blockId: string,) => {
    return [`/api/code-editor/solutions/${blockId}`] as const;
    }

    
export const getGetBlockSolutionsApiCodeEditorSolutionsBlockIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBlockSolutionsApiCodeEditorSolutionsBlockIdGetQueryKey(blockId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>> = ({ signal }) => getBlockSolutionsApiCodeEditorSolutionsBlockIdGet(blockId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(blockId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBlockSolutionsApiCodeEditorSolutionsBlockIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>>
export type GetBlockSolutionsApiCodeEditorSolutionsBlockIdGetQueryError = HTTPValidationErrorType


export function useGetBlockSolutionsApiCodeEditorSolutionsBlockIdGet<TData = Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBlockSolutionsApiCodeEditorSolutionsBlockIdGet<TData = Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>,
          TError,
          Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBlockSolutionsApiCodeEditorSolutionsBlockIdGet<TData = Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Block Solutions
 */

export function useGetBlockSolutionsApiCodeEditorSolutionsBlockIdGet<TData = Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>, TError = HTTPValidationErrorType>(
 blockId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockSolutionsApiCodeEditorSolutionsBlockIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBlockSolutionsApiCodeEditorSolutionsBlockIdGetQueryOptions(blockId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Update Solution
 */
export const updateSolutionApiCodeEditorSolutionsSolutionIdPut = (
    solutionId: string,
    userCodeSolutionUpdateType: UserCodeSolutionUpdateType,
 ) => {
      
      
      return apiClient<UserCodeSolutionResponseType>(
      {url: `/api/code-editor/solutions/${solutionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userCodeSolutionUpdateType
    },
      );
    }
  


export const getUpdateSolutionApiCodeEditorSolutionsSolutionIdPutMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSolutionApiCodeEditorSolutionsSolutionIdPut>>, TError,{solutionId: string;data: UserCodeSolutionUpdateType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateSolutionApiCodeEditorSolutionsSolutionIdPut>>, TError,{solutionId: string;data: UserCodeSolutionUpdateType}, TContext> => {

const mutationKey = ['updateSolutionApiCodeEditorSolutionsSolutionIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSolutionApiCodeEditorSolutionsSolutionIdPut>>, {solutionId: string;data: UserCodeSolutionUpdateType}> = (props) => {
          const {solutionId,data} = props ?? {};

          return  updateSolutionApiCodeEditorSolutionsSolutionIdPut(solutionId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateSolutionApiCodeEditorSolutionsSolutionIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateSolutionApiCodeEditorSolutionsSolutionIdPut>>>
    export type UpdateSolutionApiCodeEditorSolutionsSolutionIdPutMutationBody = UserCodeSolutionUpdateType
    export type UpdateSolutionApiCodeEditorSolutionsSolutionIdPutMutationError = HTTPValidationErrorType

    /**
 * @summary Update Solution
 */
export const useUpdateSolutionApiCodeEditorSolutionsSolutionIdPut = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSolutionApiCodeEditorSolutionsSolutionIdPut>>, TError,{solutionId: string;data: UserCodeSolutionUpdateType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateSolutionApiCodeEditorSolutionsSolutionIdPut>>,
        TError,
        {solutionId: string;data: UserCodeSolutionUpdateType},
        TContext
      > => {

      const mutationOptions = getUpdateSolutionApiCodeEditorSolutionsSolutionIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get Execution Stats
 */
export const getExecutionStatsApiCodeEditorStatsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<ExecutionStatsType>(
      {url: `/api/code-editor/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetExecutionStatsApiCodeEditorStatsGetQueryKey = () => {
    return [`/api/code-editor/stats`] as const;
    }

    
export const getGetExecutionStatsApiCodeEditorStatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExecutionStatsApiCodeEditorStatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>> = ({ signal }) => getExecutionStatsApiCodeEditorStatsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExecutionStatsApiCodeEditorStatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>>
export type GetExecutionStatsApiCodeEditorStatsGetQueryError = unknown


export function useGetExecutionStatsApiCodeEditorStatsGet<TData = Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExecutionStatsApiCodeEditorStatsGet<TData = Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExecutionStatsApiCodeEditorStatsGet<TData = Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Execution Stats
 */

export function useGetExecutionStatsApiCodeEditorStatsGet<TData = Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExecutionStatsApiCodeEditorStatsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetExecutionStatsApiCodeEditorStatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate Mindmap
 */
export const generateMindmapApiMindmapGenerateGet = (
    params?: GenerateMindmapApiMindmapGenerateGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<GenerateMindmapApiMindmapGenerateGet200>(
      {url: `/api/mindmap/generate`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGenerateMindmapApiMindmapGenerateGetQueryKey = (params?: GenerateMindmapApiMindmapGenerateGetParams,) => {
    return [`/api/mindmap/generate`, ...(params ? [params]: [])] as const;
    }

    
export const getGenerateMindmapApiMindmapGenerateGetQueryOptions = <TData = Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>, TError = HTTPValidationErrorType>(params?: GenerateMindmapApiMindmapGenerateGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGenerateMindmapApiMindmapGenerateGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>> = ({ signal }) => generateMindmapApiMindmapGenerateGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GenerateMindmapApiMindmapGenerateGetQueryResult = NonNullable<Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>>
export type GenerateMindmapApiMindmapGenerateGetQueryError = HTTPValidationErrorType


export function useGenerateMindmapApiMindmapGenerateGet<TData = Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>, TError = HTTPValidationErrorType>(
 params: undefined |  GenerateMindmapApiMindmapGenerateGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>,
          TError,
          Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGenerateMindmapApiMindmapGenerateGet<TData = Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>, TError = HTTPValidationErrorType>(
 params?: GenerateMindmapApiMindmapGenerateGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>,
          TError,
          Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGenerateMindmapApiMindmapGenerateGet<TData = Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>, TError = HTTPValidationErrorType>(
 params?: GenerateMindmapApiMindmapGenerateGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Generate Mindmap
 */

export function useGenerateMindmapApiMindmapGenerateGet<TData = Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>, TError = HTTPValidationErrorType>(
 params?: GenerateMindmapApiMindmapGenerateGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateMindmapApiMindmapGenerateGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGenerateMindmapApiMindmapGenerateGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Topic Tasks
 */
export const getTopicTasksApiMindmapTopicTopicKeyTasksGet = (
    topicKey: string,
    params?: GetTopicTasksApiMindmapTopicTopicKeyTasksGetParams,
 signal?: AbortSignal
) => {
      
      
      return apiClient<GetTopicTasksApiMindmapTopicTopicKeyTasksGet200>(
      {url: `/api/mindmap/topic/${topicKey}/tasks`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTopicTasksApiMindmapTopicTopicKeyTasksGetQueryKey = (topicKey: string,
    params?: GetTopicTasksApiMindmapTopicTopicKeyTasksGetParams,) => {
    return [`/api/mindmap/topic/${topicKey}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTopicTasksApiMindmapTopicTopicKeyTasksGetQueryOptions = <TData = Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(topicKey: string,
    params?: GetTopicTasksApiMindmapTopicTopicKeyTasksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTopicTasksApiMindmapTopicTopicKeyTasksGetQueryKey(topicKey,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>> = ({ signal }) => getTopicTasksApiMindmapTopicTopicKeyTasksGet(topicKey,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(topicKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTopicTasksApiMindmapTopicTopicKeyTasksGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>>
export type GetTopicTasksApiMindmapTopicTopicKeyTasksGetQueryError = HTTPValidationErrorType


export function useGetTopicTasksApiMindmapTopicTopicKeyTasksGet<TData = Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(
 topicKey: string,
    params: undefined |  GetTopicTasksApiMindmapTopicTopicKeyTasksGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>,
          TError,
          Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopicTasksApiMindmapTopicTopicKeyTasksGet<TData = Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(
 topicKey: string,
    params?: GetTopicTasksApiMindmapTopicTopicKeyTasksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>,
          TError,
          Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopicTasksApiMindmapTopicTopicKeyTasksGet<TData = Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(
 topicKey: string,
    params?: GetTopicTasksApiMindmapTopicTopicKeyTasksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Topic Tasks
 */

export function useGetTopicTasksApiMindmapTopicTopicKeyTasksGet<TData = Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>, TError = HTTPValidationErrorType>(
 topicKey: string,
    params?: GetTopicTasksApiMindmapTopicTopicKeyTasksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopicTasksApiMindmapTopicTopicKeyTasksGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTopicTasksApiMindmapTopicTopicKeyTasksGetQueryOptions(topicKey,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Detailed Progress
 */
export const getUserDetailedProgressApiProgressUserUserIdDetailedGet = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserDetailedProgressResponseType>(
      {url: `/api/progress/user/${userId}/detailed`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserDetailedProgressApiProgressUserUserIdDetailedGetQueryKey = (userId: number,) => {
    return [`/api/progress/user/${userId}/detailed`] as const;
    }

    
export const getGetUserDetailedProgressApiProgressUserUserIdDetailedGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>, TError = HTTPValidationErrorType>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserDetailedProgressApiProgressUserUserIdDetailedGetQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>> = ({ signal }) => getUserDetailedProgressApiProgressUserUserIdDetailedGet(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserDetailedProgressApiProgressUserUserIdDetailedGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>>
export type GetUserDetailedProgressApiProgressUserUserIdDetailedGetQueryError = HTTPValidationErrorType


export function useGetUserDetailedProgressApiProgressUserUserIdDetailedGet<TData = Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>, TError = HTTPValidationErrorType>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserDetailedProgressApiProgressUserUserIdDetailedGet<TData = Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>, TError = HTTPValidationErrorType>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserDetailedProgressApiProgressUserUserIdDetailedGet<TData = Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>, TError = HTTPValidationErrorType>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Detailed Progress
 */

export function useGetUserDetailedProgressApiProgressUserUserIdDetailedGet<TData = Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>, TError = HTTPValidationErrorType>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDetailedProgressApiProgressUserUserIdDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserDetailedProgressApiProgressUserUserIdDetailedGetQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get My Detailed Progress
 */
export const getMyDetailedProgressApiProgressUserMyDetailedGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserDetailedProgressResponseType>(
      {url: `/api/progress/user/my/detailed`, method: 'GET', signal
    },
      );
    }
  

export const getGetMyDetailedProgressApiProgressUserMyDetailedGetQueryKey = () => {
    return [`/api/progress/user/my/detailed`] as const;
    }

    
export const getGetMyDetailedProgressApiProgressUserMyDetailedGetQueryOptions = <TData = Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyDetailedProgressApiProgressUserMyDetailedGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>> = ({ signal }) => getMyDetailedProgressApiProgressUserMyDetailedGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMyDetailedProgressApiProgressUserMyDetailedGetQueryResult = NonNullable<Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>>
export type GetMyDetailedProgressApiProgressUserMyDetailedGetQueryError = unknown


export function useGetMyDetailedProgressApiProgressUserMyDetailedGet<TData = Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyDetailedProgressApiProgressUserMyDetailedGet<TData = Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>,
          TError,
          Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyDetailedProgressApiProgressUserMyDetailedGet<TData = Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get My Detailed Progress
 */

export function useGetMyDetailedProgressApiProgressUserMyDetailedGet<TData = Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyDetailedProgressApiProgressUserMyDetailedGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMyDetailedProgressApiProgressUserMyDetailedGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 * @summary Record Task Attempt
 */
export const recordTaskAttemptApiProgressAttemptsPost = (
    taskAttemptCreateType: TaskAttemptCreateType,
 signal?: AbortSignal
) => {
      
      
      return apiClient<TaskAttemptResponseType>(
      {url: `/api/progress/attempts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: taskAttemptCreateType, signal
    },
      );
    }
  


export const getRecordTaskAttemptApiProgressAttemptsPostMutationOptions = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof recordTaskAttemptApiProgressAttemptsPost>>, TError,{data: TaskAttemptCreateType}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof recordTaskAttemptApiProgressAttemptsPost>>, TError,{data: TaskAttemptCreateType}, TContext> => {

const mutationKey = ['recordTaskAttemptApiProgressAttemptsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof recordTaskAttemptApiProgressAttemptsPost>>, {data: TaskAttemptCreateType}> = (props) => {
          const {data} = props ?? {};

          return  recordTaskAttemptApiProgressAttemptsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RecordTaskAttemptApiProgressAttemptsPostMutationResult = NonNullable<Awaited<ReturnType<typeof recordTaskAttemptApiProgressAttemptsPost>>>
    export type RecordTaskAttemptApiProgressAttemptsPostMutationBody = TaskAttemptCreateType
    export type RecordTaskAttemptApiProgressAttemptsPostMutationError = HTTPValidationErrorType

    /**
 * @summary Record Task Attempt
 */
export const useRecordTaskAttemptApiProgressAttemptsPost = <TError = HTTPValidationErrorType,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof recordTaskAttemptApiProgressAttemptsPost>>, TError,{data: TaskAttemptCreateType}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof recordTaskAttemptApiProgressAttemptsPost>>,
        TError,
        {data: TaskAttemptCreateType},
        TContext
      > => {

      const mutationOptions = getRecordTaskAttemptApiProgressAttemptsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 * @summary Get Progress Analytics
 */
export const getProgressAnalyticsApiProgressAnalyticsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<ProgressAnalyticsType>(
      {url: `/api/progress/analytics`, method: 'GET', signal
    },
      );
    }
  

export const getGetProgressAnalyticsApiProgressAnalyticsGetQueryKey = () => {
    return [`/api/progress/analytics`] as const;
    }

    
export const getGetProgressAnalyticsApiProgressAnalyticsGetQueryOptions = <TData = Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProgressAnalyticsApiProgressAnalyticsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>> = ({ signal }) => getProgressAnalyticsApiProgressAnalyticsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProgressAnalyticsApiProgressAnalyticsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>>
export type GetProgressAnalyticsApiProgressAnalyticsGetQueryError = unknown


export function useGetProgressAnalyticsApiProgressAnalyticsGet<TData = Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>,
          TError,
          Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressAnalyticsApiProgressAnalyticsGet<TData = Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>,
          TError,
          Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProgressAnalyticsApiProgressAnalyticsGet<TData = Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Progress Analytics
 */

export function useGetProgressAnalyticsApiProgressAnalyticsGet<TData = Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProgressAnalyticsApiProgressAnalyticsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProgressAnalyticsApiProgressAnalyticsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Health Check
 */
export const healthCheckApiProgressHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/progress/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckApiProgressHealthGetQueryKey = () => {
    return [`/api/progress/health`] as const;
    }

    
export const getHealthCheckApiProgressHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckApiProgressHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>> = ({ signal }) => healthCheckApiProgressHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckApiProgressHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>>
export type HealthCheckApiProgressHealthGetQueryError = unknown


export function useHealthCheckApiProgressHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiProgressHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckApiProgressHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckApiProgressHealthGet<TData = Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckApiProgressHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckApiProgressHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ë–∞–∑–æ–≤—ã–π endpoint
 * @summary Root
 */
export const rootGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  

export const getRootGetQueryKey = () => {
    return [`/`] as const;
    }

    
export const getRootGetQueryOptions = <TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRootGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rootGet>>> = ({ signal }) => rootGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RootGetQueryResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>
export type RootGetQueryError = unknown


export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Root
 */

export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRootGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get Profile
 */
export const getProfileApiProfileGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/api/profile`, method: 'GET', signal
    },
      );
    }
  

export const getGetProfileApiProfileGetQueryKey = () => {
    return [`/api/profile`] as const;
    }

    
export const getGetProfileApiProfileGetQueryOptions = <TData = Awaited<ReturnType<typeof getProfileApiProfileGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileApiProfileGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProfileApiProfileGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfileApiProfileGet>>> = ({ signal }) => getProfileApiProfileGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProfileApiProfileGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProfileApiProfileGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProfileApiProfileGet>>>
export type GetProfileApiProfileGetQueryError = unknown


export function useGetProfileApiProfileGet<TData = Awaited<ReturnType<typeof getProfileApiProfileGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileApiProfileGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfileApiProfileGet>>,
          TError,
          Awaited<ReturnType<typeof getProfileApiProfileGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProfileApiProfileGet<TData = Awaited<ReturnType<typeof getProfileApiProfileGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileApiProfileGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfileApiProfileGet>>,
          TError,
          Awaited<ReturnType<typeof getProfileApiProfileGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProfileApiProfileGet<TData = Awaited<ReturnType<typeof getProfileApiProfileGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileApiProfileGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Profile
 */

export function useGetProfileApiProfileGet<TData = Awaited<ReturnType<typeof getProfileApiProfileGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileApiProfileGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProfileApiProfileGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
 * @summary Health Check
 */
export const healthCheckHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<unknown>(
      {url: `/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckHealthGetQueryKey = () => {
    return [`/health`] as const;
    }

    
export const getHealthCheckHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckHealthGet>>> = ({ signal }) => healthCheckHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckHealthGet>>>
export type HealthCheckHealthGetQueryError = unknown


export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
