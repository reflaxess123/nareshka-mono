import React from 'react';
import { Handle, Position } from '@xyflow/react';
import type { NodeProps } from '@xyflow/react';
import styles from './ClusterCard.module.scss';

interface ClusterCardData {
  id: number;
  name: string;
  category_id: string;
  category_name: string;
  questions_count: number;
  interview_penetration: number;
  keywords: string[];
  example_question: string;
  top_companies: string[];
  difficulty_distribution: { 
    junior: number; 
    middle: number; 
    senior: number; 
  };
  size: number;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–µ–π
  strongConnections?: Array<{
    name: string;
    strength: number;
  }>;
}

interface ClusterCardProps extends NodeProps<ClusterCardData> {
  isHovered?: boolean;
  isFocused?: boolean;
}

const categoryIcons: Record<string, string> = {
  'javascript_core': 'üü°',
  'react': '‚öõÔ∏è', 
  'typescript': 'üî∑',
  'soft_skills': 'üë•',
  '–∞–ª–≥–æ—Ä–∏—Ç–º—ã': 'üßÆ',
  '—Å–µ—Ç': 'üåê',
  '–≤–µ—Ä—Å—Ç–∫–∞': 'üé®',
  '–±—Ä–∞—É–∑–µ—Ä—ã': 'üåç',
  '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': 'üèóÔ∏è',
  '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'üõ†Ô∏è',
  '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç': '‚ö°',
  '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'üß™',
  '–¥—Ä—É–≥–æ–µ': 'üìù'
};

const categoryColors: Record<string, string> = {
  'javascript_core': '#f7df1e',
  'react': '#61dafb',
  'typescript': '#3178c6',
  'soft_skills': '#ff6b6b',
  '–∞–ª–≥–æ—Ä–∏—Ç–º—ã': '#dc143c',
  '—Å–µ—Ç': '#ff6b35',
  '–≤–µ—Ä—Å—Ç–∫–∞': '#e91e63',
  '–±—Ä–∞—É–∑–µ—Ä—ã': '#9c27b0',
  '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': '#673ab7',
  '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': '#3f51b5',
  '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç': '#00bcd4',
  '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': '#4caf50',
  '–¥—Ä—É–≥–æ–µ': '#9e9e9e'
};

export const ClusterCard: React.FC<ClusterCardProps> = ({ 
  data, 
  selected, 
  isHovered = false,
  isFocused = false 
}) => {
  const isTopCluster = data.interview_penetration > 15;
  const categoryColor = categoryColors[data.category_id] || '#999';
  const categoryIcon = categoryIcons[data.category_id] || 'üìù';
  
  // –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–∫–∏
  const cardWidth = isTopCluster ? 320 : 280;
  const cardHeight = isTopCluster ? 'auto' : 'auto';
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const getDifficultyText = () => {
    const { junior, middle, senior } = data.difficulty_distribution;
    const parts = [];
    if (junior > 0) parts.push(`${junior.toFixed(0)}% Jun`);
    if (middle > 0) parts.push(`${middle.toFixed(0)}% Mid`);
    if (senior > 0) parts.push(`${senior.toFixed(0)}% Sen`);
    return parts.length > 0 ? parts.join(' ‚Ä¢ ') : '–£—Ä–æ–≤–µ–Ω—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
  };

  return (
    <div 
      className={`${styles.clusterCard} ${selected ? styles.selected : ''} ${isHovered ? styles.hovered : ''} ${isFocused ? styles.focused : ''} ${isTopCluster ? styles.topCluster : ''}`}
      style={{ width: cardWidth }}
    >
      {/* Handles –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π */}
      <Handle type="source" position={Position.Top} style={{ background: categoryColor }} />
      <Handle type="source" position={Position.Right} style={{ background: categoryColor }} />
      <Handle type="source" position={Position.Bottom} style={{ background: categoryColor }} />
      <Handle type="source" position={Position.Left} style={{ background: categoryColor }} />
      <Handle type="target" position={Position.Top} style={{ background: categoryColor, top: -3 }} />
      <Handle type="target" position={Position.Right} style={{ background: categoryColor, right: -3 }} />
      <Handle type="target" position={Position.Bottom} style={{ background: categoryColor, bottom: -3 }} />
      <Handle type="target" position={Position.Left} style={{ background: categoryColor, left: -3 }} />

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π */}
      <div 
        className={styles.categoryHeader}
        style={{ backgroundColor: categoryColor }}
      >
        <span className={styles.categoryIcon}>{categoryIcon}</span>
        <span className={styles.categoryName}>{data.category_name}</span>
        <span className={styles.penetrationBadge}>
          {data.interview_penetration.toFixed(1)}%
        </span>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className={styles.cardContent}>
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ */}
        <h3 className={styles.clusterTitle}>
          {data.name.length > 40 ? `${data.name.substring(0, 37)}...` : data.name}
        </h3>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className={styles.stats}>
          <div className={styles.statItem}>
            <span className={styles.statValue}>{data.questions_count}</span>
            <span className={styles.statLabel}>–≤–æ–ø—Ä–æ—Å–æ–≤</span>
          </div>
          <div className={styles.statDivider} />
          <div className={styles.statItem}>
            <span className={styles.statValue}>{data.interview_penetration.toFixed(0)}%</span>
            <span className={styles.statLabel}>–∏–Ω—Ç–µ—Ä–≤—å—é</span>
          </div>
        </div>

        {/* –¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–∏ */}
        {data.top_companies && data.top_companies.length > 0 && (
          <div className={styles.companies}>
            <div className={styles.sectionIcon}>üíº</div>
            <div className={styles.companyList}>
              {data.top_companies.slice(0, 3).map((company, idx) => (
                <span key={company} className={styles.company}>
                  {company}{idx < Math.min(data.top_companies.length - 1, 2) ? ' ‚Ä¢ ' : ''}
                </span>
              ))}
            </div>
          </div>
        )}

        {/* –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ */}
        <div className={styles.difficulty}>
          <div className={styles.sectionIcon}>üéØ</div>
          <div className={styles.difficultyText}>
            {getDifficultyText()}
          </div>
        </div>

        {/* –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ */}
        {data.keywords && data.keywords.length > 0 && (
          <div className={styles.keywords}>
            {data.keywords.slice(0, 4).map(keyword => (
              <span key={keyword} className={styles.keyword}>
                #{keyword}
              </span>
            ))}
            {data.keywords.length > 4 && (
              <span className={styles.keywordMore}>+{data.keywords.length - 4}</span>
            )}
          </div>
        )}

        {/* –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ hover/focus) */}
        {(isHovered || isFocused) && data.strongConnections && data.strongConnections.length > 0 && (
          <div className={styles.connections}>
            <div className={styles.sectionIcon}>‚ö°</div>
            <div className={styles.connectionsList}>
              {data.strongConnections.slice(0, 2).map(conn => (
                <span key={conn.name} className={styles.connection}>
                  {conn.name} ({(conn.strength * 100).toFixed(0)}%)
                </span>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ–ø –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ */}
      {isTopCluster && (
        <div className={styles.topBadge}>
          ‚≠ê –¢–û–ü
        </div>
      )}
    </div>
  );
};

export default ClusterCard;