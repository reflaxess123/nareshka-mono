import React from 'react';
import { Handle, Position } from '@xyflow/react';
import type { NodeProps } from '@xyflow/react';
import styles from './CategoryNode.module.scss';

interface CategoryNodeData {
  id: string;
  name: string;
  questionsCount: number;
  clustersCount: number;
  avgPenetration: number;
  isExpanded: boolean;
  clusters: Array<{
    id: number;
    name: string;
    questions_count: number;
    interview_penetration: number;
  }>;
}

interface CategoryNodeProps extends NodeProps<CategoryNodeData> {
  isHovered?: boolean;
}

const categoryColors: Record<string, string> = {
  'javascript_core': '#f7df1e',
  'react': '#61dafb',
  'typescript': '#3178c6',
  'soft_skills': '#ff6b6b',
  '–∞–ª–≥–æ—Ä–∏—Ç–º—ã': '#dc143c',
  '—Å–µ—Ç': '#ff6b35',
  '–≤–µ—Ä—Å—Ç–∫–∞': '#e91e63',
  '–±—Ä–∞—É–∑–µ—Ä—ã': '#9c27b0',
  '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': '#673ab7',
  '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': '#3f51b5',
  '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç': '#00bcd4',
  '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': '#4caf50',
  '–¥—Ä—É–≥–æ–µ': '#9e9e9e'
};

const categoryIcons: Record<string, string> = {
  'javascript_core': '‚ö°',
  'react': '‚öõÔ∏è', 
  'typescript': 'üî∑',
  'soft_skills': 'üë•',
  '–∞–ª–≥–æ—Ä–∏—Ç–º—ã': 'üßÆ',
  '—Å–µ—Ç': 'üåê',
  '–≤–µ—Ä—Å—Ç–∫–∞': 'üé®',
  '–±—Ä–∞—É–∑–µ—Ä—ã': 'üåç',
  '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': 'üèóÔ∏è',
  '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'üõ†Ô∏è',
  '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç': '‚ö°',
  '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'üß™',
  '–¥—Ä—É–≥–æ–µ': 'üìù'
};

export const CategoryNode: React.FC<CategoryNodeProps> = ({ 
  data, 
  selected, 
  isHovered = false 
}) => {
  const categoryColor = categoryColors[data.id] || '#999';
  const categoryIcon = categoryIcons[data.id] || 'üìù';
  
  // –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
  const maxQuestions = 2100; // JavaScript Core –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ
  const minWidth = 200;
  const maxWidth = 280;
  const width = Math.max(minWidth, Math.min(maxWidth, minWidth + (data.questionsCount / maxQuestions) * (maxWidth - minWidth)));
  
  // –£–±–∏—Ä–∞–µ–º —Ç–æ–ø –∫–ª–∞—Å—Ç–µ—Ä—ã - –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
  
  return (
    <div 
      className={`${styles.categoryNode} ${selected ? styles.selected : ''} ${isHovered ? styles.hovered : ''}`}
      style={{ width }}
    >
      {/* Handles –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π */}
      <Handle type="source" position={Position.Top} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="source" position={Position.Right} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="source" position={Position.Bottom} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="source" position={Position.Left} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="target" position={Position.Top} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="target" position={Position.Right} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="target" position={Position.Bottom} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="target" position={Position.Left} style={{ background: categoryColor, opacity: 0 }} />

      {/* –ë–ª–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      <div 
        className={styles.block}
        style={{ backgroundColor: categoryColor }}
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className={styles.header}>
          <div className={styles.icon}>{categoryIcon}</div>
          <div className={styles.categoryName}>{data.name}</div>
        </div>
        
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className={styles.stats}>
          <div className={styles.statItem}>
            <span className={styles.statNumber}>{data.questionsCount.toLocaleString('ru-RU')}</span>
            <span className={styles.statLabel}>–≤–æ–ø—Ä–æ—Å–æ–≤</span>
          </div>
          <div className={styles.statItem}>
            <span className={styles.statNumber}>{data.clustersCount}</span>
            <span className={styles.statLabel}>–∫–ª–∞—Å—Ç–µ—Ä–æ–≤</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CategoryNode;