import React from 'react';
import { Handle, Position } from '@xyflow/react';
import type { NodeProps } from '@xyflow/react';
import styles from './CircularClusterNode.module.scss';

interface CircularClusterNodeData {
  id: number;
  name: string;
  category_id: string;
  category_name: string;
  questions_count: number;
  interview_penetration: number;
  keywords: string[];
  example_question: string;
  top_companies: string[];
  difficulty_distribution: { 
    junior: number; 
    middle: number; 
    senior: number; 
  };
  size: number;
  // –ù–æ–≤—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–ª—è
  rank: number;
  isTopCluster: boolean;
  difficultyLevel: 'high' | 'medium' | 'low';
  demandStatus: string;
}

interface CircularClusterNodeProps extends NodeProps<CircularClusterNodeData> {
  isHovered?: boolean;
  isFocused?: boolean;
}

const categoryColors: Record<string, string> = {
  'javascript_core': '#f7df1e',
  'react': '#61dafb',
  'typescript': '#3178c6',
  'soft_skills': '#ff6b6b',
  '–∞–ª–≥–æ—Ä–∏—Ç–º—ã': '#dc143c',
  '—Å–µ—Ç': '#ff6b35',
  '–≤–µ—Ä—Å—Ç–∫–∞': '#e91e63',
  '–±—Ä–∞—É–∑–µ—Ä—ã': '#9c27b0',
  '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': '#673ab7',
  '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': '#3f51b5',
  '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç': '#00bcd4',
  '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': '#4caf50',
  '–¥—Ä—É–≥–æ–µ': '#9e9e9e'
};

const categoryIcons: Record<string, string> = {
  'javascript_core': '‚ö°',
  'react': '‚öõÔ∏è', 
  'typescript': 'üî∑',
  'soft_skills': 'üë•',
  '–∞–ª–≥–æ—Ä–∏—Ç–º—ã': 'üßÆ',
  '—Å–µ—Ç': 'üåê',
  '–≤–µ—Ä—Å—Ç–∫–∞': 'üé®',
  '–±—Ä–∞—É–∑–µ—Ä—ã': 'üåç',
  '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': 'üèóÔ∏è',
  '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'üõ†Ô∏è',
  '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç': '‚ö°',
  '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'üß™',
  '–¥—Ä—É–≥–æ–µ': 'üìù'
};

export const CircularClusterNode: React.FC<CircularClusterNodeProps> = ({ 
  data, 
  selected, 
  isHovered = false,
  isFocused = false 
}) => {
  const categoryColor = categoryColors[data.category_id] || '#999';
  const categoryIcon = categoryIcons[data.category_id] || 'üìù';
  
  // –†–∞–∑–º–µ—Ä –∫—Ä—É–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏
  const circleSize = data.isTopCluster ? 120 : 100;
  const fontSize = data.isTopCluster ? '14px' : '12px';
  
  return (
    <div 
      className={`${styles.circularNode} ${selected ? styles.selected : ''} ${isHovered ? styles.hovered : ''} ${isFocused ? styles.focused : ''} ${data.isTopCluster ? styles.topCluster : ''}`}
      style={{ width: circleSize, height: circleSize }}
    >
      {/* Handles –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π */}
      <Handle type="source" position={Position.Top} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="source" position={Position.Right} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="source" position={Position.Bottom} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="source" position={Position.Left} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="target" position={Position.Top} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="target" position={Position.Right} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="target" position={Position.Bottom} style={{ background: categoryColor, opacity: 0 }} />
      <Handle type="target" position={Position.Left} style={{ background: categoryColor, opacity: 0 }} />

      {/* –ö—Ä—É–≥–ª—ã–π —É–∑–µ–ª */}
      <div 
        className={styles.circle}
        style={{ 
          backgroundColor: categoryColor,
          width: circleSize,
          height: circleSize,
          fontSize
        }}
      >
        {/* –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className={styles.icon}>
          {categoryIcon}
        </div>
        
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className={styles.mainInfo}>
          <div className={styles.rank}>
            #{data.rank}
          </div>
          <div className={styles.penetration}>
            {data.interview_penetration.toFixed(0)}%
          </div>
          <div className={styles.questionsCount}>
            {data.questions_count}
          </div>
        </div>

        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ hover) */}
        {(isHovered || isFocused) && (
          <div className={styles.tooltip}>
            <div className={styles.clusterName}>
              {data.name.length > 30 ? `${data.name.substring(0, 27)}...` : data.name}
            </div>
            <div className={styles.categoryName}>
              {data.category_name}
            </div>
            <div className={styles.demandStatus}>
              {data.demandStatus}
            </div>
            <div className={styles.companies}>
              {data.top_companies.slice(0, 3).join(', ')}
            </div>
          </div>
        )}
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ–ø –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ */}
        {data.isTopCluster && (
          <div className={styles.topBadge}>
            ‚≠ê
          </div>
        )}
      </div>
    </div>
  );
};

export default CircularClusterNode;