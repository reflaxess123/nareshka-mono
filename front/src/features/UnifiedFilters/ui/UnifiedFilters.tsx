import React, { useState, useEffect, useCallback } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useGetCompaniesListApiV2InterviewsCompaniesListGet } from '@/shared/api/generated/api';
import { FilterSection } from './FilterSection';
import { CompanyFilter } from './CompanyFilter';
import { AdditionalFilter } from './AdditionalFilter';
import { useContentCategories, useCompanies } from '@/shared/hooks/useContentBlocks';
import { translateMainCategory, translateSubCategory } from '@/shared/constants/categoryTranslations';
import { useRole } from '@/shared/hooks/useRole';
import { Modal } from '@/shared/components/Modal';
import { SubscriptionPrompt } from '@/shared/components/SubscriptionPrompt';
import type { UnifiedFiltersProps } from '../model/types';
import { hasActiveFilters } from '../model/utils';
import styles from './UnifiedFilters.module.scss';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è API –¥–∞–Ω–Ω—ã—Ö
interface Category {
  id: string;
  name: string;
  questions_count: number;
  percentage: number;
}

interface Cluster {
  id: number;
  name: string;
  category_id: string;
  keywords: string[];
  questions_count: number;
}

interface PracticeCategory {
  name: string;
  subCategories: string[];
  totalCount: number;
  contentBlockCount: number;
  theoryQuizCount: number;
}

export const UnifiedFilters: React.FC<UnifiedFiltersProps> = ({
  type,
  filters,
  onFiltersChange,
  className,
}) => {
  const [expandedSections, setExpandedSections] = useState({
    categories: true,
    clusters: true,
    companies: true,
    additional: true,
  });

  const [isMobile, setIsMobile] = useState(false);
  const [showSubscriptionModal, setShowSubscriptionModal] = useState(false);

  // –•—É–∫–∏ –¥–ª—è practice —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const { data: practiceCategories } = useContentCategories();
  const { data: practiceCompanies } = useCompanies({
    mainCategories: filters.categories,
    subCategories: filters.subCategories,
  });
  const { canUseFilters } = useRole();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth <= 768);
    };

    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => window.removeEventListener('resize', checkScreenSize);
  }, []);

  // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  useEffect(() => {
    if (isMobile) {
      setExpandedSections((prev) => ({
        ...prev,
        clusters: false,
        additional: false,
      }));
    } else {
      setExpandedSections({
        categories: true,
        clusters: true,
        companies: true,
        additional: true,
      });
    }
  }, [isMobile]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
  const { data: companiesData, isLoading: companiesLoading } =
    useGetCompaniesListApiV2InterviewsCompaniesListGet({
      query: {
        enabled: type === 'interviews' || type === 'questions',
      },
    });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
  const { data: categories } = useQuery<Category[]>({
    queryKey: ['interview-categories'],
    queryFn: async () => {
      const response = await fetch('/api/v2/interview-categories/');
      if (!response.ok) throw new Error('Failed to fetch categories');
      return response.json();
    },
    enabled: type === 'questions'
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
  const { data: clusters } = useQuery<Cluster[]>({
    queryKey: ['interview-clusters', filters.categories],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (filters.categories?.length) {
        filters.categories.forEach(catId => params.append('category_id', catId));
      }
      params.append('limit', '200');

      const response = await fetch(`/api/v2/interview-categories/clusters/all?${params}`);
      if (!response.ok) throw new Error('Failed to fetch clusters');
      return response.json();
    },
    enabled: type === 'questions'
  });

  const handleCompaniesChange = useCallback((companies: string[]) => {
    onFiltersChange({
      ...filters,
      companies: companies.length > 0 ? companies : undefined,
    });
  }, [filters, onFiltersChange]);

  const handleCategoriesChange = useCallback((categories: string[]) => {
    onFiltersChange({
      ...filters,
      categories: categories.length > 0 ? categories : undefined,
      clusters: undefined, // –°–±—Ä–æ—Å –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    });
  }, [filters, onFiltersChange]);

  const handleClustersChange = useCallback((clusters: number[]) => {
    onFiltersChange({
      ...filters,
      clusters: clusters.length > 0 ? clusters : undefined,
    });
  }, [filters, onFiltersChange]);

  const handleHasAudioChange = useCallback((hasAudio: boolean) => {
    onFiltersChange({
      ...filters,
      has_audio: hasAudio || undefined,
    });
  }, [filters, onFiltersChange]);

  const handleReset = useCallback(() => {
    onFiltersChange({
      search: undefined,
      companies: undefined,
      has_audio: undefined,
      categories: undefined,
      clusters: undefined,
    });
  }, [onFiltersChange]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è practice —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handlePracticeMainCategoryToggle = useCallback((categoryName: string, checked: boolean) => {
    const currentCategories = filters.categories || [];
    let newCategories: string[];

    if (checked) {
      newCategories = [...currentCategories, categoryName];
    } else {
      newCategories = currentCategories.filter((cat) => cat !== categoryName);
    }

    onFiltersChange({
      ...filters,
      categories: newCategories.length > 0 ? newCategories : undefined,
      subCategories: undefined, // –°–±—Ä–æ—Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    });
  }, [filters, onFiltersChange]);

  const handlePracticeSubCategoryToggle = useCallback((subCategoryName: string, checked: boolean) => {
    const currentSubCategories = filters.subCategories || [];
    let newSubCategories: string[];

    if (checked) {
      newSubCategories = [...currentSubCategories, subCategoryName];
    } else {
      newSubCategories = currentSubCategories.filter((cat) => cat !== subCategoryName);
    }

    onFiltersChange({
      ...filters,
      subCategories: newSubCategories.length > 0 ? newSubCategories : undefined,
    });
  }, [filters, onFiltersChange]);

  const handlePracticeCompanyToggle = useCallback((companyName: string, checked: boolean) => {
    if (!canUseFilters) {
      setShowSubscriptionModal(true);
      return;
    }

    const currentCompanies = filters.companies || [];
    let newCompanies: string[];

    if (checked) {
      newCompanies = [...currentCompanies, companyName];
    } else {
      newCompanies = currentCompanies.filter((company) => company !== companyName);
    }

    onFiltersChange({
      ...filters,
      companies: newCompanies.length > 0 ? newCompanies : undefined,
    });
  }, [filters, onFiltersChange, canUseFilters]);

  const handlePracticeProgressToggle = useCallback((progress: 'completed' | 'not_completed', checked: boolean) => {
    onFiltersChange({
      ...filters,
      onlyCompleted: progress === 'completed' ? (checked || undefined) : filters.onlyCompleted,
    });
  }, [filters, onFiltersChange]);

  const toggleSection = (section: keyof typeof expandedSections) => {
    setExpandedSections((prev) => ({
      ...prev,
      [section]: !prev[section],
    }));
  };

  const getAvailableSubCategories = () => {
    if (!filters.categories?.length || !practiceCategories?.categories) return [];

    const allSubCategories = new Set<string>();
    filters.categories.forEach((mainCategory) => {
      const category = practiceCategories.categories.find(
        (cat: PracticeCategory) => cat.name === mainCategory
      );
      if (category) {
        category.subCategories.forEach((sub: string) =>
          allSubCategories.add(sub)
        );
      }
    });

    return Array.from(allSubCategories);
  };

  const activeFilters = hasActiveFilters(filters);
  const companiesList = React.useMemo(() => {
    if (!companiesData?.companies || companiesData.companies.length === 0) return [];
    // API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, —Ç–∞–∫ –∏ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
    if (typeof companiesData.companies[0] === 'string') {
      return (companiesData.companies as unknown as string[]).map((company: string) => ({ name: company, count: 0 }));
    }
    // API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å name –∏ count
    return companiesData.companies;
  }, [companiesData]);

  return (
    <div className={`${styles.unifiedFilters} ${className || ''}`}>

      {type === 'questions' && (
        <FilterSection
          title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
          icon="üìÅ"
          isExpanded={expandedSections.categories}
          onToggle={() => toggleSection('categories')}
        >
          <div className={styles.checkboxGroup}>
            {categories?.map((category) => (
              <label key={category.id} className={styles.checkboxLabel}>
                <input
                  type="checkbox"
                  checked={filters.categories?.includes(category.id) || false}
                  onChange={(e) => {
                    const newCategories = e.target.checked
                      ? [...(filters.categories || []), category.id]
                      : (filters.categories || []).filter(id => id !== category.id);
                    handleCategoriesChange(newCategories);
                  }}
                  className={styles.checkbox}
                />
                <span className={styles.labelText}>
                  {category.name} ({category.questions_count})
                </span>
              </label>
            ))}
          </div>
        </FilterSection>
      )}

      {type === 'questions' && (
        <FilterSection
          title="–ö–ª–∞—Å—Ç–µ—Ä—ã"
          icon="üè∑Ô∏è"
          isExpanded={expandedSections.clusters}
          onToggle={() => toggleSection('clusters')}
        >
          <div className={styles.checkboxGroup}>
            {clusters?.map((cluster) => (
              <label key={cluster.id} className={styles.checkboxLabel}>
                <input
                  type="checkbox"
                  checked={filters.clusters?.includes(cluster.id) || false}
                  onChange={(e) => {
                    const newClusters = e.target.checked
                      ? [...(filters.clusters || []), cluster.id]
                      : (filters.clusters || []).filter(id => id !== cluster.id);
                    handleClustersChange(newClusters);
                  }}
                  className={styles.checkbox}
                />
                <span className={styles.labelText}>
                  {cluster.name} ({cluster.questions_count})
                </span>
              </label>
            ))}
          </div>
        </FilterSection>
      )}

      {/* –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º */}
      {(type === 'interviews' || type === 'questions') && (
        <FilterSection
          title="–ö–æ–º–ø–∞–Ω–∏–∏"
          icon="üè¢"
          isExpanded={expandedSections.companies}
          onToggle={() => toggleSection('companies')}
        >
          <CompanyFilter
            companies={companiesList}
            selectedCompanies={filters.companies || []}
            onSelectionChange={handleCompaniesChange}
            isLoading={companiesLoading}
          />
        </FilterSection>
      )}

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
      {type === 'interviews' && (
        <FilterSection
          title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"
          icon="‚öôÔ∏è"
          isExpanded={expandedSections.additional}
          onToggle={() => toggleSection('additional')}
        >
          <AdditionalFilter
            hasAudio={filters.has_audio}
            onHasAudioChange={handleHasAudioChange}
          />
        </FilterSection>
      )}

      {/* –§–∏–ª—å—Ç—Ä—ã –¥–ª—è practice - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ */}
      {type === 'practice' && (
        <>
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          <FilterSection
            title="–¢–µ–º—ã"
            icon="üìÅ"
            isExpanded={expandedSections.categories}
            onToggle={() => toggleSection('categories')}
          >
            <div className={styles.checkboxGroup}>
              {practiceCategories?.categories?.map((category: PracticeCategory) => {
                const translatedName = translateMainCategory(category.name);
                const isChecked = filters.categories?.includes(category.name) || false;

                return (
                  <label key={category.name} className={styles.checkboxLabel}>
                    <input
                      type="checkbox"
                      checked={isChecked}
                      onChange={(e) => handlePracticeMainCategoryToggle(category.name, e.target.checked)}
                      className={styles.checkbox}
                    />
                    <span className={styles.labelText}>{translatedName}</span>
                  </label>
                );
              })}
            </div>
          </FilterSection>

          {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è */}
          {filters.categories?.length && filters.categories.length > 0 && (
            <FilterSection
              title="–ü–æ–¥—Ç–µ–º—ã"
              icon="üè∑Ô∏è"
              isExpanded={expandedSections.clusters}
              onToggle={() => toggleSection('clusters')}
            >
              <div className={styles.checkboxGroup}>
                {getAvailableSubCategories().map((subCategory: string) => {
                  const translatedName = translateSubCategory(subCategory);
                  const isChecked = filters.subCategories?.includes(subCategory) || false;

                  return (
                    <label key={subCategory} className={styles.checkboxLabel}>
                      <input
                        type="checkbox"
                        checked={isChecked}
                        onChange={(e) => handlePracticeSubCategoryToggle(subCategory, e.target.checked)}
                        className={styles.checkbox}
                      />
                      <span className={styles.labelText}>{translatedName}</span>
                    </label>
                  );
                })}
              </div>
            </FilterSection>
          )}

          {/* –ö–æ–º–ø–∞–Ω–∏–∏ */}
          <FilterSection
            title="–ö–æ–º–ø–∞–Ω–∏–∏"
            icon="üè¢"
            isExpanded={expandedSections.companies}
            onToggle={() => toggleSection('companies')}
          >
            <div className={styles.checkboxGroup}>
              {practiceCompanies?.companies?.map((company: { name: string; count: number }) => {
                const isChecked = filters.companies?.includes(company.name) || false;

                return (
                  <label key={company.name} className={styles.checkboxLabel}>
                    <input
                      type="checkbox"
                      checked={isChecked}
                      onChange={(e) => handlePracticeCompanyToggle(company.name, e.target.checked)}
                      className={styles.checkbox}
                    />
                    <span className={styles.labelText}>
                      {company.name} ({company.count})
                    </span>
                  </label>
                );
              })}
            </div>
          </FilterSection>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
          <FilterSection
            title="–ü—Ä–æ–≥—Ä–µ—Å—Å"
            icon="üìä"
            isExpanded={expandedSections.additional}
            onToggle={() => toggleSection('additional')}
          >
            <div className={styles.checkboxGroup}>
              <label className={styles.checkboxLabel}>
                <input
                  type="checkbox"
                  checked={filters.onlyCompleted || false}
                  onChange={(e) => handlePracticeProgressToggle('completed', e.target.checked)}
                  className={styles.checkbox}
                />
                <span className={styles.labelText}>–†–µ—à–µ–Ω–Ω—ã–µ</span>
              </label>
              <label className={styles.checkboxLabel}>
                <input
                  type="checkbox"
                  checked={filters.onlyCompleted === false}
                  onChange={(e) => handlePracticeProgressToggle('not_completed', e.target.checked)}
                  className={styles.checkbox}
                />
                <span className={styles.labelText}>–ù–µ—Ä–µ—à–µ–Ω–Ω—ã–µ</span>
              </label>
            </div>
          </FilterSection>
        </>
      )}

      {/* –§–∏–ª—å—Ç—Ä—ã –¥–ª—è theory */}
      {type === 'theory' && (
        <FilterSection
          title="–°—Ç–∞—Ç—É—Å"
          icon="üìä"
          isExpanded={expandedSections.additional}
          onToggle={() => toggleSection('additional')}
        >
          <div className={styles.checkboxGroup}>
            <label className={styles.checkboxLabel}>
              <input
                type="checkbox"
                checked={filters.onlyUnstudied || false}
                onChange={(e) => onFiltersChange({ ...filters, onlyUnstudied: e.target.checked || undefined })}
                className={styles.checkbox}
              />
              <span className={styles.labelText}>–¢–æ–ª—å–∫–æ –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ</span>
            </label>
          </div>
        </FilterSection>
      )}


      {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
      {activeFilters && (
        <button
          className={styles.resetButton}
          onClick={handleReset}
        >
          ‚úï –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
        </button>
      )}

      {/* –ú–æ–¥–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏ */}
      <Modal
        isOpen={showSubscriptionModal}
        onClose={() => setShowSubscriptionModal(false)}
        closeOnOverlay={true}
        closeOnEsc={true}
      >
        <SubscriptionPrompt
          feature="–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º"
          description="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –ù–∞—Ä–µ—à–∫–∞+ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
        />
      </Modal>
    </div>
  );
};
