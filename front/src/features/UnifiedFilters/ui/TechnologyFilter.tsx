import React, { useState, useMemo } from 'react';
import { Search } from 'lucide-react';
import styles from './TechnologyFilter.module.scss';

interface TechnologyFilterProps {
  technologies: string[];
  selectedTechnologies: string[];
  onSelectionChange: (technologies: string[]) => void;
  isLoading?: boolean;
}

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é
const POPULAR_TECHNOLOGIES = [
  'JavaScript', 'TypeScript', 'React', 'Vue.js', 'Angular',
  'Node.js', 'Python', 'Java', 'PHP', 'C#',
  'HTML', 'CSS', 'SCSS', 'Git', 'Docker',
  'MongoDB', 'PostgreSQL', 'Redis', 'GraphQL', 'REST API'
];

export const TechnologyFilter: React.FC<TechnologyFilterProps> = ({
  technologies,
  selectedTechnologies,
  onSelectionChange,
  isLoading = false,
}) => {
  const [searchTerm, setSearchTerm] = useState('');

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å —Ç–µ–º–∏, —á—Ç–æ –ø—Ä–∏—à–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
  const allTechnologies = useMemo(() => {
    const techSet = new Set([...POPULAR_TECHNOLOGIES, ...technologies]);
    return Array.from(techSet).sort();
  }, [technologies]);

  const filteredTechnologies = useMemo(() => {
    if (!searchTerm) return allTechnologies;
    return allTechnologies.filter(tech =>
      tech.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [allTechnologies, searchTerm]);

  const handleTechnologyToggle = (technology: string, checked: boolean) => {
    const newSelected = checked
      ? [...selectedTechnologies, technology]
      : selectedTechnologies.filter(name => name !== technology);
    
    onSelectionChange(newSelected);
  };

  if (isLoading) {
    return (
      <div className={styles.loading}>
        <div className={styles.skeleton}></div>
        <div className={styles.skeleton}></div>
        <div className={styles.skeleton}></div>
      </div>
    );
  }

  return (
    <div className={styles.technologyFilter}>
      {/* –ü–æ–∏—Å–∫ */}
      <div className={styles.searchInputWrapper}>
        <Search size={16} className={styles.searchIcon} />
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className={styles.searchInput}
        />
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π */}
      <div className={styles.checkboxGroup}>
        {filteredTechnologies.length === 0 && searchTerm ? (
          <div className={styles.noResults}>
            –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </div>
        ) : (
          filteredTechnologies.map(technology => {
            const isChecked = selectedTechnologies.includes(technology);
            const isPopular = POPULAR_TECHNOLOGIES.includes(technology);
            
            return (
              <label 
                key={technology} 
                className={`${styles.checkboxLabel} ${isPopular ? styles.popular : ''}`}
              >
                <input
                  type="checkbox"
                  checked={isChecked}
                  onChange={(e) => handleTechnologyToggle(technology, e.target.checked)}
                  className={styles.checkbox}
                />
                <span className={styles.labelText}>
                  {isPopular && <span className={styles.popularBadge}>üî•</span>}
                  {technology}
                </span>
              </label>
            );
          })
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö */}
      {selectedTechnologies.length > 0 && (
        <div className={styles.selectedInfo}>
          –í—ã–±—Ä–∞–Ω–æ: {selectedTechnologies.length}
        </div>
      )}
    </div>
  );
};