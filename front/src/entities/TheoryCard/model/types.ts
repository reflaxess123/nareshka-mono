// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
export interface CardProgress {
  solvedCount: number;
  easeFactor: number;
  interval: number;
  dueDate: string | null;
  reviewCount: number;
  lapseCount: number;
  cardState: string;
  learningStep: number;
  lastReviewDate: string | null;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
export interface TheoryCard {
  id: string;
  ankiGuid: string;
  cardType: string;
  deck: string;
  category: string;
  subCategory: string | null;
  questionBlock: string;
  answerBlock: string;
  tags: string[];
  orderIndex: number;
  createdAt: string;
  updatedAt: string;
  progress: CardProgress;
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
export interface Pagination {
  page: number;
  limit: number;
  totalItems: number;
  totalPages: number;
}

// –û—Ç–≤–µ—Ç API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
export interface TheoryCardsResponse {
  cards: TheoryCard[];
  pagination: Pagination;
}

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞
export interface TheoryCardsQueryParams {
  page?: number;
  limit?: number;
  category?: string;
  subCategory?: string;
  deck?: string;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
  q?: string; // –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
  onlyUnstudied?: boolean;
}

// –¢–∏–ø –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–º–æ–∂–µ—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
export type SortField = 'orderIndex' | 'createdAt' | 'updatedAt';
export type SortOrder = 'asc' | 'desc';

// –ù–æ–≤—ã–µ —Ç–∏–ø—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export interface SubCategory {
  name: string;
  cardCount: number;
}

export interface Category {
  name: string;
  subCategories: SubCategory[];
  totalCards: number;
}

// –¢–∏–ø –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
export interface TheoryFilters {
  category?: string;
  subCategory?: string;
  onlyUnstudied?: boolean;
  sortBy?: SortField;
  sortOrder?: SortOrder;
  searchQuery?: string;
}

// –¢–∏–ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
export interface UpdateProgressRequest {
  action: 'increment' | 'decrement';
}

export interface UpdateProgressResponse {
  userId: number;
  cardId: string;
  solvedCount: number;
}

// –¢–∏–ø –¥–ª—è –∏–∫–æ–Ω–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export interface CategoryIcon {
  category: string;
  icon: string;
  color: string;
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ü–≤–µ—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
export const PROGRESS_COLORS = {
  NOT_STUDIED: 'var(--color-error)',
  BEGINNER: 'var(--color-warning)',
  INTERMEDIATE: 'var(--color-info)',
  STUDIED: 'var(--color-success)',
} as const;

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export const CATEGORY_ICONS: Record<string, CategoryIcon> = {
  'JS –¢–ï–û–†–ò–Ø': {
    category: 'JS –¢–ï–û–†–ò–Ø',
    icon: '‚ö°',
    color: '#f7df1e',
  },
  REACT: {
    category: 'REACT',
    icon: '‚öõÔ∏è',
    color: '#61dafb',
  },
  'NODE.JS': {
    category: 'NODE.JS',
    icon: 'üü¢',
    color: '#339933',
  },
  CSS: {
    category: 'CSS',
    icon: 'üé®',
    color: '#1572b6',
  },
  HTML: {
    category: 'HTML',
    icon: 'üìÑ',
    color: '#e34f26',
  },
  TYPESCRIPT: {
    category: 'TYPESCRIPT',
    icon: 'üî∑',
    color: '#3178c6',
  },
  DEFAULT: {
    category: 'DEFAULT',
    icon: 'üìö',
    color: 'var(--text-muted)',
  },
};
