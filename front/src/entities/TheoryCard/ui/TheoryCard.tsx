import { Modal } from '@/shared/components/Modal';
import { useRole } from '@/shared/hooks';
import { Settings, X } from 'lucide-react';
import { useState } from 'react';
import { createPortal } from 'react-dom';
import { useUpdateProgress } from '../model/queries';
import type { TheoryCard as TheoryCardType } from '../model/types';
import { CATEGORY_ICONS, PROGRESS_COLORS } from '../model/types';
import styles from './TheoryCard.module.scss';

interface TheoryCardProps {
  card: TheoryCardType;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ Modal.tsx)
enum ModalSize {
  SM = 'sm',
  MD = 'md',
  LG = 'lg',
}

export const TheoryCard = ({ card }: TheoryCardProps) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const updateProgressMutation = useUpdateProgress();
  const { isGuest, isAdmin } = useRole();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [editData, setEditData] = useState({
    questionBlock: card.questionBlock,
    answerBlock: card.answerBlock,
    category: card.category,
    subCategory: card.subCategory || '',
    tags: card.tags,
    orderIndex: card.orderIndex,
    cardType: card.cardType,
    deck: card.deck,
  });

  const handleCardClick = () => {
    setIsExpanded(!isExpanded);
  };

  const handleProgressUpdate = (action: 'increment' | 'decrement') => {
    updateProgressMutation.mutate({
      cardId: card.id,
      data: { action },
    });
  };

  const handleEditTheory = (e: React.MouseEvent) => {
    e.stopPropagation();
    setShowEditModal(true);
  };

  const handleSaveEdit = async () => {
    try {
      setIsUpdating(true);

      const response = await fetch(`/api/admin/theory/cards/${card.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(editData),
      });

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ
      Object.assign(card, editData);
      setShowEditModal(false);
    } finally {
      setIsUpdating(false);
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categoryIcon = CATEGORY_ICONS[card.category] || CATEGORY_ICONS.DEFAULT;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
  const getProgressLevel = (count: number | null | undefined) => {
    const safeCount = count ?? 0;
    if (safeCount === 0)
      return {
        level: '–ù–µ –∏–∑—É—á–µ–Ω–æ',
        color: PROGRESS_COLORS.NOT_STUDIED,
        emoji: 'üî¥',
      };
    if (safeCount <= 2)
      return {
        level: '–ù–∞—á–∞–ª—å–Ω—ã–π',
        color: PROGRESS_COLORS.BEGINNER,
        emoji: 'üü°',
      };
    if (safeCount <= 5)
      return {
        level: '–°—Ä–µ–¥–Ω–∏–π',
        color: PROGRESS_COLORS.INTERMEDIATE,
        emoji: 'üîµ',
      };
    return { level: '–ò–∑—É—á–µ–Ω–æ', color: PROGRESS_COLORS.STUDIED, emoji: 'üü¢' };
  };

  const progressInfo = !isGuest
    ? getProgressLevel(card.progress?.solvedCount)
    : null;

  return (
    <>
      <div
        className={`${styles.theoryCard} ${isExpanded ? styles.expanded : ''}`}
        onClick={handleCardClick}
        role="button"
        tabIndex={0}
        onKeyDown={(e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            handleCardClick();
          }
        }}
      >
        <div className={styles.cardHeader}>
          <div className={styles.categoryInfo}>
            <div
              className={styles.categoryIcon}
              style={{ color: categoryIcon.color }}
            >
              {categoryIcon.icon}
            </div>
            <div className={styles.categoryText}>
              <span className={styles.category}>{card.category}</span>
              {card.subCategory && (
                <span className={styles.subCategory}>{card.subCategory}</span>
              )}
            </div>
          </div>

          <div className={styles.headerRight}>
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
            {!isGuest && progressInfo && (
              <div className={styles.progressInfo}>
                <span className={styles.progressEmoji}>
                  {progressInfo.emoji}
                </span>
                <span className={styles.progressCount}>
                  {card.progress?.solvedCount ?? 0}
                </span>
                <span
                  className={styles.progressLevel}
                  style={{ color: progressInfo.color }}
                >
                  {progressInfo.level}
                </span>
              </div>
            )}

            {/* –î–ª—è –≥–æ—Å—Ç–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
            {isGuest && (
              <div className={styles.guestInfo}>
                <span className={styles.guestText}>
                  –í–æ–π–¥–∏—Ç–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                </span>
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ */}
            {isAdmin && (
              <button
                className={styles.editButton}
                onClick={handleEditTheory}
                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–æ—Ä–∏—é"
                aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–æ—Ä–∏—é"
              >
                <Settings size={16} />
              </button>
            )}

            <div className={styles.expandIcon}>{isExpanded ? '‚àí' : '+'}</div>
          </div>
        </div>

        <div className={styles.question}>
          <div dangerouslySetInnerHTML={{ __html: card.questionBlock }} />
        </div>

        {isExpanded && (
          <div className={styles.additionalInfo}>
            <div className={styles.answerSection}>
              <h4 className={styles.answerTitle}>üí° –û—Ç–≤–µ—Ç:</h4>
              <div
                className={styles.answerContent}
                dangerouslySetInnerHTML={{ __html: card.answerBlock }}
              />
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
            {!isGuest && (
              <div className={styles.progressButtons}>
                <button
                  className={styles.progressButton}
                  onClick={(e) => {
                    e.stopPropagation();
                    handleProgressUpdate('increment');
                  }}
                  disabled={updateProgressMutation.isPending}
                >
                  ‚úÖ –ò–∑—É—á–∏–ª
                </button>
                {(card.progress?.solvedCount ?? 0) > 0 && (
                  <button
                    className={styles.progressButton}
                    onClick={(e) => {
                      e.stopPropagation();
                      handleProgressUpdate('decrement');
                    }}
                    disabled={updateProgressMutation.isPending}
                  >
                    ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å
                  </button>
                )}
              </div>
            )}

            {/* –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –≥–æ—Å—Ç–µ–π */}
            {isGuest && (
              <div className={styles.guestPrompt}>
                <p>üîê –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è</p>
              </div>
            )}
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —á–µ—Ä–µ–∑ Portal */}
      {showEditModal &&
        createPortal(
          <Modal
            isOpen={showEditModal}
            onClose={() => setShowEditModal(false)}
            size={ModalSize.LG}
            closeOnOverlay={true}
            closeOnEsc={true}
          >
            <div className={styles.editModalHeader}>
              <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–µ–æ—Ä–∏–∏</h3>
              <button
                className={styles.editModalClose}
                onClick={() => setShowEditModal(false)}
              >
                <X size={20} />
              </button>
            </div>

            <div className={styles.editModalBody}>
              <div className={styles.editFormRow}>
                <div className={styles.editFormGroup}>
                  <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
                  <input
                    type="text"
                    value={editData.category}
                    onChange={(e) =>
                      setEditData((prev) => ({
                        ...prev,
                        category: e.target.value,
                      }))
                    }
                    required
                  />
                </div>

                <div className={styles.editFormGroup}>
                  <label>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                  <input
                    type="text"
                    value={editData.subCategory}
                    onChange={(e) =>
                      setEditData((prev) => ({
                        ...prev,
                        subCategory: e.target.value,
                      }))
                    }
                  />
                </div>
              </div>

              <div className={styles.editFormRow}>
                <div className={styles.editFormGroup}>
                  <label>–¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏</label>
                  <select
                    value={editData.cardType}
                    onChange={(e) =>
                      setEditData((prev) => ({
                        ...prev,
                        cardType: e.target.value,
                      }))
                    }
                  >
                    <option value="–ü—Ä–æ—Å—Ç–∞—è">–ü—Ä–æ—Å—Ç–∞—è</option>
                    <option value="–û–±—Ä–∞—â–µ–Ω–∏–µ">–û–±—Ä–∞—â–µ–Ω–∏–µ</option>
                    <option value="–ë–∞–∑–æ–≤–∞—è (–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ)">
                      –ë–∞–∑–æ–≤–∞—è (–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ)
                    </option>
                    <option value="–ü—Ä–æ–ø—É—Å–∫">–ü—Ä–æ–ø—É—Å–∫</option>
                  </select>
                </div>

                <div className={styles.editFormGroup}>
                  <label>–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä</label>
                  <input
                    type="number"
                    value={editData.orderIndex}
                    onChange={(e) =>
                      setEditData((prev) => ({
                        ...prev,
                        orderIndex: parseInt(e.target.value) || 0,
                      }))
                    }
                    min="0"
                  />
                </div>
              </div>

              <div className={styles.editFormGroup}>
                <label>–ö–æ–ª–æ–¥–∞</label>
                <input
                  type="text"
                  value={editData.deck}
                  onChange={(e) =>
                    setEditData((prev) => ({ ...prev, deck: e.target.value }))
                  }
                />
              </div>

              <div className={styles.editFormGroup}>
                <label>–í–æ–ø—Ä–æ—Å *</label>
                <textarea
                  value={editData.questionBlock}
                  onChange={(e) =>
                    setEditData((prev) => ({
                      ...prev,
                      questionBlock: e.target.value,
                    }))
                  }
                  rows={6}
                  className={styles.htmlTextarea}
                  placeholder="HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–æ–ø—Ä–æ—Å–∞"
                  required
                />
              </div>

              <div className={styles.editFormGroup}>
                <label>–û—Ç–≤–µ—Ç *</label>
                <textarea
                  value={editData.answerBlock}
                  onChange={(e) =>
                    setEditData((prev) => ({
                      ...prev,
                      answerBlock: e.target.value,
                    }))
                  }
                  rows={6}
                  className={styles.htmlTextarea}
                  placeholder="HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞"
                  required
                />
              </div>

              <div className={styles.editFormGroup}>
                <label>–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
                <input
                  type="text"
                  value={editData.tags.join(', ')}
                  onChange={(e) =>
                    setEditData((prev) => ({
                      ...prev,
                      tags: e.target.value
                        .split(',')
                        .map((tag) => tag.trim())
                        .filter(Boolean),
                    }))
                  }
                  placeholder="javascript, variables, basic"
                />
              </div>
            </div>

            <div className={styles.editModalFooter}>
              <button
                className={styles.editModalCancel}
                onClick={() => setShowEditModal(false)}
                disabled={isUpdating}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                className={styles.editModalSave}
                onClick={handleSaveEdit}
                disabled={
                  isUpdating ||
                  !editData.questionBlock.trim() ||
                  !editData.answerBlock.trim() ||
                  !editData.category.trim()
                }
              >
                {isUpdating ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </button>
            </div>
          </Modal>,
          document.body
        )}
    </>
  );
};
