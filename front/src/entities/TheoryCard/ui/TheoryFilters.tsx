import {
  findOriginalCategory,
  translateMainCategory,
  translateSubCategory,
} from '@/shared/constants/categoryTranslations';
import { useEffect, useState } from 'react';
import { useCategories } from '../model/queries';
import type { TheoryFilters } from '../model/types';
import styles from './TheoryFilters.module.scss';

interface TheoryFiltersComponentProps {
  filters: TheoryFilters;
  onFiltersChange: (filters: TheoryFilters) => void;
}

export const TheoryFiltersComponent = ({
  filters,
  onFiltersChange,
}: TheoryFiltersComponentProps) => {
  const { data: categories, isLoading: categoriesLoading } = useCategories();
  const [searchInput, setSearchInput] = useState(filters.searchQuery || '');

  // –î–µ–±–∞—É–Ω—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
  useEffect(() => {
    const timer = setTimeout(() => {
      onFiltersChange({ ...filters, searchQuery: searchInput || undefined });
    }, 500);

    return () => clearTimeout(timer);
  }, [searchInput, filters, onFiltersChange]);

  const handleCategoryChange = (category: string) => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è API
    const originalCategory =
      category === 'all' ? undefined : findOriginalCategory(category, true);

    onFiltersChange({
      ...filters,
      category: originalCategory,
      subCategory: undefined, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    });
  };

  const handleSubCategoryChange = (subCategory: string) => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è API
    const originalSubCategory =
      subCategory === 'all'
        ? undefined
        : findOriginalCategory(subCategory, false);

    onFiltersChange({
      ...filters,
      subCategory: originalSubCategory,
    });
  };

  const handleOnlyUnstudiedChange = (checked: boolean) => {
    onFiltersChange({ ...filters, onlyUnstudied: checked });
  };

  const selectedCategory = categories?.categories?.find(
    (cat) => cat.name === filters.category
  );

  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const displayCategory = filters.category
    ? translateMainCategory(filters.category)
    : 'all';

  const displaySubCategory = filters.subCategory
    ? translateSubCategory(filters.subCategory)
    : 'all';

  return (
    <div className={styles.filters}>
      <div className={styles.filtersRow}>
        {/* –ü–æ–∏—Å–∫ */}
        <div className={styles.searchGroup}>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –æ—Ç–≤–µ—Ç–∞–º..."
            value={searchInput}
            onChange={(e) => setSearchInput(e.target.value)}
            className={styles.searchInput}
          />
          <span className={styles.searchIcon}>üîç</span>
        </div>

        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className={styles.filterGroup}>
          <select
            value={displayCategory}
            onChange={(e) => handleCategoryChange(e.target.value)}
            className={styles.filterSelect}
            disabled={categoriesLoading}
          >
            <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
            {categories?.categories?.map((category) => (
              <option
                key={category.name}
                value={translateMainCategory(category.name)}
              >
                {translateMainCategory(category.name)} ({category.totalCards})
              </option>
            ))}
          </select>
        </div>

        {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        {selectedCategory && selectedCategory.subCategories.length > 0 && (
          <div className={styles.filterGroup}>
            <select
              value={displaySubCategory}
              onChange={(e) => handleSubCategoryChange(e.target.value)}
              className={styles.filterSelect}
            >
              <option value="all">–í—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
              {selectedCategory.subCategories.map((subCategory) => (
                <option
                  key={subCategory.name}
                  value={translateSubCategory(subCategory.name)}
                >
                  {translateSubCategory(subCategory.name)} (
                  {subCategory.cardCount})
                </option>
              ))}
            </select>
          </div>
        )}

        {/* –¢–æ–ª—å–∫–æ –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ */}
        <div className={styles.checkboxGroup}>
          <label className={styles.checkboxLabel}>
            <input
              type="checkbox"
              checked={filters.onlyUnstudied || false}
              onChange={(e) => handleOnlyUnstudiedChange(e.target.checked)}
              className={styles.checkbox}
            />
            –¢–æ–ª—å–∫–æ –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ
          </label>
        </div>
      </div>
    </div>
  );
};
