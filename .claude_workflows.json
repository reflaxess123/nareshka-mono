{
  "workflows": {
    "new_feature": {
      "name": "Добавление новой фичи",
      "description": "Полный цикл добавления новой функциональности",
      "steps": [
        {
          "step": 1,
          "action": "plan",
          "description": "Планирование архитектуры фичи",
          "checklist": [
            "Определить domain модель",
            "Спроектировать API endpoints",
            "Продумать БД схему",
            "Выбрать UI компоненты"
          ]
        },
        {
          "step": 2,
          "action": "backend",
          "description": "Реализация backend части",
          "commands": [
            "Создать модели в app/shared/models/",
            "Добавить репозиторий в features/{feature}/repositories/",
            "Создать сервис в features/{feature}/services/",
            "Добавить API роутер в features/{feature}/api/",
            "Зарегистрировать в DI контейнере"
          ]
        },
        {
          "step": 3,
          "action": "database",
          "description": "Миграция базы данных",
          "commands": [
            "cd back && alembic revision --autogenerate -m 'add {feature}'",
            "cd back && alembic upgrade head"
          ]
        },
        {
          "step": 4,
          "action": "frontend",
          "description": "Frontend реализация",
          "commands": [
            "cd front && npm run api:generate",
            "Создать entity в src/entities/{entity}/",
            "Добавить feature в src/features/{feature}/",
            "Создать UI в src/widgets/ или pages/"
          ]
        },
        {
          "step": 5,
          "action": "test",
          "description": "Тестирование",
          "commands": [
            "cd back && poetry run pytest tests/{feature}/",
            "cd front && npm run type-check",
            "Manual testing через UI"
          ]
        }
      ]
    },
    "bug_fix": {
      "name": "Исправление багов",
      "description": "Систематический подход к исправлению ошибок",
      "steps": [
        {
          "step": 1,
          "action": "investigate",
          "description": "Исследование проблемы",
          "tools": [
            "Chrome DevTools + Chrome Monitor",
            "Backend логи в back/logs/",
            "Docker logs для контейнеров",
            "PostgreSQL запросы через MCP"
          ]
        },
        {
          "step": 2,
          "action": "reproduce",
          "description": "Воспроизведение бага",
          "environments": [
            "Development (localhost)",
            "Docker compose (изоляция)",
            "Production симуляция"
          ]
        },
        {
          "step": 3,
          "action": "fix",
          "description": "Исправление",
          "approach": [
            "Minimal invasive fix",
            "Root cause analysis",
            "Regression prevention"
          ]
        },
        {
          "step": 4,
          "action": "verify",
          "description": "Верификация исправления",
          "commands": [
            "cd back && poetry run ruff check .",
            "cd front && npm run lint && npm run type-check",
            "Regression testing"
          ]
        }
      ]
    },
    "performance_optimization": {
      "name": "Оптимизация производительности",
      "description": "Системная оптимизация приложения",
      "areas": {
        "frontend": [
          "React.memo для компонентов",
          "useMemo/useCallback для вычислений",
          "Code splitting и lazy loading",
          "CSS modules оптимизация",
          "Bundle size analysis"
        ],
        "backend": [
          "PostgreSQL индексы и query optimization", 
          "Redis кэширование",
          "AsyncIO оптимизация",
          "Database connection pooling",
          "API response pagination"
        ],
        "infrastructure": [
          "Docker образы multi-stage builds",
          "Nginx gzip и статика кэширование",
          "Health checks оптимизация",
          "Resource limits tuning"
        ]
      }
    },
    "security_review": {
      "name": "Аудит безопасности",
      "description": "Комплексная проверка безопасности",
      "categories": {
        "code_execution": [
          "Docker изоляция проверка",
          "Dangerous patterns validation",
          "Resource limits тестирование",
          "Network isolation верификация"
        ],
        "authentication": [
          "JWT токены security",
          "Session management audit",
          "CORS конфигурация",
          "Rate limiting эффективность"
        ],
        "data_security": [
          "SQL injection защита",
          "Input validation coverage",
          "Sensitive data logging filter",
          "Database access permissions"
        ]
      }
    },
    "ml_pipeline_update": {
      "name": "Обновление ML pipeline",
      "description": "Улучшение системы обработки интервью данных",
      "steps": [
        {
          "step": 1,
          "action": "data_analysis",
          "description": "Анализ качества данных",
          "scripts": [
            "sobes-data/analysis/bertopic_analysis.py",
            "Check cluster quality metrics",
            "Validate categorization accuracy"
          ]
        },
        {
          "step": 2, 
          "action": "model_optimization",
          "description": "Оптимизация ML модели",
          "parameters": [
            "HDBSCAN min_cluster_size tuning",
            "UMAP components optimization", 
            "Embedding model comparison"
          ]
        },
        {
          "step": 3,
          "action": "processing",
          "description": "Обработка и импорт",
          "commands": [
            "python postprocess_with_gpt.py",
            "python generate_final_api_data.py", 
            "python import_final_categorized_data.py"
          ]
        }
      ]
    }
  },
  "quick_commands": {
    "dev_env": {
      "description": "Быстрый старт dev окружения",
      "command": "start-dev-simple.bat",
      "alternatives": ["docker-compose -f docker-compose.dev.yml up"]
    },
    "full_lint": {
      "description": "Полная проверка кода",
      "commands": [
        "cd back && poetry run ruff check . && poetry run mypy .",
        "cd front && npm run lint && npm run type-check"
      ]
    },
    "db_reset": {
      "description": "Сброс и пересоздание БД",
      "commands": [
        "docker-compose down -v",
        "docker-compose -f docker-compose.dev.yml up postgres -d", 
        "cd back && alembic upgrade head"
      ],
      "warning": "Удаляет все данные!"
    },
    "api_refresh": {
      "description": "Обновление API схемы",
      "commands": [
        "cd front && npm run api:generate",
        "Проверить типы в generated/api.ts"
      ]
    }
  }
}