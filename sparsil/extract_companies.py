#!/usr/bin/env python3
"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –∑–∞–ø–∏—Å–µ–π —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
–°–æ–∑–¥–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
"""

import json
import re
from collections import Counter
from typing import List, Set, Tuple

def clean_company_name(name: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"""
    if not name:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
    name = ' '.join(name.split())
    
    # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ —Å–∫–æ–±–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    name = re.sub(r'["\'\(\)]*$', '', name)
    name = re.sub(r'^["\'\(\)]*', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    name = re.sub(r'[:\-\‚Äî\‚Äì]+$', '', name)
    name = re.sub(r'^[:\-\‚Äî\‚Äì]+', '', name)
    
    # –£–±–∏—Ä–∞–µ–º "–û–û–û", "–ò–ü", "–ê–û" –∏ —Ç.–¥.
    name = re.sub(r'\b(–û–û–û|–ò–ü|–ê–û|–ó–ê–û|–ü–ê–û|Ltd|LLC|Inc|Corp)\b\.?', '', name, flags=re.IGNORECASE)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    name = name.strip(' .,;:()[]{}"\'-')
    
    return name

def extract_company_patterns(text: str) -> List[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–π –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º"""
    if not text:
        return []
    
    companies = []
    text = text.strip()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω 1: "–ö–æ–º–ø–∞–Ω–∏—è: –ù–∞–∑–≤–∞–Ω–∏–µ"
    pattern1 = re.search(r'[–ö–∫]–æ–º–ø–∞–Ω–∏—è:\s*([^\n\r]+)', text)
    if pattern1:
        companies.append(pattern1.group(1).strip())
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω 2: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ - –ù–∞–∑–≤–∞–Ω–∏–µ"  
    pattern2 = re.search(r'[–ù–Ω]–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\s*[-:]\s*([^\n\r]+)', text)
    if pattern2:
        companies.append(pattern2.group(1).strip())
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω 3: –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∞—Ç–∏–Ω–∏—Ü—É –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ª–æ–≤–∞)
    first_line = text.split('\n')[0].strip()
    if first_line and (
        re.search(r'[A-Za-z]', first_line) or 
        any(word in first_line.lower() for word in ['–≥—Ä—É–ø–ø–∞', '–±–∞–Ω–∫', '—Å–∏—Å—Ç–µ–º—ã', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '—Å—Ç—É–¥–∏—è'])
    ):
        companies.append(first_line)
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω 4: –°—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
    lines = text.split('\n')[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
    for line in lines:
        line = line.strip()
        if (line and 
            len(line) < 80 and 
            len(line.split()) <= 6 and
            not line.startswith(('–í–∞–∫–∞–Ω—Å–∏—è', '–ó–ü', '–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ó–∞–¥–∞—á', '–í–æ–ø—Ä–æ—Å', 'http', 'https', 'tg:'))):
            companies.append(line)
    
    return companies

def extract_companies_from_records():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π"""
    
    print("üè¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ö–û–ú–ü–ê–ù–ò–ô")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        with open('telegram_topic_messages.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª telegram_topic_messages.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return
    
    messages = data.get('messages', [])
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
    interview_records = [
        msg for msg in messages 
        if msg.get('reply_to_msg_id') == 489 and 
           msg.get('text') and 
           len(msg['text'].strip()) > 10
    ]
    
    print(f"‚úîÔ∏è –ó–∞–ø–∏—Å–µ–π —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π: {len(interview_records)}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
    all_companies = []
    processed_count = 0
    
    for record in interview_records:
        text = record.get('text', '')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π
        candidates = extract_company_patterns(text)
        
        if candidates:
            # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç (–æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–π)
            best_candidate = candidates[0]
            cleaned = clean_company_name(best_candidate)
            
            if cleaned and len(cleaned) > 2 and len(cleaned) < 100:
                all_companies.append(cleaned)
                processed_count += 1
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞
            words = text.strip().split()[:3]
            if words:
                candidate = ' '.join(words)
                cleaned = clean_company_name(candidate)
                if cleaned and len(cleaned) > 2:
                    all_companies.append(cleaned)
                    processed_count += 1
    
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {processed_count}")
    print(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π: {len(all_companies)}")
    
    # –ü–æ–¥—Å—á–µ—Ç –∏ –æ—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    company_counter = Counter(all_companies)
    unique_companies = sorted(company_counter.keys(), key=str.lower)
    
    print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {len(unique_companies)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    english_companies = []
    russian_companies = []
    mixed_companies = []
    
    for company in unique_companies:
        if re.search(r'^[A-Za-z0-9\s\.\-\_]+$', company):
            english_companies.append(company)
        elif re.search(r'^[–ê-–Ø–∞-—è0-9\s\.\-\_]+$', company):
            russian_companies.append(company)
        else:
            mixed_companies.append(company)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  üåç –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {len(english_companies)}")
    print(f"  üá∑üá∫ –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {len(russian_companies)}")
    print(f"  üîÄ –°–º–µ—à–∞–Ω–Ω—ã–µ: {len(mixed_companies)}")
    
    # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
    print(f"\nüìã –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ö–û–ú–ü–ê–ù–ò–ô ({len(unique_companies)}):")
    print("-" * 50)
    
    for i, company in enumerate(unique_companies, 1):
        count = company_counter[company]
        print(f"{i:4d}. {company} ({count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π)")
    
    # –¢–æ–ø-20 —Å–∞–º—ã—Ö —É–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö
    print(f"\nüèÜ –¢–û–ü-20 –°–ê–ú–´–• –ü–û–ü–£–õ–Ø–†–ù–´–•:")
    print("-" * 40)
    
    top_companies = company_counter.most_common(20)
    for i, (company, count) in enumerate(top_companies, 1):
        print(f"{i:2d}. {company:<30} {count:3d} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    output_file = 'companies_list.txt'
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ö–û–ú–ü–ê–ù–ò–ô –ò–ó –ó–ê–ü–ò–°–ï–ô –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–ô\n")
            f.write("=" * 60 + "\n\n")
            
            f.write(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {len(unique_companies)}\n")
            f.write(f"–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {len(english_companies)}\n")
            f.write(f"–†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {len(russian_companies)}\n")
            f.write(f"–°–º–µ—à–∞–Ω–Ω—ã–µ: {len(mixed_companies)}\n\n")
            
            f.write("–ê–õ–§–ê–í–ò–¢–ù–´–ô –°–ü–ò–°–û–ö:\n")
            f.write("-" * 30 + "\n")
            for i, company in enumerate(unique_companies, 1):
                count = company_counter[company]
                f.write(f"{i:4d}. {company} ({count})\n")
            
            f.write(f"\n\n–¢–û–ü-20 –ü–û–ü–£–õ–Ø–†–ù–´–•:\n")
            f.write("-" * 30 + "\n")
            for i, (company, count) in enumerate(top_companies, 1):
                f.write(f"{i:2d}. {company} - {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n")
            
            # –ì—Ä—É–ø–ø—ã –ø–æ —Ç–∏–ø–∞–º
            if english_companies:
                f.write(f"\n\n–ê–ù–ì–õ–ò–ô–°–ö–ò–ï –ù–ê–ó–í–ê–ù–ò–Ø ({len(english_companies)}):\n")
                f.write("-" * 30 + "\n")
                for company in english_companies:
                    f.write(f"‚Ä¢ {company}\n")
            
            if russian_companies:
                f.write(f"\n\n–†–£–°–°–ö–ò–ï –ù–ê–ó–í–ê–ù–ò–Ø ({len(russian_companies)}):\n")
                f.write("-" * 30 + "\n")
                for company in russian_companies:
                    f.write(f"‚Ä¢ {company}\n")
        
        print(f"\n‚úÖ –°–ü–ò–°–û–ö –°–û–•–†–ê–ù–ï–ù: {output_file}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    return unique_companies, company_counter

if __name__ == "__main__":
    companies, counter = extract_companies_from_records()
    print(f"\nüéâ –ì–û–¢–û–í–û! –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(companies)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.") 