#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –æ—Ç –º—É—Å–æ—Ä–∞
–£–¥–∞–ª—è–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–¥–∞, –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á, —ç—Ç–∞–ø—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –∏ –ø—Ä–æ—á–∏–π –º—É—Å–æ—Ä
"""

import re
from typing import List, Set

def is_garbage(company_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –º—É—Å–æ—Ä–æ–º (–Ω–µ –∫–æ–º–ø–∞–Ω–∏–µ–π)"""
    
    if not company_name or len(company_name.strip()) == 0:
        return True
    
    name = company_name.strip().lower()
    
    # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
    if len(name) < 2 or len(name) > 60:
        return True
    
    # –§—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–¥–∞
    code_patterns = [
        r'```', r'function\s*\(', r'import\s+', r'export\s+', r'const\s+', 
        r'console\.log', r'\.prototype', r'\.then', r'\.map', r'\.filter',
        r'^\s*//\s*', r'^\s*/\*', r'<script>', r'useeffect', r'usestate',
        r'array\.', r'object\.', r'\.length', r'\.push', r'\.splice'
    ]
    
    for pattern in code_patterns:
        if re.search(pattern, name, re.IGNORECASE):
            return True
    
    # –û–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á –∏ –¥–µ–π—Å—Ç–≤–∏–π
    task_keywords = [
        '–∑–∞–¥–∞—á–∞', '–ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π', '–ø–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è', '—Ä–µ—à–µ–Ω–∏–µ', '–Ω–∞–π—Ç–∏ –≤—Å–µ',
        '—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å', '–Ω–∞–ø–∏—Å–∞—Ç—å', '—Å–æ–∑–¥–∞—Ç—å', '—Å–¥–µ–ª–∞—Ç—å', '–≤—ã–ø–æ–ª–Ω–∏—Ç—å',
        '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏', '—Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞', '—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏',
        '—É—Å–ª–æ–≤–∏–µ', '–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞', '—Ä–∞–±–æ—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞', '—á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è',
        '–ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–ª–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ', '—á–µ–º –≥–æ—Ä–∂—É—Å—å', '–≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è',
        '—É—Å–ø–µ—Ö —Å–æ–±–µ—Å–∞', '—Ñ–∏–¥–±–µ–∫', '–≤–µ—Å—å —ç–∫—Ä–∞–Ω', '–∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –¥–∏–≤—É',
        '–ª–∞–π–≤–∫–æ–¥–∏–Ω–≥', '–æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å –∫–æ–¥', '–∫–∏–∫ –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞'
    ]
    
    for keyword in task_keywords:
        if keyword in name:
            return True
    
    # –≠—Ç–∞–ø—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
    stage_patterns = [
        r'\d+\s*—ç—Ç–∞–ø', r'–ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø', r'–≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø', r'—Ç—Ä–µ—Ç–∏–π —ç—Ç–∞–ø', r'—Ñ–∏–Ω–∞–ª',
        r'—Å–∫—Ä–∏–Ω–∏–Ω–≥', r'—Ç–µ—Ö—Å–æ–±–µ—Å', r'—Ç–µ—Ö\s*—Å–æ–±–µ—Å', r'—Ç–µ—Ö–Ω–∏—á–∫–∞', r'–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–∞–Ω–¥–æ–π',
        r'–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π', r'–≤—Å—Ç—Ä–µ—á–∞ —Å –ª–∏–¥–æ–º', r'hr.—Å–∫—Ä–∏–Ω–∏–Ω–≥', r'—Å–æ–∑–≤–æ–Ω',
        r'livecoding', r'live\s*coding', r'–∞–ª–≥–æ—Ä–∏—Ç–º', r'—Å–∏—Å—Ç–µ–º–∞ –¥–∏–∑–∞–π–Ω', r'system design'
    ]
    
    for pattern in stage_patterns:
        if re.search(pattern, name, re.IGNORECASE):
            return True
    
    # –î–∞—Ç—ã –∏ —á–∏—Å–ª–∞
    date_patterns = [
        r'^\d{1,2}\.\d{1,2}', r'^\d{1,2}/\d{1,2}', r'^\d{4}-\d{2}-\d{2}',
        r'^\d+$', r'^\d+-\d+$', r'–∑–∞–ø—Ä–æ—Å–∏–ª \d+', r'–∑–ø.*\d+', r'–¥–æ \d+–∫',
        r'–æ–∑–≤—É—á–µ–Ω–Ω–∞—è.*–∑–ø', r'–ø—Ä–æ—Å–∏–ª \d+', r'–≤–∏–ª–∫–∞ \d+'
    ]
    
    for pattern in date_patterns:
        if re.search(pattern, name, re.IGNORECASE):
            return True
    
    # URL –∏ —Å—Å—ã–ª–∫–∏
    if re.search(r'https?://', name) or re.search(r't\.me/', name):
        return True
    
    # –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    descriptive_phrases = [
        '–≤–∞–∫–∞–Ω—Å–∏—è', 'hr –Ω–∞–ø–∏—Å–∞–ª–∞', '–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', '–∫–æ–º–ø–∞–Ω–∏—è:', '–Ω–∞–∑–≤–∞–Ω–∏–µ:',
        '–æ—Ç–æ–∑–≤–∞–ª–∏ –æ—Ñ—Ñ–µ—Ä', '—Ç—Ä—É–¥–æ–≤—É—é —É–≤–∏–¥–µ–ª–∏', '–ø–æ—Ç—è—Ä–µ–Ω–æ', '—É—Ç–µ—Ä—è–Ω–æ', '–ø–æ —Ñ–∞–∫—Ç—É –Ω–µ',
        '–¥–æ —Å–∏—Ö –ø–æ—Ä', '–±—É–¥—É—Ç –¥–µ–ª–∞—Ç—å', '–ø–ª–æ—Ö–æ, —è —Ç—É–¥–∞', '—Ö–æ—Ç—å —ç—Ç–æ –Ω–µ',
        '—Ç–∞–∫ –º—ã –∂–µ', '—Ç–∞–∫ —á—Ç–æ –µ—â–µ', '–Ω—É –µ—â—ë —Ç–æ–≥–¥–∞', '–Ω–µ–ø—Ä–∏—è—Ç–Ω–æ, –Ω–∞–¥–µ—é—Å—å',
        '—Ü–µ–ª—ã–π –º–µ—Å—è—Ü', '—Ö–æ—Ä–æ—à, –ø–æ–ø—Ä–æ–±—É–π', '—Å –Ω—É–ª—è –≤–∫–∞—Ç—ã–≤–∞–µ—à—å—Å—è', '–¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ –Ω–µ—Ç'
    ]
    
    for phrase in descriptive_phrases:
        if phrase in name:
            return True
    
    # –ü—Ä–æ–µ–∫—Ç–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
    project_keywords = [
        '–ø—Ä–æ–µ–∫—Ç —Å–±–µ—Ä–∞', '–∞—É—Ç—Å—Ç–∞—Ñ—Ñ', '–∞—É—Ç—Å–æ—Ä—Å', '–Ω–∞ –ø—Ä–æ–µ–∫—Ç', '–¥–æ—á–∫–∞', '—á–µ—Ä–µ–∑',
        '–≤ –∫–æ–º–∞–Ω–¥—É', '–∫–æ–º–∞–Ω–¥–∞', '—Å—Ç—Ä–∏–º', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', '–æ—Ç–¥–µ–ª'
    ]
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    project_count = sum(1 for keyword in project_keywords if keyword in name)
    if project_count > 1:  # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —Å–ª–æ–≤ - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ
        return True
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ (–º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤)
    if re.match(r'^[‚Ä¢\-\*\d+\.\)\]\}\#\@\$\%\^\&\[\(\{]', name):
        return True
    
    # –û–¥–Ω–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–µ –∏–ª–∏ –¥–≤—É—Ö—Å–∏–º–≤–æ–ª—å–Ω—ã–µ "–Ω–∞–∑–≤–∞–Ω–∏—è"
    if len(name.strip()) <= 2:
        return True
    
    # –≠–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if re.search(r'[üìåüî•ü§°‚úÖ‚ö†Ô∏è‚ùå]', name):
        return True
    
    return False

def clean_companies_list():
    """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –æ—Ç –º—É—Å–æ—Ä–∞"""
    
    print("üßπ –û–ß–ò–°–¢–ö–ê –°–ü–ò–°–ö–ê –ö–û–ú–ü–ê–ù–ò–ô –û–¢ –ú–£–°–û–†–ê")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    try:
        with open('companies_list.txt', 'r', encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª companies_list.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
    lines = content.split('\n')
    companies = []
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é —Å –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    in_alphabetic = False
    for line in lines:
        if "–ê–õ–§–ê–í–ò–¢–ù–´–ô –°–ü–ò–°–û–ö:" in line:
            in_alphabetic = True
            continue
        if in_alphabetic and "–¢–û–ü-20 –ü–û–ü–£–õ–Ø–†–ù–´–•:" in line:
            break
        if in_alphabetic and line.strip():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—É–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
            match = re.match(r'\s*\d+\.\s*(.+?)\s*\(\d+\)\s*$', line)
            if match:
                company_name = match.group(1).strip()
                companies.append(company_name)
    
    print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(companies)}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –º—É—Å–æ—Ä
    clean_companies = []
    garbage_list = []
    
    for company in companies:
        if is_garbage(company):
            garbage_list.append(company)
        else:
            clean_companies.append(company)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    clean_companies.sort(key=str.lower)
    
    print(f"‚úÖ –ß–∏—Å—Ç—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {len(clean_companies)}")
    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –º—É—Å–æ—Ä–∞: {len(garbage_list)}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ—á–∏—Å—Ç–∫–∏: {len(garbage_list)/len(companies)*100:.1f}%")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    with open('clean_companies_list.txt', 'w', encoding='utf-8') as f:
        f.write("–û–ß–ò–©–ï–ù–ù–´–ô –°–ü–ò–°–û–ö –ö–û–ú–ü–ê–ù–ò–ô\n")
        f.write("=" * 60 + "\n\n")
        f.write(f"–í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(clean_companies)}\n")
        f.write(f"–£–¥–∞–ª–µ–Ω–æ –º—É—Å–æ—Ä–∞: {len(garbage_list)}\n\n")
        
        f.write("–ß–ò–°–¢–´–ô –°–ü–ò–°–û–ö –ö–û–ú–ü–ê–ù–ò–ô:\n")
        f.write("-" * 30 + "\n")
        for i, company in enumerate(clean_companies, 1):
            f.write(f"{i:3d}. {company}\n")
        
        f.write("\n\n–£–î–ê–õ–ï–ù–ù–´–ô –ú–£–°–û–†:\n")
        f.write("-" * 30 + "\n")
        for i, garbage in enumerate(sorted(garbage_list, key=str.lower), 1):
            f.write(f"{i:3d}. {garbage}\n")
    
    print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–•–†–ê–ù–ï–ù: clean_companies_list.txt")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 —á–∏—Å—Ç—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
    print(f"\nüèÜ –¢–û–ü-10 –ß–ò–°–¢–´–• –ö–û–ú–ü–ê–ù–ò–ô:")
    for i, company in enumerate(clean_companies[:10], 1):
        print(f"{i:2d}. {company}")

if __name__ == "__main__":
    clean_companies_list() 