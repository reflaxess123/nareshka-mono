#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram —Ç–µ–º—ã
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—á–Ω–æ —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ —á—Ç–æ –∏ –≤ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ
"""

import asyncio
import json
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ mcp-telegram –º–æ–¥—É–ª—é
sys.path.insert(0, str(Path("mcp-telegram-main/src").resolve()))

from mcp_telegram.telegram import create_client

async def get_topic_messages():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞"""
    
    DIALOG_ID = -1002071074234
    TOPIC_ID = 489
    
    # –ü–æ–ª—É—á–∞–µ–º API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    api_id = os.getenv('TELEGRAM_API_ID') or os.getenv('TG_APP_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH') or os.getenv('TG_API_HASH')
    
    print(f"API ID: {api_id}")
    print(f"API Hash: {api_hash[:10] if api_hash else '–ù–ï –ù–ê–ô–î–ï–ù'}...")
    
    if not api_id or not api_hash:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ –∫–∞–∫ –≤ —Ç–µ—Å—Ç–µ
        client = create_client(
            api_id=api_id,
            api_hash=api_hash,
            session_name="test_auth_session"
        )
        
        print("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
        async with client:
            print("‚úîÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            me = await client.get_me()
            print(f"‚úîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} (@{me.username})")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            entity = await client.get_entity(DIALOG_ID)
            print(f"‚úîÔ∏è –ß–∞—Ç: {entity.title}")
            
            print(f"\nüîç –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º–µ {TOPIC_ID}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ - iter_messages —Å reply_to
            messages = []
            count = 0
            
            try:
                async for message in client.iter_messages(
                    entity=DIALOG_ID,
                    limit=None,  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ
                    reply_to=TOPIC_ID
                ):
                    if message.text:
                        count += 1
                        msg_data = {
                            'id': message.id,
                            'date': message.date.isoformat() if message.date else None,
                            'text': message.message,
                            'from_id': getattr(message, 'from_id', None),
                            'reply_to_msg_id': getattr(message.reply_to, 'reply_to_msg_id', None) if hasattr(message, 'reply_to') and message.reply_to else None,
                            'topic_id': TOPIC_ID
                        }
                        messages.append(msg_data)
                        
                        if count % 100 == 0:
                            print(f"–ù–∞–π–¥–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π...")
                        
                        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 500 —Å–æ–æ–±—â–µ–Ω–∏–π
                        if count % 500 == 0:
                            temp_filename = f"temp_messages_{count}.json"
                            with open(temp_filename, 'w', encoding='utf-8') as f:
                                json.dump({'messages': messages}, f, ensure_ascii=False, indent=2)
                            print(f"üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {temp_filename}")
            
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                print(f"‚úîÔ∏è –ù–æ –ø–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –æ—à–∏–±–∫–∏")
            
            print(f"\n‚úîÔ∏è –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            try:
                filename = f"simple_topic_messages_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump({
                        'metadata': {
                            'topic_id': TOPIC_ID,
                            'dialog_id': DIALOG_ID,
                            'total_messages': len(messages),
                            'extraction_date': datetime.now().isoformat(),
                            'method': 'simple_iter_messages_reply_to',
                            'status': 'completed_with_errors' if len(messages) > 0 else 'failed'
                        },
                        'messages': messages
                    }, f, ensure_ascii=False, indent=2)
                
                print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
                
            except Exception as save_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_error}")
                # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                emergency_file = f"emergency_messages_{len(messages)}.json"
                with open(emergency_file, 'w', encoding='utf-8') as f:
                    json.dump(messages, f, ensure_ascii=False)
                print(f"üíæ –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {emergency_file}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if messages:
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {messages[0]['date']}")
                print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {messages[-1]['date']}")
                print(f"ID –¥–∏–∞–ø–∞–∑–æ–Ω: {min(msg['id'] for msg in messages)} - {max(msg['id'] for msg in messages)}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(get_topic_messages()) 