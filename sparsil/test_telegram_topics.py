#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ MCP Telegram —Å–µ—Ä–≤–µ—Ä–∞

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É:
1. ListForumTopics - —Å–ø–∏—Å–æ–∫ —Ç–µ–º –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
2. FindTopicByName - –ø–æ–∏—Å–∫ —Ç–µ–º—ã "–ó–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π"
3. ListTopicMessages - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ç–µ–º—ã
"""

import asyncio
import json
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ mcp-telegram –º–æ–¥—É–ª—é
sys.path.insert(0, str(Path("mcp-telegram-main/src").resolve()))

from mcp_telegram.tools import (
    ListForumTopics,
    FindTopicByName, 
    ListTopicMessages,
    tool_runner
)

async def test_forum_topics():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ–º"""
    print("=== –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–º ===")
    
    DIALOG_ID = -1002071074234  # "Frontend ‚Äì TO THE JOB"
    
    try:
        args = ListForumTopics(dialog_id=DIALOG_ID, limit=50)
        result = await tool_runner(args)
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞ {DIALOG_ID}:")
        for content in result:
            if content.type == "text":
                print(f"  {content.text}")
        
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º: {e}")
        return False

async def test_find_topic():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ç–µ–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    print("\n=== –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Ç–µ–º—ã '–ó–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π' ===")
    
    DIALOG_ID = -1002071074234
    TOPIC_NAME = "–ó–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π"
    
    try:
        args = FindTopicByName(
            dialog_id=DIALOG_ID,
            topic_name=TOPIC_NAME
        )
        result = await tool_runner(args)
        
        print(f"–ü–æ–∏—Å–∫ —Ç–µ–º—ã '{TOPIC_NAME}':")
        topic_id = None
        
        for content in result:
            if content.type == "text":
                print(f"  {content.text}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º topic_id –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
                if "FOUND:" in content.text and "topic_id=" in content.text:
                    parts = content.text.split()
                    for part in parts:
                        if part.startswith("topic_id="):
                            topic_id = int(part.split("=")[1])
        
        return topic_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–µ–º—ã: {e}")
        return None

async def test_topic_messages(topic_id: int):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–µ–º—ã"""
    print(f"\n=== –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–µ–º—ã {topic_id} ===")
    
    DIALOG_ID = -1002071074234
    
    try:
        args = ListTopicMessages(
            dialog_id=DIALOG_ID,
            topic_id=topic_id,
            limit=10  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
        )
        result = await tool_runner(args)
        
        print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–µ–º—ã {topic_id}:")
        message_count = 0
        
        for content in result:
            if content.type == "text":
                if "id=" in content.text and "text=" in content.text:
                    message_count += 1
                    print(f"  –°–æ–æ–±—â–µ–Ω–∏–µ {message_count}: {content.text[:100]}...")
                else:
                    print(f"  {content.text}")
        
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
        return message_count > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ MCP Telegram —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.getenv('TELEGRAM_API_ID') or not os.getenv('TELEGRAM_API_HASH'):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_API_ID –∏ TELEGRAM_API_HASH")
        print("\n–ü—Ä–∏–º–µ—Ä:")
        print("export TELEGRAM_API_ID='your_api_id'")
        print("export TELEGRAM_API_HASH='your_api_hash'")
        sys.exit(1)
    
    print(f"‚úÖ API ID: {os.getenv('TELEGRAM_API_ID')}")
    print(f"‚úÖ API Hash: {'*' * 10}")
    
    try:
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–º
        topics_success = await test_forum_topics()
        
        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
        topic_id = await test_find_topic()
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ —Ç–µ–º–∞ –Ω–∞–π–¥–µ–Ω–∞)
        messages_success = False
        if topic_id:
            messages_success = await test_topic_messages(topic_id)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º: {'OK' if topics_success else 'FAILED'}")
        print(f"‚úÖ –ü–æ–∏—Å–∫ —Ç–µ–º—ã: {'OK' if topic_id else 'FAILED'}")
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {'OK' if messages_success else 'FAILED'}")
        
        if topic_id and messages_success:
            print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print(f"üöÄ –¢–µ–º–∞ –Ω–∞–π–¥–µ–Ω–∞ —Å ID: {topic_id}")
            print(f"üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥!")
            print(f"\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            print(f"python telegram_topic_mass_parser.py")
        else:
            print(f"\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 