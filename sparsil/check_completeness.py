#!/usr/bin/env python3
"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–º—ã"""

import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ mcp-telegram –º–æ–¥—É–ª—é
sys.path.insert(0, str(Path("mcp-telegram-main/src").resolve()))

from mcp_telegram.tools import ListTopicMessages, tool_runner
from mcp_telegram.telegram import create_client
import asyncio

async def check_data_completeness():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
    with open('telegram_topic_messages.json', encoding='utf-8') as f:
        data = json.load(f)
    
    messages = data['messages']
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ù–û–¢–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
    print(f"üî¢ –ü–µ—Ä–≤–æ–µ (–Ω–æ–≤–µ–π—à–µ–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ: ID={messages[0]['id']}, –¥–∞—Ç–∞={messages[0]['date']}")
    print(f"üî¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ (—Å—Ç–∞—Ä–µ–π—à–µ–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ: ID={messages[-1]['id']}, –¥–∞—Ç–∞={messages[-1]['date']}")
    
    # –ê–Ω–∞–ª–∏–∑ ID —Å–æ–æ–±—â–µ–Ω–∏–π
    message_ids = [msg['id'] for msg in messages]
    print(f"üìà –î–∏–∞–ø–∞–∑–æ–Ω ID: {min(message_ids)} - {max(message_ids)}")
    print(f"üîç –ü—Ä–æ–ø—É—Å–∫–∏ –≤ ID: {max(message_ids) - min(message_ids) + 1 - len(message_ids)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ë–û–õ–ï–ï –°–¢–ê–†–´–• –°–û–û–ë–©–ï–ù–ò–ô:")
    print("–ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ...")
    
    DIALOG_ID = -1002071074234
    TOPIC_ID = 489
    oldest_id = min(message_ids)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ Telethon –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        async with create_client() as client:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ –Ω–∞—à–µ–≥–æ oldest_id
            older_messages = []
            async for message in client.iter_messages(
                entity=DIALOG_ID,
                limit=50,
                offset_id=oldest_id - 1,  # –ù–∞—á–∏–Ω–∞–µ–º —Å ID –º–µ–Ω—å—à–µ —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ
                reply_to=TOPIC_ID
            ):
                if message.text:
                    older_messages.append({
                        'id': message.id,
                        'date': message.date.isoformat() if message.date else None,
                        'text': message.text[:100] + '...' if len(message.text) > 100 else message.text
                    })
            
            print(f"üìú –ù–∞–π–¥–µ–Ω–æ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(older_messages)}")
            
            if older_messages:
                print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å—Ç—å –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
                print(f"üî¢ –°–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ: ID={older_messages[-1]['id']}, –¥–∞—Ç–∞={older_messages[-1]['date']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                print(f"\nüìã –ü–†–ò–ú–ï–†–´ –ü–†–û–ü–£–©–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô:")
                for i, msg in enumerate(older_messages[:5]):
                    print(f"  {i+1}. ID={msg['id']}: {msg['text']}")
                
                return False  # –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ
            else:
                print(f"‚úÖ –ë–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª–µ–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ë–û–õ–ï–ï –ù–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô:")
    newest_id = max(message_ids)
    
    try:
        async with create_client() as client:
            newer_messages = []
            async for message in client.iter_messages(
                entity=DIALOG_ID,
                limit=50,
                max_id=newest_id + 100,  # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–µ–µ
                reply_to=TOPIC_ID
            ):
                if message.text and message.id > newest_id:
                    newer_messages.append({
                        'id': message.id,
                        'date': message.date.isoformat() if message.date else None,
                        'text': message.text[:100] + '...' if len(message.text) > 100 else message.text
                    })
            
            print(f"üìú –ù–∞–π–¥–µ–Ω–æ –±–æ–ª–µ–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(newer_messages)}")
            
            if newer_messages:
                print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å—Ç—å –±–æ–ª–µ–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
                for i, msg in enumerate(newer_messages[:3]):
                    print(f"  {i+1}. ID={msg['id']}: {msg['text']}")
                return False  # –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ
            else:
                print(f"‚úÖ –ë–æ–ª–µ–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö: {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    print(f"\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:")
    print(f"üìà –í—Å–µ–≥–æ ID –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {max(message_ids) - min(message_ids) + 1}")
    print(f"üìã –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(messages)}")
    print(f"‚ùì –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {max(message_ids) - min(message_ids) + 1 - len(messages)}")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
    gaps = []
    for i in range(len(message_ids) - 1):
        current_id = message_ids[i]
        next_id = message_ids[i + 1]
        if current_id - next_id > 1:
            gaps.append((next_id + 1, current_id - 1))
    
    print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ ID: {len(gaps)}")
    if gaps:
        print(f"üîç –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–ø—É—Å–∫–æ–≤:")
        for i, (start, end) in enumerate(gaps[:5]):
            print(f"  {i+1}. ID {start} - {end} (–ø—Ä–æ–ø—É—Å–∫ {end-start+1} —Å–æ–æ–±—â–µ–Ω–∏–π)")
    
    return len(gaps) == 0

if __name__ == "__main__":
    result = asyncio.run(check_data_completeness())
    if result:
        print(f"\n‚úÖ –î–ê–ù–ù–´–ï –ü–û–õ–ù–´–ï!")
    else:
        print(f"\n‚ö†Ô∏è  –î–ê–ù–ù–´–ï –ù–ï–ü–û–õ–ù–´–ï - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥!") 