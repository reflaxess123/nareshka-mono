#!/usr/bin/env python3
"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∑–∞–ø–∏—Å–µ–π —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –∏–∑ JSON –≤ Markdown
–°–æ–∑–¥–∞–µ—Ç —á–∏—Ç–∞–µ–º—ã–π MD —Ñ–∞–π–ª –±–µ–∑ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤
"""

import json
import re
from datetime import datetime
from typing import List, Dict, Any
from collections import defaultdict

def sanitize_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown"""
    if not text:
        return ""
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ MD —Å–∏–º–≤–æ–ª—ã
    text = text.replace('\\', '\\\\')
    text = text.replace('`', '\\`')
    text = text.replace('*', '\\*')
    text = text.replace('_', '\\_')
    text = text.replace('#', '\\#')
    text = text.replace('[', '\\[')
    text = text.replace(']', '\\]')
    text = text.replace('(', '\\(')
    text = text.replace(')', '\\)')
    
    return text

def format_date(date_str: str) -> tuple:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        formatted = dt.strftime('%Y-%m-%d %H:%M')
        year_month = dt.strftime('%Y-%m')
        return formatted, year_month, dt
    except:
        return date_str, "unknown", None

def extract_company_name(text: str) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–ø–∞–Ω–∏–π
    company_patterns = [
        r'[–ö–∫]–æ–º–ø–∞–Ω–∏—è:\s*([^\n\r]+)',
        r'([A-Za-z–ê-–Ø–∞-—è0-9\s\.]+)\s*\(',
        r'^([A-Za-z–ê-–Ø–∞-—è0-9\s\.]+)',
    ]
    
    for pattern in company_patterns:
        match = re.search(pattern, text.strip())
        if match:
            company = match.group(1).strip()
            if len(company) > 3 and len(company) < 50:
                return company
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞
    words = text.strip().split()[:3]
    return ' '.join(words) if words else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"

def validate_message(msg: Dict[str, Any]) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    required_fields = ['id', 'date', 'text']
    
    for field in required_fields:
        if field not in msg:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–ª–µ {field} –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ID {msg.get('id', 'unknown')}")
            return False
    
    if not msg['text'] or len(msg['text'].strip()) < 10:
        print(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ID {msg['id']}")
        return False
    
    return True

def convert_to_markdown():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    
    print("üîÑ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø JSON ‚Üí MARKDOWN")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        with open('telegram_topic_messages.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª telegram_topic_messages.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return False
    
    messages = data.get('messages', [])
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
    interview_records = []
    skipped_count = 0
    
    for msg in messages:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–º—É 489)
        if msg.get('reply_to_msg_id') != 489:
            continue
            
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not validate_message(msg):
            skipped_count += 1
            continue
            
        interview_records.append(msg)
    
    print(f"‚úîÔ∏è –ó–∞–ø–∏—Å–µ–π —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π: {len(interview_records)}")
    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {skipped_count}")
    
    if not interview_records:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π!")
        return False
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    interview_records.sort(key=lambda x: x['date'])
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    by_month = defaultdict(list)
    companies = set()
    
    for record in interview_records:
        _, month_key, dt = format_date(record['date'])
        by_month[month_key].append(record)
        
        company = extract_company_name(record['text'])
        companies.add(company)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Markdown
    markdown_content = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    first_date, _, _ = format_date(interview_records[0]['date'])
    last_date, _, _ = format_date(interview_records[-1]['date'])
    
    markdown_content.extend([
        "# üìã –ó–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
        "",
        f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** Telegram —Ç–æ–ø–∏–∫ \"–ó–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π\"",
        f"**–ü–µ—Ä–∏–æ–¥:** {first_date} ‚Äî {last_date}",
        f"**–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** {len(interview_records)}",
        f"**–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π:** {len(companies)}",
        "",
        "---",
        ""
    ])
    
    # –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º
    markdown_content.extend([
        "## üìÖ –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º",
        ""
    ])
    
    for month in sorted(by_month.keys()):
        month_records = by_month[month]
        try:
            month_name = datetime.strptime(month + '-01', '%Y-%m-%d').strftime('%B %Y')
        except:
            month_name = month
        
        month_anchor = month.replace('-', '')
        markdown_content.append(f"- [{month_name}](#{month_anchor}) ({len(month_records)} –∑–∞–ø–∏—Å–µ–π)")
    
    markdown_content.extend(["", "---", ""])
    
    # –ó–∞–ø–∏—Å–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    current_month = None
    record_counter = 0
    
    for record in interview_records:
        formatted_date, month_key, dt = format_date(record['date'])
        
        # –ù–æ–≤—ã–π –º–µ—Å—è—Ü - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if month_key != current_month:
            current_month = month_key
            
            try:
                month_name = datetime.strptime(month_key + '-01', '%Y-%m-%d').strftime('%B %Y')
            except:
                month_name = month_key
            
            month_anchor = month_key.replace('-', '')
            markdown_content.extend([
                f"## {month_name} {{#{month_anchor}}}",
                ""
            ])
        
        # –ó–∞–ø–∏—Å—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
        record_counter += 1
        company = extract_company_name(record['text'])
        
        markdown_content.extend([
            f"### {record_counter}. {company}",
            "",
            f"**üìÖ –î–∞—Ç–∞:** {formatted_date}",
            f"**üÜî ID:** {record['id']}",
            "",
            "**üìù –û–ø–∏—Å–∞–Ω–∏–µ:**",
            "",
            "```",
            record['text'],
            "```",
            "",
            "---",
            ""
        ])
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    markdown_content.extend([
        "## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "",
        f"- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:** {len(interview_records)}",
        f"- **–ü–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:** {first_date} ‚Äî {last_date}",
        f"- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤:** {len(by_month)}",
        f"- **–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π:** {len(companies)}",
        "",
        "### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º:",
        ""
    ])
    
    for month in sorted(by_month.keys()):
        count = len(by_month[month])
        try:
            month_name = datetime.strptime(month + '-01', '%Y-%m-%d').strftime('%B %Y')
        except:
            month_name = month
        markdown_content.append(f"- **{month_name}:** {count} –∑–∞–ø–∏—Å–µ–π")
    
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    markdown_content.extend(["", f"*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {current_time}*"])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    output_file = 'interview_records.md'
    
    try:
        file_content = '\n'.join(markdown_content)
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(file_content)
        
        print(f"‚úÖ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù: {output_file}")
        print(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(file_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìù –ó–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(interview_records)}")
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

if __name__ == "__main__":
    success = convert_to_markdown()
    if success:
        print("\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!") 