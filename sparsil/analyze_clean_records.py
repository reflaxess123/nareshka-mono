#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —á–∏—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
"""

import json
from datetime import datetime
from collections import Counter

def analyze_clean_records():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∑–∞–ø–∏—Å–µ–π"""
    
    print("üìä –ê–ù–ê–õ–ò–ó –ß–ò–°–¢–´–• –ó–ê–ü–ò–°–ï–ô –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–ô")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with open('telegram_topic_messages.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    messages = data['messages']
    print(f"‚úîÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
    
    # –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è
    print(f"\nüìÖ –•–†–û–ù–û–õ–û–ì–ò–Ø:")
    print(f"–°–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ: {messages[-1]['date']} (ID={messages[-1]['id']})")
    print(f"–°–∞–º–æ–µ –Ω–æ–≤–æ–µ: {messages[0]['date']} (ID={messages[0]['id']})")
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
    dates = []
    for msg in messages:
        if msg['date']:
            dates.append(datetime.fromisoformat(msg['date'].replace('Z', '+00:00')))
    
    dates.sort()
    print(f"–ü–µ—Ä–∏–æ–¥: {dates[0].strftime('%Y-%m-%d')} ‚Äî {dates[-1].strftime('%Y-%m-%d')}")
    print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(dates[-1] - dates[0]).days} –¥–Ω–µ–π")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
    print(f"\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ú–ï–°–Ø–¶–ê–ú:")
    monthly = Counter()
    for date in dates:
        month_key = date.strftime('%Y-%m')
        monthly[month_key] += 1
    
    for month, count in sorted(monthly.items()):
        print(f"  {month}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π
    print(f"\nüîç –°–¢–†–£–ö–¢–£–†–ê –°–û–û–ë–©–ï–ù–ò–ô:")
    
    # –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤
    text_lengths = [len(msg['text']) for msg in messages if msg['text']]
    avg_length = sum(text_lengths) / len(text_lengths)
    
    print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {avg_length:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π: {min(text_lengths)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π: {max(text_lengths)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    print(f"\nüìù –ü–†–ò–ú–ï–†–´ –ó–ê–ü–ò–°–ï–ô:")
    
    # –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    short_msg = min(messages, key=lambda x: len(x['text']) if x['text'] else 999999)
    print(f"\nüî∏ –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(short_msg['text'])} —Å–∏–º–≤–æ–ª–æ–≤):")
    print(f"  –î–∞—Ç–∞: {short_msg['date']}")
    print(f"  –¢–µ–∫—Å—Ç: {short_msg['text'][:200]}...")
    
    # –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    long_msg = max(messages, key=lambda x: len(x['text']) if x['text'] else 0)
    print(f"\nüî∏ –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(long_msg['text'])} —Å–∏–º–≤–æ–ª–æ–≤):")
    print(f"  –î–∞—Ç–∞: {long_msg['date']}")
    print(f"  –¢–µ–∫—Å—Ç: {long_msg['text'][:200]}...")
    
    # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –°–û–î–ï–†–ñ–ê–ù–ò–Ø:")
    
    all_text = ' '.join([msg['text'].lower() for msg in messages if msg['text']])
    
    keywords = [
        '–∫–æ–º–ø–∞–Ω–∏—è', '–≤–∞–∫–∞–Ω—Å–∏—è', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', 
        '–∑–∞–¥–∞—á–∞', '–≤–æ–ø—Ä–æ—Å', 'react', 'vue', 'javascript', 'typescript',
        '–æ–ø—ã—Ç', '–ø—Ä–æ–µ–∫—Ç', '–∫–æ–º–∞–Ω–¥–∞'
    ]
    
    for keyword in keywords:
        count = all_text.count(keyword)
        if count > 10:
            print(f"  '{keyword}': {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    print(f"\n‚úîÔ∏è –ò–¢–û–ì–û: {len(messages)} —á–∏—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π")
    print(f"   —Å {dates[0].strftime('%Y-%m-%d')} –ø–æ {dates[-1].strftime('%Y-%m-%d')}")

if __name__ == "__main__":
    analyze_clean_records() 