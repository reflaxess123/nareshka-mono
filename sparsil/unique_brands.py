#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π
–£–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
"""

import re
from typing import List, Dict, Set
from collections import defaultdict

def extract_brand_name(company: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    if not company:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
    name = re.sub(r'^\s*\d+\.\s*', '', company)
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤ —Å–∫–æ–±–∫–∞—Ö –∏ –ø–æ—Å–ª–µ –Ω–∏—Ö
    name = re.sub(r'\s*\([^)]*\).*$', '', name)
    name = re.sub(r'\s*\[[^\]]*\].*$', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ç–∏—Ä–µ, –∑–∞–ø—è—Ç–æ–π
    name = re.sub(r'\s*[-‚Äì‚Äî,].*$', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    name = re.sub(r'\s+(–ø—Ä–æ–µ–∫—Ç|–∞—É—Ç—Å—Ç–∞—Ñ—Ñ|–∫–æ–º–∞–Ω–¥–∞|–æ—Ç–¥–µ–ª|—Å—Ç—Ä–∏–º|–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞).*$', '', name, flags=re.IGNORECASE)
    name = re.sub(r'\s+(–Ω–∞ –ø—Ä–æ–µ–∫—Ç|–≤ –∫–æ–º–∞–Ω–¥—É|—á–µ—Ä–µ–∑|–æ—Ç).*$', '', name, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —ç—Ç–∞–ø–æ–≤ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    name = re.sub(r'\s+\d+\s*(—ç—Ç–∞–ø|–π —ç—Ç–∞–ø|–æ–π —ç—Ç–∞–ø|—Å–µ–∫—Ü–∏—è|—á–∞—Å—Ç—å).*$', '', name, flags=re.IGNORECASE)
    name = re.sub(r'\s+(—Ç–µ—Ö|—Ç–µ—Ö–Ω–∏—á–∫–∞|—Å–æ–±–µ—Å|—Å–∫—Ä–∏–Ω–∏–Ω–≥|–∏–Ω—Ç–µ—Ä–≤—å—é|—Ñ–∏–Ω–∞–ª).*$', '', name, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—ã
    name = re.sub(r'\s+\d{2}\.\d{2}.*$', '', name)
    name = re.sub(r'\s+–æ—Ç \d{2}\.\d{2}.*$', '', name)
    
    # –£–±–∏—Ä–∞–µ–º markdown –∏ —Å–∏–º–≤–æ–ª—ã
    name = re.sub(r'\*\*', '', name)
    name = name.replace('"', '').replace("'", '').replace('`', '')
    name = re.sub(r'^[:\-\*\s]+', '', name)
    name = re.sub(r'[:\-\*\s]+$', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    name = ' '.join(name.split())
    
    return name.strip()

def normalize_for_comparison(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
    if not name:
        return ""
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    normalized = name.lower()
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
    normalized = re.sub(r'[^–∞-—è—ëa-z0-9]', '', normalized)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
    if normalized in ['—Å–±–µ—Ä', '—Å–±–µ—Ä–±–∞–Ω–∫']:
        return '—Å–±–µ—Ä'
    elif normalized in ['–∞–ª—å—Ñ–∞–±–∞–Ω–∫', '–∞–ª—å—Ñ–∞']:
        return '–∞–ª—å—Ñ–∞–±–∞–Ω–∫'
    elif normalized in ['—Ç–∏–Ω—å–∫–æ—Ñ—Ñ', '—Ç–±–∞–Ω–∫', '—Ç-–±–∞–Ω–∫']:
        return '—Ç–∏–Ω—å–∫–æ—Ñ—Ñ'
    elif normalized in ['—è–Ω–¥–µ–∫—Å']:
        return '—è–Ω–¥–µ–∫—Å'
    elif normalized in ['–≥–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫']:
        return '–≥–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫'
    elif normalized in ['–º—Ç—Å']:
        return '–º—Ç—Å'
    elif normalized in ['–≤—Ç–±']:
        return '–≤—Ç–±'
    
    return normalized

def is_valid_brand(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã–º –±—Ä–µ–Ω–¥–æ–º"""
    if not name or len(name) < 2:
        return False
    
    name_lower = name.lower()
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    garbage_patterns = [
        r'^[:\-\*\s\d]+$',  # –¢–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã
        r'—Ç–µ—Ö\s*—Å–æ–±–µ—Å', r'–ª–∞–π–≤–∫–æ–¥–∏–Ω–≥', r'—Å–∫—Ä–∏–Ω–∏–Ω–≥', r'—ç—Ç–∞–ø', r'—Ñ–∏–Ω–∞–ª',
        r'–∑–∞–¥–∞—á–∞', r'–≤–æ–ø—Ä–æ—Å', r'—Ä–µ—à–µ–Ω–∏–µ', r'–Ω–∞–ø–∏—Å–∞—Ç—å', r'—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å',
        r'function', r'import', r'export', r'const', r'console',
        r'–∞—É—Ç—Å—Ç–∞—Ñ—Ñ$', r'–∞—É—Ç—Å–æ—Ä—Å$', r'–ø—Ä–æ–µ–∫—Ç$', r'–∫–æ–º–∞–Ω–¥–∞$',
        r'—á—Ç–æ –≤—ã–≤–µ–¥–µ—Ç', r'–Ω–∞–π—Ç–∏ –≤—Å–µ', r'—Å–æ–∑–¥–∞—Ç—å', r'–¥–æ–±–∞–≤–∏—Ç—å'
    ]
    
    for pattern in garbage_patterns:
        if re.search(pattern, name_lower):
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±—É–∫–≤
    if not re.search(r'[–∞-—è—ëa-zA-Z]', name):
        return False
    
    # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
    if len(name) > 50:
        return False
    
    return True

def choose_best_brand_name(names: List[str]) -> str:
    """–í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"""
    if not names:
        return ""
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ
    valid_names = [n for n in names if is_valid_brand(n)]
    if not valid_names:
        return ""
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞–∑–≤–∞–Ω–∏—è (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)
    def name_quality_score(name: str) -> tuple:
        length = len(name)
        has_symbols = bool(re.search(r'[^\w\s–∞-—è—ë–ê-–Ø–Å]', name))
        has_numbers = bool(re.search(r'\d', name))
        is_all_caps = name.isupper()
        has_spaces_issues = '  ' in name or name.startswith(' ') or name.endswith(' ')
        has_description_words = any(word in name.lower() for word in [
            '–ø—Ä–æ–µ–∫—Ç', '–∞—É—Ç—Å—Ç–∞—Ñ—Ñ', '–∫–æ–º–∞–Ω–¥–∞', '–æ—Ç–¥–µ–ª', '—ç—Ç–∞–ø', '—Ç–µ—Ö', '—Å–æ–±–µ—Å'
        ])
        
        return (has_description_words, has_symbols, has_numbers, is_all_caps, has_spaces_issues, length)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∏ –±–µ—Ä–µ–º –ª—É—á—à–∏–π
    sorted_names = sorted(valid_names, key=name_quality_score)
    return sorted_names[0]

def create_unique_brands():
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π"""
    
    print("üè¢ –°–û–ó–î–ê–ù–ò–ï –°–ü–ò–°–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–´–• –ë–†–ï–ù–î–û–í –ö–û–ú–ü–ê–ù–ò–ô")
    print("=" * 60)
    
    # –ß–∏—Ç–∞–µ–º —É–ª—å—Ç—Ä–∞-—á–∏—Å—Ç—ã–π —Å–ø–∏—Å–æ–∫
    try:
        with open('ultra_clean_companies.txt', 'r', encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª ultra_clean_companies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    lines = content.split('\n')
    companies = []
    in_full_list = False
    
    for line in lines:
        line = line.strip()
        if '–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö' in line:
            in_full_list = True
            continue
        elif in_full_list and line and not line.startswith('-'):
            # –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
            clean_line = re.sub(r'^\s*\d+\.\s*', '', line)
            if clean_line:
                companies.append(clean_line)
    
    print(f"üìã –ò—Å—Ö–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(companies)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–∞–∑–æ–≤–æ–º—É –±—Ä–µ–Ω–¥—É
    brand_groups = defaultdict(list)
    processed = 0
    
    for company in companies:
        brand = extract_brand_name(company)
        if not brand or not is_valid_brand(brand):
            continue
        
        normalized_key = normalize_for_comparison(brand)
        if normalized_key:
            brand_groups[normalized_key].append(brand)
            processed += 1
    
    print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
    print(f"üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {len(brand_groups)}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
    unique_brands = []
    duplicates_merged = 0
    
    print(f"\nüîÑ –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ï –î–£–ë–õ–ò–ö–ê–¢–´:")
    for normalized_key, brand_variants in brand_groups.items():
        if len(brand_variants) > 1:
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
            unique_variants = list(set(brand_variants))
            if len(unique_variants) > 1:
                print(f"  {normalized_key}: {unique_variants}")
                duplicates_merged += len(unique_variants) - 1
        
        best_brand = choose_best_brand_name(brand_variants)
        if best_brand:
            unique_brands.append(best_brand)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    unique_brands.sort(key=lambda x: x.lower())
    
    print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {len(unique_brands)}")
    print(f"   –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_merged}")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    brand_mentions = defaultdict(int)
    for normalized_key, variants in brand_groups.items():
        best_brand = choose_best_brand_name(variants)
        if best_brand:
            brand_mentions[best_brand] = len(variants)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_file = 'unique_brands_list.txt'
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("–£–ù–ò–ö–ê–õ–¨–ù–´–ï –ë–†–ï–ù–î–´ –ö–û–ú–ü–ê–ù–ò–ô\n")
        f.write("=" * 60 + "\n\n")
        f.write(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {len(unique_brands)}\n")
        f.write(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_merged}\n\n")
        
        # –¢–û–ü –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        popular_brands = sorted(unique_brands, key=lambda x: brand_mentions.get(x, 1), reverse=True)
        
        f.write("–¢–û–ü-30 –°–ê–ú–´–• –ü–û–ü–£–õ–Ø–†–ù–´–• –ë–†–ï–ù–î–û–í:\n")
        f.write("-" * 40 + "\n")
        for i, brand in enumerate(popular_brands[:30], 1):
            mentions = brand_mentions.get(brand, 1)
            f.write(f"{i:2d}. {brand} ({mentions} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π)\n")
        
        f.write(f"\n\n–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –£–ù–ò–ö–ê–õ–¨–ù–´–• –ë–†–ï–ù–î–û–í ({len(unique_brands)}):\n")
        f.write("-" * 40 + "\n")
        
        for i, brand in enumerate(unique_brands, 1):
            f.write(f"{i:3d}. {brand}\n")
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–ü-20
    print(f"\nüèÜ –¢–û–ü-20 –°–ê–ú–´–• –ü–û–ü–£–õ–Ø–†–ù–´–• –ë–†–ï–ù–î–û–í:")
    popular_top20 = sorted(unique_brands, key=lambda x: brand_mentions.get(x, 1), reverse=True)[:20]
    for i, brand in enumerate(popular_top20, 1):
        mentions = brand_mentions.get(brand, 1)
        print(f"{i:2d}. {brand} ({mentions} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π)")

if __name__ == "__main__":
    create_unique_brands() 