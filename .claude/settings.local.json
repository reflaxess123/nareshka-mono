{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(curl:*)",
      "Bash(tail:*)",
      "Bash(npm run dev:*)",
      "Bash(grep:*)",
      "Bash(python:*)",
      "Bash(rm:*)",
      "Bash(cp:*)",
      "Bash(ren:*)",
      "Bash(mv:*)",
      "Bash(powershell:*)",
      "Bash(mkdir:*)",
      "mcp__ide__getDiagnostics",
      "Bash(rg:*)",
      "Bash(echo:*)",
      "Bash(echo \"code_editor -> task:\")",
      "Bash(wc:*)",
      "Bash(sed:*)",
      "Bash(go mod init:*)",
      "Bash(go mod:*)",
      "Bash(chmod:*)",
      "Bash(make:*)",
      "Bash(./test_basic.sh:*)",
      "Bash(brew install:*)",
      "Bash(./test_server.sh:*)",
      "Bash(pkill:*)",
      "Bash(go run:*)",
      "Bash(psql:*)",
      "Bash(docker:*)",
      "Bash(go build:*)",
      "mcp__postgres__list_schemas",
      "Bash(PGPASSWORD=postgres psql -h localhost -U postgres -d nareshka -c \"ALTER TABLE theory_cards ALTER COLUMN tags TYPE jsonb USING to_jsonb(tags);\")",
      "Bash(telnet:*)",
      "Bash(ping:*)",
      "Bash(nslookup:*)",
      "Bash(python -c \"\nimport sys\nsys.path.append(''C:/Users/refla/nareshka-mono/back'')\n\nfrom app.core.settings import settings\nfrom sqlalchemy import create_engine\nimport time\n\n# Тестируем без pool настроек\nstart = time.time()\nengine_simple = create_engine(settings.database_url, echo=False)\nconn = engine_simple.connect()\nprint(f''Simple engine: {time.time()-start:.3f}s'')\nconn.close()\nengine_simple.dispose()\n\")",
      "Bash(python -c \"\nimport sys\nsys.path.append(''C:/Users/refla/nareshka-mono/back'')\n\nfrom sqlalchemy import create_engine\nimport time\n\nurls = [\n    ''postgresql://postgres:dev_password@127.0.0.1:5432/nareshka_dev'',\n    ''postgresql+psycopg2://postgres:dev_password@127.0.0.1:5432/nareshka_dev'',\n    ''postgresql://postgres:dev_password@127.0.0.1:5432/nareshka_dev?sslmode=disable'',\n    ''postgresql://postgres:dev_password@127.0.0.1:5432/nareshka_dev?connect_timeout=5''\n]\n\nfor url in urls:\n    try:\n        start = time.time()\n        engine = create_engine(url, echo=False)\n        conn = engine.connect()\n        duration = time.time() - start\n        print(f''{duration:.3f}s - {url.split(\"\"?\"\")[1] if \"\"?\"\" in url else url.split(\"\"://\"\")[0]}'')\n        conn.close()\n        engine.dispose()\n    except Exception as e:\n        print(f''FAILED - {url}: {e}'')\n\")",
      "Bash(python -c \"\nimport sys\nsys.path.append(''C:/Users/refla/nareshka-mono/back'')\n\nimport psycopg2\nconn = psycopg2.connect(''postgresql://postgres:dev_password@127.0.0.1:5432/nareshka_dev?sslmode=disable'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, email, password FROM \"\"User\"\" WHERE email = %s'', (''asd@asd.ru'',))\nuser = cursor.fetchone()\nif user:\n    print(f''User found: ID={user[0]}, Email={user[1]}'')\n    print(f''Password hash: {user[2][:50]}...'')\nelse:\n    print(''User not found!'')\nconn.close()\n\")",
      "Bash(python -c \"\nimport sys\nsys.path.append(''C:/Users/refla/nareshka-mono/back'')\n\nfrom passlib.context import CryptContext\nimport time\n\npwd_context = CryptContext(schemes=[''bcrypt''], deprecated=''auto'')\n\n# Получаем хеш из базы\nimport psycopg2\nconn = psycopg2.connect(''postgresql://postgres:dev_password@127.0.0.1:5432/nareshka_dev?sslmode=disable'')\ncursor = conn.cursor()\ncursor.execute(''SELECT password FROM \"\"User\"\" WHERE email = %s'', (''asd@asd.ru'',))\nhash_from_db = cursor.fetchone()[0]\nconn.close()\n\n# Тестируем bcrypt verify\nprint(''Testing bcrypt password verification...'')\nstart = time.time()\nresult = pwd_context.verify(''123123'', hash_from_db)\nduration = time.time() - start\n\nprint(f''Password verify result: {result}'')\nprint(f''Password verify time: {duration:.3f}s'')\n\")",
      "Bash(python -c \"\nimport requests\nimport time\nimport json\n\nprint(''Testing login API...'')\nstart = time.time()\n\ntry:\n    response = requests.post(\n        ''http://127.0.0.1:4000/api/v2/auth/login'',\n        json={''email'': ''asd@asd.ru'', ''password'': ''123123''},\n        timeout=30\n    )\n    duration = time.time() - start\n    \n    print(f''Login API time: {duration:.3f}s'')\n    print(f''Status code: {response.status_code}'')\n    print(f''Response: {response.text[:200]}...'')\n    \nexcept requests.exceptions.Timeout:\n    duration = time.time() - start\n    print(f''LOGIN TIMEOUT after {duration:.3f}s'')\nexcept Exception as e:\n    duration = time.time() - start\n    print(f''LOGIN ERROR after {duration:.3f}s: {e}'')\n\")",
      "Bash(jq:*)",
      "Bash(pip install:*)",
      "Bash(del:*)",
      "Bash(git restore:*)",
      "Bash(ls:*)",
<<<<<<< HEAD
      "mcp__ide__executeCode"
=======
      "Bash(poetry run:*)"
>>>>>>> 52d07ec1bee6d32281a673d317f47d47b31305e6
    ],
    "deny": []
  }
}