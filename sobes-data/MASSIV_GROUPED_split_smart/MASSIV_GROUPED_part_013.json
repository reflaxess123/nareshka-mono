    ]
  },
  {
    "company": "10 Бсс",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-18 18:36:20",
        "content": "2024-10-18 18:36:20\n Mike -> 2071074234:\n16.10 БСС\nВакансия:https://hh.ru/vacancy/108321405\nЗП:250к\n1.Как задача прилетала в бэклог флоу\n2.this \n3.call/bind/apply\n4.Замыкание\n5.EventLoop\n6.что относится  к микротаскам\n7.async/await\n8.DOM\n9.почему не можем юзать HTML вместо дома(js только через DOM работает)\n10.Всплытие/Погружение подробно\n11.stopPropagation & preventDefault\n12.3 хука, с которыми чаще всего работал\n13.useRef\n14.useEffect как может себя вести(уберем зависимости или вообще не напиш...",
        "full_content": "2024-10-18 18:36:20\n Mike -> 2071074234:\n16.10 БСС\nВакансия:https://hh.ru/vacancy/108321405\nЗП:250к\n1.Как задача прилетала в бэклог флоу\n2.this \n3.call/bind/apply\n4.Замыкание\n5.EventLoop\n6.что относится  к микротаскам\n7.async/await\n8.DOM\n9.почему не можем юзать HTML вместо дома(js только через DOM работает)\n10.Всплытие/Погружение подробно\n11.stopPropagation & preventDefault\n12.3 хука, с которыми чаще всего работал\n13.useRef\n14.useEffect как может себя вести(уберем зависимости или вообще не напишем их)\n15.HOC\n16.useMemo vs useCallback\n17.redux\n18.middleware\n19.HOC(HOF)\n20.HTTP vs HTTPS\n21.Открытый/закрытый ключ\n22.Как настроить кэширование в браузере\n23.session vs localStorage\n24.задача 1: написать палиндром + как можно его оптимизировать\n25.задача 2: проверить совпадают ли скобоки(\"((()))\") и как можно оптимизировать решение\n26.задачв 3: привести к такой записи строку (9999/9999)"
      }
    ]
  },
  {
    "company": "Lada Цифра",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-05 07:24:31",
        "content": "2025-02-05 07:24:31\n Сергей -> 2071074234:\nКомпания: Lada цифра\nВакансия: hr Написала\nВопросы:\nМасимально душный собес, толком вопросов нет, общение\nна понимание твоих знаний. На один ответ в ответ идет еще\nдва вопроса)\n- Задача с SetTimeout и бесконечным циклом, просят\nсказать что выведется в консоли(ответ с бесконечным\nциклом неверный, задача исходная не осталась)\nИсправленная\nfunction getCookiesCount(callback) {\n    let cookies = 0;\n\n   const interval = setInterval(()=> {\n       cookies++;\n  ...",
        "full_content": "2025-02-05 07:24:31\n Сергей -> 2071074234:\nКомпания: Lada цифра\nВакансия: hr Написала\nВопросы:\nМасимально душный собес, толком вопросов нет, общение\nна понимание твоих знаний. На один ответ в ответ идет еще\nдва вопроса)\n- Задача с SetTimeout и бесконечным циклом, просят\nсказать что выведется в консоли(ответ с бесконечным\nциклом неверный, задача исходная не осталась)\nИсправленная\nfunction getCookiesCount(callback) {\n    let cookies = 0;\n\n   const interval = setInterval(()=> {\n       cookies++;\n    }\n   \n    setTimeout(()=> {\n        clearInterval(interval);\n        callback(cookies);\n    }, 2000);\n}\n\ngetCookiesCount(result => {\n    console.log(result)\n})\n\n- Хостинг\n- Почему var поднимается\n- Что такое callback Hell\n- Что будет если подсунуть исходники в Source`ы\n- Как работает debugger\n- Компиляция\n- Инициализация\n- Куда попадает var, почему оно хостится\n- Для чего придумали async/await\n- Что будет если подсовывать исходники в source\n- Способы оптимизации страницы\n- Что такое чистая функция\n- Что такое RUM для чего нужен\n- В каких компонентах и какие тесты писали\n- Задача на область видимости\nconst arrUnSort = [1, 4, 26, 9, 2];\nconst arrSort = []:\n\narraySorted(arrUnSort, arrSort);\n\nfunction arraySorted(arrUnSort, arrSort) {\n    arrSort = arrUnSort.sort();\n}\n\nconsole.log(arrSort);\nconsole.log(arrUnSort);"
      }
    ]
  },
  {
    "company": "Doubletapp",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-14 20:33:41",
        "content": "2024-11-14 20:33:41\n Стас Тихомиров -> 2071074234:\nКомпания: Doubletapp разговор с HR\nВакансия: https://spb.hh.ru/vacancy/109662867?hhtmFrom=employer_vacancies\nЗП: 200к\nВопросы:\n- Причины ухода\n- Расскажи о предыдущем месте\n- какие ожидания от места работы\n- Чем занимался\n- 2 задачи\n function countCharacters(inputString) {\n    const charCount = {};\n    \n    for (const char of inputString) {\n        if (charCount[char]) {\n            charCount[char] += 1;\n        } else {\n            charCount[ch...",
        "full_content": "2024-11-14 20:33:41\n Стас Тихомиров -> 2071074234:\nКомпания: Doubletapp разговор с HR\nВакансия: https://spb.hh.ru/vacancy/109662867?hhtmFrom=employer_vacancies\nЗП: 200к\nВопросы:\n- Причины ухода\n- Расскажи о предыдущем месте\n- какие ожидания от места работы\n- Чем занимался\n- 2 задачи\n function countCharacters(inputString) {\n    const charCount = {};\n    \n    for (const char of inputString) {\n        if (charCount[char]) {\n            charCount[char] += 1;\n        } else {\n            charCount[char] = 1;\n        }\n    }\n    \n    return charCount;\n}\n\n// Пример использования\nconst inputStr = \"aabbccaaab\";\nconst result = countCharacters(inputStr);\nconsole.log(result);  // Вывод: { a: 5, b: 3, c: 2 }\nвывести все значения values в массив\n// Пример дерева\nconst tree = {\n    value: 1,\n    children: [\n        {\n            value: 2,\n            children: [\n                {\n                    value: 4,\n                    children: null\n                },\n                {\n                    value: 5,\n                    children: null\n                }\n            ]\n        },\n        {\n            value: 3,\n            children: null\n        }\n    ]\n};\n function traverseTree(node) {\n    let values = [node.value];\n    if (node.children) {\n        node.children.forEach(child => {\n      values = values.concat(traverseTree(child));\n});\n    }\n    return values;\n}\n\nconst result = traverseTree(tree);\nconsole.log(result); // [1, 2, 3, 4, 5]"
      }
    ]
  },
  {
    "company": "Леруа Мерлен",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-02 03:16:58",
        "content": "2024-11-02 03:16:58\n Никита -> 2071074234:\n(Лемана ПРО) Леруа Мерлен\nзп 250k \nвакансия https://telegra.ph/Frontend-developer-React-Leroy-Merlin-09-25-2",
        "full_content": "2024-11-02 03:16:58\n Никита -> 2071074234:\n(Лемана ПРО) Леруа Мерлен\nзп 250k \nвакансия https://telegra.ph/Frontend-developer-React-Leroy-Merlin-09-25-2"
      }
    ]
  },
  {
    "company": "Кокос.Group",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-10 14:28:32",
        "content": "2024-07-10 14:28:32\n Artur -> 2071074234:\nКокос.Group\n\n— Вакансия: https://nn.hh.ru/vacancy/102380926?hhtmFrom=vacancy_responses\n— ЗП: говорил 180к+\n\nВопросы:\n— какие проблемы решают вебсокеты\n— какие еще методы знаешь кроме вебсокетов\n— как под капотом работает next/dynamic, как происходит что страница загрузится быстрее\n— почему next.js на проекте выбрали\n— что такое гидрация\n\nЗадачи: \n\n1) реализовать получение информации и пагинацию\n\n// Task: Fetch and Display Posts with Pagination\n\n// Object...",
        "full_content": "2024-07-10 14:28:32\n Artur -> 2071074234:\nКокос.Group\n\n— Вакансия: https://nn.hh.ru/vacancy/102380926?hhtmFrom=vacancy_responses\n— ЗП: говорил 180к+\n\nВопросы:\n— какие проблемы решают вебсокеты\n— какие еще методы знаешь кроме вебсокетов\n— как под капотом работает next/dynamic, как происходит что страница загрузится быстрее\n— почему next.js на проекте выбрали\n— что такое гидрация\n\nЗадачи: \n\n1) реализовать получение информации и пагинацию\n\n// Task: Fetch and Display Posts with Pagination\n\n// Objective:\n// Create a React application that fetches posts from the JSONPlaceholder API\n// and displays them with pagination.\n\n// Requirements:\n// 1. Fetch Posts:\n//    - Fetch posts from `https://jsonplaceholder.typicode.com/posts?_page=1&_limit=10`.\n//    - Display the posts in a list format.\n// 2. Pagination:\n//    - Implement pagination to navigate through the list of posts.\n// 3. Loading State:\n//    - Show a loading indicator while fetching the posts.\n// 4. Error Handling:\n//    - Display an error message if the fetch request fails.\n\nimport \"./styles.css\";\nimport { useState, useEffect } from \"react\";\n\n// const POSTS_API_URL =\n//   \"https://jsonplaceholder.typicode.com/posts?_page=1&_limit=10\";\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(10);\n\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const res = await fetch(\n          `https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=10`\n        );\n        const postsData = await res.json();\n        setPosts(postsData);\n      } catch (err) {\n        setError(err.message);\n        setPosts([]);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [page]);\n\n  const hadlePrevPage = () => {\n    setPage((prevPage) => Math.max(prevPage - 1, 1));\n    console.log(page);\n  };\n\n  const hadleNextPage = () => {\n    setPage((prevPage) => Math.min(prevPage + 1, totalPages));\n    console.log(page);\n  };\n\n  return (\n    <div>\n      {loading && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      <ul>\n        {posts.map((post) => {\n          return <li key={post.id}>{post.title}</li>;\n        })}\n      </ul>\n      <div className=\"pagination\">\n        <button onClick={hadlePrevPage}>Prev</button>\n        <button onClick={hadleNextPage}>Next</button>\n      </div>\n    </div>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <h1>Posts</h1>\n      </header>\n\n      <Posts />\n    </div>\n  );\n}\n\n\n2) решить задачу с числами Фибоначчи, по индексу вывести число\n\nfunction fibonacci(n) {\n    if (n <= 1) return n;\n\n    let a = 0, b = 1, temp;\n\n    for (let i = 2; i <= n; i++) {\n        temp = a + b;\n        a = b;\n        b = temp;\n    }\n\n    return b;\n}\n\n// Пример использования:\nconsole.log(fibonacci(10)); // Вывод: 55"
      }
    ]
  },
  {
    "company": "Centicore Solutions На Проект Go Invest",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-20 20:28:33",
        "content": "2024-06-20 20:28:33\n Руслан -> 2071074234:\nКомпания: Centicore Solutions на проект Go Invest\nСсылка: hr сама написала\nЗП:  280к\nУровень: middle\nУспех собеса: ?\n\nВопросы от hr:\n1. как создать кастомный хук в реакт\n2. сложность алгоритма пузырьковой сортировки\n3. как передаются куки с клиента на сервер\n4. что такое cors, для чего используется\n5. самый эффективный способ глубокого клонирования объектов в js",
        "full_content": "2024-06-20 20:28:33\n Руслан -> 2071074234:\nКомпания: Centicore Solutions на проект Go Invest\nСсылка: hr сама написала\nЗП:  280к\nУровень: middle\nУспех собеса: ?\n\nВопросы от hr:\n1. как создать кастомный хук в реакт\n2. сложность алгоритма пузырьковой сортировки\n3. как передаются куки с клиента на сервер\n4. что такое cors, для чего используется\n5. самый эффективный способ глубокого клонирования объектов в js"
      }
    ]
  },
  {
    "company": "Ротек",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-11 12:49:30",
        "content": "2024-11-11 12:49:30\n Егор -> 2071074234:\nКомпания: РОТЕК\nВакансия: https://hh.ru/vacancy/109140892\nЗП: 180+\nВопросы:\n- Расскажите о себе\n- Твои слабые сильные стороны\n- Как развиваешься\n- Что последнее изучал\n- Каких бы задач хотелось избежать\n- Почему ищешь новое место работы\n\nТех. вопросы:\n- Event-loop\n- CORS\n- Http vs Https\n- var let const\n- типы данных в js\n- promise\n- promise.race\n- bind call apply\n- this\n- стрелочная функция и обычная отличия\n- React в чем смысл\n- key зачем нужен\n- Хуки, п...",
        "full_content": "2024-11-11 12:49:30\n Егор -> 2071074234:\nКомпания: РОТЕК\nВакансия: https://hh.ru/vacancy/109140892\nЗП: 180+\nВопросы:\n- Расскажите о себе\n- Твои слабые сильные стороны\n- Как развиваешься\n- Что последнее изучал\n- Каких бы задач хотелось избежать\n- Почему ищешь новое место работы\n\nТех. вопросы:\n- Event-loop\n- CORS\n- Http vs Https\n- var let const\n- типы данных в js\n- promise\n- promise.race\n- bind call apply\n- this\n- стрелочная функция и обычная отличия\n- React в чем смысл\n- key зачем нужен\n- Хуки, пояснить за те что знаешь\n- Generic\n- Untility Types\n\nЗадачи:\nФункция подсчёта символов в строке \n\n``` function countCharacters(string) {\n    const charCount = {};\n\n    for (let char of string) {\n        if (charCount[char]) {\n            charCount[char]++;\n        } else {\n            charCount[char] = 1;\n        }\n    }\n\n    return charCount;\n}\nconst inputString = \"Пример строки\";\nconst result = countCharacters(inputString);\n\nconsole.log(\"Количество вхождений каждого символа:\");\nfor (let char in result) {\n    console.log(${char}: ${result[char]});\n}  \n```"
      }
    ]
  },
  {
    "company": "Dogma",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-02-13 14:02:25",
        "content": "2024-02-13 14:02:25\n Aziz Gaynetdinov -> 2071074234:\nКомпания: Dogma\nСсылка на вакансию: https://krasnodar.hh.ru/vacancy/92590179?hhtmFrom=chat\nЗП: 160\nЗадачи: \n1. Сверстать нянкэт (позиционирование элементов)\n2. \n// 1. Написать функцию, которая будет суммировать все значения из values\n\nconst values = [\n  {\n    value: 2,\n    children: [\n      {\n        value: 5,\n        children: [\n          {\n            value: 8,\n            children: [],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    va...",
        "full_content": "2024-02-13 14:02:25\n Aziz Gaynetdinov -> 2071074234:\nКомпания: Dogma\nСсылка на вакансию: https://krasnodar.hh.ru/vacancy/92590179?hhtmFrom=chat\nЗП: 160\nЗадачи: \n1. Сверстать нянкэт (позиционирование элементов)\n2. \n// 1. Написать функцию, которая будет суммировать все значения из values\n\nconst values = [\n  {\n    value: 2,\n    children: [\n      {\n        value: 5,\n        children: [\n          {\n            value: 8,\n            children: [],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 5,\n    children: [],\n  },\n  {\n    value: 10,\n    children: [\n      {\n        value: 90,\n        children: [],\n      },\n    ],\n  },\n]\n\nconst getAllValues = values => {\n  let allValues = 0\n\n  for (const el of values) {\n    if (el.children) {\n      allValues += getAllValues(el.children)\n    }\n    allValues += el.value\n  }\n\n  return allValues\n}\n\nconsole.log(getAllValues(values))\n\nЗапись: https://youtu.be/im5E-xj2zI0\nУспех:  ✅\nФитбек о собесе от HR: Всё супер \n\nОт себя: до финального этапа не говорю что я без военника и приписного, мб после оффера смогут по ИП"
      }
    ]
  },
  {
    "company": "Харош",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-09-18 13:48:27",
        "content": "2024-09-18 13:48:27\n Daniil Max -> 2071074234:\nХарош \nНадо туда попасть \nПодготовься плз к поведенческому интервью \nВсе зависит тут осмотри\nПлюс видос по поведенческому от меня",
        "full_content": "2024-09-18 13:48:27\n Daniil Max -> 2071074234:\nХарош \nНадо туда попасть \nПодготовься плз к поведенческому интервью \nВсе зависит тут осмотри\nПлюс видос по поведенческому от меня"
      }
    ]
  },
  {
    "company": "AEX Soft",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-30 11:39:37",
        "content": "2025-04-30 11:39:37\n Захар -> 2071074234:\nAEX Soft\nЗП: 170к\nВакансия: https://spb.hh.ru/vacancy/118983339\nВопросы: \n- Кратко про опыт работы\n- Axios или Fetch? Что сейчас лучше использовать?\n- Any vs unknown\n- что такое as const?\n- что такое infer?\n- что такое замыкание?\n- что такое reconciliation в React?\n- что такое EventLoop?\n- React.memo?\nЗадачи: \n//Задача на анаграммы\nconst groupAnagrams = (arr) => {\n  const mapa = {};\n\n  arr.forEach((el) => {\n    const sorted = el.toLowerCase().split(\"\").s...",
        "full_content": "2025-04-30 11:39:37\n Захар -> 2071074234:\nAEX Soft\nЗП: 170к\nВакансия: https://spb.hh.ru/vacancy/118983339\nВопросы: \n- Кратко про опыт работы\n- Axios или Fetch? Что сейчас лучше использовать?\n- Any vs unknown\n- что такое as const?\n- что такое infer?\n- что такое замыкание?\n- что такое reconciliation в React?\n- что такое EventLoop?\n- React.memo?\nЗадачи: \n//Задача на анаграммы\nconst groupAnagrams = (arr) => {\n  const mapa = {};\n\n  arr.forEach((el) => {\n    const sorted = el.toLowerCase().split(\"\").sort().join(\"\");\n\n    if (!mapa[sorted]) mapa[sorted] = [];\n\n    mapa[sorted].push(el);\n  });\n\n  return Object.values(mapa);\n};\n\nconsole.log(groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"])); // [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\nНаписать функцию для поиска числа, которое встречается ровно 2 раза в массиве\n\nconst ololo = (arr) => {\n    // Создаем объект для подсчета количества каждого числа\n    const counter = {};\n    \n    // Подсчитываем количество каждого числа в массиве\n    for (const num of arr) {\n        counter[num] = (counter[num] || 0) + 1;\n    }\n    \n    // Ищем число, которое встречается ровно 2 раза\n    for (const num in counter) {\n        if (counter[num] === 2) {\n            return Number(num); // Преобразуем ключ обратно в число\n        }\n    }\n    \n    return null; // Если такого числа нет\n};\n\n// Тест функции\nconsole.log(ololo([1,3,4,2,2])); // 2\n\n//Задача на уникальную строку\nfunction isUnique(strings) {\n  const set1 = new Set();\n\n  for (const str of strings) {\n    if (set1.has(str)) {\n      return false;\n    }\n    set1.add(str);\n  }\n\n  return true;\n}\nЗадача на React, сделать 30 инпутов и вынести компонент: \nimport { useState } from 'react';\n\n// Вынесенный компонент прямо в этом же файле\nfunction InputField({ value, onChange }) {\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  );\n}\n\nfunction App() {\n  const [values, setValues] = useState(Array(30).fill(''));\n\n  const handleChange = (index) => (e) => {\n    const newValues = [...values];\n    newValues[index] = e.target.value;\n    setValues(newValues);\n  };\n\n  return (\n    <>\n      {values.map((value, index) => (\n        <InputField\n          key={index}\n          value={value}\n          onChange={handleChange(index)}\n        />\n      ))}\n    </>\n  );\n}\n\nexport default App;"
      }
    ]
  },
  {
    "company": "ФГАОУ ВО МИИТ",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-18 17:07:54",
        "content": "2025-07-18 17:07:54\n Aintripin -> 2071074234:\nКомпания: ФГАОУ ВО МИИТ (18.07.2025)\nВакансия: Frontend разработчик\n\nЗП: выяснилось, что нанимают от джунов до мидлов. Выудил вилку, получается от 60к до 200к\n\nВопросы:\n\n1. Рассказать про себя\n2. Рассказать про самый интересный проект/фичу, что вообще самое интересное делал\n3. Рассказать про архитектуру на проекте\n4. Монолит vs микрофронты: что такое первое, что такое второе. В чём разница между ними? Что лучше? Если у тя монолит, то рассказать, что ...",
        "full_content": "2025-07-18 17:07:54\n Aintripin -> 2071074234:\nКомпания: ФГАОУ ВО МИИТ (18.07.2025)\nВакансия: Frontend разработчик\n\nЗП: выяснилось, что нанимают от джунов до мидлов. Выудил вилку, получается от 60к до 200к\n\nВопросы:\n\n1. Рассказать про себя\n2. Рассказать про самый интересный проект/фичу, что вообще самое интересное делал\n3. Рассказать про архитектуру на проекте\n4. Монолит vs микрофронты: что такое первое, что такое второе. В чём разница между ними? Что лучше? Если у тя монолит, то рассказать, что не нравится, что хотелось бы изменить в монолите?\n\n5. У нас есть два приложения: скажем, корзина и счёты. С точки зрения пользователя, как сохранить состояние? Именно UI-состояние? Как сохранить то состояние, где пользователь в последний раз был? С точки зрения монолита и микрофронтов.\n(В монолите для каждого из этих разделов можем хранить в redux-slice'ах. В микрофронтендах, там у нас каждый из может хранить своё состояние независимо. У каждого свой redux store. Если какие-то глобальные сценарии, то просто в event bus мы можем пушить или shared storage можно использовать. Можно отдельный state-manager подключить для взаимодействия между микрофронтами)\n\n6. Вопрос по микрофронтам: у нас есть два разных веб-приложения: карты и дашборд. Если будем кликать по ним, то на деле это redirect от одного приложения на другое и происходит перезагрузка страницы. И мы видим либо белый, либо чёрный экран загрузки. Как сделать бесшовный redirect?\nОтвет: можем сделать оболочку (shell app), она всегда загруженная остаётся, а микрофронты уже динамически подгружаются. В webpack есть Module Federation, его можно использовать. Ещё можно скелетоны сделать во время загрузки. Или просто при наведении на что-то подгружать заранее контент\n\n7. Допустим, что у нас нет оболочки: как мы можем начать прогружать другое веб приложение заранее? Отслеживая event мышки, например, при наведении на эту новую \"вкладку\".\nprefetch через\n<link rel=\"prefetch\">\nможно сделать. Т.е. у нас грузится при наведении, а когда кликаем, то уже в кеше есть часть ресурсов\n\n8. API first vs UI first подходы: что это и в чём разница?\n\n9. API first vs UI first: вопрос в контрактности. Приходит новая фича, её должны взять и бэкенд разрабы и фронт разрабы. Как у вас шла работа? Был ли опыт UI first? Был ли опыт API first? Что тебе ближе? С чем бы работал?\n\n10. Вопрос по ИИ: чем пользуешься? Чё нравится? \n\n11. Почему ушёл с последнего места работы?\n\n12. Нет ли отторжения к вёрстке?\n\n13. У нас офис. Тебе норм?\n\n14. У нас Vue3. Как долго вы пересаживаетесь с фреймворка на фреймворк?\n\n15. С какими методологиями ведения проекта работали? Как происходит взаимодействие в команде? (Тут про Scrum рассказывал)\n\n16. Есть ли опыт работы с картами? Если есть, то надо рассказать чё за карты, как оно происходит, чё отображали, как общались с бэком\n\nДалее был блок вопросов с моей стороны по проекту и вакансии"
      }
    ]
  },
  {
    "company": "Восточная Горнорудная",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-01-18 08:03:15",
        "content": "2024-01-18 08:03:15\n Настя BAGIRA -> 2071074234:\n- Компания: Восточная Горнорудная Компания-ВГК\n- Важность: Практика\n- Ссылка на вакансию: hr сама написала\n- Middle 150-180к\n\nВопросы:\nВопросы про разницу interface и type, дженерики, вопрос на знание что ts не работает в рантайме\nЗамыкание, стадии создания контекста\nВопросы про websocet и http, также про знание как работает интернет (образно что происходит как мы забили урл в адрес строку)\nJwt , cors, про токены и для чего нужен каждый из (access...",
        "full_content": "2024-01-18 08:03:15\n Настя BAGIRA -> 2071074234:\n- Компания: Восточная Горнорудная Компания-ВГК\n- Важность: Практика\n- Ссылка на вакансию: hr сама написала\n- Middle 150-180к\n\nВопросы:\nВопросы про разницу interface и type, дженерики, вопрос на знание что ts не работает в рантайме\nЗамыкание, стадии создания контекста\nВопросы про websocet и http, также про знание как работает интернет (образно что происходит как мы забили урл в адрес строку)\nJwt , cors, про токены и для чего нужен каждый из (access и refresh), где хранить и зачем\nТакже долго общались за архитектуру, тк указывала это в резюме, просил рассказать какие использовала, почему применяла сначала одну, потом другую, плюсы минусы, про ddd было еще что-то, не помню\nОтличия vue 2 vue 3, рассказать про composition и option api, различия, преимущества того или иного, про хуки жизненного цикла что происходит на каждом этапе, отличия methods от computed и watchers,  effectScope , что-то про trigger ( не запомнила точно, тк первый раз слышу про это)\n\nУспех собеса: ✅ пригласили на след этап \nФидбек от собеседующего: все отлично 🔥\n\nМой комментарий: классный не душный собес, приятный собеседующий, понравилось. Зп немного не по вилке мне, но проект понравился, сложный , думаю прокачаюсь там. Сначала думала практика собес, сейчас думаю возможно согласиться подвинувшись по вилке (хотя посмотрим че предложат, вилку свою озвучивала)\n\n#вгк #восточная_горнорудная_компания"
      }
    ]
  },
  {
    "company": "Дивергент Зп До 150К",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-04 16:04:34",
        "content": "2025-04-04 16:04:34\n Равиль Васильев -> 2071074234:\nДивергент ЗП до 150к\n\n📢 Вакансия - https://hh.ru/vacancy/118126656?from=share_ios\n\n📌 Задачи:\n\n// Напишите функцию retryPromise(fn, retries, delay), которая принимает:\n\n    // fn – функция, возвращающую промис,\n    // retries – количество попыток повторного вызова, если промис отклонён,\n    // delay – задержку между попытками в миллисекундах.\n    // Функция должна вызывать fn(). Если промис разрешается – возвращать его результат,\n    // если отк...",
        "full_content": "2025-04-04 16:04:34\n Равиль Васильев -> 2071074234:\nДивергент ЗП до 150к\n\n📢 Вакансия - https://hh.ru/vacancy/118126656?from=share_ios\n\n📌 Задачи:\n\n// Напишите функцию retryPromise(fn, retries, delay), которая принимает:\n\n    // fn – функция, возвращающую промис,\n    // retries – количество попыток повторного вызова, если промис отклонён,\n    // delay – задержку между попытками в миллисекундах.\n    // Функция должна вызывать fn(). Если промис разрешается – возвращать его результат,\n    // если отклоняется – ждать заданное время и повторять вызов, пока не исчерпаются попытки.\n    //Если после всех попыток промис так и не разрешался, функция должна отклониться с последней ошибкой.\n\n\n//Решение\n\nfunction retryPromise(fn, retries, delay) {\n  return new Promise((resolve, reject) => {\n    function attempt() {\n      fn()\n        .then(resolve)\n        .catch((error) => {\n          if (retries <= 0) {\n            reject(error);\n          } else {\n            retries--;\n            setTimeout(attempt, delay);\n          }\n        });\n    }\n    attempt();\n  });\n}\n\n// Пример использования:\nlet attemptCount = 0;\nfunction unstableTask() {\n  return new Promise((resolve, reject) => {\n    attemptCount++;\n    console.log(`Попытка ${attemptCount}`);\n    if (attemptCount < 3) {\n      reject(`Ошибка на попытке ${attemptCount}`);\n    } else {\n      resolve(`Успех на попытке ${attemptCount}`);\n    }\n  });\n}\n\nretryPromise(unstableTask, 5, 1000)\n  .then(result => console.log(result))\n  .catch(err => console.error(err));\n\n// Функция, реализующая реверс строки\nfunction reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconsole.log(reverseString('reverse')); // Выведет: \"esrever\"\nconsole.log(reverseString('hello'));   // Выведет: \"olleh\""
      }
    ]
  },
  {
    "company": "Queen Games",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-14 17:35:16",
        "content": "2025-03-14 17:35:16\n Максим Соломыкин -> 2071074234:\nКомпания: Queen Games\nВакансия: https://krasnoyarsk.hh.ru/vacancy/117479806?hhtmFrom=resume\nЗП: 3000 - 3500$\n\nВопросы:\n1. Как пробрасывали переменные из env в vite\n2. Про опыт предыдущий\n3. Что такое замыкание\n4. Как использовал замыкание\n5. Что такое throttle и что такое debounce\n6. Как с помощью throttle предотвратить Ddos атаку\n7. Что такое прототип\n8. Какой контекст у стрелочной функции\n9. Атрибуты async и defer для чего нужны и в чем разн...",
        "full_content": "2025-03-14 17:35:16\n Максим Соломыкин -> 2071074234:\nКомпания: Queen Games\nВакансия: https://krasnoyarsk.hh.ru/vacancy/117479806?hhtmFrom=resume\nЗП: 3000 - 3500$\n\nВопросы:\n1. Как пробрасывали переменные из env в vite\n2. Про опыт предыдущий\n3. Что такое замыкание\n4. Как использовал замыкание\n5. Что такое throttle и что такое debounce\n6. Как с помощью throttle предотвратить Ddos атаку\n7. Что такое прототип\n8. Какой контекст у стрелочной функции\n9. Атрибуты async и defer для чего нужны и в чем разница\n10. CSS will change зачем нужен\n11. Как скрыть элемент со страницы\n12. В чем разница между display: none и visibility: hidden\n13. Как можно пробрасывать пропсы между компонентами, без Redux и useContext\n14. Как пробросить ref между компонентами через props\n15. Что за паттерн Compound Components\n16. Render Props\n17. Что такое декораторы в NestJS\n\nШарил экран с задачей,я попросил скинуть, если пришлет, то добавлю сюда"
      }
    ]
  },
  {
    "company": "А2Code",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-11 17:01:16",
        "content": "2025-02-11 17:01:16\n Александр Богданов -> 2071074234:\nкомпания:  А2code(А2КОД)\nвакансия:  hr сама написала\nЗП просил: 270к\nЗадачи:  все как тут:https://t.me/c/2071074234/489/44814",
        "full_content": "2025-02-11 17:01:16\n Александр Богданов -> 2071074234:\nкомпания:  А2code(А2КОД)\nвакансия:  hr сама написала\nЗП просил: 270к\nЗадачи:  все как тут:https://t.me/c/2071074234/489/44814"
      }
    ]
  },
  {
    "company": "Umbrella It",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-31 15:45:15",
        "content": "2025-01-31 15:45:15\n Ivan -> 2071074234:\nКомпания: umbrella it\nЗП: 200\nСпрашивали за опыт\nкакие были задачи , как реализовывал \nмикрофронты, как работают , как реаилизовать\nпеременные js\nEventloop\nЧто происходит в браузере когда мы вводим url\nЗачем нужны key в React\nVirtual Dom\nСпособы оптимизации\nМетрики производительности \nReact.memo\n\nЗадача : \nЧто будет в консоли ?\nsetTimeout(0 => {\nconsole.log('timer1')\nPromise.resolve)\nthen(( => console.log('prom8'))\n}, 0)\nPromise.resolve)\nthen(() => consol...",
        "full_content": "2025-01-31 15:45:15\n Ivan -> 2071074234:\nКомпания: umbrella it\nЗП: 200\nСпрашивали за опыт\nкакие были задачи , как реализовывал \nмикрофронты, как работают , как реаилизовать\nпеременные js\nEventloop\nЧто происходит в браузере когда мы вводим url\nЗачем нужны key в React\nVirtual Dom\nСпособы оптимизации\nМетрики производительности \nReact.memo\n\nЗадача : \nЧто будет в консоли ?\nsetTimeout(0 => {\nconsole.log('timer1')\nPromise.resolve)\nthen(( => console.log('prom8'))\n}, 0)\nPromise.resolve)\nthen(() => console.log('prom1'))\nthen(() => console.log(prom2'))\nsetTimeout() => (\nconsole.log(timer2)\n3, 0)\nPromise.resolve().then(()=>console.log('prom1')).then(()=>console.log('prom2'))\nsetTimeout(()=>{console.log('timer2')},0)\nPromise.resolve().then(()=>console.log('prom3')).then(()=>console.log('prom4'))\nsetTimeout(()=>{console.log('timer3')},0)\nnew Promise(()=> console.log('prom5'))\nconsole.log('end')"
      }
    ]
  },
  {
    "company": "Группа Астра",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-07 10:11:58",
        "content": "2025-02-07 10:11:58\n twomadd -> 2071074234:\nкомпания Группа Астра\nВакансия: hr написала\n\nВопросы:\n1. Какой максимальный размер команды был в которой работал?\n2. Когда работал над одной задачей , максимум со сколькими людьми тебе приходилось работать? И кто это?\n3. Если работал с аналитиком , то требования в каком виде от него приходили, в чем ?\n4. С каким gitflow ты работал? Как велись ветки ?\n5. Сколько в среднем жили фича бренчи ?\n6. Когда вливали ветку , какие проверки вообще проходит фича ве...",
        "full_content": "2025-02-07 10:11:58\n twomadd -> 2071074234:\nкомпания Группа Астра\nВакансия: hr написала\n\nВопросы:\n1. Какой максимальный размер команды был в которой работал?\n2. Когда работал над одной задачей , максимум со сколькими людьми тебе приходилось работать? И кто это?\n3. Если работал с аналитиком , то требования в каком виде от него приходили, в чем ?\n4. С каким gitflow ты работал? Как велись ветки ?\n5. Сколько в среднем жили фича бренчи ?\n6. Когда вливали ветку , какие проверки вообще проходит фича ветка \n7. Кто тебе ставил задачи ?\n8. В чем ты оценивал задачи? Если в поинтах , то чему был равен 1 поинт ?\n9. На твой взгляд , когда задача считается выполненной и закрытой ?\n10. Какими анализаторами когда ты пользуешься ?\n11. Если писал тесты , то на чем ?\n12. E2E-тесты писал?\n13. с Docker работал?\n14. За счет чего в JS имплементируется полиморфизм ?\n15. Что такое нотация О большое ?\n16. Хэш-таблица. \n17. Что такое замыкание ?\n18. Разница между стрелочной функцией и обычной \n19.Что такое Promise и какую проблему он решает ?\n20.Что такое React portal ?\n21. Как передать данные между компонентами вверх и вниз по иерархии\n22. useEffect и useLayoutEffect в чем разница ?"
      }
    ]
  },
  {
    "company": "Consaltica",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-20 06:14:17",
        "content": "2024-11-20 06:14:17\n Стас Тихомиров -> 2071074234:\nКомпания: Consaltica\nВакансия: написала hr\nЗП: не обсуждали\n\nВопросы за опыт, что делал, какие технологии знаешь. Было просто знакомство.\n\n- Что такое type guards\n- Что такое Discriminated Unions",
        "full_content": "2024-11-20 06:14:17\n Стас Тихомиров -> 2071074234:\nКомпания: Consaltica\nВакансия: написала hr\nЗП: не обсуждали\n\nВопросы за опыт, что делал, какие технологии знаешь. Было просто знакомство.\n\n- Что такое type guards\n- Что такое Discriminated Unions"
      }
    ]
  },
  {
    "company": "Дарвин",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-18 18:30:43",
        "content": "2024-10-18 18:30:43\n Mike -> 2071074234:\nКомпания:Дарвин\nВакансия:https://hh.ru/vacancy/106915153\nЗП:250к\nВопросы:\n1.REST какие правила у него\n2.какие апдейты в ts вышли, может знаешь\n3.+/- ts\n4.Vite vs Webpack\n5.FSD подробно(из чего состоит, какое разделение помимо слоев)\n6.БЭМ\n7.Public api что такое и зачем\n8.как избежать коллизию имен в css\n9.что такое css in js\n10.Virtual Dom \n11.Fiber\n12.Reconsalation\n13.useEffect что такое, какие варианты поведения у него, если не укажем/укажем массив зави...",
        "full_content": "2024-10-18 18:30:43\n Mike -> 2071074234:\nКомпания:Дарвин\nВакансия:https://hh.ru/vacancy/106915153\nЗП:250к\nВопросы:\n1.REST какие правила у него\n2.какие апдейты в ts вышли, может знаешь\n3.+/- ts\n4.Vite vs Webpack\n5.FSD подробно(из чего состоит, какое разделение помимо слоев)\n6.БЭМ\n7.Public api что такое и зачем\n8.как избежать коллизию имен в css\n9.что такое css in js\n10.Virtual Dom \n11.Fiber\n12.Reconsalation\n13.useEffect что такое, какие варианты поведения у него, если не укажем/укажем массив зависимостей\n14.useEffect vs useLayoutEffect\n15. что такое иммутабельность/ммутабельность и с чем работает реакт\n16.useRef \n17.RTK query зачем invalidatesTages\n18.минусы Context \n19.useSyncExternalStore может слышал о хуке\nБез задач"
      }
    ]
  },
  {
    "company": "Vk Инфраструктура",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-16 16:27:38",
        "content": "2025-04-16 16:27:38\n Maxim B. -> 2071074234:\nVK инфраструктура (1 этап)\n\n— ЗП:  270K, middle\n— Задача (одна в конце общения):\nfunction loadImage(src: string): Promise<Image> {\n  // эту функцию описывать не нужно, она уже есть\n}\n\n// чего не хватает в этой функции\nfunction waitForImages(srcs: string[]): Promise<void> {\n  srcs.map(loadImage);\n}\nтут дал ответ, что вторая функция не работает асинхронно, и нужно использовать async/await, либо обработчик then() и обернуть внутрянку в Promise.all (либо ...",
        "full_content": "2025-04-16 16:27:38\n Maxim B. -> 2071074234:\nVK инфраструктура (1 этап)\n\n— ЗП:  270K, middle\n— Задача (одна в конце общения):\nfunction loadImage(src: string): Promise<Image> {\n  // эту функцию описывать не нужно, она уже есть\n}\n\n// чего не хватает в этой функции\nfunction waitForImages(srcs: string[]): Promise<void> {\n  srcs.map(loadImage);\n}\nтут дал ответ, что вторая функция не работает асинхронно, и нужно использовать async/await, либо обработчик then() и обернуть внутрянку в Promise.all (либо allSettled по необходимости).\n\n— Вопросы:\n1) Отличие <div> и <span>\n2) В чем суть \"каскадности\" в css\n3) Что такое \"замыкание\" (привести пример)\n4) Разница type и interface\n5) Разница Union-types и Enum\n6) Псевдо -классы и -элементы (привести пример каждых)\n7) Способы привести к утечки памяти\n8) Браузерные хранилища\n9) Как работает async и defer\n\nРезультат: успех ✅"
      }
    ]
  },
  {
    "company": "Аг-Логистика",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-17 03:06:16",
        "content": "2024-11-17 03:06:16\n Ivan -> 2071074234:\nКомпания: АГ-Логистика\nВакансия: https://hh.ru/vacancy/109743192\nЗП:220+\nВопросы:\nВопросы были базовые, но уходил в глубь (душновато)\nПозиционирование CSS\nFlex, grid\nCSS анимации\nЧто будет после ввода url \nReflow, repaint, composite\nHtttp методы\nHttp ответы \nCORS\nPreflight request \nЗамыкание (var let const )\nЧистая функция \nEventloop\nБыл пример кода с замыканием и нужно было сказать что выводит. Первый раз выводит 10 раз 10\nВопрос был как это исправить(по...",
        "full_content": "2024-11-17 03:06:16\n Ivan -> 2071074234:\nКомпания: АГ-Логистика\nВакансия: https://hh.ru/vacancy/109743192\nЗП:220+\nВопросы:\nВопросы были базовые, но уходил в глубь (душновато)\nПозиционирование CSS\nFlex, grid\nCSS анимации\nЧто будет после ввода url \nReflow, repaint, composite\nHtttp методы\nHttp ответы \nCORS\nPreflight request \nЗамыкание (var let const )\nЧистая функция \nEventloop\nБыл пример кода с замыканием и нужно было сказать что выводит. Первый раз выводит 10 раз 10\nВопрос был как это исправить(поменять var на let)"
      }
    ]
  },
  {
    "company": "Yougile",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-21 21:09:15",
        "content": "2024-11-21 21:09:15\n Артем -> 2071074234:\nКомпания YouGile\nВакансия: https://hh.ru/vacancy/109174559?hhtmFrom=chat\nЗП: от 120\nВопросы: \nЗачем TS если есть юнит тесты\nccs in js\nДальше он такой давай поработаем в паре и там 3 примера решали: \n1 Кнопка при нажатии показывает текст\n2 в инпут нажали enter переместили на другой enter\n3 дал свой API Bitrix24 нужно было вмиесте с ним понять и разобрать как создать запрос \nconst createDeal = async () => {\n  const url = 'https://your-domain.bitrix24.ru/re...",
        "full_content": "2024-11-21 21:09:15\n Артем -> 2071074234:\nКомпания YouGile\nВакансия: https://hh.ru/vacancy/109174559?hhtmFrom=chat\nЗП: от 120\nВопросы: \nЗачем TS если есть юнит тесты\nccs in js\nДальше он такой давай поработаем в паре и там 3 примера решали: \n1 Кнопка при нажатии показывает текст\n2 в инпут нажали enter переместили на другой enter\n3 дал свой API Bitrix24 нужно было вмиесте с ним понять и разобрать как создать запрос \nconst createDeal = async () => {\n  const url = 'https://your-domain.bitrix24.ru/rest/1/your-webhook-key/crm.deal.add';\n  const dealData = {\n    fields: {\n      TITLE: 'Название сделки',\n    },\n  };\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(dealData)\n  });\n\n  const data = await response.json();\n  console.log('Deal created successfully:', data);\n};\nimport React, { useRef } from 'react';\n\nfunction App() {\n  const input1Ref = useRef(null);\n  const input2Ref = useRef(null);\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      input2Ref.current.focus();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <input\n        ref={input1Ref}\n        onKeyPress={handleKeyPress}\n        placeholder=\"Press Enter to focus the second input\"\n      />\n      <input\n        ref={input2Ref}\n        placeholder=\"Second input\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n \nfunction App() {\n  const [isTextVisible, setIsTextVisible] = useState(false);\n\n  const toggleText = () => {\n    setIsTextVisible(!isTextVisible);\n  };\n\n  return (\n    <div className=\"App\">\n      <button onClick={toggleText}>\n        {isTextVisible ? 'Скрыть текст' : 'Показать текст'}\n      </button>\n      {isTextVisible && <p>Это скрытый текст.</p>}\n    </div>\n  );\n}"
      }
    ]
  },
  {
    "company": "Pizzasoft",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-05-23 13:58:48",
        "content": "2025-05-23 13:58:48\n Max -> 2071074234:\nPizzaSoft\nзп: 160 т.р.\nтеории не было\nЗадачи: \n// написать ф-ию которая ограничивает вызовы\nfunction createLimitedCaller(callback) {\n    let callCount = 0;\n    const MAX_CALLS = 3;\n\n    return function(...args) {\n        if (callCount < MAX_CALLS) {\n            callCount++;\n            return callback(...args);\n        } else {\n            console.warn('Превышено максимальное количество вызовов (3)');\n            // Можно выбросить ошибку:\n            // t...",
        "full_content": "2025-05-23 13:58:48\n Max -> 2071074234:\nPizzaSoft\nзп: 160 т.р.\nтеории не было\nЗадачи: \n// написать ф-ию которая ограничивает вызовы\nfunction createLimitedCaller(callback) {\n    let callCount = 0;\n    const MAX_CALLS = 3;\n\n    return function(...args) {\n        if (callCount < MAX_CALLS) {\n            callCount++;\n            return callback(...args);\n        } else {\n            console.warn('Превышено максимальное количество вызовов (3)');\n            // Можно выбросить ошибку:\n            // throw new Error('Превышен лимит вызовов');\n            return undefined;\n        }\n    };\n}\n\n//написать функцию get \n// const obj = { value1: { value2: \"Test\" }}\n\n// get(obj, \"value1.value2\", null) // \"Test\"\n// get(obj, \"value1.value2.value3\", null) // null\n\nconst get = (obj, path, defaultVal = null) => {\n    const keys = path.split('.')\n    let result = obj\n\n    for (const key of keys) {\n        if( typeof result == 'object' ){\n            result = result[key]\n           }\n        }\n        else if( result != undefined ){\n            return result\n             }\n           }\n        }\n        return defaultVal\n    return result\n}\n///////////////////////////////////////////////////////////////////////////////\n// исправить компонент\nconst CustomProvider: FC<PropsWithChildren> = ({ children }) => {\n  const [state, setState] = useState(0);\n\n  const increment = useCallback(() => {\n    setState((state) => state + 1);\n  }, []); // добавить useCallback\n\n  const decrement = useCallback(() => {\n    setState((state) => state - 1);\n  }, []); // добавить useCallback\n\n  const actions = useMemo(() => ({ increment, decrement }), [increment, decrement]); // добавить useMemo\n\n  console.log(\"CustomProvider\");\n\n  return (\n    <CounterContext.Provider value={state}>\n      <ActionsContext.Provider value={actions}> // в value передать actions\n        {children}\n      </ActionsContext.Provider>\n    </CounterContext.Provider>\n  );\n};\n// написать todo по шаблону\nimport React, { useState } from \"react\";\n\nexport default function TodoList() {\n  const [tasks, setTasks] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [filter, setFilter] = useState(\"all\"); // 'all' | 'completed' | 'active'\n\n  // ✅ Добавление задачи\n  const handleAdd = () => {\n    if (inputValue.trim() === \"\") return;\n    const newTask = {\n      id: Date.now(),\n      text: inputValue,\n      completed: false,\n    };\n    setTasks([...tasks, newTask]);\n    setInputValue(\"\"); // очистка поля\n  };\n\n  // ✅ Переключение статуса задачи\n  const handleToggle = (id) => {\n    setTasks((prevTasks) =>\n      prevTasks.map((task) =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      )\n    );\n  };\n\n  // ✅ Фильтрация по выбранному фильтру\n  const filteredTasks = tasks.filter((task) => {\n    if (filter === \"completed\") return task.completed;\n    if (filter === \"active\") return !task.completed;\n    return true; // 'all'\n  });\n\n  return (\n    <div>\n      <h1>Список задач</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Новая задача\"\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n      />\n      <button onClick={handleAdd}>Добавить</button>\n\n      <div>\n        <button onClick={() => setFilter(\"all\")}>Все</button>\n        <button onClick={() => setFilter(\"active\")}>Активные</button>\n        <button onClick={() => setFilter(\"completed\")}>Выполненные</button>\n      </div>\n\n      <ul>\n        {filteredTasks.map((task) => (\n          <li key={task.id}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={task.completed}\n                onChange={() => handleToggle(task.id)}\n              />\n              {task.text}\n            </label>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}"
      }
    ]
  },
  {
    "company": "Intelsy",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-04 15:27:47",
        "content": "2025-07-04 15:27:47\n Эмир -> 2071074234:\nIntelsy\nЗП 210к\nВопросы\nДля чего нужен key?\nчто такое virtual dom?\nчто нужно использовать внутри key?\nчто такое useLayoutEffect что такое?\nasync defer\nкоды ошибок http\nчто такое cors?",
        "full_content": "2025-07-04 15:27:47\n Эмир -> 2071074234:\nIntelsy\nЗП 210к\nВопросы\nДля чего нужен key?\nчто такое virtual dom?\nчто нужно использовать внутри key?\nчто такое useLayoutEffect что такое?\nasync defer\nкоды ошибок http\nчто такое cors?"
      }
    ]
  },
  {
    "company": "Транснефть",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-09-25 03:03:12",
        "content": "2024-09-25 03:03:12\n Алмас -> 2071074234:\nКомпания Транснефть\nВакансия: https://t.me/c/2071074234/616/62937\nзп: от 300\n1. Как были организованы процессы? от кого получали задачи\n2. Задачи в каком трекере велись? как то документироали?\n3. В чем заключались технические улучшения добавление  Jest и React Testing Library в проект?\n4. Для чего использовали reselect?\n5. У нас есть стор в нем user, в usere есть id, соответственно мы можем получить user.id и зачем нам нужен reselect?\n6. У нас есть тег s...",
        "full_content": "2024-09-25 03:03:12\n Алмас -> 2071074234:\nКомпания Транснефть\nВакансия: https://t.me/c/2071074234/616/62937\nзп: от 300\n1. Как были организованы процессы? от кого получали задачи\n2. Задачи в каком трекере велись? как то документироали?\n3. В чем заключались технические улучшения добавление  Jest и React Testing Library в проект?\n4. Для чего использовали reselect?\n5. У нас есть стор в нем user, в usere есть id, соответственно мы можем получить user.id и зачем нам нужен reselect?\n6. У нас есть тег span как не меняя его св-ва display поменять высоту спана?\n7. Расскажи про вес селекторов?\n8. Замыкание?\n9. Как можно скопировать объект?\n10. Каррирование?\n11. Какие перебирающие методы массивов знаете?\n12. Какие методы мутируют а какие нет? \n13. Какой метод наподобие sort есть, который не будет мутировать исх массив? (ответ: toSorted() - новые метод 2023 года)\n14. Что мы можем сделать через цикл for, но не можем сделать через forEach?\n15. Что будет если сложить 0.1 и 0.2\n\n//нужно убрать кружки отступы у ul и html body , потом добавить бордер для li, далее растянуть ul на всю высоту экрана\n<ul class=\"list\">\n  <li>2</li>\n  <li class=\"maxHeight\">3</li>\n  <li>3</li>\n</ul>\n// у нас есть interface Props и нам нужно написать свой собственный тип куда мы пробросим это св-во, которое делает одно из св-в этого интерфейса необязательным\ninterface Props {\n  error: string;\n  message: string;\n}\n\nconst a: FilteredPartial<Props, 'error'> = { message: 'xxx' }; // error стал необязательным\nconst b: FilteredPartial<Props, 'error'> = { message: 'xxx', error: 'yyy' }; // error присутствует, но не обязателен\n//у нас есть некий массив и нам нужно найти в этом массиве подмассив сумма элементов которого даст максимальное число и вывести это число на экран\n// [-2,-1,1,2]//3\n// [2,-1,2,3,-9]//6\n// [-1,-2,-3] //0"
      }
    ]
  },
  {
    "company": "Spacebit",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-10 20:11:21",
        "content": "2024-07-10 20:11:21\n Руслан -> 2071074234:\nSpaceBit\n— Ссылка: hr сама написала\n— Зп: 250 \n— Вопросы:\n1. Какие хуки использовал\n2. useImperativeHandle использовал ли и для чего\n3. Чем отличается hoc от хука\n4. Как понимал, когда нужно использовать useCallBack\n5. Для чего раньше использовали IIFE\n— Задачи:\nСмрджить два массива, чтобы остались уникальные значения\n1/ // [1,3,4,6] + [1,3,7,9] = [1,3,4,6,7,9] - сделал через Set, потом спросили, как можно сделать по другому.\n2. По вебсокетам приходят к...",
        "full_content": "2024-07-10 20:11:21\n Руслан -> 2071074234:\nSpaceBit\n— Ссылка: hr сама написала\n— Зп: 250 \n— Вопросы:\n1. Какие хуки использовал\n2. useImperativeHandle использовал ли и для чего\n3. Чем отличается hoc от хука\n4. Как понимал, когда нужно использовать useCallBack\n5. Для чего раньше использовали IIFE\n— Задачи:\nСмрджить два массива, чтобы остались уникальные значения\n1/ // [1,3,4,6] + [1,3,7,9] = [1,3,4,6,7,9] - сделал через Set, потом спросили, как можно сделать по другому.\n2. По вебсокетам приходят кусочки одного большого Json, через некоторое количество полученных кусков нужно как-то понять, что из пришедших кусков можно собрать полностью весь json. Каждый json нужно как-то идентифицировать по уникальному значению, так как может прийти тот же json по сокетам через некоторое время, и в таком случае его данные не нужно отображать.\nОтвет\nСтек для парсинга json: Используйте стек для отслеживания\nоткрытых и закрытых скобок {} и [. При получении символа {\nили [ добавляйте его в стек, при получении } или ] —\nизвлекайте из стека. Это поможет определить, когда объект\nили массив полностью завершен.\nДля определения уникальности объекта в json можно\nиспользовать несколько методов, в зависимости от контекста\nи требований. Вот несколько подходов:\nХэш-функции позволяют создать уникальный идентификатор\nдля каждого объекта. Вы можете использовать хэш-функцию,\nтакую как МD5 или SНА-256, чтобы получить уникальный\nхэш-код для каждого json-объекта."
      }
    ]
  },
  {
    "company": "SoftJet",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-05-24 09:21:09",
        "content": "2024-05-24 09:21:09\n Виталий Цыганок -> 2071074234:\n— Название компании: SoftJet\n— Вакансия: https://izhevsk.hh.ru/vacancy/98816293\n— ЗП: от 230к, Middle+\n— Успех собеса: ❓ (после собеса нужно еще выполнить тестовое, я забил)\n\nВопросы:\n— Про свой опыт\n— Каково отношение TypeScript к JavaScript?\n— Что такое JSX?\n— Как можно компилировать TypeScript в JavaScript?\n— Сколько областей видимости доступно в TypeScript?\n— Как в JavaScript передается параметр в функцию - по ссылке или по значению?\n— Каки...",
        "full_content": "2024-05-24 09:21:09\n Виталий Цыганок -> 2071074234:\n— Название компании: SoftJet\n— Вакансия: https://izhevsk.hh.ru/vacancy/98816293\n— ЗП: от 230к, Middle+\n— Успех собеса: ❓ (после собеса нужно еще выполнить тестовое, я забил)\n\nВопросы:\n— Про свой опыт\n— Каково отношение TypeScript к JavaScript?\n— Что такое JSX?\n— Как можно компилировать TypeScript в JavaScript?\n— Сколько областей видимости доступно в TypeScript?\n— Как в JavaScript передается параметр в функцию - по ссылке или по значению?\n— Какие есть особенности проверки равенств в JavaScript?\n— В чем различие использования функций-конструкторов от классов? Где появляется разница в использовании?\n— Приведи примеры приведения к логическому типу значений, не относящихся к этому типу, то есть когда значения всегда true, а когда false\n— Знакомо ли понятие \"Временная мертвая зона\"?\n— Каким способом можно обеспечить глубокую заморозку объекта? Object.freeze()\n— В чем отличие между const и Object.freeze?\n— Расскажи про концепцию поднятия переменных\n— Для чего используется метод bind?\n— Какие есть отличия методов массивов forEach и map, какой предпочтительнее использовать?\n— Коллекции Map, Set \n— Что такое Hash Map и что такое хэш-функция?\n— Может ли быть ситуация, когда в хэш-мапе будет хранится и ключ, и значение null:null?\n— Какова сложность вычислений у хэш-мапы?\n— Какие основные паттерны проектирования знаешь, с какими работал?\n— Как работает event loop?\n— Писал ли тесты? Как? Использовал ли Selenium?\n— Какой опыт работы с Docker?\n— Умеешь ли настраивать Swagger? Работал ли с Postman?\n— На каком языке пишут тесты?\n— С какими работал фреймворками (React, Vue, Angular), в чем преимущество React?\n— Что нового есть в React 18, по сравнению с 17 и 16 версиями?\n— Для чего нужен AJAX?\n— Работал ли с GraphQL?\n— Что такое Virtual DOM?\n— setState синхронный или асинхронный?\n— В чем отличие memo от useMemo?\n— Что такое чистые компоненты (pure components) и для чего они нужны?\n— Какие знаешь стейт-менеджеры, с какими работал?\n— Каковы особенности использования useContext и useReduсer от Редакса?\n— Что такое HOC?\n— Как организуется сетевое взаимодействие? Связь фронта и бека?\n— Знаком ли с технологией WebView?\n— Какой опыт работы с Jira, Trello?\n— Настраивал ли CI/CD?\n— Чем merge отличается от rebase в GIT? Что лучше использовать и почему?\n\nЗадачи:\nВ конце собеса дал домашнее задание с дедлайном 1 день. Задание обязательно к выполнению.\nНеобходимо разработать одностраничный сайт. Предметная область (тема сайта) - интернет-магазин запчастей автомобилей.\n\nРабота должна быть загружена в виде ссылки на GitHub-Pages или Vercel.\n\nНеобходимо выводить на страницу информацию о товарах из API (можно создать в mockapi).\n\nТовары должны иметь поля: заголовок, картинка, описание, цена.\nПроект должен содержать: header, фото-слайдер, вывод товаров, footer. \n\nСайт должен содержать:  \n\n1) Header (содержит название магазина)\n2) Карусель с фотографиями (слайдер)\n3) Вывод товаров (название, фото, цена, описание)\n4) Footer"
      }
    ]
  },
  {
    "company": "Авиационные Интерьеры",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-05 20:11:04",
        "content": "2025-06-05 20:11:04\n Лёша -> 2071074234:\nКомпания: Авиационные интерьеры.\nЗп: 260? (не помню)\n\nВсе началось с 15 минутного монолога ПМа с рассказами про проект.\n\nВопросы:\n\nРасскажи про опыт, причины увольнения.\nКогда готов выйди на работу?👀\n\nВы кто по грейду?\nУдобно ли будет взять половину работы, как QA?\n\nРасскажи про самую интересную задачу.\nРасскажи про sse-eventы.\nРасскажи про next.js\nРасскажи про redux, mobx.\nЧто такое webpack.\nРасскажи про тесты.\nРасскажи про ci-cd.\nКак с linux?\nDRY KISS S...",
        "full_content": "2025-06-05 20:11:04\n Лёша -> 2071074234:\nКомпания: Авиационные интерьеры.\nЗп: 260? (не помню)\n\nВсе началось с 15 минутного монолога ПМа с рассказами про проект.\n\nВопросы:\n\nРасскажи про опыт, причины увольнения.\nКогда готов выйди на работу?👀\n\nВы кто по грейду?\nУдобно ли будет взять половину работы, как QA?\n\nРасскажи про самую интересную задачу.\nРасскажи про sse-eventы.\nРасскажи про next.js\nРасскажи про redux, mobx.\nЧто такое webpack.\nРасскажи про тесты.\nРасскажи про ci-cd.\nКак с linux?\nDRY KISS SOLID.\nЧистая архетиктура.\nПриходилось ли пилить ui-кит?\n\nКакие книжки по программированию читаешь?🤡 \n\nДальше мы душевно поговорили про сплит клавиатуры, конфиги для nvim, легаси, (книжки, которые мне посоветовали почитать)."
      }
    ]
  },
  {
    "company": "Медлайнсофт",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-30 19:11:01",
        "content": "2025-04-30 19:11:01\n Max -> 2071074234:\nМедлайнсофт\nЗП: 220\nHr написала \nВопросы:\n1. Расскажи про себя\n2. подробно спрашивал про резюме/проект\n3. отличие type от interface\n4. правила хуков\n5. Знаешь почему нельзя вызвать хуки в условиях? \n6. Promise.all и Promise.allSettled\nЗадачи:\nРеализовать хук useDebounce, потом типизировать\nimport { useState, useEffect } from 'react';\n\nfunction useDebounce<T>(value: T, delay: number): T {\n  const [debounced, setDebounced] = useState<T>(value);\n\n  useEffect(...",
        "full_content": "2025-04-30 19:11:01\n Max -> 2071074234:\nМедлайнсофт\nЗП: 220\nHr написала \nВопросы:\n1. Расскажи про себя\n2. подробно спрашивал про резюме/проект\n3. отличие type от interface\n4. правила хуков\n5. Знаешь почему нельзя вызвать хуки в условиях? \n6. Promise.all и Promise.allSettled\nЗадачи:\nРеализовать хук useDebounce, потом типизировать\nimport { useState, useEffect } from 'react';\n\nfunction useDebounce<T>(value: T, delay: number): T {\n  const [debounced, setDebounced] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebounced(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debounced;\n}\n\nexport default useDebounce;\n\nРеализовать функцию handlePromise\nasync function handlePromises(promises) {\n  // allSettled вернёт нужный массив объектов\n  const results = await Promise.allSettled(promises);\n  return results;\n}\n\n// Пример:\nhandlePromises(promises).then(console.log);\n/*\n[\n  { status: 'fulfilled', value: 1 },\n  { status: 'rejected',  reason: 'error' },\n  { status: 'fulfilled', value: 3 }\n]\n*/\nВ какой последовательности? \nasync function foo() {\n    console.log('1')\n    await bar()\n    console.log('2')\n}\nasync function bar() {\n    console.log('3')\n}\nfoo()\nconsole.log('4')\n// 1 3 4 2 \nРеализовать функцию, которая обрабатывает 2 промиса одновременно и возвращает результат\nasync function getData(promise1, promise2) {\n  // стартуем оба «горячих» промиса сразу же\n  const p1 = promise1();\n  const p2 = promise2();\n\n  // а теперь ждём их по отдельности\n  const result1 = await p1;\n  const result2 = await p2;\n\n  return [ result1, result2 ];\n}"
      }
    ]
  },
  {
    "company": "Главгоэкспертиза",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-07 15:44:18",
        "content": "2025-04-07 15:44:18\n Гладких Александр -> 2071074234:\nГлавгоэкспертиза\nзп - 250 \nвакансия https://hh.ru/vacancy/118337686?hhtmFrom=chat&customDomain=1\n\nвопросы \n- какие плюсы React-а \n- как можно нативно реализовать динамическую подгрузку данных в таблицах\n- что такое intersectionObserver\n- что такое debaunce\n- что такое хэш мап\n- чем fetch отличается от pull\n- что такое websocket чем отличается от http\n- что такое localStorage и что там можно хранить\n- зачем нужен Redux\n- что такое Docker зачем...",
        "full_content": "2025-04-07 15:44:18\n Гладких Александр -> 2071074234:\nГлавгоэкспертиза\nзп - 250 \nвакансия https://hh.ru/vacancy/118337686?hhtmFrom=chat&customDomain=1\n\nвопросы \n- какие плюсы React-а \n- как можно нативно реализовать динамическую подгрузку данных в таблицах\n- что такое intersectionObserver\n- что такое debaunce\n- что такое хэш мап\n- чем fetch отличается от pull\n- что такое websocket чем отличается от http\n- что такое localStorage и что там можно хранить\n- зачем нужен Redux\n- что такое Docker зачем нужен и работал ли\n- работал ли с Postgress какие команды знаешь\n- работал с командной строкой баш\n\nбыли в основном по резюме                                                                                                                                                                            \n- как проводил рефакторинг\n- как оптимизировал работу с большими списками и таблицами (за какими метриками следил)\n- как реализовывал дрэг энд дроп\n- как реализовывали модуль для работы Yandex Maps\n\nзадача \n- написан кастомный хук просто рассказать что он делает шаг за шагом\n ( хук занимается фильтрованием данных для таблицы ), много вложенных условий\nметодов массива циклов рекурсии и тд"
      }
    ]
  },
  {
    "company": "Отп Банк В Какую То Команду Из Daily Banking, Которая Занимается Микрофронтами",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-26 13:15:53",
        "content": "2025-06-26 13:15:53\n Egor -> 2071074234:\nОТП Банк в какую то команду из daily banking, которая занимается микрофронтами\nЗП: от 350 на руки\nВакансия: нет\n\nВопросы: \nСпросил про опыт, про интересные задачи\nТехнические вопросы:\nEvent loop\nзамыкание\nПочему используем react\nVirtual dom\nСпособы оптимизации реакт приложения\n\nУ тебя есть таблица, удаляешь один элемент и при удалении появляется таймер, как в тг, с кнопкой \"вернуть\". Как это реализовать, учитывая что пользователь может уйти куда то на дру...",
        "full_content": "2025-06-26 13:15:53\n Egor -> 2071074234:\nОТП Банк в какую то команду из daily banking, которая занимается микрофронтами\nЗП: от 350 на руки\nВакансия: нет\n\nВопросы: \nСпросил про опыт, про интересные задачи\nТехнические вопросы:\nEvent loop\nзамыкание\nПочему используем react\nVirtual dom\nСпособы оптимизации реакт приложения\n\nУ тебя есть таблица, удаляешь один элемент и при удалении появляется таймер, как в тг, с кнопкой \"вернуть\". Как это реализовать, учитывая что пользователь может уйти куда то на другую страницу и может обновить ее?\n\nУ тебя есть страница, на ней модули обернутые в react.lazy, нужно их отобразить по порядку, как это сделать?\n\nУ тебя есть html файл(хост приложение) и у тебя есть микрофронт, состоящий из конфигурируемых форм и стилей, нужно отобразить в этом html функционал и учесть, что у условного админа может быть несколько инстансов этого приложения с его настройками, пользователь же ничего настраивать не может. Как построить такое приложение, как реализовать эти конфигурации и как выстроить архитектуру самого микрофронта?"
      }
    ]
  },
  {
    "company": "Стеллар",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-17 11:27:20",
        "content": "2025-03-17 11:27:20\n Nodar -> 2071074234:\nКомпания: Стеллар\nВакансия: https://rostov.hh.ru/vacancy/117701034?hhtmFrom=employer_vacancies\nЗП: 250+\nСобеседование с фронтом одной из команд, проекта еще нет, набирают в новую команду.\nВопросы про опыт на последнем проекте, стэк проекта и команду\nТеория:\n1) Отличия примитивов от ссылочных данных\n2) Почему можно вызвать методы у примитива через точку. Как это работает в js\n3) Евентлуп, как работает(теория + задача)\nexport default function App() {\n  con...",
        "full_content": "2025-03-17 11:27:20\n Nodar -> 2071074234:\nКомпания: Стеллар\nВакансия: https://rostov.hh.ru/vacancy/117701034?hhtmFrom=employer_vacancies\nЗП: 250+\nСобеседование с фронтом одной из команд, проекта еще нет, набирают в новую команду.\nВопросы про опыт на последнем проекте, стэк проекта и команду\nТеория:\n1) Отличия примитивов от ссылочных данных\n2) Почему можно вызвать методы у примитива через точку. Как это работает в js\n3) Евентлуп, как работает(теория + задача)\nexport default function App() {\n  console.log(1);\n\n  setTimeout(() => {\n    console.log(5);\n  }, 0);\n\n  const promise = Promise.resolve(6).then(console.log);\n\n  useEffect(() => {\n    console.log(2);\n  }, []);\n\n  return <Child />;\n}\n\nfunction Child() {\n  console.log(3);\n\n  useEffect(() => {\n    console.log(4);\n  }, []);\n\n  return \"Logs3\";\n}\n4) useEffect, методы жизненного цикла реакт компонента\n5) классовые компоненты, чего нет в функциональных(вопрос про ErrorBoundary)\n6) useCallback, для чего нужен\n7) VirtualDom в реакте, его особенности.\n8) Анимации в js, как лучше выполнять анимации, через margin или transform"
      }
    ]
  },
  {
    "company": "Альфа Лизинг",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-08-25 12:26:50",
        "content": "2024-08-25 12:26:50\n Vildan Khabibov -> 2071074234:\nАльфа Лизинг \nссылка: https://hh.ru/vacancy/105725129\nзп: не обсуждали\nуспех: ?\n\nВопросы и задача:\n1. Event loop\nsetTimeout(() => console.log('1'), 0);\nconsole.log('2');\nPromise.resolve()\n.then(() => console.log('3'))\n.then(console.log('4'))\n.catch(() => console.log('5'));\nsetTimeout(() => console.log('6'), 0);\nconsole.log('7');\nОтвет: 2 4 7 3 1 6\n\n2. Область видимости \nvar i = 10;\nvar a = [];\nwhile (i--) {\na.push(\nfunction () { return i * i;\n}...",
        "full_content": "2024-08-25 12:26:50\n Vildan Khabibov -> 2071074234:\nАльфа Лизинг \nссылка: https://hh.ru/vacancy/105725129\nзп: не обсуждали\nуспех: ?\n\nВопросы и задача:\n1. Event loop\nsetTimeout(() => console.log('1'), 0);\nconsole.log('2');\nPromise.resolve()\n.then(() => console.log('3'))\n.then(console.log('4'))\n.catch(() => console.log('5'));\nsetTimeout(() => console.log('6'), 0);\nconsole.log('7');\nОтвет: 2 4 7 3 1 6\n\n2. Область видимости \nvar i = 10;\nvar a = [];\nwhile (i--) {\na.push(\nfunction () { return i * i;\n}\n);\n}\nconsole.log(a[0]());\nconsole.log(a[!]());\nОтвет:\nconsole.log(a[0]()); // -1\nconsole.log(a[1]()); // -1\n* Как отрефакторить?\nvar a = [];\nfor (let i = 10; i--;) {\n    a.push(() => i);\n}\n\nconsole.log(a[0]()); // 9\nconsole.log(a[1]()); // 8\nvar i = 10;\nvar a = [];\nwhile (i--) {\n    (function(value) {\n        a.push(function() {\n            return value;\n        });\n    })(i);\n}\n\nconsole.log(a[0]()); // 9\nconsole.log(a[1]()); // 8\n3. Преобразование типов \n// 1. \"\" + 1 + 0\nconsole.log(\"\" + 1 + 0); // '10'\n\n// 2. '\"' - 1 + 0\nconsole.log('\"' - 1 + 0); // -1\n\n// 3. true + false\nconsole.log(true + false); // 1\n\n// 4. 6 / \"3\"\nconsole.log(6 / \"3\"); // 2\n\n// 5. \"2\" * \"3\"\nconsole.log(\"2\" * \"3\"); // 6\n\n// 6. 4 + 5 + \"px\"\nconsole.log(4 + 5 + \"px\"); // '9px'\n\n// 7. \"$\" + 4 + 5\nconsole.log(\"$\" + 4 + 5); // '$45'\n\n// 8. \"4\" - 2\nconsole.log(\"4\" - 2); // 2\n\n// 9. \"4px\" - 2\nconsole.log(\"4px\" - 2); // NaN\n\n// 10. 7 / 0\nconsole.log(7 / 0); // Infinity\n\n// 11. \" -9\\n\" + 5\nconsole.log(\" -9\\n\" + 5); // \" -9\\n5\"\n\n// 12. \" -9\\n\" - 5\nconsole.log(\" -9\\n\" - 5); // -14\n\n// 13. 5 && 2\nconsole.log(5 && 2); // 2\n\n// 14. 2 && 5\nconsole.log(2 && 5); // 5\n\n// 15. 5 || 0\nconsole.log(5 || 0); // 5\n\n// 16. 0 || 5\nconsole.log(0 || 5); // 5\n\n// 17. null + 1\nconsole.log(null + 1); // 1\n\n// 18. undefined + 1\nconsole.log(undefined + 1); // NaN\n\n// 19. \"2\" > \"12\"\nconsole.log(\"2\" > \"12\"); // true\n4. Что происходит, когда пользователь ввел название сайта в адрессную строку браузера.\n5. Основные принципы ООП\n6. Основные принципы Redux\n7. Задачка на React\n - В компоненте есть примитивная кнопка, при нажатии увеличивает значение счетчика\n - Начальное значение счетчик получает через пропс\n - Значение счетчика может измениться через пропс\n - Значение счетчика выводится в div/span элемент (это не существенно)\n - Значение счетчика отправляется на фиктивный API один раз в момент размонтирования\n - Задание надо выполнить с наименьшим количеством  ререндеров\n \n const Comp = ({counter}) => {\n   const [count, setCount] = useState(counter);\n   const val = useRef(counter)  \n   \n   useEffect(() => {\n     setCount(counter)\n     val.current = counter\n   }, [counter])\n   \n    useEffect(() => {\n      return () => {\n        fetch('blabla', {\n          method: 'POST',\n          body: {\n            JSON.strignify({count: val.current})\n          }\n        })\n      }\n    }, [])\n    \n\n   const handleSetCount = () => {\n     setCount(prev => {\n          val.current = prev + 1\n       return prev + 1\n     })\n  \n   }\n   \n   \n   return (\n     <>\n       <span>{count}</span>\n       <button onClick={handleSetCount}>Increment</button>\n      </>\n   )\n }"
      }
    ]
  },
  {
    "company": "Псб Банк",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-09 15:15:20",
        "content": "2024-10-09 15:15:20\n Михаил -> 2071074234:\nПСБ Банк\nвакансия hh.ru/vacancy/106962131\nзп 200к\nочень душный 2-х часовой собес с кучей теории",
        "full_content": "2024-10-09 15:15:20\n Михаил -> 2071074234:\nПСБ Банк\nвакансия hh.ru/vacancy/106962131\nзп 200к\nочень душный 2-х часовой собес с кучей теории"
      }
    ]
  },
  {
    "company": "F6 - Команда Кибербезопасности",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-23 17:11:53",
        "content": "2025-06-23 17:11:53\n Василий -> 2071074234:\nF6 - команда кибербезопасности - техничка\n\n1) Расскажи про все способы хранения данных в браузере\n2) Особенности работы с index.db\n3) Web worker, подробно как отправляем туда данные и как получаем\n4) Service worker\n5) Особенности поведения eventloop, рассказать про requestAnimationFrame и requestIdeCallback\n6) Все способы обмена данными между микрофронтами\n7) Как встроить одну страницу в другую, iframe\n8) Как обмениваться данными между микрофронтами че...",
        "full_content": "2025-06-23 17:11:53\n Василий -> 2071074234:\nF6 - команда кибербезопасности - техничка\n\n1) Расскажи про все способы хранения данных в браузере\n2) Особенности работы с index.db\n3) Web worker, подробно как отправляем туда данные и как получаем\n4) Service worker\n5) Особенности поведения eventloop, рассказать про requestAnimationFrame и requestIdeCallback\n6) Все способы обмена данными между микрофронтами\n7) Как встроить одну страницу в другую, iframe\n8) Как обмениваться данными между микрофронтами через localstorage\n9) Как сделать подписку на обновление DOM дерева MutationObserver\n10)  Есть ли в node.js eventloop?\n11) Все методы запретить изменения объекта, freez seal defineProperties\n12) Чем отличается MOBX от Redux, Proxy обертка\n13) Подробно про MAP SET WEAKMAP WEAKSET особенности каждого\n14) Зачем нужен webpack\n15) Почему Vite быстрее webpack\n16) Как настроить webpack так чтобы он приблизился по скорости к vite\n17) написать eventemmiter\nclass Dispatcher {\n  constructor() {\n    this.events = {};\n  }\n\n  // Добавление обработчика события\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = [];\n    }\n    this.events[eventName].push(callback);\n  }\n\n  // Вызов всех обработчиков для события\n  trigger(eventName) {\n    const handlers = this.events[eventName];\n    if (handlers) {\n      handlers.forEach((handler) => handler());\n    }\n  }\n}\n\n// Пример использования\nconst dispatcher = new Dispatcher();\n\ndispatcher.on('event_one', function () {\n  console.log('message 1');\n});\n\ndispatcher.on('event_one', function () {\n  console.log('message 2');\n});\n\ndispatcher.on('event_two', function () {\n  console.log('message 3');\n});\n\ndispatcher.trigger('event_one');\n// message 1\n// message 2\n\ndispatcher.trigger('event_two');\n// message 3\n\n\nОсобенности: очень глубоко копают, как что работает, видимо ищут синьера"
      }
    ]
  },
  {
    "company": "Компания Sapiens Solution",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-27 17:27:36",
        "content": "2025-01-27 17:27:36\n Александр Богданов -> 2071074234:\n- Компания Sapiens solution(вилка 250-350)\n- Вопросы:\n- самые сложные задачи что запомнились, как код-ревью проходило,\nкакие библиот.CSS-in-JS использовали, почему Radix UI вместо Материал UI использовали на проекте\n- как взаимодеиствие с дизаинером было\n- Теория: типы данных,прототип,чем interface отл.от type, виртуалДОМ что такое + Fiber\nevent_loop,key в Реакте, useState как работает,почему вызов сетера стеита синхронен?Батчинг?\nCORS\n- зад...",
        "full_content": "2025-01-27 17:27:36\n Александр Богданов -> 2071074234:\n- Компания Sapiens solution(вилка 250-350)\n- Вопросы:\n- самые сложные задачи что запомнились, как код-ревью проходило,\nкакие библиот.CSS-in-JS использовали, почему Radix UI вместо Материал UI использовали на проекте\n- как взаимодеиствие с дизаинером было\n- Теория: типы данных,прототип,чем interface отл.от type, виртуалДОМ что такое + Fiber\nevent_loop,key в Реакте, useState как работает,почему вызов сетера стеита синхронен?Батчинг?\nCORS\n- задача на евент-луп:\nsetInterval(() => console.log('setInterval 1'), 1);\nsetTimeout(() => console.log('setTimeout 1'), 1);\nconsole.log('plain log 1');\nPromise.resolve().then(() => console.log('Promise 1'));\nconst promiseTest = new Promise(() => {\nconsole.log('Promise 2');\n});\nsetTimeout(() => console.log('setTimeout 2'), 0);\nconsole.log('plain log 2');\npromiseTest.then(() => console.log('Promise 3'));\n(Ответ: plain log 1 Promise 2 plain log 2 Promise 1 Promise 3 setTimeout 2 setTimeout 1 setInterval 1)\n\nЗадача 2:\n/**\n* Дана функция orderMapper, которая принимает на вход 2 массива: массив объектов типа User: {id: number, name: string, ... # т.д.} и\n* массив объектов типа Order: {userId: number, ...}. Идет по id в объекте User сопоставляет поле userId в объекте Order.\n* На выходе функция orderMapper возвращает массив объектов Order с полем user (расширяет объект Order).\n  */\n\nfunction orderMapper(users, orders) {\n   return orders.map(order => {\n\n   const user = users.find(user => user.id === order.userId);\n   return { ...order, user };\n   });\n}\n// Решение: new Map();\nfunction orderMapper(users, orders) {\nconst userMap = users.reduce((map, user) => {\nmap[user.id] = user;\nreturn map;\n}, {});\n\nreturn orders.map(order => {\nreturn {\n...order,\nuser: userMap[order.userId] || null\n};\n});\n}\nЗадача 3:\n// Что будет в этом коде\nconst Component = () => {\nconst [, setIsRender] = useState(false);\nreturn <>{setIsRender(true)}</>;\n};\n\n// Решение:\n// \"To many renders\" слишком много рендеров - бесконечный цикл\n\nЗадача 4:\nБудет ли лишнии ререндер кнопки при увеличении счетчика и как исправить ререндер если есть?\nimport { useState } from \"react\";\n\nconst Button = ({ onIncrement }) => {\nconsole.log(\"Render\");\nreturn <button onClick={onIncrement}>Increment</button>;\n}\n\nfunction App() {\nconst [count, setCount] = useState(0);\nconst handleIncrement = () => {\nsetCount((prev) => prev + 1);\n};\n\nreturn (\n<div className=\"App\">\n<h1>Count: {count}</h1>\n<Button onIncrement={handleIncrement} />\n</div>\n);\n}"
      }
    ]
  },
  {
    "company": "Zoftify",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-17 16:40:58",
        "content": "2024-06-17 16:40:58\n Valerii Neugomonov -> 2071074234:\nZoftify\n\nВакансия: https://nn.hh.ru/vacancy/101410200\nВилка: неизвестна\nЗП: просил 3к евро\nУспех: фидбек в конце недели\n\nВопросы:\nКак бы реализовал данную на картинке вёрстку? (Это FlatList, numColumns={1}, custom renderItem, в нём манипуляции с width в зависимости от возвращаемого с бека типа итема)\n\nКак работает redux?\n\nreselect lib - юзал ли и знаешь ли?\n\ninterface vs type\n\nкакую авторизацию иплементировал в аппы? через лог+пасс, телефон,...",
        "full_content": "2024-06-17 16:40:58\n Valerii Neugomonov -> 2071074234:\nZoftify\n\nВакансия: https://nn.hh.ru/vacancy/101410200\nВилка: неизвестна\nЗП: просил 3к евро\nУспех: фидбек в конце недели\n\nВопросы:\nКак бы реализовал данную на картинке вёрстку? (Это FlatList, numColumns={1}, custom renderItem, в нём манипуляции с width в зависимости от возвращаемого с бека типа итема)\n\nКак работает redux?\n\nreselect lib - юзал ли и знаешь ли?\n\ninterface vs type\n\nкакую авторизацию иплементировал в аппы? через лог+пасс, телефон, акки аппл андр?\n\nРаботал ли с анимациями?\n\nЧто используешь для апи запросов?\n\nПокажи как выглядит твой актуальный код (транслировал окно с текущим проектом, показал структуру проекта)"
      }
    ]
  },
  {
    "company": "Российский Университет Дружбы Народов",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-12 12:20:20",
        "content": "2024-11-12 12:20:20\n Стас Тихомиров -> 2071074234:\nКомпания: Российский университет дружбы народов (РУДН)\nВакансия: hr написал\nЗП: 190к\nВопросы: \n1. HTML5 что в нем добавилось и почему перешли на HTML5\n2. В чем разница между id и class в css\n3. Адаптивная верстка\n4. Мета теги для чего?\n5. Как  к документу подключить css\n6. Что такое функция?\n7. Чем отличается от обычного объекта функция?\n8. Что такое массивы? и зачем они нам?\n9. Методы массивов\n10. Рассказать подробно про каждую\n11. === и ==\n12....",
        "full_content": "2024-11-12 12:20:20\n Стас Тихомиров -> 2071074234:\nКомпания: Российский университет дружбы народов (РУДН)\nВакансия: hr написал\nЗП: 190к\nВопросы: \n1. HTML5 что в нем добавилось и почему перешли на HTML5\n2. В чем разница между id и class в css\n3. Адаптивная верстка\n4. Мета теги для чего?\n5. Как  к документу подключить css\n6. Что такое функция?\n7. Чем отличается от обычного объекта функция?\n8. Что такое массивы? и зачем они нам?\n9. Методы массивов\n10. Рассказать подробно про каждую\n11. === и ==\n12. Приведение типов ('5'*'2', '5'+'2', 5 +'2')\n13. VDOM\n14. Хуки\n15. useEffect подробно\n16. Зачем нужен TS\n17. Чем interface отличается от type\n18. Redux зачем нужен и что делает, какие еще есть стейт менеджеры\n19. Нам надо получить данные из бека и отобразить. Как бы ты делал, подробно.\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch(url);\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const result = await response.json();\n                setData(result);\n            } catch (error) {\n                setError(error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [url]);\n\n    return { data, loading, error };\n};\n\nexport default useFetch;\nimport React from 'react';\nimport useFetch from './useFetch'; // Путь к вашему хуку\n\nconst DataList = () => {\n    const { data, loading, error } = useFetch('https://jsonplaceholder.typicode.com/posts');\n\n    if (loading) {\n        return <p>Loading...</p>;\n    }\n\n    if (error) {\n        return <p>Error: {error.message}</p>;\n    }\n\n    return (\n        <ul>\n            {data.map(item => (\n                <li key={item.id}>\n                    <h3>{item.title}</h3>\n                    <p>{item.body}</p>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default DataList;"
      }
    ]
  },
  {
    "company": "Luxsoft",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-08-08 16:51:04",
        "content": "2024-08-08 16:51:04\n Artem D -> 2071074234:\n- Luxsoft\n- вакансия: https://career.luxoft.com/jobs/senior-react-developer-6862\n- зп: не обсуждали\n- вопросы:\n1. карирование\n2. CORS\n3. SOLID\n4. Promise\n5. Flex box vs GRID\n6. Unit testing\n7. Suspense\n8. Middleware in Redux\n- задачи:\n// write a function which will return most repeated item in an\n// array with its count\nconst nestedArray = [2, 'A', 2, ['A', 4, ['A', 6, ['A', 8]]]]; // output: {A: 4}\n\nconst getMostRepeatedItem = (arr) => {\n  return arr\n...",
        "full_content": "2024-08-08 16:51:04\n Artem D -> 2071074234:\n- Luxsoft\n- вакансия: https://career.luxoft.com/jobs/senior-react-developer-6862\n- зп: не обсуждали\n- вопросы:\n1. карирование\n2. CORS\n3. SOLID\n4. Promise\n5. Flex box vs GRID\n6. Unit testing\n7. Suspense\n8. Middleware in Redux\n- задачи:\n// write a function which will return most repeated item in an\n// array with its count\nconst nestedArray = [2, 'A', 2, ['A', 4, ['A', 6, ['A', 8]]]]; // output: {A: 4}\n\nconst getMostRepeatedItem = (arr) => {\n  return arr\n}\n\nconsole.log(getMostRepeatedItem(nestedArray))\n\nimport React, { useState } from 'react';\nimport { createRoot } from 'react-dom/client';\n\n// Given:\n// 1. A list of colors composed of \"red\" and \"green\" elements.\n// 2. A \"Square\" component that renders a square of a given color \n//    and executes a click method.\n\n// Implement a parent component named \"App\" that:\n// 1. Uses the given Square component to render all squares from the \"colors\" list\n// 2. Exposes the following functionality:\n//   - click green => change current element to \"red\" + add 1 new \"green\" element\n//     at the end of the list\n//   - click red   => delete current element\n\nconst Square = ({ index, color, handleClick }) => {\n  return (\n    <div\n      style={{ backgroundColor: color, width: \"20px\", height: \"20px\", margin: \"10px\" }}\n      onClick={() => { handleClick(index) }}\n    ></div>\n  );\n}\n\nconst colors = [\"red\", \"green\", \"red\"];\n\nfunction App() {\n  // Candidate must fill in implementation here\n\n  return <div>React coding task</div>;\n}\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(<App />);\n\n\n- Успех: ❌\n- Фидбек: не хватило уровня английского"
      }
    ]
  },
  {
    "company": "Brainshell",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-04 20:49:53",
        "content": "2024-07-04 20:49:53\n Tonidevs -> 2071074234:\nBRAINSHELL крипто-гембла\n— сами написали\n— зп: можно просить сколько хочешь \n— комментарии: не советую, одни беки прогнали по теории, ни дизов ни аналитиков, ни девопс, ни ПМа - нет. Работать придется в соло\n\nВОПРОСЫ\n- использовали ли WebSocket, где и какие нюансы при работе\n- расскажи про react-query, tanstack-query\n- чем пользовался для взаимодействия с api\n- event-loop для чего нужен, как работает\n- что такое замыкание\n- this как работает и какие о...",
        "full_content": "2024-07-04 20:49:53\n Tonidevs -> 2071074234:\nBRAINSHELL крипто-гембла\n— сами написали\n— зп: можно просить сколько хочешь \n— комментарии: не советую, одни беки прогнали по теории, ни дизов ни аналитиков, ни девопс, ни ПМа - нет. Работать придется в соло\n\nВОПРОСЫ\n- использовали ли WebSocket, где и какие нюансы при работе\n- расскажи про react-query, tanstack-query\n- чем пользовался для взаимодействия с api\n- event-loop для чего нужен, как работает\n- что такое замыкание\n- this как работает и какие особенности при работе с ним\n- promise что такое и как работает\n- async await что такое и как работает\n- есть три асинхронных запроса как их объединить и дождаться результата\n- расскажи про Set и Map, WeakSet и WeakMap назови отличия\n- что такое слабая ссылка weak links \n- для чего можно использовать WeakSet и WeakMap\n- что такое контекст в реакте\n- что такое VDOM для чего используется какие преимущества\n- для чего нужен атрибут KEY\n- назови хуки реакта какие основные знаешь и как они работают\n- протокол HTTP что такое и как работает \n- какие есть методы в HTTP и как работают\n- структура HTTP запроса\n- как устанавливается соединение между клиентом и сервером\n- HTTPS что такое и отличие от HTTP\n- как осуществляется шифрование в TLC\n- что такое CORS и как работает, как браузер себя ведет\n- что такое Preflight Requests\n- какие есть основные заголовки CORS\n- расскажи про ООП и как использовал\n- расскажи про SOLID и как использовал\n- расскажи про дженерики\n- какой есть недостаток при типизации в ТС\n- отличие type от interface"
      }
    ]
  },
  {
    "company": "Тетрика Онлайн Школа",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-01 10:52:21",
        "content": "2024-06-01 10:52:21\n Andrei Chirkov -> 2071074234:\nКомпания: Тетрика онлайн школа\nВакансия: https://spb.hh.ru/vacancy/96835804\nЗП: от 250\nУспех собеса: ?\n\nВопросы:\n// Вопрос 1: на проде у одного юзера белый экран? перечисли все способы поиска ошибки. Правильного ответа нет, просто перечислять варианты, но сильно ждали посмотреть в профайлере что с каждым файлом происходит\n// Вопрос 2: куда вынести большие расчеты? в таймаут и воркеры, или делать их на сервере вообще\n// Вопрос 3: паттерны проекти...",
        "full_content": "2024-06-01 10:52:21\n Andrei Chirkov -> 2071074234:\nКомпания: Тетрика онлайн школа\nВакансия: https://spb.hh.ru/vacancy/96835804\nЗП: от 250\nУспех собеса: ?\n\nВопросы:\n// Вопрос 1: на проде у одного юзера белый экран? перечисли все способы поиска ошибки. Правильного ответа нет, просто перечислять варианты, но сильно ждали посмотреть в профайлере что с каждым файлом происходит\n// Вопрос 2: куда вынести большие расчеты? в таймаут и воркеры, или делать их на сервере вообще\n// Вопрос 3: паттерны проектирования: адаптер, фабрика, мост, наблюдатель, синглтон и тд\n\nЗадачи: https://trycode.pw/c/T9BA9\n\nСобеседующие норм, помогают и диалог хороший"
      }
    ]
  },
  {
    "company": "Westlink",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-19 17:19:56",
        "content": "2024-06-19 17:19:56\n Tonidevs -> 2071074234:\nWestLink \n— hr написала\n— ЗП: до 200 вроде\n— успех: нет\n\nВОПРОСЫ\n- почему ищете новую работу\n- как была реализована работа с апи (как вы понимали когда начинать интеграцию с бэком)\n- как выстроен процесс разработки\n- на что обращаете внимание при рефакторинге\n- как определяли что тормозит приложение(какие инструменты использовали)\n\nЗАДАЧИ\n- на флексах или гридах сделай пример, разметку нельзя трогать\n<div class=\"container\">\n        <div class=\"red\" st...",
        "full_content": "2024-06-19 17:19:56\n Tonidevs -> 2071074234:\nWestLink \n— hr написала\n— ЗП: до 200 вроде\n— успех: нет\n\nВОПРОСЫ\n- почему ищете новую работу\n- как была реализована работа с апи (как вы понимали когда начинать интеграцию с бэком)\n- как выстроен процесс разработки\n- на что обращаете внимание при рефакторинге\n- как определяли что тормозит приложение(какие инструменты использовали)\n\nЗАДАЧИ\n- на флексах или гридах сделай пример, разметку нельзя трогать\n<div class=\"container\">\n        <div class=\"red\" style=\"background-color: red;\"></div>\n        <div class=\"blue\" style=\"background-color: blue;\"></div>\n        <div class=\"green\" style=\"background-color: green;\"></div>\n</div>\n.container {\n  width: 300px;\n  height: 200px;\n  border: black 1px solid;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.red,\n.blue {\n  width: 50%;\n  height: 50%;\n}\n\n.green {\n  flex-grow: 1;\n  height: 100%;\n}\n- написать код. При клике на блок, должен показываться цвет блока.\nconst colorBlock = document.querySelector('.container');\n\n// Проверяем, что элемент найден\nif (colorBlock) {\n  // Добавляем обработчик события 'click' на элемент\n  colorBlock.addEventListener('click', (e) => {\n    // Выводим имя класса элемента, на который кликнули\n    console.log(e.target.className);\n  });\n}\n- объясни EventLoop\nconsole.log('start');\n\nconst promise1 = Promise.resolve().then(() => {\n  console.log('promise1');\n  const timer2 = setTimeout(() => {\n    console.log('timer2');\n  }, 0);\n});\n\nconst timer1 = setTimeout(() => {\n  console.log('timer1');\n  const promise2 = Promise.resolve().then(() => {\n    console.log('promise2');\n  });\n}, 0);\n\nconsole.log('end');\n- что будет в консоли\nvar name = \"Kolya\";\nfunction byeOrHello() {\n  if (typeof name === \"undefined\") {\n    var name = \"Vasya\";\n    console.log(`Bye ${name}`);\n  } else {\n    console.log(`Hello ${name}`);\n  }\n}\nbyeOrHello();\n- что будет в консоли\nconst fullname = \"Name1\";\nconst obj = {\n  fullname: \"Name2\",\n  prop: {\n    fullname: \"Name3\",\n    getFullname: function () {\n      return this.fullname;\n    }\n  }\n};\n\nconsole.log(obj.prop.getFullname());\nconst test = obj.prop.getFullname;\nconsole.log(test());\n- написать реакт компонент который при нажатии на кнопку будет выводить элемент с ИД и при нажатии на элемент Ид будет его удалять\nimport ReactDOM from \"react-dom/client\";\nimport React, { useState } from \"react\";\nfunction App() {\n  const [btn, setAddBtn] = useState([]);\n  const addButton = () => {\n    setAddBtn([...btn, btn.length]);\n  };\n  const removeButton = (index) => {\n    setAddBtn(btn.filter((_, i) => i !== index));\n  };\n  return (\n    <section>\n      <h2>Задание №5</h2>\n      <div className=\"wrapper\">\n        <button onClick={addButton}>Add</button>\n        <div className=\"box-wrapper\">\n          {btn.map((number, index) => (\n            <button key={index} onClick={() => removeButton(index)}>\n              {number}\n            </button>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(<App />);"
      }
    ]
  },
  {
    "company": "Юспи Групп",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-12 10:54:53",
        "content": "2024-11-12 10:54:53\n Артем -> 2071074234:\nКомпания: ЮСПИ Групп\nВакансия:  https://hh.ru/vacancy/109307308\nЗП: 180\nВопросы:\nрасскажи про себя\nСемантическая верстка\nтеги для семантической верстки\nCCSOM\nДоступность страницы\nвсплытия событий\nasync await\nчто такое промис\nметоды\nJS Worcer\nwebsocket\nтернарный оператор\ncoocki local storage session storage\nforEach vs map\npositions\nкак модалку на центр поместить\ncss reset\nnormalize\n@madia\ngrid\nreact смысл\nuseEffect vs useLayouteffect\nuseState\nuseRef\nuse m...",
        "full_content": "2024-11-12 10:54:53\n Артем -> 2071074234:\nКомпания: ЮСПИ Групп\nВакансия:  https://hh.ru/vacancy/109307308\nЗП: 180\nВопросы:\nрасскажи про себя\nСемантическая верстка\nтеги для семантической верстки\nCCSOM\nДоступность страницы\nвсплытия событий\nasync await\nчто такое промис\nметоды\nJS Worcer\nwebsocket\nтернарный оператор\ncoocki local storage session storage\nforEach vs map\npositions\nкак модалку на центр поместить\ncss reset\nnormalize\n@madia\ngrid\nreact смысл\nuseEffect vs useLayouteffect\nuseState\nuseRef\nuse memo useCallbakc\nпорталы в React\nВиртуальные списки\nTs\ninterface vs type\nс чем работал какой стетй использовал"
      }
    ]
  },
  {
    "company": "Ceramic3D",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-04 18:28:23",
        "content": "2025-04-04 18:28:23\n Umar -> 2071074234:\nКомпания: Ceramic3d\nВакансия: https://groznyj.hh.ru/vacancy/117077743?hhtmFrom=favorite_vacancy_list\nЗП: 200-270к\n\n1й этап, 30 минут, 2 вопроса + задача\n\n1. Объяснить как решать задачу, описать алгоритм\n\nДан массив строк. Строки в массиве могут повторяться\nНужно получить все строки, у которых больше пяти повторений\n\nОтвет: создаю хэшмапу, прохожусь по массиву добавляя +1 к количеству текущей строки в хэшмапе, возвращаю те строки, которые повторялись больш...",
        "full_content": "2025-04-04 18:28:23\n Umar -> 2071074234:\nКомпания: Ceramic3d\nВакансия: https://groznyj.hh.ru/vacancy/117077743?hhtmFrom=favorite_vacancy_list\nЗП: 200-270к\n\n1й этап, 30 минут, 2 вопроса + задача\n\n1. Объяснить как решать задачу, описать алгоритм\n\nДан массив строк. Строки в массиве могут повторяться\nНужно получить все строки, у которых больше пяти повторений\n\nОтвет: создаю хэшмапу, прохожусь по массиву добавляя +1 к количеству текущей строки в хэшмапе, возвращаю те строки, которые повторялись больше 5 раз\n\n2. Это рабочий код, удовлетворяет ТЗ, бизнес доволен, багов нет.\nЧто будет в result?\n\nconst result = array.reduce((a, c) => ({...a, [c.id]: c}), {});\n\nОтвет: Преобразует массив объектов array в объект result, где:\nключ — c.id, значение — сам объект c\n\n3. Написать рабочий код на TypeScript.\nДан массив строк. Строки могут повторятся\nНужно получить все строки, у которых больше 5 повторений\n\nРешение от чатгпт:\nconst result = Object.entries(\n  strings.reduce<Record<string, number>>((acc, str) => {\n    acc[str] = (acc[str] || 0) + 1;\n    return acc;\n  }, {})\n)\n  .filter(([_, count]) => count > 5)\n  .map(([str]) => str);"
      }
    ]
  },
  {
    "company": "Зарубежная Компания Metricalo",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-26 15:15:15",
        "content": "2025-06-26 15:15:15\n Sergio -> 2071074234:\nЗарубежная компания Metricalo\nЗП 3-5к зелени\nС релокацией\n\nОбщались с HR, общение на английском, она не поняла как у нас работает система платежей, всю вину переложила на меня, поэтому на техничку дальше не пошли. Спрашивала про мой опыт и is it relative to our product. Про меня и мой опыт до конца правда слушать не стала, я спросил могу-ли я продолжать, сказала не надо\n\nВидимо нужен англосакс с native-english",
        "full_content": "2025-06-26 15:15:15\n Sergio -> 2071074234:\nЗарубежная компания Metricalo\nЗП 3-5к зелени\nС релокацией\n\nОбщались с HR, общение на английском, она не поняла как у нас работает система платежей, всю вину переложила на меня, поэтому на техничку дальше не пошли. Спрашивала про мой опыт и is it relative to our product. Про меня и мой опыт до конца правда слушать не стала, я спросил могу-ли я продолжать, сказала не надо\n\nВидимо нужен англосакс с native-english"
      }
    ]
  },
  {
    "company": "Гринатом",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-18 16:21:42",
        "content": "2025-04-18 16:21:42\n Max -> 2071074234:\nКомпания: Гринатом\nЗп: - \nЗадача 1:\nРеализовать в codesandbox небольшое приложение по добавлению и фильтрации пользователей\nРешение: \nimport React, { useState } from 'react';\n\ntype User = {\n    id: number;\n    name: string;\n    email: string;\n    isActive: boolean;\n};\n\nexport default function App() {\n    const [users, setUsers] = useState<User[]>({\n    { id: 1, name: 'Alice', email: 'alice@com.com', isActive: true },\n    { id: 2, name: 'Bob', email: 'bob@c...",
        "full_content": "2025-04-18 16:21:42\n Max -> 2071074234:\nКомпания: Гринатом\nЗп: - \nЗадача 1:\nРеализовать в codesandbox небольшое приложение по добавлению и фильтрации пользователей\nРешение: \nimport React, { useState } from 'react';\n\ntype User = {\n    id: number;\n    name: string;\n    email: string;\n    isActive: boolean;\n};\n\nexport default function App() {\n    const [users, setUsers] = useState<User[]>({\n    { id: 1, name: 'Alice', email: 'alice@com.com', isActive: true },\n    { id: 2, name: 'Bob', email: 'bob@com.com', isActive: false }\n    });\n    const [input, setInput] = useState(\"/);\n    const [emailFilter, setEmailFilter] = useState(\"/);\n\n    const handleAdd = () => {\n    if (!input.trim()) return;\n\n    const emailExists = users.some(user => user.email.toLowerCase)\n    === email);\n    if (emailExists) return;\n\n    const newUser: User = {\n    id: users.length + 1,\n    name: input,\n    email: ${input.toLowerCase()}@com.com,\n    isActive: true\n    };\n    setUsers[...users, newUser]);\n    setInput(\"/);\n};\n\nconst filteredUsers = users.filter(user =>\n    user.email.toLowerCase().includes(emailFilter.toLowerCase())\n    );\n}\nreturn (\n    <div>\n    <h1>Пользователи</h1>\n    <input\n    placeholder=\"Добавить имя\"\n    value={input}\n    onChange={(e) => setInput(e.target.value)}\n    />\n    <button onClick={handleAdd}>Добавить</button>\n\n    <div style={{ marginTop: '1rem' }}>\n    <input\n    placeholder=\"Фильтр по email\"\n    value={emailFilter}\n    onChange={(e) => setEmailFilter(e.target.value)}\n    />\n    </div>\n\n    <ul>\n    {filteredUsers.map(user => {\n    <li key={user.id}>\n    {user.name} -- {user.email} {{user.isActive ? aктивен': 'неактивен'}}\n    </li>\n    });\n    </ul>\n    </div>\n};\n}\nЗадача 2: \nНаписать функцию для пузырковой сортировки\nРешение:\nfunction countingSortDescending(arr) {\n    if (arr.length == 0) return [];\n\n// Находим минимум и максимум\n    let min = arr[0], max = arr[0];\n    for (let num of arr) {\n    if (num < min) min = num;\n    if (num > max) max = num;\n    }\n\n    const count = new Array(max - min + 1).fill(0);\n\n    // Подсчитываем количество каждого числа\n    for (let num of arr) {\n    count[num - min]++;\n    }\n}\n\n// Строим отсортированный массив по убыванию\nconst result = [];\nfor (let i = count.length - 1; i >= 0; i--) {\n    while (count[i] > 0) {\n    result.push(i + min);\n    count[i]--;\n    }\n}\nreturn result;\n}\n\n// Пример:\nconst numbers = [4, 2, 2, 8, 3, 3, 1];\nconsole.log(countingSortDescending(numbers)); // [8, 4, 3, 3, 2, 2, 1]"
      }
