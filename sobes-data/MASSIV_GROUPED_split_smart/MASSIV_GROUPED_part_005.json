{
  "company": "iFellow",
  "count": 13,
  "records": [
    {
      "timestamp": "2025-07-18 15:03:59",
      "content": "2025-07-18 15:03:59\n Игорь -> 2071074234:\niFellow в СБЕР\nВакансия: сама написала\nЗП: 280\n\n1) Расскажи про себя + парочка вопросов по резюме\n1.1) Вижу в резюме что писал свой UI kit самописный или на чем то? Ant или MUI использовал?\n1.2) Вижу опыт с Effector, Redux и пр что можешь сказать по ним?\n1.3) Что используешь для кэширования? (useQuery, RTK Query)\n1.4) Вижу опыт с CSS-in-Js что скажешь? Как еще стили писал?\n2) Какие значения знаешь у display? \n3) rem vs em\n4) Как центрировать элемент по в...",
      "full_content": "2025-07-18 15:03:59\n Игорь -> 2071074234:\niFellow в СБЕР\nВакансия: сама написала\nЗП: 280\n\n1) Расскажи про себя + парочка вопросов по резюме\n1.1) Вижу в резюме что писал свой UI kit самописный или на чем то? Ant или MUI использовал?\n1.2) Вижу опыт с Effector, Redux и пр что можешь сказать по ним?\n1.3) Что используешь для кэширования? (useQuery, RTK Query)\n1.4) Вижу опыт с CSS-in-Js что скажешь? Как еще стили писал?\n2) Какие значения знаешь у display? \n3) rem vs em\n4) Как центрировать элемент по вертикали?\n5) Какие способы организации асинхронности знаешь в JS?\n6) Отличие type и interface\n7) Отличие enum и const enum + кейсы использования\n8) Что такое React? Плюсы?\n9) Способы оптимизации? (глубоко не копал)\n10) Для чего нужны ключи?\n11) merge или rebase юзаете?\n\nЗадача 1\n(function() {\n    var a = b = 3;\n})();\nconsole.log(typeof a);\nconsole.log(typeof b);\nЗадача 2 \n'use strict'\n\nconst obj = {\n  i: 10\n  b: () => {\n    console.log(this.i, this)\n  }\n  c: function() {\n    console.log(this.i, this)\n  }\n}\n\nobj.b (undefined, {})\nobj.c (10, obj)\nЗадача 3\nfunction fibonacci(n) {\n  // Обрабатываем базовые случаи:\n  // f(1) = 0, f(2) = 1\n  if (n <= 1) return 0;\n  if (n === 2) return 1;\n  // prev — предыдущее число (f(1))\n  // curr — текущее число (f(2))\n  let prev = 0;\n  let curr = 1;\n  // Начинаем с f(3) и идём до f(n)\n  for (let i = 3; i <= n; i++) {\n    // Вычисляем следующее число Фибоначчи\n    let next = prev + curr;\n\n    // Сдвигаем значения вперёд:\n    // текущее становится предыдущим, а новое — текущим\n    prev = curr;\n    curr = next;\n  }\n  // После завершения цикла curr содержит f(n)\n  return curr;\n}\n\nconsole.log(fibonacci(5)); // 3"
    },
    {
      "timestamp": "2025-07-16 10:13:19",
      "content": "2025-07-16 10:13:19\n Евгений -> 2071074234:\nКомпания iFellow\nПроект: Сбер финансы\nЗП: 230\n\nТимлид не пришел , в итоге был один разраб который не знает на какой именно проект, спросил про опыт\nВопросы: \n1.Есть боль на проекте, 20 тыс объктов приходят их нельзя разбить на части они взаимосвязаны, загрузка долгая, что с этим делать ? \n2. С чем бы хотел поработать\n3. Есть ли офферы\n4. На что ориентируешься при выборе оффера? \nДальше просто общались на разные темы",
      "full_content": "2025-07-16 10:13:19\n Евгений -> 2071074234:\nКомпания iFellow\nПроект: Сбер финансы\nЗП: 230\n\nТимлид не пришел , в итоге был один разраб который не знает на какой именно проект, спросил про опыт\nВопросы: \n1.Есть боль на проекте, 20 тыс объктов приходят их нельзя разбить на части они взаимосвязаны, загрузка долгая, что с этим делать ? \n2. С чем бы хотел поработать\n3. Есть ли офферы\n4. На что ориентируешься при выборе оффера? \nДальше просто общались на разные темы"
    },
    {
      "timestamp": "2025-07-09 16:03:46",
      "content": "2025-07-09 16:03:46\n Евгений -> 2071074234:\nКомпания: iFellow\nПроект: Сбер финансы\nЗП: 230\n\nВопросы: \n1. Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, знаковых задачах    \n2. Как у вас выстроен производственный процесс? Команда большая?    \n3. Unit тесты писали? Как писали? Доп: какие еще тесты писал? Какой опыт есть в тестировании?    \n4. Какие ожидания от нового места работы? Чтобы хотелось получить в итоге?    \n5. Какие способы организации CSS кода приходилось ...",
      "full_content": "2025-07-09 16:03:46\n Евгений -> 2071074234:\nКомпания: iFellow\nПроект: Сбер финансы\nЗП: 230\n\nВопросы: \n1. Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, знаковых задачах    \n2. Как у вас выстроен производственный процесс? Команда большая?    \n3. Unit тесты писали? Как писали? Доп: какие еще тесты писал? Какой опыт есть в тестировании?    \n4. Какие ожидания от нового места работы? Чтобы хотелось получить в итоге?    \n5. Какие способы организации CSS кода приходилось использовать?    \n6. Какие значения знаешь у display?    \n7. Какие способы центрировать блок знаешь?    \n8. Какие способы организации асинхронности знаешь в JS?    \n9. Какие способы копирования объекта знаешь? Доп вопрос: При кастомном решении копирования объекта - как скопировать функцию?\n10. Чем типы отличаются от interface ? \n11. Расскажи про Декораторы в typescript\n12. Для чего нужен нужен key в react. Доп вопрос что будет если поменять местами элементы?\n13. В каких случаях нужно использовать мемоизацию и какие способы ты знаешь ? Доп вопрос как ты можешь понять что нужно ее применять? \n14. Что используете на проекте merge или rebase ? \n\nЗадача 1: \n<!--Как на CSS сделать фигуру: в квадрат должны быть вписаны четыре треугольника с общей вершиной в центре?-->\n\n<div class='container'>\n  <div class='triangle red'></div>\n  <div class='triangle green'></div>\n  <div class='triangle yellow'></div>\n</div>\n\n<style>\n   .container {\n  position: relative;\n  width: 200px; /* Настройте размер по необходимости */\n  height: 200px; /* Настройте размер по необходимости */\n}\n\n.triangle {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-style: solid;\n}\n\n.red {\n  border-width: 100px 100px 0 0;\n  border-color: red transparent transparent transparent;\n  top: 0;\n  left: 0;\n}\n\n.green {\n  border-width: 0 0 100px 100px;\n  border-color: transparent transparent green transparent;\n  bottom: 0;\n  right: 0;\n}\n\n.yellow {\n  border-width: 100px 0 0 100px;\n  border-color: transparent transparent transparent yellow;\n  bottom: 0;\n  left: 0;\n} \n    \n</style>\nЗадача 2: \n// Что будет в консоли? И почему именно так?\n(function() {\n    var a = b = 3;\n})();\nconsole.log(typeof a);\nconsole.log(typeof b);\nЗадача 3: \nsetTimeout(() => console.log('timeout'));\nPromise.resolve().then(() => console.log('promise'));\nwindow.requestAnimationFrame(() => console.log('requestAnimationFrame'));\nconsole.log('code');\nЗадача 4: \n//Что будет выведено? И почему именно так?\n//Доп вопрос: что будет с value, которая внутри функции?\n//Доп вопрос: как исправить? Какие есть способы?\n\nvar test = (function() {\n    var value = 1;\n    function setValue(newValue) {\n        value = newValue;\n    }\n    return {\n        value: value,\n        setValue: setValue,\n    };\n})();\n\ntest.setValue(2);\nconsole.log(test.value);\nЗадача 5: \nfunction fibonacci(n) {\n    if (n <= 0) return 0; // Первый элемент последовательности\n    if (n === 1) return 1; // Второй элемент последовательности\n\n    let prevNum = 0; // Предыдущее число\n    let currNum = 1; // Текущее число\n\n    for (let i = 2; i <= n; i++) {\n        const temp = prevNum + currNum; // Следующее число\n        prevNum = currNum; // Обновляем предыдущее число\n        currNum = temp; // Обновляем текущее число\n    }\n\n    return currNum; // тут начал сомневаться, что так возвращать, но проверяющий сказал: принимается, логика мышления ясна - комментировал устно решение\n}\n\n// Пример использования:\nconsole.log(fibonacci(5)); // Вывод: 3"
    },
    {
      "timestamp": "2025-05-21 08:51:18",
      "content": "2025-05-21 08:51:18\n Max -> 2071074234:\nIfellow 2 этап 20.05 (на проект сбера)\nзп: 180 \nвопросы:\n - тоже самое, что и здесь https://t.me/c/2071074234/489/118921\n- rem и em\n - чем отличается type от interface\n- useMemo, useCallback, memo\n- зачем нужен key в React",
      "full_content": "2025-05-21 08:51:18\n Max -> 2071074234:\nIfellow 2 этап 20.05 (на проект сбера)\nзп: 180 \nвопросы:\n - тоже самое, что и здесь https://t.me/c/2071074234/489/118921\n- rem и em\n - чем отличается type от interface\n- useMemo, useCallback, memo\n- зачем нужен key в React"
    },
      {
        "timestamp": "2025-04-23 12:19:10",
        "content": "2025-04-23 12:19:10\n Илья Пономарев -> 2071074234:\niFellow. 1-й тех этап на проект Сбера\nВакансия: написала HR\nЗП: ~ 220-240\n\nВопросы:\nБлок 1\n- Что такое Promise\n- Promise Api. Примеры работы со статическими методами на практике\n- Event Loop\n- Типы данных\nБлок 2\n- Значения свойства position\n- Способы позиционирования элемента по горизонтали и вертикали\n- rem vs em\n- Способы организации многозадачности в JS (Web Workers, Service Workers)\n- Способы скопировать объект. Какие есть ньюансы\n- Как из ф...",
        "full_content": "2025-04-23 12:19:10\n Илья Пономарев -> 2071074234:\niFellow. 1-й тех этап на проект Сбера\nВакансия: написала HR\nЗП: ~ 220-240\n\nВопросы:\nБлок 1\n- Что такое Promise\n- Promise Api. Примеры работы со статическими методами на практике\n- Event Loop\n- Типы данных\nБлок 2\n- Значения свойства position\n- Способы позиционирования элемента по горизонтали и вертикали\n- rem vs em\n- Способы организации многозадачности в JS (Web Workers, Service Workers)\n- Способы скопировать объект. Какие есть ньюансы\n- Как из функции обработчика события обратиться к элементу на котором оно было вызвано\n- any vs unknown\n- useEffect vs useLayoutEffect\n- Параметры useEffect\n- Управляемые компоненты в React\n- merge vs rebase\nБлок 3\n- Что такое чистая функция\n- Оценка сложности алгоритмов\n- Тебе поставили задачу разобраться (минимимзировать) повторяющиеся GET запросы при уходе / возвращении на страницу. Твои действия. Рассказал про кеширование (на клиенте / на беке). Чтобы закешировал, а что нет \n- Перечислить React хуки\n- useMemo.  Примеры из практики"
      },
      {
        "timestamp": "2025-04-21 18:52:16",
        "content": "2025-04-21 18:52:16\n Max -> 2071074234:\nIFellow\nВакансия: hr написала\nЗП: 180\nВопросы:\nКакие есть свойства position\nСпособы отцентровать блок\nrem em Что такое\nКакие есть свойства position\nОтличия межу arrow function  function declaration  function expression\nКак работает Event-loop\nОтличия var let и const\nОтличия type от interface\nAny vs unknown\nЧто такое утверждение типов\nКак работает useEffect, зачем нужен\nКак работает useLayoutEffect, зачем нужен, отличия от useEffect \nКак работает useMemo, з...",
        "full_content": "2025-04-21 18:52:16\n Max -> 2071074234:\nIFellow\nВакансия: hr написала\nЗП: 180\nВопросы:\nКакие есть свойства position\nСпособы отцентровать блок\nrem em Что такое\nКакие есть свойства position\nОтличия межу arrow function  function declaration  function expression\nКак работает Event-loop\nОтличия var let и const\nОтличия type от interface\nAny vs unknown\nЧто такое утверждение типов\nКак работает useEffect, зачем нужен\nКак работает useLayoutEffect, зачем нужен, отличия от useEffect \nКак работает useMemo, зачем нужен\nКак работает useCallback, зачем нужен\nВ каких случаях нужно использовать мемоизацию и зачем\nЗадачи:\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3);\n  }).then(() => {\n    console.log(4);\n  });\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log(5);\n}).then(() => {\n  console.log(6);\n});\n\nsetTimeout(() => {\n  console.log(7);\n}, 0);\n\nconsole.log(8);\n// 1, 5, 8, 6, 2, 3, 4,7\nЗадача: \nобъяснить что означают\n1) .?\n2) ??\n3)  ...\n4) &=\n5) ||=\n6) `${foo}`\n7) someArray.at()\nЗадача:\nНаписать коллбек для memo в компоненте, чтобы рендерил дочерний только, если пропсы чётные\nРешение:\n(prevProps, nextProps) => {\n    // Ререндерим только на четные числа или когда count не изменился\n    return nextProps.count % 2 !== 0 && prevProps.count !== nextProps.count;\n}"
      },
      {
        "timestamp": "2025-02-25 11:14:56",
        "content": "2025-02-25 11:14:56\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - финал\nСсылка на вакансию: написала HR\nЗП: от 250к\n\nВопросы от компании:\n1) Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, знаковых задачах.\n2) Как у вас выстроен производственный процесс? Команда большая?\n3) Комфортно в коллективе разработчиков или одному работать?\n4) Сталкивался ли с DevOps? Сам можешь настроить и/или делать правки в конфигах?\n\nРассказ о продукте и сервисе Сбера куда идет набор.\n\n...",
        "full_content": "2025-02-25 11:14:56\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - финал\nСсылка на вакансию: написала HR\nЗП: от 250к\n\nВопросы от компании:\n1) Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, знаковых задачах.\n2) Как у вас выстроен производственный процесс? Команда большая?\n3) Комфортно в коллективе разработчиков или одному работать?\n4) Сталкивался ли с DevOps? Сам можешь настроить и/или делать правки в конфигах?\n\nРассказ о продукте и сервисе Сбера куда идет набор.\n\nВстречные вопросы:\n1) Расскажите о команде.\n2) Какой стек на сервисе.\n3) Расскажите про особенности UI kitа.\n4) Как часто проходят релизы?\n5) Во сколько проходят дейли и какая продолжительность?\n6) Где проходит общение команды?\n7) Какие ожидания от нового разработчика?\n8) Какие планы по запуску/развитию  продукта в целом?"
      },
      {
        "timestamp": "2025-02-21 12:46:43",
        "content": "2025-02-21 12:46:43\n alzor -> 2071074234:\nАудиозапись к собеседованияю\nКомпания: iFellow(Сбер) - 2ой этап\nСсылка на вакансию: написала HR\nЗП: от 250к",
        "full_content": "2025-02-21 12:46:43\n alzor -> 2071074234:\nАудиозапись к собеседованияю\nКомпания: iFellow(Сбер) - 2ой этап\nСсылка на вакансию: написала HR\nЗП: от 250к"
      },
      {
        "timestamp": "2025-02-21 12:45:05",
        "content": "2025-02-21 12:45:05\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - 2ой этап\nСсылка на вакансию: написала HR\nЗП: от 250к\n\n1. Расскажи о себе, о своем опыте, чем занимался, что такого классного делал в последнее время, что получалось, что не получалось?\n2. Расскажи про команду, сколько фронтов в команде было?\n3. Как были устроены процессы(Agile, kanban)?\n4. Код ревью было, как проходило?\n5. Как оцениваешь погружонность других команд в ваш проект?(тк кросс командное ревью кода)\n6. Unit тесты писал...",
        "full_content": "2025-02-21 12:45:05\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - 2ой этап\nСсылка на вакансию: написала HR\nЗП: от 250к\n\n1. Расскажи о себе, о своем опыте, чем занимался, что такого классного делал в последнее время, что получалось, что не получалось?\n2. Расскажи про команду, сколько фронтов в команде было?\n3. Как были устроены процессы(Agile, kanban)?\n4. Код ревью было, как проходило?\n5. Как оцениваешь погружонность других команд в ваш проект?(тк кросс командное ревью кода)\n6. Unit тесты писали? Есть смысл тратить на это время?\n7. Почему работу меняешь? Что не устраивает?\n8. Удаленно работаешь?\n9. Какие ожидания от нового места работы? Чтобы хотелось получить в итоге?\n\n1.Какие способы организации CSS кода приходилось использовать?\n2.Какие значения знаешь у св-ва  display?\n3.Какие способы центрировать блок знаешь?\n4.Как работает z-index?\n5.Может ли меньший z-index перекрыть больший?\n6.Какие способы организации асинхронности знаешь в js?\n7.Какие способы копирования объекта знаешь?\n8.Как внутри обработчика события onClick получить доступ к элементу по которому пользователь кликнул?\n9. Какое отличие event.target от event.currentTarget?\n10. Чем type от interface отличается в TS?\n11. Чем useEffect отличается от useLayoutEffect?\n12. Зачем нужен атрибут key?\n13. Скажи чем merge от rebase отличается?\n\nЗадача 1: как на CSS сделать фигуру: в квадрат вписаны четыре треугольника с общей вершиной в центре:\n\n<div class=\"container\">\n  <div class=\"triangle red\"></div>\n  <div class=\"triangle green\"></div>\n  <div class=\"triangle yellow\"></div>\n</div>\n\n\n.container {\n  position: relative;\n  width: 200px; /* Настройте размер по необходимости */\n  height: 200px; /* Настройте размер по необходимости */\n}\n.triangle {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-style: solid;\n}\n.red {\n  border-width: 100px 100px 0 0;\n  border-color: red transparent transparent transparent;\n  top: 0;\n  left: 0;\n}\n.green {\n  border-width: 0 0 100px 100px;\n  border-color: transparent transparent green transparent;\n  bottom: 0;\n  right: 0;\n}\n.yellow {\n  border-width: 100px 0 0 100px;\n  border-color: transparent transparent transparent yellow;\n  bottom: 0;\n  left: 0;\n}\n\n\nЗадача 2: Что будет в консоли?\n\n(function(){\n    var a = b = 3;\n})();\nconsole.log(typeof a);\nconsole.log(typeof b);\n\nОтвет: undefined number\n\nЗадача 3: Что будет в консоли?\n\nsetTimeout(() => console.log(\"timeout\"));\n\nPromise.resolve().then(() => console.log(\"promise\"));\n\nwindow.requestAnimationFrame(() => console.log(\"requestAnimationFrame\"));\n\nconsole.log(\"code\");\n \nОтвет: code promise requestAnimationFrame timeout\n\nЗадача 4: Что будет в консоли?\n\n'use strict';\n\nvar obj = {\n  i: 10,\n  b: () => console.log(this.i, this),\n  c: function() {\n    console.log(this.i, this);\n  }\n}\nobj.b(); \nobj.c(); \n\nОтвет: \nпри 'use strict': \nobj.b(); // undefined, undefined\nobj.c(); // 10, объект obj\n\nбез 'use strict':\nobj.b(); // undefined, window\nobj.c(); // 10, объект obj\n\nЗадача 5: Что будет в консоли?\n\nvar test = (function() {\n    var value = 1;\n    function setValue(newValue) {\n        value = newValue;\n    }\n    return {\n        value: value,\n        setValue: setValue,\n    };\n})();\n\ntest.setValue(2);\nconsole.log(test.value); \n\nОтвет: 1\nДоп. вопрос: если удалить value: value, что будет?\nОтвет: undefined\n \nЗадача 6: Напишите функцию которая возвращает n-е число Фибоначчи.\n\nfunction fibonacci(n) {\n    if (n <= 0) return 0; // Первый элемент последовательности\n    if (n === 1) return 1; // Второй элемент последовательности\n\n    let a = 0; // Предыдущее число\n    let b = 1; // Текущее число\n\n    for (let i = 2; i <= n; i++) {\n        const temp = a + b; // Следующее число\n        a = b; // Обновляем предыдущее число\n        b = temp; // Обновляем текущее число\n    }\n\n    return a; // Возвращаем предыдущее число, так как цикл идет до n\n}\n\n// Пример использования:\nconsole.log(fibonacci(5)); // Вывод: 3"
      },
      {
        "timestamp": "2025-02-14 19:34:15",
        "content": "2025-02-14 19:34:15\n alzor -> 2071074234:\nКомпания: iFellow(Сбер)\nСсылка на вакансию: написала HR\nЭтап: 1ый этап тех. собеса\nЗП: от 250к",
        "full_content": "2025-02-14 19:34:15\n alzor -> 2071074234:\nКомпания: iFellow(Сбер)\nСсылка на вакансию: написала HR\nЭтап: 1ый этап тех. собеса\nЗП: от 250к"
      },
      {
        "timestamp": "2025-02-14 15:56:32",
        "content": "2025-02-14 15:56:32\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - 1эй этап\nСсылка на вакансию: написала  HR\nЗП: от 250к\nВопросы.\n\nБлок 1(Теория):\n1) Что такое промисы, как используешь в проектах, что предпочитаешь: async-await или .then.catch?\n2) Назови статические методы промисов.\n3) Назови реальный use case для Promice.race.\n4) Расскажи про Event Loop.\n5) Где кроме браузера может работать Event Loop?\n6) Были случаи в практике для использования Event Loop? Чтобы действительно помогло.\n7) Назо...",
        "full_content": "2025-02-14 15:56:32\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - 1эй этап\nСсылка на вакансию: написала  HR\nЗП: от 250к\nВопросы.\n\nБлок 1(Теория):\n1) Что такое промисы, как используешь в проектах, что предпочитаешь: async-await или .then.catch?\n2) Назови статические методы промисов.\n3) Назови реальный use case для Promice.race.\n4) Расскажи про Event Loop.\n5) Где кроме браузера может работать Event Loop?\n6) Были случаи в практике для использования Event Loop? Чтобы действительно помогло.\n7) Назови типы данных в JS.\n8) Какой тип данных у массивов?\n9) Был ли опыт работы с прототипами?\n10) Расскажи про DOM, что это такое в контексте JS? \n11) Как в JS получить доступ к какому либо узлу(ноде)?\n12) Расскажи про фазы всплытия-погружения.\n13) Как остановить всплытие?\n14) Есть опыт верстки? На сколько этот процесс нравится?\n15) Как центрировать блок с помощью CSS?\n16) Чем блочные элементы отличаются от строчных?\n17) Какие методы адаптивной верстки знаешь?\n18) В чем отличие единиц измерения em от rem?\n19) Теоретическая задача: есть шапка(header), слева логотип, справа кнопка. Как утощить кнопку вправо?\nОтвет на задачу: 1) хедеру сделать display: flex,  justify-content: space-between 2) кнопке margin-left: auto;\n20) Какую задачу решает React? Зачем он нужен?\n21) Разрабатывал компоненты на классах?\n22) Почему команда React решила отказаться от классовых компонентов и перешла к функциональным с разработкой хуков?\n23) Почему команда React заявляет, что хуки должны быть чистыми?\n24) Props которые прокидываются в компоненты можно мутировать или нельзя?\n25) Приведи пример когда можно мутировать состояние в React? //WTF\n26) Часто используешь хук useCallback и для чего?\n27) Были реальные случаи использования useCallback и ты ощущал пользу от него?\n28) Были ли случаи в твоей практике оптимизации приложение с влиянием на UX?\n29) Приведи пример способа оптимизации дорогой(объемной) операции чтобы она не влияла на весь остальной компонент.\n30) В каких случаях в React запускается ререндеринг?\n31) Расскажи про key.\n32) Тесно работаешь с TypeScript?\n33) Как у вас на проекте заведено: может быть ли такое, что что-то затипизированно через any.\n\nБлок 2(Опыт работы):\n1) Все еще работаешь или уволился?\n2) Где живешь?\n3) Расскажи про корпоративную культуру т.е. как у вас налажен процесс написания кодовой базы, что вы используете, какие методологии?\n4) Расскажи про опыт работы по SCRUM.\n5) В команде сколько разработчиков фротенд/бекэнд?\n6) Как ты считаешь в организации рабочего дня какие основные проблемы/задачи есть? Как организуешь свой рабочий день, пытаешься это делать?\n7) Какой грейд у тебя сейчас в команде?\n8) С микрофронтендом есть опыт работы?\n9) Есть опыт настройки webpack?\n10) Можно в vite сделать тонкую настройку, как в webpack?\n11) Сколько лет работаешь?\n12) Каков твой путь в IT?\n\nБлок 3(Встречные вопросы):\n1) Расскажи про проект.\n2) На своем компьютере можно работать?\n3) Есть ли онбординг?\n4) Слышал про командное(парное) программирование? Есть такое в сбере?\n5) Сам давно в iFellow работаешь?\n6) Как в целом опыт?\n7) Сколько всего этапов тех. собеседований?"
      },
      {
        "timestamp": "2024-12-17 16:35:21",
        "content": "2024-12-17 16:35:21\n Egor -> 2071074234:\nКомпания: IFellow \nСсылка на вакансию: hr сама написала\nЗп: от 330\nЗапись: https://youtu.be/ZMlcnlnT4YI",
        "full_content": "2024-12-17 16:35:21\n Egor -> 2071074234:\nКомпания: IFellow \nСсылка на вакансию: hr сама написала\nЗп: от 330\nЗапись: https://youtu.be/ZMlcnlnT4YI"
      },
      {
        "timestamp": "2024-09-24 16:12:33",
        "content": "2024-09-24 16:12:33\n SQwerty -> 2071074234:\nIFellow (аутстафф в Сбер)\nСсылка на вакансию: написала hr\nЗП: 250k\nВопросы: \nЧто такое контекст this? В чем особенность стрелочной функции? Что такое замыкание, подробно\nБаза по Promise. Какие типы есть в js?\nСпрашивал про классовые компоненты, про методы жизненного цикла в классовых компонентах. В чем отличие от функциональных компонентов? Про виртуализацию, как реализовывал кастомно?\nБыли вопросы по redux про сущности flux. Что такое RTK Query, в чем...",
        "full_content": "2024-09-24 16:12:33\n SQwerty -> 2071074234:\nIFellow (аутстафф в Сбер)\nСсылка на вакансию: написала hr\nЗП: 250k\nВопросы: \nЧто такое контекст this? В чем особенность стрелочной функции? Что такое замыкание, подробно\nБаза по Promise. Какие типы есть в js?\nСпрашивал про классовые компоненты, про методы жизненного цикла в классовых компонентах. В чем отличие от функциональных компонентов? Про виртуализацию, как реализовывал кастомно?\nБыли вопросы по redux про сущности flux. Что такое RTK Query, в чем его приемущество?"
      },
      {
    "company": "РСХБ-Интех",
    "count": 10,
    "records": [
      {
        "timestamp": "2025-05-22 11:59:55",
        "content": "2025-05-22 11:59:55\n Timur -> 2071074234:\nКомпания: РСХБ-интех. тех собес\nзп: 300к\nВакансия\n\nсам собес был лайтовый, на +-30 минут\n\nВопросы:\n1.спросили чем занимался на прошлом проекте и с чем, помимо реакта, работал\n\nЗадача 1:\nЧто выведет в консоль\nvar a = 1;\nvar b = 1;\nvar c = '1';\nvar d = 1.0;\nvar f = 1.0000000000000001;\n\nconsole.log(a == b);   // true\nconsole.log(a == c);   // true\nconsole.log(a === c);  // false\nconsole.log(a == d);   // true\nconsole.log(a === d);  // true\nconsole.log(a == ...",
        "full_content": "2025-05-22 11:59:55\n Timur -> 2071074234:\nКомпания: РСХБ-интех. тех собес\nзп: 300к\nВакансия\n\nсам собес был лайтовый, на +-30 минут\n\nВопросы:\n1.спросили чем занимался на прошлом проекте и с чем, помимо реакта, работал\n\nЗадача 1:\nЧто выведет в консоль\nvar a = 1;\nvar b = 1;\nvar c = '1';\nvar d = 1.0;\nvar f = 1.0000000000000001;\n\nconsole.log(a == b);   // true\nconsole.log(a == c);   // true\nconsole.log(a === c);  // false\nconsole.log(a == d);   // true\nconsole.log(a === d);  // true\nconsole.log(a == f);   // true\n\nЗадача 2:\nКак передать a и c в функцию так, чтобы b остался по дефолту?\n// Как задать параметр, пропустив предыдущий необязательный\nfunction foo(a: string, b: string = 'b', c: string = 'c') {...}\n\nfoo('string1', undefined, 'string2');\n\nЗадача 3:\nНаписать функцию sleep, которая выполнится через переданное количество мс\nasync function fn() {\n    const s = await delay('str', 2000);\n    console.log(s);\n}\n\nconst delay = (str, ms) => {\n    return new Promise((res) => {\n        setTimeout(() => {\n            res(str);\n        }, ms);\n    });\n}\n\nfn();\n\nЗадача 4:\nЧто выведет на 13 строке и почему \nconst _obj = {\n    name: \"Petr\",\n    sayHi: function () {\n        alert(`Hi ${this.name}`);\n    }\n};\n\nfunction stringify(obj) {\n    return JSON.stringify(obj);\n}\n\nfunction parse(str) {\n    return JSON.parse(str);\n}\n\nparse(stringify(_obj)).sayHi(); // is not a function\nтк  JSON.stringify() не сохраняет функции - только свойства\nметод sayHi исчезает при сериализации, и после parse(...) его уже нет\n\nЗадача 5:\nчто произойдет в каждом из блоков кода\n// 1 — бесконечный синхронный цикл (блокирует поток), браузер зависает\nwhile (1) {}\n\n// 2 — асинхронная рекурсия через setTimeout (не блокирует поток)\nfunction fn() {\n    setTimeout(fn); \n}\nfnTimeout();\n\n// 3 — асинхронная рекурсия через Promise, работает без блокировки, но может перегрузить call stack\nfunction fn() {\n    return Promise.resolve()\n      .then(fn);\n}\nfn(); \n\nЗадача 5:\nнаписать простой counter на реакте\nconst Button = () => {\n  const [counter, setCounter] = useState(0);\n\n  const handleClick = () => {\n    setCounter(prev => prev + 1);\n  };\n\n  return (\n    <>\n      <label>count: {counter}</label>\n      <button onClick={handleClick}>Update counter</button>\n    </>\n  );\n};"
      },
      {
        "timestamp": "2025-03-12 16:11:12",
        "content": "2025-03-12 16:11:12\n Андрей Мелицков -> 2071074234:\nКомпания: рсхб интех\nз/п 300 гросс\nгибрид Москва\nПровал: Не смог внятно рассказать про HTTP, Redux под капотом, и почему-то не зачел замыкание и хостинг(\n\nВопросы на техничке:\n1. О себе\n2. Что именно сделал на проекте, чуть покопал по техничке\n3. Что такое http\n4. Из чего состоит запрос (заголовки тело методы домен и тд.)\n5. CORS (что это? для чего? где ставятся?)\n6. Куки, сесион и локал сторажи для чего отличие? Какие кейсы использования?\n7. l...",
        "full_content": "2025-03-12 16:11:12\n Андрей Мелицков -> 2071074234:\nКомпания: рсхб интех\nз/п 300 гросс\nгибрид Москва\nПровал: Не смог внятно рассказать про HTTP, Redux под капотом, и почему-то не зачел замыкание и хостинг(\n\nВопросы на техничке:\n1. О себе\n2. Что именно сделал на проекте, чуть покопал по техничке\n3. Что такое http\n4. Из чего состоит запрос (заголовки тело методы домен и тд.)\n5. CORS (что это? для чего? где ставятся?)\n6. Куки, сесион и локал сторажи для чего отличие? Какие кейсы использования?\n7. let, const, var отличия\n8. Что принес нам ES6?\n9. Отличие функций обычных от стрелочных? this, определение какое в коде\n10. Замыкание\n11. отличие || от ??(я хз)\n12. Что такое Редакс и как работает?\n13. Что такое useContext()\n12. задача: пройтись по массиву и вызвать в консоль индексы элементов с разницей в секунду без setInterval.\n\nconst printWithDelay = (array) => {\n  let index = 0;\n  let timeoutId;\n\n  const printNext = () => {\n    if (index < array.length) {\n      console.log(`Index: ${index}, Element: ${array[index]}`);\n      index++;\n      timeoutId = setTimeout(printNext, 1000); // Задержка в 1 секунду\n    }\n  };\n\n  printNext();\n\n  // Возвращаем функцию для очистки таймаутов\n  return () => {\n    clearTimeout(timeoutId);\n  };\n};\n\n// Пример использования:\nconst clearFunction = printWithDelay([10, 20, 30, 40, 50]);\n\n// Если нужно остановить выполнение до завершения, можно вызвать clearFunction()\n// clearFunction();\n\nэто я дал пример решения с очисткой таймаутов, я сделал без них проще по времени не успели на очистку таймаутов, так как я подробно разжевывал ответы на теорию.\nВакансия: https://hh.ru/vacancy/118141705?from=share_ios"
      },
      {
        "timestamp": "2025-03-12 13:52:04",
        "content": "2025-03-12 13:52:04\n Евгений Гусев -> 2071074234:\nКомпания: РСХБ-Интех\nЗп: 220k\nВакансия: нету, hr сама написала \nВопросы:\n1.Что происходит при вводе в адресную строку\n2.SOLID\n3. Разницы Throttle и Debounce\n4. Патерны проектирование\n5.Замыкание\n6. Как работа с формой\n7.Правила  работы с хуками\n8. Хуки для оптимизации\n9. Задача на рефакторинг компонента.",
        "full_content": "2025-03-12 13:52:04\n Евгений Гусев -> 2071074234:\nКомпания: РСХБ-Интех\nЗп: 220k\nВакансия: нету, hr сама написала \nВопросы:\n1.Что происходит при вводе в адресную строку\n2.SOLID\n3. Разницы Throttle и Debounce\n4. Патерны проектирование\n5.Замыкание\n6. Как работа с формой\n7.Правила  работы с хуками\n8. Хуки для оптимизации\n9. Задача на рефакторинг компонента."
      },
      {
        "timestamp": "2025-03-08 12:31:19",
        "content": "2025-03-08 12:31:19\n андрей -> 2071074234:\nКомпания: РСХБ ИНТЕХ\nНаписал HR\n\nСобеседующий больной гик, который будет душить и копать в глубину\n\n1. HTTP, HTTPS, запросы, из чего состоит запрос, как отличается запрос и ответ, как запрос понимает куда он отправляется, как отправить картинку 1гб.\n2. REST API - что это, чем отличается от других подходов, основные свойства rest(одни и тоже данные при запросе)\n3. Что шифруется в HTTPS\n4. CORS, пример CORS, CSRF, способ защиты от CSRF\n5. Разница версий п...",
        "full_content": "2025-03-08 12:31:19\n андрей -> 2071074234:\nКомпания: РСХБ ИНТЕХ\nНаписал HR\n\nСобеседующий больной гик, который будет душить и копать в глубину\n\n1. HTTP, HTTPS, запросы, из чего состоит запрос, как отличается запрос и ответ, как запрос понимает куда он отправляется, как отправить картинку 1гб.\n2. REST API - что это, чем отличается от других подходов, основные свойства rest(одни и тоже данные при запросе)\n3. Что шифруется в HTTPS\n4. CORS, пример CORS, CSRF, способ защиты от CSRF\n5. Разница версий протоколов HTTP, что такое мультиплексирование\n6. Что такое ECMA-script, как js может работать в разных средах \n7. Что добавили в ES6\n8. Типы данных, что такое Symbol\n9. Таблица приведения типов\n10. Области видимости, их отличие\n11. Всплытие\n12. Различие функций\n13. Контекст, когда присваивается контекст \n14. Как перебрать ключи объекта \n15. Замыкание, для чего используется\n16. Что такое асинхронный код, чем отличается от синхронного\n17. Зачем нужен Eventloop, как выделяется поток в браузере, как создать свой поток и общаться между ними\n18. Реактивный ли React?\n19. Что будет если вызвать несколько setState(num +1), как это исправить, почему это так работает\n20. Virtual DOM, как react сравнивает деревья, атрибут key, нужно ли везде прописывать key\n21. Props drilling на 100 000 уровней, как react оптимизирует и может выдать при такой нагрузке 60 fps и возможность взаимодействия с ui\n22. Без какого классового компонента не обойтись в функциональных, Error boundary\n23. Этапы Жизненного цикла, когда происходят рендеры в классах \n24. ShouldComponentUpdate, React.memo, логика сравнения пропсов\n25. Отличие useEffect от useLayoutEffect,\n26. Как оптимизировать приложение, с чего начать\n27. Зачем нужен стейт менеджер, почему не писать все на useContext, когда стоит переходить на стейт менеджеры\n28. Написать свой PromiseAll, будет ныть почему написал Promise.resolve(promise), а не promise.resolve(promise)\npromises.forEach((promise, index) => { Promise.resolve(promise)"
      },
      {
        "timestamp": "2024-11-11 21:42:18",
        "content": "2024-11-11 21:42:18\n 5429820319 -> 2071074234:\nПока ждал офера от Додо ткнул сюда\n\n- Компания: РСХБ-Интех \n- ЗП: сказали максимум 270\n- Вакансия: https://spb.hh.ru/vacancy/110389943\n- Вопросы:\nReconcilation в React (рассказать что и зачем)\nReact.memo/useMemo/Strict Mode\nПравила Хуков (то что нельзя их вызывать кондиционно)\nKey\nuseTransiton/defered value\nКакими стейт менеджерами пользовался/в сем их отличия (технически как устроены)\nЧто происходит после ввода адреса в строку браузера\nМетоды REST ...",
        "full_content": "2024-11-11 21:42:18\n 5429820319 -> 2071074234:\nПока ждал офера от Додо ткнул сюда\n\n- Компания: РСХБ-Интех \n- ЗП: сказали максимум 270\n- Вакансия: https://spb.hh.ru/vacancy/110389943\n- Вопросы:\nReconcilation в React (рассказать что и зачем)\nReact.memo/useMemo/Strict Mode\nПравила Хуков (то что нельзя их вызывать кондиционно)\nKey\nuseTransiton/defered value\nКакими стейт менеджерами пользовался/в сем их отличия (технически как устроены)\nЧто происходит после ввода адреса в строку браузера\nМетоды REST API\nРаботал ли с GraphQL\nКакие виды архитектур знаешь\nЧто делал на своем проекте\nКак проходило код ревью\nКак получал задачи\nЗачем вы их делали\nЗачем post mortem\n\nНИ ОДНОГО ВОПРОСА ПО JS\n\nСобес был странный, напомнило Иннотех \n\n- Успех: ✅"
      },
      {
        "timestamp": "2024-11-07 10:04:11",
        "content": "2024-11-07 10:04:11\n Артем -> 2071074234:\nКомпания: РСХБ-Интех\nЗП: не обсуждаласб\nВакансия: https://hh.ru/vacancy/109307308\n\nВопросы: \nEffector как работал\nдля чего Done\npromise все типы\nПравила хуков\nReact memo\nкак мемоизировать \nFCD(правила)\nПоказали компонент надо было заревьюить\nтипы данных\nпочему индекс нельзя юзать в key\ngit cherry-pick\nRest api\nможно ли в get передать body\nCambula\nКакие таски знаешь\nкакие используються на фронте\nгде схемы рисовал \nкакую версию использовал",
        "full_content": "2024-11-07 10:04:11\n Артем -> 2071074234:\nКомпания: РСХБ-Интех\nЗП: не обсуждаласб\nВакансия: https://hh.ru/vacancy/109307308\n\nВопросы: \nEffector как работал\nдля чего Done\npromise все типы\nПравила хуков\nReact memo\nкак мемоизировать \nFCD(правила)\nПоказали компонент надо было заревьюить\nтипы данных\nпочему индекс нельзя юзать в key\ngit cherry-pick\nRest api\nможно ли в get передать body\nCambula\nКакие таски знаешь\nкакие используються на фронте\nгде схемы рисовал \nкакую версию использовал"
      },
      {
        "timestamp": "2024-11-02 10:46:44",
        "content": "2024-11-02 10:46:44\n q q -> 2071074234:\nрсхб-интех\nзп от 170к\nвакансии нет",
        "full_content": "2024-11-02 10:46:44\n q q -> 2071074234:\nрсхб-интех\nзп от 170к\nвакансии нет"
      },
      {
        "timestamp": "2024-09-25 12:41:49",
        "content": "2024-09-25 12:41:49\n Ada500 -> 2071074234:\nРСХБ Интех\n- ЗП : от 200тыс.\n- Вакансия: hr написала\n- Вопросы :\n- что такое http\n- из чего состоит запрос\n- какие бывают области видимости\n- как можно объявить переменную\n- что такое event loop\n- что такое useMemo, useCallback, memo\n- расскажи о хуках\n-  redux в общем для чего\n- что нельзя делать в редакс\nзадачи две на батчинг и написание кастомного Promise.All\n// Написать свою имплементацию Promise.all, можно использовать все кроме самого promiseAll.\n...",
        "full_content": "2024-09-25 12:41:49\n Ada500 -> 2071074234:\nРСХБ Интех\n- ЗП : от 200тыс.\n- Вакансия: hr написала\n- Вопросы :\n- что такое http\n- из чего состоит запрос\n- какие бывают области видимости\n- как можно объявить переменную\n- что такое event loop\n- что такое useMemo, useCallback, memo\n- расскажи о хуках\n-  redux в общем для чего\n- что нельзя делать в редакс\nзадачи две на батчинг и написание кастомного Promise.All\n// Написать свою имплементацию Promise.all, можно использовать все кроме самого promiseAll.\n\nconst promiseAll = (promises) => {\nreturn new Promise((resolve, reject)=>{\n    const results=[]\n    let completedPromises=0\n    promises.forEach((promise, index)=>{\n        Promise.resolve(promise)\n        .then((result)=>{\n            results[index]=result\n            \n            completedPromises++\n            \n            if(completedPromises===promises.length){\n                resolve(results)\n            }\n        })\n        .catch((error)=>{\n            reject(error)\n        })\n    })\n})\n}\n\npromiseAll([]).then(results => ).catch();"
      },
      {
        "timestamp": "2024-06-07 16:23:14",
        "content": "2024-06-07 16:23:14\n Andrei Chirkov -> 2071074234:\nРСХБ-Интех\n- Вакансия: https://hh.ru/vacancy/99914239\n- ЗП: 250+\n- Успех собеса: Оффер на 264к\n- Комментарий: только половина видоса, чувак жесткий гик, спрашивает быстро и много без лайвкода\n- Видео: https://www.youtube.com/watch?v=TgAk-SGED_I",
        "full_content": "2024-06-07 16:23:14\n Andrei Chirkov -> 2071074234:\nРСХБ-Интех\n- Вакансия: https://hh.ru/vacancy/99914239\n- ЗП: 250+\n- Успех собеса: Оффер на 264к\n- Комментарий: только половина видоса, чувак жесткий гик, спрашивает быстро и много без лайвкода\n- Видео: https://www.youtube.com/watch?v=TgAk-SGED_I"
      },
      {
        "timestamp": "2024-05-22 10:30:35",
        "content": "2024-05-22 10:30:35\n Ярослав Мудрый -> 2071074234:\n- Название компании: РСХБ-Интех\n- вакансия: HR сам написал\n- успех: ?\n- зп: 300k+\n\nВопросы:\n- Что такое протокол http, разница между версиями http.\n- что такое rest.\n- что нового в ES5\n- отличия стрелочной и обычной функции\n- как перебрать ключи объекта\n- event loop, очередность вывода\n- обработка ошибок componentDidCatch\n- хуки в react\n- flux архитектура в redux\n- что нельзя делать внутри редюсера, что нельзя хранить в редакс \n- memo, useCallba...",
        "full_content": "2024-05-22 10:30:35\n Ярослав Мудрый -> 2071074234:\n- Название компании: РСХБ-Интех\n- вакансия: HR сам написал\n- успех: ?\n- зп: 300k+\n\nВопросы:\n- Что такое протокол http, разница между версиями http.\n- что такое rest.\n- что нового в ES5\n- отличия стрелочной и обычной функции\n- как перебрать ключи объекта\n- event loop, очередность вывода\n- обработка ошибок componentDidCatch\n- хуки в react\n- flux архитектура в redux\n- что нельзя делать внутри редюсера, что нельзя хранить в редакс \n- memo, useCallback, useMemo\n\nЗадачи:\nфункция должна выводить индексы элементов массива с интервалом 1 секунда, нельзя использовать setInterval\n\nasync function printIndicesWithDelay(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    console.log(i);\n  }\n}\n\n// Пример использования:\nconst array = ['a', 'b', 'c', 'd'];\nprintIndicesWithDelay(array);\n\nКастомный promiseAll\n\n    return new Promise((resolve, reject) => {\n        let results = new Array(promises.length);\n        let completed = 0;\n\n        promises.forEach((promise, index) => {\n            promise\n                .then((result) => {\n                    results[index] = result;\n                    completed++;\n\n                    if (completed === promises.length) {\n                        resolve(results);\n                    }\n                })\n                .catch((error) => {\n                    reject(error);\n                });\n        });\n    });\n};"
      }
    ]
  },
  {
    "company": "Wildberries",
    "count": 10,
    "records": [
      {
        "timestamp": "2025-06-19 08:18:08",
        "content": "2025-06-19 08:18:08\n Roman -> 2071074234:\nНазвание компании: Wildberries WB в инфраструктуру \nСсылка на вакансию: HR сама написала\nЗП: просил 400+\n\n1. О себе\n2. Почему использовали микрофронты?\n3. Можешь сравнить styled components и emotion? Рассказать плюсы и минусы?\n4. Что такое event loop и как он работает?\n5. Какие еще примеры макротасок знаешь, помимо setTimeout и setInterval?\n6. В какой момент в event loop происходит рендер?\n7. Какие минусы реакта?\n8. Минусы useContext?\n\n9.\n\nЕсли обновить ...",
        "full_content": "2025-06-19 08:18:08\n Roman -> 2071074234:\nНазвание компании: Wildberries WB в инфраструктуру \nСсылка на вакансию: HR сама написала\nЗП: просил 400+\n\n1. О себе\n2. Почему использовали микрофронты?\n3. Можешь сравнить styled components и emotion? Рассказать плюсы и минусы?\n4. Что такое event loop и как он работает?\n5. Какие еще примеры макротасок знаешь, помимо setTimeout и setInterval?\n6. В какой момент в event loop происходит рендер?\n7. Какие минусы реакта?\n8. Минусы useContext?\n\n9.\n\nЕсли обновить tasks, то обновится ли ComponentB \n\n// ComponentA\nconst { tasks } = useContext(MyContext)\n\n// ComponentB\nconst { settings } = useContext(MyContext)\n\n\n10. Проект очень маленький, всего несколько состояний. Коллега предлагает все состояния поместить в один контекст, обернем контекстом наше приложение и будем доставать состояние, там где нам нужно. Ты бы одобрил такое решение?\n11. Если контекст будет пагубно влиять на приложение, будут лишние рендеры, будет лагать, чтобы ты сделал?\n12. Примеры легковесных стейт менеджеров?\n13. Расскажи про useEffect, как он работает?\n\n14.\n\nuseEffect(() => {\n   console.log('effect')\n\n   return () => console.log('unsub')\n}, [])\n\n// 1. произошло монтирование\n// 2. произошло размонтирование\n\nЧто выведет в консоли?\n\n\n15. \n\nuseEffect(() => {\n   console.log('effect')\n\n   return () => console.log('unsub')\n}, [abc])\n\n// 1. произошло монтирование, состояние abc = 1\n// 2. состояние abc изменилось на 5\n// 3. произошло размонтирование\n\nЧто выведет в консоли?\n\n\n16. Как ты понимаешь, что функцию нужно оборачивать в useCallback?\n\n17. \n\nнужно ли оборачивать функцию onClick в useCallback?\n\nconst Button = ({ onClick }) => <button onClick={onClick} >btn</button>\n\n\n18. Как ты понимаешь, что нужно что-то обернуть в useMemo?\n\n19.\n\nНужно ли filters оборачивать в useMemo?\n\nconst Content = ({ onChangeFilters }) => {\n  const page = useSelector(selectPage)\n  const filters = { page }\n  \n  useEffect(() => {\n    onChangeFilters(filters)\n  }, [filters, onChangeFilters])\n  \n  return null\n}\n\n\n20. \n\nНужно в этом коде правильно применить useMemo, useCallback, может memo\n\nconst Button = ({onClick, onInit}) => {\n  \n  return <button onClick={onClick}>btn</button>\n}\n\nconst Content = () => {\n  \n  const [count, setCount] = useState(0)\n  \n  const handleClick = () => {\n    setCount((prev) => prev + 1)\n  }\n  \n  const handleInit = () => {\n    setCount((prev) => prev - 1)\n  }\n  return <Button onClick={handleClick} onInit={handleInit}/>\n};\n\n\n21. Когда компонент нужно обернуть в memo?\n22. Как при помощи js отправить 20 файлов на сервер. 1 запрос отсылает 1 файл. Как отправить на сервер 20 файлов, сделав 20 запросов?\n23. Хотим отобразить на экране какие файлы не отправились (например, 1, 3 и 7 файл), как это сделать?\n24. Есть таблица, есть запрос на получение пользователей, он возвращает 2к пользователей. Нужно рендерить этих пользователей в таблице. Задача оптимизировать, чтобы работало хорошо и без пролагиваний. Предложи несколько вариантов решения данной проблемы.\n25. Знаешь, как работает виртуализация?\n26. Есть колокольчик в хедере, рядом кружочек красный с цифрой - количество сообщений. Как реализовать реалтайм для циферки?\n\n27. Напиши Promise.all\n\n\nall([\n  1,\n  Promise.resolve(2),\n  new Promise((resolve) => setTimeout(() => resolve(3), 2000)),\n]).then((res) => {\n  console.log('res', res) // [1, 2, 3]\n})\n\nall([\n  Promise.resolve(1),\n  Promise.resolve(2),\n  new Promise((_, reject) => setTimeout(() => reject(3), 2000)),\n]).catch((err) => {\n  console.log('err', err) // 3\n})\n\nfunction all() {\n  \n}\n\n\n28. Как ты будешь работать с формами и валидацией? Какие библиотеки используешь?\n29. Сравни react-hook-form и formik"
      },
      {
        "timestamp": "2025-06-10 14:26:47",
        "content": "2025-06-10 14:26:47\n Антон -> 2071074234:\nwildberries техничка\nвакансия: hr написала\n\nсначала долго расспрашивал по легенде. кто ставил задачи, какие процессы внутри спринта, с кем взаимодействовал(как взаимодействовал). \nПрошлись по проектам, где какой стек, какие задачи решал. чуть копнул внутрь фичей. \n\nзадачки: \n\n// console.log(1);\n// setTimeout(() => console.log(2));\n// Promise.resolve().then(() => console.log(3));\n// Promise.resolve().then(() => setTimeout(() => console.log(4)));\n// Promis...",
        "full_content": "2025-06-10 14:26:47\n Антон -> 2071074234:\nwildberries техничка\nвакансия: hr написала\n\nсначала долго расспрашивал по легенде. кто ставил задачи, какие процессы внутри спринта, с кем взаимодействовал(как взаимодействовал). \nПрошлись по проектам, где какой стек, какие задачи решал. чуть копнул внутрь фичей. \n\nзадачки: \n\n// console.log(1);\n// setTimeout(() => console.log(2));\n// Promise.resolve().then(() => console.log(3));\n// Promise.resolve().then(() => setTimeout(() => console.log(4)));\n// Promise.resolve().then(() => console.log(5));\n// setTimeout(() => console.log(6));\n// console.log(7);\n// Promise.resolve().then(console.log('123'))\n// async function wait() {\n//   console.log(8)\n//   let prom = await new Promise(resolve => {\n//     console.log(9)\n//     setTimeout(resolve, 1000)\n//   });\n// }\n// wait()\nОтвет:\n// 1 7 '123' 8 9 3 5 2 6 4\n\n2) написать функцию по удалению дупликатов из массива(два решения)\n\n// const removeDuplicates = (arr) => {\n//     return [...new Set(arr)]\n// }\n\nconst removeDuplicates = (arr) => {\n    return arr.filter((item, index) => arr.indexOf(item) === index)\n}\n\n3) рефактор\n\nimport { useCallback, useState } from \"react\";\n\nimport { Api } from \"../utils/Api\";\n\n/*\n  Легенда:\n  Необходимо отобразить список ключей (произвольные строки), запрашиваемый с бэкенда.\n  При нажатии кнопки \"Сгенерировать ключ\" необходимо сгенерировать новый ключ (апи запрос) и отобразить его в списке.\n  Каждый ключ можно использовать. В таком случае он должен изменить свое визуальное отображение и увеличить счетчик использованных ключей.\n  Каждый ключ можно удалить. При удалении использованного ключа, счетчик использованных ключей уменьшается (счетчику важны только неудаленные использованные ключи)\n  Для поддержания актуального списка ключей необходимо обновлять список каждые 30 секунд. При получении от апи новых ключей считать их неиспользованными\n */\n\nexport function App() {\n    const [keys, setKeys] = useState(null);\n    const [isKeysRequested, setIsKeysRequested] = useState(false);\n\n    const [isLoading, setLoadingState] = useState(false);\n const [countUsedKeys, setCountUsedKeys] = useState(0);\n\n    const toggleLoading = useCallback(() => {\n        setLoadingState(!isLoading);\n    }, [isLoading]);\n\n    const incrementUsedKeys = () => {\n        setCountUsedKeys((prevValue) => prevValue++);\n    }\n\n    const decrementUsedKeys = useCallback(() => {\n        setCountUsedKeys((prevValue) => prevValue--);\n    }, []);\n\n    const addKey = useCallback(async () => {\n        toggleLoading();\n\n        const key = await Api.generateKey();\n        setKeys((prevKeys) => prevKeys.push(key));\n\n        toggleLoading();\n    }, [toggleLoading]);\n\n    const removeKey = useCallback((value) => {\n        setKeys((prevKeys) => prevKeys.filter((key) => key !== value));\n    }, []);\n\n    if (!isKeysRequested) {\n        setIsKeysRequested(true);\n        Api.loadKeys().then((response) => {\n            setKeys(response);\n            setInterval(() => {\n                Api.loadKeys().then((response) => {\n                    setKeys(response);\n                })\n            }, 30000);\n        }).catch(e => {\n            setIsKeysRequested(false);\n        })\n    }\n\n    return (\n        <main>\n            <div>\n                <h3>Всего ключей: {keys.length}</h3>\n                <h3>Использовано текущих ключей: {countUsedKeys}</h3>\n            </div>\n\n            {!keys.length && <div>Список ключей пуст</div>}\n\n            {keys.length && (\n                <div className=\"keys\">\n                    {keys.map((key) => (\n                        <Key\n                            value={key}\n                            removeKey={removeKey(key)}\n                            decrementUsedKeys={decrementUsedKeys}\n                            incrementUsedKeys={incrementUsedKeys}\n                        />\n                    ))}\n                </div>\n            )}\n\n            <div>\n                <Button\n                    onClick={addKey}\n                    isLoading={isLoading}\n                    label=\"Сгенерировать ключ\"\n                />\n            </div>\n        </main>\n    );\n};"
      },
      {
        "timestamp": "2025-02-26 13:32:28",
        "content": "2025-02-26 13:32:28\n Адам -> 2071074234:\nКомпания: WB wildberries\nВакансия: https://career.wb.ru/vacancies/13605\n\nВопросы:\ncss: единицы измерения\nКакие есть свойства position\nзадача про флаг и css как тут (6)  https://t.me/c/2071074234/489/106399\nдальше были эти задачи https://trycode.pw/c/GWR6A\nи ревью вот этого кода в github https://trycode.pw/c/EEW0A",
        "full_content": "2025-02-26 13:32:28\n Адам -> 2071074234:\nКомпания: WB wildberries\nВакансия: https://career.wb.ru/vacancies/13605\n\nВопросы:\ncss: единицы измерения\nКакие есть свойства position\nзадача про флаг и css как тут (6)  https://t.me/c/2071074234/489/106399\nдальше были эти задачи https://trycode.pw/c/GWR6A\nи ревью вот этого кода в github https://trycode.pw/c/EEW0A"
      },
      {
        "timestamp": "2025-02-26 11:02:03",
        "content": "2025-02-26 11:02:03\n Ilya -> 2071074234:\nКомпания: Wildberries\nЗП: 250\nВакансия: hr написала \n\nВопросы:\n1) какая команда, какой стек был, был ли опыт с е2е тестами\n\nЗадачи:\n\nВсе как отсюда\nhttps://trycode.pw/c/48NZJ",
        "full_content": "2025-02-26 11:02:03\n Ilya -> 2071074234:\nКомпания: Wildberries\nЗП: 250\nВакансия: hr написала \n\nВопросы:\n1) какая команда, какой стек был, был ли опыт с е2е тестами\n\nЗадачи:\n\nВсе как отсюда\nhttps://trycode.pw/c/48NZJ"
      },
      {
        "timestamp": "2025-02-13 12:42:37",
        "content": "2025-02-13 12:42:37\n Timofei Syromiatnikov -> 2071074234:\n— Компания: wb wildberries\n— Вакансия: https://career.wb.ru/vacancies/13605\n— ЗП: 250-300к сказал, ищут middle-senior\n\n— Вопросы:\n1) Расскажи мазками где работал, чем занимался, про свои задачи, про команду.\n2) Как проводи ревью, кто проводил, расскажи весь флоу, по какому принципу проводился ревью, на что обращалось внимание при ревью.\n\n—Задачи:\n1) \n// Сделай такой функционал, чтобы у строки можно было вызвать функция, передать число в н...",
        "full_content": "2025-02-13 12:42:37\n Timofei Syromiatnikov -> 2071074234:\n— Компания: wb wildberries\n— Вакансия: https://career.wb.ru/vacancies/13605\n— ЗП: 250-300к сказал, ищут middle-senior\n\n— Вопросы:\n1) Расскажи мазками где работал, чем занимался, про свои задачи, про команду.\n2) Как проводи ревью, кто проводил, расскажи весь флоу, по какому принципу проводился ревью, на что обращалось внимание при ревью.\n\n—Задачи:\n1) \n// Сделай такой функционал, чтобы у строки можно было вызвать функция, передать число в неё, и она возвращала дублированное значение строки равное числу которое получила функция.\nconst str = '123';\n// str.repeatify(3) // 123123123\n\n//Моё решение\nString.prototype.repeatify = function(count) {\n    let result = ''\n    \n    for (i = 0; i < count; i++) {\n        result += this\n    }\n    \n    return result\n}\n\n// console.log(str.repeatify(3))\n2) \n// Найти числа, которые повторяются столько же раз, сколько их номинал\n// '44442733366666' => [3 ,4]\n\n// Моё решение\nfunction findNumbers2(num)  {\n    const obj = {}\n    const result = []\n    \n    for(let i = 0; i < num.length; i++) {\n        const value = Number(num[i])\n        \n        if (obj[value]) {\n            obj[value] += 1\n        \n        } else {\n            obj[value] = 1\n        }\n    }\n    \n    for(key in obj) {\n        const value = obj[key]\n        \n        if (Number(key) === value) {\n            result.push(key)\n        }\n    }\n    \n    return result\n}\n\n// console.log(findNumbers2('44442733366666'));\n3) \n// Event Loop\nconst myPromise = Promise.resolve(Promise.resolve('Promise!'));\n\nfunction funcOne() {\n  myPromise.then(res => res).then(res => console.log(res));\n  setTimeout(() => console.log('Timeout!', 0));\n  console.log('Last line!');\n}\n\nasync function funcTwo() {\n  const res = await myPromise;\n  console.log(await res);\n  setTimeout(() => console.log('Timeout!', 0));\n  console.log('Last line!');\n}\n\nfuncOne();\nfuncTwo();\n4) \n// Что выведет в консоль лог и почему\nconst [count, setCount] = useState(0);\nconst updateState = () => {\n  setCount(prev => prev+1);\n  setCount(prev => prev+1);\n  setCount(prev => prev+1);\n  console.log(count);\n}\n\n5) \n// Отрефактори код\nimport React, { useState } from 'react';\n\nconst Button =  ({ onClick }) => {\n  console.log(\"button render\");\n  return (\n    <button onClick={onClick}>\n      \"Click me\"\n    </button>\n  );\n}\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n  const updateState = () => {\n    setCount(value => value + 1);\n  }\n\n  return (\n    <div>\n     <button onClick={updateState}>increase count</button>\n     \n     <Button onClick={ () => {\n    console.log(\"button click\")\n  }} />\n    </div>\n  );\n}\n\n6) Задача на CSS, есть картинка сверху и превью снизу, надо только с помощью css выстроить похожее превью как на картинке. При этом изменять html нельзя.\nhttps://codepen.io/timur-eit/pen/yLWoPmM\n\n7) Провести ревью кода, на собесе интервьер попросит оставлять комменты на гитхабе, как при ревью.\nhttps://codesandbox.io/p/sandbox/wx3kwx"
      },
      {
        "timestamp": "2024-11-26 15:44:36",
        "content": "2024-11-26 15:44:36\n sabrenda -> 2071074234:\nКомпания: Wildberries\nВакансия: https://spb.hh.ru/vacancy/111162291?hhtmFrom=vacancies\nЗп: 250к\n\nТочно такой же собес как тут https://t.me/c/2071074234/489/80356\n\nВопросы:\n\n-Html/css\nкак работает: Flex-grow, flex 1 0 0\nКак достать ссылку href у <a> и вывести в консоли\nEvent события\n\n-Js\nКак работает, привести примеры с разработки\ne.stopPropagation()\ne.preventDefault()\n\n-React\nReact и React Dom чем отличаются\nuseMemo, useCallback, Memo - как работают\nu...",
        "full_content": "2024-11-26 15:44:36\n sabrenda -> 2071074234:\nКомпания: Wildberries\nВакансия: https://spb.hh.ru/vacancy/111162291?hhtmFrom=vacancies\nЗп: 250к\n\nТочно такой же собес как тут https://t.me/c/2071074234/489/80356\n\nВопросы:\n\n-Html/css\nкак работает: Flex-grow, flex 1 0 0\nКак достать ссылку href у <a> и вывести в консоли\nEvent события\n\n-Js\nКак работает, привести примеры с разработки\ne.stopPropagation()\ne.preventDefault()\n\n-React\nReact и React Dom чем отличаются\nuseMemo, useCallback, Memo - как работают\nuseEffect\n\nКодили только с React, на ссылке в видео такой же код был\n\nСоветую еще доку по React почитать, спрашивал про работу и в целом смотрел на понимание работы react"
      },
      {
        "timestamp": "2024-10-30 16:01:40",
        "content": "2024-10-30 16:01:40\n Artyom Sozykin -> 2071074234:\nWildberries\nЗП: 250к\nВакансия: https://hh.ru/vacancy/108119183",
        "full_content": "2024-10-30 16:01:40\n Artyom Sozykin -> 2071074234:\nWildberries\nЗП: 250к\nВакансия: https://hh.ru/vacancy/108119183"
      },
      {
        "timestamp": "2024-07-17 07:53:58",
        "content": "2024-07-17 07:53:58\n )( -> 2071074234:\nкомпания: wb(wildberries)\nзп: 200+\nвакансия: hr сам написал\n\nвопросы:\nочень много и глубоко спрашивают про вебпак, докер и ci/cd в принципе, хотят простых ответов без размышлений\nвопросы на подобии: основные сущности в вебпак, как передать динамически env во время сборки в докер и тд\n\n\nвсе теоретические вопросы по задачам, прям отдельных вопросов не было  \n\nбаза задач из https://gist.github.com/bakunovdo/9f09a785f9b0939fa5702141488b1f52\n(ссылка взята из ом,...",
        "full_content": "2024-07-17 07:53:58\n )( -> 2071074234:\nкомпания: wb(wildberries)\nзп: 200+\nвакансия: hr сам написал\n\nвопросы:\nочень много и глубоко спрашивают про вебпак, докер и ci/cd в принципе, хотят простых ответов без размышлений\nвопросы на подобии: основные сущности в вебпак, как передать динамически env во время сборки в докер и тд\n\n\nвсе теоретические вопросы по задачам, прям отдельных вопросов не было  \n\nбаза задач из https://gist.github.com/bakunovdo/9f09a785f9b0939fa5702141488b1f52\n(ссылка взята из ом, 70% задач были такие же + алгоритмическая )\n\nбыла еще задача на алгоритмы, не сохранилась, так как просто озвучили и не было возможности сделать скрин условия"
      },
      {
        "timestamp": "2024-05-28 17:09:17",
        "content": "2024-05-28 17:09:17\n Tonidevs -> 2071074234:\nНазвание компании: WB wildberries  #wildberries \n- вакансия: hr написала \n- зп: прошу от 260к\n- успех: ❓\n- задачи:\n— ЧАСТЬ задач БЫЛА отсюда: \nhttps://t.me/c/2071074234/489/21217\n— и вот одна\n // [2, 7, 11, 19], 18 => [7, 11]\n // [1, 2, 3, 4, 6, 8, 9], 5 => [[1, 4], [2, 3]]\n\n// function serchNum(arr, targetNum) {\n//     const numDi = {}\n    \n//     const result = []\n    \n//     for(let i = 0; i < arr.length; i++ ) {\n        \n//         const num = arr...",
        "full_content": "2024-05-28 17:09:17\n Tonidevs -> 2071074234:\nНазвание компании: WB wildberries  #wildberries \n- вакансия: hr написала \n- зп: прошу от 260к\n- успех: ❓\n- задачи:\n— ЧАСТЬ задач БЫЛА отсюда: \nhttps://t.me/c/2071074234/489/21217\n— и вот одна\n // [2, 7, 11, 19], 18 => [7, 11]\n // [1, 2, 3, 4, 6, 8, 9], 5 => [[1, 4], [2, 3]]\n\n// function serchNum(arr, targetNum) {\n//     const numDi = {}\n    \n//     const result = []\n    \n//     for(let i = 0; i < arr.length; i++ ) {\n        \n//         const num = arr[i]\n         \n//         const comp = targetNum - num;\n        \n        \n//         if(numDi[comp] !== undefined) {\n//             result.push([comp, num])\n//         }\n//         numDi[num] = i\n//     }\n    \n//     return result\n// }\n\n\n// console.log(serchNum([1, 2, 3, 4, 6, 8, 9], 5))\n- вопросы:\nEvent Loop - Как работает \nService Worker  - что такое\nRedux Saga - отличия от Toolkit\nСложность алгоритма - как считается"
      },
      {
        "timestamp": "2024-05-24 06:37:36",
        "content": "2024-05-24 06:37:36\n Александр Птицын -> 2071074234:\nНазвание компании: WB #wildberries \n- зп: от 350к на руки\n- вакансия: сами написали\n- успех: ❌ (фидбек неадекватный, сказал что пришлось много подсказывать по задачам, хотя подсказывал уж точно не он =) )\n\nВсе задачи закинул сюда:\nhttps://trycode.pw/c/48NZJ",
        "full_content": "2024-05-24 06:37:36\n Александр Птицын -> 2071074234:\nНазвание компании: WB #wildberries \n- зп: от 350к на руки\n- вакансия: сами написали\n- успех: ❌ (фидбек неадекватный, сказал что пришлось много подсказывать по задачам, хотя подсказывал уж точно не он =) )\n\nВсе задачи закинул сюда:\nhttps://trycode.pw/c/48NZJ"
      }
    ]
  },
  {
    "company": "Bell Integrator",
    "count": 8,
    "records": [
      {
        "timestamp": "2025-07-16 16:47:40",
        "content": "2025-07-16 16:47:40\n Роман -> 2071074234:\nКомпания: Bell integrator(Сбер)\nВопросы:\n-Рассказать о проекте \n-Какой был состав команды\n-Как проводили код-ревью\n-На какой грейд себя оцениваешь\n-Почему увольняешься\n-Методы копирования объектов\nЗадачки:\nЧто выведет в консоль:\nconst a = { prop1: { prop2: \"test2\" } };\nconst b = { ...a };\na.prop1.prop2 = \"test3\";\nconsole.log(b.prop1.prop2); // Выведет: \"test3\"\nlet firstObj = { name: 'Hello' };\n\nlet secondObj = firstObj;\n\nfirstObj = { name: 'Bye' };\n\ncons...",
        "full_content": "2025-07-16 16:47:40\n Роман -> 2071074234:\nКомпания: Bell integrator(Сбер)\nВопросы:\n-Рассказать о проекте \n-Какой был состав команды\n-Как проводили код-ревью\n-На какой грейд себя оцениваешь\n-Почему увольняешься\n-Методы копирования объектов\nЗадачки:\nЧто выведет в консоль:\nconst a = { prop1: { prop2: \"test2\" } };\nconst b = { ...a };\na.prop1.prop2 = \"test3\";\nconsole.log(b.prop1.prop2); // Выведет: \"test3\"\nlet firstObj = { name: 'Hello' };\n\nlet secondObj = firstObj;\n\nfirstObj = { name: 'Bye' };\n\nconsole.log(secondObj.name); // Выведет: 'Hello'\nsetTimeout(() => console.log(1), 0);\n\nnew Promise((resolve) => {\n    console.log(2);\n    resolve(3);\n})\n    .then((res) => console.log(res)) \n    .then((res) => {\n        setTimeout(() => {\n            console.log(res); \n        }, 0);\n    })\n    .then(() => {\n        throw new Error(\"error\"); // \n        console.log(5); \n    })\n    .catch(() => console.log(6)) \n    .then(() => console.log(7)) \n    .finally(() => console.log(8)); \n\nconsole.log(9);\n\n//2 9 3 6 7 8 1 undefined\nНаписать тип someName и написать наиболее оптимальную проверку\ntype ID = string;\n\ninterface Picture {\n    size: number;\n    name: string;\n}\n\ninterface Props {\n    pictures: Record<ID, Picture>;\n    id: string;\n}\n\nconst someName:... = ({ pictures, id }) => Object.entries(pictures)\n        .find(picture => picture[0] === id) !== undefined;\n    \n    return <>{/* ... */}</>;\n};\n\n// const hasPicture: boolean = pictures.hasOwnProperty(id) (Попросил правильно обозвать переменную)\nНаписать функцию reverseString, без использования arr.reverse\nfunction reverseString(str) {\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n}\nНу и дописать реверс для предложения\nfunction reverseWords(sentence) {\n    return sentence.split(' ').map(word => reverseString(word)).join(' ');\n}"
      },
      {
        "timestamp": "2025-07-04 19:34:23",
        "content": "2025-07-04 19:34:23\n Роман -> 2071074234:\nКомпания: Bell Integrator (TELE2)\nЗП: 200-220\nВопросов по опыту не было как и лайвкодинга, сразу перешли к тех.вопросам.\n\nWeb: \n-Расскажи про DNS/DNS-Resolving\n-Что такое TCP и IP, как работают, чем отличаются\n-Что такое HTTP keep-alive\n-Что такое CDN\n-Что такое CORS, как обрабатываются сложные запросы (preflight-запросы)\n-Отличия cookie/localStorage/sessionStorage, когда используются\n\nHTML/CSS:\n-Что такое preload и prefetch, для чего нужны\n-Отличия asyn...",
        "full_content": "2025-07-04 19:34:23\n Роман -> 2071074234:\nКомпания: Bell Integrator (TELE2)\nЗП: 200-220\nВопросов по опыту не было как и лайвкодинга, сразу перешли к тех.вопросам.\n\nWeb: \n-Расскажи про DNS/DNS-Resolving\n-Что такое TCP и IP, как работают, чем отличаются\n-Что такое HTTP keep-alive\n-Что такое CDN\n-Что такое CORS, как обрабатываются сложные запросы (preflight-запросы)\n-Отличия cookie/localStorage/sessionStorage, когда используются\n\nHTML/CSS:\n-Что такое preload и prefetch, для чего нужны\n-Отличия async и defer\n-Что такое CSP, для чего нужно\n-Рассказать про aria и data-* атрибуты\n-Зачем использовать семантическую верстку. Назвать теги семантической верстки\n-Рассказать про тег picture, как использовать. \n-Специфичность селекторов. \n-Отличия вьюпортовых единиц от процентов. \n-Псевдоклассы и псевдоэлементы. Что такое, чем отличаются. \n-Разница focus и active\n-Разница :nth-child и :nth-of-type \n-Значения свойства display: , назвать отличия.Как влияет padding у инлайна и инлайн блока\n-Рассказать про box-sizing\n-Какой процесс анимации более ресурсоемкий. Transform: || Position: absolute\n\nTS:\n-Особенности TS. Зачем нужен. Плюсы и минусы.\n-Какие utility types знаешь\n-Что такое Generics\n-Отличия type от interface\n-Назвать собственные типы у TypeScript'a\n\nJS:\n-Разница var, let, const. Какое отличие в производительности. \n-Рассказать про метод Object.freeze\n-Отличия Promise.all и Promise.allSettled\n-Какая разница между Object.create() и new Constructor\n-Что такое Symbol и зачем он нужен. \n-Функции генераторы. Где могут быть полезны\n-Что такое BigInt и когда может потребоваться. \n-Отличия Map и WeekMap\n-Как реализовать асинхронную функцию sleep() без setTimeout\n-Чем может быть опасен new Function\n-Как бы реализовал мемоизирующую функцию\n\nReact:\n-Перечислить хуки реакта\n-Разница между useEffect и useLayoutEffect\n-Рассказать про React.forwardRef \n-Как работает React.memo, когда может быть бесполезен\n-Когда лучше использовать апи Context, а когда прибегать к стейт-менеджерам\n-Какая разница между контролируемыми и неконтролируемыми компонентами\n-Рассказать про key в реакте. Почему важны\n-Рассказать как бы реализовал хук useDebounce \n-Что такое Portal в реакт. Когда использовать\n-Что такое Suspense"
      },
      {
        "timestamp": "2025-05-26 18:27:44",
        "content": "2025-05-26 18:27:44\n Никита -> 2071074234:\nBell Integrator \nПроект Сбера - SberJazz\nHr написала\nЗП: от 200\n\nВопросы:\nСпрашивает про опыт, технологии, можно хорошо поболтать с ним, чилловый\nЗнаком ли с WebRTC?\n\nЗадачи:\n\nУСЛОВИЕ\n// Нужно написать функцию stringJoin, которая склеивает строки через разделитель\nfunction stringJoin() {\n    ...//-код\n}\nstringJoin('  *  ', '1', '5', '7'); // вернет '1 * 5 * 7'\nstringJoin('_', 'snake', 'case', 'text'); // вернет 'snake_case_text'\nРЕШЕНИЕ\nfunction stringJ...",
        "full_content": "2025-05-26 18:27:44\n Никита -> 2071074234:\nBell Integrator \nПроект Сбера - SberJazz\nHr написала\nЗП: от 200\n\nВопросы:\nСпрашивает про опыт, технологии, можно хорошо поболтать с ним, чилловый\nЗнаком ли с WebRTC?\n\nЗадачи:\n\nУСЛОВИЕ\n// Нужно написать функцию stringJoin, которая склеивает строки через разделитель\nfunction stringJoin() {\n    ...//-код\n}\nstringJoin('  *  ', '1', '5', '7'); // вернет '1 * 5 * 7'\nstringJoin('_', 'snake', 'case', 'text'); // вернет 'snake_case_text'\nРЕШЕНИЕ\nfunction stringJoin(separator, ...args) {\n    return args.join(separator)\n}\nА теперь можешь написать решение используя ES5, или даже ES3 (🤨)\nЭто ES5:\nfunction stringJoinESS(separator){\n    var strings = []\n    for (var i = 1; i < arguments.length; i++){\n        strings[i - 1] = arguments[i]\n    }\n    return strings.join(separator) \n}\n\nУСЛОВИЕ\n// Написать декоратор для функции, который ограничивает число вызовов.\n// callLimit(fn, count[, callback]), принимает следующие аргументы:\n// fn - функция, которую декормруем;\n// count - максимальное число вызовов;\n// callback - вызывается, когда совершен последний вызов. Опционально.\n// У вызываемой функции должен быть метод для перезагрузки таймера в начальное положение.\n// Пример:\n...\nfunction callLimit(fn, count, callback) {\n    ...//...код\n}\n\n...\nfunction log(title, message) {\n    ...console.log(title + ':' + message);\n}\n\n...\nconst logLimited = callLimit(log, 3);\nlogLimited('title', 'desc'); // 'title: desc'\nlogLimited('title2', 'desc'); // 'title2: desc'\nlogLimited('title3', 'desc'); // 'title3: desc'\nlogLimited('title4', 'desc'); // Этот не сработает\n...\n\nlogLimited.reset(); // Перезагрузили таймер\n// Можно еще 3 раза вызвать\nlogLimited('title5', 'desc'); // 'title5: desc'\nlogLimited('title6', 'desc'); // 'title6: desc'\nlogLimited('title7', 'desc'); // 'title7: desc'\n...\n\nvar logLimited2 = callLimit(log, 2, () => console.log('finish'));\nlogLimited2('foo', 'bar'); // 'foo: bar'\nlogLimited2('foo2', 'bar'); // 'foo2: bar'\n//'finish'\n\nРЕШЕНИЕ\nfunction callLimit(fn, count, callback) {\n    let limit = 0;\n\n    function logLimited(...args) {\n        if (limit >= count) return;\n\n        limit++;\n\n        fn.apply(this, args);\n\n        if (limit === count && callback) {\n            callback();\n        }\n    }\n\n    logLimited.reset = function () {\n        limit = 0;\n    };\n\n    return logLimited;\n}"
      },
      {
        "timestamp": "2025-04-09 15:21:01",
        "content": "2025-04-09 15:21:01\n Равиль Васильев -> 2071074234:\nBell integrator\n\nЗП - до 230 на руки\n\n📢 Вакансия -hr написала\n\n🎥 Запись собеса - https://www.youtube.com/watch?v=RDtJWe8PM5o",
        "full_content": "2025-04-09 15:21:01\n Равиль Васильев -> 2071074234:\nBell integrator\n\nЗП - до 230 на руки\n\n📢 Вакансия -hr написала\n\n🎥 Запись собеса - https://www.youtube.com/watch?v=RDtJWe8PM5o"
      },
      {
        "timestamp": "2025-01-31 16:00:34",
        "content": "2025-01-31 16:00:34\n Ivan -> 2071074234:\nКомпания : Bell integrator\nЗП: 200\nМного вопросов совпадают с этим собеседованием - https://t.me/c/2071074234/489/86370\nСпрашивали про опыт \nИнтересные задачи \nМикрофронтенд \nЧто сделать чтобы переменная внутри функции была недоступна к изменению (область видимости let или IIFE)\n var a = 10\n   function foo() {\n   a = 5\n  }\nApply call bind\nЗамыкание \nconsole.log('' || {} )\nconsole.log('' ?? {} )\nЧто такое каррирование?\n  function foo(a) {\n   console.log(b)...",
        "full_content": "2025-01-31 16:00:34\n Ivan -> 2071074234:\nКомпания : Bell integrator\nЗП: 200\nМного вопросов совпадают с этим собеседованием - https://t.me/c/2071074234/489/86370\nСпрашивали про опыт \nИнтересные задачи \nМикрофронтенд \nЧто сделать чтобы переменная внутри функции была недоступна к изменению (область видимости let или IIFE)\n var a = 10\n   function foo() {\n   a = 5\n  }\nApply call bind\nЗамыкание \nconsole.log('' || {} )\nconsole.log('' ?? {} )\nЧто такое каррирование?\n  function foo(a) {\n   console.log(b)\n       return  {\n           foo: (b) => foo(b)\n   }\n  }\n   foo(1).foo(2).foo(3).foo(4)\n  <Component func={this.foo}/>\n  <Component func={() => this.foo()}/>\nВ чем разница эти компонентов и как лучше делать?\nimport {style} from './style.less' (почему будет ругаться ts)\nКак типизировать ошибку \nРассказать про хуки \nUseeffect vs Uselayouteffect \nAbortcontroller\nThis в js\nКакие функции бывают и их отличия \nSuspense в реакт \nПорталы в реакт(createPortal)\nReact thunk\nTreeshaking \n\nЗадача:\nДан Enum \nДан generic нужно дописать \nenum EState { ONE = 'ONE', TWO = 'TWO', THREE = 'THREE' };\n\ninterface IProps<V extends Record<EState, number>> extends ICommonProps {\n    value: V;\n}\n\nconst props: IProps<Record<EState, number>> = { // Заменили string на Record<EState, number>\n    value: { // Y заменяется на объект с ключами из EState и числами\n        [EState.ONE]: 1,\n        [EState.TWO]: 2,\n        [EState.THREE]: 3\n    }\n};"
      },
      {
        "timestamp": "2024-11-19 19:29:57",
        "content": "2024-11-19 19:29:57\n Гладких Александр -> 2071074234:\nКомпания Сбер Bell Integrator 2 этап \nОбщение с менеджерами\nВакансия hr написала\nЗП: от 200\nВопросы\n- Расскажи о своем опыте \n- Причины ухода\n- как пришел во фронтенд как выбирал стэк какой учить\n- был ли опыты в бэкенде\n- был ли опыт настройки пайплайна\n- Потом был рассказ о своем продукте\n- готов ли поработать с CI-CD c релизами",
        "full_content": "2024-11-19 19:29:57\n Гладких Александр -> 2071074234:\nКомпания Сбер Bell Integrator 2 этап \nОбщение с менеджерами\nВакансия hr написала\nЗП: от 200\nВопросы\n- Расскажи о своем опыте \n- Причины ухода\n- как пришел во фронтенд как выбирал стэк какой учить\n- был ли опыты в бэкенде\n- был ли опыт настройки пайплайна\n- Потом был рассказ о своем продукте\n- готов ли поработать с CI-CD c релизами"
      },
      {
        "timestamp": "2024-11-14 19:26:49",
        "content": "2024-11-14 19:26:49\n Гладких Александр -> 2071074234:\nСбер (Bell Integrator)\n Вакансия: hr сама написала\n Вопросы \n  - Расскажи про свой опыт в кратце\n  - Проекты команды как взаимодействовали\n  \n  - Задачи\n  \n  var a = 10\n   function foo() {\n   a = 5\n  }\nНазови все способы сделать перменную а недоступной для изменений\n \n  console.log('' || {})\n  console.log('' ?? {})\n  \n  Что такое ?? и что будет в консоли\n  \n  console.log(this.user.name)\n  \n  что будет в консоли \n  как сделать чтобы был undefi...",
        "full_content": "2024-11-14 19:26:49\n Гладких Александр -> 2071074234:\nСбер (Bell Integrator)\n Вакансия: hr сама написала\n Вопросы \n  - Расскажи про свой опыт в кратце\n  - Проекты команды как взаимодействовали\n  \n  - Задачи\n  \n  var a = 10\n   function foo() {\n   a = 5\n  }\nНазови все способы сделать перменную а недоступной для изменений\n \n  console.log('' || {})\n  console.log('' ?? {})\n  \n  Что такое ?? и что будет в консоли\n  \n  console.log(this.user.name)\n  \n  что будет в консоли \n  как сделать чтобы был undefined\n  \n  что такое каррирование\n  \n  const a = {key: 'a'}, b = {key: 'b'}, c = {key: 'c'}\n  a[b] = c\n  a[c] = b\n   console.log(a[b], a[c])\n  что будет в консоли\n  \n  function foo(a) {\n   console.log(b)\n       return  {\n           foo: (b) => foo(b)\n   }\n  }\n   foo(1).foo(2).foo(3).foo(4)\n  что в консоли\n  \n  написать кастомный промис который резолвит 1\n  вопросы по промисам\n  \n  <Component func={this.foo}/>\n  <Component func={() => this.foo()}/>\n  в чем разница что лучше\n  \n  useEfect(() => {\n   console.log(1)\n  \n  return () => {\n   console.log(2)\n  }\n  }, [name])\n  порядок логов\n  \n  использовал abourt controller\n  \n  useEffect(() => {\n  const controller = new AbortController();\n  dispatch(getData(controller.signal));\n  return () => {\n   controller.abort(); // Отменяет запрос при размонтировании компонента\n   };\n  }, []);\n  \n  - зачем нужен combineReducer\n  \n  import {style} from './style.less'\n  почему мы можем так написать\n  будет ли ругаться ts и как исправить\n  \n  try {\n  } catch (error: ?) {\n  }\n  как типизировать error и почему так\n  - какие утилити тайп знаешь\n  \n   const props: IProps<Record<EState, number>> = {\n    value: {\n        [EState.ONE]: 1,\n        [EState.TWO]: 2,\n        [EState.THREE]: 3\n }\n};"
      },
      {
        "timestamp": "2024-10-31 09:51:20",
        "content": "2024-10-31 09:51:20\n Сергей -> 2071074234:\n- Компания: аутсорс ВК\n- Вакансия: от  bell integrator\n- ЗП: до 270к озвучивали\n- Вопросы: \n- по резюме подробно пробежались, подробно про то как ставились задачи, конфликты, процессы в общем, про работу с легаси, работа с webpack\n- пришла HTML что дальше происходит\n- Async vs defer, type=module\n- requestAnimationFrame\n- специфичность селекторов\n- layout/paint/ может ли paint произойти без Layout, может ли layout без paint\n- можем ли использовать анимац...",
        "full_content": "2024-10-31 09:51:20\n Сергей -> 2071074234:\n- Компания: аутсорс ВК\n- Вакансия: от  bell integrator\n- ЗП: до 270к озвучивали\n- Вопросы: \n- по резюме подробно пробежались, подробно про то как ставились задачи, конфликты, процессы в общем, про работу с легаси, работа с webpack\n- пришла HTML что дальше происходит\n- Async vs defer, type=module\n- requestAnimationFrame\n- специфичность селекторов\n- layout/paint/ может ли paint произойти без Layout, может ли layout без paint\n- можем ли использовать анимации в промисах\n- event loop, когда происходит render\n- let/const/var области видимо\n- замыкание\n- this\n- workers\n- react в чем плюс\n- spa/ssr плюсы минусы как работает\n- хуки React\n- как добавить сео с SPA\n- мемоизация\n- правила хуков\n- Ts\n- any vs unkown\n- omit pick extract exclude\n- enum vs union"
      }
    ]
  },
  {
    "company": "Антара",
    "count": 8,
    "records": [
      {
        "timestamp": "2025-01-28 15:17:05",
        "content": "2025-01-28 15:17:05\n alzor -> 2071074234:\nКомпания: Антара (аутстафф)\nВакансия: https://hh.ru/vacancy/116140686\nЭтап: тех.скрининг\nЗП: 220к",
        "full_content": "2025-01-28 15:17:05\n alzor -> 2071074234:\nКомпания: Антара (аутстафф)\nВакансия: https://hh.ru/vacancy/116140686\nЭтап: тех.скрининг\nЗП: 220к"
      },
      {
        "timestamp": "2024-10-22 09:20:13",
        "content": "2024-10-22 09:20:13\n Katerina -> 2071074234:\nКомпания: Антара(2 этап - собес на проект Сбера)\nВакансия: https://spb.hh.ru/vacancy/108244512?from=employer&hhtmFrom=employer\nЗП: 200 - 250k\nВопросы\nОчень много по резюме, проходились по каждой строчке, как по текущему месту работы, так и по предыдущему\n- FSD какие компоненты в каких папках, примеры\n- Хранилища браузеров, чем различаются и что безопаснее\n- Рассказать про WebSocket, Polling и Long Polling\n- Работала ли с css? Различия flex и grid\n- Мо...",
        "full_content": "2024-10-22 09:20:13\n Katerina -> 2071074234:\nКомпания: Антара(2 этап - собес на проект Сбера)\nВакансия: https://spb.hh.ru/vacancy/108244512?from=employer&hhtmFrom=employer\nЗП: 200 - 250k\nВопросы\nОчень много по резюме, проходились по каждой строчке, как по текущему месту работы, так и по предыдущему\n- FSD какие компоненты в каких папках, примеры\n- Хранилища браузеров, чем различаются и что безопаснее\n- Рассказать про WebSocket, Polling и Long Polling\n- Работала ли с css? Различия flex и grid\n- Можем ли через js работать с псевдоклассами\n- Var, let, const - классика\n- Event loop\n- Рассказать про Event propagation, как остановить всплытие, как получить элемент на котором оно сработало\n- Хуки, рассказать просто\n- Git, как плотно работала, что использовала (спросили знаю ли про squash, cherry-pick)\n- База по TypeScript \n- Перегрузка функций в TypeScript\nЗадачи:\n//1 - зарефакторить\nexport const TestContainer = ({main}: {main: boolean}) => {\n  if (main) return null;\n  \n  const ref = useRef<number>(0);\n  const [array, setArray] = useState<number[]>([0]);\n  \n  const handleClick = useCallback(() => {\n      setArray([prev, ref.current])\n  }, []);\n  \n  useEffect(() => {\n      setInterval(() => {\n          ref.current = ref.current + Math.random() + array[array.length-1];\n      }, 100);\n  }, [ref, array, setArray]);\n\n  \n  return (\n      <div onClick={handleClick}>\n          {array.map(id => (\n              <div>{item}</div>\n          ))}\n      </div>\n  );\n};\n\n//2\nconst inData = \"user.name.firstname=Bob&user.name.lastname=Smith&user.favoritecolor=Light%20Blue\";\n\nfunction queryObjectify(arg) {\n  // ??\n}\n\nqueryObjectify(inData)\n/* Результатом выполнения для входящей строки, должен быть следующий объект\n{\n'user': {\n  'name': {\n  'firstname': 'Bob',\n  'lastname': 'Smith'\n  },\n  'favoritecolor': 'Light Blue'\n}\n};\n*/"
      },
      {
        "timestamp": "2024-10-15 12:38:20",
        "content": "2024-10-15 12:38:20\n Katerina -> 2071074234:\nКомпания: Антара (первый собес на грейд)\nВакансия: https://spb.hh.ru/vacancy/108244512?from=employer&hhtmFrom=employer\nЗП: вилка 210-250к\nВопросы: все базовые по теории.\nИз интересного:\n1) package-lock.json отличия от package.json\n2) что будет если в then будет вызываться другой then (в последующих then будет результат первого промиса)\n3) управляемые и неуправляемые компоненты\n4) цикл редакса: создаем экшен/передаем в диспатч/обновляем стор в редюсере...",
        "full_content": "2024-10-15 12:38:20\n Katerina -> 2071074234:\nКомпания: Антара (первый собес на грейд)\nВакансия: https://spb.hh.ru/vacancy/108244512?from=employer&hhtmFrom=employer\nЗП: вилка 210-250к\nВопросы: все базовые по теории.\nИз интересного:\n1) package-lock.json отличия от package.json\n2) что будет если в then будет вызываться другой then (в последующих then будет результат первого промиса)\n3) управляемые и неуправляемые компоненты\n4) цикл редакса: создаем экшен/передаем в диспатч/обновляем стор в редюсере/обновляем интерфейс\nЗадачи: не было"
      },
      {
        "timestamp": "2024-09-27 09:14:26",
        "content": "2024-09-27 09:14:26\n Timofei Syromiatnikov -> 2071074234:\n— Название: Антара (аутстаф в Сбер, 2 этап - тех. собес к клиенту)\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— ЗП: от 200к\n— Вопросы:\n1) Расскажи про свой опыт. Какое образование. Сколько лет. Почему ушел с послед. места работы.\n2) Какие знаешь хуки? useRef особенности?\n3) Какие жизненные циклы компонента реализует useEffect и как?\n4) Каким стейт-менеджером пользовался, зачем нужны они вообще? Какой архитекту...",
        "full_content": "2024-09-27 09:14:26\n Timofei Syromiatnikov -> 2071074234:\n— Название: Антара (аутстаф в Сбер, 2 этап - тех. собес к клиенту)\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— ЗП: от 200к\n— Вопросы:\n1) Расскажи про свой опыт. Какое образование. Сколько лет. Почему ушел с послед. места работы.\n2) Какие знаешь хуки? useRef особенности?\n3) Какие жизненные циклы компонента реализует useEffect и как?\n4) Каким стейт-менеджером пользовался, зачем нужны они вообще? Какой архитектурный патерн у Redux? Что в Redux реализует своевременное обновление данных при изменении? (observer)\n5) Что такое flux? \n6) Приоритетность селекторов.\n7) Как выровнять див?\n8) em, rem что это?\n9) Как парсится страница? Все этапы, на каком мы обрабатываем скрипты? Что такое async и defer у скриптов?\n10) Что такое эвентлупа, что входит в микро и макро задачи?\n11) Погружение, всплытие в DOM, что это?\n\n— Задачи:\n1) Что выведется и почему:\nsetTimeout(() => { console.log(a, b,c)  }, 100)\n\nconst promise = new Promise((resolve) => {\n  b--;\n  resolve();\n})\n\npromise\n  .then(() => console.log(a))\n  .catch(() => console.log(b--))\n  .catch(() => console.log(c))\n\nlet a = 1:\nlet b = 2;\n\nconsole.log(c)\n\nvar c = 3;\n\n// undefined 2 1 1 3\n\n2) Задача на ревью\nconst Component = ({ main  }) => {\n  if (main) return null\n  const [array, setArray] = useState([0])\n  const ref = useRef(0)\n\n  const handleClick = useCallback(() => {\n    setArray([array, ref.current])\n  }, [])\n\n  useEffect(() => {\n    ref.current = Math.random() + ref.current + array[array.length-1]\n  }, [array, ref])\n\n  retrun <div>{\n    array.map(id => <div>{id}</div>)\n  }</div>  \n}\n3) Напиши функцию которая вернет только уникальные значения массива. Не используя нативные способы JS, по типу new Set()\n// [1, 1, 2, 3, 5, 2, 8, 9, 1, 0] ===> [1, 2, 3, 5, 8, 9, 0]"
      },
      {
        "timestamp": "2024-09-26 13:13:06",
        "content": "2024-09-26 13:13:06\n Ada500 -> 2071074234:\n-Антара\nЗп: от 200тыс\nВакансия: hr сама написала\nВопросы:\n-Что такое селекторы?\n-Приоритетность селекторов\n-какие есть хранилищи в браузере? \n-какие есть флаги у cookie, для чего они, отличие\n- расскажи про методы оптимизации в реакт\n- методы копирования объекта\n- расскажи про хуки\n- отличие useState от useRef\nЗадачи : \nЧто выведит в консоль \nconsole.log(1++'1'+3)\nconsole.log ('A'-'B')\nНапиши кастомный useFetch",
        "full_content": "2024-09-26 13:13:06\n Ada500 -> 2071074234:\n-Антара\nЗп: от 200тыс\nВакансия: hr сама написала\nВопросы:\n-Что такое селекторы?\n-Приоритетность селекторов\n-какие есть хранилищи в браузере? \n-какие есть флаги у cookie, для чего они, отличие\n- расскажи про методы оптимизации в реакт\n- методы копирования объекта\n- расскажи про хуки\n- отличие useState от useRef\nЗадачи : \nЧто выведит в консоль \nconsole.log(1++'1'+3)\nconsole.log ('A'-'B')\nНапиши кастомный useFetch"
      },
      {
        "timestamp": "2024-09-22 19:35:34",
        "content": "2024-09-22 19:35:34\n Никита -> 2071074234:\n— Название: Антара\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— зп: 250к\n— вопросы:\n1) Как отрисовывается html после получения?\n2) Что знаешь про вес селекторов?\n3) Какие знаешь свойства flex?\n4) == и ===\n5) чем proto отличается от prototype?\n6) localStorage, sessionStorage, cookie\n7) какие есть флаги есть в cookie\n8) Какие хуки использовал\n9) отличие useRef от useState\n10) Что такое дженерики?\nлайв кодинг:\n1) написать свой ...",
        "full_content": "2024-09-22 19:35:34\n Никита -> 2071074234:\n— Название: Антара\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— зп: 250к\n— вопросы:\n1) Как отрисовывается html после получения?\n2) Что знаешь про вес селекторов?\n3) Какие знаешь свойства flex?\n4) == и ===\n5) чем proto отличается от prototype?\n6) localStorage, sessionStorage, cookie\n7) какие есть флаги есть в cookie\n8) Какие хуки использовал\n9) отличие useRef от useState\n10) Что такое дженерики?\nлайв кодинг:\n1) написать свой map\n2) задача на волну из 'hello' сделать ['Hello','hEllo','heLlo','helLo','hellO']\n3) Стандартный рефакторинг с useEffect: добавить массив зависимостей, отписку, убрать async, разделить на 2 useEffect(запрос, и логика скролла)"
      },
      {
        "timestamp": "2024-09-18 12:50:11",
        "content": "2024-09-18 12:50:11\n Timofei Syromiatnikov -> 2071074234:\n— Название: Антара (аутстаф в сбер)\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— ЗП: когда откликался было до 200к, сейчас от 200к поставили, хз\n— Вопросы:\n1) Что такое useRef и useState хуки, расскажи о них поподробнее и разницу.\n2) Расскажи что такое useEffect, различие между useLaoutEffect, и как мы можем вызвать колбек при размонтировании компонента?\n3) Что такое event.stopPropagation() и event.preventDefa...",
        "full_content": "2024-09-18 12:50:11\n Timofei Syromiatnikov -> 2071074234:\n— Название: Антара (аутстаф в сбер)\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— ЗП: когда откликался было до 200к, сейчас от 200к поставили, хз\n— Вопросы:\n1) Что такое useRef и useState хуки, расскажи о них поподробнее и разницу.\n2) Расскажи что такое useEffect, различие между useLaoutEffect, и как мы можем вызвать колбек при размонтировании компонента?\n3) Что такое event.stopPropagation() и event.preventDefault()?\n4) С помощью чего можно решить проблему пропс дриллинга?\n5) Какие минусы использования useContext в реакте?\n6) Что такое дженерики в  TS?\n\n— Задачи:\n1) Напиши функцию, которая принимает аргументом массив (в массиве могут быть числа и/или вложенные массивы), и выдает сумму всех чисел из переданного массива.\nconsole.log(sum([1,1,1, [2, 1], [1, [1, [1], 3]]]) // вернуть должно: 12\n2) Напиши кастомный хук useFetch, который принимает урл, и отдает объект с значениями data, isLoading, isError, и функцию reload, при вызове которой мы по новой шлем запрос за данными.\nfunction App() {\n  const { data, isLoading, isError, reload } = useFetch('https://externalapi')\n\n  return <div>\n    <div>{data?.map(value => <div>{value.name}</div>)</div>\n    <button onClick={reload}>reload</button>\n  </div>\n}\n3. Что выведется в консоли?\nconsole.log(1 + '2' + '2')\nconsole.log(1 + +'2' + '2')\nconsole.log('A' - 'B')\nconsole.log(typeof /abc/)\nconsole.log(true - 12)\nconsole.log(0.1 + 0.2)\n\nconst obj = { '1': 10, 1: 3 }\nconsole.log(obj['1'] + obj[1])\n4. Напиши функцию between, которая принимает минимальное и максимальное значение. И возвращает true или false если значение назходится в этом диапозоне соотвтественно. (Задача с подковыркой, вызов функции ничего нельзя менять, надо адаптировать решение под вызов который дан в задаче)\nfunction betwee(min, max) {\n\n// короче тут возвращаем функцию, чтобы filter мог её вызвать, в этот колбек принимает current число, и тут сравниваем уже, если в диапазоне возвращаем true, если нет - false\n}\n\nconst arr = [1, 2, 3, 4, 5, 6]\nconst range = arr.filter(betwee(3, 6))\nconsole.log(range) // [4, 5]"
      },
      {
        "timestamp": "2024-08-21 17:20:49",
        "content": "2024-08-21 17:20:49\n Kirill Anikeev -> 2071074234:\nНазвание: Антара\nСсылка: https://hh.ru/vacancy/105320834\nзп: 200\nВопросы: не успел запись сделать, завтра исправлюсь, так что скомкано\nрассказать про изоляцию стилей\nрассказать про селектары\nкакие семантичные теги знаешь?\nподробно по ивент луп\nразница между type interface\nUtility Types\nреакт хуки\nрассказать подробно про мемоизацию\nзадачи (к сожалению код не сохранился, исправлюсь): \n отсортировать четные элементы массива\nрефакторинг кода в реакт...",
        "full_content": "2024-08-21 17:20:49\n Kirill Anikeev -> 2071074234:\nНазвание: Антара\nСсылка: https://hh.ru/vacancy/105320834\nзп: 200\nВопросы: не успел запись сделать, завтра исправлюсь, так что скомкано\nрассказать про изоляцию стилей\nрассказать про селектары\nкакие семантичные теги знаешь?\nподробно по ивент луп\nразница между type interface\nUtility Types\nреакт хуки\nрассказать подробно про мемоизацию\nзадачи (к сожалению код не сохранился, исправлюсь): \n отсортировать четные элементы массива\nрефакторинг кода в реакт компонентах\nинструменты хранения информации в браузере\nрассказать подробно про куки"
      }
    ]
  },
  {
    "company": "Лига Цифровой Экономики",
    "count": 8,
    "records": [
      {
        "timestamp": "2025-07-03 08:04:00",
        "content": "2025-07-03 08:04:00\n Гладких Александр -> 2071074234:\nКомпания Лига Цифровой Экономики 2 этап\nВакансия: написала HR\n\nВопросы \nРасскажи о себе о предыдущем опыте?\nКак решали проблему  внедрения FSD с учетом того что проект долго разрабатывается и есть старички как обучать их и тд с какими проблемами сталкивался\nПодробно идет по резюме по флоу работы командам и тд\nuse strict что такое зачем нужен как использовали\nMap Set Object примеры из жизни\nnull undefined\nreflow vs repaint в чем разница\nкак на...",
        "full_content": "2025-07-03 08:04:00\n Гладких Александр -> 2071074234:\nКомпания Лига Цифровой Экономики 2 этап\nВакансия: написала HR\n\nВопросы \nРасскажи о себе о предыдущем опыте?\nКак решали проблему  внедрения FSD с учетом того что проект долго разрабатывается и есть старички как обучать их и тд с какими проблемами сталкивался\nПодробно идет по резюме по флоу работы командам и тд\nuse strict что такое зачем нужен как использовали\nMap Set Object примеры из жизни\nnull undefined\nreflow vs repaint в чем разница\nкак на странице вызвать reflow\nв двух словах как происходит построение страницы какие фазы есть\nкакие проблемы могут быть на странице при частом reflow\nposition absolute vs relative\nany vs unknown\nкак unknown превращается в какой то тип\nпримеры ситуации где применил any а где unknown\nкак бы решал если дали на рефакторинг компоненты с кучей any\nдженерики использовал  или нет\nпримеры использования дженериков из реальной работы\nв каких случаях вызывается перерисовка родителя\nкак в хуках можно вызвать forceUpdate\nuseSyncExternalStore() зачем нужен \nпочему нельзя объявлять хуки в условиях\nдали на рефакторинг старый код пользователи говорят все тормозит дергается тебе дали задачу решить как будешь действовать\nкак будешь собирать метрики производительности\nмемоизация что такое и зачем нужна в реакте\nчем отличается от кэширования\nuseMemo где использовал\nwebWorker работал или нет\nчто такое микро макротаски\nесли есть бесконечная очередь микротасок заблокирует? а если сеттаймауты?\nRAF requestAnimationFrame что это использовал ли\nпример использования RAF \n\nзадача \n\nРеализовать функцию debounce\n\nfunction debounce = function(fn, t) {\n     let timeout;\n     \n     return function(...args) {\n  clearTimeout(timeout)\n\n        timeout = setTimeout(() => {\n  fn(...args)\n}, t)\n\n}  \n}"
      },
      {
        "timestamp": "2025-06-23 08:31:50",
        "content": "2025-06-23 08:31:50\n Гладких Александр -> 2071074234:\nКомпания Лига Цифровой Экономики 1 этап\nВакансия: написала HR\n\nВопросы \nРасскажи о себе о предыдущем опыте?\nКак происходило взаимодействие с другими фронтами?\nКак ревью проходило? \nЧто использовал в качестве сборщика?\nПриходилось ли конфигурировать?\nБыл ли опыт с SSR? \n\nЗадачи\n\nconsole.log(1)\nsetTimeout(() => console.log(2), 0)\nconsole.log(3)\n//======================\nconst arr = [1, 2, 3]\narr[10] = 10\nconsole.log(arr.length)\n// ==============...",
        "full_content": "2025-06-23 08:31:50\n Гладких Александр -> 2071074234:\nКомпания Лига Цифровой Экономики 1 этап\nВакансия: написала HR\n\nВопросы \nРасскажи о себе о предыдущем опыте?\nКак происходило взаимодействие с другими фронтами?\nКак ревью проходило? \nЧто использовал в качестве сборщика?\nПриходилось ли конфигурировать?\nБыл ли опыт с SSR? \n\nЗадачи\n\nconsole.log(1)\nsetTimeout(() => console.log(2), 0)\nconsole.log(3)\n//======================\nconst arr = [1, 2, 3]\narr[10] = 10\nconsole.log(arr.length)\n// ==========================\nconst obj1 = { a: 1 }\nconst obj2 = obj1\nobj2.a = 2\nconsole.log(obj1.a)\n// ================\nconst obj = {\n    value: 42,\n    getValue: function(){\n        return this.value\n    }\n}\n\n// ==========================\nfunction memoize(fn) {\n    const cache = new Map()\n    return function (...args){\n        const key = args.join(',')\n        if(cache.has(key)) {\n            return cache.get(key)\n        }\n\n        const result = fn(...args)\n        cache.set(key, result)\n        return result\n    }\n}\n\nплюсы минусы и зачем нужна мемоизации какие подводные камни?\n// ======================================================\n// реализовать отсортирванный список городов пример \n// А \n// Архангельск\n// Астрахань \nесть массив городов cities[{id: 1, name: 'Aрхангельск'}, ...]\n\n/**\n * Функция для сортировки и группировки городов по первой букве названия,\n * основанная на вашем коде.\n * @param {Array<Object>} arr - Массив объектов городов.\n * @returns {Object} Объект, где ключи - это первые буквы, а значения - отсортированные массивы названий городов.\n */\nfunction sortedCities(arr) {\n  const map = {}; // Создаем объект для хранения сгруппированных городов\n\n  // 1. Сначала сортируем сам массив городов по названию\n  // Это важно, чтобы города внутри каждой группы были отсортированы\n  const sortedInputCities = [...arr].sort((a, b) => {\n    return a.name.localeCompare(b.name, 'ru', { sensitivity: 'base' });\n  });\n\n  // 2. Группируем отсортированные города\n  for (const city of sortedInputCities) {\n    const firstChar = city.name[0].toUpperCase(); // Берем первую букву и приводим к верхнему регистру\n\n    // Если для этой буквы еще нет массива в map, создаем его\n    if (!map[firstChar]) {\n      map[firstChar] = [];\n    }\n    // Добавляем название города в соответствующий массив\n    map[firstChar].push(city); // Добавляем объект города целиком, а не только имя\n  }\n\n  // 3. (Необязательно, но полезно): Если нужно сортировать группы по буквам,\n  // это можно сделать при рендере, либо здесь.\n  // Например, чтобы убедиться, что 'А' идет перед 'Б'.\n  // Наша map уже будет иметь ключи в порядке добавления первых городов,\n  // но Object.keys().sort() при рендере решит эту проблему.\n\n  return map;\n}\n\n// Проверяем работу функции в консоли\nconsole.log(\"Сгруппированные города (в консоли):\", sortedCities(cities));\n\n\n// React компонент App\nconst App = () => {\n  // Вызываем нашу функцию для получения сгруппированных и отсортированных данных\n  const groupedCitiesData = sortedCities(cities);\n\n  // Получаем отсортированные ключи (буквы) для рендеринга\n  // Это важно, чтобы буквы выводились в алфавитном порядке\n  const sortedKeys = Object.keys(groupedCitiesData).sort();\n\n  return (\n    <div>\n      <h1>Список городов</h1>\n      {/* Итерируем по отсортированным буквам */}\n      {sortedKeys.map(letter => (\n        <div key={letter}>\n          <h2>{letter}:</h2>\n          <ul>\n            {/* Итерируем по городам внутри каждой группы */}\n            {groupedCitiesData[letter].map(city => (\n              <li key={city.id}> {/* Важно использовать уникальный ключ */}\n                {city.name} (ID: {city.id})\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Рендерим компонент App в DOM-элемент\nReactDOM.render(<App />, document.getElementById(\"root\"));"
      },
      {
        "timestamp": "2025-02-01 09:06:45",
        "content": "2025-02-01 09:06:45\n Дмитрий Юрьев -> 2071074234:\nВакансия: Лига цифровой экономики (проект Сбербанк)\nНаправление деятельности - Глобальные рынки. Система сопровождения сделок",
        "full_content": "2025-02-01 09:06:45\n Дмитрий Юрьев -> 2071074234:\nВакансия: Лига цифровой экономики (проект Сбербанк)\nНаправление деятельности - Глобальные рынки. Система сопровождения сделок"
      },
      {
        "timestamp": "2024-10-09 11:32:18",
        "content": "2024-10-09 11:32:18\n Михаил -> 2071074234:\nЛига Цифровой Экономики (на проект в Сбер)\nвакансия hh.ru/vacancy/107380873\nзп 200к",
        "full_content": "2024-10-09 11:32:18\n Михаил -> 2071074234:\nЛига Цифровой Экономики (на проект в Сбер)\nвакансия hh.ru/vacancy/107380873\nзп 200к"
      },
      {
        "timestamp": "2024-09-04 16:50:10",
        "content": "2024-09-04 16:50:10\n Max -> 2071074234:\nЛига цифровой экономики\nвакансия: https://hh.ru/vacancy/106046323?from=share_ios\nЗП: 230-250 \nВопросы:\n1) Как работали?\n2) Как были настроены процессы? Опиши детально\n3) Как работал ci/cd?\n4) Что использовали в качестве контролера версий? (Gitlab)\n5) Описать детально процесс выкатки фичи\n6) Как использовали nginx? Использовали ли?\n7) Расскажи про реакт, как работает, в чем плюсы и минусы?\n8) Что будет если добавить key не в map, а просто? Что будет происхо...",
        "full_content": "2024-09-04 16:50:10\n Max -> 2071074234:\nЛига цифровой экономики\nвакансия: https://hh.ru/vacancy/106046323?from=share_ios\nЗП: 230-250 \nВопросы:\n1) Как работали?\n2) Как были настроены процессы? Опиши детально\n3) Как работал ci/cd?\n4) Что использовали в качестве контролера версий? (Gitlab)\n5) Описать детально процесс выкатки фичи\n6) Как использовали nginx? Использовали ли?\n7) Расскажи про реакт, как работает, в чем плюсы и минусы?\n8) Что будет если добавить key не в map, а просто? Что будет происходить? Ответ- никак не повлияет (очень странный вопрос)\n9) Расскажи про алгоритмы, уровни сложности алгоритмов,\n10 Задача: просто рассказать рассуждения как бы искал рандомное число по массиву из 100 элементов (задача на знание алгоритмов)\n11) Как реакт помогает предотварить xss атаки?\n12) Что такое CORS/ расскажи про options, что такое CSP\n13) Какие патерны использовали на проекте? (FSD и так далее)\n14) Какие лучшие практики построения приложения? Какие применяли на работе?\n\nОЧЕНЬ  МНОГО ВОПРОСОВ ПРО  ОПЫТ"
      },
      {
        "timestamp": "2024-06-05 11:37:38",
        "content": "2024-06-05 11:37:38\n Tonidevs -> 2071074234:\n— Лига цифровой экономики техсобес\n— Ссылка: \n— ЗП: назвал от 260к+\n— Задачи: в опыт копает, теория, чтение кода, лайвкода - не было\n— Успех: ❓\n— Вопросы: все отсюда https://t.me/c/2071074234/489/16627\n— Задачи(вот что успел запомнить):\n-  дана строка \"some string dsadasd\" - пример строки(рандом), нужно развернуть каждое слово\n\nfunction reverseWords(str) {\n  return str.split(' ').map(word => word.split('').reverse().join('')).join(' ');\n}\n- задача на ...",
        "full_content": "2024-06-05 11:37:38\n Tonidevs -> 2071074234:\n— Лига цифровой экономики техсобес\n— Ссылка: \n— ЗП: назвал от 260к+\n— Задачи: в опыт копает, теория, чтение кода, лайвкода - не было\n— Успех: ❓\n— Вопросы: все отсюда https://t.me/c/2071074234/489/16627\n— Задачи(вот что успел запомнить):\n-  дана строка \"some string dsadasd\" - пример строки(рандом), нужно развернуть каждое слово\n\nfunction reverseWords(str) {\n  return str.split(' ').map(word => word.split('').reverse().join('')).join(' ');\n}\n- задача на событийный цикл\n\n setTimeout(function timeout() {\n    console.log('Таймаут');\n}, 0);\n\nlet p = new Promise(function(resolve, reject) {\n    console.log('Создание промиса');\n    resolve();\n});\n\np.then(function(){\n    console.log('Обработка промиса');\n});\n\nconsole.log('Конец скрипта');\n\n// Создание промиса Конец скрипта Обработка промиса Таймаут\n- задача на замыкание \nlet globalVar = \"Endy\";\nlet outerVar = 'Dwight';\n\nfunction outerFunc(outerParam) {\n    function innerFunc(innerParam) {\n        console.log(globalVar, outerParam, innerParam);\n    }\n    return innerFunc;\n}\n\nconst x = outerFunc(outerVar);\nouterVar = 'Kevin';\nglobalVar = \"Michael\";\nx(\"Stanley\");"
      },
      {
        "timestamp": "2024-06-03 09:16:19",
        "content": "2024-06-03 09:16:19\n Artur -> 2071074234:\nКомпания: Лига Цифровой Экономики, собес в проект от Сбера\nСсылка на вакансию: hr сама написала в тг\nСсылка на собес: отсутствует (забыл включить обс)\nЗП: до 230к\nУровень: middle\nУспех собеса: ?\n\nЗадачи:\n\n1) написать промис\n\n2) реализовать промис в async await\n\nрешение:\n\nasync function handlePromise() {\n  try {\n    const result = await promise;\n    console.log(result);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nhandlePromise();\n\n\n3) реализовать...",
        "full_content": "2024-06-03 09:16:19\n Artur -> 2071074234:\nКомпания: Лига Цифровой Экономики, собес в проект от Сбера\nСсылка на вакансию: hr сама написала в тг\nСсылка на собес: отсутствует (забыл включить обс)\nЗП: до 230к\nУровень: middle\nУспех собеса: ?\n\nЗадачи:\n\n1) написать промис\n\n2) реализовать промис в async await\n\nрешение:\n\nasync function handlePromise() {\n  try {\n    const result = await promise;\n    console.log(result);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nhandlePromise();\n\n\n3) реализовать функцию \n\nfunction withTimeOut(promise, timeout){\n   ...\n}\n\nрешение:\n\nfunction withTimeout(promise, timeout) {\n  return new Promise((resolve, reject) => {\n    const timer = setTimeout(() => {\n      reject(new Error('Promise timed out'));\n    }, timeout);\n\n    promise.then(\n      (value) => {\n        clearTimeout(timer);\n        resolve(value);\n      },\n      (error) => {\n        clearTimeout(timer);\n        reject(error);\n      }\n    );\n  });\n}\n\n4) реализовать компонент, в котором два поля - рубли и доллары. Реализовать логику конвертирования долларов в рубли и наоборот\n\nрешение:\n\nimport React, { useState } from 'react';\n\nconst CurrencyConverter = () => {\n    const [rubles, setRubles] = useState('');\n    const [dollars, setDollars] = useState('');\n    const exchangeRate = 90;\n\n    const handleRublesChange = (e) => {\n        const rublesValue = e.target.value;\n        setRubles(rublesValue);\n        if (rublesValue !== '') {\n            setDollars((rublesValue / exchangeRate).toFixed(2));\n        } else {\n            setDollars('');\n        }\n    };\n\n    const handleDollarsChange = (e) => {\n        const dollarsValue = e.target.value;\n        setDollars(dollarsValue);\n        if (dollarsValue !== '') {\n            setRubles((dollarsValue * exchangeRate).toFixed(2));\n        } else {\n            setRubles('');\n        }\n    };\n\n    return (\n        <div>\n            <div>\n                <label>\n                    Рубли:\n                    <input type=\"number\" value={rubles} onChange={handleRublesChange} />\n                </label>\n            </div>\n            <div>\n                <label>\n                    Доллары:\n                    <input type=\"number\" value={dollars} onChange={handleDollarsChange} />\n                </label>\n            </div>\n        </div>\n    );\n};\n\nexport default CurrencyConverter;\n\n\n5) дан массив со строками в которых есть и буквы и цифры. Нужно было перевернуть массив, перевернуть каждый элемент, собрать строку только с буквами, и только с цифрами\n\nрешение:\n\nconst data = ['f', '53', '5e62d95', '1c413ba'];\n\n// Перевернуть весь массив\nconst reversedArray = [...data].reverse();\n\n// Перевернуть каждый элемент в массиве\nconst reversedElementsArray = reversedArray.map(item => item.split('').reverse().join(''));\n\n// Собрать строку только с буквами\nconst lettersOnly = reversedElementsArray.join('').split('').filter(char => isNaN(char)).join('');\n\n// Собрать строку только с цифрами\nconst digitsOnly = reversedElements.join('').replace(/[^0-9]/g, '');"
      },
      {
        "timestamp": "2024-04-25 16:57:37",
        "content": "2024-04-25 16:57:37\n Санжар -> 2071074234:\n- Название компании: Лига цифровой экономики [Тех. скрин]\n- Ссылка на вакансию: https://ufa.hh.ru/vacancy/91278944\n- ЗП: запросил 330к-380к\n- Задачи: теория, чтение кода, одна простая таска на лайвкод\n- Успех: ✅\n\nВопросы:\n- Что такое async await\n- Что такое замыкание\n- Как оптимизировать приложение (метрики FCP LCP CLS и т.д.)\n- Какие инструменты для анализа используешь (lighthouse, perfomance, network и т.д.)\n- Что такое реактивность данных, как она ус...",
        "full_content": "2024-04-25 16:57:37\n Санжар -> 2071074234:\n- Название компании: Лига цифровой экономики [Тех. скрин]\n- Ссылка на вакансию: https://ufa.hh.ru/vacancy/91278944\n- ЗП: запросил 330к-380к\n- Задачи: теория, чтение кода, одна простая таска на лайвкод\n- Успех: ✅\n\nВопросы:\n- Что такое async await\n- Что такое замыкание\n- Как оптимизировать приложение (метрики FCP LCP CLS и т.д.)\n- Какие инструменты для анализа используешь (lighthouse, perfomance, network и т.д.)\n- Что такое реактивность данных, как она устроена во vue3\n- Что такое виртуальный DOM\n- Какие есть хранилища в браузере, в чем их отличия, предназначения\n- Что такое и для чего нужны WebRTC, WebSocket\n- Для чего нужен typescript\n\nЗадачи (код забыл сохранить):\n- дана строка \"some string\", нужно развернуть каждое слово (написать код)\n- задача на контекст (сказать что будет выведено в консоли)\n- задача на событийный цикл (сказать что будет выведено в консоли)\n- задача на замыкание (сказать что будет выведено в консоли)"
      }
    ]
  },
  {
    "company": "MinervaSOFT",
    "count": 7,
    "records": [
      {
        "timestamp": "2025-04-21 09:06:39",
        "content": "2025-04-21 09:06:39\n Nikita -> 2071074234:\nКомпания: MinervaSoft (техсобес)\nВакансия: Hr написал напрямую\nЗп: 200-250к\n\nВопросы: тот же файл что здесь Формат - идёте по скринам, рассказываешь, что делает код и что бы поправил в нём. Без теории, без лайфкодинга",
        "full_content": "2025-04-21 09:06:39\n Nikita -> 2071074234:\nКомпания: MinervaSoft (техсобес)\nВакансия: Hr написал напрямую\nЗп: 200-250к\n\nВопросы: тот же файл что здесь Формат - идёте по скринам, рассказываешь, что делает код и что бы поправил в нём. Без теории, без лайфкодинга"
      },
      {
        "timestamp": "2025-04-07 07:46:31",
        "content": "2025-04-07 07:46:31\n Farid -> 2071074234:\nКомпания: Minervasoft\nВакансия: Написал hr в тг\nЗП: предлагают от 170к\n\nВопросы: те же что и тут https://t.me/c/2071074234/489/89743, кроме последнего (прикрепил)\n\n\nБез лайвкодинга",
        "full_content": "2025-04-07 07:46:31\n Farid -> 2071074234:\nКомпания: Minervasoft\nВакансия: Написал hr в тг\nЗП: предлагают от 170к\n\nВопросы: те же что и тут https://t.me/c/2071074234/489/89743, кроме последнего (прикрепил)\n\n\nБез лайвкодинга"
      },
      {
        "timestamp": "2024-11-24 10:57:51",
        "content": "2024-11-24 10:57:51\n George Nizamutdinow -> 2071074234:\nКомпания: Minervasoft\nВакания: https://spb.hh.ru/vacancy/109544382\nЗП: от 170 000 до 190 000 ₽ на руки\n\nВопросы(hr-скрининг): \n1) Рассказать про опыт\n2) Какой результат у выражения 2 == '2' и 2 === '2'?\n3) Какая разница между display: none и visibility: hidden?\n4) Чем отличается useEffect без указания массива зависимостей от useEffect с пуcтым массивом зависимостей?\n\nВопросы(тех.часть): вопросы из документа, отрефакторить и расскзать как ра...",
        "full_content": "2024-11-24 10:57:51\n George Nizamutdinow -> 2071074234:\nКомпания: Minervasoft\nВакания: https://spb.hh.ru/vacancy/109544382\nЗП: от 170 000 до 190 000 ₽ на руки\n\nВопросы(hr-скрининг): \n1) Рассказать про опыт\n2) Какой результат у выражения 2 == '2' и 2 === '2'?\n3) Какая разница между display: none и visibility: hidden?\n4) Чем отличается useEffect без указания массива зависимостей от useEffect с пуcтым массивом зависимостей?\n\nВопросы(тех.часть): вопросы из документа, отрефакторить и расскзать как работает код"
      },
      {
        "timestamp": "2024-10-22 11:05:37",
        "content": "2024-10-22 11:05:37\n Artyom Sozykin -> 2071074234:\nКомпания: Minervasoft (поведенческое интервью)\nВакансия:  https://spb.hh.ru/vacancy/107775068?hhtmFrom=employer_vacancies \nЗП: 190к\nВопросы:\n       1. Какой твой продукт мечты, над каким бы хотел работать\n 2. С чем точно не хочется работать?\n 3. Спросили про то, как попал во фронтенд, почем заинтересовало\n 4. Какие ценности в компании для тебя важны?\n 5. Как ты оцениваешь время выполнение задач?\n 6. Что ты сделаешь, если есть беспокойство, что н...",
        "full_content": "2024-10-22 11:05:37\n Artyom Sozykin -> 2071074234:\nКомпания: Minervasoft (поведенческое интервью)\nВакансия:  https://spb.hh.ru/vacancy/107775068?hhtmFrom=employer_vacancies \nЗП: 190к\nВопросы:\n       1. Какой твой продукт мечты, над каким бы хотел работать\n 2. С чем точно не хочется работать?\n 3. Спросили про то, как попал во фронтенд, почем заинтересовало\n 4. Какие ценности в компании для тебя важны?\n 5. Как ты оцениваешь время выполнение задач?\n 6. Что ты сделаешь, если есть беспокойство, что не успеешь до конца спринта в пятницу допилить фичу, сообщишь в четверг на дейлики или только в пятницу?\n 7. По какому принципу вы планируете задачи в спринт\n 8. Когда оканчивается твоя зона ответственности над задачей?\n 9. Что ты делаешь когда отправил задачу на тестирование, берешь сразу новую или ждешь тестирования старой?\n 10. А если берешь новую задачу, а старую возвращают на доработку, то переключаешься на старую?\n 11. А в целом в компании много задач над которыми работают одновременно несколько человек? \n\nФидбек до среды 23.10"
      },
      {
        "timestamp": "2024-10-20 09:47:07",
        "content": "2024-10-20 09:47:07\n Artyom Sozykin -> 2071074234:\nКомпания: Minervasoft\nВакансия: https://hh.ru/vacancy/107775068?from=share_ios\nЗП: 190к\nВопросы:\n1) Вопрос про ссылочные типы\n2) Как отцентровать блок в css\n3) Чем отличаются стрелочные функции от FD\n4) Порталы в React\n5) Рассказать про архитектуру flux (redux)\n\nПригласили на финальный этап ✅",
        "full_content": "2024-10-20 09:47:07\n Artyom Sozykin -> 2071074234:\nКомпания: Minervasoft\nВакансия: https://hh.ru/vacancy/107775068?from=share_ios\nЗП: 190к\nВопросы:\n1) Вопрос про ссылочные типы\n2) Как отцентровать блок в css\n3) Чем отличаются стрелочные функции от FD\n4) Порталы в React\n5) Рассказать про архитектуру flux (redux)\n\nПригласили на финальный этап ✅"
      },
      {
        "timestamp": "2024-10-01 21:34:55",
        "content": "2024-10-01 21:34:55\n Katerina -> 2071074234:\nMinervasoft\nЗп: 170-190к\nВопросы: теория и большая часть за опыт\nВ целом все также - https://t.me/c/2071074234/489/12395\n\nРезультат: должны позвать на следующий этап, пока результата нет",
        "full_content": "2024-10-01 21:34:55\n Katerina -> 2071074234:\nMinervasoft\nЗп: 170-190к\nВопросы: теория и большая часть за опыт\nВ целом все также - https://t.me/c/2071074234/489/12395\n\nРезультат: должны позвать на следующий этап, пока результата нет"
      },
      {
        "timestamp": "2024-03-13 13:52:53",
        "content": "2024-03-13 13:52:53\n Nikita -> 2071074234:\n—MinervaSoft\n—Успех: дали оффер(180к, больше не дают)\n—Зп: Назвал от 180\n—Запись\n—Задачи: Теория",
        "full_content": "2024-03-13 13:52:53\n Nikita -> 2071074234:\n—MinervaSoft\n—Успех: дали оффер(180к, больше не дают)\n—Зп: Назвал от 180\n—Запись\n—Задачи: Теория"
      }
    ]
  },
  {
    "company": "Pyrus",
    "count": 7,
    "records": [
      {
        "timestamp": "2025-07-03 14:55:48",
        "content": "2025-07-03 14:55:48\n Daniil Daniil -> 2071074234:\nКомпания: Pyrus\nВОпросы:\n1. requestAnimationFrame что это, зачем и когда выполняется?\n2. ПОчему для анимаций используется requestAnimationFrame а не макротаски\n3. Сложность для Set?\nНо изначально даются разные и задачки по которым потом он задает разные вопросы\n\nЗадача 1. \nЧто будет в консоли после выполнения кода? \nvar x = 3; \nvar obj = { \n x: 2, \n foo: { \n   x: 1, \n   bar: function () { \n     сonsole.log(this.x); \n   }, \n   baz: function () { \n...",
        "full_content": "2025-07-03 14:55:48\n Daniil Daniil -> 2071074234:\nКомпания: Pyrus\nВОпросы:\n1. requestAnimationFrame что это, зачем и когда выполняется?\n2. ПОчему для анимаций используется requestAnimationFrame а не макротаски\n3. Сложность для Set?\nНо изначально даются разные и задачки по которым потом он задает разные вопросы\n\nЗадача 1. \nЧто будет в консоли после выполнения кода? \nvar x = 3; \nvar obj = { \n x: 2, \n foo: { \n   x: 1, \n   bar: function () { \n     сonsole.log(this.x); \n   }, \n   baz: function () { \n     setTimеout(function () { \n       consоle.log(this.x); \n     }); \n   } \n } \n}; \n\nobj.foo.bar(); //1\nvar func = obj.fоo.bar; \nfunc(); //3\nobj.foo.baz(); //4\nx = 4;\n\n\nЗадача 2. \nНаписать два CSS-правила, которые для заданной (слева) разметки обеспечат заданное (справа) отображение\n\n<div class=\"foo\">Some text</div>\n<span class=\"foo\">Some text</span>\n<div id=\"bar\">Some text</div>\n<div class=\"baz\">\n   <div>Some</div>\n   <div>text</div>\n</div>\nSome text\nSome text\nSome text\nSome text\n\n\n\nРешение: div.foo, #bar { \n      font-weight: bold;\n}\n\n\n\n\nЗадача 3. \nДан массив строк (не меньше 3 элементов), в котором одна из строк отличается по составу  входящих в неё букв от остальных строк в массиве. Порядок, количество, регистр букв и пробелы роли не играют. Реализовать метод, который принимает на вход такой массив строк, и возвращает  отличающуюся строку. \n\nassert( findUniq(['a', 'a Aa', 'ab a', 'AA a']) === 'ab a' );\nassert( findUniq(['ab', 'a Aa', 'ab a', 'bAA a']) === 'a Aa' );\nassert( findUniq(['aBca', 'fO o', 'ac b', 'bac', 'bca', 'cabaccBA', ' Ccba']) === 'fO o' );\n\nfunction findUniq(strings) {\nconst normalize = str => {\n const lower = str.toLowerCase()\n const lettersOnly = []\n for (let char of lower) {\n  if(char !== ‘ ‘) lettersOnly.push(char)\n}\n const unique = [...new Set(lettersOnly)]\nreturn unique.sort().join(‘’)\n}\nconst mapped = strings.map(normalize)\n\nconst counts = {}\nfor (let key of mapped) {\ncounts[key] = (counts[key] || 0) + 1\n}\n\nconst uniqKey = Object.keys(counts).find(key => counts[key] ===1)\nconst index = mapped.indexOf(uniqKey)\nreturn strhings[index]\n}\n\n\n\nЗадача 4. Произвести рефакторинг, исправив ошибки \nfor (var i = 0; i < 10; i++)\n    $('#container').find('#item' + i)\n       .click(function () {\n           $(this).css('background-color', 'red');\n           $(this).css('width', $(this).css('width') + 10);\n           alert('First click on item ' + i);\n           $(this).click(function () {\n               $(this).css('background-color', '');\n               $(this).css('width', $(this).css('width') - 10);\n               alert('Second click on item ' + i);\n               $(this).off('click');\n           })\n       })\n—------------------\n//тут я начал писать, но он сказал можно не дописывать и  устно рассказал\nfor (let i = 0; i < 10; i++) {\n  const $el =  $('#container').find('#item' + i)\n       $el.one(‘click’, function() {\nconst"
      },
      {
        "timestamp": "2025-05-18 14:44:37",
        "content": "2025-05-18 14:44:37\n Timur -> 2071074234:\nКомпания: Pyrus. тех собес\nЗп: 250-280к\nВакансия\n\nдали задачи в документе на 30 минут, после на собес подключились лид беков и фронт, спрашивал в основном бек\n\n1. Очень подробно про jwt:\n- что такое, зачем нужен, из чего состоит\n- как происходит аутентификация с jwt \n- почему безопасен?(хотел услышать про цифровую подпись)\n- где храним рефреш и почему\n- как можно защитить от кражи(httpOnly, sameSite и тд)\n- если у пользователя два access токена, то может...",
        "full_content": "2025-05-18 14:44:37\n Timur -> 2071074234:\nКомпания: Pyrus. тех собес\nЗп: 250-280к\nВакансия\n\nдали задачи в документе на 30 минут, после на собес подключились лид беков и фронт, спрашивал в основном бек\n\n1. Очень подробно про jwt:\n- что такое, зачем нужен, из чего состоит\n- как происходит аутентификация с jwt \n- почему безопасен?(хотел услышать про цифровую подпись)\n- где храним рефреш и почему\n- как можно защитить от кражи(httpOnly, sameSite и тд)\n- если у пользователя два access токена, то может ли быть и два рефреша?\n\n\nЗадача 1:\nпросили объяснить что и почему выводится, спросили:\n1. что такое область видимости \n2. что такое лексическое окружение\n3. почему в нестрогом режиме значения отличаются\n\nЗадача 2.\nспросили, как еще можно отобразить текст в одну строку(inline-block)\n.baz div {\n  display: inline-block;\n}\nтак же спросили отличие div от span\n\nЗадача 3.\nспрашивали за каждую строчку и просили оценить алгоритмическую сложность блока \n    for (let i = 0; i < normalized.length; i++) {\n        if (normalized.indexOf(normalized[i]) === normalized.lastIndexOf(normalized[i])) {\n            return strings[i];\n        }\n    }\nи всей функции\n\nЗадача 4.\nзадача не рассчитана на то, чтобы решить. Сказали, что хотели посмотреть, как работаю с кодом, который никогда не видел\nтк решил ее, просили объяснить, что код вообще делает и как рефакторил\n\nУспех собеса: ❌"
      },
      {
        "timestamp": "2025-05-08 07:56:03",
        "content": "2025-05-08 07:56:03\n Андрей -> 2071074234:\nКомпания Pyrus\nhttps://hh.ru/vacancy/118186405?hhtmFrom=negotiation_list\nЗП 250 тыс. руб.\nЗадачи:\n1) Что выведет:\nvar x = 3; \nvar obj = { \n x: 2, \n foo: { \n   x: 1, \n   bar: function () { \n     console.log(this.x); \n   }, \n   baz: function () { \n     setTimeout(function () { \n       console.log(this.x); \n     }); \n   } \n } \n}; \n\nobj.foo.bar(); // 1\nvar func = obj.foo.bar; // undefined (в нестрогом режиме 3) \nfunc(); \nobj.foo.baz(); // undefined (в нестр...",
        "full_content": "2025-05-08 07:56:03\n Андрей -> 2071074234:\nКомпания Pyrus\nhttps://hh.ru/vacancy/118186405?hhtmFrom=negotiation_list\nЗП 250 тыс. руб.\nЗадачи:\n1) Что выведет:\nvar x = 3; \nvar obj = { \n x: 2, \n foo: { \n   x: 1, \n   bar: function () { \n     console.log(this.x); \n   }, \n   baz: function () { \n     setTimeout(function () { \n       console.log(this.x); \n     }); \n   } \n } \n}; \n\nobj.foo.bar(); // 1\nvar func = obj.foo.bar; // undefined (в нестрогом режиме 3) \nfunc(); \nobj.foo.baz(); // undefined (в нестрогом режиме 4)\nx = 4;\n2) Написать стили для элементов, чтобы первая и третья фразы были жирными. Также спросит как расположить элементы внутри div.baz в одну строку:\n<div class=\"foo\">Some text</div>\n<span class=\"foo\">Some text</span>\n<div id=\"bar\">Some text</div>\n<div class=\"baz\">\n   <div>Some</div>\n   <div>text</div>\n</div>\ndiv.foo {\n  font-weight: bold;\n}\n\n#bar {\n  font-weight: bold;\n}\n3) Дан массив строк (не меньше 3 элементов), в котором одна из строк отличается по составу входящих в нее букв. Порядок, количество, регистр букв и пробелы не имеют значения. Вернуть отличающуюся по составу строку:\nconsole.assert(findUniq(['a', 'a Aa', 'ab a', 'AA a']) === 'ab a');\nconsole.assert(findUniq(['ab', 'a Aa', 'ab a', 'bAA a']) === 'a Aa');\nconsole.assert(findUniq(['aBca', 'fO o', 'ac b', 'bac', 'bca', 'cabaccBA', ' Ccba']) === 'fO o');\n\nfunction findUniq(arr) {\n  const compress = (str) => {\n    return Array.from(new Set(str\n      .split('')\n      .filter(el => (el.toLowerCase() !== el.toUpperCase()))\n      .map(el => el.toLowerCase())\n      .sort())).join('')\n      \n  }\n  \n  const compressedMap = arr.map(el => ({\n    original: el,\n    compressed: compress(el)\n  }))\n  \n  const count = {};\n  \n  for (let wordObj of compressedMap) {\n    if (!(wordObj.compressed in count)) count[wordObj.compressed] = 0;\n    count[wordObj.compressed] += 1;\n  }\n  \n  console.log(compressedMap)\n  \n  return compressedMap.find(wordObj => count[wordObj.compressed] === 1).original;\n}\nТакже по этой задаче попросит написать регулярку для поиска и удаления пробелов методом replace.\n\n4) Отрефакторить код на JQuery:\n// исходный\nfor (var i = 0; i < 10; i++)\n    $('#container').find('#item' + i)\n        .click(function () {\n            $(this).css('background-color', 'red');\n            $(this).css('width', $(this).css('width') + 10);\n            alert('First click on item ' + i);\n            $(this).click(function () {\n                $(this).css('background-color', '');\n                $(this).css('width', $(this).css('width') - 10);\n                alert('Second click on item ' + i);\n                $(this).off('click');\n            })\n        })\n\n// отрефакторенный\nfor (let i = 0; i < 10; i++) {\n    $('#container').find('#item' + i).click(function () {\n        const $this = $(this);\n        const originalWidth = parseInt($this.css('width'), 10);\n\n        if ($this.data('clicked')) {\n            $this.css('background-color', '');\n            $this.css('width', originalWidth - 10);\n            alert('Second click on item ' + i);\n            $this.data('clicked', false);\n        } else {\n            $this.css('background-color', 'red');\n            $this.css('width', originalWidth + 10);\n            alert('First click on item ' + i);\n            $this.data('clicked', true);\n        }\n    });\n}\nВопросы:\n1) Что такое JWT\n2) Где хранится JWT\n3) Зачем два токена, почему нельзя обойтись одним\n4) Почему access токен не храним в cookie\n5) Оценить сложность алгоритма задачи номер 3\nВ целом, очень глубоко копает в JWT, просит рассказывать особенности реализации на бэкенде. Также очень глубоко копает в алгоритмы, сложность алгоритмов\n\nВ основном собес проводит бэкендер, фронтовых вопросов вообще практически не было)\n\nУспех собеса: ✅"
      },
      {
        "timestamp": "2024-12-30 18:47:39",
        "content": "2024-12-30 18:47:39\n Damir -> 2071074234:\nКомпания: Pyrus\nВакансия: https://pyrus.com/ru/jobs/crm-frontend-performance-developer\nЗП: 250k\n\nСобес проводил лид бэка почему-то, вопросы странные как по мне, как-будто и не хотели кого-то брать.\n\nВопросы:\n- расскажи о себе, о компании (прогуглит компанию в сбисе)\n- самая интересная задача\n- сколько онлайна\n- сколько сотрудников\n- про команду вопросы\n\nТех вопросы: \n1) Есть отдельные приложения для десктопа и для мобилки, как отображать в зависимости от...",
        "full_content": "2024-12-30 18:47:39\n Damir -> 2071074234:\nКомпания: Pyrus\nВакансия: https://pyrus.com/ru/jobs/crm-frontend-performance-developer\nЗП: 250k\n\nСобес проводил лид бэка почему-то, вопросы странные как по мне, как-будто и не хотели кого-то брать.\n\nВопросы:\n- расскажи о себе, о компании (прогуглит компанию в сбисе)\n- самая интересная задача\n- сколько онлайна\n- сколько сотрудников\n- про команду вопросы\n\nТех вопросы: \n1) Есть отдельные приложения для десктопа и для мобилки, как отображать в зависимости от устройства пользователя? Зачем так вообще делать, если можно сделать адаптив? \n2) Что такое jwt токен? Из чего состоит? \n3) Где подпись jwt токена хранится? \n4) Зачем два токена (access, refresh), почему не 1?\n5) Про xss было, способы защиты. - хочет услышать про санитайзеры - dom purify\n6) Как выкинуть со всех остальных устройств, если пользователь зашел с другого устройства? \n7) Как отобразить в реальном времени кол-во пользователей онлайн?  \n8 ) Как посчитать максимальное кол-во онлайна в каком-то определенном промежутке времени? У юзеров есть 2 поля время логина, и время логаута. По входным данным и по остальному никакой инфы он не говорил."
      },
      {
        "timestamp": "2024-11-24 11:28:16",
        "content": "2024-11-24 11:28:16\n George Nizamutdinow -> 2071074234:\nКомпания: Pyrus\nВакания: https://hh.ru/vacancy/109729138\nЗП: не указана (озвучил от 240000р на руки)\n\nВопросы(hr-скрининг): \n1) Что такое алгоритмическая сложность?\n2) Какая сложность у быстрой сортировки?\n3) Почему сравнение объектов с одинаковым содержимым вернет false?\n4) Чем отличаются микротоки и макротаски?\n5) Что такое хеши и зачем они нужны? Можно ли по хешу вернуть значение из которого он был сделан\n6) Виды авторизации? Расскажи пр...",
        "full_content": "2024-11-24 11:28:16\n George Nizamutdinow -> 2071074234:\nКомпания: Pyrus\nВакания: https://hh.ru/vacancy/109729138\nЗП: не указана (озвучил от 240000р на руки)\n\nВопросы(hr-скрининг): \n1) Что такое алгоритмическая сложность?\n2) Какая сложность у быстрой сортировки?\n3) Почему сравнение объектов с одинаковым содержимым вернет false?\n4) Чем отличаются микротоки и макротаски?\n5) Что такое хеши и зачем они нужны? Можно ли по хешу вернуть значение из которого он был сделан\n6) Виды авторизации? Расскажи про JWT\n7) Как реализовать методы жизненного цикла на функциональных компонентах?\n8) Логическая задача: есть 8 монет, 1 фальшивая. Есть весы, которые дают понять равенство или неравенство в весе. Сколько минимум взвешиваний надо, чтоб вычислить фальшивую?"
      },
      {
        "timestamp": "2024-07-24 04:49:05",
        "content": "2024-07-24 04:49:05\n Ярослав Мудрый -> 2071074234:\n- Pyrus\n- ссылка: https://kazan.hh.ru/vacancy/102753364\n- зп: 250+\n- вопросы:\n\n1)Что делать, если бразуер не поддерживает методы которые ты используешь? (использовать полифилы)\n2)Где хранить данные, если нужно передавать инфу о товарах в корзине между вкладками? (localStorage, eventListener(’storage’)\n3)Как работает авторизация через внешние сервисы\n4)Куда хочешь развиваться?\n5)Всплытие/опускание событий, делигирование событий",
        "full_content": "2024-07-24 04:49:05\n Ярослав Мудрый -> 2071074234:\n- Pyrus\n- ссылка: https://kazan.hh.ru/vacancy/102753364\n- зп: 250+\n- вопросы:\n\n1)Что делать, если бразуер не поддерживает методы которые ты используешь? (использовать полифилы)\n2)Где хранить данные, если нужно передавать инфу о товарах в корзине между вкладками? (localStorage, eventListener(’storage’)\n3)Как работает авторизация через внешние сервисы\n4)Куда хочешь развиваться?\n5)Всплытие/опускание событий, делигирование событий"
      },
      {
        "timestamp": "2024-07-08 10:11:36",
        "content": "2024-07-08 10:11:36\n Ramis Mubarakov -> 2071074234:\n— Компания: Pyrus, hr-скрининг\n— Ссылка на вакансию: https://kazan.hh.ru/vacancy/102753364?hhtmFrom=chat\n— Озвученная мной ЗП: 250k+\n— Вопросы:\n1) Что такое алгоритмическая сложность?\n2) Какая сложность у быстрой сортировки?\n3) Почему сравнение объектов с одинаковым содержимым дает false?\n4) Чем отличаются микротаски и макротаски?\n5) Что такое хеши и  зачем они нужны?\n6) Виды авторизации? Расскажи про JWT\n7) Как реализовать методы жизненного ци...",
        "full_content": "2024-07-08 10:11:36\n Ramis Mubarakov -> 2071074234:\n— Компания: Pyrus, hr-скрининг\n— Ссылка на вакансию: https://kazan.hh.ru/vacancy/102753364?hhtmFrom=chat\n— Озвученная мной ЗП: 250k+\n— Вопросы:\n1) Что такое алгоритмическая сложность?\n2) Какая сложность у быстрой сортировки?\n3) Почему сравнение объектов с одинаковым содержимым дает false?\n4) Чем отличаются микротаски и макротаски?\n5) Что такое хеши и  зачем они нужны?\n6) Виды авторизации? Расскажи про JWT\n7) Как реализовать методы жизненного цикла в функциональном компоненте?\n8) Логическая задача на подумать: есть 8 монет, 1 фальшивая. Есть весы, которые дают понять равенство или неравенство в весе. Сколько минимум взвешиваний надо, чтоб вычислить фальшивую?"
      }
    ]
  },
  {
    "company": "Газпромбанк",
    "count": 7,
    "records": [
      {
        "timestamp": "2024-11-14 08:21:40",
        "content": "2024-11-14 08:21:40\n аыеъа -> 2071074234:\nIT_One -> Газпромбанк\nЗП: 250к+\nВакансия: https://www.it-one.ru/vacancies/8537527ed0e913887e186041477b5ce8/\nВопросы:\nСпросили только рассказать о себе\nconsole.log(typeof f1);\nconsole.log(typeof f2);\nconsole.log(typeof f3);\n\nfunction f1 () {}\nvar f2 = function () {};\nlet f3 = function () {};\n\n// undefined\n// undefined\n// error\n\nvar o= {};\nvar i = 0;\n\n(function () {\n            o.a = 'a';\n            i++;\n})();\nconsole.log(o, i);\n\n(function (o, i) {\n      ...",
        "full_content": "2024-11-14 08:21:40\n аыеъа -> 2071074234:\nIT_One -> Газпромбанк\nЗП: 250к+\nВакансия: https://www.it-one.ru/vacancies/8537527ed0e913887e186041477b5ce8/\nВопросы:\nСпросили только рассказать о себе\nconsole.log(typeof f1);\nconsole.log(typeof f2);\nconsole.log(typeof f3);\n\nfunction f1 () {}\nvar f2 = function () {};\nlet f3 = function () {};\n\n// undefined\n// undefined\n// error\n\nvar o= {};\nvar i = 0;\n\n(function () {\n            o.a = 'a';\n            i++;\n})();\nconsole.log(o, i);\n\n(function (o, i) {\n            o.b = 'b';\n            i++;\n})(o, i);\nconsole.log(o, i);\n\n// {}, 0 -> { a: 'a' }, 1\n// { b: 'b' }, 1 -> { a: 'a', b: 'b' }, 2 | {a: 'a', b: 'b' }, 1\n\nlet o = {};\nlet i = 0;\n\nconst f1 = () => {\n            o.a = 'a';\n            i++;\n}\nf1();\nconsole.log(o, i);\n\nconst f2 = (o, i) => {\n            o.b = 'b';\n            i++;\n}\nf2(o, i);\nconsole.log(o, i);\n// { a: 'a' }, 1\n// { a: 'a', b: 'b' }, 2 | { a: 'a', b: 'b' }, 1\n\nconst f1 = function () { console.log(this) }\nconst f2 = () => { console.log(this) }\n\nf1()\nf2()\n// window\n// window\n\nvar o = {}\nvar a = []\n\nconsole.warn(o == a)\nconsole.warn(o === a)\nconsole.warn(typeof o == typeof a)\nconsole.warn(typeof o === typeof a)\n\n// false\n// false\n// true\n// true\n\nfetch('http://www.speedtest.net')\n            .then(function(response) {\n                        console.log(response);\n            })\n            .catch(function (error) {\n                        console.error(error);\n            })\n            ;\nwhile ( true ) console.log(1);\n\nIIFE\nconst f1 = () => { f1() }\n(() => {})()"
      },
      {
        "timestamp": "2024-11-07 12:22:23",
        "content": "2024-11-07 12:22:23\n аыеъа -> 2071074234:\nIT_One -> Газпромбанк\nЗП: 250к\nВакансия: https://www.it-one.ru/vacancies/3ecb9c7e26d84d0a9820b9e8ce108395/\nВидео:",
        "full_content": "2024-11-07 12:22:23\n аыеъа -> 2071074234:\nIT_One -> Газпромбанк\nЗП: 250к\nВакансия: https://www.it-one.ru/vacancies/3ecb9c7e26d84d0a9820b9e8ce108395/\nВидео:"
      },
      {
        "timestamp": "2024-09-24 16:36:34",
        "content": "2024-09-24 16:36:34\n Александр -> 2071074234:\nКомпания: Газпромбанк\nВакансия: HR сама написала \nЗП: 250к\nЗадачи и вопросы были один в один как у Тимофея https://t.me/c/2071074234/489/52491",
        "full_content": "2024-09-24 16:36:34\n Александр -> 2071074234:\nКомпания: Газпромбанк\nВакансия: HR сама написала \nЗП: 250к\nЗадачи и вопросы были один в один как у Тимофея https://t.me/c/2071074234/489/52491"
      },
      {
        "timestamp": "2024-08-21 06:48:07",
        "content": "2024-08-21 06:48:07\n Timofei Syromiatnikov -> 2071074234:\n— Название компании: Газпромбанк (проект с контрактами)\n— Ссылка: написала hr\n— ЗП: 280+\n— Вопросы:\n1) Чем бы тебе хотелось заниматься во фронтовой части?\n2) Что можете рассказать о понятиях repaint, reflow? Какие рекомендации в написании производительно кода можете дать, отталкиваясь от этих понятий?\n3) В чём техническая и визуальная разница между {visibility: hidden}, {display: none} и {opacity: 0} при скрытии элемента?\n\n— Задачи:\n1) Ка...",
        "full_content": "2024-08-21 06:48:07\n Timofei Syromiatnikov -> 2071074234:\n— Название компании: Газпромбанк (проект с контрактами)\n— Ссылка: написала hr\n— ЗП: 280+\n— Вопросы:\n1) Чем бы тебе хотелось заниматься во фронтовой части?\n2) Что можете рассказать о понятиях repaint, reflow? Какие рекомендации в написании производительно кода можете дать, отталкиваясь от этих понятий?\n3) В чём техническая и визуальная разница между {visibility: hidden}, {display: none} и {opacity: 0} при скрытии элемента?\n\n— Задачи:\n1) Как распределяются приоритеты CSS селекторов? Какого размера будет текст?\n<div id=“test” class=“hello” style=“font-size: 8px;”>text here</div>\n\n#test {\n  font-size: 20px;\n}\n\n.hello {\n  font-size: 10px;\n}\n2) Представьте, что вам надо записать в переменную \"arr\" массив из 50 элементов, со значениями элементов от 1 до 50, соответственно, как вы это сделаете? (Через Array.fill, или for () {})\n3) Напишите функцию sum, которая принимает произвольное количество аргументов и возвращает их сумму или конкатенирует их по правилам js.\nconsole.log(sum(1, 2, 3)); // 6\nconsole.log(sum(1, 2, '3')); // '33'\nconsole.log(sum('1', 2, 3)); // '123'\n4) В каком порядке выведутся консоль логи?\n// setTimeout(() => console.log(1));\n\n// Promise.reject(2).catch(console.log);\n\n// Promise.resolve().then(() => setTimeout(() => console.log(3)));\n\n// new Promise((resolve) => setTimeout(resolve)).then(() => console.log(4));\n\n// Promise.resolve(5).then(console.log);\n\n// setTimeout(() => console.log(6));\n\n// console.log(7);\n\n// 7 2 5 1 6 3 4\n5) Реши проблему. Сейчас каждую секунду в консоль лог выводится значение каунта. Но есть проблема, при клике на кнопку increment, в консоль лог выводятся сразу несколько значений в секунду (старое, новое). А должно выводится только новое.\nimport { useState } from \"react\";\nimport \"./styles.css\";\n\nconst TestCounter = () => {\n  const [counter, setCounter] = useState(0);\n  setInterval(() => console.log(counter), 1000);\n  const hadleClick = () => setCounter(counter + 1);\n\n  return (\n    <div className=\"App\">\n      <span>current counter: {counter}</span>\n      <button onClick={hadleClick}>increment</button>\n    </div>\n  );\n};\n\nexport default function App() {\n  return <TestCounter />;\n}"
      },
      {
        "timestamp": "2024-08-20 07:49:44",
        "content": "2024-08-20 07:49:44\n Timofei Syromiatnikov -> 2071074234:\nа, а ты не собесился конкретно в газпромбанк?",
        "full_content": "2024-08-20 07:49:44\n Timofei Syromiatnikov -> 2071074234:\nа, а ты не собесился конкретно в газпромбанк?"
      },
      {
        "timestamp": "2024-07-04 06:45:52",
        "content": "2024-07-04 06:45:52\n Artur -> 2071074234:\nГазпромбанк Автолизинг\n\nсозвон с руководителем веб разработки\n\n— Вакансия: нашел в тг\n— ЗП: говорил 200к+\n— Итог: ✅ сделали пре-оффер на 250к на руки, по году на руки 270к\n\nВопросы:\n— расскажи о себе, упор на сложности и достижения\n— как мультиязычность личного кабинета реализовывал\n— почему для работы с картами использовали react-google-maps, а не например яндексовые карты\n— pixel perfect верстка, как ты это реализовывал, что для тебя означает pixel per...",
        "full_content": "2024-07-04 06:45:52\n Artur -> 2071074234:\nГазпромбанк Автолизинг\n\nсозвон с руководителем веб разработки\n\n— Вакансия: нашел в тг\n— ЗП: говорил 200к+\n— Итог: ✅ сделали пре-оффер на 250к на руки, по году на руки 270к\n\nВопросы:\n— расскажи о себе, упор на сложности и достижения\n— как мультиязычность личного кабинета реализовывал\n— почему для работы с картами использовали react-google-maps, а не например яндексовые карты\n— pixel perfect верстка, как ты это реализовывал, что для тебя означает pixel perfect\n— насколько ты готов отстаивать свое мнение\n— как авторизацию реализовывал, токены\n— резюме за один раз писал или дополнял моменты\n— что ты вкладываешь в фразу \"работал с командой\" в своем резюме\n— кем ты себя считаешь, изолированный ты или душа компании\n— любишь ли ты критиковать\n— логирование запросов, как было реализовано, где их хранил\n— коллеги сказали, что у тебя два оффера, как ты определяешь их ценность помимо зп и стека технологий\n— что для тебя важно в команде\n— ты закончил работу в 18:00, что ты будешь делать, какие хобби\n— были ли выгорания, если да, то как справлялся"
      },
      {
        "timestamp": "2024-07-02 09:59:20",
        "content": "2024-07-02 09:59:20\n Artur -> 2071074234:\nГазпромбанк автолизинг\nВакансия: нашел в тг\nЗП: говорил 200к+\n\nЗадача:\nреализовать отображение списка элементов, сделать пагинацию\n\nитог: не успел доделать, но он сказал, что логика правильная, оставалось только отрефакторить\n\n\nчто успел написать:\nimport React, { useState, useEffect } from 'react';\n\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts'\n\nexport default function Component() {\n  const [posts, setPosts] = useState([])\n  const [curre...",
        "full_content": "2024-07-02 09:59:20\n Artur -> 2071074234:\nГазпромбанк автолизинг\nВакансия: нашел в тг\nЗП: говорил 200к+\n\nЗадача:\nреализовать отображение списка элементов, сделать пагинацию\n\nитог: не успел доделать, но он сказал, что логика правильная, оставалось только отрефакторить\n\n\nчто успел написать:\nimport React, { useState, useEffect } from 'react';\n\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts'\n\nexport default function Component() {\n  const [posts, setPosts] = useState([])\n  const [currentPage, setCurrentPage] = useState(1)\n  const totalPosts = posts.length\n  const totalPages = Math.ceil(totalPosts / 10)\n  const startIndex = (currentPage - 1)*10\n  const selectedPosts = posts.slice(startIndex, startIndex + 10)\n    \n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(POSTS_URL)\n        const postsData = await res.json()\n        setPosts(postsData)\n      } catch(err) {\n        console.error(err)\n      }\n    })()\n  }, [])\n  \n  const handlePageChange = (page) => {\n    setCurrentPage(page)\n  }\n\n    return (\n    <div>\n        <ul>\n        {posts.map((item) => {\n        return <li key={item.id}>{item.title}</li>\n      })}\n        </ul>\n\n    <div className='pagination'>\n          {Array.from({length: totalPages}, (_, index) => (\n        <button key={index + 1} onClick={() => handlePageChange(index + 1)}>\n          {index + 1}\n         </button>\n        ))}\n      </div>\n    </div>\n    );\n}"
      }
    ]
  },
  {
    "company": "Точка Банк",
    "count": 7,
    "records": [
      {
        "timestamp": "2025-06-08 07:16:22",
        "content": "2025-06-08 07:16:22\n Kirichelli -> 2071074234:\nКомпания: Точка банк\nВакансия: https://tochka.com/hr/it/frontend/\n\nЗадачи:\n\nfunction wtf(s) {\n  for (var i = s.length - 1, o = ''; i >= 0; o += s[i--]) {} return o;\n}\n\nconsole.log(wtfNew([1,2,3])) /// '321'\n\n\n\nfunction wtfNew(arr) {\n    return [...arr].reverse().join('');\n}\n\nfunstion reverseString()\n\nString.prototype.reverse = function(){\n    return this.split('').reverse().join('')\n}\n\n\n// контексты \n\nclass Cat {\n    sound = 'meow';\n    say = () => ...",
        "full_content": "2025-06-08 07:16:22\n Kirichelli -> 2071074234:\nКомпания: Точка банк\nВакансия: https://tochka.com/hr/it/frontend/\n\nЗадачи:\n\nfunction wtf(s) {\n  for (var i = s.length - 1, o = ''; i >= 0; o += s[i--]) {} return o;\n}\n\nconsole.log(wtfNew([1,2,3])) /// '321'\n\n\n\nfunction wtfNew(arr) {\n    return [...arr].reverse().join('');\n}\n\nfunstion reverseString()\n\nString.prototype.reverse = function(){\n    return this.split('').reverse().join('')\n}\n\n\n// контексты \n\nclass Cat {\n    sound = 'meow';\n    say = () => {\n        console.log(this.sound);\n    };\n    say2() {\n        console.log(this.sound);\n    };\n};\n\nfunction Cat(){\n    this.sound = 'meow';\n    this.say = () => {\n        console.log(this.sound)\n    }\n    this.say2 = function() {\n        console.log(this.sound)\n    }\n}\n\nObject.defineProperty(Cat.prototype, 'say2', {\n    value: function() {\n        console.log(this.sound)\n    }\n})\n\nconst myCat = {\n    sound: 'meow',\n    say: () => {\n        console.log(this.sound);\n    },\n    say2: function () {\n        console.log(this.sound);\n    }\n}\n\nconst cat = new Cat();\n\ncat.say(); // meow \ncat.say2(); // meow\nmyCat.say(); // undefined\nmyCat.say2(); // meow\n\n\n\nconsole.log(1);\n\nsetTimeout(() => console.log(2));\n\nPromise.reject(3).catch(console.log);\n\nnew Promise((resolve) => setTimeout(resolve)).then(() => console.log(4));\n\nrequestAnimaionFrame(() => console.log(7))\n\nPromise.resolve(5).then(console.log);\n\nconsole.log(6);\n\nP.S. RequestAnimationFrame не обязательно может быть в этой последовательности, можно сказать что выполняется после всех микро тасок\n// 1 6 3 5 7 2 4\n\n\nfunction func1() {\n    console.log(1);\n    return setTimeout(func1);\n}\n\nfunction func2() {\n    console.log(2);\n    return Promise.resolve().then(func2);\n}\n\nfunc1();\nfunc2();\n\n\n\n// any unknown never void enum \n\n\nlet first: any = 1;\nlet second: unknown = \"2\";\n\nlet firstString: string = first; // 1\nlet secondString: string = second; // \n\n\ntype Type1 = {\n    foo: string;\n    bar: string;\n}\n\ntype Type2 = {\n    state: string;\n    bar: string;\n}\n\nType1 | Type2 // foo bar state\nType1 & Type2 // bar\n\n\nfunction isType1(data: Type1 | Type2): data is Type1 {\n    return 'foo' in data\n}\n\n/// Дан пример, необходимо написать type guard функцию\n\ninterface User {\n    id: number;\n    login: string;\n}\n\nfetch('/api/user')\n    .then((r) => r.json())\n    .then((data: unknown) => {\n        if (isUser(user)) {\n          saveUserToStore(data);\n        }\n    });\n\nfunction saveUserToStore(user: User) {\n    \n}\n\n\nfunction isUser(data: unknown): data is User {\n    return (\n        data !== null &&\n        typeof data === 'object' &&\n        'id' in data &&\n        'login' in data && typeof data.id === 'number' &&\n        typeof data.login === 'string'\n    )\n}\n\n\n// Utillity types\n// Record, Omit, Pick, Partial, Required\n\n// Написать 2 Utillity types\n\ntype PartialType<K> = {\n    [key in keyof K]?: K[key];\n}\n\ntype PickType<T, keys extends keyof T> = {\n    [key in keys]: T[key];\n}\n\n//// React\n\n\nfunction AwesomeMenu({IsValid}) {\n    return <div className=\"container\">\n     {IsValid && <ValidControls/>}\n      <CoolComponent>123</CoolComponent>\n    </div>;\n\n}\n\n/// Мемоизация\n\n\nfunction Menu() {\n  const handleClick = useCallback(() => {\n    console.log('123');\n  },[])\n\n  return <MenuItem handleClick={handleClick}>123</MenuItem>\n}\n\nconst MenuItem = memo((props) => {\n  return <div onClick={props.handleClick}>123</div>\n});\n\n// Переписать на функциональный компонент\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n    setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Привет, мир!</h1>\n        <h2>Сейчас {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}"
      },
      {
        "timestamp": "2024-06-27 11:56:38",
        "content": "2024-06-27 11:56:38\n Vladislav Ershov -> 2071074234:\nКомпания: Точка банк\nНа созвоне с hr были тех. вопросы\n\n- Что такое мемоизация\n- Что такое реконсилейшн\n- Дескрипторы объектов\n- Тип данных Symbol. Приходилось ли использовать? Как использовал?\n- По каким правилам работает TS?\n- Во что компилируется TS?",
        "full_content": "2024-06-27 11:56:38\n Vladislav Ershov -> 2071074234:\nКомпания: Точка банк\nНа созвоне с hr были тех. вопросы\n\n- Что такое мемоизация\n- Что такое реконсилейшн\n- Дескрипторы объектов\n- Тип данных Symbol. Приходилось ли использовать? Как использовал?\n- По каким правилам работает TS?\n- Во что компилируется TS?"
      },
      {
        "timestamp": "2024-06-18 12:59:01",
        "content": "2024-06-18 12:59:01\n 110100001001101011010001100000101101000010111110 -> 2071074234:\n- Точка банк\n- Вакансия https://tochka.com/hr/it/frontend\n- зп 250. Максимум 380\n- уровень Middle\nУспех собеса: ожидаю ответа от hr\n\nВопросы на скрининге:\n- почему ушел с работы?\n- самая сложная задача?\n- что ищешь?\n- event loop про последовательность выполнения\n- жизненный цикл компонентов\n- что такое мемоизация?\n- что такое реконсиляция?",
        "full_content": "2024-06-18 12:59:01\n 110100001001101011010001100000101101000010111110 -> 2071074234:\n- Точка банк\n- Вакансия https://tochka.com/hr/it/frontend\n- зп 250. Максимум 380\n- уровень Middle\nУспех собеса: ожидаю ответа от hr\n\nВопросы на скрининге:\n- почему ушел с работы?\n- самая сложная задача?\n- что ищешь?\n- event loop про последовательность выполнения\n- жизненный цикл компонентов\n- что такое мемоизация?\n- что такое реконсиляция?"
      },
      {
        "timestamp": "2024-06-14 14:03:28",
        "content": "2024-06-14 14:03:28\n Евгений Лямин -> 2071074234:\n— Точка Банк\n— Вакансия https://tochka.com/hr/it/frontend/\n— ЗП: 280\n— Запись собеседования https://youtu.be/Ba-1NAqQSR4\n— ❌\n— Фидбек:\nпо JS:\nПочитать про spread-оператор, про контекст исполнения, про классы и в частности про прототипы\n\nпо TS:\nПочитать про дженерики, объединение и пересечение типов\n\nпо React:\nПочитать про хуки",
        "full_content": "2024-06-14 14:03:28\n Евгений Лямин -> 2071074234:\n— Точка Банк\n— Вакансия https://tochka.com/hr/it/frontend/\n— ЗП: 280\n— Запись собеседования https://youtu.be/Ba-1NAqQSR4\n— ❌\n— Фидбек:\nпо JS:\nПочитать про spread-оператор, про контекст исполнения, про классы и в частности про прототипы\n\nпо TS:\nПочитать про дженерики, объединение и пересечение типов\n\nпо React:\nПочитать про хуки"
      },
      {
        "timestamp": "2024-06-08 08:12:15",
        "content": "2024-06-08 08:12:15\n Artur -> 2071074234:\nКомпания: Точка банк\nСсылка: https://tochka.com/hr/it/frontend/\nСсылка на собес: https://disk.yandex.ru/d/iWtO9vO3riodsg\nЗП: сказал 200к+\nУровень: Middle\nУспех собеса: ?\n\nЗадачи: \n\n////////////\n\nfunction wtf(s) {\n    \n  for (let i = s.length - 1, o = ''; i >= 0; o += s[i--]) {\n      \n  } \n  \n  return o;\n}\n\nfunction wtf2(s) {\n  if (typeof s === 'string' || Array.isArray(s)) {\n    return [...s].reverse().join('')\n  }\n\n  return ''\n}\n\nconsole.log(wtf('abc'))...",
        "full_content": "2024-06-08 08:12:15\n Artur -> 2071074234:\nКомпания: Точка банк\nСсылка: https://tochka.com/hr/it/frontend/\nСсылка на собес: https://disk.yandex.ru/d/iWtO9vO3riodsg\nЗП: сказал 200к+\nУровень: Middle\nУспех собеса: ?\n\nЗадачи: \n\n////////////\n\nfunction wtf(s) {\n    \n  for (let i = s.length - 1, o = ''; i >= 0; o += s[i--]) {\n      \n  } \n  \n  return o;\n}\n\nfunction wtf2(s) {\n  if (typeof s === 'string' || Array.isArray(s)) {\n    return [...s].reverse().join('')\n  }\n\n  return ''\n}\n\nconsole.log(wtf('abc')); // cba\nconsole.log(wtf(['a', 'b', 'c'])); // cba\nconsole.log(wtf({ a: 'b' }));\n\n\nlet str = 'abc';\nlet str2 = 'ctr';\n\nString.prototype.reverse = function reverse2() {\n    return Array.from(this).reverse().join('')\n}\n\nstr = str.reverse()\nsr2 = str2.reverse()\n\n\n////////////\n\nconsole.log(1);\n\nsetTimeout(() => {\n    console.log(2);\n}, 0);\n\nconsole.log(3);\n\nPromise.resolve().then(() => {\n    console.log(4);\n}).then(() => {\n    console.log(8);\n})\n\nPromise.reject().catch(() => {\n    console.log(9);\n})\n\nconsole.log(5);\n\nwhile('') {\n    console.log(6);\n}\n\nconsole.log(7);\n\n// 1, 3, 5, 7, 4, 9, 8, 2\n\n\nfunction func2() {\n  console.log(2);\n  return Promise.resolve().then(func2);\n}\n\nfunc2();\n\nfunction func1() {\n  console.log(1);\n  return setTimeout(func1);\n}\n\nfunc1();\n\n\n////////////\n\nclass Cat {\n    sound = 'meow';\n    say = () => {\n        console.log(this.sound);\n    };\n    say2 () {\n        console.log(this.sound);\n    };\n};\n\nconst myCat = {\n    sound: 'meow meow',\n    say: () => {\n        console.log(this.sound);\n    },\n    say2: function () {\n        console.log(this.sound);\n    }\n}\n\nconst cat = new Cat();\ncat.say(); // 'meow'\ncat.say2(); // error / meow\nmyCat.say(); // 'meow' / undefined\nmyCat.say2(); // 'meow'\n\n\nconst outSay = cat.say.bind(myCat)\nconst outSay2 = cat.say2.bind(cat)\nconst outSay3 = outSay2.say2.call(myCat)\n\noutSay(); // 'meow'\noutSay2(); // 'meow'\n\n\n////////////\n//  TS\n\nlet first: any = 1;\nlet second: unknown = 2 / 'str' / [1,2,3];\n\n\nlet firstString: string = first;\nlet secondString: string = second; // 'error'\n\nfunction isString(value: unknown): value is string {\n    return typeof value === \"string\"\n}\n\nif (isString(second)) {\n    let secondString: string = second\n}\n\n////////////\n\nfunction func<T>(value: unknown): value is T {\n    return value\n}\n\ntype T0 = {\n    field1?: number;\n    field2: string;\n    field3: boolean | undefined;\n}\n\ntype MyType = Required<T0>;\n\n//{\n//     field1: number;\n//     field2: string;\n//     field3: boolean | undefined;\n//}\n\ntype Required<T extends object> = {\n    [P in keyof T]-?: T[P]\n}\n\n\nenum Status {\n    Success = 'success',\n    Error = 'error',\n    Pending = 'pending'\n}\n\ntype Status = 'success' | 'error'\n\nconst statuses = {\n    Success = 'success',\n    Error = 'error',\n    Pending = 'pending'\n}\n\nfunction getData(data: unknown, status: Status): any {}\n\n////////////\n// react\n\n\nfunction Component() {\n  const [counter, setCounter] = useState(0);\n\n  const handleClick = useCallback(() => {\n    setCounter(s => s + 1);\n  }, []);\n\n  //if (counter % 2 === 0) {\n   // return <>\n   //   <Button handleClick={handleClick} key={'button'} />\n   // </>\n // }\n  \n  return <>\n    {(counter % 2 === 0) && <div>{counter}</div>}\n    <Button handleClick={handleClick} key={'button'} />\n  </>\n}\n\nfunction MyButton({ handleClick }) {\n    useEffect( () => {\n        console.log('mount')\n        return () => console.log('unmount')\n    }, [])\n    \n    console.log('render');\n  return <button onClick={handleClick}>\n    +\n  </button>\n}\n\nconst Button = memo(MyButton)"
      },
      {
        "timestamp": "2024-05-14 15:12:52",
        "content": "2024-05-14 15:12:52\n Руслан -> 2071074234:\n— Название компании: Точка банк\n— Вакансия: https://tochka.com/hr/it/frontend/\n— Успех: ❓\n— ЗП: 280 тыс. на руки\n— Вопросы от hr: \n1. Как работает мемоизация компонентов\n2. Что такое реконсиляция\n3. Приходилось ли работать с дескрипторами объектов",
        "full_content": "2024-05-14 15:12:52\n Руслан -> 2071074234:\n— Название компании: Точка банк\n— Вакансия: https://tochka.com/hr/it/frontend/\n— Успех: ❓\n— ЗП: 280 тыс. на руки\n— Вопросы от hr: \n1. Как работает мемоизация компонентов\n2. Что такое реконсиляция\n3. Приходилось ли работать с дескрипторами объектов"
      },
      {
        "timestamp": "2024-05-13 20:28:54",
        "content": "2024-05-13 20:28:54\n Aleksandr -> 2071074234:\nНазвание компании - Точка банк\nВакансия: https://tochka.com/hr/it/frontend/\nЗП: от 300 net запросил\nЗадачи: Немного теории, лайвкодинг \n// JS\nfunction wtf(s) {\n  for (var i = s.length - 1, o = ''; i >= 0; o += s[i--]) {} return o;\n}\n\nfunction convertToStrAndReverse(s: string | unknown[]): string {\n    if (!(Symbol.iterator in s.__proto__)) {\n        return ''\n    }\n\n    return Array.from(s).reverse().join('')\n}\n\nwtf('123') // '321'\nwtf([1, 2, 3]) // ...",
        "full_content": "2024-05-13 20:28:54\n Aleksandr -> 2071074234:\nНазвание компании - Точка банк\nВакансия: https://tochka.com/hr/it/frontend/\nЗП: от 300 net запросил\nЗадачи: Немного теории, лайвкодинг \n// JS\nfunction wtf(s) {\n  for (var i = s.length - 1, o = ''; i >= 0; o += s[i--]) {} return o;\n}\n\nfunction convertToStrAndReverse(s: string | unknown[]): string {\n    if (!(Symbol.iterator in s.__proto__)) {\n        return ''\n    }\n\n    return Array.from(s).reverse().join('')\n}\n\nwtf('123') // '321'\nwtf([1, 2, 3]) // '321'\n// @ts-ignore\nwtf({ length: 5 }) // Error <> ''\n\n'123'.convertToStrAndReverse();\n\nString.prototype.convertToStrAndReverse = function convertToStrAndReverse(): string {\n    return Array.from(this).reverse().join('');\n}\n\n// __proto__ vs prototype\n\n\n/////\n\n\nconst emitter = new Emitter();\n\nconst handlerTest = () => console.log('Ho-ho-ho!');\nemitter.on('foo', handlerTest);\nemitter.on('foo', (...data) => console.log('foo', ...data));\nemitter.on('bar', (data) => console.log('bar', data));\n\nemitter.emit('foo', 'Hello', 'World!');\n// Ho-ho-ho!\n// foo Hello World!\nemitter.emit('bar', 'Hello', 'World!');\n// bar Hello\n\nemitter.off('foo', handlerTest);\n\nemitter.emit('foo', 'Test');\n// foo Test\nemitter.emit('bar');\n// bar undefined\n\n\nclass Emitter {\n    const switchedEvents = {}\n    on(event: string, handler: (data: unknown[]) => void) {\n        this.switchedEvents[event] = [...this.switchedEvents[event], handler]\n    }\n    \n    emit(event: string, ...rest: unknown[]) {\n        this.switchedEvents[event].forEach((handler) => {\n            handler(...rest)\n        })\n    }\n    \n    off(event: string, handler: (data: unknown[]) => void) {\n        this.switchedEvents[event] = this.switchedEvents[event].filter((fn) => fn !== handler)\n    }\n}\n\n/////\n\ntypeof 5 // 'number'\ntypeof {} // 'object'\ntypeof new Promise((r) => r()) // 'object'\n\nPromise.resolve(5).then(data => {\n    console.log(typeof data); // number\n    return { foo: 1 };\n}).then(data => {\n    console.log(typeof data); // object\n    return Promise.reject(5);\n}).catch(data => {\n    console.log(typeof data); // number\n})\n\n/////\n\n// TS\n// any never void unknown\n\ntype TFrog = { quack: () => void, color: string };\nobj: { quack: () => void } & { color: string };\n\nconst a: unknown = { quack: () => {}, color: 'green' };\n\nfunction isFrog(obj: unknown): obj is TFrog {\n    if (quack in obj) {\n        return true;\n    }\n    return false;\n}\n\nif (isFrog(a)) {\n    a.quack();\n}\n\ntype TRet<T> = T extends () => infer T ? T : never;\n\n// () => number\n\n\n\n\n\n// React\n// Кликнули 3 раза, ушли со страницы\nfunction Component() {\n  // const [counter, setCounter] = useState(0);\n  const flagRef = useRef(0);\n\n  const handleClick = () => {\n    // setCounter(s => s + 1);\n    flagRef.current++;\n  };\n  \n  useEffect(() => {\n    // хотим слать аналитику только с последним значением счетчика\n        return () => sendAnalytics(flagRef.current);\n  }, []);\n\n  return <MyButton handleClick={handleClick} />;\n}\n\nconst MyButton = ({ handleClick }) => {\n  return <button onClick={handleClick}>\n    +\n  </button>;\n}\nЗапись: https://www.youtube.com/watch?v=Q7lsNwzKxhM&ab_channel=%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%A0%D1%8F%D0%B1%D0%BE%D0%B2\nУспех: ❌\nФидбек: Рекомендации от ребят: \n\nОтличие Prototype и proto\nКак проверить наличие итератора в прототипе?\n\nЧто происходит с type и interface в рантайме? И в целом во что компилируется TS\nПочему сделать typeof value === TMyType не получится?\nУглубиться в тайпгарды. Оператор is\nПочитать про infer\nКонфигурирование typescript\nconst enum vs enum\n\nКак работает useEffect со списком зависимостей\nuseRef для хранения переменных в функциональных компонентах\nповторить классовые компоненты \n\nКнижка YouDont Known JS - всю базу повторить\nКнижка \"Эффективный TypeScript 62 способа улучшить код\"\n\nКомментарий от себя: Не видно зум, а так ребята максимально кайфовые на собесе, остался в приятном впечатлении после собеса. Потупил везде где-то чуток, а где-то не чуток)"
      }
    ]
  },
  {
    "company": "Согаз",
    "count": 6,
    "records": [
      {
        "timestamp": "2025-07-09 18:37:48",
        "content": "2025-07-09 18:37:48\n Fetisov Artem -> 2071074234:\nКомпания: Согаз\nЗп 250\n\nБыла только теория и вопросы по опыту: \n\n1. Рассказ про себя и свой опыт, затем несколько вопросов по задачам из резюме. \n2. Http и https(из чего состоит, отличия). Про версии http. \n3. Про dependencies и devDependencies(что для чего)\n4. Cors, preflight запрос, заголовки cors. \n5. Говорили про авторизацию, аутентификацию, работу с интерцепторами. Особое внимание заострял на 401 и 403 ошибках, в каких случаях прилетят. \n6. ...",
        "full_content": "2025-07-09 18:37:48\n Fetisov Artem -> 2071074234:\nКомпания: Согаз\nЗп 250\n\nБыла только теория и вопросы по опыту: \n\n1. Рассказ про себя и свой опыт, затем несколько вопросов по задачам из резюме. \n2. Http и https(из чего состоит, отличия). Про версии http. \n3. Про dependencies и devDependencies(что для чего)\n4. Cors, preflight запрос, заголовки cors. \n5. Говорили про авторизацию, аутентификацию, работу с интерцепторами. Особое внимание заострял на 401 и 403 ошибках, в каких случаях прилетят. \n6. Cookies. Откуда прилетают, кто их устанавливает, что они хранят( больше про refresh token), заголовки secure, http only, sameSite. \n7. С какими сборщиками работал и зачем они нужны. Отличия лоадеров и плагинов. Сколько лоадеров нужно чтобы подключить scss. Что такое билд. \n8. Можно ли упасть с ошибкой CORS в Postman\n9. Говорили про fsd и как бы я организовал структуру папок одной фичи  следуя fsd. \n10. React, его минусы и плюсы. \n11. Typescript, его минусы и плюсы. \n12. Отличия type и interface. \n13. Отличия unknown, never, void\n14. Какими utility types пользуешься чаще всего. \n15. Declare modules, интересовала именно типизация сторонних библиотек для которых нет типов. \n16. Паттерн MVC в парадигме redux. В подробностях."
      },
      {
        "timestamp": "2025-07-04 17:58:11",
        "content": "2025-07-04 17:58:11\n Sentry -> 2071074234:\nКомпания: Согаз\nЗп: 260\n\nЗадач не было.\n\nДолго копались в опыте, пояснял людям за технологии. \n\nВопросы\nЧто такое каскад в css?\nСпецифичность селектора в css?\nЗачем нужен БЭМ?\nКак работают корсы?\nЗаголовки HTTP Запроса?\nКак мы должны устанавливать ноду в проекте чтобы именно промежуток нод использовался?\nПрототипное наследование в js. \nЧто является прототипом в функции?\nEventLoop?",
        "full_content": "2025-07-04 17:58:11\n Sentry -> 2071074234:\nКомпания: Согаз\nЗп: 260\n\nЗадач не было.\n\nДолго копались в опыте, пояснял людям за технологии. \n\nВопросы\nЧто такое каскад в css?\nСпецифичность селектора в css?\nЗачем нужен БЭМ?\nКак работают корсы?\nЗаголовки HTTP Запроса?\nКак мы должны устанавливать ноду в проекте чтобы именно промежуток нод использовался?\nПрототипное наследование в js. \nЧто является прототипом в функции?\nEventLoop?"
      },
      {
        "timestamp": "2025-06-30 14:09:46",
        "content": "2025-06-30 14:09:46\n Евгений -> 2071074234:\nКомпания: Согаз\nПроект: Страхование грузов\nВстреча с РО и аналитиком , рассказали про то как у них устроено, амбиции\nспрашивали по опыту и софтам \n\nВопросы: \nПочему стал разрабом\nПочему именно в страховую компанию\nКак ты будешь действовать если прилетела задача которая не нравится\nКак будешь действовать если вы с другим разрабом делаете один компонет\nПочему ушел с прошлой работы\nЧто мотивирует\nЧто нужно чтобы тобой управлять\nКак поведешь себя в конфлик...",
        "full_content": "2025-06-30 14:09:46\n Евгений -> 2071074234:\nКомпания: Согаз\nПроект: Страхование грузов\nВстреча с РО и аналитиком , рассказали про то как у них устроено, амбиции\nспрашивали по опыту и софтам \n\nВопросы: \nПочему стал разрабом\nПочему именно в страховую компанию\nКак ты будешь действовать если прилетела задача которая не нравится\nКак будешь действовать если вы с другим разрабом делаете один компонет\nПочему ушел с прошлой работы\nЧто мотивирует\nЧто нужно чтобы тобой управлять\nКак поведешь себя в конфликте"
      },
      {
        "timestamp": "2025-06-26 13:54:21",
        "content": "2025-06-26 13:54:21\n Евгений -> 2071074234:\nКомпания Согаз\nЗП: от 230\nГибрид\n\nОбщались с продукт овнером, нужен 1 фронт на проект,но вроде в дальнейшем будут набирать еще,  амбиций куча вроде как на все деньги есть, хотя бы раз в неделю приезжать в офис. \nПо теории не гоняли, чуть спросил про опыт что делал, какие хобби.",
        "full_content": "2025-06-26 13:54:21\n Евгений -> 2071074234:\nКомпания Согаз\nЗП: от 230\nГибрид\n\nОбщались с продукт овнером, нужен 1 фронт на проект,но вроде в дальнейшем будут набирать еще,  амбиций куча вроде как на все деньги есть, хотя бы раз в неделю приезжать в офис. \nПо теории не гоняли, чуть спросил про опыт что делал, какие хобби."
      },
      {
        "timestamp": "2025-06-18 15:33:57",
        "content": "2025-06-18 15:33:57\n Евгений -> 2071074234:\nСОГАЗ \nзп от 230 \nТолько теория, задач не было (хотя обещали полтора часа лайвкодинга)\nВопросы: \n1. С какими сборщиками работал\n2. Разница между dev зависимостей и нет\n3. Что такое npm \n4. Из чего состоит запрос\n5. Обязательно ли метод DELETE гарантировано что-то удалит\n6. Можно ли упасть с ошибкой CORS в postman \n7. FSD рассказать принцип , базовые правила\n8. Что такое SPA \n9. Как бы ты делал приватные страницы \n10. Как проверить авторизованный ли пол...",
        "full_content": "2025-06-18 15:33:57\n Евгений -> 2071074234:\nСОГАЗ \nзп от 230 \nТолько теория, задач не было (хотя обещали полтора часа лайвкодинга)\nВопросы: \n1. С какими сборщиками работал\n2. Разница между dev зависимостей и нет\n3. Что такое npm \n4. Из чего состоит запрос\n5. Обязательно ли метод DELETE гарантировано что-то удалит\n6. Можно ли упасть с ошибкой CORS в postman \n7. FSD рассказать принцип , базовые правила\n8. Что такое SPA \n9. Как бы ты делал приватные страницы \n10. Как проверить авторизованный ли пользователь\n11. Как бы ты делал авторизацию (как построил логику)"
      },
      {
        "timestamp": "2024-12-06 07:17:33",
        "content": "2024-12-06 07:17:33\n Mikhail Sorokin -> 2071074234:\nКомпания Согаз\n- как устроена архитектура fsd \n- как работают лоадеры, могу ли написать свой(только спросили, писать не предлагали)\n- секция external в webpack\n- как браузер понимает, что нужно обращаться к ближайшему серверу CDN\n- CSRF что такое \n- как собирать бандл и как это влияет на скорость приложения\n- как настроить webpack на несколько точек входа\n- как можно кешировать изображения, рассказать про механизм кеширования как устроен, как з...",
        "full_content": "2024-12-06 07:17:33\n Mikhail Sorokin -> 2071074234:\nКомпания Согаз\n- как устроена архитектура fsd \n- как работают лоадеры, могу ли написать свой(только спросили, писать не предлагали)\n- секция external в webpack\n- как браузер понимает, что нужно обращаться к ближайшему серверу CDN\n- CSRF что такое \n- как собирать бандл и как это влияет на скорость приложения\n- как настроить webpack на несколько точек входа\n- как можно кешировать изображения, рассказать про механизм кеширования как устроен, как заставить браузер использовать кеш конкретного ресурса\n- как установить время хранения в кеше\n- оптимизация скорости загрузки на фронте\n- lighthouse как работает\n- в дев режиме, когда бандл собирается, реакт дергает наши компоненты дважды, зачем?\n- в какой момент срабатывает useEffect\n- commit в реакте что это\n- почему нельзя передавать асинхронную функцию в useEffect\n- чего не может быть в useEffect\n- можно ли менять state в useEffect\n- как работает Context\n- как работает eventLoop\n- как устроено наследование в js\n- какой прототип у функции\n- функция конструктор что такое\n- как в packaje.json указать версию node и пакетного менеджера?\n- поле type в package.json что это\n- зачем нужен package-lock.json"
      }
    ]
  },
  {
    "company": "Бюро 1440",
    "count": 6,
    "records": [
      {
        "timestamp": "2025-06-18 12:20:14",
        "content": "2025-06-18 12:20:14\n Egor -> 2071074234:\nБюро 1440 (финал команда платформы)\nЗп - от 350\nВакансия - закрыли вакансию\nЗапись - https://youtu.be/4E0LYLwx-34",
        "full_content": "2025-06-18 12:20:14\n Egor -> 2071074234:\nБюро 1440 (финал команда платформы)\nЗп - от 350\nВакансия - закрыли вакансию\nЗапись - https://youtu.be/4E0LYLwx-34"
        }



