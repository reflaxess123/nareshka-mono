[
  {
    "company": "Яндекс",
    "count": 126,
    "records": [
      {
        "timestamp": "2025-07-18 10:25:52",
        "content": "2025-07-18 10:25:52\n Daniil Daniil -> 2071074234:\nКомпания: Яндекс Финтех 1 этап\nЗадача 1:\nУсловий не сохранилось, но задачка была на то, что будет в консоле при обработке Promise\n      Ответы: В 4 строку вообще не зайдем. \n5 строка будет ответ 2\n8 строка undefined\nна 7 строку не попадем\n---\nЗадача 2: Задача на замыкание\n\nfunction runOnce(fn) {\n    let isCalled = false\n\n    return function(...args) {\n        if(isCalled) return undefined\n        isCalled = true\n\n        return fn(...args)\n}\n}\n\nЗ...",
        "full_content": "2025-07-18 10:25:52\n Daniil Daniil -> 2071074234:\nКомпания: Яндекс Финтех 1 этап\nЗадача 1:\nУсловий не сохранилось, но задачка была на то, что будет в консоле при обработке Promise\n      Ответы: В 4 строку вообще не зайдем. \n5 строка будет ответ 2\n8 строка undefined\nна 7 строку не попадем\n---\nЗадача 2: Задача на замыкание\n\nfunction runOnce(fn) {\n    let isCalled = false\n\n    return function(...args) {\n        if(isCalled) return undefined\n        isCalled = true\n\n        return fn(...args)\n}\n}\n\nЗадача 3:\n\nArray.prototype.groupBy = function (fn) {\nreturn this.reduce((result, item) => {\nconst key = fn(item) // Вычисляем ключ для текущего элемента\nif (!result[key]) {\n// Если такого ключа ещё нет в объекте\nresult[key] = [] // Создаём пустой массив для этого ключа\n}\nresult[key].push(item) // Добавляем элемент в соответствующую\nгруппу\nreturn result\n}, () // Начинаем с пустого объекта\n\n\nЗадача 4:\n\nfunction get(url, retry = 5) {\n    return fetch(url).then(res => res.json()).catch(err=> {\n        if (retry > 0) {\n           const newRetry = retry - 1;\n            return get(url, newRetry)\n        } else {\n            throw new Error('Заданный URL недоступен')\n        }\n    })\n}\n\nЗадача 5:\n\nconstructor() {\nthis.stack = []; // Основной стек для хранения элементов\nthis.maxStack = []; // Стек для отслеживания максимумов\n}\n\npush(elem) {\nthis.stack.push(elem);\n// Если maxStack пуст или новый элемент >= текущего\nмаксимума\nif (this.maxStack.length === 0 || elem >=\nthis.maxStack[this.maxStack.length - 1]) {\nthis.maxStack.push(elem);\n}\n}\n\nmax() {\nif (this.maxStack.length === 0) return -Infinity;\nreturn this.maxStack[this.maxStack.length - 1];\n}\n\npop() {\nconst popped = this.stack.pop();\n// Если удаляемый элемент равен текущему максимуму\nif (popped === this.maxStack[this.maxStack.length - 1]) {\nthis.maxStack.pop();\n}\nreturn popped;"
      },
      {
        "timestamp": "2025-07-17 20:49:57",
        "content": "2025-07-17 20:49:57\n Даниил -> 2071074234:\nЯндекс 1 этап технички\nЗП: говорил 250-300+\n\nЗадача 1\n\nНеобходимо написать функцию, которая на вход принимает url и retry, асинхронно ходит по этому урлу GET запросом и возвращает данные (json).\nДля получения данных использовать fetch.\nможно использовать только Promise API.\nЕсли во время запроса произошла ошибка, то пробовать запросить ещё 5 раз.\nЕсли в итоге информацию получить не удалось, вернуть ошибку \"Заданный URL недоступен\".\n\nfunction get(url, re...",
        "full_content": "2025-07-17 20:49:57\n Даниил -> 2071074234:\nЯндекс 1 этап технички\nЗП: говорил 250-300+\n\nЗадача 1\n\nНеобходимо написать функцию, которая на вход принимает url и retry, асинхронно ходит по этому урлу GET запросом и возвращает данные (json).\nДля получения данных использовать fetch.\nможно использовать только Promise API.\nЕсли во время запроса произошла ошибка, то пробовать запросить ещё 5 раз.\nЕсли в итоге информацию получить не удалось, вернуть ошибку \"Заданный URL недоступен\".\n\nfunction get(url, retry = 5) {\n        return fetch(url)\n        .then(res => res.json())\n        .catch(err => {\n            if (retry > 0) {\n                return get(url, retry - 1)\n            } else {\n                throw new Error('Заданный URL недоступен')\n            }\n        })\n    }\n\nЗадача 2\n\nРеализовать функцию compose, которая принимает\nпеременное количество функций и возвращает новую функцию.\nРезультат работы каждой функции передаетсяв следующую.\n\nfunction compose(...callbacks) {\n    return function (...args) {\n        const res = callbacks.reduceRight((acc, fn) => [fn(...args)], args);\n        return res[0];\n    }\n}\n\nЗадача 3\n\nРеализовать функцию isMonotonic, которая принимает\nмассив чисел и определяет, является ли он монотонным (не возрастающим или не убывающим).\n\nfunction isMonotonic(numbers) {\n    let direction = 0;\n\n    for (let i = 1; i < numbers.length; i++) {\n        const diff = numbers[i] - numbers[i - 1];\n\n        if (diff === 0) continue;\n\n        if (direction === 0) {\n            direction = diff > 0 ? 1 : -1;\n        } else if ((direction === 1 && diff < 0) || (direction === -1 && diff > 0)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nЗадача 4\n\nНужно написать полифилл для Array.protptype.some\nВозвращаемое значение true, если функция проверки возвращает truthy значение хотя бы для одного элемента массива. Иначе false.\n\nArray.prototype.some = function (callback, myThis) {\n    const bindedCallback = myThis ? callback.bind(myThis) : this;\n\n    for (let i = 0; i < this.length; i++) {\n        if (bindedCallback(this[i], i, this)) {\n            return true;\n        }\n    }\n\n    return false;\n}"
      },
      {
        "timestamp": "2025-07-14 13:42:11",
        "content": "2025-07-14 13:42:11\n Ivan Kulyaev -> 2071074234:\n1. Яндекс 1 этап\n2. Написала HR\n3. ЗП просил от 250к\n\nВопросы:\n\n1. Про опыт\n2. Виды рендеринга в Next.js\n3. Зачем нужен next.js\n4. SEO, метатеги, настройка его в Next.js\n5. Оптимизация некста\n6. PWA, service worker и другие виды веб-приложений (SPA, MPA)\n7. event-loop\n8. Всплытие и погружение\n9. Как отменить распространения события\n10. Где решаю задачи и как к ним готовлюсь\n11. Сложность алгоритма\n12. Как юзаю AI в работе\n\nЗадачи:\n\nВсе, кроме MaxS...",
        "full_content": "2025-07-14 13:42:11\n Ivan Kulyaev -> 2071074234:\n1. Яндекс 1 этап\n2. Написала HR\n3. ЗП просил от 250к\n\nВопросы:\n\n1. Про опыт\n2. Виды рендеринга в Next.js\n3. Зачем нужен next.js\n4. SEO, метатеги, настройка его в Next.js\n5. Оптимизация некста\n6. PWA, service worker и другие виды веб-приложений (SPA, MPA)\n7. event-loop\n8. Всплытие и погружение\n9. Как отменить распространения события\n10. Где решаю задачи и как к ним готовлюсь\n11. Сложность алгоритма\n12. Как юзаю AI в работе\n\nЗадачи:\n\nВсе, кроме MaxStack отсюда и sleep с intersection с этого собеса"
      },
      {
        "timestamp": "2025-07-13 04:26:44",
        "content": "2025-07-13 04:26:44\n Ruslan -> 2071074234:\nКомпания: Яндекс (10.07 1 этап ТЕХ)\nГоворили за опыт.\nЧто такое HTTP запросы?\nЧто такое CORS?\nКак реализовать работу CORS?\n\nЗадача Event loop\n\nconsole.log('apple');\n\nsetTimeout(() => console.log('pear'));\nrequestAnimationFrame(() => console.log('raspberry');\n// можно подушнить что setTimeout и requesAnimationFrame будут\n// выполняться в разной последовательности в зависимости от браузера\n\nPromise.resolve().then(() => console.log('melon'));\nnew Promise((...",
        "full_content": "2025-07-13 04:26:44\n Ruslan -> 2071074234:\nКомпания: Яндекс (10.07 1 этап ТЕХ)\nГоворили за опыт.\nЧто такое HTTP запросы?\nЧто такое CORS?\nКак реализовать работу CORS?\n\nЗадача Event loop\n\nconsole.log('apple');\n\nsetTimeout(() => console.log('pear'));\nrequestAnimationFrame(() => console.log('raspberry');\n// можно подушнить что setTimeout и requesAnimationFrame будут\n// выполняться в разной последовательности в зависимости от браузера\n\nPromise.resolve().then(() => console.log('melon'));\nnew Promise((resolve, reject) => {  \n console.log('orange');  \n .then(() => {\n  console.log('pineapple')\n })\n});\nconsole.log('lime')\n \n\nВторая задача это полный рефакторинг Реакт-компонента\nТребуется перепесать классовый компонент на компонент на хуках\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport TodoInput from './TodoInput';\nimport TodoItem from './TodoItem';\n\nconst generateID = () =>\n  `${Date.now().toString(36)}-${Math.random().toString(36).substr(2, 9)}`;\n\nconst Todo = () => {\n  const [todoItems, setTodoItems] = useState([]);\n  const [completedItemIds, setCompletedItemIds] = useState([]);\n\n  // Загрузка из localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('todos');\n    if (saved) {\n      try {\n        const parsed = JSON.parse(saved);\n        setTodoItems(parsed.todoItems || []);\n        setCompletedItemIds(parsed.completedItemIds || []);\n      } catch {\n        console.warn('Saved todos non-existent or corrupt.');\n      }\n    }\n  }, []);\n\n  // Сохранение в localStorage\n  useEffect(() => {\n    localStorage.setItem(\n      'todos',\n      JSON.stringify({ todoItems, completedItemIds })\n    );\n  }, [todoItems, completedItemIds]);\n\n  const addTodoItem = useCallback((text) => {\n    const newItem = { text, id: generateID() };\n    setTodoItems((prev) => [...prev, newItem]);\n  }, []);\n\n  const toggleItemCompleted = useCallback((id) => {\n    setCompletedItemIds((prev) =>\n      prev.includes(id)\n        ? prev.filter((itemId) => itemId !== id)\n        : [...prev, id]\n    );\n  }, []);\n\n  return (\n    <div className=\"todo-container\">\n      {todoItems.map((item) => (\n        <TodoItem\n          key={item.id}\n          {...item}\n          completedItemIds={completedItemIds}\n          toggleItemCompleted={toggleItemCompleted}\n        />\n      ))}\n      <TodoInput onAdd={addTodoItem} />\n    </div>\n  );\n};\n\nexport default Todo;"
      },
      {
        "timestamp": "2025-07-11 10:52:07",
        "content": "2025-07-11 10:52:07\n Эмир -> 2071074234:\nЯндекс 2 второй этап. Экспериментальный\nОбщее задание провести лайв ревью кода. \n\nБыл код со скроллом и запросами при скролле \nНужно оптимизировать \nНайти улучшения в коде\n\n1. Что такое и для чего чего нужен Debounce напиши его \n‘’’function debounce(func, delay) {\n  let timeoutId;\n  \n  return function(...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      func.apply(this, args);\n    }, delay);\n  };\n}\n‘’’\n2. Что такое и для чего н...",
        "full_content": "2025-07-11 10:52:07\n Эмир -> 2071074234:\nЯндекс 2 второй этап. Экспериментальный\nОбщее задание провести лайв ревью кода. \n\nБыл код со скроллом и запросами при скролле \nНужно оптимизировать \nНайти улучшения в коде\n\n1. Что такое и для чего чего нужен Debounce напиши его \n‘’’function debounce(func, delay) {\n  let timeoutId;\n  \n  return function(...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      func.apply(this, args);\n    }, delay);\n  };\n}\n‘’’\n2. Что такое и для чего нужен Throttle \n‘’’\n\nfunction throttle(func, delay) {\n  let lastCall = 0;\n  return function (...args) {\n    const now = Date.now();\n    if (now - lastCall >= delay) {\n      lastCall = now;\n      func.apply(this, args);\n    }\n  };\n}\n\n‘’’\n3. Что такое всплытие событий?\n4. Проведи ревью кода \n(Не сохранилось)\n5. Как отменить всплытие событий"
      },
      {
        "timestamp": "2025-07-10 20:28:31",
        "content": "2025-07-10 20:28:31\n Виталий -> 2071074234:\nЯндекс.\nпервый этап.\nHR написала.\nЗП не указана\n\n1. Селайте обертку над функцией, чтобы она вызывалась один раз. Всё последующие вызовы должны вернуть undefined\nfunction runOnce(fn) {\n  let isCalled = false;\n  return (...args) => {\n    if (isCalled) {\n      return undefined; // уже вызывалась — ничего не делаем\n    }\n    isCalled = true;\n    return fn(...args); // вызываем fn только один раз\n  };\n}\n\n2.Необходимо реализовать метод groupByб расширяющий с...",
        "full_content": "2025-07-10 20:28:31\n Виталий -> 2071074234:\nЯндекс.\nпервый этап.\nHR написала.\nЗП не указана\n\n1. Селайте обертку над функцией, чтобы она вызывалась один раз. Всё последующие вызовы должны вернуть undefined\nfunction runOnce(fn) {\n  let isCalled = false;\n  return (...args) => {\n    if (isCalled) {\n      return undefined; // уже вызывалась — ничего не делаем\n    }\n    isCalled = true;\n    return fn(...args); // вызываем fn только один раз\n  };\n}\n\n2.Необходимо реализовать метод groupByб расширяющий стандартный метод массивов. метод должен возвращать сгруппированную версию массива - объектаб в котором каждый ключ является результатом выполнения переданой функции fn(arr[i]), а каждое значение - массивом, содержащим исходный массив с этим ключом\nArray.prototype.groupBy = function (fn) {\n  return this.reduce((result, item) => {\n    const key = fn(item) // Вычисляем ключ для текущего элемента\n    if (!result[key]) {\n      // Если такого ключа ещё нет в объекте\n      result[key] = [] // Создаём пустой массив для этого ключа\n    }\n    result[key].push(item) // Добавляем элемент в соответствующую группу\n    return result\n  }, {}) // Начинаем с пустого объекта\n}\n\n3. использовать Promise API для реализации 5 запросов на сервер. далее выбрасывает ошибку\n\nfunction get(url, retriesLeft = 5) {\n    return new Promise((resolve, reject) => {\n        fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(response.status);\n                }\n                return response.json();\n            })\n            .then(data => resolve(data))\n            .catch(error => {\n                if (retriesLeft <= 1) {\n                    reject(new Error(\"Заданный URL недоступен\"));\n                } else {\n                    get(url, retriesLeft - 1).then(resolve).catch(reject);\n                }\n            });\n    });\n}\n\n\n\n\n 4. Реализовать структуру данных MaxStack, в которой есть методы:\n pop() – удаляет и возвращает последний добавленный элемент за O(1),\n         кидает исключение или возвращает ошибку, если стек пустой\n push(value) – добавляет элемент в стек за O(1)\n max() – возвращает максимальное значение среди всех элементов стека за O(1),\n          кидает исключение или возвращает ошибку, если стек пустой\n\nclass MaxStack {\n    constructor() {\n        this.stack = [];//\n        this.maxStack = []\n\n    }\n\n    push(a) {\n        this.stack.push(a)\n        if(this.maxStack.length === 0 || a >= this.maxStack[this.maxStack.length - 1]) {\n            this.maxStack.push(a)\n        }\n    }\n\n    pop(){\n        if(this.stack.length === 0) {\n            throw new Error(\"Стук Пуст...\")\n        }\n\n        const a = this.stack.pop()\n\n        if(a === this.maxStack[this.maxStack.length - 1]) {\n            this.maxStack.pop()\n        }\n        return a\n    }\n\n    max() {\n        if (this.maxStack.length === 0) {\n            throw new Error(\"Стек пуст\")\n        }\n        return this.maxStack[this.maxStack.length - 1]\n    }\n\n}"
      },
      {
        "timestamp": "2025-07-09 15:06:36",
        "content": "2025-07-09 15:06:36\n Артем Покатилов -> 2071074234:\nЯндекс Финтех Встреча с командой\nЗП: от 250к\nhr сам написал\n\nВопросы:\n1. Расскажи про задачи интересные\n2. Расскажи про процессы в команде какие были\n3. Было ли у вас дежурство\n4. Какими инструментами пользовались, когда падал прод\n5. Был ли настроен sentry изначально или сам настраивал\n6. По мимо задач по разработке новых фич, чем еще занимался?",
        "full_content": "2025-07-09 15:06:36\n Артем Покатилов -> 2071074234:\nЯндекс Финтех Встреча с командой\nЗП: от 250к\nhr сам написал\n\nВопросы:\n1. Расскажи про задачи интересные\n2. Расскажи про процессы в команде какие были\n3. Было ли у вас дежурство\n4. Какими инструментами пользовались, когда падал прод\n5. Был ли настроен sentry изначально или сам настраивал\n6. По мимо задач по разработке новых фич, чем еще занимался?"
      },
      {
        "timestamp": "2025-07-07 15:36:45",
        "content": "2025-07-07 15:36:45\n Fetisov Artem -> 2071074234:\n1. Яндекс 1 этап\nHR сама написала(сказала что ищут фронта в Яндекс Маркет)\nЗП 300к\n\n\n1. Сделать обертку над функцией, чтобы она вызывалась один раз. Все последующие вызовы должны вернуть undefined.\nfunction runOnce(fn) {\n  let isCalled = false;\n  return (...args) => {\n    if (isCalled) {\n      return undefined; // уже вызывалась — ничего не делаем\n    }\n    isCalled = true;\n    return fn(...args); // вызываем fn только один раз\n  };\n}\n\n2. Написат...",
        "full_content": "2025-07-07 15:36:45\n Fetisov Artem -> 2071074234:\n1. Яндекс 1 этап\nHR сама написала(сказала что ищут фронта в Яндекс Маркет)\nЗП 300к\n\n\n1. Сделать обертку над функцией, чтобы она вызывалась один раз. Все последующие вызовы должны вернуть undefined.\nfunction runOnce(fn) {\n  let isCalled = false;\n  return (...args) => {\n    if (isCalled) {\n      return undefined; // уже вызывалась — ничего не делаем\n    }\n    isCalled = true;\n    return fn(...args); // вызываем fn только один раз\n  };\n}\n\n2. Написать функцию которая спит определенное время а затем возвращает значение.\nfunction sleep(duration) {\n  // Возвращаем новый промис\n  return new Promise(resolve => {\n    // Используем setTimeout для задержки\n    setTimeout(() => {\n      // После завершения задержки, вызываем resolve промиса\n      resolve()\n    }, duration)\n  })\n}\n\n3. Необходимо реализовать метод groupBy, расширяющий стандартные методы массивов. Метод должен возвращать сгруппированную версию массива — объект, в котором каждый ключ является результатом выполнения переданной функции fn(arr[i]), а каждое значение — массивом, содержащим все элементы исходного массива с этим ключом.\nArray.prototype.groupBy = function (fn) {\n  return this.reduce((result, item) => {\n    const key = fn(item) // Вычисляем ключ для текущего элемента\n    if (!result[key]) {\n      // Если такого ключа ещё нет в объекте\n      result[key] = [] // Создаём пустой массив для этого ключа\n    }\n    result[key].push(item) // Добавляем элемент в соответствующую группу\n    return result\n  }, {}) // Начинаем с пустого объекта\n}\n\n\n4. Необходимо проверить решение задачи по двум сервисам, вызвав checkResult(url1, solution), checkResult(url2, solution)\ncheckResult: (url: string, solution: string | number) => Promise<boolean>;\n* Если оба запроса вернули true - вывести succes\n* Если хоть один вернул false - вывести fail\n* Если хоть зареджектился - вывести error\n* Если хоть один отвечает дольше 1 сек - вывести timeout\nimport { checkResult } from 'myLib'\n\nconst solution = 'Any answer'\nconst url1 = 'yandex.ru'\nconst url2 = 'google.com'\n\ncheckResult(url, solution)\ncheckResult(url, solution)\n\nasync function check() {\n  const TIMEOUT_MS = 1000\n\n  // Оборачиваем каждый вызов в Promise.race с таймаутом\n  const withTimeout = url => {\n    return Promise.race([\n      checkResult(url, solution), // основной вызов\n      new Promise(\n        (\n          _,\n          reject // таймаут\n        ) => setTimeout(() => reject(new Error('timeout')), TIMEOUT_MS)\n      ),\n    ])\n  }\n\n  try {\n    // Запускаем оба запроса параллельно\n    const [res1, res2] = await Promise.all([\n      withTimeout(url1),\n      withTimeout(url2),\n    ])\n\n    // Если оба true\n    if (res1 === true && res2 === true) {\n      console.log('success')\n    }\n    // Если хотя бы один false\n    else if (res1 === false || res2 === false) {\n      console.log('fail')\n    }\n  } catch (err) {\n    // Если ошибка — различаем таймаут и другую ошибку\n    if (err.message === 'timeout') {\n      console.log('timeout')\n    } else {\n      console.log('error')\n    }\n  }\n}\n\ncheck()\n\n5. У вас есть два пользователя, у каждого из которых записаны интервалы времени, когда они были свободны. Эти интервалы представлены в виде массива пар [start, end], где start - начало интервала, end - конец интервала. Интервалы у каждого пользователя отсортированы в порядке возрастания и не пересекаются между собой. Напишите функцию intersection(user1, user2), которая находит все интервалы времени, когда обы пользователя были свободны одновременно.\nfunction intersection(user1, user2) {\n  let i = 0;\n  let j = 0;\n  const result = [];\n\n  while (i < user1.length && j < user2.length) {\n    const [start1, end1] = user1[i];\n    const [start2, end2] = user2[j];\n\n    // вычисляем пересечение\n    const start = Math.max(start1, start2);\n    const end = Math.min(end1, end2);\n\n    if (start < end) {\n      result.push([start, end]);\n    }\n\n    // двигаем указатель в том массиве, у которого текущий интервал раньше заканчивается\n    if (end1 < end2) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return result;\n}"
      },
      {
        "timestamp": "2025-07-07 12:45:39",
        "content": "2025-07-07 12:45:39\n Никита -> 2071074234:\nЯндекс 2 этап\nЗП: от 240\n\nЗадача 1:\n/*\ninterface Message {\n    id: number\n    text: string\n}\n\nId самого первого сообщения = 1, а id каждого следующего сообщения на 1 больше, чем id предыдущего.\nНам нужно выводить сообщения в правильном порядке, однако сервер не гарантирует правильный порядок\nсообщений, отправляемых в наше приложение.\n\nТаймлайн:\n(приходит) 7 1 2 3 6 5 4    8\n(рисунок)   . 1 2 3 . . 4 5 6 7 8\n\nСообщения от сервера приходят в обработчик фу...",
        "full_content": "2025-07-07 12:45:39\n Никита -> 2071074234:\nЯндекс 2 этап\nЗП: от 240\n\nЗадача 1:\n/*\ninterface Message {\n    id: number\n    text: string\n}\n\nId самого первого сообщения = 1, а id каждого следующего сообщения на 1 больше, чем id предыдущего.\nНам нужно выводить сообщения в правильном порядке, однако сервер не гарантирует правильный порядок\nсообщений, отправляемых в наше приложение.\n\nТаймлайн:\n(приходит) 7 1 2 3 6 5 4    8\n(рисунок)   . 1 2 3 . . 4 5 6 7 8\n\nСообщения от сервера приходят в обработчик функции connect:\n\nconnect((msg) => {\n    ...\n});\n\nОтображать сообщения нужно с помощью функции `render`:\nrender(msg)\n*/\n\nconst solution = (connect, render) => {};\nfunction solution(connect, render) {\n  const map = new Map();  // Храним сообщения по id\n  let currId = 1;\n\n  connect((msg) => {\n    map.set(msg.id, msg); // Просто сохраняем сообщение по id\n\n    // Пока есть сообщение с ожидаемым id — рендерим и двигаемся дальше\n    while (map.has(currId)) {\n      const messageToRender = map.get(currId);\n      render(messageToRender); // Вызываем render прямо сейчас\n      map.delete(currId);      // Удаляем отрисованное сообщение\n      currId++;\n    }\n  });\n}\n\nЗадача 2\nНе решил (Решение из базы)\n//Дан массив ссылок: ['url1', 'url2', ...] и лимит одновременных запросов (limit) Необходимо реализовать функцию, которыя опросит урлы в том //порядку, в котором они идут в массиве, и вызовет callback с массивом ответов ['url1_answer', 'url2_anser', ...] так, чтобы в любой момент //времени выполнялось не более limit запросов (как только любой из них завершился, сразу же отправится следующий) Т.е. нужно реализовать шину с шириной равной limit.\n// доп. добавить мемоизацию\nfunction parallelLimit(urls, limit, callback) {\n    // Если limit больше количества URL, устанавливаем его равным длине массива URL\n    limit = Math.min(limit, urls.length);\n    \n    let results = new Array(urls.length);\n    let active = 0;\n    let index = 0;\n    const cache = new Map(); // Добавляем кэш для мемоизации\n    \n    function processNext() {\n        if (index >= urls.length && active === 0) {\n            callback(results);\n            return;\n        }\n        \n        while (index < urls.length && active < limit) {\n            const currIndex = index;\n            const url = urls[currIndex];\n            index++;\n            active++;\n            \n            // Проверяем наличие URL в кэше\n            if (cache.has(url)) {\n                // Если URL уже в кэше, берём результат оттуда\n                results[currIndex] = cache.get(url);\n                active--;\n                // Используем setTimeout для асинхронности и предотвращения переполнения стека\n                setTimeout(processNext, 0);\n            } else {\n                // Если URL нет в кэше, выполняем запрос\n                fetch(url)\n                    .then(response => {\n                        // Сохраняем ответ в кэш\n                        cache.set(url, response);\n                        results[currIndex] = response;\n                        active--;\n                        processNext();\n                    });\n            }\n        }\n    }\n    \n    // Обработка пустого массива URL\n    if (urls.length === 0) {\n        callback(results);\n        return;\n    }\n    \n    processNext();\n}"
      },
      {
        "timestamp": "2025-07-07 09:38:13",
        "content": "2025-07-07 09:38:13\n Ivan -> 2071074234:\nНазвание компании: Яндекс 07.07\nЗП: 300\n\nСекция алгоритмических задач\n\nБыл душный интервьюер. Часто цепляется к словам и деталям решения почему именно так, а не иначе. Лучше говорить только то в чем уверен и рассуждать вслух аккуратно, чтоб не давать повода зацепиться.\n\n1. Легнеда задачи:  есть чат с сообщениями, сообщения могут приходить от сервера в произвольном порядке (проблема race condition). \nпример сообщения {id: 1, text: 'lorem ipsum'}\nКейс: если...",
        "full_content": "2025-07-07 09:38:13\n Ivan -> 2071074234:\nНазвание компании: Яндекс 07.07\nЗП: 300\n\nСекция алгоритмических задач\n\nБыл душный интервьюер. Часто цепляется к словам и деталям решения почему именно так, а не иначе. Лучше говорить только то в чем уверен и рассуждать вслух аккуратно, чтоб не давать повода зацепиться.\n\n1. Легнеда задачи:  есть чат с сообщениями, сообщения могут приходить от сервера в произвольном порядке (проблема race condition). \nпример сообщения {id: 1, text: 'lorem ipsum'}\nКейс: если сообщения пришли от сервера в порядке 1-2-3-6-4-5, то в чате они все равно должны оказаться 1-2-3-4-5-6. (6 не отобразится пока не придет 5)\nfunction solution(connect, render) {\n    // Храним сообщения в Map, где ключ - id сообщения, значение - само сообщение\n    const messages = new Map();\n    // Ожидаем сообщение с этим id следующим\n    let nextExpectedId = 1;\n\n    connect(function onMessage(message) {\n        // Добавляем сообщение в Map\n        messages.set(message.id, message);\n\n        // Пока есть ожидаемое сообщение, рендерим его и увеличиваем nextExpectedId\n        while (messages.has(nextExpectedId)) {\n            render(messages.get(nextExpectedId));\n            messages.delete(nextExpectedId);\n            nextExpectedId++;\n        }\n    });\n}\n2. Нужно сделать обход дерева без использования рекурсии. Дерево представляет собой структуру папок {name: '', childrens[]}\nНужно вывести структуру в консоль в красивом виде, чтоб количество пробелов соответствовало вложенности папки.\nconst stack = [{data, level: 0}]\n\nwhile (stack.length > 0) {\n  // Извлекаем текущий элемент из стека\n  const { data, level } = stack.pop();\n  console.log(\" \".repeat(level*2) + data.name)\n  // Если есть дети, добавляем их в стек в обратном порядке\n  if (data.children && Array.isArray(data.children)) {\n    for (let i = data.children.length - 1; i >= 0; i--) {\n      stack.push({\n        data: data.children[i],\n        level: level + 1,\n      });\n    }\n  }\n}"
      },
      {
        "timestamp": "2025-07-04 13:50:58",
        "content": "2025-07-04 13:50:58\n Sodnom Tyksheev -> 2071074234:\nЯндекс 2 этап\nЗП: 250\n\nТолько одну задачу успели порешать:\n\n/*У нас есть набор билетов вида:\n\n[\n    { from: 'London', to: 'Moscow' },\n    { from: 'Moscow', to: 'SPb' },\n    { from: 'NY', to: 'London' },\n    ...\n]\n\nИз этих билетов можно построить единственный, неразрывный маршрут.\nПетель и повторов в маршруте нет.\n\nНужно написать программу, которая возвращает эти же объекты билетов \nв порядке следования по маршруту.\n*/\n\nfunction getRoute(tickets...",
        "full_content": "2025-07-04 13:50:58\n Sodnom Tyksheev -> 2071074234:\nЯндекс 2 этап\nЗП: 250\n\nТолько одну задачу успели порешать:\n\n/*У нас есть набор билетов вида:\n\n[\n    { from: 'London', to: 'Moscow' },\n    { from: 'Moscow', to: 'SPb' },\n    { from: 'NY', to: 'London' },\n    ...\n]\n\nИз этих билетов можно построить единственный, неразрывный маршрут.\nПетель и повторов в маршруте нет.\n\nНужно написать программу, которая возвращает эти же объекты билетов \nв порядке следования по маршруту.\n*/\n\nfunction getRoute(tickets = [], start) {\n    const map = new Map()\n    const res = []\n    let finishCity \n\n    for(const el of tickets){\n        map.set(el.from, el)\n    }\n\n    let current = tickets.find(i => i.from === start);\n    console.log(current)\n\n    while(current && map.has(current.from)){\n        res.push(current);\n\n        current = map.get(current.to);\n    }\n\n    return res\n}\n\nconsole.log(\n    getRoute([\n    { from: 'London', to: 'Moscow' },\n    { from: 'Moscow', to: 'SPb' },\n    { from: 'NY', to: 'London' },\n], 'NY')\n)"
      },
      {
        "timestamp": "2025-07-01 16:21:23",
        "content": "2025-07-01 16:21:23\n Aintripin -> 2071074234:\nКомпания: Яндекс (01.07.2025)\n\nВакансия: Frontend-разработчик\n\nЗП: с HR'ом обговаривал, что от 250,000 смотрю. Вилки нет, но я \"в вилке\"\n\n================================================================================================\n\nЗадачи:\n\n📝 I. Даны три секции кода, нужно написать результат выполнения каждого console.log():\nvar n = 1;\n\nfunction f(n) {\n  // Внутри функции создается локальная переменная `n`, которая является копией\n  // значения, ...",
        "full_content": "2025-07-01 16:21:23\n Aintripin -> 2071074234:\nКомпания: Яндекс (01.07.2025)\n\nВакансия: Frontend-разработчик\n\nЗП: с HR'ом обговаривал, что от 250,000 смотрю. Вилки нет, но я \"в вилке\"\n\n================================================================================================\n\nЗадачи:\n\n📝 I. Даны три секции кода, нужно написать результат выполнения каждого console.log():\nvar n = 1;\n\nfunction f(n) {\n  // Внутри функции создается локальная переменная `n`, которая является копией\n  // значения, переданного в функцию. Изменение этой локальной переменной\n  // не влияет на внешнюю переменную `n`.\n  n = 3;\n}\nf(n);\n\n// Выведет 1, так как функция f работала с копией значения.\nconsole.log(n); // >> 1\n\n// -------------------\n\n// --- Секция 2 ---\n\nvar obj = { a: 1 };\n\nfunction f1(o) {\n  // В функцию передается ссылка на объект. Переменные `o` (внутри) и `obj` (снаружи)\n  // указывают на один и тот же объект в памяти.\n  // Мы мутируем (изменяем) свойство этого объекта.\n  o.a = 5;\n}\nf1(obj);\n\n// Выведет { a: 5 }, так как объект был изменен по ссылке.\nconsole.log(obj); // >> { a: 5 }\n\n// -------------------\n\n// --- Секция 3 ---\n\nvar obj2 = { a: 1 }; // Переименовал, чтобы избежать ошибки Redeclaration of var obj\n\nfunction f2(o) {\n  // Здесь происходит не мутация объекта, а переприсваивание локальной\n  // переменной `o`. Теперь она указывает на совершенно новый объект.\n  // Связь с исходным объектом (на который указывает `obj2`) теряется.\n  o = { hello: 1 };\n}\nf2(obj2);\n\n// Выведет { a: 1 }, так как исходный объект не был изменен.\n// Функция f2 лишь изменила то, на что указывала её внутренняя переменная `o`.\nconsole.log(obj2); // >> { a: 1 }\n\n—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\nII. Реализовать метод times для числового объекта. Функция должна принимать callback и вызывать его заданное количество раз с индексом текущей операции. \nВот пример:\n(3).times(console.log)\n// 0\n// 1\n// 2\n\nПлан решния:\n1) через Number.prototype делаем Number.prototype.times = function() {}\n2) доступ к самому числу будем получать через this, потому что оно будет ссылаться на сам экземпляр, на котором был вызван метод. Т.е. у нас в примере (3).times this будет равно объекту Number со значением 3. Чтобы использовать это в цикле, мы получим его значение через this.ValueOf()\n2.1) *тут есть вероятность, что доебётся что это за valueOf() такое*. Это либо распаковка, либо анбоксинг. У нас в JS есть примитивные типы (number, string, Boolean и т.д.), а есть ещё объекты. У примитивов нет методов.\n> boxing/упаковка — это когда мы пытаемся получить доступ к свойству или методу у примитивного значения (как в нашем случае с (3).times(...)). Для этого создаётся объект-обёртка. Т.е. для числа 3 создаётся new Number(3). \n> теперь, когда у нас есть временной объект new Number(3), мы можем вызвать на нём метод .times(), т.к. этот метод в его прототипе Number.prototype. Внутри этого метода this ссылается на этот объект-обёртку new Number(3)\n> unboxing/распаковка: метод valueOf — это стандартный метод всех объектов-обёрток, который возвращает исходное примитивное значение, которое у нас \"спрятано\" внутри объекта.\n>> поэтому, когда мы вызываем this.ValueOf(), мы \"распаковываем\" коробку new Number(3) и достаём уже из неё сам примитив, т.е. 3\n>>> если уж совсем доебётся, то это ещё часть механизма type coercion/conversion aka \"преобразования типов\". Т.е. у нас JS пытается увидеть примитив, а встречает объект. И поэтому пытается его преобразовать в примитив. Для этого и используется valueOf(). Если тот не возвращает примитив, то вызывается toString\n3. у нас по задаче нужно вызвать это всё N раз. Для этого захуярим цикл for, который будет от 0 до N - 1 итерироваться\n4. функция должна принимать callback. Предлагаю добавить проверку на то, является ли переданный аргумент функцией. Это чтобы предотвратить ошибки. Например, если метод вызовут некорректно, например\n(3).times()"
      },
      {
        "timestamp": "2025-07-01 14:28:08",
        "content": "2025-07-01 14:28:08\n Alexander Biryukov -> 2071074234:\nЯндекс 1 Этап\nЗП: 300к на руки\n\n1 задача \nВопросы:\nСпросил за rest оператор, и что если будем делать если у нас ES5.\nЧто такое arguments\nЧто такое псевдомассив\n\nfunction strjoin(separator, ...arr) {\n  console.log(arguments)\n  return arr.join(separator);\n}\n\n2 задача\n\nВопросы:\nЧто такое промисы?\n\nPromise.resolve(1)\n  .then(x => x + 1) // 2\n  .then(x => { throw x }) // выбрасывает 2\n  .then(x => console.log(x)) // пропускается из-за ошибки\n  .c...",
        "full_content": "2025-07-01 14:28:08\n Alexander Biryukov -> 2071074234:\nЯндекс 1 Этап\nЗП: 300к на руки\n\n1 задача \nВопросы:\nСпросил за rest оператор, и что если будем делать если у нас ES5.\nЧто такое arguments\nЧто такое псевдомассив\n\nfunction strjoin(separator, ...arr) {\n  console.log(arguments)\n  return arr.join(separator);\n}\n\n2 задача\n\nВопросы:\nЧто такое промисы?\n\nPromise.resolve(1)\n  .then(x => x + 1) // 2\n  .then(x => { throw x }) // выбрасывает 2\n  .then(x => console.log(x)) // пропускается из-за ошибки\n  .catch(err => console.log(err)) // 2\n  .then(x => Promise.resolve(x)) // undefined (catch ничего не возвращает)\n  .catch(err => console.log(err)) // не сработает\n  .then(x => console.log(x)) // undefined\n\n3 задача\n\n\n// Написать декоратор для функции, который ограничивает число вызовов.\n//\n// callLimit(fn, limit, callback), принимает следующие аргументы:\n// fn - функция, которую декодируем;\n// limit - маскимальное число вызовов\n// callback - вызывается, когда совершен последний вызов. Опционально.\n// У вызываемой функции должен быть метод для перезагрузки счетчика в начале\n\nfunction callLimit(fn, limit, callback) {\n  let count = 0 // Счётчик вызовов\n\n  // Обёртка над исходной функцией\n  function wrapper(...args) {\n    if (count >= limit) return // Прекратить выполнение, если лимит превышен\n\n    count++ // Увеличить счётчик\n\n    // Если вызов достиг лимита — вызвать callback (если он передан)\n    if (count === limit && typeof callback === 'function') {\n      callback()\n    }\n\n    // Вызов оригинальной функции с переданными аргументами\n    return fn.apply(this, args)\n  }\n\n  // Метод для ручного сброса счётчика вызовов\n  wrapper.reset = function () {\n    count = 0\n  }\n\n  return wrapper // Вернуть обёрнутую функцию\n}\n\n\n4 Задача\n\n/**\n * @param {Function} fn - Асинхронная функция\n * @param {number} t - Время ограничения в миллисекундах\n**/\nconst timelimited = function (fn, t) {\n  return function (...args) {\n    return new Promise((resolve, reject) => {\n      // Запускаем асинхронную функцию\n      const fnPromise = fn(...args).then(resolve).catch(reject);\n\n      // Устанавливаем таймер на t миллисекунд\n      const timer = setTimeout(() => {\n        reject(\"Time limit exceeded\"); // Реджектим, если время истекло\n      }, t);\n\n      // Если функция успевает выполниться, очищаем таймер\n      fnPromise.finally(() => clearTimeout(timer));\n    });\n  };\n};\n\n\n5 задача\n\nВопросы: \nКакие сложности алгоритмов бывают.\nОписать и рассказать в чем разница\n\n\nclass MaxStack {\n    constructor() {\n        this.stack = []; // Основной стек\n        this.maxStack = []; // Вспомогательный стек для хранения максимумов\n    }\n\n    // Добавление элемента в стек\n    push(x) {\n        this.stack.push(x);\n        // Если maxStack пуст или x >= текущего максимума, добавляем x в maxStack\n        if (this.maxStack.length === 0 || x >= this.maxStack[this.maxStack.length - 1]) {\n            this.maxStack.push(x);\n        }\n    }\n\n    // Удаление и возврат верхнего элемента\n    pop() {\n        if (this.stack.length === 0) {\n            throw new Error(\"Stack is empty\");\n        }\n        const popped = this.stack.pop();\n        // Если удалённый элемент равен текущему максимуму, удаляем его из maxStack\n        if (popped === this.maxStack[this.maxStack.length - 1]) {\n            this.maxStack.pop();\n        }\n        return popped;\n    }\n\n\n    // Возврат максимального элемента\n    max() {\n        if (this.maxStack.length === 0) {\n            throw new Error(\"Stack is empty\");\n        }\n        return this.maxStack[this.maxStack.length - 1];\n    }\n}"
      },
      {
        "timestamp": "2025-06-27 09:59:38",
        "content": "2025-06-27 09:59:38\n Артем Покатилов -> 2071074234:\nЯндекс Фантех 3 этап\nЗП: от 250к\nhr сам написал\n\nВопросы:\n\nКакая твоя роль на проекте? За что отвечаешь?\nМенторил?\nРазговаривал ли со смежниками? (про бекендеров и т.д. внутри команды)\nНасколько часто приходится общаться с командой?\nРасскажи про большую и интересную задачу?\nСам предлагал какие то решения?\nКогда проект начался и сколько он длился?\nПостановка задачи была со стороны заказчика? Ты сам не предлагал каких то фичей?\nВопрос про CI/CD. ...",
        "full_content": "2025-06-27 09:59:38\n Артем Покатилов -> 2071074234:\nЯндекс Фантех 3 этап\nЗП: от 250к\nhr сам написал\n\nВопросы:\n\nКакая твоя роль на проекте? За что отвечаешь?\nМенторил?\nРазговаривал ли со смежниками? (про бекендеров и т.д. внутри команды)\nНасколько часто приходится общаться с командой?\nРасскажи про большую и интересную задачу?\nСам предлагал какие то решения?\nКогда проект начался и сколько он длился?\nПостановка задачи была со стороны заказчика? Ты сам не предлагал каких то фичей?\nВопрос про CI/CD. Что знаешь про CI/CD? Настраивал ли сам его?\nКак происходит заливание нового кода в продакшн? (Про CI/CD)\n Где начинают выполняться проверки? (Про машинку и контейнер)\nСам пайплайн видел? Где все это происходит понимаешь?\nКогда происходит сборка PROD, DEV и TEST стенды?\n\nПро тесты (смотреть скрин тут https://t.me/c/2071074234/489/133701):\n\nКакие виды тесты ты знаешь? Какие ты бы тесты внедрил в этот проект?\nПишите ли вы юнит тесты у себя на проекте?\nКогда бы ты хотел чтобы тесты запускались? (Про CI/CD)\nПочему тесты могут быть нестабильные? Какие тесты могут быть нестабильные?\nПриходилось ли дорабатывать какие нибудь тесты на проекте?\nПриходилось ли решать проблемы с оптимизацией\nКакие действия если тебе сказали что сайт тормозит?\nПробовал ли сам разбираться в LigthHouse?\nКакие то системные решения знаешь? Чтобы оптимизировать приложение?\nБыл ли опыт с метриками интерактивности?\nЗнаешь что такое OpenGraph?\nЗачем нужен SSR?\nВидел ли теги og? Для чего используются теги og?\n\nПро Софты:\n\nКакие улучшения ты привнес в проект?\nПриведи пример проекта, который был успешно реализованный благодаря твоему вкладу, хотя без тебя он мог бы быть не законченным?\nБыл ли кейс недопонимания?"
      },
      {
        "timestamp": "2025-06-26 12:32:30",
        "content": "2025-06-26 12:32:30\n Alexander K -> 2071074234:\nЯндекс 1 этап\n\n1 задача\n\nfunction any(promises) {\n  return new Promise((resolve, reject) => {\n    const errors = [];\n    let rejCount = 0;\n    \n    promises.forEach((p, i) => {\n      Promise.resolve(p)\n        .then(resolve)\n        .catch((err) => {\n          errors[i] = err;\n          rejCount++;\n          \n          if (rejCount === promises.length) {\n            reject(new AggregateError(errors, 'No Promise in any was resolved'));\n          }\n ...",
        "full_content": "2025-06-26 12:32:30\n Alexander K -> 2071074234:\nЯндекс 1 этап\n\n1 задача\n\nfunction any(promises) {\n  return new Promise((resolve, reject) => {\n    const errors = [];\n    let rejCount = 0;\n    \n    promises.forEach((p, i) => {\n      Promise.resolve(p)\n        .then(resolve)\n        .catch((err) => {\n          errors[i] = err;\n          rejCount++;\n          \n          if (rejCount === promises.length) {\n            reject(new AggregateError(errors, 'No Promise in any was resolved'));\n          }\n        });\n    });\n  });\n}\n2.\nfunction runOnce(fn) {\n  let isCalled = false;\n  \n  return function (...args) {\n    if (isCalled) {\n      return undefined;\n    }\n    isCalled = true;\n    return fn(...args);\n  }\n}\n3.\nfunction compose(...funcs) {\n  return function (...args) {\n    return funcs.reduceRight((acc, fn) => {\n      return [fn(...acc)];\n    }, args)[0];\n  };\n}\n\n4.Реализовать MaxStack с методами pop push и max \n\n```\nclass MaxStack {\n  constructor() {\n    this.stack = [];      \n    this.maxStack = [];   \n  }\n\n  push(value) {\n    this.stack.push(value);\n   \n    const currentMax = this.maxStack.length === 0 ? value : Math.max(value, this.maxStack[this.maxStack.length - 1]);\n    this.maxStack.push(currentMax);\n  }\n\n  pop() {\n    if (this.stack.length === 0) return null;\n    this.maxStack.pop();   \n    return this.stack.pop(); \n  }\n\n  max() {\n    if (this.maxStack.length === 0) return null;\n    return this.maxStack[this.maxStack.length - 1]\n  }\n}\n```"
      },
      {
        "timestamp": "2025-06-24 13:48:29",
        "content": "2025-06-24 13:48:29\n Sodnom Tyksheev -> 2071074234:\nЯндекс Фантех 1 этап лайвкодинг\nЗП:250K\nhr сам написал\n\n\n1. Сделай такую обёртку над функцией, чтобы она вызывалась только один раз - при первом вызове. Все последующие вызовы ничего не делают.\n\nРешение:\nfunction runOnce(fn) {\n    let called = false;\n\n    return function (...args) {\n        if (called) {\n            return undefined;\n            called = true;\n            return fn(...args);\n        }\n    }\n}\n\n\n2.Написать функцию sleep которая ...",
        "full_content": "2025-06-24 13:48:29\n Sodnom Tyksheev -> 2071074234:\nЯндекс Фантех 1 этап лайвкодинг\nЗП:250K\nhr сам написал\n\n\n1. Сделай такую обёртку над функцией, чтобы она вызывалась только один раз - при первом вызове. Все последующие вызовы ничего не делают.\n\nРешение:\nfunction runOnce(fn) {\n    let called = false;\n\n    return function (...args) {\n        if (called) {\n            return undefined;\n            called = true;\n            return fn(...args);\n        }\n    }\n}\n\n\n2.Написать функцию sleep которая через переданное время резолвится\n\nРешение:\nfunction sleep(time) {\n    return new Promise((resolve) => \n    setTimeout(() => resolve(), time))\n}\n\n\n\n3. Реализовать функцию groupBy, которая группирует элементы массива по ключу, полученному из коллбэка сb.\n\nРешение:\nArray.prototype.groupByV2 = function (fn) {\n    const res = {}\n    const arr = this;\n    for (let i = 0; i < arr.length; i++) {\n        const key = fn(arr[i]);\n        if (res[key]) {\n            res[key] = [];\n        }\n        res[key].push(arr[i]);\n    }\n    return res\n}\n\n4.Напиши обёртку над асинхронной функцией fn, которая вызывает её, но прерывает выполнение, если она не успевает завершиться за t миллисекунд.\nВ этом случае Promise должен быть отклонён с сообщением \"Time limit exceeded\".\n\nРешение:\nconst timeLimited = function(fn, t) {\n  return function(...args) {\n    return new Promise((resolve, reject) => {\n      const fPromise = fn(...args).then(resolve).catch(reject);\n\n      const timer = setTimeout(() => {\n        reject(\"Time limit exceeded\");\n      }, t);\n\n      fPromise.finally(() => clearTimeout(timer));\n    });\n  }\n};\n\n\n\n5.Реализовать класса MaxStack, в котором все методы push, pop и max работают за O(1):\n\nРешение:\nclass MaxStack {\n  constructor() {\n    this.stack = [];      \n    this.maxStack = [];   \n  }\n\n  push(value) {\n    this.stack.push(value);\n   \n    const currentMax = this.maxStack.length === 0 ? value : Math.max(value, this.maxStack[this.maxStack.length - 1]);\n    this.maxStack.push(currentMax);\n  }\n\n  pop() {\n    if (this.stack.length === 0) return null;\n    this.maxStack.pop();   \n    return this.stack.pop(); \n  }\n\n  max() {\n    if (this.maxStack.length === 0) return null;\n    return this.maxStack[this.maxStack.length - 1]\n  }\n}"
      },
      {
        "timestamp": "2025-06-24 12:56:12",
        "content": "2025-06-24 12:56:12\n Артем Покатилов -> 2071074234:\n2/2 часть\nЯндекс Фантех 2 этап\nЗП: от 250к\n hr сам написал\n\nБыли вопросы после решений называть сложность алгоритма и сложность по памяти\n\n2.1 С усложнением в виде size у файлов (не у папок)\n/*\nДана вложенная структура файлов и папок в виде объекта:\n*/\n\nconst data = {\n  name: \"folder\",\n  children: [\n    { name: \"file1.txt\", size: 100 },\n    { name: \"file2.txt\", size: 400 },\n    {\n      name: \"images\",\n      children: [\n        { name: \"image.pn...",
        "full_content": "2025-06-24 12:56:12\n Артем Покатилов -> 2071074234:\n2/2 часть\nЯндекс Фантех 2 этап\nЗП: от 250к\n hr сам написал\n\nБыли вопросы после решений называть сложность алгоритма и сложность по памяти\n\n2.1 С усложнением в виде size у файлов (не у папок)\n/*\nДана вложенная структура файлов и папок в виде объекта:\n*/\n\nconst data = {\n  name: \"folder\",\n  children: [\n    { name: \"file1.txt\", size: 100 },\n    { name: \"file2.txt\", size: 400 },\n    {\n      name: \"images\",\n      children: [\n        { name: \"image.png\", size: 200 },\n        {\n          name: \"vacation\",\n          children: [\n            { name: \"crocodile.png\", size: 500 },\n            { name: \"penguin.png\", size: 200 },\n          ],\n        },\n      ],\n    },\n    { name: \"shopping-list.pdf\", size: 400 },\n  ],\n};\n\n/*\n    Задача:\n    Нужно вывести в консоль файлы и папки с отступами, чтобы показать вложенность.\n    Решение должно учитывать любую вложенность элементов (т.е. не должно содержать рекурсивные вызовы).\n    \n    Ожидаемый вывод:\n    folder (1800)\n      file1.txt (100)\n      file2.txt (400)\n      images (900)\n        image.png (200)\n        vacation (700)\n          crocodile.png (500)\n          penguin.png (200)\n      shopping-list.pdf (400)\n    */\n\n//Решение должно быть реализовано без использования рекурсии\n\nответ:\nfunction printDirectoryStructure(data) {\n  const sizeMap = new Map();\n\n  // === Первый проход: считаем размеры всех узлов (файлов и папок) ===\n  const stack = [{ node: data, visited: false }];\n\n  while (stack.length > 0) {\n    const { node, visited } = stack.pop();\n\n    if (!node.children) {\n      // Файл — просто сохраняем размер\n      sizeMap.set(node, node.size || 0);\n    } else if (!visited) {\n      // Сначала кладём папку обратно с visited: true, чтобы посчитать размер после обработки детей\n      stack.push({ node, visited: true });\n\n      // Добавляем детей в стек для обработки\n      for (let i = node.children.length - 1; i >= 0; i--) {\n        stack.push({ node: node.children[i], visited: false });\n      }\n    } else {\n      // Все дети обработаны — считаем сумму их размеров\n      let totalSize = 0;\n      for (const child of node.children) {\n        totalSize += sizeMap.get(child) || 0;\n      }\n      sizeMap.set(node, totalSize);\n    }\n  }\n\n  // === Второй проход: печатаем структуру сверху вниз ===\n  const printStack = [{ node: data, tab: \"\" }];\n\n  while (printStack.length > 0) {\n    const { node, tab } = printStack.pop();\n    const size = sizeMap.get(node) || node.size || 0;\n\n    console.log(`${tab}${node.name} (${size}kb)`); // Выводим имя и размер с отступом\n\n    // Добавляем детей в стек в обратном порядке для корректного порядка вывода\n    if (node.children) {\n      for (let i = node.children.length - 1; i >= 0; i--) {\n        printStack.push({ node: node.children[i], tab: tab + \"  \" });\n      }\n    }\n  }\n}"
      },
      {
        "timestamp": "2025-06-24 12:56:05",
        "content": "2025-06-24 12:56:05\n Артем Покатилов -> 2071074234:\n1/2 части\nЯндекс Фантех 2 этап\nЗП: от 250к\n hr сам написал\n\nБыли вопросы после решений называть сложность алгоритма и сложность по памяти\n\n1 задача:\n/*\ninterface Message {\n    id: number\n    text: string\n}\n\nId самого первого сообщения = 1, а id каждого следующего сообщения на 1 больше, чем id предыдущего.\nНам нужно выводить сообщения в правильном порядке, однако сервер не гарантирует правильный порядок\nсообщений, отправляемых в наше приложение....",
        "full_content": "2025-06-24 12:56:05\n Артем Покатилов -> 2071074234:\n1/2 части\nЯндекс Фантех 2 этап\nЗП: от 250к\n hr сам написал\n\nБыли вопросы после решений называть сложность алгоритма и сложность по памяти\n\n1 задача:\n/*\ninterface Message {\n    id: number\n    text: string\n}\n\nId самого первого сообщения = 1, а id каждого следующего сообщения на 1 больше, чем id предыдущего.\nНам нужно выводить сообщения в правильном порядке, однако сервер не гарантирует правильный порядок\nсообщений, отправляемых в наше приложение.\n\nТаймлайн:\n(приходит) 7 1 2 3 6 5 4    8\n(рисунок)   . 1 2 3 . . 4 5 6 7 8\n\nСообщения от сервера приходят в обработчик функции connect:\n\nconnect((msg) => {\n    ...\n});\n\nОтображать сообщения нужно с помощью функции `render`:\nrender(msg)\n*/\n\nconst solution = (connect, render) => {};\n\nответ:\nfunction solution(connect, render) {\n  // Создаем Map для хранения полученных сообщений\n  // Ключ - ID сообщения, значение - функция для его отрисовки\n  const map = new Map();\n\n  // Текущий ожидаемый ID сообщения (начинаем с 1)\n  let currId = 1;\n\n  // Подключаемся к источнику сообщений\n  connect((msg) => {\n    // Сохраняем сообщение в Map, оборачивая render в функцию\n    // Это позволяет отложить выполнение render до нужного момента\n    map.set(msg.id, () => render(msg));\n\n    // Проверяем, есть ли в Map сообщения, которые можно отрисовать по порядку\n    while (map.has(currId)) {\n      // Получаем и вызываем функцию отрисовки для текущего ID\n      map.get(currId)();\n\n      // Удаляем обработанное сообщение из Map\n      map.delete(currId);\n\n      // Переходим к следующему ожидаемому ID\n      currId++;\n    }\n  });\n}\n\n2. задача\n/*\nДана вложенная структура файлов и папок в виде объекта:\n*/\n\nconst data = {\n  name: \"folder\",\n  children: [\n    { name: \"file1.txt\" },\n    { name: \"file2.txt\" },\n    {\n      name: \"images\",\n      children: [\n        { name: \"image.png\" },\n        {\n          name: \"vacation\",\n          children: [{ name: \"crocodile.png\" }, { name: \"penguin.png\" }],\n        },\n      ],\n    },\n    { name: \"shopping-list.pdf\" },\n  ],\n};\n\n/*\n    Задача:\n    Нужно вывести в консоль файлы и папки с отступами, чтобы показать вложенность.\n    Решение должно учитывать любую вложенность элементов (т.е. не должно содержать рекурсивные вызовы).\n    \n    Ожидаемый вывод:\n    folder\n      file1.txt\n      file2.txt\n      images\n        image.png\n        vacation\n          crocodile.png\n          penguin.png\n      shopping-list.pdf\n    */\n\n//Решение должно быть реализовано без использования рекурсии\nconst printDirectoryStructure = (data) => {};\n\nответ:\nfunction printDirectoryStructure(data) {\n  // Используем стек для итеративного обхода структуры\n  const stack = [{ data, level: 0 }];\n\n  while (stack.length > 0) {\n    // Извлекаем текущий элемент из стека\n    const { data, level } = stack.pop();\n\n    // Выводим имя с соответствующим отступом\n    console.log(\" \".repeat(level * 2) + data.name);\n\n    // Если есть дети, добавляем их в стек в обратном порядке\n    if (data.children && Array.isArray(data.children)) {\n      for (let i = data.children.length - 1; i >= 0; i--) {\n        stack.push({\n          data: data.children[i],\n          level: level + 1,\n        });\n      }\n    }\n  }\n}\n\nprintDirectoryStructure(data);"
      },
      {
        "timestamp": "2025-06-23 01:19:00",
        "content": "2025-06-23 01:19:00\n Эмир -> 2071074234:\nЯндекс \nЭтап 1\nЗадачи:\n1. Сделай такую обёртку над функцией, чтобы она вызывалась только один раз — при первом вызове. Все последующие вызовы ничего не делают.\nfunction runOnce(fn) {\n  let isCalled = false;\n  return (...args) => {\n    if (isCalled) {\n      return undefined; // уже вызывалась — ничего не делаем\n    }\n    isCalled = true;\n    return fn(...args); // вызываем fn только один раз\n  };\n}\n2. Напиши функцию, которая принимает несколько промисов и ...",
        "full_content": "2025-06-23 01:19:00\n Эмир -> 2071074234:\nЯндекс \nЭтап 1\nЗадачи:\n1. Сделай такую обёртку над функцией, чтобы она вызывалась только один раз — при первом вызове. Все последующие вызовы ничего не делают.\nfunction runOnce(fn) {\n  let isCalled = false;\n  return (...args) => {\n    if (isCalled) {\n      return undefined; // уже вызывалась — ничего не делаем\n    }\n    isCalled = true;\n    return fn(...args); // вызываем fn только один раз\n  };\n}\n2. Напиши функцию, которая принимает несколько промисов и возвращает промис, в котором будет сумма всех результатов этих промисов\nfunction sumFulfilledPromises(...promises) {\n  return Promise.allSettled(promises)\n    .then(results => {\n      const successValues = results\n        .filter(result => result.status === 'fulfilled')\n        .map(result => result.value);\n\n      return successValues.reduce((sum, num) => sum + num, 0);\n    });\n}\n3. Реализовать функцию groupBy, которая группирует элементы массива по ключу, полученному из коллбэка cb.\nArray.prototype.groupBy = function (cb) {\n  const result = {};\n\n  for (const item of this) {\n    const key = cb(item);\n    if (!result[key]) {\n      result[key] = [];\n    }\n    result[key].push(item);\n  }\n\n  return result;\n};\n4. Сделать auth с повторными попытками: если промис auth() отклоняется, пробовать заново n раз. Если все попытки неудачны — выбросить ошибку.\nasync function tryAuth(n) {\n  try {\n    const response = await auth(); // вызываем auth\n    return response;              // если успех — возвращаем результат\n  } catch (err) {\n    n -= 1;\n    if (n < 0) return Promise.reject(err); // если попытки закончились — ошибка\n    return tryAuth(n); // пробуем снова\n  }\n}\n5. Пройти по дереву (объекту с ветками tree.branches) и собрать белок с каждой ветки с помощью функции squirrelScanner, возвращающей массив белок.\nfunction scanTree(tree) {\n  let squirrels = [];\n\n  if (tree.branches) {\n    tree.branches.forEach(branch => {\n      squirrels.push(...squirrelScanner(branch));\n    });\n  }\n\n  return squirrels;\n}"
      },
      {
        "timestamp": "2025-06-11 14:12:34",
        "content": "2025-06-11 14:12:34\n Egor -> 2071074234:\nЯндекс 2 этап \nВакансия - написала hr\nЗп - ?\nЗадачи:\nfunction solution(connect, render) {\n    let curValue = 1;\n    const map = new Map();\n\n    connect(function onMessage(message) {\n        map.set(message.id, message);\n        console.log(map);\n        while (map.has(curValue)) {\n            render(map.get(curValue));\n            map.delete(curValue);\n            curValue++;\n        }\n    });\n}\nНа 2 задачу оставалось 20 минут, интервьюер решил не продолж...",
        "full_content": "2025-06-11 14:12:34\n Egor -> 2071074234:\nЯндекс 2 этап \nВакансия - написала hr\nЗп - ?\nЗадачи:\nfunction solution(connect, render) {\n    let curValue = 1;\n    const map = new Map();\n\n    connect(function onMessage(message) {\n        map.set(message.id, message);\n        console.log(map);\n        while (map.has(curValue)) {\n            render(map.get(curValue));\n            map.delete(curValue);\n            curValue++;\n        }\n    });\n}\nНа 2 задачу оставалось 20 минут, интервьюер решил не продолжать"
      },
      {
        "timestamp": "2025-06-05 19:58:18",
        "content": "2025-06-05 19:58:18\n Лёша -> 2071074234:\nЯндекс 3 этап\n\nВопросы:\nРасскажи про опыт. В Каких командах, на какой роли, что ты делал, как ты поменял процессы, что понравилось, что не понравилось... (это один вопрос если что🤡)\nПодробнее про команду. \nТы был руководителем или смертным?\nПодробнее про процессы.\nРасскажи про процессы на примере одной задачи.\nРасскажи про уровень задач, которыми ты занимался с примерами.\nСамая интересная задача (+ очень много вопросов по ней (почему выбрал такой подход, ...",
        "full_content": "2025-06-05 19:58:18\n Лёша -> 2071074234:\nЯндекс 3 этап\n\nВопросы:\nРасскажи про опыт. В Каких командах, на какой роли, что ты делал, как ты поменял процессы, что понравилось, что не понравилось... (это один вопрос если что🤡)\nПодробнее про команду. \nТы был руководителем или смертным?\nПодробнее про процессы.\nРасскажи про процессы на примере одной задачи.\nРасскажи про уровень задач, которыми ты занимался с примерами.\nСамая интересная задача (+ очень много вопросов по ней (почему выбрал такой подход, какие еще были варианты)).\nКак зарелизить обновленный бекенд?\nКак новый код появляется на сервере?\nКакие проверки запускаются?\nКак билд устроен?\nКак выглядит релиз фронта?\nЧто такое внешний контур?\nКакие тесты прогонялись?\nНа какой машинке выполняется билд.\nДавай поговорим про кубернетис.\nЧто такое фронт (артефакты, статика)?\n\nТут он решил вернуться на 20 мин назад, когда я рассказывал про проекты на которых работал и начал спрашивать по нему.\nЧто такое деплой юнит?\n\nДалее задача на тесты(на скриншоте)\nКак бы ты организовал тестирование данного сервиса?\nКакие виды тестов?\nКак бы ты их внедрял?\n\nЧто такое ssr (он опять вернулся к примеру в самом начале)\nКакие стадии билда фронта?\nDocker-файл.\nЧто такое npm-пакет\n\nПример проекта, который можно считать успешно реализованным благодаря твоим действиям.\nПримеры позитивного и негативного общения в команде.\n\n\nОщущения: самый душный тип за все собесы, докапывался до каждой мелочи, скакал с темы на тему (делал все без смазки).\nФитбек: 1,5 недели морозили. Оценили на мидл/мидл-, но вакансий нет, предложили стажировку, чтобы показать свои силы😎."
      },
      {
        "timestamp": "2025-06-05 14:28:48",
        "content": "2025-06-05 14:28:48\n Alexander -> 2071074234:\n05.06 Честный знак\nзп: просил минимум 250к\nвакансия: https://hh.ru/vacancy/120820023 \nссылка: https://disk.yandex.ru/i/wE0ybLXOiLYCNQ (не записался звук собеседующего, но все что спрашивал рассписал, плюс по моим ответам примерно понятно, я старался повторять вопросы)\n\nгонял по опыту, спрашивал чем занимался, работал ли с бэком, что интересно в проекте, что неинтересно, спросил про первый опыт работы. Уточнял чем занималась команда, а не только я, ка...",
        "full_content": "2025-06-05 14:28:48\n Alexander -> 2071074234:\n05.06 Честный знак\nзп: просил минимум 250к\nвакансия: https://hh.ru/vacancy/120820023 \nссылка: https://disk.yandex.ru/i/wE0ybLXOiLYCNQ (не записался звук собеседующего, но все что спрашивал рассписал, плюс по моим ответам примерно понятно, я старался повторять вопросы)\n\nгонял по опыту, спрашивал чем занимался, работал ли с бэком, что интересно в проекте, что неинтересно, спросил про первый опыт работы. Уточнял чем занималась команда, а не только я, как работаете(скрам). Была одна задача в чате про таблицу новостей. Спросил как бы отобразил, где бы выполнял запрос (логику вынести в отдельный кастомный хук), как бы реализовал скрытие прочитанных новостей (websocket), что делать если 1к новостей(виртуализация, бесконечный скролл, пагинация), как сохранять поиск, чтобы при перезагрузке вкладке он сохранялся, или чтобы другой пользователь мог перейти по ссылке и у него сохранился результат поиска(query параметры), спросил как уведомлять пользователя о новой новости(вебсокет+тостр), спрашивал про методы массива, про реакт(хуки какие знаешь, для чего используешь)\n\nОриентировался на это\nfunction NewsPage() {\n  const [news, setNews] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('/news')\n      .then(response => response.json())\n      .then(data => {\n        setNews(data);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetching news:', error);\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) return <div>Loading...</div>;\n  if (!news.length) return <div>No news available</div>;\n\n  return (\n    <div className=\"news-container\">\n      <table className=\"news-table\">\n        <thead>\n          <tr>\n            <th>Заголовок</th>\n            <th>Описание</th>\n          </tr>\n        </thead>\n        <tbody>\n          {news.map(item => (\n            <tr key={item.id}>\n              <td>{item.title}</td>\n              <td>{item.description}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}"
      },
      {
        "timestamp": "2025-06-03 20:47:33",
        "content": "2025-06-03 20:47:33\n Nikita -> 2071074234:\nКомпания - Яндекс (1 этап)\nВакансия - написал HR\n\nЗАДАНИЕ 1\n\nРеализовать метод times для числового объекта.\nФункция должна принимать callback и вызывать его заданное количество раз с индексом текущей итерации.\n\nРЕШЕНИЕ\n\nNumber.prototype.times = function(callback) {\n  const num = Math.floor(this);\n  for (let i = 0; i < num; i++) {\n    callback(i);\n  }\n};\n\nЗАДАНИЕ 1.1 \n\nПопросил дописать решение, добавив проверку на целые числа.\n\nРЕШЕНИЕ\n\nNumber.prototype...",
        "full_content": "2025-06-03 20:47:33\n Nikita -> 2071074234:\nКомпания - Яндекс (1 этап)\nВакансия - написал HR\n\nЗАДАНИЕ 1\n\nРеализовать метод times для числового объекта.\nФункция должна принимать callback и вызывать его заданное количество раз с индексом текущей итерации.\n\nРЕШЕНИЕ\n\nNumber.prototype.times = function(callback) {\n  const num = Math.floor(this);\n  for (let i = 0; i < num; i++) {\n    callback(i);\n  }\n};\n\nЗАДАНИЕ 1.1 \n\nПопросил дописать решение, добавив проверку на целые числа.\n\nРЕШЕНИЕ\n\nNumber.prototype.times = function(callback) {\n  if (!Number.isInteger(this)) return;\n  const num = Math.floor(this);\n  for (let i = 0; i < num; i++) {\n    callback(i);\n  }\n};\n\nЗАДАНИЕ 2\n\nРеализовать функцию sumPromises, которая принимает в качестве аргументов промисы и возвращает сумму результатов их выполнения.\nФункция может принимать любое количество аргументов.\nМожно использовать любые API промисов.\n\nconst promise1 = Promise.resolve(1);\nconst promise2 = Promise.resolve(2);\nsumPromises(promise1, promise2).then(console.log) //3\n\nРЕШЕНИЕ\n\nfunction sumPromises(...promises) {\n  return Promise.all(promises)\n    .then(results => {\n      return results.reduce((sum, num) => sum + num, 0);\n    });\n}\n\nЗАДАНИЕ 3\n\n Реализовать функцию compose, которая принимает\n переменное количество функций и возвращает новую функцию.\n Результат работы каждой функции передается в следующую.\n\nconst square = (x) => x * x;\nconst times2 = (x) => x * 2;\nconst sum = (a, b) => a + b;\n\nconsole.clear();\nconsole.log(compose(square, times2)(2) === square(times2(2)));\nconsole.log(compose(square, times2, sum)(3, 4) === square(times2(sum(3, 4))));\n\nРЕШЕНИЕ\n\nfunction compose(...funcs) {\n  return function (...args) {\n    return funcs.reduceRight((acc, fn) => {\n      return [fn(...acc)];\n    }, args)[0];\n  };\n}\n\nЗАДАНИЕ 4\n\nНеобходимо проверить решение задачи по двум сервисам,\nвызвав checkResult(url1, solution), checkResult(url2, solution);\ncheckResult: (url: string, solution: string | number) => Promise<boolean>;\nЕсли оба запроса вернули true - вывести success.\nЕсли хоть один вернул false - вывести fail.\nЕсли хоть зареджектился - вывести error.\nЕсли хоть один отвечает дольше 1 сек - вывести timeout.\n\nimport { checkResult } from \"myLib\"\n\nconst solution = \"Any answer\"\nconst url1 = \"yandex.ru\"\nconst url2 = \"google.com\"\n\ncheckResult(url, solution);\ncheckResult(url, solution);\n\nРЕШЕНИЕ\n\nasync function runCheck(url1, url2, solution) {\n    const timeout = (ms) => new Promise((_, reject) =>\n        setTimeout(() => reject(new Error(\"timeout\")), ms);\n    \n    async function safeCheck(url) {\n        try {\n            return await Promise.race([\n                checkResult(url, solution),\n                timeout(3000)\n            ]);\n        } catch (e) {\n            throw e.message === \"timeout\" ? \"timeout\" : \"error\";\n        }\n    }\n\n    try {\n        const [r1, r2] = await Promise.all([safeCheck(url1), safeCheck(url2)]);\n        \n        if (r1 === true && r2 === true) return \"success\";\n        if (r1 === false || r2 === false) return \"fail\";\n    } catch (e) {\n        return e; // \"timeout\" или \"error\"\n    }\n}\n\nЗАДАНИЕ 5\n\nНеобходимо написать функцию для подсчёта суммы всех числовых значений в массиве.\nВалидным числовым значением являются так же строки, которые начинаются с цифр. В этом случае в качестве числового значения нужно использовать эту начальную последовательность цифр. Массив может содержать любые типы данных, быть не плоским.\n\nНельзя использовать встроенные методы типа .flat, .flatMap.\n\nfunction sum(arr) {\n    // ...\n}\nconsole.log(sum([1, 'x', '2x', ['3', ['x2', '5']]])); //11\n\nРЕШЕНИЕ"
      },
      {
        "timestamp": "2025-06-03 18:30:31",
        "content": "2025-06-03 18:30:31\n Max -> 2071074234:\nБКС \nhr написала\nВопросы: \n- про опыт\n- key\n- как оптимизировать/улучшить, что написал\nЗадача:\nреализовать небольшое приложение\n\nimport React from 'react';\nimport { useState, useCallback } from 'react'\nimport {memo} from 'react'\n\n// 1. Вывести список акций\n// 2. Добавить фильтр по отрасли (select)\n// 3. Добавить фильтр по диапазону цены (2x input)\n// 4. есть компонент Input, как избежать лишних рендеров? (обернуть в memo + useCallback)\n\nconst items = [\n   ...",
        "full_content": "2025-06-03 18:30:31\n Max -> 2071074234:\nБКС \nhr написала\nВопросы: \n- про опыт\n- key\n- как оптимизировать/улучшить, что написал\nЗадача:\nреализовать небольшое приложение\n\nimport React from 'react';\nimport { useState, useCallback } from 'react'\nimport {memo} from 'react'\n\n// 1. Вывести список акций\n// 2. Добавить фильтр по отрасли (select)\n// 3. Добавить фильтр по диапазону цены (2x input)\n// 4. есть компонент Input, как избежать лишних рендеров? (обернуть в memo + useCallback)\n\nconst items = [\n    { ticker: 'GAZP', label: 'Газпром', industry: 'oil&gas', price: 133.44 },\n    { ticker: 'YNDX', label: 'Яндекс', industry: 'IT', price: 3907.44 },\n    { ticker: 'SBER', label: 'Сбербанк', industry: 'bank', price: 289.3 },\n    { ticker: 'LKOH', label: 'Лукойл', industry: 'oil&gas', price: 6806 },\n    { ticker: 'VTBR', label: 'ВТБ', industry: 'bank', price: 97.51 },\n    { ticker: 'TCSG', label: 'ТКС холдинг', industry: 'bank', price: 2604.5 },\n    { ticker: 'ROSN', label: 'Роснефть', industry: 'oil&gas', price: 511.95 },\n];\n\nconst Input = memo((props) => {\n    console.log('render')\n\n    return <input {...props} />\n})\n\n\nconst industries = ['all', 'oil&gas', 'bank', 'IT'];\n\nexport default function App() {\n    const [selected, setSelected] = useState('all')\n    const [minPrice, setMinPrice] = useState(0)\n    const [maxPrice, setMaxPrice] = useState(10000)\n\n    const handleChange = useCallback((e) => {\n        setMinPrice(e.target.value)\n    },[])\n\n    const filterItems = items.filter(item => {\n        const matchInd = selected === 'all' || item.industry === selected\n        const matchMin = minPrice === 0 || item.price >= minPrice\n        const matchMax = minPrice === 10000 || item.price <= maxPrice\n        return matchInd && matchMin && matchMax\n\n    })\n\n\n    return (\n        <>\n            <select onChange = {e => setSelected(e.target.value)} value = {selected} >\n                {industries.map(ind => (\n                    <option key = {ind} value={ind}>\n                    {ind}\n                        </option>\n                ))}\n            </select>\n\n\n            <Input value={minPrice} onChange={handleChange} />\n            <input value={maxPrice} onChange={e => setMaxPrice(e.target.value)} ></input>\n\n            <table>\n                <tbody>\n                    {filterItems.map((item) => (\n                        <tr key={item.ticker}>\n                            <td>{item.ticker}</td>\n                            <td>{item.label}</td>\n                            \n                            <td>{item.price}</td>\n                </tr>\n           ))}\n                        </tbody>\n                    </table>\n        </>\n    );\n}"
      },
      {
        "timestamp": "2025-06-03 11:08:23",
        "content": "2025-06-03 11:08:23\n Лёша -> 2071074234:\nЯндекс Доски - 4 этап общение с командой (тимлид)\n\nСначала говорили о моем опыте на протяжении 15 мин (тут были уточняющие вопросы:\nПочему выбрали именно эту технологи?\nНабор команды и как взаимодействовал в критических ситуациях?\n).\nОстальные 40 мин я расспрашивал тимлида о проекте.\n\n🤷‍♂️🤷‍♂️🤷‍♂️",
        "full_content": "2025-06-03 11:08:23\n Лёша -> 2071074234:\nЯндекс Доски - 4 этап общение с командой (тимлид)\n\nСначала говорили о моем опыте на протяжении 15 мин (тут были уточняющие вопросы:\nПочему выбрали именно эту технологи?\nНабор команды и как взаимодействовал в критических ситуациях?\n).\nОстальные 40 мин я расспрашивал тимлида о проекте.\n\n🤷‍♂️🤷‍♂️🤷‍♂️"
      },
      {
        "timestamp": "2025-06-02 14:32:40",
        "content": "2025-06-02 14:32:40\n Alexandro 4 -> 2071074234:\nЯндекс.Маркет 3 этап\nHR сам написал\nЗП: 250к\n\nВопросы:\n1. Про организацию работы в команде (состав команды, SCRUM)\n2. Кто составлял описание задач?\n3. Чем занимался на проекте? За что отвечал?\n4. Расскажи про несколько решенных сложных задач.\n5. Как шел деплой на проекте? (Git Flow, выгрузка в продакшен)\n6. Как тестировали приложение? (Unit тестирование, покрытие, e2e)\n7. Приходилось ли оптимизировать приложение?\n8. Работал ли с Next?\n9. Расскажи п...",
        "full_content": "2025-06-02 14:32:40\n Alexandro 4 -> 2071074234:\nЯндекс.Маркет 3 этап\nHR сам написал\nЗП: 250к\n\nВопросы:\n1. Про организацию работы в команде (состав команды, SCRUM)\n2. Кто составлял описание задач?\n3. Чем занимался на проекте? За что отвечал?\n4. Расскажи про несколько решенных сложных задач.\n5. Как шел деплой на проекте? (Git Flow, выгрузка в продакшен)\n6. Как тестировали приложение? (Unit тестирование, покрытие, e2e)\n7. Приходилось ли оптимизировать приложение?\n8. Работал ли с Next?\n9. Расскажи про плюсы и минусы SSR?\n10. Какие бы ты тесты предложил для интерфейса Яндекс.Путешествия? (Нужно рассказать про пирамиду тестирования (Unit тесты, интеграционные тесты, e2e) и привести по 2-3 примера на каждый вид)\n11. Пользователи жалуются, что при открытии приложения белый экран, что будешь делать?\n12. Были ли конфликты в команде и как действовал в таких ситуациях?\n13. Проводил ли менторство над сотрудником и с какими проблемами столкнулся?\n14. Какие улучшения внес в работу команды?"
      },
      {
        "timestamp": "2025-05-30 20:43:37",
        "content": "2025-05-30 20:43:37\n Никита -> 2071074234:\nЯндекс 1 этап\n\nЗАДАЧА 1\nfunction runOnce(fn) {\n    }\n\nconst logHello = () => {\n    console.log('hello!')\n};\n\nconst logHelloOnce = runOnce(logHello);\nconsole.clear();\nlogHelloOnce(); // 'hello!\nlogHelloOnce(); // undefined\n\nРЕШЕНИЕ\nfunction runOnce(fn) {\n    let isCalled = false;\n    let result;\n    return function(...args) {\n        if (!isCalled) {\n            isCalled = true;\n            result = fn(...args);\n            return result;\n        } else ...",
        "full_content": "2025-05-30 20:43:37\n Никита -> 2071074234:\nЯндекс 1 этап\n\nЗАДАЧА 1\nfunction runOnce(fn) {\n    }\n\nconst logHello = () => {\n    console.log('hello!')\n};\n\nconst logHelloOnce = runOnce(logHello);\nconsole.clear();\nlogHelloOnce(); // 'hello!\nlogHelloOnce(); // undefined\n\nРЕШЕНИЕ\nfunction runOnce(fn) {\n    let isCalled = false;\n    let result;\n    return function(...args) {\n        if (!isCalled) {\n            isCalled = true;\n            result = fn(...args);\n            return result;\n        } else {\n            return undefined;\n        }\n    };\n}\n\nconst logHello = () => {\n    console.log('hello!');\n};\n\nconst logHelloOnce = runOnce(logHello);\nconsole.clear();\nlogHelloOnce(); // 'hello!'\nlogHelloOnce(); // undefined\n\nЗАДАЧА 2\n\n/* */\n\n* Необходимо написать асинхронную функцию,  \n* которая будет \"спать\" заданное количество миллисекунд,  \n* а потом успешно завершаться  \n\n*/\n\nfunction sleep(duration) {\n\n}\n\n// Пример  \nconst startTime = Date.now();\n\nconsole.log(\"Start sleeping...\");\n\nsleep(2000).then(() => {\n    console.log(\"Make up after 2 seconds!\");\n    console.log(\"Time passed: \", Date.now() - startTime);\n});\n\nsleep(1000).then(() => {\n    console.log(\"Make up after 1 seconds!\");\n    console.log(\"Time passed: \", Date.now() - startTime);\n});\n\nРЕШЕНИЕ\n\nСпрашивает почему в консоль выводит\nTime passed: 2014\nОткуда взялось 14мс?\n\nfunction sleep(duration) {\n    return new Promise(resolve =>{\n    setTimeout(()=>{\n    resolve()\n    }, duration)\n    }\n}\n\nЗАДАЧА 3\n\n// code here\n\nconst array1 = [\n  { id: 1 },\n  { id: 1 },\n  { id: 2 }\n];\n\nconst fn = (item) => item.id;\n\nconsole.log(array1.groupBy(fn));\n// {\n    //  1: [{ id: 1 }, { id : 1 }],\n    //  2: [{ id: 2 }]\n    // }\n\n    // Пример 2\n    const array2 = [1, 2, 3];\n    console.log(array2.groupBy(String));\n    // {\n    // \"1\": [1],\n    // \"2\": [2],\n    // \"3\": [3]    I\n    // }\n\n    // Пример 3\n    const array3 = [3.3, 0.5, 1.4];\n    console.log(array3.groupBy(Math.round));\n    // {\n    //  3: [3.3],\n    //  1: [0.5, 1.4]\n    // }\n\nРЕШЕНИЕ \n\nArray.prototype.groupBy = function (cb) {\n    return this.reduce((acc, curr) => {\n        const key = cb(curr)\n        if (!acc[key]) {\n            acc[key] = []\n        }\n        acc[key].push(curr)\n        return acc\n    }, {})\n}\n\nЗАДАЧА 4_1\n\nimport asyncAuth from '...;\n\nfunction auth() { \n    // asyncAuth((error, data) => {});\n}\n\nРЕШЕНИЕ \n\nfunction auth() {\n    // asyncAuth((error, data) => {});\n    return new Promise((res, rej) => {\n        asyncAuth((error, data) =>) {\n            if (error) return rej(error)\n            return res(data);\n        }\n    }\n}\n\nЗАДАЧА 4_2 \nРЕШЕНИЕ\n\nasync function tryAuth(n) {\n    try {\n        const response = await auth();\n        return response;\n    } catch(err) {\n        n -= 1;\n        if (n === -1) return Promise.reglect(err);\n        return tryAuth(n);\n    }\n}\n\ntryAuth(5);\n\nЗАДАЧА 5\n\nfunction oddSort(numbers) {\n}\n\nconsole.log(oddSort([[2, 3, 7, 4, 6, 1, 5, 8, 9]])); // [2, 1, 3, 4, 6, 5, 7, 8, 9]\nconsole.log(oddSort([2, 4, 6, 8])); // [2, 4, 6, 8]\nconsole.log(oddSort([3, 7, 1, 5, 9])); // [1, 3, 5, 7, 9]\n\nРЕШЕНИЕ\nКакая сложность у алгоритма?\nO(n log n)\n\nfunction oddSort(numbers) {\n    const oddNumbers = numbers.filter(num => num % 2 !== 0).sort((a, b) => a - b);\n    let oddIndex = 0;\n\n    return numbers.map(num => {\n        if (num % 2 !== 0) {\n            return oddNumbers[oddIndex++];\n        }\n        return num;\n    });\n}\n\nconsole.log(oddSort([2, 3, 7, 4, 6, 1, 5, 8, 9])); // [2, 1, 3, 4, 6, 5, 7, 8, 9]\nconsole.log(oddSort([2, 4, 6, 8]));                // [2, 4, 6, 8]\nconsole.log(oddSort([3, 7, 1, 5, 9]));             // [1, 3, 5, 7, 9]"
      },
      {
        "timestamp": "2025-05-27 08:13:09",
        "content": "2025-05-27 08:13:09\n Артур Виноградов -> 2071074234:\nЯндекс. 1 этап\nЗП: 300к\n\nЗадача 1.\n// — 1 — \nconsole.log( typeof [] ) // ??\n\n// — 2 — \nconsole.log( typeof null ) // ??\n\n// — 3 — \nconsole.log( 1 + \"2\" ) // ??\n\n// — 4 — \nconsole.log( \"4\" - 2 ) // ??\n\n// — 5 — \nconst first = () => console.log('Один')\nconst second = () => console.log('Два')\nconst third = () => console.log('Три')\n\nfirst()\nsetTimeout(second, 0)\nthird()\n\n// ??\n\n// — 6 — \nvar a = 2\nvar b = a\nb++\n\nconsole.log(a) // ??\nconsole.log(b)...",
        "full_content": "2025-05-27 08:13:09\n Артур Виноградов -> 2071074234:\nЯндекс. 1 этап\nЗП: 300к\n\nЗадача 1.\n// — 1 — \nconsole.log( typeof [] ) // ??\n\n// — 2 — \nconsole.log( typeof null ) // ??\n\n// — 3 — \nconsole.log( 1 + \"2\" ) // ??\n\n// — 4 — \nconsole.log( \"4\" - 2 ) // ??\n\n// — 5 — \nconst first = () => console.log('Один')\nconst second = () => console.log('Два')\nconst third = () => console.log('Три')\n\nfirst()\nsetTimeout(second, 0)\nthird()\n\n// ??\n\n// — 6 — \nvar a = 2\nvar b = a\nb++\n\nconsole.log(a) // ??\nconsole.log(b) // ??\n\n// — 7 — \nvar c = [1, 2, 3]\nvar d = c\nd.push(4)\nconsole.log(c) // ??\nconsole.log(d) // ??\n\n// — 8 — \n{\n    console.log(i) // ??\n    let i = 10\n    console.log(i) // ??\n}\n\nОтвет:\nobject\nobject\n12\n2\nОдин\nТри\n2\n3\n[ 1, 2, 3, 4 ]\n[ 1, 2, 3, 4 ]\nReferenceError: Cannot access 'i' before initialization\n\nЗадача 2.\nimport asyncAuth from '...';\n\n/**\n * Функция `asyncAuth(callback)` принимает callback, в который может\n * быть передана ошибка (первым аргументом) и данные\n * с бекенда (вторым аргументом).\n * asyncAuth((error, data) => {});\n *\n * Вам нужно реализовать функцию `auth()`,\n * которая вызывает `asyncAuth()`, но возвращает Promise.\n *\n * @returns {Promise}\n */\nfunction auth() {\n  \n}\n\n/**\n * Функция `tryAuth()` использует `auth()` и, в случае ошибки,\n * совершает N дополнительных попыток.\n * в случае, если все попытки провалились - вернуть последнюю ошибку\n *\n * @returns {Promise}\n */\nfunction tryAuth(n = 5) {\n \n}\n\nОтвет:\nimport asyncAuth from '...';\n\n/**\n * Функция `asyncAuth(callback)` принимает callback, в который может\n * быть передана ошибка (первым аргументом) и данные\n * с бекенда (вторым аргументом).\n * asyncAuth((error, data) => {});\n *\n * Вам нужно реализовать функцию `auth()`,\n * которая вызывает `asyncAuth()`, но возвращает Promise.\n *\n * @returns {Promise}\n */\nfunction auth() {\n  return new Promise((res, rej) => {\n    asyncAuth((error, data) => {\n      if (error) return rej(error);\n      res(data);\n    });\n  });\n}\n\n/**\n * Функция `tryAuth()` использует `auth()` и, в случае ошибки,\n * совершает N дополнительных попыток.\n * в случае, если все попытки провалились - вернуть последнюю ошибку\n *\n * @returns {Promise}\n */\nfunction tryAuth(n = 5) {\n  return new Promise((res, rej) => {\n    auth()\n      .then(res)\n      .catch((err) => {\n        if (n) return tryAuth(n - 1);\n        rej(err);\n      });\n  });\n}\n\nЗадача 3.\n/**\n * Написать декоратор для функции, который ограничивает число вызовов.\n *\n * callLimit(fn, limit, callback) принимает следующие аргументы:\n *  fn – функция, которую декорируем;\n *  limit – максимальное число вызовов;\n *  callback – вызывается, когда совершен последний вызов. Опционально.\n * У вызываемой функции должен быть метод для перезагрузки счетчика в начальное положение.\n */\n\nfunction callLimit(fn, limit, callback) {\n    // Тут что-то написать\n}\n\nfunction log(title, message) {\n    console.log(title + ': ' + message);\n}\n\nОтвет:\nfunction callLimit(fn, limit, callback) {\n  let count = 0; // Счётчик вызовов\n\n   // Обёртка над исходной функцией\n   function wrapper(...args) {\n        if (count >= limit) return; // Прекратить выполнение, если лимит превышен\n\n        count++; // Увеличить счётчик\n\n         // Если вызов достиг лимита — вызвать callback (если он передан)\n         if (count === limit && typeof callback === 'function') {\n             callback();\n         }\n\n         // Вызов оригинальной функции с переданными аргументами\n        return fn.apply(this, args);\n    }\n\n    // Метод для ручного сброса счётчика вызовов\n    wrapper.reset = function () {\n          count = 0;\n    };\n\n  return wrapper; // Вернуть обёрнутую функцию\n}"
      },
      {
        "timestamp": "2025-05-26 19:55:06",
        "content": "2025-05-26 19:55:06\n Лёша -> 2071074234:\nЯндекс 2 этап\n\nСлетело все во время собеса. Первые 2 задачи - типовые. 3 - описал, как мог.\n\nЗадача 1:\n/*\nУ нас есть набор билетов вида:\n\n[\n    { from: 'London', to: 'Moscow' },\n    { from: 'NY', to: 'London' },\n    { from: 'Moscow', to: 'SPb' },\n    ...\n]\n\nИз этих билетов можно построить единственный, неразрывный маршрут.\nПетель и повторов в маршруте нет.\n\nНужно написать программу, которая возвращает эти же объекты билетов\nв порядке следования по маршрут...",
        "full_content": "2025-05-26 19:55:06\n Лёша -> 2071074234:\nЯндекс 2 этап\n\nСлетело все во время собеса. Первые 2 задачи - типовые. 3 - описал, как мог.\n\nЗадача 1:\n/*\nУ нас есть набор билетов вида:\n\n[\n    { from: 'London', to: 'Moscow' },\n    { from: 'NY', to: 'London' },\n    { from: 'Moscow', to: 'SPb' },\n    ...\n]\n\nИз этих билетов можно построить единственный, неразрывный маршрут.\nПетель и повторов в маршруте нет.\n\nНужно написать программу, которая возвращает эти же объекты билетов\nв порядке следования по маршруту. Начало маршрута известно.\n*/\n\nfunction getRoute(tickets = [], start) {\n  const routesMap = {};\n\n  tickets.forEach((item) => {\n    const { from, to } = item;\n    routesMap[from] = to;\n  });\n\n  let currentCity = start;\n  const result = [];\n\n  while (currentCity && routesMap[currentCity]) {\n    result.push({ from: currentCity, to: routesMap[currentCity] });\n    currentCity = routesMap[currentCity];\n  }\n\n  return result;\n}\n\nЗадача 2:\nЕсть некая структура папок, их нужно отрисовать в консоли. Папки могут содержать детей и т.д. Чтобы не было рекурсии.\nfunction printDirectoryStructure(data) {\n    const stack = [{ item: data, level: 0 }];\n    \n    while (stack.length > 0) {\n        const { item, level } = stack.pop();\n        \n        // Print current item with proper indentation\n        console.log('  '.repeat(level) + item.name);\n        \n        // If the item has children, add them to stack in reverse order\n        // to maintain correct output order (since we're using stack)\n        if (item.children) {\n            for (let i = item.children.length - 1; i >= 0; i--) {\n                stack.push({\n                    item: item.children[i],\n                    level: level + 1\n                });\n            }\n        }\n    }\n}\n\nЗадача 3:\nНаписать свой тротл. Из-за ошибки записи - задача не сохранилась, но вот упрощенное решение. Сюда еще нужно контекст прикрутить. Эту задачу не успел сделать.\nfunction throttle(callee, timeout) {\n  let timer = null\n\n  return function perform(...args) {\n    if (timer) return\n\n    // Если таймера нет, значит мы можем вызвать функцию:\n    timer = setTimeout(() => {\n      callee(...args)\n\n      // По окончании сбрасываем таймер:\n      timer = null\n    }, timeout)\n  }\n}"
      },
      {
        "timestamp": "2025-05-26 07:44:12",
        "content": "2025-05-26 07:44:12\n Ильдус Гизетдинов -> 2071074234:\nЯндекс 1 этап:\nЧто выведет и как исправить\nconst object = {\n    value: \"42\",\n    print() {\n      function type() {\n        return typeof this.value;\n      }\n      console.log(`${this.value} is ${type()}`);\n    },\n};\n  \nobject.print(); // 42 is string\n\nСделать свою функцию compose\nconst square = (x) => x * x;\nconst times2 = (x) => x * 2;\nconst sum = (a, b) => a + b;\n\nconsole.log(compose(square, times2)(2) === square(times2(2)));\nconsole.log(co...",
        "full_content": "2025-05-26 07:44:12\n Ильдус Гизетдинов -> 2071074234:\nЯндекс 1 этап:\nЧто выведет и как исправить\nconst object = {\n    value: \"42\",\n    print() {\n      function type() {\n        return typeof this.value;\n      }\n      console.log(`${this.value} is ${type()}`);\n    },\n};\n  \nobject.print(); // 42 is string\n\nСделать свою функцию compose\nconst square = (x) => x * x;\nconst times2 = (x) => x * 2;\nconst sum = (a, b) => a + b;\n\nconsole.log(compose(square, times2)(2) === square(times2(2)));\nconsole.log(compose(square, times2, sum)(3, 4) === square(times2(sum(3, 4))));\n\nОтвет:\nfunction compose(...funcs) {\n  return function (...args) {\n    return funcs.reduceRight((acc, fn) => {\n      return [fn(...acc)];\n    }, args)[0];\n  };\n}\nНаписать функцию которая будет принемать url и если не получаешь данные, попробовать еще 5 раз, потом выбросить ошибку\nfunction get(url, netries = 5) {\n    // code here\n    return fetch(url).then(res => {\n        return res.json()\n    }).then(data => data).catch((err) => {\n        if (netries > 0) {\n            return get(url, netries - 1)\n        } else {\n            return Promis.reject('Заданный URL недоступен')\n        }\n    })\n}\nДан бы объект со вложенностями, нужно вывести массив name где type squirrel\nfunction squirrelScanner(tree) {\n    const result = [];\n\n    // Вспомогательная рекурсивная функция для обхода дерева\n    function fn(node) {\n        // Если в узле белка — добавляем имя в результат\n        if (node.nest.type === 'squirrel') {\n            result.push(node.nest.name);\n        }\n\n        // Если есть ветки — проходимся по каждой из них\n        if (node.branches) {\n            node.branches.forEach(fn);\n        }\n    }\n\n    fn(tree); // запускаем обход с корня\n    return result;\n}"
      },
      {
        "timestamp": "2025-05-26 07:26:12",
        "content": "2025-05-26 07:26:12\n Max -> 2071074234:\nЯндекс 2 этап Алгосы\nЗадача 1:\n/*\nУ нас есть набор билетов вида:\n\n[\n    { from: 'London', to: 'Moscow' },\n    { from: 'NY', to: 'London' },\n    { from: 'Moscow', to: 'SPb' },\n    ...\n]\n\nИз этих билетов можно построить единственный, неразрывный маршрут.\nПетель и повторов в маршруте нет.\n\nНужно написать программу, которая возвращает эти же объекты билетов\nв порядке следования по маршруту. Начало маршрута известно.\n*/\n\nfunction getRoute(tickets = [], start) {...",
        "full_content": "2025-05-26 07:26:12\n Max -> 2071074234:\nЯндекс 2 этап Алгосы\nЗадача 1:\n/*\nУ нас есть набор билетов вида:\n\n[\n    { from: 'London', to: 'Moscow' },\n    { from: 'NY', to: 'London' },\n    { from: 'Moscow', to: 'SPb' },\n    ...\n]\n\nИз этих билетов можно построить единственный, неразрывный маршрут.\nПетель и повторов в маршруте нет.\n\nНужно написать программу, которая возвращает эти же объекты билетов\nв порядке следования по маршруту. Начало маршрута известно.\n*/\n\nfunction getRoute(tickets = [], start) {\n  const routesMap = {};\n\n  tickets.forEach((item) => {\n    const { from, to } = item;\n    routesMap[from] = to;\n  });\n\n  let currentCity = start;\n  const result = [];\n\n  while (currentCity && routesMap[currentCity]) {\n    result.push({ from: currentCity, to: routesMap[currentCity] });\n    currentCity = routesMap[currentCity];\n  }\n\n  return result;\n}\n2 задача:\n//Дан массив ссылок: ['url1', 'url2', ...] и лимит одновременных запросов (limit) Необходимо реализовать функцию, которыя опросит урлы в том //порядку, в котором они идут в массиве, и вызовет callback с массивом ответов ['url1_answer', 'url2_anser', ...] так, чтобы в любой момент //времени выполнялось не более limit запросов (как только любой из них завершился, сразу же отправится следующий) Т.е. нужно реализовать шину с шириной равной limit.\n// доп. добавить мемоизацию\nfunction parallelLimit(urls, limit, callback) {\n    // Если limit больше количества URL, устанавливаем его равным длине массива URL\n    limit = Math.min(limit, urls.length);\n    \n    let results = new Array(urls.length);\n    let active = 0;\n    let index = 0;\n    const cache = new Map(); // Добавляем кэш для мемоизации\n    \n    function processNext() {\n        if (index >= urls.length && active === 0) {\n            callback(results);\n            return;\n        }\n        \n        while (index < urls.length && active < limit) {\n            const currIndex = index;\n            const url = urls[currIndex];\n            index++;\n            active++;\n            \n            // Проверяем наличие URL в кэше\n            if (cache.has(url)) {\n                // Если URL уже в кэше, берём результат оттуда\n                results[currIndex] = cache.get(url);\n                active--;\n                // Используем setTimeout для асинхронности и предотвращения переполнения стека\n                setTimeout(processNext, 0);\n            } else {\n                // Если URL нет в кэше, выполняем запрос\n                fetch(url)\n                    .then(response => {\n                        // Сохраняем ответ в кэш\n                        cache.set(url, response);\n                        results[currIndex] = response;\n                        active--;\n                        processNext();\n                    });\n            }\n        }\n    }\n    \n    // Обработка пустого массива URL\n    if (urls.length === 0) {\n        callback(results);\n        return;\n    }\n    \n    processNext();\n}"
      },
      {
        "timestamp": "2025-05-23 10:59:44",
        "content": "2025-05-23 10:59:44\n Alexandro 4 -> 2071074234:\nЯндекс.Маркет 2 этап (алгосы)\nHR сам написал\n250К\n\n1) Приложение-чат\nУСЛОВИЯ\n/**\n * Наше приложение-чат должно отображать новые сообщения, которые приходят с сервера, как можно быстрее.\n *\n * Сообщение имеет формат:\n * interface Message {\n *   id: number\n *   text: string\n * }\n *\n * Id самого первого сообщения = 1, а id каждого следующего сообщения на 1 больше, чем id предыдущего.\n * Нам нужно выводить сообщения в правильном порядке, однако сервер ...",
        "full_content": "2025-05-23 10:59:44\n Alexandro 4 -> 2071074234:\nЯндекс.Маркет 2 этап (алгосы)\nHR сам написал\n250К\n\n1) Приложение-чат\nУСЛОВИЯ\n/**\n * Наше приложение-чат должно отображать новые сообщения, которые приходят с сервера, как можно быстрее.\n *\n * Сообщение имеет формат:\n * interface Message {\n *   id: number\n *   text: string\n * }\n *\n * Id самого первого сообщения = 1, а id каждого следующего сообщения на 1 больше, чем id предыдущего.\n * Нам нужно выводить сообщения в правильном порядке, однако сервер не гарантирует правильный порядок\n * сообщений, отправляемых в наше приложение.\n *\n * Таймлайн:\n * // (приходит) 7  1  2  3  6  5  4  8\n * // (рисуем)   .  1  2  3  .  4  5  6  7  8\n *\n * Сообщения от сервера приходят в обработчик функции connect:\n * connect(function onMessage(message) {\n *   ...\n * }); \n * \n * Отображать сообщения нужно с помощью функции render:\n * render(message)\n */\n\n// function solution(connect, render) {\n//     connect(function onMessage(message) {\n//         render(message);\n//     });\n// }\n\n\n//приходит 7 1 2 3 6 5 4 8\n//рисунок 1 2 3 4 5 6 7 8 9\n\nРЕШЕНИЕ\nfunction solution(connect, render) {\n    let id = 1;\n    const map = new Map();\n\n    connect(function onMessage(message) {\n        map.set(message.id, message);\n        console.log(map);\n        while (map.has(id)) {\n            render(map.get(id));\n            map.delete(id);\n            id++;\n        }\n    });\n}\n\n\n2) Вывод структуры со вложенностью без рекурсии\nУСЛОВИЯ\n/*\nДана вложенная структура файлов и папок в виде объекта:\n*/\n\nconst data = {\n    name: 'folder',\n    children: [\n        { name: 'file1.txt' },\n        { name: 'file2.txt' },\n        {\n            name: 'images',\n            children: [\n                { name: 'image.png' },\n                {\n                    name: 'vacation',\n                    children: [\n                        { name: 'crocodile.png' },\n                        { name: 'penguin.png' }\n                    ]\n                }\n            ]\n        },\n        { name: 'shopping-list.pdf' }\n    ]\n};\n/*\nЗадача:\nНужно вывести в консоль файлы и папки с отступами, чтобы показать вложенность.\nРешение должно учитывать любую вложенность элементов (т.е. не должно содержать рекурсивные вызовы).\n\nОжидаемый вывод:\nfolder\n  file1.txt\n  file2.txt\n  images\n    image.png\n    vacation\n      crocodile.png\n      penguin.png\n  shopping-list.pdf\n*/\nРЕШЕНИЕ\nfunction printDirectoryStructure (data) {\n    const stack  = [{data, level: 0}]\n\n    while (stack.length > 0) {\n        const {level, data} = stack.pop()\n        console.log(' '.repeat(level) + data.name)\n\n        const children = data?.children\n        if (children) {\n            for (let i= children.length -1; i >= 0; i--) {\n                stack.push({\n                    data: children[i],\n                    level: level + 1\n                })\n            }\n        }\n    }\n}"
      },
      {
        "timestamp": "2025-05-20 15:29:58",
        "content": "2025-05-20 15:29:58\n Sasha -> 2071074234:\nЯндекс Эйчартех, этап с командами. 2 команда. \nПришел один чел в итоге, по большей части ничего не спрашивал, задал только один вопрос на который стоит обратить внимание. Собеседование прошло скучно и уныло. Собственно сам вопрос:\n1. Отлавливание ошибок на стороне фронта. Нужно рассказать про sentry",
        "full_content": "2025-05-20 15:29:58\n Sasha -> 2071074234:\nЯндекс Эйчартех, этап с командами. 2 команда. \nПришел один чел в итоге, по большей части ничего не спрашивал, задал только один вопрос на который стоит обратить внимание. Собеседование прошло скучно и уныло. Собственно сам вопрос:\n1. Отлавливание ошибок на стороне фронта. Нужно рассказать про sentry"
      },
      {
        "timestamp": "2025-05-20 14:56:17",
        "content": "2025-05-20 14:56:17\n Sasha -> 2071074234:\nЯндекс Эйчартех, этап с командами. 1 команда.\nБыли те же вопросы.\n\nПомимо них:\n1. Настраивал ли сборщики? Webpack, vite.\n2. Разбивал ли на чанки?\n3. Настраивал ли CI/CD?\n4.  Было ли требование к покрытию тестами?\n5. Как принималось решение о покрытие тестами?\n6.  Встречался с оптимизацией со стороны Next. Вопрос по нексту был так как он рендерится на серваке.\n7.  Вопрос по оптимизации(lazyload, preloader).\n8, На странице есть input, ввел символ но он мед...",
        "full_content": "2025-05-20 14:56:17\n Sasha -> 2071074234:\nЯндекс Эйчартех, этап с командами. 1 команда.\nБыли те же вопросы.\n\nПомимо них:\n1. Настраивал ли сборщики? Webpack, vite.\n2. Разбивал ли на чанки?\n3. Настраивал ли CI/CD?\n4.  Было ли требование к покрытию тестами?\n5. Как принималось решение о покрытие тестами?\n6.  Встречался с оптимизацией со стороны Next. Вопрос по нексту был так как он рендерится на серваке.\n7.  Вопрос по оптимизации(lazyload, preloader).\n8, На странице есть input, ввел символ но он медленно отработал. Что будешь делать? Если на странице много input обернуть в usecallback.\n9. Когда стоит использовать useCallback, useMemo. А когда не стоит?\n10. Реконсиляция (Reconsilation).\n11. Что может произойти если мы передали функцию в компонент, и не обернули в memo или usecallback.\n12. Что  приходит на ум. Ввел несколько символов, но они затерлись.\n13. Приходилось работать с таблицами? Оптимизировал ли таблицы? Про виртуализацию стоит рассказать.\n14. Какой выбрать стейт менеджер? Redux vs Context.\n15. Спрашивал React Hook Form. Динамическое добавление input. useFieldsArray.\n16. Где применял WebSoket?\n17.  Что делали с промежуточным данными которые могли потеряться при переподлючении к сокету?\n18. Использовал ли React Query?\n19. Что бы решил использовать из личных проектов? Из пет проектов.\n20.  Рассказать про TypeScript? Спросил про Infer.\n21. Рассказать про SCSS, есть ли сходства с новым CSS. Почему бы использовал SCSS?"
      },
      {
        "timestamp": "2025-05-19 16:16:13",
        "content": "2025-05-19 16:16:13\n Sasha -> 2071074234:\nЯндекс Эйчартех, этап с вопросами по опыту работы.\nЗапросил 200.000 - 250.000\n\nРассказать про последний опыт? За последний год.\nРассказать про работу в команде?\nНад каким проектом работали?\nКак устроена работа над проектами?\nКакая роль в команде?\nРассказать про согласование handler`ов на бэке? Надо было рассказать как устроена апиха, где что описывалось.\nРассказать про команда? \nСколько человек в команде кто за что отвечает? \nКак работали? По спринтам?\nК...",
        "full_content": "2025-05-19 16:16:13\n Sasha -> 2071074234:\nЯндекс Эйчартех, этап с вопросами по опыту работы.\nЗапросил 200.000 - 250.000\n\nРассказать про последний опыт? За последний год.\nРассказать про работу в команде?\nНад каким проектом работали?\nКак устроена работа над проектами?\nКакая роль в команде?\nРассказать про согласование handler`ов на бэке? Надо было рассказать как устроена апиха, где что описывалось.\nРассказать про команда? \nСколько человек в команде кто за что отвечает? \nКак работали? По спринтам?\nКак происходила постановка задачи?\nРассказать про фронтовую команду. Менторил ли кого то или учавствовал в найме?\n\nОбсуждение задач, которыми занимался. Тут стоит приготовить и расписать интересную задачу.\nКакие технологии использовали? Рассказать про стек, рассказывал про либы, помимо стека.\nРассказать для чего использовал WebSoket? Почему решили именно WebSoket?\nРассказать про менеджеры websoket? soketIO\nКак распределяли нагрузку по вебсокетам?\nЧто бы я сделал если вебсокеты не держат соединение? Рассказать про балансировщики, рассказать про сессии\nКакая нагрузка была на вебсокеты?\nКак отдавал данные бэкенд? Их было много\nКак выкатываем сервисы? Занимался ли релизами? Настраивал ли CI/CD? Рассказывал про CI/CD\nРазворачивал ли сам что то? Выкатывал код в продакшен?\nЕсть задачка выкатить код в прод? Как бы настраивал? Я сказал что у нас этим занимался девопс\nКак с тестированием? \nПроводим ли тестирование? \nБыли ли unit тесты?\nГоворили про e2e тесты? Какие бы добавил?\nДал задачку на тестирование, объяснить какие тесты внедрил бы? Какие виды тестов сделал?\nПриходилось ли оптимизировать приложение?\nТипичная задачка, у клиента сайт медленно грузится. Рассказывал про вкладку network, memory, react-profiler, виртуализацию, webpack, мемоизация\nРассказать про метрики отрисок? Рассказывал про lighthouse\nЕсть жалобы от клиентов. Сайт долго грузится. Рассказывал что можно замедлить соединение в network\n\nПривести пример когда что привносил в проект? Оптимизировал что то\nРассказать про конфликты внутри команды.\nРассказать пример когда наоборот положительная коммуникация оказала хорошее влияние."
      },
      {
        "timestamp": "2025-05-15 14:24:56",
        "content": "2025-05-15 14:24:56\n Артур Виноградов -> 2071074234:\nЯндекс. 2 этап (новый)\nЗП: 300\nОдна большая задача.\nт.к она реально огромная по содержанию, запилил в файлы",
        "full_content": "2025-05-15 14:24:56\n Артур Виноградов -> 2071074234:\nЯндекс. 2 этап (новый)\nЗП: 300\nОдна большая задача.\nт.к она реально огромная по содержанию, запилил в файлы"
      },
      {
        "timestamp": "2025-05-15 07:27:57",
        "content": "2025-05-15 07:27:57\n Alexandro 4 -> 2071074234:\nfunction PromiseAny (arr) {\n\n    if (arr.length === 0) {\n        return Promise.reject(new AggregateError([], 'Все промисы отклонены'))\n    }\n\n    return new Promise((resolve, reject) => {\n        const errors = []\n        let rejectedCount = 0\n        arr.forEach((promise, index) => {\n            Promise.resolve(promise)\n                .then(resolve)\n                .catch((error) => {\n                    errors[index] = error\n                   ...",
        "full_content": "2025-05-15 07:27:57\n Alexandro 4 -> 2071074234:\nfunction PromiseAny (arr) {\n\n    if (arr.length === 0) {\n        return Promise.reject(new AggregateError([], 'Все промисы отклонены'))\n    }\n\n    return new Promise((resolve, reject) => {\n        const errors = []\n        let rejectedCount = 0\n        arr.forEach((promise, index) => {\n            Promise.resolve(promise)\n                .then(resolve)\n                .catch((error) => {\n                    errors[index] = error\n                    rejectedCount += 1\n\n                    if (rejectedCount === arr.length) {\n                        reject(new AggregateError(errors, 'Все промисы отклонены'))\n                    }\n            })\n        })\n    })\n}\nP.S. Похоже Яндекс меняет стиль проведения собесов, ибо ранее на этапе JS дебажить нельзя было и шарить экран не просили."
      },
      {
        "timestamp": "2025-05-15 07:27:57",
        "content": "2025-05-15 07:27:57\n Alexandro 4 -> 2071074234:\n15.05 Яндекс.Маркет\n- Первый этап (JS)\n- HR сам написал.\n- 250 (но вилка 250-400 если верить HR с яндекс мульти трека)\n\nЗастримить не получилось, потому что собес проходил в 8 утра по мск. \nДумаю, все спят в это время. Надо будет слот брать после обеда в следующий раз.\n\nВАЖНО: В самом начале попросили проверить шаринг экрана до того как дали ссылку на комнату интервью.\nПотом с третьей задачи разрешили дебажить (появляется кнопка Run Code), но нужно...",
        "full_content": "2025-05-15 07:27:57\n Alexandro 4 -> 2071074234:\n15.05 Яндекс.Маркет\n- Первый этап (JS)\n- HR сам написал.\n- 250 (но вилка 250-400 если верить HR с яндекс мульти трека)\n\nЗастримить не получилось, потому что собес проходил в 8 утра по мск. \nДумаю, все спят в это время. Надо будет слот брать после обеда в следующий раз.\n\nВАЖНО: В самом начале попросили проверить шаринг экрана до того как дали ссылку на комнату интервью.\nПотом с третьей задачи разрешили дебажить (появляется кнопка Run Code), но нужно расшарить экран.\n\n\n1) Что будет выводиться в консоль?\nvar n = 1;\nfunction f(n) {\n  n = 3;\n}\nf(n);\nconsole.log(n); // ?? 1\n\n\nvar obj = { a: 1 };\nfunction f1(o) {\n  o.a = 5;\n}\nf1(obj);\nconsole.log(obj); // ?? { a: 5 };\n\n\nvar obj = { a: 1 };\nfunction f2(o) {\n  o = { hello: 1 };\n}\nf2(obj);\nconsole.log(obj); // ??{ a: 1 };\n\n2) Sleep\n/*\n  Написать функцию sleep, которая будет спать заданное количество миллисекунд, а потом успешно завершаться\n  Тут необходимо было рассказать про eventloop и как браузер будет обрабатывать код\n*/\nfunction sleep(duration) {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve()\n        }, duration)\n    })\n}\n\n3) Реализовать GroupBy у массивов\n/*\n- Необходимо реализовать метод groupBy, расширяющий стандартные методы массивов.\n- Метод должен возвращать сгруппированную версию массива — объект,\n- в котором каждый ключ является результатом выполнения переданной функции fn(arr[i]),\n- а каждое значение — массивом, содержащим все элементы исходного массива с этим ключом.\n*/\nArray.prototype.groupBy = function (cb) {\n  if (!cb) {\n    throw new Error('No callback added')\n  }\n  \n  result = {}\n  \n  for (const item of this){\n        const key = cb(item)\n        if (!result[key]) {\n            result[key] = []\n        }\n        result[key].push(item)  \n  }\n   \n  return result\n}\n\nconst arr = [3.3, 0.5, 1.4]\nconsole.log(arr.groupBy(Math.round))\n\n4) get(url)\n/*\n- Необходимо написать функцию, которая на вход принимает урл,\n- асинхронно ходит по этому урлу GET запросом и возвращает данные (json).\n- Для получения данных использовать fetch.\n- Можно использовать только Promise API\n- Если во время запроса произошла ошибка, то пробовать запросить ещё 5 раз.\n- Если в итоге информацию получить не удалось, вернуть ошибку \"Заданный URL недоступен\".\n*/\nfunction get(url, retries = 5) {\n    return fetch(url).then(res => {\n        if (!res.ok) {\n            throw new Error('ошибка сети')\n        }\n        return res.json()\n    }).then(data => data).catch((err) => {\n        if (retries > 0) {\n            return get(url, retries - 1)\n        } else {\n            throw new Error('Заданный URL недоступен')\n        }\n    })\n}\n\n5) Перевод строки в из camelCase в underscore_case\nfunction convert(text){\n    const arr = text.split('')\n    let result = ''\n    for (let i = 0; i < arr.length; i++){\n        let char = arr[i];\n        if (i >= 1 && char === char.toUpperCase()){\n            result += '_' + char.toLowerCase()\n        } else {\n            result += char.toLowerCase()\n        }\n    }\n    return result;\n}\n\nconsole.log(convert(\"updatedAt\")) // updated_ad\nconsole.log(convert(\"XmlHttpRequest\")) // xml_http_request\n\nЗдесь спросили про сложность алгоритма. Сказал, что линейная O(N).\nНо был вопрос, что на самом деле в JS это не так, мол из-за конкатенации строки \"result += '_' + char.toLowerCase()\" на очень длинных строках начинаются какие то проблемы (чисто проблема JS, в других языках такого нет)\n\n6) Реализовать Promise.any"
      },
      {
        "timestamp": "2025-05-12 18:37:27",
        "content": "2025-05-12 18:37:27\n Василий -> 2071074234:\n05.05 Яндекс 1 этап - знакомство, вопросы по опыту.\n-Чем горжусь \n-Что ищу\n-Почему ушёл",
        "full_content": "2025-05-12 18:37:27\n Василий -> 2071074234:\n05.05 Яндекс 1 этап - знакомство, вопросы по опыту.\n-Чем горжусь \n-Что ищу\n-Почему ушёл"
      },
      {
        "timestamp": "2025-05-10 19:43:37",
        "content": "2025-05-10 19:43:37\n Alexandro 4 -> 2071074234:\nЯндекс Маркет. HR скрининг.\nЗП 250\n\n1) Расскажите об опыте в IT (универ, первая работа, вторая работа)\n2) Как устроена работа в команде (про scrum)\n3) Самая сложная задача на текущем месте работы?\n4) Куда планируете разиваться (сказал, что в NextJS)\n5) Готовы к офису/гибриду? (к следующему этапу, видимо, пригласят только, если готов к гибриду, предлагают помощь при релокации)\nОтвечал так себе. Как будто в любом случае позовут на этап технички.\nP.S....",
        "full_content": "2025-05-10 19:43:37\n Alexandro 4 -> 2071074234:\nЯндекс Маркет. HR скрининг.\nЗП 250\n\n1) Расскажите об опыте в IT (универ, первая работа, вторая работа)\n2) Как устроена работа в команде (про scrum)\n3) Самая сложная задача на текущем месте работы?\n4) Куда планируете разиваться (сказал, что в NextJS)\n5) Готовы к офису/гибриду? (к следующему этапу, видимо, пригласят только, если готов к гибриду, предлагают помощь при релокации)\nОтвечал так себе. Как будто в любом случае позовут на этап технички.\nP.S. Два HR написали сами и общался со вторым (Маркет), а первая скидывала ссылку на MultiTrack вакансию - https://getmatch.ru/vacancies/15519 и сразу указала вилку до 400к, но с ней общение не пошло - ответил ей, что желательна удаленка и дальше игнор на двое суток."
      },
      {
        "timestamp": "2025-05-06 14:52:41",
        "content": "2025-05-06 14:52:41\n Sasha -> 2071074234:\nЯндекс. Эйчартех. 1 этап проверка знаний на js.\n1.  Тут все понятно, реализация своего intersection\n\nSet.prototype.intersection = function (otherSet) {\n  const result = new Set();\n  const [small, large] = this.size < otherSet.size ? [this, otherSet] : [otherSet, this];\n\n  for (const item of small) {\n    if (large.has(item)) {\n      result.add(item);\n    }\n  }\n\n  return result;\n};\n2. В комментах написано что нужно сделать\n\n/**\n * ✅ Реализовать функцию any...",
        "full_content": "2025-05-06 14:52:41\n Sasha -> 2071074234:\nЯндекс. Эйчартех. 1 этап проверка знаний на js.\n1.  Тут все понятно, реализация своего intersection\n\nSet.prototype.intersection = function (otherSet) {\n  const result = new Set();\n  const [small, large] = this.size < otherSet.size ? [this, otherSet] : [otherSet, this];\n\n  for (const item of small) {\n    if (large.has(item)) {\n      result.add(item);\n    }\n  }\n\n  return result;\n};\n2. В комментах написано что нужно сделать\n\n/**\n * ✅ Реализовать функцию any, которая бы работала, как Promise.any().\n * ▪️ Функция принимает массив промисов (считаем, что не пустой) и возвращает промис.\n * ▪️ Если какой-то из переданных промисов резолвится (успешно выполняется), то возвращаемый промис резолвится с этим значением.\n * ▪️ Если все переданные промисы реджектятся, то возвращаемый промис реджектится с ошибкой AggregateError, в которой сгруппированы все ошибки, с учётом порядка.\n *\n * AggregateError можно создавать таким образом:\n * new AggregateError(errors, 'No Promise in any was resolved')\n */\n\nclass AggregateError extends Error {\n  constructor(errors, message) {\n    super(message);\n    this.errors = errors;\n    this.name = 'AggregateError';\n  }\n}\n\nfunction any(promises) {\n  return new Promise((resolve, reject) => {\n    const errors = [];\n    let rejectedCount = 0;\n\n    promises.forEach((p, i) => {\n      Promise.resolve(p)\n        .then(resolve)\n        .catch((err) => {\n          errors[i] = err;\n          rejectedCount++;\n          if (rejectedCount === promises.length) {\n            reject(new AggregateError(errors, 'No Promise in any was resolved'));\n          }\n        });\n    });\n  });\n}\n\n// Примеры использования\nconsole.clear();\nconst p1 = Promise.reject('Error 1');\nconst p2 = Promise.reject('Error 2');\nconst p3 = Promise.resolve(3);\n\nany([p1, p2, p3]).then(console.log); // 3\n3. Что то типо реализации методов массива + вывод максимального значения\n\nclass MaxStack {\n  constructor() {\n    this.stack = [];\n    this.maxStack = [];\n  }\n\n  push(value) {\n    this.stack.push(value);\n    const max = this.maxStack.length === 0\n      ? value\n      : Math.max(value, this.maxStack[this.maxStack.length - 1]);\n    this.maxStack.push(max);\n  }\n\n  pop() {\n    if (this.stack.length === 0) throw new Error('Stack is empty');\n    this.maxStack.pop();\n    return this.stack.pop();\n  }\n\n  max() {\n    if (this.maxStack.length === 0) throw new Error('Stack is empty');\n    return this.maxStack[this.maxStack.length - 1];\n  }\n}\n\nconst stack = new MaxStack();\nstack.push(2); // max = 2, stack = [2]\nstack.push(1); // max = 2, stack = [2, 1]\nstack.push(3); // max = 3, stack = [2, 1, 3]\nstack.push(3); // max = 3"
      },
      {
        "timestamp": "2025-05-05 13:43:43",
        "content": "2025-05-05 13:43:43\n Василий -> 2071074234:\n- Яндекс Кинопоиск Smart TV 1 этап. \n- Вакансия https://yandex.ru/jobs/vacancies/razrabotchik-interfeysov-v-kinopoisk-smart-tv-33211\nТолько софтовые вопросы.\n\n- опыт\n- какие сложные задачи я делал\n- что меня мотивирует в работе\n- как устроена команда, как происходит управление (scrum, kanban)\n- какими своими фичами я горжусь в проекте",
        "full_content": "2025-05-05 13:43:43\n Василий -> 2071074234:\n- Яндекс Кинопоиск Smart TV 1 этап. \n- Вакансия https://yandex.ru/jobs/vacancies/razrabotchik-interfeysov-v-kinopoisk-smart-tv-33211\nТолько софтовые вопросы.\n\n- опыт\n- какие сложные задачи я делал\n- что меня мотивирует в работе\n- как устроена команда, как происходит управление (scrum, kanban)\n- какими своими фичами я горжусь в проекте"
      },
      {
        "timestamp": "2025-05-04 19:00:42",
        "content": "2025-05-04 19:00:42\n Артур Виноградов -> 2071074234:\nЯндекс. Скрининг\nЗП: 300\n\n1) Готовы ли рассмотреть гибридный или офисный формат работы (2-3 дня в неделю в офисе)?\n2) Есть ли офферы на руках? Есть ли дедлайн по принятию решения?\n3) Сколько лет опыта TypeScript и React? Сколько лет опыта на NodeJS. Что именно делали? \n4) Какая роль на последнем месте? Какими задачами занимаетесь?\n5) Были ли тесты на проекте, если да, то какие?\n6) Когда вы готовы предварительно начать процесс прохождения техни...",
        "full_content": "2025-05-04 19:00:42\n Артур Виноградов -> 2071074234:\nЯндекс. Скрининг\nЗП: 300\n\n1) Готовы ли рассмотреть гибридный или офисный формат работы (2-3 дня в неделю в офисе)?\n2) Есть ли офферы на руках? Есть ли дедлайн по принятию решения?\n3) Сколько лет опыта TypeScript и React? Сколько лет опыта на NodeJS. Что именно делали? \n4) Какая роль на последнем месте? Какими задачами занимаетесь?\n5) Были ли тесты на проекте, если да, то какие?\n6) Когда вы готовы предварительно начать процесс прохождения технических этапов?"
      },
      {
        "timestamp": "2025-04-29 16:34:48",
        "content": "2025-04-29 16:34:48\n Равиль Васильев -> 2071074234:\nЯндекс с командой\n\nЗП - 240/270 на руки\n\n📢 Вакансия -hr написала\n\n🎥 Запись собеса - https://www.youtube.com/watch?v=UEF3s7jxl40",
        "full_content": "2025-04-29 16:34:48\n Равиль Васильев -> 2071074234:\nЯндекс с командой\n\nЗП - 240/270 на руки\n\n📢 Вакансия -hr написала\n\n🎥 Запись собеса - https://www.youtube.com/watch?v=UEF3s7jxl40"
      },
      {
        "timestamp": "2025-04-22 10:48:11",
        "content": "2025-04-22 10:48:11\n Лёша -> 2071074234:\nКомпания: Яндекс 2 этап\n\nЗадачи:\n1\n/**\n * Наше приложение-чат должно отображать новые сообщения, которые приходят с сервера, как можно быстрее.\n *\n * Сообщение имеет формат:\n * interface Message {\n *   id: number\n *   text: string\n * }\n *\n * Id самого первого сообщения = 1, а id каждого следующего сообщения на 1 больше, чем id предыдущего.\n * Нам нужно выводить сообщения в правильном порядке, однако сервер не гарантирует правильный порядок\n * сообщений, о...",
        "full_content": "2025-04-22 10:48:11\n Лёша -> 2071074234:\nКомпания: Яндекс 2 этап\n\nЗадачи:\n1\n/**\n * Наше приложение-чат должно отображать новые сообщения, которые приходят с сервера, как можно быстрее.\n *\n * Сообщение имеет формат:\n * interface Message {\n *   id: number\n *   text: string\n * }\n *\n * Id самого первого сообщения = 1, а id каждого следующего сообщения на 1 больше, чем id предыдущего.\n * Нам нужно выводить сообщения в правильном порядке, однако сервер не гарантирует правильный порядок\n * сообщений, отправляемых в наше приложение.\n *\n * Таймлайн:\n * // (приходит) 7  1  2  3  6  5  4  8\n * // (рисуем)   .  1  2  3  .  4  5  6  7  8\n *\n * Сообщения от сервера приходят в обработчик функции connect:\n * connect(function onMessage(message) {\n *   ...\n * }); \n * \n * Отображать сообщения нужно с помощью функции render:\n * render(message)\n */\n\nfunction solution(connect, render) {\n    connect(function onMessage(message) {\n        render(message);\n    });\n}\n\n2\n/**\n * В прототипе рекламной сети продажа рекламных мест устроена \n * следующим образом: покупатели заранее называют свою цену,\n * а на каждом рекламном месте отвечают, готовы ли его купить или нет. \n * Необходимо реализовать функцию, которая будет проводить продажу рекламного места.\n * Buyer ожидает согласия или отказа от покупателя с самой высокой цены,\n * а затем предлагает рекламное место покупателю с самой низкой ценой\n * среди тех, кто согласился на покупку.\n * \n * Вернуть ответ из функции нужно настолько быстро, насколько это возможно.\n * \n * Примеры:\n * \n * Покупатели предлагают цену 1, 5, 10\n * Покупатель с предложением 10 отвечает отказом\n * Покупатель с предложением 1 отвечает согласием // Всё ещё ждём, \n * проверяем покупателя с предложением 5 \n * \n * ------------\n * \n * Покупатели предлагают цену 1, 5, 10\n * Покупатель с предложением 1 отвечает отказом\n * Покупатель с предложением 10 отвечает согласием // Ждём ответа от покупателя с предложением 1 – его точно не выберем\n * \n * ------------\n * \n * Покупатели предлагают цену 1, 2\n * Покупатель с предложением 1 отвечает отказом\n * Покупатель с предложением 2 отвечает отказом // Не выбираем ни одного покупателя\n */\n\n/* \ntype Buyer = {\n    price: number,\n    accepts: () => Promise<boolean>,\n}\n*/"
      },
      {
        "timestamp": "2025-04-22 10:44:24",
        "content": "2025-04-22 10:44:24\n Лёша -> 2071074234:\nКомпания: Яндекс 1 этап\n\nЗадачи:\n1\n// — 1 — \nconsole.log( typeof [] ) // ??\n\n// — 2 — \nconsole.log( typeof null ) // ??\n\n// — 3 — \nconsole.log( 1 + \"2\" ) // ??\n\n// — 4 — \nconsole.log( \"4\" - 2 ) // ??\n\n// — 5 — \nconst first = () => console.log('Один')\nconst second = () => console.log('Два')\nconst third = () => console.log('Три')\n\nfirst()\nsetTimeout(second, 0)\nthird()\n\n// ??\n\n// — 6 — \nvar a = 2\nvar b = a\nb++\n\nconsole.log(a) // ??\nconsole.log(b) // ??\n\n// —...",
        "full_content": "2025-04-22 10:44:24\n Лёша -> 2071074234:\nКомпания: Яндекс 1 этап\n\nЗадачи:\n1\n// — 1 — \nconsole.log( typeof [] ) // ??\n\n// — 2 — \nconsole.log( typeof null ) // ??\n\n// — 3 — \nconsole.log( 1 + \"2\" ) // ??\n\n// — 4 — \nconsole.log( \"4\" - 2 ) // ??\n\n// — 5 — \nconst first = () => console.log('Один')\nconst second = () => console.log('Два')\nconst third = () => console.log('Три')\n\nfirst()\nsetTimeout(second, 0)\nthird()\n\n// ??\n\n// — 6 — \nvar a = 2\nvar b = a\nb++\n\nconsole.log(a) // ??\nconsole.log(b) // ??\n\n// — 7 — \nvar c = [1, 2, 3]\nvar d = c\nd.push(4)\nconsole.log(c) // ??\nconsole.log(d) // ??\n\n// — 8 — \n{\n    console.log(i) // ??\n    var i = 10\n    console.log(i) // ??\n}\n\n2\n// Необходимо реализовать метод groupBy, расширяющий стандартные методы массивов.\n// Метод должен возвращать сгруппированную версию массива — объект,\n// в котором каждый ключ является результатом выполнения переданной функции fn(arr[i]),\n// а каждое значение — массивом, содержащим все элементы исходного массива с этим ключом.\n\n// code here\n\n3\n/**\n * Необходимо написать функцию, которая на вход принимает url,\n * асинхронно ходит по этому урлу GET запросом и возвращает данные (json).\n * Для получения данных использовать fetch.\n * Можно использовать только Promise API\n * Если во время запроса произошла ошибка, то пробовать запросить ещё 5 раз.\n * Если в итоге информацию получить не удалось, вернуть ошибку \"Заданный URL недоступен\".\n */\n\nfunction get(url) {\n    // code here\n}\n\nget(url)\n  .then(res => console.log(res))\n  .catch(err => console.error(err))\n\n4\n// Вам задана строка, состоящая из латинских букв, пробелов и знаков препинания.\n// Строка называется панграммой, если она содержит каждую из 26 латинских\n// букв хотя бы раз. Определите, является ли строка панграммой.\n// Сложность O(n)\n\nconst LETTERS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\nfunction isPangram(text) {\n    // your code here\n}\n\n5\n/**\n * Написать декоратор для функции, который ограничивает число вызовов.\n *\n * callLimit(fn, limit, callback) принимает следующие аргументы:\n *  fn – функция, которую декорируем;\n *  limit – максимальное число вызовов;\n *  callback – вызывается, когда совершен последний вызов. Опционально.\n * У вызываемой функции должен быть метод для перезагрузки счетчика в начальное положение.\n */\n\nfunction callLimit(fn, limit, callback) {\n    // Тут что-то написать\n}\n\nfunction log(title, message) {\n    console.log(title + ': ' + message);\n}"
      },
      {
        "timestamp": "2025-04-16 17:20:01",
        "content": "2025-04-16 17:20:01\n Max -> 2071074234:\n- Яндекс (1 этап)\n- зп: 200 \n- hr написал\nЗадачи:\n1. Написать функцию, которая вызывается один раз\nfunction runOnce(fn) {\n  let called = false;\n  return function (...args) {\n    if (!called) {\n      called = true;\n      return fn.apply(this, args);\n    }\n  };\n}\n\nconst logHello = () => {\n  console.clear();\n  console.log('hello');\n};\n\nconst logHelloOnce = runOnce(logHello);\nlogHelloOnce(); // 'hello'\nlogHelloOnce(); // undefined\n2 задача:\nРеализуйте функцию ...",
        "full_content": "2025-04-16 17:20:01\n Max -> 2071074234:\n- Яндекс (1 этап)\n- зп: 200 \n- hr написал\nЗадачи:\n1. Написать функцию, которая вызывается один раз\nfunction runOnce(fn) {\n  let called = false;\n  return function (...args) {\n    if (!called) {\n      called = true;\n      return fn.apply(this, args);\n    }\n  };\n}\n\nconst logHello = () => {\n  console.clear();\n  console.log('hello');\n};\n\nconst logHelloOnce = runOnce(logHello);\nlogHelloOnce(); // 'hello'\nlogHelloOnce(); // undefined\n2 задача:\nРеализуйте функцию compose, которая принимает любое количество функций и возвращает новую функцию.\nfunction compose(...fns) {\n  return function (...args) {\n    return fns.reduceRight((res, fn, index) => {\n      // Если это самая правая функция, она вызывается с аргументами\n      return index === fns.length - 1 ? fn(...res) : fn(res);\n    }, args);\n  };\n}"
      },
      {
        "timestamp": "2025-04-11 09:22:49",
        "content": "2025-04-11 09:22:49\n Dan -> 2071074234:\nЯндекс (алгосы) 2й этап\nзп - ?\nхрка сама написала \n\nДан массив чисел (возможно неупорядоченный). Требуется преобразовать его в строку, где последовательные числа представлены в виде диапазонов через дефис (например, \"1-3\"), а отдельные числа или диапазоны разделены запятыми.\nfunction compress(numbers) {\n  if (numbers.length === 0) return '';\n  \n  // Сортируем числа\n  const sorted = [...numbers].sort((a, b) => a - b);\n  \n  const ranges = [];\n  let start = s...",
        "full_content": "2025-04-11 09:22:49\n Dan -> 2071074234:\nЯндекс (алгосы) 2й этап\nзп - ?\nхрка сама написала \n\nДан массив чисел (возможно неупорядоченный). Требуется преобразовать его в строку, где последовательные числа представлены в виде диапазонов через дефис (например, \"1-3\"), а отдельные числа или диапазоны разделены запятыми.\nfunction compress(numbers) {\n  if (numbers.length === 0) return '';\n  \n  // Сортируем числа\n  const sorted = [...numbers].sort((a, b) => a - b);\n  \n  const ranges = [];\n  let start = sorted[0];\n  let end = start;\n  \n  for (let i = 1; i < sorted.length; i++) {\n    const current = sorted[i];\n    \n    // Если текущее число следует за предыдущим, расширяем диапазон\n    if (current === end + 1) {\n      end = current;\n    } else {\n      // Иначе закрываем текущий диапазон и начинаем новый\n      if (start === end) {\n        ranges.push(`${start}`);\n      } else {\n        ranges.push(`${start}-${end}`);\n      }\n      \n      start = current;\n      end = current;\n    }\n  }\n  \n  // Добавляем последний диапазон\n  if (start === end) {\n    ranges.push(`${start}`);\n  } else {\n    ranges.push(`${start}-${end}`);\n  }\n  \n  return ranges.join(',');\n}\n\nРазработать функцию для загрузки данных по массиву URL-адресов, соблюдая два ключевых требования:\n\nОграничение одновременных запросов: В любой момент времени должно выполняться не более limit параллельных запросов (где limit - заданный лимит)\nКеширование результатов: Если определенный URL встречается несколько раз, физический запрос должен выполняться только один раз, а результат переиспользоваться\n\n\nfunction parallelLimit(urls, limit, callback) {\n  const cache = new Map();\n  const results = new Array(urls.length);\n  let active = 0;\n  let index = 0;\n\n  function next() {\n    if (index >= urls.length && active === 0) {\n      callback(results);\n      return;\n    }\n\n    while (active < limit && index < urls.length) {\n      const i = index;\n      const url = urls[i];\n      index++;\n      active++;\n\n      let fetchPromise;\n      if (cache.has(url)) {\n        fetchPromise = cache.get(url);\n      } else {\n        fetchPromise = mockFetch(url); // замените на fetch(url).then(res => res.text()) для реального запроса\n        cache.set(url, fetchPromise);\n      }\n\n      fetchPromise\n        .then((res) => {\n          results[i] = res;\n        })\n        .finally(() => {\n          active--;\n          next();\n        });\n    }\n  }\n\n  next();\n}"
      },
      {
        "timestamp": "2025-04-08 17:36:15",
        "content": "2025-04-08 17:36:15\n Ostrov Ostrov -> 2071074234:\nКомпания: Яндекс вертикали (1  этап)\nЧистые условия задач без решений смотри выше 👆\nВалидные решения: \n        ///////////////////// Задача 1\n        /// Реализовать функция sumPromises, которая принимает в качестве аргументов промисы и возвращает сумму результатов их выполнения.\n        /// Функция может принимать любое количество аргументов\n        /// Можно использовать любые API промисов.\n\n\n        ///Пример использования: \n        const prom...",
        "full_content": "2025-04-08 17:36:15\n Ostrov Ostrov -> 2071074234:\nКомпания: Яндекс вертикали (1  этап)\nЧистые условия задач без решений смотри выше 👆\nВалидные решения: \n        ///////////////////// Задача 1\n        /// Реализовать функция sumPromises, которая принимает в качестве аргументов промисы и возвращает сумму результатов их выполнения.\n        /// Функция может принимать любое количество аргументов\n        /// Можно использовать любые API промисов.\n\n\n        ///Пример использования: \n        const promise1 = Promise.resolve(1);\n        const promise2 = Promise.resolve(2)\n\n\n        Number.prototype.times = function (callback) {\n            for (let i = 0; i < this; i++) {\n                callback(i);\n            }\n        };\n\n        function sumPromises(...promises) {\n            return Promise.all(promises)\n                .then(results => results.reduce((sum, value) => sum + value, 0));\n        }\n\n\n\n\n        ///////////////////// Задача 2\n        // Написать декоратор для функции, который ограничивает число вызовов.\n        //\n        // callLimit(fn, limit, callback), принимает следующие аргументы:\n        // fn - функция, которую декодируем;\n        // limit - маскимальное число вызовов\n        // callback - вызывается, когда совершен последний вызов. Опционально.\n        // У вызываемой функции должен быть метод для перезагрузки счетчика в начале\n\n        function callLimit(fn, limit, callback) {\n            let count = 0; // Счётчик вызовов\n\n            // Обёртка над исходной функцией\n            function wrapper(...args) {\n                if (count >= limit) return; // Прекратить выполнение, если лимит превышен\n\n                count++; // Увеличить счётчик\n\n                // Если вызов достиг лимита — вызвать callback (если он передан)\n                if (count === limit && typeof callback === 'function') {\n                    callback();\n                }\n\n                // Вызов оригинальной функции с переданными аргументами\n                return fn.apply(this, args);\n            }\n\n            // Метод для ручного сброса счётчика вызовов\n            wrapper.reset = function () {\n                count = 0;\n            };\n\n            return wrapper; // Вернуть обёрнутую функцию\n        }\n\n\n\n        ///////////////////// Задача 3\n        // Необходимо проверить решение задачи по двум сервисам,\n        // вызвав checkResult(url1, solution), checkResult(url2, solution)\n        // checkResult: (url: string, solution: string | number) => Promise<boolean>;\n        // * Если оба запроса вернули true - вывести succes\n        // * Если хоть один вернул false - вывести fail\n        // * Если хоть зареджектился - вывести error\n        // * Если хоть один отвечает дольше 1 сек - вывести timeout\n\n        import { checkResult } from \"myLib\"\n\n        const solution = \"Any answer\"\n        const url1 = \"yandex.ru\"\n        const url2 = \"google.com\"\n\n        checkResult(url, solution);\n        checkResult(url, solution);\n\n        async function check() {\n            const TIMEOUT_MS = 1000;\n\n            // Оборачиваем каждый вызов в Promise.race с таймаутом\n            const withTimeout = (url) => {\n                return Promise.race([\n                    checkResult(url, solution), // основной вызов\n                    new Promise((_, reject) =>  // таймаут\n                        setTimeout(() => reject(new Error('timeout')), TIMEOUT_MS)\n                    )\n                ]);\n            };\n\n            try {\n                // Запускаем оба запроса параллельно\n                const [res1, res2] = await Promise.all([\n                    withTimeout(url1),\n                    withTimeout(url2)\n                ]);\n\n                // Если оба true\n                if (res1 === true && res2 === true) {\n                    console.log('success');\n                }\n                // Если хотя бы один false\n                else if (res1 === false || res2 === false) {\n                    console.log('fail');\n                }"
      },
      {
        "timestamp": "2025-04-08 17:34:36",
        "content": "2025-04-08 17:34:36\n Ostrov Ostrov -> 2071074234:\nКомпания: Яндекс вертикали (1  этап)\n\nЗП - от 250k\n\n📢 Вакансия - https://hh.ru/vacancy/118934714\n\n❓Лайвкодинг\n\nЗадачи: \n/// Задача 1\n/// Реализовать функция sumPromises, которая принимает в качестве аргументов промисы и возвращает сумму результатов их выполнения.\n/// Функция может принимать любое количество аргументов\n/// Можно использовать любые API промисов.\n\n\nПример использования: \nconst promise1 = Promise.resolve(1);\nconst promise2 = Promise....",
        "full_content": "2025-04-08 17:34:36\n Ostrov Ostrov -> 2071074234:\nКомпания: Яндекс вертикали (1  этап)\n\nЗП - от 250k\n\n📢 Вакансия - https://hh.ru/vacancy/118934714\n\n❓Лайвкодинг\n\nЗадачи: \n/// Задача 1\n/// Реализовать функция sumPromises, которая принимает в качестве аргументов промисы и возвращает сумму результатов их выполнения.\n/// Функция может принимать любое количество аргументов\n/// Можно использовать любые API промисов.\n\n\nПример использования: \nconst promise1 = Promise.resolve(1);\nconst promise2 = Promise.resolve(2)\n\n\n/// Задача 2\n/// Написать декоратор для функции, который ограничивает число вызовов.\n///\n/// callLimit(fn, limit, callback), принимает следующие аргументы:\n/// fn - функция, которую декодируем;\n/// limit - маскимальное число вызовов\n/// callback - вызывается, когда совершен последний вызов. Опционально.\n/// У вызываемой функции должен быть метод для перезагрузки счетчика в начале\n\n/// Задача 3\n/// Необходимо проверить решение задачи по двум сервисам, вызвав chekResult(url1, solution), checkResult(url2, solution)\n/// checkResult: (url: string, solution: string | number) => Promise<boolean>;\n// * Если оба запроса вернули true - вывести succes\n// * Если хоть один вернул false - вывести fail\n// * Если хоть зареджектился - вывести error\n// * Если хоть один отвечает дольше 1 сек - вывести timeout\n\nimport {checkResult} from \"myLib\"\n\nconst solution = \"Any answer\"\nconst url1 = \"yandex.ru\"\nconst url2 = \"google.com\"\n\ncheckResult(url, solution);\ncheckResult(url, solution);\n\n/// Задача 4\n/// Есть дерево, на котором сидят белки (squirrels) и вороны (ravens). Необходимо написать функцию\n/// которая находит всех белок на дереве и возвращает их имена в массиве.\n///\nfunction squirrelScanner(tree) {\n //you code here\n \n}\n\n\n// type Tree = {\n//   nest: Squirrel | Raven;\n//   branches?: Tree[];\n// };\n\n// type Squirrel = {\n//   name: string;\n//   type: 'squirrel';\n// };\n\n// type Raven = {\n//   name: string;\n//   type: 'raven';\n// };\n\n/////////////////////\n\nconst tree = {\n  nest: { name: 'NEVERMORE!', type: 'raven' },\n  branches: [\n    {\n      nest: { name: 'Acorn', type: 'squirrel' },\n      branches: [\n        {\n          nest: { name: 'Sir Salty', type: 'squirrel' },\n        },\n        {\n          nest: { name: 'Huginn', type: 'raven' },\n          branches: [\n            {\n              nest: { name: 'Muninn', type: 'raven' },\n            },\n            {\n              nest: { name: 'Kernel', type: 'squirrel' },\n  branches:[]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n};"
      },
      {
        "timestamp": "2025-04-08 10:31:57",
        "content": "2025-04-08 10:31:57\n Равиль Васильев -> 2071074234:\nЯндекс систем дизайн\n\n📢 Вакансия - https://yandex.ru/jobs/vacancies/razrabotchik-interfeysov-v-komandu-platformennih-produktov-30780\n\n❓Вопросы:\n\nНужно было задизайнить архитектуру конструктора сайтов (Tilda).\nВообще к такому виду собеседований нужно готовиться отдельно, тут нет каких то \nопределенных вопросов классических, которые тебе задают. Наоборот ты задаешь вопросы и ведешь собеседующего.\n\n- какую БД бы выбрал и почему?\n- что использовал ...",
        "full_content": "2025-04-08 10:31:57\n Равиль Васильев -> 2071074234:\nЯндекс систем дизайн\n\n📢 Вакансия - https://yandex.ru/jobs/vacancies/razrabotchik-interfeysov-v-komandu-platformennih-produktov-30780\n\n❓Вопросы:\n\nНужно было задизайнить архитектуру конструктора сайтов (Tilda).\nВообще к такому виду собеседований нужно готовиться отдельно, тут нет каких то \nопределенных вопросов классических, которые тебе задают. Наоборот ты задаешь вопросы и ведешь собеседующего.\n\n- какую БД бы выбрал и почему?\n- что использовал бы под капотом в сервисах? \n- что использовал бы на фронтенде? \n- как реализовывал бы кеширование данных? \n- какие есть уязвимости и как с ними бороться?"
      },
      {
        "timestamp": "2025-04-03 17:42:20",
        "content": "2025-04-03 17:42:20\n Равиль Васильев -> 2071074234:\nЯндекс платформа 2 этап \n\n📢 Вакансия - https://yandex.ru/jobs/vacancies/razrabotchik-interfeysov-v-komandu-platformennih-produktov-30780\n\n\n📌 Задачи:\n\n/*\ninterface Message {\n    id: number\n    text: string\n}\n\nId самого первого сообщения = 1, а id каждого следующего сообщения на 1 больше, чем id предыдущего.\nНам нужно выводить сообщения в правильном порядке, однако сервер не гарантирует правильный порядок\nсообщений, отправляемых в наше приложение...",
        "full_content": "2025-04-03 17:42:20\n Равиль Васильев -> 2071074234:\nЯндекс платформа 2 этап \n\n📢 Вакансия - https://yandex.ru/jobs/vacancies/razrabotchik-interfeysov-v-komandu-platformennih-produktov-30780\n\n\n📌 Задачи:\n\n/*\ninterface Message {\n    id: number\n    text: string\n}\n\nId самого первого сообщения = 1, а id каждого следующего сообщения на 1 больше, чем id предыдущего.\nНам нужно выводить сообщения в правильном порядке, однако сервер не гарантирует правильный порядок\nсообщений, отправляемых в наше приложение.\n\nТаймлайн:\n// (приходит) 7 1 2 3 6 5 4    8\n// (рисунок)   . 1 2 3 . . 4 5 6 7 8\n\nСообщения от сервера приходят в обработчик функции connect:\n\nconnect((msg) => {\n    ...\n});\n\nОтображать сообщения нужно с помощью функции `render`:\nrender(msg)\n*/\n\n// РЕШЕНИЕ \n\nfunction solution(connect, render) {\n    // Создаем Map для хранения полученных сообщений\n    // Ключ - ID сообщения, значение - функция для его отрисовки\n    const map = new Map();\n    \n    // Текущий ожидаемый ID сообщения (начинаем с 1)\n    let currId = 1;\n    \n    // Подключаемся к источнику сообщений\n    connect((msg) => {\n        // Сохраняем сообщение в Map, оборачивая render в функцию\n        // Это позволяет отложить выполнение render до нужного момента\n        map.set(msg.id, () => render(msg));\n        \n        // Проверяем, есть ли в Map сообщения, которые можно отрисовать по порядку\n        while (map.has(currId)) {\n            // Получаем и вызываем функцию отрисовки для текущего ID\n            map.get(currId)();\n            \n            // Удаляем обработанное сообщение из Map\n            map.delete(currId);\n            \n            // Переходим к следующему ожидаемому ID\n            currId++;\n        }\n    });\n}\n\n/*\nДана вложенная структура файлов и папок в виде объекта:\n*/\n\nconst data = {\n    name: 'folder',\n    children: [\n        { name: 'file1.txt' },\n        { name: 'file2.txt' },\n        {\n            name: 'images',\n            children: [\n                { name: 'image.png' },\n                {\n                    name: 'vacation',\n                    children: [\n                        { name: 'crocodile.png' },\n                        { name: 'penguin.png' }\n                    ]\n                }\n            ]\n        },\n        { name: 'shopping-list.pdf' }\n    ]\n};\n\n/*\nЗадача:\nНужно вывести в консоль файлы и папки с отступами, чтобы показать вложенность.\nРешение должно учитывать любую вложенность элементов (т.е. не должно содержать рекурсивные вызовы).\n\nОжидаемый вывод:\nfolder\n  file1.txt\n  file2.txt\n  images\n    image.png\n    vacation\n      crocodile.png\n      penguin.png\n  shopping-list.pdf\n*/\n\n// Решение должно быть реализовано без использования рекурсии\n\n// РЕШЕНИЕ \n\nfunction printDirectoryStructure(data) {\n    // Используем стек для итеративного обхода структуры\n    const stack = [{ data, level: 0 }];\n    \n    while (stack.length > 0) {\n        // Извлекаем текущий элемент из стека\n        const { data, level } = stack.pop();\n        \n        // Выводим имя с соответствующим отступом\n        console.log(' '.repeat(level * 2) + data.name);\n        \n        // Если есть дети, добавляем их в стек в обратном порядке\n        if (data.children && Array.isArray(data.children)) {\n            for (let i = data.children.length - 1; i >= 0; i--) {\n                stack.push({\n                    data: data.children[i],\n                    level: level + 1\n                });\n            }\n        }\n    }\n}"
      },
      {
        "timestamp": "2025-04-02 09:09:18",
        "content": "2025-04-02 09:09:18\n Dan -> 2071074234:\nКомпания: Yandex ( Taxi )\n\nВопросы:\nРассказать про методы Promise-ов\n\nЗадачи: \n\nРеализовать функцию, которая принимает асинхронную функцию и время ограничения, и возвращает новую функцию. Новая функция должна выполнить исходную функцию, но с ограничением по времени. Если исходная функция не выполнится за указанное время, должна отклонить промис с сообщением “Time limit exceeded”.\n\n/**\n * @param {Function} fn - Асинхронная функция\n * @param {number} t - Вре...",
        "full_content": "2025-04-02 09:09:18\n Dan -> 2071074234:\nКомпания: Yandex ( Taxi )\n\nВопросы:\nРассказать про методы Promise-ов\n\nЗадачи: \n\nРеализовать функцию, которая принимает асинхронную функцию и время ограничения, и возвращает новую функцию. Новая функция должна выполнить исходную функцию, но с ограничением по времени. Если исходная функция не выполнится за указанное время, должна отклонить промис с сообщением “Time limit exceeded”.\n\n/**\n * @param {Function} fn - Асинхронная функция\n * @param {number} t - Время ограничения в миллисекундах\n**/\nconst timelimited = function (fn, t) {\n  return function (...args) {\n    return new Promise((resolve, reject) => {\n      // Запускаем асинхронную функцию\n      const fnPromise = fn(...args).then(resolve).catch(reject);\n\n      // Устанавливаем таймер на t миллисекунд\n      const timer = setTimeout(() => {\n        reject(\"Time limit exceeded\"); // Реджектим, если время истекло\n      }, t);\n\n      // Если функция успевает выполниться, очищаем таймер\n      fnPromise.finally(() => clearTimeout(timer));\n    });\n  };\n};\n\n// Пример использования\nasync function exampleFunction(x) {\n  return new Promise(resolve => setTimeout(() => resolve(x * 2), 1000)); // Выполняется за 1 секунду\n}\n\nconst limitedFunction = timelimited(exampleFunction, 500); // Ограничение 500 мс\n\nlimitedFunction(5)\n  .then(console.log)\n  .catch(console.error); // \"Time limit exceeded\"\n\n\nРеализовать функцию, которая проверяет, является ли строка панграммой (содержит все буквы алфавита). Функция должна возвращать true, если строка содержит все буквы из набора letters, и false в противном случае. \n\nfunction isPangramV2 (str) {\n    const lettersSet = new Set(letters)\n    const resultSet = new Set()\n\n    for (const item of str.toUpperCase()) {\n        if (lettersSet.has(item)) {\n            resultSet.add(item)\n        }\n\n        if (lettersSet.size === resultSet.size) return true\n    }\n\n    return lettersSet.size === resultSet.size\n\n}\n\n- Функция auth() оборачивает асинхронную функцию обратного вызова asyncAuth в промис, который резолвится с данными или отклоняется с ошибкой.\n- Функция tryAuth(n) должна пытаться аутентифицироваться с помощью функции auth(), делая до n+1 попыток. Если все попытки не удались, выбрасывает последнюю ошибку.\n\nfunction auth() {\n  return new Promise((resolve, reject) => {\n    asyncAuth((error, data) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\nasync function tryAuth(n) {\n  let attempts = n + 1; // Первая попытка + n дополнительных\n  let lastError;\n\n  while (attempts > 0) {\n    try {\n      return await auth();\n    } catch (error) {\n      lastError = error;\n      attempts--;\n    }\n  }\n\n  throw lastError; // Если все попытки не удались, выбрасываем последнюю ошибку\n}\n\nРеализовать функцию композиции, которая принимает произвольное количество функций и возвращает новую функцию. Эта новая функция должна применять переданные функции к аргументам в порядке справа налево (как математическая композиция функций).\n\n    function compose(...fns) {\n  return function (...args) {\n    let result = fns[fns.length - 1](...args); // Начинаем с последней функции\n    for (let i = fns.length - 2; i >= 0; i--) {  // Двигаемся в обратном порядке\n      result = fns[i](result);\n    }\n    return result;\n  };\n}\n\nconst square = (x) => x * x;\nconst times2 = (x) => x * 2;\nconst sum = (a, b) => a + b;\n\nconsole.clear();\nconsole.log(compose(square, times2)(2) === square(times2(2)));  // true\nconsole.log(compose(square, times2, sum)(3, 4) === square(times2(sum(3, 4))));  // true\nПри последующих вызовах должна возвращатьve, reject) = Функция должна сохранять переданные аргументы при первом вызове.\nfunction runOnce(fn) {\n  let called = false;  // Флаг, чтобы отслеживать, был ли вызов\n  return function(...args) {\n    if (called) {\n      return undefined;  // Возвращаем undefined, если функция уже вызвана\n    }\n    called = true;  // Отмечаем, что функция вызвана\n    return fn(...args);  // Вызываем переданную функцию с аргументами\n  };\n}"
      },
      {
        "timestamp": "2025-03-12 19:56:50",
        "content": "2025-03-12 19:56:50\n Лёша -> 2071074234:\nКомпания Яндекс 2 этап\nЗП: просил 300\nВакансия: hr написала, яндекс вертикали\n\nЗадача 1\n/*\nУ нас есть набор билетов вида:\n\n[\n    { from: 'London', to: 'Moscow' },\n    { from: 'NY', to: 'London' },\n    { from: 'Moscow', to: 'SPb' },\n    ...\n]\n\nИз этих билетов можно построить единственный, неразрывный маршрут.\nПетель и повторов в маршруте нет.\n\nНужно написать программу, которая возвращает эти же объекты билетов \nв порядке следования по маршруту. Начало марш...",
        "full_content": "2025-03-12 19:56:50\n Лёша -> 2071074234:\nКомпания Яндекс 2 этап\nЗП: просил 300\nВакансия: hr написала, яндекс вертикали\n\nЗадача 1\n/*\nУ нас есть набор билетов вида:\n\n[\n    { from: 'London', to: 'Moscow' },\n    { from: 'NY', to: 'London' },\n    { from: 'Moscow', to: 'SPb' },\n    ...\n]\n\nИз этих билетов можно построить единственный, неразрывный маршрут.\nПетель и повторов в маршруте нет.\n\nНужно написать программу, которая возвращает эти же объекты билетов \nв порядке следования по маршруту. Начало маршрута известно.\n*/\n\nfunction getRoute(tickets = [], start) {\n    // your code here\n}\n\nconsole.clear()\nconsole.log(getRoute([\n    { from: 'London', to: 'Moscow' },\n    { from: 'NY', to: 'London' },\n    { from: 'Moscow', to: 'SPb' },\n], 'NY')) /*[\n    { from: 'NY', to: 'London' },\n    { from: 'London', to: 'Moscow' },\n    { from: 'Moscow', to: 'SPb' }\n]*/\n\nРешение:\nfunction getRoute(tickets = [], start) {\n  // Создаем объект, где ключи - пункты отправления, а значения - пункты назначения\n  const routeMap = {};\n  \n  // Заполняем карту маршрутов\n  tickets.forEach(ticket => {\n    routeMap[ticket.from] = ticket.to;\n  });\n  \n  // Строим маршрут\n  const route = [];\n  let currentCity = start;\n  \n  // Проходим по маршруту, добавляя билеты в результат\n  while (currentCity && routeMap[currentCity]) {\n    route.push({\n      from: currentCity,\n      to: routeMap[currentCity]\n    });\n    \n    currentCity = routeMap[currentCity];\n  }\n  \n  return route;\n}\n\nЗадача 2\n/*\nДан массив ссылок: ['url1', 'url2', ...] и лимит одновременных запросов (limit)\nНеобходимо реализовать функцию, которая опросит урлы в том порядке, в котором они идут в массиве, и вызовет callback с массивом ответов\n['url1_answer', 'url2_answer', ...] так, чтобы в любой момент времени выполнялось не более limit \nзапросов (как только любой из них завершился, сразу же отправляется следующий)\nТ.е. нужно реализовать шину с шириной равной limit.\n\nТребования:\n\n- Порядок в массиве ответов должен совпадать с порядком в массиве ссылок\n\nДополнительно:\n- Функция должна обладать мемоизацией (один и тот же урл не опрашивать дважды)\n\nДля опроса можно использовать fetch\nОшибки обрабатывать не нужно\n*/\n\n// declare function fetch(url: string): Promise<string>;\n\nfunction parallelLimit(urls, limit, callback) {\n    // code here\n}\n\n\nРешение:\nfunction par(urls, limit, callback) {\n  const results = new Array(urls.length);\n  let count = 0;\n  const cache = new Map();\n\n  async function fn(index) {\n    if(index >= urls.length) {\n      return\n    }\n\n    let resp;\n\n    if(cache.has(urls[index])) {\n        resp = cache.get(urls[index])\n    } else {\n      resp = await urls[index];\n      cache.set(urls[index], resp);\n    }\n\n    results[index] = resp;\n    count++;\n\n    if(count === urls.length) {\n      callback(results)\n    } else {\n      fn(index + limit)\n    }\n  }\n\n  for (let i = 0; i < limit; i++) fn(i);\n}\n\nfunction sleep(ms, ...args) {\n  return new Promise((res) => setTimeout(res, ms, ...args))\n}\n\nconst arr = [sleep(1500, 1), sleep(1000, 2), sleep(1000, 1), sleep(3000, 3), sleep(500, 5), sleep(500, 3)];\npar(arr, 2, console.log);"
      },
      {
        "timestamp": "2025-03-12 18:12:37",
        "content": "2025-03-12 18:12:37\n Aintripin -> 2071074234:\nКомпания: Яндекс (Яндекс.Вертикали); 3 этап\nВакансия: frontend-разработчик; hr написала сама\nЗП: не обговаривали\n\n1. Блок: Опыт и текущая работа\n\n👨‍💻 Расскажи о себе\nЧем занимаешься сейчас? Что за проекты? Какой стек?\n\n👥 Про команду\nСколько человек в команде? Кто кроме фронтенда (бек, тестировщики, менеджеры)?\n\n📝 Как задачи попадают к вам?\nКто их декомпозирует — ты или продакт?\n\n💬 Как часто общаешься с бекендерами/дизайнерами?\nЕсть ли регулярные мити...",
        "full_content": "2025-03-12 18:12:37\n Aintripin -> 2071074234:\nКомпания: Яндекс (Яндекс.Вертикали); 3 этап\nВакансия: frontend-разработчик; hr написала сама\nЗП: не обговаривали\n\n1. Блок: Опыт и текущая работа\n\n👨‍💻 Расскажи о себе\nЧем занимаешься сейчас? Что за проекты? Какой стек?\n\n👥 Про команду\nСколько человек в команде? Кто кроме фронтенда (бек, тестировщики, менеджеры)?\n\n📝 Как задачи попадают к вам?\nКто их декомпозирует — ты или продакт?\n\n💬 Как часто общаешься с бекендерами/дизайнерами?\nЕсть ли регулярные митинги?\n\n2. Блок: Технические проекты\n\n🖥 Про UIKit\nЗачем создавали свой UIKit? Какие проблемы решали (дублирование кода, консистентность)?\n\n🚀 Как публиковали компоненты в npm?\nРасскажи про процесс: версионирование, приватный реестр, монорепо.\n\n⚙️ Почему выбрали Lerna + npm, а не другие тулзы?\n\n📦 Как делили компоненты на отдельные пакеты?\nНапример, кнопка — отдельный пакет?\n\n🔧 С какими косяками столкнулись при настройке монорепо?\nБаги с зависимостями?\n\n🧪 Интеграция и тесты\nКак убедили команду использовать ваш UIKit? Пришлось ли переписывать старый код?\n\n🔄 Как проходил процесс перехода на UI Kit?\n\n📝 Какие тесты писали для компонентов?\nЮниты, скриншотные?\n\n3. Блок: npm и инфраструктура\n\n🔐 npm-специфика\nКак настроен ваш приватный npm-реестр? Это облачное решение (GitHub Packages) или самописное?\n\n⚙️ CI/CD и Docker\nКакие шаги в GitHub Actions настраивали? Линтеры, сборку, публикацию в реестр?\n\n🧪 Как тестировали пакеты перед публикацией?\nЗапускали линтеры/юнит-тесты в CI?\n\n4. Блок: Проблемы и решения\n\n🐞 Баги и костыли\n\n📉 Оптимизация\nКак снижали TTFB (Time to First Byte) для страниц? CDN, кэширование, пререндер?\n\n⚡️ Что делал, если страница тормозила из-за скролла?\nКак искал узкие места (Chrome DevTools, Lighthouse)?\n\n5. Блок: Софт-скиллы и процессы\n\n🗣 Коммуникация\nКак решал споры с бекендерами? Например, если они не успевали отдать API.\n\n🎤 Как презентовал UIKit команде?\nПроводил ли демо или писал документацию?\n\n🧑‍🏫 Менторство\nПомогал ли новичкам? Как обучал их работать с монорепо и npm-пакетами?\n\n📚 Какую доку для онбординга писал?\nПример: как запустить проект, как публиковать пакеты.\n\n6. Блок: Детали\n\n🧪 Про Cypress и тесты\nПочему выбрали Cypress, а не Playwright? Что понравилось/не понравилось?\n\n🔧 Как настраивали моки для API в тестах?\nДописывали ли кастомные команды?\n\n🛠 Костыли в сборке\nТы говорил, что правили конфиг вебпака для Cypress. Зачем? Какой баг фиксили?\n\n📄 Как делили общие конфиги между проектами?\nНапример, Babel или ESLint-настройки."
      },
      {
        "timestamp": "2025-03-07 09:57:47",
        "content": "2025-03-07 09:57:47\n Aintripin -> 2071074234:\nКомпания: Яндекс (Яндекс.Вертикали); 2 этап\nВакансия: frontend-разработчик; hr написала сама\nЗП: не обговаривали\n\nЗапись: писалась, но потом до залива я решил себе поставить параллельно с виндой линукс, что было не самым удачным решением. По итогу, пришлось форматировать весь диск, поэтому записи нет\n\n🖥 Задачи:",
        "full_content": "2025-03-07 09:57:47\n Aintripin -> 2071074234:\nКомпания: Яндекс (Яндекс.Вертикали); 2 этап\nВакансия: frontend-разработчик; hr написала сама\nЗП: не обговаривали\n\nЗапись: писалась, но потом до залива я решил себе поставить параллельно с виндой линукс, что было не самым удачным решением. По итогу, пришлось форматировать весь диск, поэтому записи нет\n\n🖥 Задачи:"
      },
      {
        "timestamp": "2025-03-06 16:02:13",
        "content": "2025-03-06 16:02:13\n Pavlov Alekseyi -> 2071074234:\nКомпания яндекс 2 этап\n\nПервая задача\n\nНужно вывести структуру разделов:\n\n\nfunction printDirectoryStructure(data) {\n    // Code hera\n}\n\nprintDirectoryStructure({\n    name: 'Home',\n    children: [\n        {\n            name: 'Dir 1',\n        },\n        {\n            name: 'Dir 2',\n            children: [\n                {\n                    name: 'Dir 2 1',\n                }, {\n                    name: 'Dir 2 2',\n                    children: ...",
        "full_content": "2025-03-06 16:02:13\n Pavlov Alekseyi -> 2071074234:\nКомпания яндекс 2 этап\n\nПервая задача\n\nНужно вывести структуру разделов:\n\n\nfunction printDirectoryStructure(data) {\n    // Code hera\n}\n\nprintDirectoryStructure({\n    name: 'Home',\n    children: [\n        {\n            name: 'Dir 1',\n        },\n        {\n            name: 'Dir 2',\n            children: [\n                {\n                    name: 'Dir 2 1',\n                }, {\n                    name: 'Dir 2 2',\n                    children: [ {\n                        name: 'Dir 3 1',\n                    } ]\n                }, {\n                    name: 'Dir 2 3',\n                }\n            ]\n        },\n        {\n            name: 'Dir 3',\n        }\n    ]\n})\n\n\n\nHome\n    Dir 1\n    Dir 2\n        Dir 2 1\n        Dir 2 2\n            Dir 3 1\n        Dir 2 3\n    Dir 3\n\n\nРешение:\n\n\nfunction printDirectoryStructure(data) {\n    const stack = [ {\n        data: data,\n        level: 0\n    } ]\n\n    while (stack.length > 0) {\n        const pop = stack.pop()\n\n        console.log(' '.repeat(pop.level) + pop.data.name)\n\n        const children = pop.data.children\n\n        if (Array.isArray(children) && children.length > 0) {\n            for (let i = children.length - 1; i >= 0; i--) {\n                stack.push({\n                    data: children[i],\n                    level: pop.level + 1,\n                })\n            }\n        }\n    }\n}\n\n\n2 задача:\n\nПриходят сообщения в не известном порядке\n\n\ntype Message {\n    id: number;\n    message: string;\n}\n\n\nПорядок начинается с id = 1, но прийти может сообщение с любым id. Нужно выводить их по порядку.\n\n\nfunction solution(connect, render) {\n     connect((message) => {\n        // Code hera\n     })\n}\n\nfunction connect(callback) {\n    setTimeout(() => {\n        callback({\n            id: 2,\n            message: 'Message 2'\n        })\n    }, 1000)\n\n    setTimeout(() => {\n        callback({\n            id: 1,\n            message: 'Message 1'\n        })\n    }, 1500)\n\n    setTimeout(() => {\n        callback({\n            id: 4,\n            message: 'Message 4'\n        })\n    }, 2000)\n\n    setTimeout(() => {\n        callback({\n            id: 3,\n            message: 'Message 3'\n        })\n    }, 2250)\n\n    setTimeout(() => {\n        callback({\n            id: 5,\n            message: 'Message 5'\n        })\n    }, 3000)\n}\n\nfunction render(message) {\n    console.log(message.message)\n}\n\nsolution(connect, render)\n\n\nРешение:\n\n\nfunction solution(connect, render) {\n    let lastId = 1\n    const messages = new Map()\n\n    connect((message) => {\n        messages.set(message.id, message)\n\n        while (messages.has(lastId)) {\n            render(messages.get(lastId))\n            messages.delete(lastId)\n            lastId++\n        }\n    })\n}\n\n\nТретья задача.\nСо структурой counter подсказал что можно сделать через массив и я переписал с JSON.stringify на массивы\n\n// Дан массив целых неотрицательных чисел, нужно сгруппировать друг с другом числа,\n// которые можно получить путём перестановки цифр их составляющих,\n// нули при этом игнорируем, т. к. нет числа 011.\n// Решение должно быть максимально эффективно по памяти и времени.\n\n// Нельзя через sort отсортировать числа и сделать ключем, надо было через другую структуру {[число]:[количество чисел в номере]}\n\n\nfunction digitPermutation(arr) {\n\n}\n\nconsole.clear()\nconsole.log('start test')\nconsole.log(digitPermutation([ 1230, 99, 23001, 123, 111, 300021, 101010, 90000009, 9 ]))\n// [[99, 90000009], [111, 101010], [1230, 23001, 123, 300021], [9]]\nconsole.log(digitPermutation([ 11, 22 ])) // [[11], [22]]\nconsole.log(digitPermutation([ 111111111112, 122222222222 ])) // [[111111111112], [122222222222]]\nconsole.log('end test')"
      },
      {
        "timestamp": "2025-03-05 15:50:08",
        "content": "2025-03-05 15:50:08\n Klimenty Karavaev -> 2071074234:\nКомпания: Яндекс 4 этап знакмоство с командой\nЗП: -\nВакансия: сами написали",
        "full_content": "2025-03-05 15:50:08\n Klimenty Karavaev -> 2071074234:\nКомпания: Яндекс 4 этап знакмоство с командой\nЗП: -\nВакансия: сами написали"
      },
      {
        "timestamp": "2025-03-02 20:20:53",
        "content": "2025-03-02 20:20:53\n Артем -> 2071074234:\nКомпания: Яндекс\n\nЗадачи: \n\n1. Реализовать функцию sleep, чтобы выполнение откладывалось на то время что мы передаем в slepp\nfunction sleep(duration) {\n    // Возвращаем новый промис\n    return new Promise((resolve) => {\n        // Используем setTimeout для задержки\n        setTimeout(() => {\n            // После завершения задержки, вызываем resolve промиса\n            resolve();\n        }, duration);\n    });\n}\n\n2. Реализовать в прототипи массива функию...",
        "full_content": "2025-03-02 20:20:53\n Артем -> 2071074234:\nКомпания: Яндекс\n\nЗадачи: \n\n1. Реализовать функцию sleep, чтобы выполнение откладывалось на то время что мы передаем в slepp\nfunction sleep(duration) {\n    // Возвращаем новый промис\n    return new Promise((resolve) => {\n        // Используем setTimeout для задержки\n        setTimeout(() => {\n            // После завершения задержки, вызываем resolve промиса\n            resolve();\n        }, duration);\n    });\n}\n\n2. Реализовать в прототипи массива функию groupBy \nArray.prototype.groupBy = function(fn) {\n    return this.reduce((acc, item) => {\n        const key = fn(item);\n        if (!acc[key]) {\n            acc[key] = [];\n        }\n        acc[key].push(item);\n        return acc;\n    }, {});\n};\n\n3 Реализовать Promise.any\n\n\nfunction any(promises) {\n    // Массив для хранения ошибок\n    const errors = [];\n    \n    return new Promise((resolve, reject) => {\n        // Переменная для подсчета завершенных промисов\n        let completedPromises = 0;\n\n        // Проходим по каждому промису\n        for (const promise of promises) {\n            // Используем метод Promise.resolve, чтобы работать с обычными значениями и промисами\n            Promise.resolve(promise)\n                .then(resolve) // Если промис успешен, разрешаем главный промис\n                .catch(error => {\n                    // Если промис отклонен, добавляем ошибку в массив и увеличиваем счетчик\n                    errors.push(error);\n                    completedPromises++;\n\n                    // Проверяем, были ли завершены все промисы\n                    if (completedPromises === promises.length) {\n                        // Если все промисы отклонены, реджектим с AggregateError\n                        reject(new AggregateError(errors, 'No Promise in any was resolved'));\n                    }\n                });\n        }\n    });\n}\n\n\n4 Реализовать функцию в который передаем массив массивов и нужно ссумировать все значения\n\nfunction flattenSum(arr) {\n    let sum = 0\n\n    for (const num of arr) {\n        if (Array.isArray(num)) {\n            sum += flattenSum(num)\n        } else {\n            sum += parseInt(num)\n        }\n    }\n\n    return sum\n}"
      },
      {
        "timestamp": "2025-03-02 17:14:36",
        "content": "2025-03-02 17:14:36\n Лёша -> 2071074234:\nКомпания: Яндекс (Яндекс.Вертикали)\nВакансия: frontend-разработчик; hr написала сама\nЗП: не обговаривали\n\nЗадачи:\n1) Написать функцию которая вызывается только один раз. Функция должна принимать аргументы.\nfunction runOnce(fn) {\n   //Code here\n}\n\nfunction logHello = () => {\n    console.log('hello!')\n}\n\nconst logHelloOnce = runOnce(logHello)\nconsole.clear();\nlogHelloOnce(); // 'hello!'\nlogHelloOnce(); // undefined\nРешение:\nfunction runOnce(tm) {\n  let call...",
        "full_content": "2025-03-02 17:14:36\n Лёша -> 2071074234:\nКомпания: Яндекс (Яндекс.Вертикали)\nВакансия: frontend-разработчик; hr написала сама\nЗП: не обговаривали\n\nЗадачи:\n1) Написать функцию которая вызывается только один раз. Функция должна принимать аргументы.\nfunction runOnce(fn) {\n   //Code here\n}\n\nfunction logHello = () => {\n    console.log('hello!')\n}\n\nconst logHelloOnce = runOnce(logHello)\nconsole.clear();\nlogHelloOnce(); // 'hello!'\nlogHelloOnce(); // undefined\nРешение:\nfunction runOnce(tm) {\n  let called = false;\n\n  return function(...args) {\n    if (called) return undefined;\n    called = true;\n    return tm.apply(this, args);\n  };\n}\n\n2) Написать асинхронную функцию, которая будет спать заданное количество милисекунд  и потом успешно завершаться.\nfunction sleep(){}\n\n// Пример\nconst startTime = Date.now();\nconsole.log('Starting sleeping...');\nsleep(2000).then(() => {\nconsole.log('Wake up after 2 seconds!');\nconsole.log('Time passed: ', Date.now() - startTime);\n});\n\nsleep(1000).then(() => {\nconsole.log('Wake up after 3 seconds!');\nconsole.log('Time passed: ', Date.now() - startTime);\n});\n\nРешение:\nfunction sleep(duration) {\n    return new Promise(resolve => setTimeout(resolve, duration));\n}\nВопросы к этой задаче:\nПочему 2 слип завершился раньше?\n- Наш слип асинхронный, 1 секунда проходит быстрее чем 2.\nПочему в консоле выводиться 'Time passed: 1005' а не 1000?\n- SetTimeout гарантирует, что пройдет минимум заданное количество милисекунд, но тк браузер занят другими задачами, то SetTimeout может и завершиться позже.\n\n3)\n/*\nНужно написать полифил для Array.prototype.some\n\nПараметры:\n- callback – функция проверки каждого элемента, принимает три аргумента:\n  - element – текущий обрабатываемый элемент массива.\n  - index (необязательный) – индекс текущего обрабатываемого элемента массива.\n  - array (необязательный) – массив, по которому осуществляется проход.\n  - thisArg (необязательный) – значение, используемое в качестве this при выполнении функции callback.\n\nВозвращаемое значение:\ntrue, если функция проверки возвращает truthy значение хотя бы для одного элемента массива. Иначе false.\n*/\n\nArray.prototype.some =\n\nРешение:\n  Array.prototype.some = function(callback, thisArg) {\n    if (this == null) {\n      throw new TypeError('Array.prototype.some called on null or undefined');\n    }\n\n    if (typeof callback !== 'function') {\n      throw new TypeError(callback + ' is not a function');\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (callback.call(thisArg, this[i], i, O)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n4)\n/*\nНапишите функцию any, которая бы работала, как Promise.any().\n\n- Принимает массив промисов (значений, не опуская), и возвращает промис.\n- Если хоть один из переданных промисов резолвится (успешно выполняется), то возвращённый промис резолвится с этим значением.\n- Если все переданные промисы реджектятся, то возвращённый промис реджектится с ошибкой AggregateError, в которой сгруппированы все ошибки.\n\nAggregateError можно создать таким образом:\nnew AggregateError(errors, 'No Promise in any was resolved')\n*/\n\nclass AggregateError extends Error {\n    constructor(errors, message) {\n        super(message);\n        this.errors = errors;\n        this.name = \"AggregateError\";\n    }\n}\n\nfunction any(promises) {\n    // your code here\n}\n\n// Пример использования\nconsole.clear();\n\nconst p1 = Promise.reject(\"Error 3\");\nconst p2 = Promise.reject(\"Error 1\");\nconst p3 = Promise.resolve(3);\n\nany([p1, p2, p3]).then(console.log); // 3"
      },
      {
        "timestamp": "2025-02-28 17:19:13",
        "content": "2025-02-28 17:19:13\n Klimenty Karavaev -> 2071074234:\nКомпания: Яндекс 4 этап (знакомство с командой)\nВакансия: сами написали",
        "full_content": "2025-02-28 17:19:13\n Klimenty Karavaev -> 2071074234:\nКомпания: Яндекс 4 этап (знакомство с командой)\nВакансия: сами написали"
      },
      {
        "timestamp": "2025-02-28 16:10:51",
        "content": "2025-02-28 16:10:51\n Klimenty Karavaev -> 2071074234:\nКомпания: Яндекс 4 этап\nВакансия: хр написал",
        "full_content": "2025-02-28 16:10:51\n Klimenty Karavaev -> 2071074234:\nКомпания: Яндекс 4 этап\nВакансия: хр написал"
      },
      {
        "timestamp": "2025-02-26 15:07:56",
        "content": "2025-02-26 15:07:56\n Klimenty Karavaev -> 2071074234:\nКомпания: Яндекс 3 этап\nВакансия: сами написали через хх",
        "full_content": "2025-02-26 15:07:56\n Klimenty Karavaev -> 2071074234:\nКомпания: Яндекс 3 этап\nВакансия: сами написали через хх"
      },
      {
        "timestamp": "2025-02-26 14:26:04",
        "content": "2025-02-26 14:26:04\n Pavlov Alekseyi -> 2071074234:\nКомпания: Яндекс (первый этап)\n\nБыли только задачи, экран не шарил, немного помогали.\n\n\n1. Что выведет в консоль и почему?\n\nПервая задача\n\nvar n = 5\n\nfunction fn(n) {\n    n = 10\n}\n\nfn(n)\nconsole.log(n) //???\n\nОтвет: 5\n\nВторая задача\n\nvar obj = { a : 1}\n\nfunction fn(obj) {\n    obj = { c : 5}\n}\n\nfn(obj)\nconsole.log(obj) //???\n\nОтвет: { a : 1}\n\nТретья задача\n\nvar obj = { a : 5}\n\nfunction fn(obj) {\n    obj.c = 10\n}\n\nfn(obj)\nconsole.log(obj) //???\n\n...",
        "full_content": "2025-02-26 14:26:04\n Pavlov Alekseyi -> 2071074234:\nКомпания: Яндекс (первый этап)\n\nБыли только задачи, экран не шарил, немного помогали.\n\n\n1. Что выведет в консоль и почему?\n\nПервая задача\n\nvar n = 5\n\nfunction fn(n) {\n    n = 10\n}\n\nfn(n)\nconsole.log(n) //???\n\nОтвет: 5\n\nВторая задача\n\nvar obj = { a : 1}\n\nfunction fn(obj) {\n    obj = { c : 5}\n}\n\nfn(obj)\nconsole.log(obj) //???\n\nОтвет: { a : 1}\n\nТретья задача\n\nvar obj = { a : 5}\n\nfunction fn(obj) {\n    obj.c = 10\n}\n\nfn(obj)\nconsole.log(obj) //???\n\nОтвет: { a : 5, c : 10 }\n\n2. onceFn — Написать функцию которая вызывается только один раз\n\n\nfunction onceFn(fn) {\n   //Code here\n}\n\nfunction log(value) {\n    console.log(value)\n}\n\nconst onceLog = onceFn(log)\n\nonceLog('1') // Выведет 1\nonceLog('2') // Вернёт undefined\nonceLog('3') // Вернёт undefined\n\nconst onceLog2 = onceFn(log)\nonceLog2('4') // Выведет 4\nonceLog2('5') // Вернёт undefined\nonceLog2('6') // Вернёт undefined\n\n\nРешение:\n\nfunction onceFn(fn) {\n    let isCall = false\n\n    return (...args) => {\n        if (!isCall) {\n            isCall = true\n            return fn(...args)\n        }\n    };\n}\n\n//P.S.(можно сделать с привязкой контекста):\n\n\n3. Написать полифил для groupBy у массивов\nArray.prototype.groupBy\n\nРешение:\n\nArray.prototype.groupBy = function (callback) {\n    const result = {}\n\n    for (let i = 0; i < this.length; i++) {\n        const key = callback(this[i])\n\n        if (!result[key]) result[key] = []\n\n        result[key].push(this[i])\n    }\n\n    return result\n}\n\nconst arr = [ 1, 2, 3, 4, 5 ]\nconst grouped = arr.groupBy((num) => num % 2 === 0 ? 'even' : 'odd')\n\nconsole.log(grouped)\n\n// P.S. Можно написать более продвинутое решение с дополнительными проверками и передачей доп. аргументов в callback\n\n\n4. Функция Auth должная вернуть промис после выполнения callback в asyncAuth c error (rejected) либо data (fullfiled)\n\n\nimport asyncAuth from 'lib/auth'\n\nfunction Auth() {\n    asyncAuth((error, data) => {\n        //Code here\n    })\n}\n\n\nРешение:\n\nfunction Auth() {\n    return new Promise((resolve, reject) => {\n        asyncAuth((error, data) => {\n            if (error) {\n                reject(error);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n\n\n5. Задача немного связанная с предыдущей Auth.\nРеализовать функцию которая будет вызывать попытки авторизации\n\nРешение:\n\nfunction auth(count = 5) {\n    return new Promise(() => {\n        function tryAuth(count) {\n            Auth.then((value) => {\n                resolve(value)\n            }).catch((error) => {\n                if (count === 0) {\n                    reject(error)\n                } else {\n                    tryAuth(url, count - 1)\n                }\n            })\n        }\n\n        tryAuth(5)\n    })\n}\n\n\n6. Сложить числа из массива\nДан массив [1, [2, '2x', 3], ['5', ['x7', ['6', '4']]]]\nНужно сложить все числа массива.\nЕсли попадается число на подобии '2x' считать его как 2\nЕсли 'x7', то игнорировать\nP.S. Методы flat и flatMap нельзя использовать\n\nРешение 1 (постое, думаю бы приняли его):\n\nfunction flattenSum(arr) {\n    let sum = 0\n\n    for (let i = 0; i < arr.length; i++) {\n        const el = arr[i]\n\n        if (Array.isArray(el)) {\n            sum += flattenSum(el)\n        } else {\n            sum += parseFloat(el) || 0\n        }\n    }\n\n    return sum\n}\n\n\nРешение более сложное (написал его):\n\nfunction helper(num) {\n    return parseFloat(num) || 0\n}\n\nfunction flattenSum(arr) {\n    const stack = [ arr ]\n    let sum = 0\n\n    while (stack.length > 0) {\n        const pop = stack.pop()\n\n        if (Array.isArray(pop)) {\n            stack.push(...pop)\n        } else {\n            sum += helper(pop)\n        }\n    }\n\n    return sum\n}\n\nconsole.log(flattenSum([ 1, [ 2, '2x', 3 ], [ '5', [ 'x7', [ '6', '4' ] ] ] ]))\n\n\n7. Задача MaxStack — это классическая задача, которая требует реализации структуры данных, похожей на стек, но с дополнительной функциональностью: она должна поддерживать не только стандартные операции стека (push, pop), но и операцию быстрого получения максимального элемента в стеке."
      },
      {
        "timestamp": "2025-02-25 17:36:13",
        "content": "2025-02-25 17:36:13\n Никита -> 2071074234:\nКомпания: Яндекс 2 этап\nЗП: 350к+\nЗадачи:\n\nfunction flatten(array) {\n  const stack = [...array]; // Инициализируем стек с элементами исходного массива\n  const result = []; // Массив для хранения результата\n\n  while (stack.length) {\n    const current = stack.pop(); // Извлекаем последний элемент из стека\n\n    if (Array.isArray(current)) {\n      // Если элемент является массивом, добавляем его элементы в стек\n      for (let i = current.length - 1; i >= 0;...",
        "full_content": "2025-02-25 17:36:13\n Никита -> 2071074234:\nКомпания: Яндекс 2 этап\nЗП: 350к+\nЗадачи:\n\nfunction flatten(array) {\n  const stack = [...array]; // Инициализируем стек с элементами исходного массива\n  const result = []; // Массив для хранения результата\n\n  while (stack.length) {\n    const current = stack.pop(); // Извлекаем последний элемент из стека\n\n    if (Array.isArray(current)) {\n      // Если элемент является массивом, добавляем его элементы в стек\n      for (let i = current.length - 1; i >= 0; i--) {\n        stack.push(current[i]);\n      }\n    } else {\n      // Если элемент не является массивом, добавляем его в результат\n      result.push(current);\n    }\n  }\n\n  return result.reverse(); // Возвращаем результат, развернутый в правильном порядке\n}\n\n// Пример использования\nconsole.log(flatten([0, [1, [2, 3]], 4])); // [0, 1, 2, 3, 4]\nconsole.log(flatten([1, [2, [3, [4, [5]]]])); // [1, 2, 3, 4, 5]\nconsole.log(flatten([1, 2, [3, 4], 5, [6, [7, 8]]])); // [1, 2, 3,\n\n2.\n\n/*\nУ нас есть набор билетов вида:\n\n[\n    { from: 'London', to: 'Moscow' },\n    { from: 'NY', to: 'London' },\n    { from: 'Moscow', to: 'SPb' },\n    ...\n]\n\nИз этих билетов можно построить единственный, неразрывный маршрут.\nПетель и повторов в маршруте нет.\n\nНужно написать программу, которая возвращает эти же объекты билетов\nв порядке следования по маршруту.\n*/\n\nfunction getRoute(tickets = []) {\n  // TODO\n  const set = new Set();\n\n  const result = [];\n  const map = new Map();\n\n  tickets.forEach((item) => {\n    if (!set.has(item.from)) set.add(item.from);\n    map.set(item.from, item);\n  });\n\n  tickets.forEach((item) => {\n    if (set.has(item.to)) set.delete(item.to);\n  });\n\n\n  let i = 0;\n  let current = [...set][0];\n\n  while (i < map.size) {\n    const cur = map.get(current);\n    result.push(cur);\n    current = cur.to;\n    i++;\n  }\n\n  return result;\n}"
      },
      {
        "timestamp": "2025-02-22 06:25:16",
        "content": "2025-02-22 06:25:16\n Klimenty Karavaev -> 2071074234:\nКомпания: Яндекс 2 этап\nВакансия: сами написали\nЗП: не обговаривали\nЗадачи: две задачи сразу с решением, никто не копировал, так что описание задачи нет\nfunction solution(connect, render) {\n    let lastId = 1;\n    const map = new Map();\n    \n    connect(({id, text}) => {\n        if(lastId === id) {\n            render({id, text});\n            lastId++;\n            \n            while(true) {\n                const nextMessage = map.get(lastId);\n...",
        "full_content": "2025-02-22 06:25:16\n Klimenty Karavaev -> 2071074234:\nКомпания: Яндекс 2 этап\nВакансия: сами написали\nЗП: не обговаривали\nЗадачи: две задачи сразу с решением, никто не копировал, так что описание задачи нет\nfunction solution(connect, render) {\n    let lastId = 1;\n    const map = new Map();\n    \n    connect(({id, text}) => {\n        if(lastId === id) {\n            render({id, text});\n            lastId++;\n            \n            while(true) {\n                const nextMessage = map.get(lastId);\n                if(!nextMessage) break;\n                \n                render(nextMessage);\n                map.delete(lastId);\n                lastId++;\n            }\n        } else {\n            map.set(id, {id, text});\n        }\n    });\n}\nfunction printDirectoryStructure(data) {\n    const stack = [{ item: data, level: 0 }];\n    \n    while (stack.length > 0) {\n        const { item, level } = stack.pop();\n        \n        // Print current item with proper indentation\n        console.log('  '.repeat(level) + item.name);\n        \n        // If the item has children, add them to stack in reverse order\n        // to maintain correct output order (since we're using stack)\n        if (item.children) {\n            for (let i = item.children.length - 1; i >= 0; i--) {\n                stack.push({\n                    item: item.children[i],\n                    level: level + 1\n                });\n            }\n        }\n    }\n}"
      },
      {
        "timestamp": "2025-02-22 01:28:18",
        "content": "2025-02-22 01:28:18\n Aintripin -> 2071074234:\nКомпания: Яндекс (Яндекс.Вертикали)\nВакансия: frontend-разработчик; hr написала сама\nЗП: не обговаривали\n\nЗадачи:\n\n📌1. \nУ нас есть строка. Надо написать функцию, которая будет принимать delimiter первым аргументом, а потом просто по буквам. Нужно за'join'ить\n\nВыглядеть должно как-то так:\n\nstrjoin(\"-\", \"a\", \"b\", \"c\")  //  \"a-b-c\"\nstrjoin(\":\", \"hello\", \"world\")  //  \"hello:world\"\n\nP.S. можно использовать join:\nconst strjoin = (delimiter, ...args) => ar...",
        "full_content": "2025-02-22 01:28:18\n Aintripin -> 2071074234:\nКомпания: Яндекс (Яндекс.Вертикали)\nВакансия: frontend-разработчик; hr написала сама\nЗП: не обговаривали\n\nЗадачи:\n\n📌1. \nУ нас есть строка. Надо написать функцию, которая будет принимать delimiter первым аргументом, а потом просто по буквам. Нужно за'join'ить\n\nВыглядеть должно как-то так:\n\nstrjoin(\"-\", \"a\", \"b\", \"c\")  //  \"a-b-c\"\nstrjoin(\":\", \"hello\", \"world\")  //  \"hello:world\"\n\nP.S. можно использовать join:\nconst strjoin = (delimiter, ...args) => args.join(delimiter);\n\nПрост потом попросит через синтаксис ES5\n\nfunction strjoin(divider) {\n    var args = Array.prototype.slice.apply(arguments, [1]);\n    return args.join(divider);\n}\n\n📌2. \nПромисы, что выведется в консоль:\nPromise.resolve(1)\n    .then(x => x + 1)       // (1) 1 + 1 = 2\n    .then(x => { throw x }) // (2) Ошибка: выбрасываем 2\n    .then(x => console.log(x)) // (3) Пропускается из-за ошибки\n    .catch(err => console.log(err)) // (4) Ловим ошибку (выведет 2)\n    .then(x => Promise.resolve(x)) // (5) x здесь `undefined`\n    .catch(err => console.log(err)) // (6) Пропускается, так как нет ошибки\n    .then(x => console.log(x)); // (7) Выведет `undefined`\n\n📌3.\nНаписать функцию. Функция у нас принимает URL и продолжает пытаться за'fetch'ить дату из данного URL, но делает это максимум 5 раз (задаём ограничение)\nfunction get(url) {\n    const maxRetries = 5;\n\n    function fetchWithRetry(url, retries) {\n        return fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                return response.json();\n            })\n            .catch(error => {\n                if (retries > 0) {\n                    return fetchWithRetry(url, retries - 1);\n                } else {\n                    throw new Error(\"Заданный URL недоступен\");\n                }\n            });\n    }\n\n    return new Promise((resolve, reject) => {\n        fetchWithRetry(url, maxRetries)\n            .then(data => resolve(data))\n            .catch(error => reject(error));\n    });\n}\n\n// Example usage:\nget('https://example.com/api/data')\n    .then(res => console.log(res))\n    .catch(err => console.error(err));\n\n📌 4. \nДаны два отсортированных списка с интервалами присутствия пользователей в онлайне в течение дня. Начало интервала строго меньше конца. Нужно вычислить интервалы, когда оба пользователя были в онлайне. Интервалы указаны в часах; считаем, что могут быть часы от 0 до 24\n\nПример #1:\nintersection(\n    [[8, 12], [17, 22]],\n    [[5, 11], [14, 18], [20, 23]]\n)\n\nДолжно вывести:\n\n[[8, 11], [17, 18], [20, 22]]\n\nПример #2:\nintersection(\n    [[9, 15], [18, 21]],\n    [[10, 14], [21, 22]]\n)\n\nДолжно вывести:\n[[10, 14]]\n\nboilerplate:\nfunction intersection(user1, user2) {\n    // your code here\n}\n\nРешение:\nfunction intersection(user1, user2) {\n    let result = [];\n    let i = 0, j = 0;\n\n    while (i < user1.length && j < user2.length) {\n        let start = Math.max(user1[i][0], user2[j][0]);\n        let end = Math.min(user1[i][1], user2[j][1]);\n\n        if (start < end) {\n            result.push([start, end]);\n        }\n\n        // Move the pointer of the interval that ends first\n        if (user1[i][1] < user2[j][1]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n\n    return result;\n}"
      },
      {
        "timestamp": "2025-02-17 14:43:05",
        "content": "2025-02-17 14:43:05\n Никита -> 2071074234:\n1. Яндекс 1 этап\n2. Написал hr\n3. Зп 350К+\n\nВопрос: Что такое Promise?\n\nЗадачи:\n1. Что выведет в консоль?\n\n\nPromise.resolve(1)\n  .then(x => x + 1)       // (1) 1 + 1 = 2\n  .then(x => { throw x }) // (2) Ошибка: выбрасываем 2\n  .then(x => console.log(x)) // (3) Пропускается из-за ошибки\n  .catch(err => console.log(err)) // (4) Ловим ошибку (выведет 2)\n  .then(x => Promise.resolve(x)) // (5) x здесь `undefined`\n  .catch(err => console.log(err)) // (6) Про...",
        "full_content": "2025-02-17 14:43:05\n Никита -> 2071074234:\n1. Яндекс 1 этап\n2. Написал hr\n3. Зп 350К+\n\nВопрос: Что такое Promise?\n\nЗадачи:\n1. Что выведет в консоль?\n\n\nPromise.resolve(1)\n  .then(x => x + 1)       // (1) 1 + 1 = 2\n  .then(x => { throw x }) // (2) Ошибка: выбрасываем 2\n  .then(x => console.log(x)) // (3) Пропускается из-за ошибки\n  .catch(err => console.log(err)) // (4) Ловим ошибку (выведет 2)\n  .then(x => Promise.resolve(x)) // (5) x здесь `undefined`\n  .catch(err => console.log(err)) // (6) Пропускается, так как нет ошибки\n  .then(x => console.log(x)); // (7) Выведет `undefined\n\n2. Написать функцию, которая принимает другую функцию и вызывает ее 1 раз\n\n\n\nfunction logger(fn) {\n  let isCalled = false; // Флаг вызова функции\n  let result; // Переменная для хранения результата\n\n  return function (...args) {\n    if (isCalled) return undefined; // Если уже вызывали, возвращаем undefined\n    isCalled = true; // Ставим флаг\n    result = fn(...args); // Вызываем функцию и сохраняем результат\n    return result; // Возвращаем результат первого вызова\n  };\n}\n\n// Пример с консольным выводом\nconst logHello = () => {\n  console.log(\"hello!\");\n};\n\nconst logHelloOnce = logger(logHello);\nlogHelloOnce(); // Выведет: \"hello!\"\nlogHelloOnce(); // Вернёт: undefined\nlogHelloOnce(); // Вернёт: undefined\n\n// Пример с возвратом результата\nconst add = (a, b) => a + b;\nconst addOnce = logger(add);\n\nconsole.log(addOnce(2, 3)); // 5\nconsole.log(addOnce(10, 20)); // undefined\n\n3. checkResult(url1, solution) возвращает Promise<boolean>.\nВыполните оба запроса и обработайте их результаты.\n\nЕсли хотя бы один запрос возвращает ошибку, выведите в консоль сообщение 'error'.\nЕсли оба запроса выполняются успешно, но хотя бы один из них возвращает false, выведите сообщение 'fail'.\nЕсли оба запроса выполняются успешно и оба возвращают true, выведите сообщение 'success'.\nЕсли ни один из запросов не завершился за 1000 миллисекунд, выведите 'timeout'.\n\n\n\nimport { checkResult } from \"myLib\"; // возвращает Promise<boolean>\n\nconst solution = \"Any answer\";\nconst url1 = \"yandex.ru\";\nconst url2 = \"google.com\";\n\nconst checkWithTimeout = (url, solution, timeout) =>\n  Promise.race([\n    checkResult(url, solution).catch(() => \"error\"), // Ловим ошибку, но не прерываем выполнение\n    new Promise((_, reject) => setTimeout(() => reject(\"timeout\"), timeout))\n  ]);\n\nconst checkoutTwoService = async (url1, url2, solution) => {\n  const timeout = 1000;\n  try {\n    const result = await Promise.race([\n      Promise.all([checkWithTimeout(url1, solution, timeout), checkWithTimeout(url2, solution, timeout)]),\n      new Promise((_, reject) => setTimeout(() => reject(\"timeout\"), timeout))\n    ]);\n\n    if (result.includes(\"timeout\")) {\n      console.log(\"timeout\");\n    } else if (result.includes(\"error\")) {\n      console.log(\"error\");\n    } else if (result.includes(false)) {\n      console.log(\"fail\");\n    } else {\n      console.log(\"success\");\n    }\n  } catch (err) {\n    console.log(err === \"timeout\" ? \"timeout\" : \"error\");\n  }\n};\n\ncheckoutTwoService(url1, url2, solution);\n\n4. Определить, является ли задача пангромой\n\n\nconst LETTERS = ['A', 'B', 'C' , 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\nconst LETTERS_SET = new Set(LETTERS); // O(1) доступ к буквам\n\nfunction isPangram(text) {\n  const uniqueLetters = new Set(); // O(1) на добавление\n\n  for (const char of text.toUpperCase()) { // O(N)\n    if (LETTERS_SET.has(char)) { // O(1) \n      uniqueLetters.add(char); // O(1)\n      if (uniqueLetters.size === LETTERS.length) return true; // Ранний выход\n    }\n  }\n\n  return false;\n}\n\n\nИли такое нужно было\n\n\nfunction isPangram(text) {\n  const uniqueLetters = new Set(); // O(1) на добавление\n\n  for (const char of text) { // O(N)\n    const upperChar = char.toUpperCase();\n    if (upperChar >= 'A' && upperChar <= 'Z') { // Проверка ASCII-кодов\n      uniqueLetters.add(upperChar);\n      if (uniqueLetters.size === 26) return true; // Ранний выход\n    }\n  }\n\n  return false;\n}"
      },
      {
        "timestamp": "2025-02-11 15:02:55",
        "content": "2025-02-11 15:02:55\n Марк -> 2071074234:\nКомпания: Яндекс\nВакансия: hr написала\nЗП: Просил 320к\nЗапись: Звук собеседующего очень тихий на записи, так что посути звук не записался\nЗадачи:\n// Задача 1. Что выведет в консоль?\nPromise.resolve(1)\n  .then((x) => x + 1)\n  .then((x) => {\n    throw x;\n  })\n  .then((x) => console.log(x))\n  .catch((err) => console.log(err))\n  .then((x) => Promise.resolve(x))\n  .catch((err) => console.log(err))\n  .then((x) => console.log(x));\n\n// Задача 2.\n/*\nНужно реализов...",
        "full_content": "2025-02-11 15:02:55\n Марк -> 2071074234:\nКомпания: Яндекс\nВакансия: hr написала\nЗП: Просил 320к\nЗапись: Звук собеседующего очень тихий на записи, так что посути звук не записался\nЗадачи:\n// Задача 1. Что выведет в консоль?\nPromise.resolve(1)\n  .then((x) => x + 1)\n  .then((x) => {\n    throw x;\n  })\n  .then((x) => console.log(x))\n  .catch((err) => console.log(err))\n  .then((x) => Promise.resolve(x))\n  .catch((err) => console.log(err))\n  .then((x) => console.log(x));\n\n// Задача 2.\n/*\nНужно реализовать функцию-обёртку, которая позволяет вызывать оборачиваемую функцию только один раз.\nЕсли функция вызывается больше одного раза, она всегда возвращает undefined:\n\nconst logHello = () => {\n    console.log('hello!');\n};\n\nconst logHelloOnce = runOnce(logHello);\nlogHelloOnce(); // 'hello!'\nlogHelloOnce(); // undefined\n\nОборачиваемая функция может принимать аргументы и возвращать результат.\n*/\n\nconst logger = (callback) => {\n  let called = false;\n\n  return function (...args) {\n    if (!called) {\n      called = true;\n      return callback(...args);\n    }\n    return undefined;\n  };\n};\n\n// Задача 3. Что выведет в консоль, так же были вопросы, типо а почему так и.т.д, плюс задачу дополняли постоянно\nconst object = {\n  value: \"42\",\n  print() {\n    // Потом просит функцию переделать на стрелочную\n    function type() {\n      return typeof this.value;\n    }\n    // Тут тупо нужно bind вызвать у type и this прибиндить\n    console.log(`${this.value} is ${type()}`);\n  },\n};\n// Спрашивали чему равен контекст в этом случае (объекту слева от точки), так же спрашивали когда присваивается контекст (в момент вызова)\nobject.print(); // 42 is undefined\n\n// Дополнение к этой задаче\nconst test = {\n  value: true,\n};\n\ntest.print = object.print;\ntest.print(); //true is boolean;\n\n// Задача 4. Написать каррирование\n/**\n * Нужно написать каррирование,\n * и предусмотреть что кол-во аргументов может быть неограниченно.\n */\n\nfunction curry(fn) {\n  function curried(...args) {\n    if (args.length >= fn.length) {\n      return fn(...args);\n    } else {\n      return function (...nextArgs) {\n        return curried(...args, ...nextArgs);\n      };\n    }\n  }\n\n  return curried;\n}\n\nfunction multiply(a, b, c) {\n  return a * b * c;\n}\n\nconsole.log(curry(multiply)(2, 3, 4)); // 24\nconsole.log(curry(multiply)(2, 3)(4)); // 24\nconsole.log(curry(multiply)(2)(3)(4)); // 24\n\n// Задача 5\n// Необходимо проверить решение задачи по двум сервисам, вызвав checkResult(url1, solution), checkResult(url2, solution)\n// checkResult: (url: string, solution: string | number) => Promise<boolean>;\n//\n// * Если оба запроса вернули true - вывести success\n// * Если хоть один вернул false - вывести fail\n// * Если хоть один не ответил - вывести error\n// * Если хоть один отвечает дольше 1 сек - вывести timeout\n\nimport { checkResult } from \"myLib\";\n\nconst solution = \"Any answer\";\nconst url1 = \"yandex.ru\";\nconst url2 = \"google.com\";\n// Кейс с таймаутом решил декоратором\nfunction withTimeout(promise, ms = 1000) {\n  return new Promise((resolve, reject) => {\n    const timer = setTimeout(() => {\n      reject(new Error(\"timeout\"));\n    }, ms);\n\n    promise.then(\n      (value) => {\n        clearTimeout(timer);\n        resolve(value);\n      },\n      (error) => {\n        clearTimeout(timer);\n        reject(error);\n      },\n    );\n  });\n}\n\nasync function check(url1, url2, solution) {\n  // Запускаем оба вызова checkResult с ограничением в 1 сек:\n  const p1 = withTimeout(checkResult(url1, solution), 1000);\n  const p2 = withTimeout(checkResult(url2, solution), 1000);\n\n  // Ждём, пока оба завершатся — вне зависимости от успеха или ошибки (allSettled).\n  // Результат будет массив объектов вида { status, value?, reason? }\n  const [res1, res2] = await Promise.allSettled([p1, p2]);\n\n  // 2) Проверяем, не было ли других ошибок (rejected не по таймауту):\n  if (res1.status === \"rejected\" || res2.status === \"rejected\") {\n    return \"error\";\n  }\n\n  // 3) Если оба fulfilled, смотрим значения (true / false):\n  //    Если хотя бы одно false, выводим \"fail\"\n  if (!res1.value || !res2.value) {\n    return \"fail\";\n  }\n\n  // 4) Остался случай — оба true:\n  return \"success\";\n}"
      },
      {
        "timestamp": "2025-02-07 18:36:11",
        "content": "2025-02-07 18:36:11\n Klimenty Karavaev -> 2071074234:\nКомпания: Яндекс 1 этап\nВопросы:\nрешить задачу isPangram (leetcode like); попросил решение O(n) с одним циклом, с наиболее ранним выходом из цикла, если уже нашли все необходимые символы во инпут строке\nсделать sleep функцию + уточнение почему и когда может таймаут отрабатывать через большее время, чем задано изначально; объяснение такое, что если основной поток, в котором исполняется ЖС и так уже загружен, например, синхронными задачами или ...",
        "full_content": "2025-02-07 18:36:11\n Klimenty Karavaev -> 2071074234:\nКомпания: Яндекс 1 этап\nВопросы:\nрешить задачу isPangram (leetcode like); попросил решение O(n) с одним циклом, с наиболее ранним выходом из цикла, если уже нашли все необходимые символы во инпут строке\nсделать sleep функцию + уточнение почему и когда может таймаут отрабатывать через большее время, чем задано изначально; объяснение такое, что если основной поток, в котором исполняется ЖС и так уже загружен, например, синхронными задачами или микротасками, то несмотря на то, что таймауту задали например 100 миллисекунд, он может выполнится хоть через 10000, пока исполнение не дойдет до выполнения собсна таймаут коллбэка\nнаписать свой Promise.any\nнаписать полифил для array.prototype.some"
      },
      {
        "timestamp": "2025-02-06 20:59:09",
        "content": "2025-02-06 20:59:09\n Эмир -> 2071074234:\nКомпания: Яндекс\nВакансия: HR сам написал\nВопросы: Не было. Сразу перешли к задачам.\nЗадачи: \n1. Что выведет в консоли?\nvar n = 1;\nfunction f(n) {\n    n = 3;\n}\nf(n);\nconsole.log(n); // Выведет 1\n2. Что выведет в консоли?\nvar obj = { a: 1 };\nfunction f1(o) {\n    o.a = 5;\n}\nf1(obj);\nconsole.log(obj); // Выведет { a: 5 }\n3. Что выведет в консоли?\nvar obj = { a: 1 };\nfunction f2(o) {\n    o = { hello: 1 };\n}\nf2(obj);\nconsole.log(obj); // Выведет { a: 1 }\n4. чт...",
        "full_content": "2025-02-06 20:59:09\n Эмир -> 2071074234:\nКомпания: Яндекс\nВакансия: HR сам написал\nВопросы: Не было. Сразу перешли к задачам.\nЗадачи: \n1. Что выведет в консоли?\nvar n = 1;\nfunction f(n) {\n    n = 3;\n}\nf(n);\nconsole.log(n); // Выведет 1\n2. Что выведет в консоли?\nvar obj = { a: 1 };\nfunction f1(o) {\n    o.a = 5;\n}\nf1(obj);\nconsole.log(obj); // Выведет { a: 5 }\n3. Что выведет в консоли?\nvar obj = { a: 1 };\nfunction f2(o) {\n    o = { hello: 1 };\n}\nf2(obj);\nconsole.log(obj); // Выведет { a: 1 }\n4. что выведет в консоли?\nvar obj = { a: 1 };\nfunction f2(o) {\n    o = { hello: 1 };\n}\nf2(obj);\nconsole.log(obj); // Выведет { a: 1 }\n5. Реализуй функцию strjoin(separator, ...strings), которая объединяет переданные строки с указанным разделителем\nfunction strjoin(separator, ...strings) {\n    return strings.reduce((result, str, index) => \n        index === 0 ? str : result + separator + str, \n    '');\n}\n6. Реализуй функцию callLimit(fn, limit, callback), которая ограничивает количество вызовов переданной функции fn.\nfunction callLimit(fn, limit, callback) {\n    let count = 0;\n    \n    const wrapped = function (...args) {\n        if (count >= limit) {\n            if (callback) {\n                callback();\n            }\n            return; // Прерываем выполнение, если превышен лимит\n        }\n        \n        count++;\n        const result = fn.apply(this, args);\n        \n        if (count === limit && callback) {\n            callback();\n        }\n\n        return result; // Возвращаем результат вызова `fn`\n    };\n\n    wrapped.reset = function () {\n        count = 0;\n        return wrapped;\n    };\n\n    return wrapped;\n}\n\n// Пример использования:\nconst limitedFn = callLimit((x) => x * 2, 3, () => console.log(\"Лимит достигнут\"));\n\nconsole.log(limitedFn(2)); // 4\nconsole.log(limitedFn(3)); // 6\nconsole.log(limitedFn(4)); // 8\nconsole.log(limitedFn(5)); // \"Лимит достигнут\", undefined\nconsole.log(limitedFn(6)); // \"Лимит достигнут\", undefined\n\nlimitedFn.reset();\nconsole.log(limitedFn(2)); // 4 (счётчик сброшен)\n7. Написать функцию get(url), которая выполняет HTTP-запрос по заданному URL с повторными попытками в случае ошибки. Максимальное количество попыток — 5. Если после всех попыток запрос не удался, функция должна вернуть ошибку \"Заданный URL недоступен\".\nfunction get(url) {\n    const MAX_RETRIES = 5; // Максимальное количество попыток\n\n    function fetchWithRetry(attempt) {\n        return fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`Ошибка HTTP! Статус: ${response.status}`);\n                }\n                return response.json();\n            })\n            .catch(error => {\n                if (attempt >= MAX_RETRIES - 1) {\n                    return Promise.reject(new Error(\"Заданный URL недоступен\"));\n                }\n                \n    }\n\n    return fetchWithRetry(0);\n}"
      },
      {
        "timestamp": "2025-02-06 13:11:38",
        "content": "2025-02-06 13:11:38\n Petr Zabrodniy -> 2071074234:\nКомпания : Яндекс, 2 (второй) этап \nВакансия : рекрутер сам написал \nЗП : не обсуждали \nЗадачи : \n\n1)  atm-machine aka БАНКОМАТ\n\n/**  \n * Банкомат. * * В банкомате есть купюры — 50, 100, 500, 1000, 5000 руб. Номиналы купюр только такие, они не меняются * и доступны в константе nominals. * Есть ограничение на количество каждой из купюр (аргумент limits), его нужно держать в актуальном * состоянии (мутировать). * Нужно вернуть купюры и их количест...",
        "full_content": "2025-02-06 13:11:38\n Petr Zabrodniy -> 2071074234:\nКомпания : Яндекс, 2 (второй) этап \nВакансия : рекрутер сам написал \nЗП : не обсуждали \nЗадачи : \n\n1)  atm-machine aka БАНКОМАТ\n\n/**  \n * Банкомат. * * В банкомате есть купюры — 50, 100, 500, 1000, 5000 руб. Номиналы купюр только такие, они не меняются * и доступны в константе nominals. * Есть ограничение на количество каждой из купюр (аргумент limits), его нужно держать в актуальном * состоянии (мутировать). * Нужно вернуть купюры и их количество, которыми можно выдать запрашиваемую сумму, в виде * объекта в формате, аналогичном объекту лимитов. * При прочих равных возможностях выдать одну и ту же сумму разными купюрами приоритет отдаётся крупным. * Если выдать запрашиваемую сумму не получится в принципе (сумма не кратна минимальному номиналу) — * выбросить ошибку 'Incorrect value'. * Если в банкомате недостаточно нужных купюр — выбросить ошибку 'Not enough money'. */  \n  \n  \nconst nominals = [5000, 1000, 500, 100, 50];  \n  \nconst limits = {50:10,100:10,500:10,1000:10,5000:10};  \n  \nfunction atmGiveMoneyObj(amount, limits) {  \n  \n    if (amount % 50 !== 0) {  \n        throw new Error(\"Incorrect value\");  \n    }  \n  \n    let remaining = amount;  \n    const result = {50:0,100:0,500:0,1000:0,5000:0};  \n  \n    for (const nominal of nominals) {  \n        if (remaining === 0) break;  \n        const needed = Math.floor(remaining / nominal);  \n        if (needed > 0) {  \n            const available = limits[nominal] || 0;  \n            const take = Math.min(needed, available);  \n            if (take > 0) {  \n                remaining -= take * nominal;  \n                limits[nominal] = available - take;  \n                result[nominal] = take;  \n            }  \n        }    }  \n    if (remaining > 0) {  \n        throw new Error(\"Not enough money\");  \n    }  \n  \n    return result;  \n}  \n  \n  \n  \nconsole.log(atmGiveMoneyObj(2350, limits));   \n// { 50: 1, 100: 3, 500: 0, 1000: 2, 5000: 0 }\n\n2) Вывод сообщений \n\n\n\nfunction solution(connect, render) {\n    let messages = new Map();\n    let lastRenderedId = 0;\n\n    connect((msg) => {\n        messages.set(msg.id, msg);\n\n        while (messages.has(lastRenderedId + 1)) {\n            lastRenderedId++;\n            render(messages.get(lastRenderedId));\n            messages.delete(lastRenderedId); // Удаляем сообщение после отображения\n        }\n\n        // Логирование или проверка на количество сообщений в Map, если необходимо\n        if (messages.size > 1000) {\n            console.warn(\"Более 1000 сообщений ожидают отображения\");\n        }\n    });\n}"
      },
      {
        "timestamp": "2025-01-31 15:18:06",
        "content": "2025-01-31 15:18:06\n Aintripin -> 2071074234:\nКомпания: Яндекс\nВакансия: frontend разработчик; написала hr сама\nЗП: по-моему, говорил, что ориентрируюсь на 280-330\n\nЗадачи:\n\n1. Реализовать функцию runOnce, которая оборачивает другую функцию таким образом, что если мы вызываем эту функцию через runOnce в первый раз, то она работает как обычно, а при последующий разах выводит в консоль undefined:\n\nfunction runOnce(fn) {\n    let hasBeenCalled = false;\n    let result;\n\n    return function(...args) {...",
        "full_content": "2025-01-31 15:18:06\n Aintripin -> 2071074234:\nКомпания: Яндекс\nВакансия: frontend разработчик; написала hr сама\nЗП: по-моему, говорил, что ориентрируюсь на 280-330\n\nЗадачи:\n\n1. Реализовать функцию runOnce, которая оборачивает другую функцию таким образом, что если мы вызываем эту функцию через runOnce в первый раз, то она работает как обычно, а при последующий разах выводит в консоль undefined:\n\nfunction runOnce(fn) {\n    let hasBeenCalled = false;\n    let result;\n\n    return function(...args) {\n        if (!hasBeenCalled) {\n            hasBeenCalled = true;\n            result = fn(...args);\n            return result;\n        } else {\n            return undefined;\n        }\n    };\n}\n\n// Пример использования\nconst logHello = () => {\n    console.log(\"hello!\");\n};\n\nconst logHelloOnce = runOnce(logHello);\n\nlogHelloOnce(); // 'hello!'\nlogHelloOnce(); // undefined\n\n2. Написать такую функцию, чтобы при передаче в неё двух промисов, она складывала их результаты выполнения:\n\n\nfunction sumPromises(...promises) {\n    return Promise.all(promises)\n        .then(results => {\n            return results.reduce((sum, value) => sum + value, 0);\n        });\n}\n\n// Пример использования\nconst promise1 = Promise.resolve(1);\nconst promise2 = Promise.resolve(2);\n\nsumPromises(promise1, promise2).then(console.log); // 3\n\n3. Есть функция callLimit: она принимает в себя три параметра: другую функцию (fn), количество раз, которое эта другая функция будет вызываться (limit), и callback, если у этой другой передаваемой функции он есть. Нужно реализовать этот функционал, сделав так, что всё то количество раз, когда мы вызываем функцию через callLimit, которое не превышает limit, выводилось сообщение передаваемой функции fn, а потом в самом конце callback (если он имеется)\n\n\nfunction callLimit(fn, limit, callback) {\n    let count = 0;\n    \n    const wrapped = function(...args) {\n        if (count >= limit) {\n            if (callback) {\n                callback();\n            }\n            return;\n        }\n        \n        count++;\n        // Вызываем callback когда это последний разрешенный вызов\n        const result = fn.apply(this, args);\n        if (count === limit && callback) {\n            callback();\n        }\n        return result;\n    };\n    \n    wrapped.reset = function() {\n        count = 0;\n    };\n    \n    return wrapped;\n}\n\n4. Есть функция, которая выполняется за время t, которое мы передаём, как один из параметров этой функции. Если эта функции выполняется за время t ил меньше, то сообщение об успехе выводится; если не успевает, то выбрасывается ошибка. Реализовать такую функцию:\n\nconst timeLimited = function(fn, t) {\n    return function(...args) {\n        const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => {\n                reject(new Error('Time limit exceeded'));\n            }, t);\n        });\n\n        const functionPromise = fn(...args);\n\n        return Promise.race([functionPromise, timeoutPromise]);\n    };\n};\n\n4.1: Что будет происходить с таймером для`functionPromise`?\n        Ответ: он просто будет накапливаться, его можно очистить через clearTimeout\n       Как это сделать?\n\nconst timeLimited = function (fn, t) {\n  return function (...args) {\n    const timeoutPromise = new Promise((_, reject) => {\n      let id;\n      id = setTimeout(() => {\n        reject(new Error(\"Time limit exceeded\"));\n      }, t);\n    });\n\n    const functionPromise = fn(...args).then(clearTimeout(id));\n\n    return Promise.race([functionPromise, timeoutPromise]);\n  };\n};\n\nТипо, мы привязываем к каждому промису в каждой новой итерации по id'шнику и потом чистим через clearTimeout(id)\n\n4.2 Если functionPromise упадёт, то чё делать будем?\n      Обернуть в catch:\n    const functionPromise = fn(...args)\n      .then(clearTimeout(id))\n      .catch((err) => console.log(err));\n\n4.3 А почему в \ncatch((err) => console.log(err))\nты пишешь (err) => ..., а в then(clearTimeout(id)) — там такого нет?\nОтвет: в catch мы саму ошибку передаём, а в then там ничё нет, поэтому необязательно. Я так понял, можно было \n.then(() => clearTimeout(id))"
      },
      {
        "timestamp": "2025-01-30 05:58:26",
        "content": "2025-01-30 05:58:26\n Кирилл -> 2071074234:\nНазвание компании: Яндекс\nСсылка на вакансию:  hr сама написала\nЗП: от 250 тыс. руб\nВопросы: \n- async await \n- == vs ===\n- != vs !==\n- как работает eventloop\nЗадачи:\n- По задачам нужно было сначала рассказать как буду решать, а после написания задачи нужно было объяснить как работает код\n// Задача 1\n// Что будет выведено в консоль\n\nvar n = 1;\nfunction f(n) {\n    n = 3;\n}\nf(n);\nconsole.log(n); // 1\n\n\nvar obj = { a: 1 };\nfunction f1(o) {\n    o.a = 5;\n}\nf1...",
        "full_content": "2025-01-30 05:58:26\n Кирилл -> 2071074234:\nНазвание компании: Яндекс\nСсылка на вакансию:  hr сама написала\nЗП: от 250 тыс. руб\nВопросы: \n- async await \n- == vs ===\n- != vs !==\n- как работает eventloop\nЗадачи:\n- По задачам нужно было сначала рассказать как буду решать, а после написания задачи нужно было объяснить как работает код\n// Задача 1\n// Что будет выведено в консоль\n\nvar n = 1;\nfunction f(n) {\n    n = 3;\n}\nf(n);\nconsole.log(n); // 1\n\n\nvar obj = { a: 1 };\nfunction f1(o) {\n    o.a = 5;\n}\nf1(obj);\nconsole.log(obj); //  { a: 5 };\n\n\nvar obj = { a: 1 };\nfunction f2(o) {\n    o = { hello: 1 };\n}\nf2(obj);\nconsole.log(obj); // { a: 1 };\n\n\n// Задача 2:\n// Написать функцию sleep, которая будет спать заданное количество миллисекунд, а потом успешно завершаться\n// Тут необходимо было рассказать про eventloop и как браузер будет обрабатывать код\nfunction sleep(duration) {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve()\n        }, duration)\n    })\n}\n\n\n// Задача 3:\n// 1)Написать декоратор для функции, который ограничивает число вызывов\n// callback передается опционально. Если передали, то вывывать на последней операции\n// 2) У вызываемой фукнции должен быть метод для перезагрузки счетчика в начальное положение\nfunction callLimit(fn, limit, callback) {\n    let сounter = 0\n    function limitedFn(...args) {\n        сounter++\n        if (сounter <= limit) {\n\n            if (сounter === limit && callback) {\n                callback()\n            }\n\n            return fn.applay(this, args)\n        }\n        return null\n    }\n    limitedFn.reset = () => {\n        сounter = 0\n    }\n    return limitedFn\n}\n\n\n// Задача 4:\n//Необходимо реализовать функцию timeLimited, которая принимает асинхронную функцию и временной лимит в миллисекундах. \n//Функция timeLimited должна возвращать новую асинхронную функцию, которая выполняет переданную функцию, \n// но отклоняется с ошибкой, если выполнение занимает больше заданного времени.\n\nconst timeLimited = function (fn, t) {\n    return async function (...args) {\n\n        return Promise.race([\n            fn(...args),\n\n            new Promise((_, reject) => {\n                setTimeout(() => reject(\"Time limit exceeded\"), t)\n            }),\n        ]);\n    };\n};\n- Успех собеса: ✅"
      },
      {
        "timestamp": "2025-01-28 13:24:43",
        "content": "2025-01-28 13:24:43\n Владислав -> 2071074234:\n- компания: Яндекс (1 этап)\n- вакансия: hr написал\n- зп не обсуждалось\n\nЗадачи: \n#Задача 1\nЧто выведет консоль\nКак исправить\n\nУсловие: \nconst object = {\n  value: '42',\n  print() {\n    function type() {\n      return this.value;\n    }\n    \n    console.log(`${this.value} is ${type()}`);\n  },\n};\n\nobject.print();\nРешение \n// Консоль выведет 42 undefined\n// Чтоб исправить нужно задать контекст функции, либо сделать ее стрелочной, чтоб она брала контекст вы...",
        "full_content": "2025-01-28 13:24:43\n Владислав -> 2071074234:\n- компания: Яндекс (1 этап)\n- вакансия: hr написал\n- зп не обсуждалось\n\nЗадачи: \n#Задача 1\nЧто выведет консоль\nКак исправить\n\nУсловие: \nconst object = {\n  value: '42',\n  print() {\n    function type() {\n      return this.value;\n    }\n    \n    console.log(`${this.value} is ${type()}`);\n  },\n};\n\nobject.print();\nРешение \n// Консоль выведет 42 undefined\n// Чтоб исправить нужно задать контекст функции, либо сделать ее стрелочной, чтоб она брала контекст выше\n\nconst object = {\n  value: '42',\n  print() {\n    const type = () => {\n      return this.value;\n    }\n    \n    console.log(`${this.value} is ${type()}`);\n  },\n};\n\nobject.print();\n\n#Задача 2\nНаписать ф-цию compose\n\nУсловие:\nfunction compose() {\n  // code here\n}\n\nconst square = (x) => x * x;\nconst times2 = (x) => x * 2;\nconst sum = (a, b) => a + b;\n\nconsole.log(compose(square, times2)(2) === square(times2(2)));\nconsole.log(compose(square, times2, sum)(3, 4) === square(times2(sum(3, 4))));\nРешение\nfunction compose(...funcs) {\n  return function(...args) {\n    return funcs.reduceRight((acc, fn) => [fn(...acc)], args)[0];\n  };\n}\n\n#Задача 3\nНаписать функцию get, которая принимает url, делать запрос и отдает ответ. В случае ошибки делает 5 попыток \n\nрешение\nfunction get(url, count = 5) {\n  return (\n    fetch(url)\n    .then((res) => {\n      return res.json();\n    })\n    .catch(() => {\n      if (count > 0) {\n        return get(url, count - 1)\n      }\n\n      return Promise.reject('Задача не выполнена')\n    })\n  )\n}\n\nget('https://api.example.com/data')\n    .then(res => console.log(res))\n    .catch(err => console.error(err));\n\n#Задача 4\nЕсть дерево, на котором сидят белки (squirrel) и вороны(raven). Нужно написать функцию, которая проходит по дереву, собирает всех белок и выводит их имена\n\nУсловие\nfunction squirrelScanner(tree) {\n  // code here\n}\n\n// Пример дерева\nconst tree = {\n  nest: { name: 'NEVERMORE!', type: 'raven' },\n  branches: [\n    {\n      nest: { name: 'Acorn', type: 'squirrel' },\n      branches: [\n        {\n          nest: { name: 'Sir Salty', type: 'squirrel' },\n        },\n        {\n          nest: { name: 'Huginn', type: 'raven' },\n          branches: [\n            {},\n            { nest: { name: 'Muninn', type: 'raven' } },\n            { nest: { name: 'Kernel', type: 'squirrel' } },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nconsole.log(squirrelScanner(tree)); // ['Acorn', 'Sir Salty', 'Kernel']\nРешение:\nfunction squirrelScanner(tree) {\n  const squirrels = [];\n\n  // Проверяем текущий узел дерева\n  if (tree.nest.type === 'squirrel') {\n    squirrels.push(tree.nest.name);\n  }\n\n  // Если есть ветви, рекурсивно ищем белок в каждой ветви\n  if (tree.branches) {\n    tree.branches.forEach(branch => {\n      squirrels.push(...squirrelScanner(branch));  // Собираем белок из дочерних ветвей\n    });\n  }\n\n  return squirrels;\n}"
      },
      {
        "timestamp": "2024-12-26 14:04:09",
        "content": "2024-12-26 14:04:09\n Дастан -> 2071074234:\nКомпания: Яндекс, второй этап\nСсылка на вакансию: hr написала\nЗП: не обсуждали\n\n/*\nУ нас есть набор билетов вида:\n\n[\n    { from: 'London', to: 'Moscow' },\n    { from: 'NY', to: 'London' },\n    { from: 'Moscow', to: 'SPb' },\n    ...\n]\n\nИз этих билетов можно построить единственный, неразрывный маршрут.\nПетель и повторов в маршруте нет.\n\nНужно написать программу, которая возвращает эти же объекты билетов\nв порядке следования по маршруту.\n*/\n\nfunction getRo...",
        "full_content": "2024-12-26 14:04:09\n Дастан -> 2071074234:\nКомпания: Яндекс, второй этап\nСсылка на вакансию: hr написала\nЗП: не обсуждали\n\n/*\nУ нас есть набор билетов вида:\n\n[\n    { from: 'London', to: 'Moscow' },\n    { from: 'NY', to: 'London' },\n    { from: 'Moscow', to: 'SPb' },\n    ...\n]\n\nИз этих билетов можно построить единственный, неразрывный маршрут.\nПетель и повторов в маршруте нет.\n\nНужно написать программу, которая возвращает эти же объекты билетов\nв порядке следования по маршруту.\n*/\n\nfunction getRoute(tickets = []) {\n  // TODO\n  const set = new Set();\n\n  const result = [];\n  const map = new Map();\n\n  tickets.forEach((item) => {\n    if (!set.has(item.from)) set.add(item.from);\n    map.set(item.from, item);\n  });\n\n  tickets.forEach((item) => {\n    if (set.has(item.to)) set.delete(item.to);\n  });\n\n\n  let i = 0;\n  let current = [...set][0];\n\n  while (i < map.size) {\n    const cur = map.get(current);\n    result.push(cur);\n    current = cur.to;\n    i++;\n  }\n\n  return result;\n}\n\n\n/*\nДан массив ссылок: ['url1', 'url2', ...] и лимит одновременных запросов (limit)\nНеобходимо реализовать функцию, которая опросит урлы в том порядке, в котором они идут в массиве, и вызовет callback c массивом ответов\n['url1_answer', 'url2_answer', ...] так, чтобы в любой момент времени выполнялось не более limit\nзапросов (как только любой из них завершился, сразу же отправляется следующий)\nТ.е. нужно реализовать шину с шириной равной limit.\n\nТребования:\n- Порядок в массиве ответов должен совпадать с порядком в массиве ссылок\nДополнительно:\n- Функция должна обладать мемоизацией (один и тот же урл не опрашивать дважды)\n\nДля опроса можно использовать fetch\nОшибки обрабатывать не нужно\n*/\n\n\n\nasync function parallelLimit(urls, limit, callback) {\n  // TODO\n  const result = [];\n  const cache = {};\n  const set = new Set();\n\n  for (let i = 0; i < urls.length; i++) {\n    const promise = fetchUrl(urls[i], i).finally(() => set.delete(promise));\n    set.add(promise);\n\n    if (set.size >= limit) {\n      await Promise.race(set);\n    }\n  }\n\n  await Promise.all(set);\n\n  async function fetchUrl(url, index) {\n    try {\n      if (!cache[url]) {\n        const response = await fetch(url);\n        result[index] = response;\n        cache[url] = response;\n      } else {\n        result[index] = cache[url];\n      }\n    } catch (error) {\n      result[index] = error;\n      cache[url] = error;\n    }\n  }\n\n\n  return callback(result);\n}"
      },
      {
        "timestamp": "2024-12-24 08:43:19",
        "content": "2024-12-24 08:43:19\n Дастан -> 2071074234:\nКомпания: Яндекс, первый этап\nссылка на вакансию: hr написала\nзп: не обсуждали\n// Первая секция:\n\nvar n = 1;\nfunction f(n) {\n  n = 3;\n}\nf(n);\nconsole.log(n); // ?? 1\n\n\nvar obj = { a: 1 };\nfunction f1(o) {\n  o.a = 5;\n}\nf1(obj);\nconsole.log(obj); // ?? { a: 5 };\n\n\nvar obj = { a: 1 };\nfunction f2(o) {\n  o = { hello: 1 };\n}\nf2(obj);\nconsole.log(obj); // ??{ a: 1 };\n\n\n\n/**\n * Необходимо написать функцию strjoin, которая склеивает строки через разделитель.\n *...",
        "full_content": "2024-12-24 08:43:19\n Дастан -> 2071074234:\nКомпания: Яндекс, первый этап\nссылка на вакансию: hr написала\nзп: не обсуждали\n// Первая секция:\n\nvar n = 1;\nfunction f(n) {\n  n = 3;\n}\nf(n);\nconsole.log(n); // ?? 1\n\n\nvar obj = { a: 1 };\nfunction f1(o) {\n  o.a = 5;\n}\nf1(obj);\nconsole.log(obj); // ?? { a: 5 };\n\n\nvar obj = { a: 1 };\nfunction f2(o) {\n  o = { hello: 1 };\n}\nf2(obj);\nconsole.log(obj); // ??{ a: 1 };\n\n\n\n/**\n * Необходимо написать функцию strjoin, которая склеивает строки через разделитель.\n */\n\nfunction strjoin(splitter, ...strings) {\n  // return strings.join(splitter);\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    let current = strings[i];\n    if (i === 0) result += `${current}`;\n    else result += `${splitter}${current}`;\n  }\n\n  return result;\n}\n\nconsole.log(strjoin('.', 'a', 'b', 'c')); // 'a.b.c'\nconsole.log(strjoin('-', 'a', 'b', 'c', 'd', 'e', 'f')); // 'a-b-c-d-e-f'\n\n\n/*\n * Нужно написать функцию compose.\n * Количество входящих функций в compose и число аргументов результирующей функции не ограничены.\n */\n\nconst square = (x) => x * x;\nconst times2 = (x) => x * 2;\nconst sum = (a, b) => a + b;\n\nconsole.log(compose(square, times2)(2) === square(times2(2)));\nconsole.log(compose(square, times2, sum)(3, 4) === square(times2(sum(3, 4))));\n\n\nfunction compose(...funcs) {\n  return function (...args) {\n    return funcs.reduceRight((acc, fn) => {\n      return [fn(...acc)];\n    }, args)[0];\n  };\n}\n\n\n/*Задача: Реализация функции timeLimited\nОписание:\n\nВам необходимо реализовать функцию timeLimited, которая принимает асинхронную функцию и временной лимит в миллисекундах. \nФункция timeLimited должна возвращать новую асинхронную функцию, которая выполняет переданную функцию, но отклоняется с ошибкой, если выполнение занимает больше заданного времени.\n\nТребования:\n\nФункция timeLimited должна принимать два аргумента:\nfn: асинхронная функция, выполнение которой нужно ограничить.\nt: временной лимит в миллисекундах (число).\nФункция timeLimited должна возвращать новую асинхронную функцию, которая:\nПринимает произвольное количество аргументов, которые будут переданы в fn.\nИспользует Promise.race для одновременного выполнения двух промисов:\nПервый промис — это вызов функции fn с переданными аргументами.\nВторой промис — это таймер, который отклоняется через t миллисекунд с сообщением \"Time limit exceeded\".\nЕсли функция fn выполняется в пределах временного лимита, результат выполнения должен быть возвращён.\nЕсли функция fn не завершает выполнение в течение времени t, функция должна отклоняться с ошибкой \"Time limit exceeded\". */\n\nconst timeLimited = function (fn, t) {\n  return async function (...args) {\n\n    return Promise.race([\n      fn(...args),\n\n      new Promise((_, reject) =>\n        setTimeout(\n          () =>\n            reject(\"Time limit exceeded\"),\n          t\n        )\n      ),\n    ]);\n  };\n};\n\n\n/**\n * \n * Реализовать задачу isMonotonic, на вход приходит массив с цифрами, нужно отдать true, если айтемы в массиве идут \n * вверх или вних, последовательно, а если нет то false \n * \n * [1, 2, 3, 5, 7, 8] => true\n * [6, 4, 2, 1 ] => true\n * [2, 3, 7, 4] => false\n *\n */\n\nfunction isMonotonic(numbers) {\n  if (numbers.length <= 1) return true;\n\n  let isIncreasing = true;\n  let isDecreasing = true;\n\n  for (let i = 1; i < numbers.length; i++) {\n      if (numbers[i] > numbers[i - 1]) {\n          isDecreasing = false;\n      }\n      if (numbers[i] < numbers[i - 1]) {\n          isIncreasing = false;\n      }\n  }\n\n  return isIncreasing || isDecreasing;\n}\n\n/*\n   Напишите код, который при клике на любой div\n   внутри root будет выводить в консоль его id.\n   Можно использовать jQuery\n   */\n\n<div id=\"root\" style=\"background: red;\">\n  root\n  <span id=\"id1\" style=\"background: lightblue;\">id1</span>\n  <div id=\"id2\" style=\"background: green;\">\n    id2\n    <div id=\"id3\" style=\"background: yellow;\">id3</div>\n  </div>\n</div>;\n\nconst root = document.getElementById(\"root\");\nroot.addEventListener(\"click\", (event) => {\n  if (event.target.tagName === \"DIV\") {\n    console.log(event.target.id);\n  }\n});"
      },
      {
        "timestamp": "2024-12-19 16:36:42",
        "content": "2024-12-19 16:36:42\n Egor -> 2071074234:\nКомпания: Яндекс 2 этап\nСсылка на вакансию: hr написала\nЗп: ???\nЗапись: https://youtu.be/PZxhhMAhfWc",
        "full_content": "2024-12-19 16:36:42\n Egor -> 2071074234:\nКомпания: Яндекс 2 этап\nСсылка на вакансию: hr написала\nЗп: ???\nЗапись: https://youtu.be/PZxhhMAhfWc"
      },
      {
        "timestamp": "2024-12-17 14:07:43",
        "content": "2024-12-17 14:07:43\n Egor -> 2071074234:\nКомпания: Яндекс 1 этап\nСсылка на вакансию: hr написала\nЗп: не обсуждалась \nСсылка на собес: https://youtu.be/ZGpMwk8nCbc",
        "full_content": "2024-12-17 14:07:43\n Egor -> 2071074234:\nКомпания: Яндекс 1 этап\nСсылка на вакансию: hr написала\nЗп: не обсуждалась \nСсылка на собес: https://youtu.be/ZGpMwk8nCbc"
      },
      {
        "timestamp": "2024-11-26 11:31:05",
        "content": "2024-11-26 11:31:05\n Maksim -> 2071074234:\nКомпания: Яндекс (3 этап Софт)                                                                                                                                                                                        Вопросы:                                                                                                                                                                                                                              1)Расскажи пр...",
        "full_content": "2024-11-26 11:31:05\n Maksim -> 2071074234:\nКомпания: Яндекс (3 этап Софт)                                                                                                                                                                                        Вопросы:                                                                                                                                                                                                                              1)Расскажи про опыт                                                                                                                                                                                                                          2)Что вкладывал в архитектуру проекта                                                                                                                                                                            3)Пример 1-2 задач которыми гордишься                                                                                                                                                                            4)Как бы ты деплоил и кто у вас этим занимается                                                                                                                                                             5)Приходилось ли тебе настраивать Ci/ Cd                                                                                                                                                                        6)Какие тесты используете на проекте                                                                                                                                                                   7)Приходилось ли тебе Оптимизировать приложение                                                                                                                                    8)Приложение долго грузиться как бы ты это решал                                                                                                                                                  9)Работал ли с SSR плюсы и минусы                                                                                                                                                                                       10)Что привнес в проект                                                                                                                                                                                                             11)Был ли опыт менторства                                                                                                                                                                                                    12)Были ли кейсы недопонимания                                                                                                                                                                                13)Расскажи про опыт позитивной интеграции со сверстниками"
      },
      {
        "timestamp": "2024-11-20 11:18:10",
        "content": "2024-11-20 11:18:10\n Maksim -> 2071074234:\nКомпания: Яндекс (2этап)                                                                                                                                                                                                                        Вакансия:Hr сама написала                                                                                                                                                                                                ...",
        "full_content": "2024-11-20 11:18:10\n Maksim -> 2071074234:\nКомпания: Яндекс (2этап)                                                                                                                                                                                                                        Вакансия:Hr сама написала                                                                                                                                                                                                              Зп: не обсуждали                                                                                                                                                                                                                            Расскажи про опыт и задачи(была еще задача легкая на eventLoop не сохранилась):                                                                                                  \n   const price = [2, 3, 5, 8, 7, 6];\n\nfunction getIceCream(amount) {\n \n    const map = new Map();  // Для хранения индексов, которые могут составить сумму\n\n    for (let i = 0; i < price.length; i++) {\n        const complement = amount - price[i];  // Искомое число для текущей цены\n        if (map.has(complement)) {\n            // Если complement найден в map, возвращаем индексы\n            return [map.get(complement), i];\n        }\n        // Если complement не найден, добавляем текущую цену и ее индекс в map\n        map.set(price[i], i);\n    }\n\n    return [];  // Если не нашли пары, возвращаем пустой массив\n}\nclass EventEmmiter {\n    constructor() {\n        // Инициализация объекта для хранения событий\n        this.events = {}\n    }\n\n    addEventListener(event, listener) {\n        // Проверяем, существует ли список слушателей для данного события\n        if (!this.events[event]) {\n            this.events[event] = [] // Если нет, создаем новый\n        }\n        this.events[event].push(listener) // Добавляем слушателя в список\n\n        // Возвращаем функцию, которая удаляет слушателя\n        return () => {\n            this.events[event] = this.events[event].filter(el => el !== listener)\n        }\n    }\n\n    dispatchEvent(event, payload) {\n        // Если для события нет слушателей, ничего не делаем\n        if (!this.events[event]) {\n            return\n        }\n        // Вызываем каждого слушателя с переданным payload\n        this.events[event].forEach(listener => listener(payload))\n    }\n}\nДоработка: \nconstructor(method) {\n        this.events = {}\n        this.method = method\n    }\ndispatchEvent(event, payload) {\n        if (!this.events[event]) {\n            return\n        }\n        this.events[event].forEach(listener => {\n            this.method(() => {\n                listener(payload)\n            })\n        });\n    }"
      },
      {
        "timestamp": "2024-11-17 08:20:07",
        "content": "2024-11-17 08:20:07\n Вадим -> 2071074234:\nКомпания: Яндекс\nВакансия: https://yandex.ru/jobs/vacancies/разработчик-интерфейсов-в-финансовые-продукты-hr-tech-24409\nЗП: не обсуждали \nВопросы:\n1.Задача \n- Создать функцию которая предназначена для составления маршрута по предоставленным билетам. Она принимает массив билетов tickets, каждый из которых содержит информацию о маршруте от пункта отправления (from) до пункта назначения (to). Примерное решение:\n\n  const fromMap = {};\n  const toMap = {};\n\n  ...",
        "full_content": "2024-11-17 08:20:07\n Вадим -> 2071074234:\nКомпания: Яндекс\nВакансия: https://yandex.ru/jobs/vacancies/разработчик-интерфейсов-в-финансовые-продукты-hr-tech-24409\nЗП: не обсуждали \nВопросы:\n1.Задача \n- Создать функцию которая предназначена для составления маршрута по предоставленным билетам. Она принимает массив билетов tickets, каждый из которых содержит информацию о маршруте от пункта отправления (from) до пункта назначения (to). Примерное решение:\n\n  const fromMap = {};\n  const toMap = {};\n\n  // Создаем карты маршрутов\n  tickets.forEach(ticket => {\n    fromMap[ticket.from] = ticket;\n    toMap[ticket.to] = ticket;\n  });\n\n  // Определяем начальную точку\n  let startName = null;\n  let currentTicket = null;\n  for (const ticket of tickets) {\n    const name = ticket.from;\n    if (!(name in toMap)) {\n      startName = name;\n      currentTicket = ticket;\n      break;\n    }\n  }\n\n  // Построение полного маршрута\n  const result = [currentTicket];\n  while (result.length < tickets.length) {\n    const prev = result[result.length - 1];\n    const next = fromMap[prev.to];\n    result.push(next);\n  }\n\n  return result;\n}\n\n2.Задача: создать функцию, которая преобразует массив чисел в строку, представляющую диапазоны чисел из входного массива.\nПримерное решение: \n\n.sort((a, b) => a - b)\n.reduce((agg, v) => {\nconst currRange = agg[agg.length - 1]\nif (!currRange || v > currRange.last + 1) {\nagg.push({first: v, last: v})\n} else {\ncurrRange.last = v\n}\nreturn agg\n}, [])\n.map(v => v.first + (v.first !== v.last ? '-' + v.last : '')).join()"
      },
      {
        "timestamp": "2024-11-15 14:16:36",
        "content": "2024-11-15 14:16:36\n Sergey Chizhikov -> 2071074234:\nКомпания: Яндекс(2 этап)\nВакансия: Написала hr\nЗадачи:\nfunction range(start, stop, step = 1) {\nif (stop === undefined) {\nstop = start;\nstart = 0;\n}\n\nconst result = [];\nif (step > 0) {\nfor (let i = start; i < stop; i += step) {\nresult.push(i);\n}\n} else if (step < 0) {\nfor (let i = start; i > stop; i += step) {\nresult.push(i);\n}\n}\n\nreturn result;\n}\n\n function compress(list) {\nif (list.length === 0) return '';\n\nlist.sort((a, b) => a - b);\n\nlet re...",
        "full_content": "2024-11-15 14:16:36\n Sergey Chizhikov -> 2071074234:\nКомпания: Яндекс(2 этап)\nВакансия: Написала hr\nЗадачи:\nfunction range(start, stop, step = 1) {\nif (stop === undefined) {\nstop = start;\nstart = 0;\n}\n\nconst result = [];\nif (step > 0) {\nfor (let i = start; i < stop; i += step) {\nresult.push(i);\n}\n} else if (step < 0) {\nfor (let i = start; i > stop; i += step) {\nresult.push(i);\n}\n}\n\nreturn result;\n}\n\n function compress(list) {\nif (list.length === 0) return '';\n\nlist.sort((a, b) => a - b);\n\nlet result = [];\nlet start = list[0];\nlet end = start;\n\nfor (let i = 1; i <= list.length; i++) {\nif (list[i] === end + 1) {\nend = list[i];\n} else {\nif (start === end) {\nresult.push(start);\n} else {\nresult.push(`${start}-${end}`);\n}\nstart = list[i];\nend = start;\n}\n}\n\nreturn result.join(',');\n}\n\n function getRoute(tickets = []) {\n// Создаем Map для хранения маршрутов и Set для хранения всех пунктов назначения\nconst map = new Map();\nconst destinationSet = new Set();\n\n// Заполняем карту и множество всех пунктов назначения\ntickets.forEach(ticket => {\n// Добавляем в карту маршрут: ключ - пункт отправления, значение - пункт назначения\nmap.set(ticket.from, ticket.to);\n// Добавляем пункт назначения в множество, чтобы отслеживать все назначения\ndestinationSet.add(ticket.to);\n});\n\n// Определяем начальную точку маршрута\nlet start = null;\n\n// Ищем пункт отправления, который не является пунктом назначения\ntickets.forEach(ticket => {\n// Если пункт отправления не находится в множестве пунктов назначения, это начальная точка\nif (!destinationSet.has(ticket.from)) {\nstart = ticket.from;\n}\n});\n\n// Восстанавливаем маршрут\nconst route = [];\nlet current = start;\n\n// Пока есть следующий пункт назначения в карте\nwhile (map.has(current)) {\n// Получаем следующий пункт назначения из карты\nconst next = map.get(current);\n// Добавляем объект маршрута в результирующий массив\nroute.push({ from: current, to: next });\n// Переходим к следующему пункту\ncurrent = next;\n}\n\n// Возвращаем восстановленный маршрут\nreturn route;\n}"
      },
      {
        "timestamp": "2024-11-14 19:35:55",
        "content": "2024-11-14 19:35:55\n Maksim -> 2071074234:\nЯндекс (1этап) (меня собесили в яндекс музыку)                                                                                                                                                                                                                           Вакансия:Hr сама написала                                                                                                                                                                       ...",
        "full_content": "2024-11-14 19:35:55\n Maksim -> 2071074234:\nЯндекс (1этап) (меня собесили в яндекс музыку)                                                                                                                                                                                                                           Вакансия:Hr сама написала                                                                                                                                                                                                  Вопросы:                                                                                                                                                                                                                                                                       - Расскажи про опыт                                                                                                                                                                                                                           - Про Promise                                                                                                                                                                                                                                         - Про Event bubbling                                                                                                                                                                                                                 Задачи:                                                                                                                                                                                                                                                        - Стандартная задача какого цвета будет <div> : Оба дива будут синими.\n\nВ CSS, когда у элемента несколько классов, приоритет имеют стили, указанные позже. Поскольку .blue определяется после .red, стили .blue будут применяться ко всем элементам, поэтому оба дива будут с синим фоном.                                                                               - \nfunction canGetCount(n) {\n    let count = 0;\n    return function() {\n        if (count < n) {\n            count++;\n            return 'yes';\n        } else {\n            return 'no';\n        }\n    };\n}\n- \nPromise.resolve(1)\n    .then(x => x + 1)                   // x = 1, возвращает 2\n    .then(x => { throw x })             // выбрасывает ошибку со значением 2\n    .then(x => console.log(x))          // пропускается, так как была ошибка\n    .catch(err => console.log(err))     // ловит ошибку и выводит 2 в консоль\n    .then(x => Promise.resolve(1))      // возвращает промис, который резолвится в 1\n    .catch(err => console.log(err))     // пропускается, так как нет ошибки\n    .then(x => console.log(x));         // выводит 1 в консоль\n- \nfunction isValid(str) {\n  const stack = [];\n  const brackets = {\n    '(': ')',\n    '{': '}',\n    '[': ']'\n  };\n\n  for (let char of str) {\n    if (brackets[char]) {\n      // если открывающая скобка, добавляем в стек\n      stack.push(char);\n    } else if (Object.values(brackets).includes(char)) {\n      // если закрывающая скобка, проверяем соответствие\n      if (brackets[stack.pop()] !== char) {\n        return false;\n      }\n    }\n  }\n\n  // если стек не пуст, значит есть незакрытые скобки\n  return stack.length === 0;\n}"
      },
      {
        "timestamp": "2024-11-12 18:31:49",
        "content": "2024-11-12 18:31:49\n Гладких Александр -> 2071074234:\nКомпания Яндекс Фантех 2 этап \nВакансия hr сама написала\nЗП: не обсуждали\n\nВопросов не было сразу задачи\n\nзадачи \n\n1 задача\n\nfunction namespace(str) {\n    // Разделяем входную строку по символу точки, чтобы получить массив ключей\n    const keys = str.split('.');\n\n    // Инициализируем результирующий объект\n    let result = {};\n\n    // Инициализируем переменную для отслеживания текущего уровня вложенности\n    let currentLevel = result;\n\n    //...",
        "full_content": "2024-11-12 18:31:49\n Гладких Александр -> 2071074234:\nКомпания Яндекс Фантех 2 этап \nВакансия hr сама написала\nЗП: не обсуждали\n\nВопросов не было сразу задачи\n\nзадачи \n\n1 задача\n\nfunction namespace(str) {\n    // Разделяем входную строку по символу точки, чтобы получить массив ключей\n    const keys = str.split('.');\n\n    // Инициализируем результирующий объект\n    let result = {};\n\n    // Инициализируем переменную для отслеживания текущего уровня вложенности\n    let currentLevel = result;\n\n    // Перебираем ключи\n    for (let i = 0; i < keys.length; i++) {\n        // Создаем новый объект для текущего ключа\n        currentLevel[keys[i]] = {};\n\n        // Перемещаем текущий уровень на новый созданный объект\n        currentLevel = currentLevel[keys[i]];\n    }\n\n    // Возвращаем итоговый вложенный объект\n    return result;\n}\n\n// Пример использования:\nconsole.log(namespace('a.b.c.d.e'));\n// Вывод: { a: { b: { c: { d: { e: {} } } } } }\n\n\n2 задача \n\n\nfunction compress(list) {\n    // Сортируем массив\n    list.sort((a, b) => a - b);\n\n    // Инициализируем массив для хранения диапазонов\n    let ranges = [];\n\n    // Инициализируем переменные для текущего диапазона\n    let start = list[0];\n    let end = list[0];\n\n    // Функция для добавления диапазона в массив ranges\n    function addRange() {\n        if (start === end) {\n            ranges.push(start.toString());\n        } else {\n            ranges.push(start + '-' + end);\n        }\n    }\n\n    // Перебираем массив, начиная со второго элемента\n    for (let i = 1; i < list.length; i++) {\n        if (list[i] === end + 1) {\n            // Если текущий элемент следует за предыдущим, обновляем конец диапазона\n            end = list[i];\n        } else {\n            // Если текущий элемент не следует за предыдущим, добавляем текущий диапазон в массив диапазонов\n            addRange();\n            // Начинаем новый диапазон\n            start = list[i];\n            end = list[i];\n        }\n    }\n\n    // Добавляем последний диапазон\n    addRange();\n\n    // Возвращаем строку, объединяя диапазоны запятыми\n    return ranges.join(',');\n}\n\n// Примеры использования:\nconsole.log(compress([1, 4, 5, 2, 3, 9, 8, 11, 0])); // '0-5,8-9,11'\nconsole.log(compress([1, 4, 3, 2])); // '1-4'\nconsole.log(compress([1, 4])); // '1,4'\nconsole.log(compress([1, 2])); // '1-2'\n\n\n3 задача\n\nfunction range(start, stop, step) {\n    // Определяем значения по умолчанию для start, stop и step\n    if (arguments.length === 1) {\n        // Если передан только один аргумент, он считается stop, start = 0, step = 1\n        stop = start;\n        start = 0;\n        step = 1;\n    } else if (arguments.length === 2) {\n        // Если передано два аргумента, они считаются start и stop, step = 1\n        step = 1;\n    }\n\n    // Инициализируем массив для хранения результата\n    let result = [];\n\n    // Определяем направление итерации\n    if (step > 0) {\n        // Если step положительный, итерируем от start до stop с шагом step\n        for (let i = start; i < stop; i += step) {\n            result.push(i);\n        }\n    } else {\n        // Если step отрицательный, итерируем от start до stop с шагом step\n        for (let i = start; i > stop; i += step) {\n            result.push(i);\n        }\n    }\n\n    // Возвращаем массив с результатом\n    return result;\n}\n\n// Примеры использования:\nconsole.log(range(10)); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log(range(1, 11)); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconsole.log(range(0, 30, 5)); // [0, 5, 10, 15, 20, 25]\nconsole.log(range(0, 10, 3)); // [0, 3, 6, 9]\nconsole.log(range(0)); // []\nconsole.log(range(-6)); // []\nconsole.log(range(-6, 0)); // [-6, -5, -4, -3, -2, -1]\nconsole.log(range(-6, 0, 2)); // [-6, -4, -2]\nconsole.log(range(0, -10, -2)); // [0, -2, -4, -6, -8]"
      },
      {
        "timestamp": "2024-11-11 10:58:30",
        "content": "2024-11-11 10:58:30\n Ivan -> 2071074234:\nКомпания: Яндекс\nЗП: 220\nВопросы: \nСпрашивал про технологии, которыми пользуешься, про опыт\nЗадачи:\nvar str = 'qwerty';\nstr[0] = '$';\n\nconsole.log(str);\n\n// Что произойдет в консоли после выполнения следующего фрагмента кода?\n\nvar i = 10;\nvar array = [];\n\n// const a = --i;\n\nwhile (i--) {\n    let b = i\n    array.push(function() {\n      return b + b;\n    });\n}\n\nconsole.log([\n    array[0](), \n    array[1](), \n]);\n\n\n/**\n * Нужно написать функцию get. На вход ...",
        "full_content": "2024-11-11 10:58:30\n Ivan -> 2071074234:\nКомпания: Яндекс\nЗП: 220\nВопросы: \nСпрашивал про технологии, которыми пользуешься, про опыт\nЗадачи:\nvar str = 'qwerty';\nstr[0] = '$';\n\nconsole.log(str);\n\n// Что произойдет в консоли после выполнения следующего фрагмента кода?\n\nvar i = 10;\nvar array = [];\n\n// const a = --i;\n\nwhile (i--) {\n    let b = i\n    array.push(function() {\n      return b + b;\n    });\n}\n\nconsole.log([\n    array[0](), \n    array[1](), \n]);\n\n\n/**\n * Нужно написать функцию get. На вход функция принимает объект и путь до поля объекта. \n * Путь – это строка, разделенная точкой. Функция должна вернуть соответствующее поле объекта. \n * Запрашиваемого поля в объекте может не быть.\n */\n\nfunction get(obj, path) {\n    const keys = path.split('.');\n    let result = obj;\n\n    for (let key of keys){\n        if(typeof result === 'object' && result !== null && key in result){\n            result = result[key]\n        }else{\n             return undefined\n        }\n    }\n    return result;\n}\n\nconst obj = { \n  a: { \n    b: { \n      c: 'd' \n    },\n    e: 'f',\n    g: ['h', 'i', 'j']\n  }\n};\n\nget(obj, 'a.b');   // { c : 'd' }\nget(obj, 'a.b.c'); // 'd'\nget(obj, 'a.e');   // 'f'\nget(obj, 'a.x.e'); // undefined\nget(obj, 'a.g.1'); // 'i'"
      },
      {
        "timestamp": "2024-11-10 02:10:14",
        "content": "2024-11-10 02:10:14\n Sergey Chizhikov -> 2071074234:\nкомпания: яндекс\nВакансия: нет, написала hr\nВопросов не было\n\nЗадачи:\n// 1\n\nfunction strJoin(separator, ...arr){\n    return arr.join(separator)\n}\n\n\n//==============================================================================\n\n// 2\n\nfunction sleep(duration){\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve()\n        }, duration)\n    })\n}\n\n//===================================================================...",
        "full_content": "2024-11-10 02:10:14\n Sergey Chizhikov -> 2071074234:\nкомпания: яндекс\nВакансия: нет, написала hr\nВопросов не было\n\nЗадачи:\n// 1\n\nfunction strJoin(separator, ...arr){\n    return arr.join(separator)\n}\n\n\n//==============================================================================\n\n// 2\n\nfunction sleep(duration){\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve()\n        }, duration)\n    })\n}\n\n//==============================================================================\n\n// 3\n\nArray.prototype.groupBy = function(callback){\n    return this.reduce((acc, item) => {\n        let key = callback(item)\n        \n        if(!acc[key]){\n            acc[key] = [item]\n        } else {\n            acc[key].push(item)\n        }\n        \n        return acc\n    }, {})\n}\n\n//==============================================================================\n\n// 4\n\nfunction get(url, count = 5){\n    return (\n        fetch(url)\n        .then(response => {\n            return response.json()\n        })\n        .catch(() => {\n            if (count > 0){\n                return get(url, count-1)\n            } else {\n                trow new Error('Заданный урл недоступен')\n            }\n        })\n    )\n               \n}\n\n//==============================================================================\n\n// 5\n\nfunction camelToSnake(text){\n    let result = []\n    for (let i=0; i < text.length; i++){\n        if (i === 0) {\n            result.push(text[0].toLowerCase())\n        } else {\n            if (text[i] === text[i].toUpperCase()) {\n                result.push(`_${text[i].toLowerCase()}`)\n            }   else {\n                result.push(text[i])\n            }\n        }\n    }\n    return result.join('')\n}\n\n\n//==============================================================================\n\n// 6\n\nfunction callLimit(fn, limit, callback) {\n    let callCount = 0\n    \n    function limitedFn(...args){\n        callCount++\n        \n        if (callCount <= limit){\n            \n            return fn.applay(this, args)\n            \n            if (callCount === limit && callback){\n                \n                callback()\n            }\n        }\n        \n        return null\n        \n    }\n    \n    limitedFn.reset = () => {\n            callCount = 0\n    }\n    \n    return limitedFn\n}"
      },
      {
        "timestamp": "2024-10-30 13:20:30",
        "content": "2024-10-30 13:20:30\n Гладких Александр -> 2071074234:\nЯндекс (фантех) 1 этап\nзп: не обсуждалось                                                                                                                          вакансия: hr сама написала                                                                                                                      \n1. задача на контекст\n\nconst obj = {\n  value: '42',\n  foo: function () {\n    function type() {\n      return typeof this.value; \n      \n   ...",
        "full_content": "2024-10-30 13:20:30\n Гладких Александр -> 2071074234:\nЯндекс (фантех) 1 этап\nзп: не обсуждалось                                                                                                                          вакансия: hr сама написала                                                                                                                      \n1. задача на контекст\n\nconst obj = {\n  value: '42',\n  foo: function () {\n    function type() {\n      return typeof this.value; \n      \n    }\n    console.log(${42} is ${type()});\n  }\n}\n\nobj.foo()\n\nчто выведет консоль как исправить чтобы было 42 is string\n\n\n2. задача \n\nНеобходимо реализовать метод groupBy, расширяющий стандарные\nметоды массивов. Метод должен возвращать сгруппированную \nверсию массива - объект, в котором каждый ключ является результатом\nвыполнения переданой функции fn(arr[i]), а каждое значение - массивом\nсодержащим все элементы исходного массива с этим ключом\n\nArray.prototype.groupBy = function(callback) {\n  return this.reduce((acc, item) => {\n    let key = [callback(item)]\n    if(!acc[key]) {\n      acc[key] = [item]\n    } else {\n      acc[key].push(item)\n    }\n    return acc\n  }, {})\n}\n\nconst array1 = [\n  {id: 1},\n  {id: 1},\n  {id: 2}\n]\nconst fn = (item) => item.id;\n\nconsole.log(array1.groupBy(fn))\n\n3. Задача\n\nchekResult(url1, solution) и chekResult(url2, solution)  возвращают Promise<boolean>\nВыполните оба запроса и обработайте их результаты\nЕсли хотя бы один запрос возвращает ошибку, выведите в консоль сообщение 'error'.\nЕсли оба запроса выполняются успешно, но хотя бы один из них возвращает false, выведите сообщение 'fail'.\nЕсли оба запроса выполняются успешно и оба возвращают true, выведите сообщение 'success'.\nЕсли ни один из запросов не завершился за 1000 миллисекунд, выведите 'timeout'.\n\nPromise.all([\n  checkResult(url1, solution).catch(() => 'error'),\n  checkResult(url2, solution).catch(() => 'error')\n])\n  .then(results => {\n    if (results.includes('error')) {\n      console.log('error');\n    } else if (results.includes(false)) {\n      console.log('fail');\n    } else {\n      console.log('success');\n    }\n  })\n  .catch(() => {\n    console.log('timeout');\n  });\n\n// Добавление таймаута\nconst timeout = new Promise((_, reject) => \n  setTimeout(() => reject(new Error('timeout')), 1000)\n);\n\nPromise.race([\n  Promise.allSettled([\n    checkResult(url1, solution),\n    checkResult(url2, solution)\n  ]),\n  timeout\n])\n  .then(results => {\n    if (results === 'timeout') {\n      console.log('timeout');\n    } else {\n      const statuses = results.map(r => r.status === 'fulfilled' && r.value);\n      if (statuses.includes(false)) {\n        console.log('fail');\n      } else if (statuses.includes(true)) {\n        console.log('success');\n      } else {\n        console.log('error');\n      }\n    }\n  })\n  .catch(() => {\n    console.log('timeout');\n  });\n\n\n4. Задача\nНапишите функцию, которая принимает массив чисел и возвращает новый массив,\n в котором все нечетные числа отсортированы по возрастанию, сохраняя при этом\n свои оригинальные позиции среди четных чисел.\n\n\nfunction sortOdds(arr) {\n  // Извлекаем все нечетные числа из массива\n  const odds = arr.filter(num => num % 2 !== 0);\n\n  // Сортируем нечетные числа по возрастанию\n  odds.sort((a, b) => a - b);\n\n  // Создаем новый массив, заменяя нечетные числа отсортированными\n  return arr.map(num => (num % 2 !== 0 ? odds.shift() : num));\n}"
      },
      {
        "timestamp": "2024-10-29 10:27:52",
        "content": "2024-10-29 10:27:52\n Вадим -> 2071074234:\nКомпания: Яндекс \nЗп: не обсуждали \nВакансия: hr написала\nВопросы: \n- были задачи на promise\n- создать свой метод some для массива\n- создать функцию которая делает определенное количество перезапросов, когда запрос возвращался с ошибкой\n- задача на попрание this \nПараллельно спрашивал все что знаю по этим темам",
        "full_content": "2024-10-29 10:27:52\n Вадим -> 2071074234:\nКомпания: Яндекс \nЗп: не обсуждали \nВакансия: hr написала\nВопросы: \n- были задачи на promise\n- создать свой метод some для массива\n- создать функцию которая делает определенное количество перезапросов, когда запрос возвращался с ошибкой\n- задача на попрание this \nПараллельно спрашивал все что знаю по этим темам"
      },
      {
        "timestamp": "2024-10-25 14:54:40",
        "content": "2024-10-25 14:54:40\n Artyom Sozykin -> 2071074234:\nКомпания: Яндекс (2 этап технический) JFoRecruitment\nЗП: 250к\nВакансия: https://hh.ru/vacancy/108013960?hhtmFrom=employer_vacancies\n\nЗадача 1:\nУсловия такие, что нужно решить более быстрым алгоритмом чем O(n^2)\n\nconst prices = [k, 3, 5, 8, 7, 6];\nfunction getIcecream (amount)\n}\nconsole. log (getIcecream (10)); // [0, 31 или [ 1, 4] и т.п.\n\nРешение: через хешмап и перебор массива\n\nЗадача 2: \nНеобходимо написать компонент ProfilePage\n\nРешение: нап...",
        "full_content": "2024-10-25 14:54:40\n Artyom Sozykin -> 2071074234:\nКомпания: Яндекс (2 этап технический) JFoRecruitment\nЗП: 250к\nВакансия: https://hh.ru/vacancy/108013960?hhtmFrom=employer_vacancies\n\nЗадача 1:\nУсловия такие, что нужно решить более быстрым алгоритмом чем O(n^2)\n\nconst prices = [k, 3, 5, 8, 7, 6];\nfunction getIcecream (amount)\n}\nconsole. log (getIcecream (10)); // [0, 31 или [ 1, 4] и т.п.\n\nРешение: через хешмап и перебор массива\n\nЗадача 2: \nНеобходимо написать компонент ProfilePage\n\nРешение: написал через три useEffecta в первом onmount загрузил токен, второй useEffect делал запросы в api, где аргументом требовался только токен, третий useEffect в deps на получение userData делать запрос в ordersApi. Описал обработку ошибки через true / false\n\nВ конце были вопросы о том как можно по другому сделать:\n 1. Вынести каждый useEffect в отдельный хук\n 2. Написать в одном fetch запросе через then или await каждый из запросов в нужно порядке\n\nЧто если бы был throw new Error, как сделать страницу ErrorBoundary?"
      },
      {
        "timestamp": "2024-10-20 09:56:24",
        "content": "2024-10-20 09:56:24\n Artyom Sozykin -> 2071074234:\nКомпания: JFoRecruitment (Яндекс)\nВакансия https://hh.ru/vacancy/108013960?hhtmFrom=employer_vacancies\nЗП: 250к\nВопросы на первом собесе:\n1) Какие мета теги знаешь\n2) Для чего нужны метатеги\n3) Назови все стандартные хуки в React\nОстальные вопросы по платине\n\nВторой собес: \n1) Какие типы данных бывают\n2) Что какие еще есть коллекции, кроме map и set\n3) Какие методы запросов бывают\n4) По каким параметрам ограничивает CORS\n5) Задачка на event loop...",
        "full_content": "2024-10-20 09:56:24\n Artyom Sozykin -> 2071074234:\nКомпания: JFoRecruitment (Яндекс)\nВакансия https://hh.ru/vacancy/108013960?hhtmFrom=employer_vacancies\nЗП: 250к\nВопросы на первом собесе:\n1) Какие мета теги знаешь\n2) Для чего нужны метатеги\n3) Назови все стандартные хуки в React\nОстальные вопросы по платине\n\nВторой собес: \n1) Какие типы данных бывают\n2) Что какие еще есть коллекции, кроме map и set\n3) Какие методы запросов бывают\n4) По каким параметрам ограничивает CORS\n5) Задачка на event loop\n6) Задача на переписывание todo c классового компонента на функциональный \n\nОбратная связь 23.10 будет"
      },
      {
        "timestamp": "2024-10-19 18:52:30",
        "content": "2024-10-19 18:52:30\n memphis -> 2071074234:\n-компния IBS\n-вакансия: в лс написала hr\n-зп: от 200\n\n-Вопросы\n1) == vs ===\n2) true + 1 + \"909\" что будет?\n3) \"909\" + true + 1 что будет?\n4) var let const - чем отличаются друг от друга\n5) отличая function declaration от function arrow\n6) for in и for of что это и как работают?\n7) что знаешь про prototype?\n8) как добавить метод в прототип?\n-Лайв код\n не сохранился яндекс код а вручную долго все переписывать(, все есть на записи\n\n-Успех собеса: 🟢\n-Фидбэ...",
        "full_content": "2024-10-19 18:52:30\n memphis -> 2071074234:\n-компния IBS\n-вакансия: в лс написала hr\n-зп: от 200\n\n-Вопросы\n1) == vs ===\n2) true + 1 + \"909\" что будет?\n3) \"909\" + true + 1 что будет?\n4) var let const - чем отличаются друг от друга\n5) отличая function declaration от function arrow\n6) for in и for of что это и как работают?\n7) что знаешь про prototype?\n8) как добавить метод в прототип?\n-Лайв код\n не сохранился яндекс код а вручную долго все переписывать(, все есть на записи\n\n-Успех собеса: 🟢\n-Фидбэк от hr: позвали на созвон с руководителем\n\nзапись: https://youtu.be/PBtR9CuK6Xc"
      },
      {
        "timestamp": "2024-10-11 13:08:27",
        "content": "2024-10-11 13:08:27\n Михаил -> 2071074234:\nЯндекс (фАнтех) 2 секция (алгосы)\nвакансия - HR сама написала\nпо факту нужно было самостоятельно реализовать addEventListener и dispatchEvent",
        "full_content": "2024-10-11 13:08:27\n Михаил -> 2071074234:\nЯндекс (фАнтех) 2 секция (алгосы)\nвакансия - HR сама написала\nпо факту нужно было самостоятельно реализовать addEventListener и dispatchEvent"
      },
      {
        "timestamp": "2024-10-09 13:32:54",
        "content": "2024-10-09 13:32:54\n Timofei Syromiatnikov -> 2071074234:\n— Название: Яндекс (Multitrack, 1 этап JS задачи)\n— Вакансия: написала hr\n— Вопросов не было\n— Задачи (по всем задачам нужно рассуждать почему именно такой ответ, что ты думаешь, почему именно такое решение хочешь сделать. Обработать всевозможные ошибки, или хотябы обсудить потенциальные):\n\n1) Надо сделать функцию get, которая принимает в себя объект и строку. И отдает найденное значение. Строкой является путь ключей через точку, по котор...",
        "full_content": "2024-10-09 13:32:54\n Timofei Syromiatnikov -> 2071074234:\n— Название: Яндекс (Multitrack, 1 этап JS задачи)\n— Вакансия: написала hr\n— Вопросов не было\n— Задачи (по всем задачам нужно рассуждать почему именно такой ответ, что ты думаешь, почему именно такое решение хочешь сделать. Обработать всевозможные ошибки, или хотябы обсудить потенциальные):\n\n1) Надо сделать функцию get, которая принимает в себя объект и строку. И отдает найденное значение. Строкой является путь ключей через точку, по которым мы хотим дойти до значения в объекте.\nconst get = (obj, path) => {}\n\nconst obj = {\n  a: 'f',\n  b: {\n    k: {\n      m: '123'\n    }\n  },\n  c: {\n    d: '3'\n  },\n  e: ['111, '222', '333']\n}\n\nconsole.log(get(obj, 'a') // f\nconsole.log(get(obj, 'b.k.m') //'123'\nconsole.log(get(obj, 'c.d.c') // undefined\nconsole.log(get(obj, 'e.1') // '111'\n2) Что выведет, почему, и как пофиксить (чтобы -2 не выводился).\nvar i = 10;\nvar array = []\n\nwhile(i--) {\n  array.push(function() {\n    return i + i\n  })\n}\n\nconsole.log(array[0]()) // -2\nconsole.log(array[1]()) // -2\n3) У нас есть синхронная функция asyncAuth, которая принимает в себя колбек, и отдает ему 2 аргумента: 1 - потенциальная ошибка (если нет вернет undefined), 2 - актуальные данные, если ошибки нет.\n1 Условие:  напиши функцию auth, которая выполняет функцию asyncAuth, и возвращает Promise с актуальными данными или ошибкой.\n2 Условие: напиши функцию tryAuth(n), которая принимает 1 аргумент, являющимся числом попыток выполнения auth функции если она вернула ошибку при первом выполнении.\nfunction asyncAuth(callback) {...}"
      },
      {
        "timestamp": "2024-10-03 13:28:47",
        "content": "2024-10-03 13:28:47\n Михаил -> 2071074234:\nЯндекс (фАнтех) 1 секция (задачки с кодеварс)\nвакансия - HR сама написала\nзп 200к",
        "full_content": "2024-10-03 13:28:47\n Михаил -> 2071074234:\nЯндекс (фАнтех) 1 секция (задачки с кодеварс)\nвакансия - HR сама написала\nзп 200к"
      },
      {
        "timestamp": "2024-09-26 16:58:55",
        "content": "2024-09-26 16:58:55\n Dispersioned -> 2071074234:\nЯндекс маркет 2 этап (алгоритмы)\nЗП: >320net\nЗадачи: на фото, решения на записи\nУспех: успешно ✅\nФидбек: https://t.me/c/2071074234/489/67496",
        "full_content": "2024-09-26 16:58:55\n Dispersioned -> 2071074234:\nЯндекс маркет 2 этап (алгоритмы)\nЗП: >320net\nЗадачи: на фото, решения на записи\nУспех: успешно ✅\nФидбек: https://t.me/c/2071074234/489/67496"
      },
      {
        "timestamp": "2024-09-24 11:43:27",
        "content": "2024-09-24 11:43:27\n Dispersioned -> 2071074234:\nЯндекс маркет 1 этап (vanilla js)\nСсылка на вакансию: нет, по рефералке\nЗП: >320net\nЗадача: спроектировать реактивный атом. По мере выполнения задачи условия дополняются\nУсловие 1: на картинке\nУсловие 2: теперь атом должен принимать и функции-инициализаторы. Перерасчёт такого атома происходит при вызове\natom.update()\nУсловие 3. Функции могут быть асинхронными (aka Promise).\nУсловие 4. Функциональные или promise атомы получают в параметры функции-и...",
        "full_content": "2024-09-24 11:43:27\n Dispersioned -> 2071074234:\nЯндекс маркет 1 этап (vanilla js)\nСсылка на вакансию: нет, по рефералке\nЗП: >320net\nЗадача: спроектировать реактивный атом. По мере выполнения задачи условия дополняются\nУсловие 1: на картинке\nУсловие 2: теперь атом должен принимать и функции-инициализаторы. Перерасчёт такого атома происходит при вызове\natom.update()\nУсловие 3. Функции могут быть асинхронными (aka Promise).\nУсловие 4. Функциональные или promise атомы получают в параметры функции-инициализатора колбэк getter. Если мы вызываем внутри функции этот getter, то атом автоматически пересчитывается, без вызова\natom.update()\n\nПримечание: интервьювер опоздал минут на 10 и заботливо спиздил их у тайминга собеса)\nУспех: успешно, позвали на алгосы\nФидбек: https://t.me/c/2071074234/489/65809"
      },
      {
        "timestamp": "2024-09-24 04:05:46",
        "content": "2024-09-24 04:05:46\n Анжелика -> 2071074234:\n- Яндекс Маркет 2й тех этап Алгоритмы\n- 200-220\n- было 2 обязательные задачки( а дальше бы дали если нужен грейд выше)\nважно словами сначала рассказать как будешь делать, оценить сложность(каждое действие в задачке) и приступать. Алгоритм потребовался только в сортировке.\n- успех: ✅",
        "full_content": "2024-09-24 04:05:46\n Анжелика -> 2071074234:\n- Яндекс Маркет 2й тех этап Алгоритмы\n- 200-220\n- было 2 обязательные задачки( а дальше бы дали если нужен грейд выше)\nважно словами сначала рассказать как будешь делать, оценить сложность(каждое действие в задачке) и приступать. Алгоритм потребовался только в сортировке.\n- успех: ✅"
      },
      {
        "timestamp": "2024-09-19 12:12:36",
        "content": "2024-09-19 12:12:36\n Intetsu -> 2071074234:\n-Яндекс маркет 1ый тех этап\n-220\n-1 задачка\n- фидбек жду",
        "full_content": "2024-09-19 12:12:36\n Intetsu -> 2071074234:\n-Яндекс маркет 1ый тех этап\n-220\n-1 задачка\n- фидбек жду"
      },
      {
        "timestamp": "2024-09-14 16:04:39",
        "content": "2024-09-14 16:04:39\n Анжелика -> 2071074234:\n- Яндекс маркет 1ый тех этап\n- 200-220\n- была 1 задачка, менялись тесты и добавлялись условия. Сначала то что на скрине, потом добавить возможность передавать функцию, потом промис, последнюю не решила\n- успех ✅",
        "full_content": "2024-09-14 16:04:39\n Анжелика -> 2071074234:\n- Яндекс маркет 1ый тех этап\n- 200-220\n- была 1 задачка, менялись тесты и добавлялись условия. Сначала то что на скрине, потом добавить возможность передавать функцию, потом промис, последнюю не решила\n- успех ✅"
      },
      {
        "timestamp": "2024-09-10 14:43:09",
        "content": "2024-09-10 14:43:09\n Denis -> 2071074234:\nНазвание: Яндекс.такси\nВакансия: написала hr\nЗП: 300+\nВопросы:\nАлгоритмы only.\n\n1. Написать функцию join через rest параметры в аргументах\nfunction strjoin(separator, ...strings) {\n  let result = ''; // Инициализируем пустую строку\n\n  for (let i = 0; i < strings.length; i++) {\n    if (i > 0) {\n      result += separator; // Добавляем разделитель перед каждым элементом, начиная со второго\n    }\n    result += strings[i]; // Добавляем текущий элемент\n  }\n\n  ...",
        "full_content": "2024-09-10 14:43:09\n Denis -> 2071074234:\nНазвание: Яндекс.такси\nВакансия: написала hr\nЗП: 300+\nВопросы:\nАлгоритмы only.\n\n1. Написать функцию join через rest параметры в аргументах\nfunction strjoin(separator, ...strings) {\n  let result = ''; // Инициализируем пустую строку\n\n  for (let i = 0; i < strings.length; i++) {\n    if (i > 0) {\n      result += separator; // Добавляем разделитель перед каждым элементом, начиная со второго\n    }\n    result += strings[i]; // Добавляем текущий элемент\n  }\n\n  return result; // Возвращаем итоговую строку\n}\n\n2.  Написать функцию имитирующую задержку в мс. Почему она не факт что выполниться ровно через заданное время?\nfunction sleep(duration) {\n  // Возвращаем новый промис, который разрешается после задержки\n  return new Promise((resolve) => {\n    // setTimeout вызывает resolve после заданного количества миллисекунд (duration)\n    setTimeout(resolve, duration);\n  });\n}\n\nconst startTime = Date.now(); // Сохраняем текущее время в миллисекундах\n\nsleep(100) // Задаем задержку в 100 миллисекунд\n  .then(() => {\n    // Когда промис разрешится, вычисляем прошедшее время\n    console.log(Date.now() - startTime); // Выводим разницу времени, которая должна быть около 100 миллисекунд\n  });\n3. Написать функцию groupBy для массива\n// Реализуем метод groupBy для массива\nArray.prototype.groupBy = function(fn) {\n  return this.reduce((result, item) => {\n    // Вычисляем ключ с помощью переданной функции\n    const key = fn(item);\n    \n    // Если ключа еще нет в объекте, создаем массив для этого ключа\n    if (!result[key]) {\n      result[key] = [];\n    }\n    \n    // Добавляем элемент в соответствующую группу\n    result[key].push(item);\n    \n    return result;\n  }, {});\n};\n4.  Написать функцию, которая делает фетч 5 раз, потом кидает ошибку. Можно пользоваться только Promise api, сделать через рекурсию\nfunction fetchWithRetry(url, attempts) {\n  return new Promise((resolve, reject) => {\n    const attemptFetch = (n) => {\n      fetch(url)\n        .then((response) => {\n          if (!response.ok) {\n            // Если ответ не успешен, создаем ошибку\n            throw new Error(`HTTP error! Status: ${response.status}`);\n          }\n          return resolve(response); // Если успешен, возвращаем ответ\n        })\n        .catch((error) => {\n          if (n === 1) {\n            return reject(error); // Если попытки закончились, отклоняем Promise\n          }\n          console.log(`Attempt ${attempts - n + 1} failed. Retrying...`);\n          attemptFetch(n - 1); // Повторяем запрос с уменьшенным количеством попыток\n        });\n    };\n\n    attemptFetch(attempts); // Запускаем с первой попытки\n  });\n}\n\n// Пример использования:\nfetchWithRetry('https://api.example.com/data', 3)\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Request failed:', error));\n\n5. Написать функцию, которая очищает обьект или массив от falsy значений и возвращает новый (без мутации)\nfunction removeFalsyValues(obj) {\n  // Создаем новый объект, не мутируя исходный\n  const newObj = Array.isArray(obj) ? [] : {};\n  \n  // Проходим по всем ключам исходного объекта\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      const value = obj[key];\n      \n      // Если значение — объект, рекурсивно очищаем его\n      if (typeof value === 'object' && value !== null) {\n        const cleanedValue = removeFalsyValues(value);\n        \n        // Если очищенный объект или массив не пустой, добавляем его в новый объект\n        if (Array.isArray(cleanedValue) ? cleanedValue.length > 0 : Object.keys(cleanedValue).length > 0) {\n          newObj[key] = cleanedValue;\n        }\n      } \n      // Если значение не является \"falsy\", добавляем его в новый объект\n      else if (value) {\n        newObj[key] = value;\n      }\n    }\n  }\n  \n  return newObj;\n}\n\n// Пример использования\nconst input = {\n  a: 1,\n  b: false,\n  c: {\n    d: 0,\n    e: {\n      f: '',\n      g: 2\n    },\n    h: undefined\n  },\n  i: null,\n  j: 'hello'\n};\n\nconst result = removeFalsyValues(input);\nconsole.log(result);\n// Вывод: { a: 1, c: { e: { g: 2 } }, j: 'hello' }"
      },
      {
        "timestamp": "2024-09-05 14:16:59",
        "content": "2024-09-05 14:16:59\n Бахтияр -> 2071074234:\n- Название: Яндекс\n- Вакансия: https://t.me/c/2071074234/616/58481\n- ЗП: 280К\n- Этап: 1\n- Задача:\nСоздать атом\n\n// Функция для создания атома состояния\nconst atom = (initialValue) => {\n  let state; // Переменная для хранения текущего состояния\n  let listeners = []; // Массив для хранения функций-слушателей\n\n  // Проверка, является ли начальное значение функцией\n  if (typeof initialValue === \"function\") {\n    state = initialValue(); // Вызываем функцию ...",
        "full_content": "2024-09-05 14:16:59\n Бахтияр -> 2071074234:\n- Название: Яндекс\n- Вакансия: https://t.me/c/2071074234/616/58481\n- ЗП: 280К\n- Этап: 1\n- Задача:\nСоздать атом\n\n// Функция для создания атома состояния\nconst atom = (initialValue) => {\n  let state; // Переменная для хранения текущего состояния\n  let listeners = []; // Массив для хранения функций-слушателей\n\n  // Проверка, является ли начальное значение функцией\n  if (typeof initialValue === \"function\") {\n    state = initialValue(); // Вызываем функцию для получения начального состояния\n    // Проверка на null\n    if (state === null) {\n      throw new Error(\"Возвращаемое значение не может быть null.\");\n    }\n  } else {\n    // Проверка на промис\n    if (initialValue instanceof Promise) {\n      throw new Error(\"it is func or promise\");\n    }\n    state = initialValue; // Присваиваем начальное значение\n  }\n\n  return {\n    // Метод для чтения текущего состояния\n    read() {\n      return state;\n    },\n    // Метод для обновления состояния\n    update() {\n      // Если начальное значение — функция, снова вычисляем состояние\n      if (typeof initialValue === \"function\") {\n        state = initialValue();\n        // Проверка на null\n        if (state === null) {\n          throw new Error(\"Возвращаемое значение не может быть null.\");\n        }\n      }\n      // Уведомляем всех подписчиков об изменении состояния\n      listeners.forEach(listener => listener(state));\n    },\n    // Метод для подписки на изменения состояния\n    subscribe(listener) {\n      listeners.push(listener); // Добавляем слушателя в массив\n      // Возвращаем функцию для отписки\n      return () => {\n        listeners = listeners.filter(l => l !== listener); // Удаляем слушателя\n      };\n    }\n  };\n};\n\n// Объект с постами\nconst POSTS = {\n  42: { id: 42, title: 'rerum perferendis error quia ut eveniet' },\n  43: { id: 43, title: 'tempore ut sint quis recusandae' },\n};\n\n// Создаем атом с начальным значением 42\nconst simpleAtom = atom(42);\n\n// Создаем атом, вычисляемый на основе результата функции\nconst titleAtom = atom(() => {\n  const simpleAtomValue = simpleAtom.read(); // Читаем текущее значение simpleAtom\n  const title = POSTS[simpleAtomValue]?.title; // Получаем заголовок поста по ID\n  // Проверка на null\n  if (!title) {\n    throw new Error(\"Возвращаемое значение не может быть null.\");\n  }\n  return title; // Возвращаем заголовок\n});\n\n// Выводим текущее значение заголовка\nconsole.log(titleAtom.read()); // Вывод: 'rerum perferendis error quia ut eveniet'\n\n// Обновляем значение simpleAtom на 43\nsimpleAtom.update(43);\n\n// Обновляем значение titleAtom на основе нового значения simpleAtom\ntitleAtom.update(); \n\n// Выводим обновленный заголовок\nconsole.log(titleAtom.read()); // Вывод: 'tempore ut sint quis recusandae'"
      },
      {
        "timestamp": "2024-09-05 12:40:14",
        "content": "2024-09-05 12:40:14\n аыеъа -> 2071074234:\n- Название: Linked Helper, финальный этап\n- ЗП: от 4000$+\n- Видео:  https://disk.yandex.ru/d/-gA5NjLIJ8qcZw",
        "full_content": "2024-09-05 12:40:14\n аыеъа -> 2071074234:\n- Название: Linked Helper, финальный этап\n- ЗП: от 4000$+\n- Видео:  https://disk.yandex.ru/d/-gA5NjLIJ8qcZw"
      },
      {
        "timestamp": "2024-08-10 13:00:20",
        "content": "2024-08-10 13:00:20\n Vladimir Latyshev -> 2071074234:\n- Яндекс\n- вакансия - сами нашли\n- ЗП - не обсуждали\nЗАДАЧИ:\n\nзадача 1\n\n// что выведется в консоль\n\nvar n = 1;\n\nfunction f(n) {\n    n = 3;\n}\nf(n);\n\nconsole.log(n); // ??\n\n//\n//\n\nvar obj = { a: 1 };\n\nfunction f1(o) {\n    o.a = 5;\n}\n\nf1(obj);\n\nconsole.log(obj); // ??\n\n//\n//\n\nvar obj = { a: 1 };\n\nfunction f2(o) {\n    o = { hello: 1 };\n}\n\nf2(obj);\n\nconsole.log(obj); // ??\n\n\nзадача 2\n\n/**\n * Необходимо написать асинхронную функцию,\n * которая буде...",
        "full_content": "2024-08-10 13:00:20\n Vladimir Latyshev -> 2071074234:\n- Яндекс\n- вакансия - сами нашли\n- ЗП - не обсуждали\nЗАДАЧИ:\n\nзадача 1\n\n// что выведется в консоль\n\nvar n = 1;\n\nfunction f(n) {\n    n = 3;\n}\nf(n);\n\nconsole.log(n); // ??\n\n//\n//\n\nvar obj = { a: 1 };\n\nfunction f1(o) {\n    o.a = 5;\n}\n\nf1(obj);\n\nconsole.log(obj); // ??\n\n//\n//\n\nvar obj = { a: 1 };\n\nfunction f2(o) {\n    o = { hello: 1 };\n}\n\nf2(obj);\n\nconsole.log(obj); // ??\n\n\nзадача 2\n\n/**\n * Необходимо написать асинхронную функцию,\n * которая будет \"спать\" заданное количество миллисекунд,\n * а потом успешно завершаться\n */\n\nfunction sleep(duration) {\n}\n\nconst startTime = Date.now();\n\nsleep(100)\n    .then(() => console.log(Date.now() - startTime));\n// Выведет примерно 100\n\n//\n//\n//\n//  РЕШЕНИЕ\n\nfunction sleep(duration) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, duration);\n  });\n}\n\nзадача 3\n\nimport asyncAuth from '.';\n\n/**\n * Функция `asyncAuth(callback)` принимает callback, в который может\n * быть передана ошибка (первым аргументом) и данные\n * с бэкенда (вторым аргументом).\n *\n * Вам нужно реализовать функцию `auth()`,\n * которая вызывает `asyncAuth()`, но возвращает Promise.\n *\n * @returns {Promise}\n */\nfunction auth() {\n    asyncAuth((error, data) => {});\n}\n\n//  решение\n\nfunction tryAuth(n) {\n  return new Promise((resolve, reject) => {\n    function attempt(remainingAttempts) {\n      auth()\n        .then(resolve)\n        .catch((error) => {\n          if (remainingAttempts === 0) {\n            reject(error);\n          } else {\n            attempt(remainingAttempts - 1);\n          }\n        });\n    }\n    \n    attempt(n);\n  });\n}\n\n\nзадача 4 - дополнение к предыдущей задаче\n\n/**\n * Функция `tryAuth()` использует `auth()` и, в случае ошибки,\n * совершает N дополнительных попыток.\n *\n * @returns {Promise}\n */\nfunction tryAuth(n) {\n}\n// решение\n\nfunction tryAuth(n) {\n  \n  let res;\n  let isError = true;\n  \n  for (let i = 0; i < n; i++) {\n  \n    res = await auth();\n    \n    res\n    .then((res) => { isError = false; })\n    .catch((error) => { isError = true; })\n    \n    if (!isError) return res;    \n  }\n  \n  return res; \n}\n\nзадача 5\n\n/**\n * Написать декоратор для функции, который ограничивает число вызовов.\n *\n * callLimit(fn, count[, callback]), принимает следующие аргументы:\n * fn - функция, которую декорируем;\n * limit - максимальное число вызовов;\n * callback - вызывается, когда совершен последний вызов. Опционально.\n * У вызываемой функции должен быть метод для перезагрузки счётчика в начальное положение.\n */\n\nfunction callLimit(fn, limit, callback) {\n    // Тут что-то написать\n    \n    let count = 0;\n    let result;\n    \n    const resFunc = function (...args) {\n      \n      if (count < limit) {\n        count++;\n        result = fn(...args);\n        \n        ( count === limit && !!callback && callback() )\n        \n        return result;      \n      } else {\n        return undefined;\n      }\n    }\n    \n    resFunc.reset = function () {\n      count = 0;\n    }\n    \n    return resFunc;\n    \n}\n\nfunction log(title, message) {\n    console.log(title + ': ' + message);\n}\n\nvar logLimited = callLimit(log, 3);\nlogLimited('title1', 'desc');\n// Console output:\n// title1: desc\n\nlogLimited('title2', 'desc');\n// Console output:\n// title2: desc\n\nlogLimited('title3', 'desc');\n// Console output:\n// title3: desc\n\nlogLimited('title4', 'desc'); // Этот не сработает\n// Console output:\n// undefined\n\nlogLimited.reset(); // Перезагрузили счётчик\n\nlogLimited('title5', 'desc');\n// Console output:\n// title5: desc\n\nlogLimited('title6', 'desc');\n// Console output:\n// title6: desc\n\nlogLimited('title7', 'desc');\n// Console output:\n// title7: desc\n\nvar logLimited2 = callLimit(log, 2, () => console.log('finish'));\nlogLimited2('foo', 'bar');\n// Console output:\n// foo: bar\n\nlogLimited2('foo2', 'bar');\n// Console output:\n// foo2: bar\n// finish"
      },
      {
        "timestamp": "2024-07-30 14:49:14",
        "content": "2024-07-30 14:49:14\n Сергей Туманцев -> 2071074234:\nЯндекс\nHR сама написала\n250-280к оклад\nпригласили на следующий этап (это был второй, первый - скрининг)",
        "full_content": "2024-07-30 14:49:14\n Сергей Туманцев -> 2071074234:\nЯндекс\nHR сама написала\n250-280к оклад\nпригласили на следующий этап (это был второй, первый - скрининг)"
      },
      {
        "timestamp": "2024-07-29 10:26:00",
        "content": "2024-07-29 10:26:00\n Евгений Лямин -> 2071074234:\n— Яндекс первый этап\n— не обсуждали\n— hr написал\nзадачи:\n1. из скрина задание. изначально получаем только примитивы насколько помню\n2. расширить если мы получаем на вход функцию \n3. расширить если мы получем промис",
        "full_content": "2024-07-29 10:26:00\n Евгений Лямин -> 2071074234:\n— Яндекс первый этап\n— не обсуждали\n— hr написал\nзадачи:\n1. из скрина задание. изначально получаем только примитивы насколько помню\n2. расширить если мы получаем на вход функцию \n3. расширить если мы получем промис"
      },
      {
        "timestamp": "2024-07-24 14:05:59",
        "content": "2024-07-24 14:05:59\n AM -> 2071074234:\nЯндекс [второй этап]\n\n— Планировалось 2 задачи, успел только одну\n\n/**\n * Банкомат.\n *\n * В банкомате есть купюры — 50, 100, 500, 1000, 5000 руб. Номиналы купюр только такие, они не меняются\n * и доступны в константе nominals.\n * Есть ограничение на количество каждой из купюр (аргумент limits), его нужно держать в актуальном\n * состоянии (мутировать).\n * Нужно вернуть купюры и их количество, которыми можно выдать запрашиваемую сумму, в виде \n * объекта в фо...",
        "full_content": "2024-07-24 14:05:59\n AM -> 2071074234:\nЯндекс [второй этап]\n\n— Планировалось 2 задачи, успел только одну\n\n/**\n * Банкомат.\n *\n * В банкомате есть купюры — 50, 100, 500, 1000, 5000 руб. Номиналы купюр только такие, они не меняются\n * и доступны в константе nominals.\n * Есть ограничение на количество каждой из купюр (аргумент limits), его нужно держать в актуальном\n * состоянии (мутировать).\n * Нужно вернуть купюры и их количество, которыми можно выдать запрашиваемую сумму, в виде \n * объекта в формате, аналогичном объекту лимитов.\n * При прочих равных возможностях выдать одну и ту же сумму разными купюрами приоритет отдаётся крупным.\n * Если выдать запрашиваемую сумму не получится в принципе (сумма не кратна минимальному номиналу) —\n * выбросить ошибку 'Incorrect value'.\n * Если в банкомате недостаточно нужных купюр — выбросить ошибку 'Not enough money'.\n*/\n\nconst nominals = [5000, 1000, 500, 100, 50];\n\nfunction atm(sum, limits, nominals) {\n    const minNominal = Math.min(...nominals);\n    let lim = {...limits}; \n\n    if(sum % minNominal !== 0) {\n        return 'Error';\n    }\n\n    const res = {};\n\n    for(let den of nominals) {\n        while(sum >= den && lim[den] > 0) {\n            sum -= den;\n            lim[den]--;\n            res[den] = (res[den] || 0) + 1;\n        }\n    }\n\n    if(sum !== 0) {\n        return 'Error: Not enough money';\n    }\n\n    Object.assign(limits, lim);\n    return res;\n}\n\nfunction check(sum, limits, expected) {\n    let res;\n    try {\n        res = atm(sum, limits, nominals);\n    } catch (e) {\n        res = e;\n    }\n    if (typeof expected === \"string\") {\n        console.assert(res.toString() === expected, `Expected error ${expected}, got ${res.toString()}`);\n    } else {\n        console.assert(JSON.stringify(res) === JSON.stringify(expected), `Expected result %o, got result %o`, expected, res);\n    }\n}\n\nfunction test() {\n    // пример: в банкомате 9200 следующими номиналами\n    const limits = { 5000: 0, 1000: 6, 500: 5, 100: 5, 50: 4 }\n\n    // Далее последовательные вызова функции atm с одним и тем же объектом limits\n    check(1250, limits, { 1000: 1, 100: 2, 50: 1 })    // \n    check(1000000, limits, 'Error: Not enough money') // 'Error: Not enough money'\n    check(400, limits, { 100: 3, 50: 2 })\n    console.log(\"Tests finished\");\n}\n\nconsole.clear();\ntest();"
      },
      {
        "timestamp": "2024-07-22 00:24:04",
        "content": "2024-07-22 00:24:04\n AM -> 2071074234:\n— Яндекс\n— HR сама написала\n— Озвученная мной ЗП: 230-300к\n— Результат: позвали на 2 этап\n— Сразу начали с задач\n\nconst ownGet = (obj, path) => {\n    let result = obj;\n    const keys = path.split(\".\");\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (result) {\n        result = result[key];\n      } else {\n        return undefined;\n      }\n    }\n\n    return result;\n  };\n\n  console.log(ownGet({ a: { b: { c: 777 } } }, \"a.b.c\"),...",
        "full_content": "2024-07-22 00:24:04\n AM -> 2071074234:\n— Яндекс\n— HR сама написала\n— Озвученная мной ЗП: 230-300к\n— Результат: позвали на 2 этап\n— Сразу начали с задач\n\nconst ownGet = (obj, path) => {\n    let result = obj;\n    const keys = path.split(\".\");\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (result) {\n        result = result[key];\n      } else {\n        return undefined;\n      }\n    }\n\n    return result;\n  };\n\n  console.log(ownGet({ a: { b: { c: 777 } } }, \"a.b.c\"), \"getter\");\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction callLimit(fn, limit, callback) {\n    let counter = 0;\n\n    function limited(...args) {\n        if (counter < limit) {\n            counter++;\n            const result = fn(...args);\n            \n            if (counter === limit && callback) {\n                callback();\n            }\n            \n            return result;\n        }\n    }\n\n    limited.reset = function() {\n        counter = 0;\n    };\n\n    return limited;\n}\n\nfunction auth() {\n    return new Promise((resolve, reject) => asyncAuth((error, data) => {\n        if(error){\n            reject(error);\n        }\n\n        resolve(data);\n    }));\n}\n\nasync function tryAuth(retriesLeft = 3) {\n  try {\n    return await auth();\n  } catch (err) {\n    if (retriesLeft <= 0) {\n      throw err;\n    }\n\n    return tryAuth(retriesLeft - 1);\n  }\n}\n\nconst compose = (...funcs) => (...args) => {\n    return funcs.reduceRight((acc, fn) => [fn(...acc)], args)[0];\n};\n\nfunction isMonotonic(numbers) {\n    if (numbers.length <= 1) return true;\n\n    let increasing = true;\n    let decreasing = true;\n\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > numbers[i - 1]) {\n            decreasing = false;\n        }\n        if (numbers[i] < numbers[i - 1]) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}"
      },
      {
        "timestamp": "2024-07-19 05:38:33",
        "content": "2024-07-19 05:38:33\n Tonidevs -> 2071074234:\nЯНДЕКС ГО\n— сами написали\n— ЗП до 300к\n\nВОПРОСОВ - по задачам какая будет сложность алгоритма и подобные\n\n\nfunction solution(connect, render) {\n    let messages = new Map();\n    let lastRenderedId = 0;\n\n    connect((msg) => {\n        messages.set(msg.id, msg);\n\n        while (messages.has(lastRenderedId + 1)) {\n            lastRenderedId++;\n            render(messages.get(lastRenderedId));\n            messages.delete(lastRenderedId); // Удаляем сообще...",
        "full_content": "2024-07-19 05:38:33\n Tonidevs -> 2071074234:\nЯНДЕКС ГО\n— сами написали\n— ЗП до 300к\n\nВОПРОСОВ - по задачам какая будет сложность алгоритма и подобные\n\n\nfunction solution(connect, render) {\n    let messages = new Map();\n    let lastRenderedId = 0;\n\n    connect((msg) => {\n        messages.set(msg.id, msg);\n\n        while (messages.has(lastRenderedId + 1)) {\n            lastRenderedId++;\n            render(messages.get(lastRenderedId));\n            messages.delete(lastRenderedId); // Удаляем сообщение после отображения\n        }\n\n        // Логирование или проверка на количество сообщений в Map, если необходимо\n        if (messages.size > 1000) {\n            console.warn(\"Более 1000 сообщений ожидают отображения\");\n        }\n    });\n}\n\n\nfunction printFiles(data) {\n    const stack = [{ node: data, depth: 0 }];\n    while (stack.length > 0) {\n        const { node, depth } = stack.pop();\n        const prefix = ' '.repeat(depth * 4); // Создаем отступ, каждый уровень вложенности увеличивает отступ на 4 пробела\n\n        console.log(`${prefix}${node.name}`);\n\n        if (node.children) {\n            for (let i = node.children.length - 1; i >= 0; i--) {\n                stack.push({ node: node.children[i], depth: depth + 1 });\n            }\n        }\n    }\n}\n\n// Тестирование функции с предоставленными данными\nconst data = {\n    name: 'folder',\n    children: [\n        { name: 'file1.txt' },\n        { name: 'file2.txt' },\n        {\n            name: 'images',\n            children: [\n                { name: 'image.png' },\n                {\n                    name: 'vacation',\n                    children: [\n                        { name: 'crocodile.png' },\n                        { name: 'penguin.png' }\n                    ]\n                }\n            ]\n        },\n        { name: 'shopping-list.pdf' }\n    ]\n};\n\nprintFiles(data);\n\n\n/**\n * throttle.\n *\n * Напишите функцию throttle(fn, delay, ctx) – «тормозилку», которая возвращает обёртку,\n * вызывающую fn не чаще, чем раз в delay миллисекунд.\n * В качестве контекста исполнения используется ctx.\n * Первый вызов fn всегда должен быть синхронным.\n * Если игнорируемый вызов оказался последним, то он должен выполниться.\n */\n\n// пример для delay === 100\n// . - вызовы throttledFn\n// ! - вызовы fn\n//................\n//!         !          !\n//0ms      100ms      200ms\n//.    .         .\n//!         !          !\n//0ms      100ms      200ms\n\nfunction throttle(fn, delay, ctx) {\n    let timeoutId;\n    let lastCallTime = 0;\n\n    return function(...args) {\n        const now = Date.now()\n        const remainigTime = delay - (now - lastCallTime);\n\n        if(remainigTime <= 0) {\n            fn.apply(ctx, args)\n            lastCallTime = now\n            timeoutId = null;\n        } if(timeoutId) {\n            clearTimeout(timeoutId)\n            timeoutId = null;\n        } else if(!timeoutId) {\n            timeoutId = setTimeout(() => {\n                fn.apply(ctx, args)\n                lastCallTime = Date.now()\n                timeoutId = null;\n            }, remainigTime)\n            // console.log(remainigTime)\n        }\n    }\n}\n\nfunction test() {\n    const start = Date.now();\n\n    function log(text) {\n        const msPassed = Date.now() - start;\n        console.log(`${msPassed}: ${this.name} logged ${text}`);\n    }\n\n    const throttled = throttle(log, 100, { name: 'me' });\n\n    setTimeout(() => throttled('m'), 0);\n    setTimeout(() => throttled('mo'), 22);\n    setTimeout(() => throttled('mos'), 33);\n    setTimeout(() => throttled('mosc'), 150);\n    setTimeout(() => throttled('moscow'), 400);\n    //   0ms: me logged m\n    // 100ms: me logged mos\n    // 200ms: me logged mosc\n    // 400ms: me logged moscow\n}\n\nconsole.clear()\ntest()"
      },
      {
        "timestamp": "2024-07-10 03:14:31",
        "content": "2024-07-10 03:14:31\n Tonidevs -> 2071074234:\nЯНДЕКС ГО 2 этап\n— сами написали\n— ЗП: 200-300 по результатам теха\n— комментарий: интервьюер крутой, результат плохой. успехом будет зависеть от скорости мысли и количества решенных задач\n\nВОПРОСЫ: нет, сразу задачи\n\nЗАДАЧИ: \n- что будет в консоли\nconst a = {\n  name: 'a',\n  foo: function () {\n    console.log(this.name);\n  }\n};\n\na.foo(); // 1 a\n\nconst bar = a.foo;\nbar(); // 2 undefined\n\nconst b = {\n  name: 'b'\n};\nb.foo = a.foo;\nb.foo(); // 3 b\n\nconst c...",
        "full_content": "2024-07-10 03:14:31\n Tonidevs -> 2071074234:\nЯНДЕКС ГО 2 этап\n— сами написали\n— ЗП: 200-300 по результатам теха\n— комментарий: интервьюер крутой, результат плохой. успехом будет зависеть от скорости мысли и количества решенных задач\n\nВОПРОСЫ: нет, сразу задачи\n\nЗАДАЧИ: \n- что будет в консоли\nconst a = {\n  name: 'a',\n  foo: function () {\n    console.log(this.name);\n  }\n};\n\na.foo(); // 1 a\n\nconst bar = a.foo;\nbar(); // 2 undefined\n\nconst b = {\n  name: 'b'\n};\nb.foo = a.foo;\nb.foo(); // 3 b\n\nconst c = {\n  name: 'c'\n};\n\nbar.call(c); // 4 c\na.foo.apply(b); // 5 b\na.foo.bind(b).call(c); // 6 b\na.foo.bind(b).bind(c)(); // 7 b\n\n\n- напиши каррирование,  моё не лучшее решение\nfunction sum(a, b, c) { // Функция суммирования трех чисел\n  return a + b + c;\n}\n\nfunction curry(fn) { // Функция каррирования\n  return function cur(...args) { // Возвращает новую функцию, принимающую аргументы\n    if (args.length >= fn.length) { // Если количество аргументов больше или равно количеству аргументов исходной функции\n      return fn(...args); // Вызываем исходную функцию с текущими аргументами\n    } else {\n      return (...newArgs) => cur(...args, ...newArgs); // Возвращаем новую функцию, принимающую оставшиеся аргументы\n    }\n  }\n}\n\nconsole.log(curry(sum)(1, 2, 3));    // 6\nconsole.log(curry(sum)(1, 2)(3));    // 6\nconsole.log(curry(sum)(1)(2)(3));    // 6\n\n\n- реши задачу\n/*\nВам дается массив серверов, которые начинают сбоить начиная с какого-то сервера.\nПроверка работоспособности сервера осуществляется асинхронно и возвращает `Promise<boolean>`.\nОдновременно проверять на работоспособность можно только один сервер.\n\nНеобходимо написать функцию `findServer`,\nкоторая на вход получит список серверов и функцию проверки,\nа вернет `Promise`, который зарезолвится адресом первого упавшего сервера.\n\nРешение должно вызывать функцию проверки минимально возможное количество раз.\n*/\n\nconst servers = ['srv-a', 'srv-b', 'srv-c', 'srv-d'];\nconst check = (name) => new Promise((res) => setTimeout(res, 100)).then(() => name === 'srv-a');\n\nconst findServer = async (servers, check) => {\n  for (const server of servers) {\n    if (await check(server)) {\n      return server; // Возвращает первый сервер, который прошел проверку\n    }\n  }\n};\n\nfindServer(servers, check).then(console.log); // Promise.resolve('srv-b')\n\n\n- реши задачу\n/*\nНеобходимо обработать запросы к внешнему API.\nДля отрисовки раздела помощи пользователю необходимо получить ряд данных по нему.\nПри этом часть данных является критичным, а часть дополнительной информацией (обозначено []).\nФормат ответа и ошибок на усмотрение кандидата.\nЕсли критичные данные не ответили (getAuth), функция должна прекратить работу (не нужно пытаться делать остальных запросов).\nКратко: Получить максимум информации о пользователе, все ошибки кроме ошибки запроса авторизации - игнорируем.\nФорматы ошибок/ответов на усмотрение кандидата.\n*/\n\nfunction getAuth() { // return Promise with token\n}\n\nfunction getUser(token) { // [return Promise with userId]\n}\n\nfunction getOrder(token, userId) { // [return Promise with order]\n}\n\nfunction getPromo(token) { // [return Promise with promo]\n}\n\nfunction getData() {\n  ...\n  // return {token, user, order, promo}\n}"
      },
      {
        "timestamp": "2024-07-04 07:34:18",
        "content": "2024-07-04 07:34:18\n Tonidevs -> 2071074234:\nЯНДЕКС ГО первый тех этап\n\n— вакансия: сами написали\n— зп: не обсуждал думаю 300-400\n— итог: ✅ позвали на след этап, несмотря на то что не ответил про специфичность\n\nВОПРОСЫ\n- назови HTTP методы, для чего используются и отличия\n- знакомо ли понятие идемпотентные методы\n- какие методы взаимодействия сервисов ты знаешь для постоянного соединения между собой (SSE, WebSocket, Pooling) какие есть проблемы\n\nЗАДАЧИ\n- спроектировать API, будут вытекающие вопр...",
        "full_content": "2024-07-04 07:34:18\n Tonidevs -> 2071074234:\nЯНДЕКС ГО первый тех этап\n\n— вакансия: сами написали\n— зп: не обсуждал думаю 300-400\n— итог: ✅ позвали на след этап, несмотря на то что не ответил про специфичность\n\nВОПРОСЫ\n- назови HTTP методы, для чего используются и отличия\n- знакомо ли понятие идемпотентные методы\n- какие методы взаимодействия сервисов ты знаешь для постоянного соединения между собой (SSE, WebSocket, Pooling) какие есть проблемы\n\nЗАДАЧИ\n- спроектировать API, будут вытекающие вопросы: про пагинацию, про query-params, про изменение данных и про удаление\nСпроектируйте API для корзины интернет магазина:\n1. получение списка айтемов из корзины,\n2. получение одного айтема,\n3. удаление айтема из корзины,\n4. обновление айтема из корзины.\n\nШаблон для ответа\n\nMETHOD /URL\nHeaders: Header1=value, Header2=value2, ...\nBody: {...}\nResponse: {...}\n\nПример:\n\nPOST /path/to/src\nBody: {}\nHeaders: A=\"b\"\nResponse: {}\n\n*/\n// write here...\n\n- задача про специфичность\n<div class=\"box block\"></div>\n\n<style>\n  .box {\n    width: 100px;\n    height: 100px;\n  }\n  \n  * {\n    background: black;\n  }\n  \n  .box {\n    background: yellow;\n  }\n  \n  .box.block {\n    background: green;\n  }\n  \n  .block {\n    background: red;\n  }\n  \n  div.block {\n    background: blue;\n  }\n</style>\n\n\n- какой будет порядок выполнения\nconsole.log('apple');\n\nsetTimeout(() => console.log('pear'), 0);\n\nPromise.resolve('melon').then(res => console.log(res));\n\nnew Promise((resolve, reject) => {\n  console.log('orange');\n  resolve('pineapple');\n}).then(res => console.log(res));\n\nconsole.log('lime');\n\n\n- решить задачу\n/* Функция проверяет, является ли первая строка подпоследовательностью второй\n(нечеткий поиск - fuzzysearch или approximate string matching).\n\nНужно реализовать функцию с использованием только одного прохода \nпо символам строки, без использования регулярных выражений.\n*/\nПример работы:\n\nfuzzysearch('car', 'cartwheel')      // true\nfuzzysearch('cwhl', 'cartwheel')     // true\nfuzzysearch('we', 'cartwheel')       // true\nfuzzysearch('cartwheel', 'cartwheel') // true\nfuzzysearch('cwheeel', 'cartwheel')  // false\nfuzzysearch('lw', 'cartwheel')       // false\n\nfunction fuzzysearch(needle, stack) {\n  // your code\n}"
      },
      {
        "timestamp": "2024-06-25 16:17:59",
        "content": "2024-06-25 16:17:59\n Mummadhan -> 2071074234:\n- Яндекс Про(1 этап)\n- Рекрутер написала\n- ЗП: 180к на руки\n- Задачи:\n1) Что выведет в консоль? Как починить?\n \n    setTimeout(() => {\n      console.log(i)\n    }, 10 )\n  }\n\n2) Что выведет в консоль?\n\n.then(x=>x+1)\n.then(x=> {throw x})\n.then(x=>console.log(x))\n.catch(err=>console.log(err))\n.then(x=>Promise.resolve(1))\n.catch(err=>console.log(err))\n.then(x=>console.log(x))\n\n3) Написать свой аналог Promise.allsetled\n\n4) Написать функцию, которая определ...",
        "full_content": "2024-06-25 16:17:59\n Mummadhan -> 2071074234:\n- Яндекс Про(1 этап)\n- Рекрутер написала\n- ЗП: 180к на руки\n- Задачи:\n1) Что выведет в консоль? Как починить?\n \n    setTimeout(() => {\n      console.log(i)\n    }, 10 )\n  }\n\n2) Что выведет в консоль?\n\n.then(x=>x+1)\n.then(x=> {throw x})\n.then(x=>console.log(x))\n.catch(err=>console.log(err))\n.then(x=>Promise.resolve(1))\n.catch(err=>console.log(err))\n.then(x=>console.log(x))\n\n3) Написать свой аналог Promise.allsetled\n\n4) Написать функцию, которая определяет, является ли переданная стоока палиндоомом\n(читается слева-направо и справа-налево одинаково).\nПримеры палиндромов:\n- казак\n- А роза упала на лапу Азора\n- Do geese see God?\n- Madam. I'm Adam\nОграничение по памяти О(1).\n\n  return char.toLocaleLowerCase() !==char.toLocaleUpperCase()\n}\nfunction isEqualChars(char1, char2){\n  return char1.toLowerCase() === char2.toLowerCase()\n}\n\nfunction isPalindrome(s){\n  let start = 0,\n  end = s.length - 1;\nwhile (start < end){\nlet startChar = s[start],\nendChar = s[end]\nif (!isWord(startChar)){\nstart++;\ncontinue;\n  \n}\nif(!isWord(endChar)){\nend--;\ncontinue;\n}\n\nif (!isEqualChars(startChar, endChar)){\n  return false;\n}\n\nstart++;\nend--;\n\n}\nreturn true\n}"
      },
      {
        "timestamp": "2024-06-17 08:34:18",
        "content": "2024-06-17 08:34:18\n Руслан -> 2071074234:\n13.06 Яндекс - 4й этап - общение с тимлидом конкретной команды\n— Ссылка на вакансию: Нr сам написал\n— Важность собеседования: важно, хочу устроиться\n— Озвученная мной ЗП: 280 тыс\n— Успех собеса: ❓\nОбщались поверхностно по моему прошлому опыту, задачам, которыми горжусь. Потом перешли к обсуждению их проекта, процессов, команде.",
        "full_content": "2024-06-17 08:34:18\n Руслан -> 2071074234:\n13.06 Яндекс - 4й этап - общение с тимлидом конкретной команды\n— Ссылка на вакансию: Нr сам написал\n— Важность собеседования: важно, хочу устроиться\n— Озвученная мной ЗП: 280 тыс\n— Успех собеса: ❓\nОбщались поверхностно по моему прошлому опыту, задачам, которыми горжусь. Потом перешли к обсуждению их проекта, процессов, команде."
      },
      {
        "timestamp": "2024-06-13 08:35:07",
        "content": "2024-06-13 08:35:07\n Руслан -> 2071074234:\n10.06 Яндекс - 3й этап - разбор опыта + технические, софт вопросы\n\n— Ссылка на вакансию: Hr сам написал\n— Важность собеседования: важно, хочу устроиться\n— Озвученная мной ЗП: 280 тыс\n— Успех собеса: ✅\n\nВопросы:\n1. про замену сборщика с webpack на vite - разбор с технической и софтовой стороны - как взаимомодействовал с командой, как пришли к идее замены сборщика\n2. про создание какого-либо модуля, проекта с нуля самостоятельно, где ты руководил процессо...",
        "full_content": "2024-06-13 08:35:07\n Руслан -> 2071074234:\n10.06 Яндекс - 3й этап - разбор опыта + технические, софт вопросы\n\n— Ссылка на вакансию: Hr сам написал\n— Важность собеседования: важно, хочу устроиться\n— Озвученная мной ЗП: 280 тыс\n— Успех собеса: ✅\n\nВопросы:\n1. про замену сборщика с webpack на vite - разбор с технической и софтовой стороны - как взаимомодействовал с командой, как пришли к идее замены сборщика\n2. про создание какого-либо модуля, проекта с нуля самостоятельно, где ты руководил процессом\n3. что делать если сайт медленно прогружается\n4. был ли опыт с ci/cd, кубером, опиши\n5. были ли со стороны конфликтные ситуации, где ты не был стороной конфликта, но поспособствовал его урегулированию \n6. про процессы во время релизов"
      },
      {
        "timestamp": "2024-06-11 10:19:10",
        "content": "2024-06-11 10:19:10\n SQwerty -> 2071074234:\nНазвание компании - Точка банк\nВакансия: https://tochka.com/hr/it/frontend/\nЗП: не обговаривалось\nЗадачи: https://code.yandex-team.ru/4420ce6e-db67-484e-bf4d-98f9e9c9717d\nЗапись: https://www.youtube.com/watch?v=42UZDI3Zryw\nУспех:❌\nФидбек: Рекомендации от ребят:\nthis, области видимости\nцепочки промисов\nметоды встроенных классов, fill, from\nитераторы, Array.from, spread\nКак работает useEffect со списком зависимостей\nuseRef для хранения переменных в функц...",
        "full_content": "2024-06-11 10:19:10\n SQwerty -> 2071074234:\nНазвание компании - Точка банк\nВакансия: https://tochka.com/hr/it/frontend/\nЗП: не обговаривалось\nЗадачи: https://code.yandex-team.ru/4420ce6e-db67-484e-bf4d-98f9e9c9717d\nЗапись: https://www.youtube.com/watch?v=42UZDI3Zryw\nУспех:❌\nФидбек: Рекомендации от ребят:\nthis, области видимости\nцепочки промисов\nметоды встроенных классов, fill, from\nитераторы, Array.from, spread\nКак работает useEffect со списком зависимостей\nuseRef для хранения переменных в функциональных компонентах\nповторить классовые компоненты"
      },
      {
        "timestamp": "2024-06-05 08:00:18",
        "content": "2024-06-05 08:00:18\n Руслан -> 2071074234:\n04.06 Яндекс - 2й технический этап - алгосы\n— Ссылка на вакансию: Hr сам написал\n— Важность собеседования: важно, хочу устроиться\n— Озвученная мной ЗП: 280 тыс\n— Успех собеса: ✅\nЗадачи:\n1.\nИз списка билетов составить маршрут следования\nconst tickets = [\n  {\n    from: 'London',\n    to: 'Moscow',\n  },\n  {\n    from: 'NY',\n    to: 'London',\n  },\n  {\n    from: 'Moscow',\n    to: 'Spb',\n  },\n];\n// console.log(getRoute(tickets)); => \n[\n{\n    from: 'NY',\n    to:...",
        "full_content": "2024-06-05 08:00:18\n Руслан -> 2071074234:\n04.06 Яндекс - 2й технический этап - алгосы\n— Ссылка на вакансию: Hr сам написал\n— Важность собеседования: важно, хочу устроиться\n— Озвученная мной ЗП: 280 тыс\n— Успех собеса: ✅\nЗадачи:\n1.\nИз списка билетов составить маршрут следования\nconst tickets = [\n  {\n    from: 'London',\n    to: 'Moscow',\n  },\n  {\n    from: 'NY',\n    to: 'London',\n  },\n  {\n    from: 'Moscow',\n    to: 'Spb',\n  },\n];\n// console.log(getRoute(tickets)); => \n[\n{\n    from: 'NY',\n    to: 'London',\n  },\n  {\n    from: 'London',\n    to: 'Moscow',\n  },\n  {\n    from: 'Moscow',\n    to: 'Spb',\n  },\n];\n// Функция getRoute принимает массив билетов и возвращает их в порядке следования по маршруту\nfunction getRoute(tickets = []) {\n  // Создаем карту билетов, где ключ - город отправления, а значение - массив билетов из этого города\n  const ticketMap = {};\n  const route = [];\n\n  // Создаем карту билетов\n  tickets.forEach((ticket) => {\n    // Если город отправления еще не добавлен в карту, создаем для него пустой массив\n    if (!ticketMap[ticket.from]) {\n      ticketMap[ticket.from] = [];\n    }\n    // Добавляем билет в массив билетов из этого города\n    ticketMap[ticket.from].push(ticket);\n  });\n\n  // Ищем город отправления (город, из которого нет рейсов)\n  let currentCity = null;\n  Object.keys(ticketMap).forEach((city) => {\n    // Если из этого города нет рейсов, это наш стартовый город\n    if (!tickets.some((ticket) => ticket.to === city)) {\n      currentCity = city;\n    }\n  });\n\n  // Строим маршрут\n  while (currentCity) {\n    // Берем первый билет из массива билетов из текущего города\n    const nextTicket = ticketMap[currentCity]?.shift();\n    // Добавляем билет в маршрут\n    route.push(nextTicket);\n    // Переходим к следующему городу\n    currentCity = nextTicket.to;\n  }\n\n  // Возвращаем готовый маршрут\n  return route;\n}\n\n2.\n// Функция типографа, которая будет выводить текст по одному символу с задержкой\nfunction typewriter(delay, outputChar) {\n  // Переменная для хранения текущего текста\n  let currentText = '';\n  // Индекс для хранения текущего символа\n  let index = 0;\n  // Переменная для хранения идентификатора таймаута\n  let timeoutId = null;\n\n  // Возвращаем функцию writeText, которая будет вызываться для вывода текста\n  return function writeText(text) {\n    // Добавляем новый текст к текущему тексту\n    currentText += text; вот это забыл кажись\n\n    // Функция для вывода следующего символа\n    function writeNextChar() {\n      // Если еще есть символы для вывода\n      if (index < currentText.length) {\n        // Выводим текущий символ с помощью функции outputChar\n        outputChar(currentText[index]);\n        \n        // Инкрементируем индекс, чтобы перейти к следующему символу\n        index++;\n        \n        // Запускаем таймер для вывода следующего символа через задержку\n        timeoutId = setTimeout(writeNextChar, delay);\n      } else {\n        // Если мы достигли конца текста, то обнуляем идентификатор таймаута\n        timeoutId = null;\n      }\n    }\n\n    // Если нет текущего таймаута, то запускаем процесс вывода текста\n    if (!timeoutId) {\n      writeNextChar();\n    }\n  };\n}"
      },
      {
        "timestamp": "2024-05-30 16:01:09",
        "content": "2024-05-30 16:01:09\n Влад -> 2071074234:\nЗП: Просил 180к\nСсылки на вакансию нет, нашли меня сами(по зп, просил 180к)\n\nНорд-клан, 1 этап(техническое интервью). Позвали на второй этап\n\nВопросы: что будет в консоли, пару задачек в яндекс code team, вопросы по опыту",
        "full_content": "2024-05-30 16:01:09\n Влад -> 2071074234:\nЗП: Просил 180к\nСсылки на вакансию нет, нашли меня сами(по зп, просил 180к)\n\nНорд-клан, 1 этап(техническое интервью). Позвали на второй этап\n\nВопросы: что будет в консоли, пару задачек в яндекс code team, вопросы по опыту"
      },
      {
        "timestamp": "2024-05-30 09:18:27",
        "content": "2024-05-30 09:18:27\n Руслан -> 2071074234:\n29.05 Яндекс - 1й технический этап\n\n— Ссылка на вакансию: Hr сам написал\n— Важность собеседования: важно, хочу устроиться\n— Озвученная мной ЗП: 280 тыс\n— Успех собеса: ✅\n— Задачи\n\n// Получить value по переданному пути(прим. a.b.c; a,b,d[0]), если пути в объекте нет, вернуть undefined\n// Решение\nfunction get(obj, path) {\n    const keys = path.split('.');\n    let current = obj;\n\n    for (let key of keys) {\n        if (current[key] === undefined) {\n       ...",
        "full_content": "2024-05-30 09:18:27\n Руслан -> 2071074234:\n29.05 Яндекс - 1й технический этап\n\n— Ссылка на вакансию: Hr сам написал\n— Важность собеседования: важно, хочу устроиться\n— Озвученная мной ЗП: 280 тыс\n— Успех собеса: ✅\n— Задачи\n\n// Получить value по переданному пути(прим. a.b.c; a,b,d[0]), если пути в объекте нет, вернуть undefined\n// Решение\nfunction get(obj, path) {\n    const keys = path.split('.');\n    let current = obj;\n\n    for (let key of keys) {\n        if (current[key] === undefined) {\n            return undefined;\n        }\n        current = current[key];\n    }\n\n    return current;\n}\n\n// Обеспечить нужный порядок вывода логов => A, B, C\nfunction foo(callback) {\n    setTimeout(function() {\n        callback('A');\n    }, Math.random() * 100);\n}\n\nfunction bar(callback) {\n    setTimeout(function() {\n        callback('B');\n    }, Math.random() * 100);\n}\n\nfunction baz(callback) {\n    setTimeout(function() {\n        callback('C');\n    }, Math.random() * 100);\n}\n// Решение (возможны ошибки)\n// Обертка для преобразования функций в промисы\nfunction promisify(fn) {\n    return new Promise(resolve => {\n        fn(result);\n    });\n}\n\nconst fooPromise = promisify(foo);\nconst barPromise = promisify(bar);\nconst bazPromise = promisify(baz);\n\nPromise.all([fooPromise, barPromise, bazPromise])\n    .then(results => {\n        results.forEach(item => console.log(item));\n    });\n\n\n// Определить, выставлены ли все числа в порядке возрастания или убывания (arr: number[]) => boolean\n// Решение\nfunction isMonotonic(numbers) {\n    if (numbers.length <= 1) return true;\n\n    let isIncreasing = true;\n    let isDecreasing = true;\n\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > numbers[i - 1]) {\n            isDecreasing = false;\n        }\n        if (numbers[i] < numbers[i - 1]) {\n            isIncreasing = false;\n        }\n    }\n\n    return isIncreasing || isDecreasing;\n}"
      },
      {
        "timestamp": "2024-05-24 15:57:30",
        "content": "2024-05-24 15:57:30\n Daniil Max -> 2071074234:\n— Название компании: Яндекс Multitrack [Первый Этап]\n— Ссылка на вакансию: hr сама написала\n— ЗП: 340~380К.\n— Задачи: лайвкодинг\n\n— Задачки:\nПервая задача:\n\nfunction _sum(a, b) {\n    return a + b;\n}\n\nfunction spy(f) {\n    function wrapper(...args) {\n        const result = f.apply(this, args);\n        wrapper.data.calls++;\n        wrapper.data.args.push(args);\n        wrapper.data.results.push(result);\n        return result;\n    }\n\n    wrapper.data =...",
        "full_content": "2024-05-24 15:57:30\n Daniil Max -> 2071074234:\n— Название компании: Яндекс Multitrack [Первый Этап]\n— Ссылка на вакансию: hr сама написала\n— ЗП: 340~380К.\n— Задачи: лайвкодинг\n\n— Задачки:\nПервая задача:\n\nfunction _sum(a, b) {\n    return a + b;\n}\n\nfunction spy(f) {\n    function wrapper(...args) {\n        const result = f.apply(this, args);\n        wrapper.data.calls++;\n        wrapper.data.args.push(args);\n        wrapper.data.results.push(result);\n        return result;\n    }\n\n    wrapper.data = {\n        calls: 0,\n        args: [],\n        results: []\n    };\n\n    return wrapper;\n}\n\n#################################\n\nВторая задача:\n\nclass EventEmitter {\n  constructor() {\n    this.events = {};\n  }\n\n  addEventListener(event, listener) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(listener);\n    return () => {\n      this.events[event] = this.events[event].filter(l => l !== listener);\n    };\n  }\n\n  dispatchEvent(event, ...args) {\n    if (!this.events[event]) return;\n    this.events[event].forEach(listener => listener(...args));\n  }\n}\n\n########################################\n\nТретья задача:\n\nclass EventEmitter {\n  constructor(queueType) {\n    this.events = {};\n   this.queueType = queueType;\n\n  }\n\n  addEventListener(event, listener) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(listener);\n    return () => {\n      this.events[event] = this.events[event].filter(l => l !== listener);\n    };\n\ndispatchEvent(event, payload) {\n    if (!this.events[event]) {\n      return;\n    }\n    \n    const dispatchFn = () => {\n      this.events[event].forEach(listener => listener(payload));\n    };\n\n    if (this.queueType === 'microTask') {\n      Promise.resolve().then(() => dispatchFn(payload));\n    } else if (this.queueType === 'macroTask') {\n      setTimeout(() => dispatchFn(payload), 0);\n    } else {\n      dispatchFn(paylaod);\n    }\n  }\n } \n\n\n########################################\n\nЧетвертая задача:\n\nclass EventEmitter {\n  constructor(queueType) {\n    this.events = {};\n   this.queueType = queueType;\n  }\n\n  addEventListener(event, listener) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(listener);\n    return () => {\n      this.events[event] = this.events[event].filter(l => l !== listener);\n    };\n\ndispatchEvent(event, payload) {\n    if (!this.events[event]) {\n      return;\n    }\n    \n    const dispatchFn = () => {\n      this.events[event].forEach(listener => listener(payload));\n    };\n\n    if (this.queueType === 'microTask') {\n      Promise.resolve().then(() => dispatchFn(payload));\n    } else if (this.queueType === 'macroTask') {\n      setTimeout(() => dispatchFn(payload), 0);\n    } else {\n      dispatchFn(paylaod);\n    }\n  }\n } \n\nonce(event, callback) => {\n    const  removeEventListener =  this.addEventListener(event, (payload) => {\nremoveEventListener ();\ncallback(payload);\n})\n}\n\n\n— Успех собеса: ✅️\n— Фитбек о собесе:\nДаниил, привет!\nВозвращаюсь с фидбеком.\nПо первой задаче были небольшие огрехи с контекстом вызова и стрелочной функцией, ты теоретически знал особенности работы, но в своем коде как раз не увидел проблемы, пришлось явно указать на ошибку. \nВ остальном задачка хорошо прошла если бы не эта ошибка, отлично было бы.\n\nПо второй задачке тоже начали отлично, но на последней доп. задаче с once методом будто уже устал и поплыл, пришлось выдавать прямо ключевые идеи и подсказывать с точностью до строки, что и как написать и где баг который был посажен в рамках этой доп. задачи.\n\nСекция пройдена, зову на 2 этап - базовые знания программирования (алгоритмы)"
      },
      {
        "timestamp": "2024-05-24 15:46:25",
        "content": "2024-05-24 15:46:25\n Daniil Max -> 2071074234:\n— Название компании: Яндекс Multitrack [Второй Этап]\n— Ссылка на вакансию: hr сама написала\n— ЗП: 340~380К.\n— Задачи: лайвкодинг\n\n— Задачки:\nПервая задача:\n\nfunction parallelLimit(urls, limit, callback) {\n    const results = [];\n    const cache = new Map();\n    let currentIndex = 0;\n    let activeCount = 0;\n\n    const next = () => {\n        if (currentIndex >= urls.length && activeCount === 0) {\n            callback(results);\n            return;\n   ...",
        "full_content": "2024-05-24 15:46:25\n Daniil Max -> 2071074234:\n— Название компании: Яндекс Multitrack [Второй Этап]\n— Ссылка на вакансию: hr сама написала\n— ЗП: 340~380К.\n— Задачи: лайвкодинг\n\n— Задачки:\nПервая задача:\n\nfunction parallelLimit(urls, limit, callback) {\n    const results = [];\n    const cache = new Map();\n    let currentIndex = 0;\n    let activeCount = 0;\n\n    const next = () => {\n        if (currentIndex >= urls.length && activeCount === 0) {\n            callback(results);\n            return;\n        }\n\n        while (activeCount < limit && currentIndex < urls.length) {\n            const url = urls[currentIndex];\n            const idx = currentIndex;\n            currentIndex++;\n\n            if (cache.has(url)) {\n                results[idx] = cache.get(url);\n                next();  // move to the next URL without increasing activeCount\n            } else {\n                activeCount++;\n                fetch(url)\n                    .then(res => res.text())  // assuming the response needs to be text, can be modified as needed\n                    .then(data => {\n                        results[idx] = data;\n                        cache.set(url, data);\n                    })\n                    .catch(err => {\n                        results[idx] = err;\n                    })\n                    .finally(() => {\n                        activeCount--;\n                        next();\n                    });\n            }\n        }\n    };\n\n    next();\n}\n\n\nparallelLimit([\"https://example.com\", \"https://example.com\"], 2, console.log);\n\n##############\nВторая задача\n\nfunction compress(list) {\n    if (list.length === 0) return '';\n    list.sort((a, b) => a - b);\n    \n    let result = [];\n    let start = list[0];\n    let end = list[0];\n    \n    for (let i = 1; i < list.length; i++) {\n        if (list[i] === end + 1) {\n            end = list[i];\n        } else {\n            if (start === end) {\n                result.push(`${start}`);\n            } else {\n                result.push(`${start}-${end}`);\n            }\n            start = list[i];\n            end = list[i];\n        }\n    }\n    \n    if (start === end) {\n        result.push(`${start}`);\n    } else {\n        result.push(`${start}-${end}`);\n    }\n    \n    return result.join(',');\n}\n\n— Успех собеса: ❌\n— Фитбек о собесе: \nДаниил, привет!\nПрости за долгое ожидание, вернулась сегодня с конференции из Новосиба.\nК сожалению секция не пройдена, двигаться дальше к финалу пока не можем.\n\nПо нашим правилам пересдать можно через 6 месяцев. \nОстаюсь на связи и буду рада возобновить диалог🙌"
      },
      {
        "timestamp": "2024-05-02 06:55:57",
        "content": "2024-05-02 06:55:57\n Artem -> 2071074234:\nНазвание компании - Яндекс Финтех [Первый этап]\nВакансия: Написал hr\nЗП: Просил от 200к\nЗапись: https://youtu.be/39YCnI2BCus\nУспех: ✅\nФидбек: Краткий фидбэк с нашей стороны: \nБыстро справился с задачами. Понравилось как думал и что в целом проявлял инициативу. \nТеория – отлично, практика – отлично\n\nМы рады двигаться дальше, поэтому давай согласуем след. секцию, с алгоритмами.",
        "full_content": "2024-05-02 06:55:57\n Artem -> 2071074234:\nНазвание компании - Яндекс Финтех [Первый этап]\nВакансия: Написал hr\nЗП: Просил от 200к\nЗапись: https://youtu.be/39YCnI2BCus\nУспех: ✅\nФидбек: Краткий фидбэк с нашей стороны: \nБыстро справился с задачами. Понравилось как думал и что в целом проявлял инициативу. \nТеория – отлично, практика – отлично\n\nМы рады двигаться дальше, поэтому давай согласуем след. секцию, с алгоритмами."
      },
      {
        "timestamp": "2024-04-08 12:11:35",
        "content": "2024-04-08 12:11:35\n 5429820319 -> 2071074234:\nНазвание компании: Яндекс (первый этап) \nСсылка на вакансию: hr сама написала\nЗП: говорил хочу 200 \nЗадачи: \n(1) Из строки \"a.b.c.d.e\" сделать {a:{b:c{d:{e:{}}}}} (долго решал)\n(2) Promise.race (не смог написать)\nУспех собеса: ❌ (фидбэк коротко - долго делал, мало успел)\nСобес был 5 апреля",
        "full_content": "2024-04-08 12:11:35\n 5429820319 -> 2071074234:\nНазвание компании: Яндекс (первый этап) \nСсылка на вакансию: hr сама написала\nЗП: говорил хочу 200 \nЗадачи: \n(1) Из строки \"a.b.c.d.e\" сделать {a:{b:c{d:{e:{}}}}} (долго решал)\n(2) Promise.race (не смог написать)\nУспех собеса: ❌ (фидбэк коротко - долго делал, мало успел)\nСобес был 5 апреля"
      },
      {
        "timestamp": "2024-02-22 10:07:08",
        "content": "2024-02-22 10:07:08\n Nikita -> 2071074234:\n— Название компании: Wiregate [1 этап - знакомство + техсобес]\n— Что было: теория(Git, bigO, Redux, общие вопросы)\n— Успех собеса, дали положительную обратную связь на интервью, жду следующий этап\n— Ссылка: https://disk.yandex.ru/i/9An5QeNiO-wpCw\n\nКомпания работает с таймтрекером, во время работы нужно сидеть в голосовом канале в дс, пойду на знакомство с командой если позовут для тренировки",
        "full_content": "2024-02-22 10:07:08\n Nikita -> 2071074234:\n— Название компании: Wiregate [1 этап - знакомство + техсобес]\n— Что было: теория(Git, bigO, Redux, общие вопросы)\n— Успех собеса, дали положительную обратную связь на интервью, жду следующий этап\n— Ссылка: https://disk.yandex.ru/i/9An5QeNiO-wpCw\n\nКомпания работает с таймтрекером, во время работы нужно сидеть в голосовом канале в дс, пойду на знакомство с командой если позовут для тренировки"
      },
      {
        "timestamp": "2024-02-05 14:27:48",
        "content": "2024-02-05 14:27:48\n m1-iwnl -> 2071074234:\nКомпания: KTS\nВакансия: https://hh.ru/vacancy/92355111\nЗадачи: https://code.yandex-team.ru/77861db1-99ed-4a95-9c15-23a87f147e49\nЗП: 180-250",
        "full_content": "2024-02-05 14:27:48\n m1-iwnl -> 2071074234:\nКомпания: KTS\nВакансия: https://hh.ru/vacancy/92355111\nЗадачи: https://code.yandex-team.ru/77861db1-99ed-4a95-9c15-23a87f147e49\nЗП: 180-250"
      },
      {
        "timestamp": "2024-01-17 15:03:26",
        "content": "2024-01-17 15:03:26\n m1-iwnl -> 2071074234:\n// С бекенда приходит массив такого вида:\nconst arr = [\n  { name: 'width', value: 10 }, \n  { name: 'height', value: 20 },\n  // ...\n];\n\n// Нужно получить объект такого вида:\n/*\n{\n  width: 10,\n  height: 20,\n  ...\n}\n*/\n\nfunction objFromArr(arr) {\n  if(!arr || !arr.length) return {}\n\n  const mapa = {}\n\n  arr.forEach(el => {\n      mapa[el.name] = el.value\n  })\n\n  return mapa;\n}\n\n\n\n// -----------------------------------\n\n/**\n * Нужно написать функцию get. На...",
        "full_content": "2024-01-17 15:03:26\n m1-iwnl -> 2071074234:\n// С бекенда приходит массив такого вида:\nconst arr = [\n  { name: 'width', value: 10 }, \n  { name: 'height', value: 20 },\n  // ...\n];\n\n// Нужно получить объект такого вида:\n/*\n{\n  width: 10,\n  height: 20,\n  ...\n}\n*/\n\nfunction objFromArr(arr) {\n  if(!arr || !arr.length) return {}\n\n  const mapa = {}\n\n  arr.forEach(el => {\n      mapa[el.name] = el.value\n  })\n\n  return mapa;\n}\n\n\n\n// -----------------------------------\n\n/**\n * Нужно написать функцию get. На вход функция принимает объект и путь до поля объекта. \n * Путь – это строка, разделенная точкой. Функция должна вернуть соответствующее поле объекта. \n * Запрашиваемого поля в объекте может не быть.\n */\n\nfunction get(obj, path) {\n    if (!obj) return undefined;\n    const keys = path.split(\".\")\n    let result = obj;\n\n    for(let i = 0; i < keys.length; i++){\n        const currKey = keys[i];\n        const curr = result?.[currKey];\n\n        if(curr === undefined) return undefined;\n        if(curr === null && i === keys.length - 1) return null;\n\n        result = result[currKey]\n    }\n\n    return result;\n}\n\nconst obj = { \n  a: { \n    b: { \n      c: 'd' \n    },\n    x: null,\n    e: null,\n  }\n};\n\nget(obj, 'a.b');   // { c : 'd' }\nget(obj, 'a.b.c'); // 'd'\nget(obj, 'a.e');   // null\nget(obj, 'a.x.e'); // undefined\n\n\n// --------------\n\n// Написать функцию, которая принимает массив чисел. Необходимо определить монотонный он или нет.\n// Примеры:\n// [1, 2, 3] - true\n// [6, 3, 2, 1] - true\n// [5, 5] - true\n// [1, 2, 5, 5, 5, 8, 9] - true\n// [1, 2, 5, 5, 5, 2, 1] - false\n// [1, 10, 6] - false\n// [5, 5, 5, 1] - true\n// [1] - true\n\nconst isMono = (arr) => {\n    let isGoingUp;\n    \n    for(let i = 0; i < arr.length - 1; i++){\n        const cur = arr[i]\n        const next = arr[i + 1];\n\n        if(curr === next) continue;\n\n       if(cur < next && isGoingUp === false) {\n            return false;\n        } else if(cur > next && isGoingUp) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n\n// У нас есть функция asyncAuth(callback) , которая принимает функцию-обработчик, которой можно передать ошибку (1-й аргумент) или необходимые данные (2-й аргумент).\n// Часть 1. Написать функцию auth , которая выполняет asyncAuth , но возвращает Promise .\n\nimport asyncAuth from '.';\n\n// /**\n//  * `asyncAuth()` function receives a callback into which\n//  * an error may be passed (argument 1) or\n//  * data from backend (argument 2).\n//  * \n//  * You need to implement an `auth()` function\n//  * which executes `asyncAuth()`, but returns Promise.\n//  * \n//  * @returns {Promise}\n//  */\n\nfunction auth() {\n    return new Promise((resolve, reject) => asyncAuth((error, data) => {\n        if(error){\n            reject(error);\n            return;\n        }\n\n        resolve(data);\n    }));\n}\n\n- Компания:  Яндекс-документы\n- ЗП: 280 - 350к\n- Задачи с лайвкодинга на 1 этапе"
      },
      {
        "timestamp": "2024-01-11 14:21:37",
        "content": "2024-01-11 14:21:37\n Daniil Max -> 2071074234:\n— Название компании: Yandex.Pay\n— Ссылка на вакансию: https://getmatch.ru/vacancies/15837?s=my_vacancies\nЗП: 320~350К.\n— Задачи: лайвкодинг\n\n1.\nconst deepCopy = obj => {\n        if (obj === null || typeof obj === 'object') {\n            return obj;\n        }\n\n        if (Array.isArray(obj)) {\n            return obj.map(deepCopy);\n        }\n\n        const copy = {};\n\n        for (const key in obj) {\n            copy[key] = deepCopy(obj[key]);\n       ...",
        "full_content": "2024-01-11 14:21:37\n Daniil Max -> 2071074234:\n— Название компании: Yandex.Pay\n— Ссылка на вакансию: https://getmatch.ru/vacancies/15837?s=my_vacancies\nЗП: 320~350К.\n— Задачи: лайвкодинг\n\n1.\nconst deepCopy = obj => {\n        if (obj === null || typeof obj === 'object') {\n            return obj;\n        }\n\n        if (Array.isArray(obj)) {\n            return obj.map(deepCopy);\n        }\n\n        const copy = {};\n\n        for (const key in obj) {\n            copy[key] = deepCopy(obj[key]);\n        }\n\n        return copy;\n    };\n\n2. \nfunction compressstring(input) {\n        let compressed = '';\n        let count = 1;\n\n        for (let i = 0; i < input.length; i++) {\n            if (input[i] === input[i + 1]) {\n                count++;\n            } else {\n                compressed += input[i] + (count > 1 ? count : '');\n\n                count = 1;\n            }\n        }\n\n        return compressed;\n}\n\n3. \nfunction canGetCount(n: number) {\n        let count = 0;\n\n        return function () {\n            count++;\n\n        if (count <= n) {\n            return 'yes';\n        } else return 'no';\n    }\n— Успех собеса: ⁉️\n— Фитбек о собесе ❓\n\n— Комментарий:\nАлгоритмы, которые чаще всего бывают в задачках:\n– сортировки (например, bubble sort или quicksort)\n– разворота одно/двусвязного списка\n– разворота строки\n– обхода дерева\n– на хэш таблицу\n– работы со строками \n– стэк, сортировки\n\nОценка сложности: https://habr.com/ru/post/188010/\n\nСсылки на задачи на leetcode\neasy: https://leetcode.com/explore/interview/card/top-interview-questions-easy/\nmedium: https://leetcode.com/explore/interview/card/top-interview-questions-medium/\n\n\nОбщая инфа про секции: https://yandex.ru/jobs/pages/dev_interview"
      }
    ]
  },
  {
    "company": "Сбер",
    "count": 117,
    "records": [
      {
        "timestamp": "2025-07-18 15:03:59",
        "content": "2025-07-18 15:03:59\n Игорь -> 2071074234:\niFellow в СБЕР\nВакансия: сама написала\nЗП: 280\n\n1) Расскажи про себя + парочка вопросов по резюме\n1.1) Вижу в резюме что писал свой UI kit самописный или на чем то? Ant или MUI использовал?\n1.2) Вижу опыт с Effector, Redux и пр что можешь сказать по ним?\n1.3) Что используешь для кэширования? (useQuery, RTK Query)\n1.4) Вижу опыт с CSS-in-Js что скажешь? Как еще стили писал?\n2) Какие значения знаешь у display? \n3) rem vs em\n4) Как центрировать элемент по в...",
        "full_content": "2025-07-18 15:03:59\n Игорь -> 2071074234:\niFellow в СБЕР\nВакансия: сама написала\nЗП: 280\n\n1) Расскажи про себя + парочка вопросов по резюме\n1.1) Вижу в резюме что писал свой UI kit самописный или на чем то? Ant или MUI использовал?\n1.2) Вижу опыт с Effector, Redux и пр что можешь сказать по ним?\n1.3) Что используешь для кэширования? (useQuery, RTK Query)\n1.4) Вижу опыт с CSS-in-Js что скажешь? Как еще стили писал?\n2) Какие значения знаешь у display? \n3) rem vs em\n4) Как центрировать элемент по вертикали?\n5) Какие способы организации асинхронности знаешь в JS?\n6) Отличие type и interface\n7) Отличие enum и const enum + кейсы использования\n8) Что такое React? Плюсы?\n9) Способы оптимизации? (глубоко не копал)\n10) Для чего нужны ключи?\n11) merge или rebase юзаете?\n\nЗадача 1\n(function() {\n    var a = b = 3;\n})();\nconsole.log(typeof a);\nconsole.log(typeof b);\nЗадача 2 \n'use strict'\n\nconst obj = {\n  i: 10\n  b: () => {\n    console.log(this.i, this)\n  }\n  c: function() {\n    console.log(this.i, this)\n  }\n}\n\nobj.b (undefined, {})\nobj.c (10, obj)\nЗадача 3\nfunction fibonacci(n) {\n  // Обрабатываем базовые случаи:\n  // f(1) = 0, f(2) = 1\n  if (n <= 1) return 0;\n  if (n === 2) return 1;\n  // prev — предыдущее число (f(1))\n  // curr — текущее число (f(2))\n  let prev = 0;\n  let curr = 1;\n  // Начинаем с f(3) и идём до f(n)\n  for (let i = 3; i <= n; i++) {\n    // Вычисляем следующее число Фибоначчи\n    let next = prev + curr;\n\n    // Сдвигаем значения вперёд:\n    // текущее становится предыдущим, а новое — текущим\n    prev = curr;\n    curr = next;\n  }\n  // После завершения цикла curr содержит f(n)\n  return curr;\n}\n\nconsole.log(fibonacci(5)); // 3"
      },
      {
        "timestamp": "2025-07-16 16:47:40",
        "content": "2025-07-16 16:47:40\n Роман -> 2071074234:\nКомпания: Bell integrator(Сбер)\nВопросы:\n-Рассказать о проекте \n-Какой был состав команды\n-Как проводили код-ревью\n-На какой грейд себя оцениваешь\n-Почему увольняешься\n-Методы копирования объектов\nЗадачки:\nЧто выведет в консоль:\nconst a = { prop1: { prop2: \"test2\" } };\nconst b = { ...a };\na.prop1.prop2 = \"test3\";\nconsole.log(b.prop1.prop2); // Выведет: \"test3\"\nlet firstObj = { name: 'Hello' };\n\nlet secondObj = firstObj;\n\nfirstObj = { name: 'Bye' };\n\ncons...",
        "full_content": "2025-07-16 16:47:40\n Роман -> 2071074234:\nКомпания: Bell integrator(Сбер)\nВопросы:\n-Рассказать о проекте \n-Какой был состав команды\n-Как проводили код-ревью\n-На какой грейд себя оцениваешь\n-Почему увольняешься\n-Методы копирования объектов\nЗадачки:\nЧто выведет в консоль:\nconst a = { prop1: { prop2: \"test2\" } };\nconst b = { ...a };\na.prop1.prop2 = \"test3\";\nconsole.log(b.prop1.prop2); // Выведет: \"test3\"\nlet firstObj = { name: 'Hello' };\n\nlet secondObj = firstObj;\n\nfirstObj = { name: 'Bye' };\n\nconsole.log(secondObj.name); // Выведет: 'Hello'\nsetTimeout(() => console.log(1), 0);\n\nnew Promise((resolve) => {\n    console.log(2);\n    resolve(3);\n})\n    .then((res) => console.log(res)) \n    .then((res) => {\n        setTimeout(() => {\n            console.log(res); \n        }, 0);\n    })\n    .then(() => {\n        throw new Error(\"error\"); // \n        console.log(5); \n    })\n    .catch(() => console.log(6)) \n    .then(() => console.log(7)) \n    .finally(() => console.log(8)); \n\nconsole.log(9);\n\n//2 9 3 6 7 8 1 undefined\nНаписать тип someName и написать наиболее оптимальную проверку\ntype ID = string;\n\ninterface Picture {\n    size: number;\n    name: string;\n}\n\ninterface Props {\n    pictures: Record<ID, Picture>;\n    id: string;\n}\n\nconst someName:... = ({ pictures, id }) => Object.entries(pictures)\n        .find(picture => picture[0] === id) !== undefined;\n    \n    return <>{/* ... */}</>;\n};\n\n// const hasPicture: boolean = pictures.hasOwnProperty(id) (Попросил правильно обозвать переменную)\nНаписать функцию reverseString, без использования arr.reverse\nfunction reverseString(str) {\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n}\nНу и дописать реверс для предложения\nfunction reverseWords(sentence) {\n    return sentence.split(' ').map(word => reverseString(word)).join(' ');\n}"
      },
      {
        "timestamp": "2025-07-16 10:13:19",
        "content": "2025-07-16 10:13:19\n Евгений -> 2071074234:\nКомпания iFellow\nПроект: Сбер финансы\nЗП: 230\n\nТимлид не пришел , в итоге был один разраб который не знает на какой именно проект, спросил про опыт\nВопросы: \n1.Есть боль на проекте, 20 тыс объктов приходят их нельзя разбить на части они взаимосвязаны, загрузка долгая, что с этим делать ? \n2. С чем бы хотел поработать\n3. Есть ли офферы\n4. На что ориентируешься при выборе оффера? \nДальше просто общались на разные темы",
        "full_content": "2025-07-16 10:13:19\n Евгений -> 2071074234:\nКомпания iFellow\nПроект: Сбер финансы\nЗП: 230\n\nТимлид не пришел , в итоге был один разраб который не знает на какой именно проект, спросил про опыт\nВопросы: \n1.Есть боль на проекте, 20 тыс объктов приходят их нельзя разбить на части они взаимосвязаны, загрузка долгая, что с этим делать ? \n2. С чем бы хотел поработать\n3. Есть ли офферы\n4. На что ориентируешься при выборе оффера? \nДальше просто общались на разные темы"
      },
      {
        "timestamp": "2025-07-14 06:39:43",
        "content": "2025-07-14 06:39:43\n Kirichelli -> 2071074234:\nКомпания: Сбер\nПроект: Пульс\nРассказать немного про опыт вопросы:\n﻿﻿﻿1. Вводим url что происходит\n﻿﻿﻿2. Если сайт где то на территории другой страны и помешате ли нам открыть страницу(сказал что мы можем использовать днс дружеских стран для того чтобы зайти на сайт)\n﻿﻿﻿3. Рассказать про работу CORS\n﻿﻿﻿4. Нравится ли заниматься версткой?\n﻿﻿﻿5. Flex vs grid когда что использовать\n﻿﻿﻿6. Как сделать разную тему у сайта? Через чистый css\n﻿﻿﻿﻿7. Что наход...",
        "full_content": "2025-07-14 06:39:43\n Kirichelli -> 2071074234:\nКомпания: Сбер\nПроект: Пульс\nРассказать немного про опыт вопросы:\n﻿﻿﻿1. Вводим url что происходит\n﻿﻿﻿2. Если сайт где то на территории другой страны и помешате ли нам открыть страницу(сказал что мы можем использовать днс дружеских стран для того чтобы зайти на сайт)\n﻿﻿﻿3. Рассказать про работу CORS\n﻿﻿﻿4. Нравится ли заниматься версткой?\n﻿﻿﻿5. Flex vs grid когда что использовать\n﻿﻿﻿6. Как сделать разную тему у сайта? Через чистый css\n﻿﻿﻿﻿7. Что находится внутри type DependencyList =\nReadonlyArray<unknown>\n﻿﻿﻿﻿8. Для чего нужен never и void?\n﻿﻿﻿﻿9. Чем отличается стрелочная функция от обычной?\n﻿﻿﻿﻿10. fn.bind(this1) .bind (this2) что будет?(вопрос про bind)\n﻿﻿﻿﻿11. arrowFn.apply(this, []) что будет?\n﻿﻿﻿﻿12. Как можно сделать запрос к серверу?\n﻿﻿﻿﻿13. Как мы можем отслеживать ошибку в промисах?\n﻿﻿﻿﻿14. Как отработает then и catch в каждом случае?\n\nthen().then().catch()\nthen.catch().then()\ncatch().then().then()\n\n15. ﻿﻿﻿﻿Как отловить в async|await в try\\catch?\n﻿﻿﻿﻿16. Если обернуть в блок try код из пункта 17, поймает ли тогда catch из try\\catch ? Почему отловит?\n﻿﻿﻿﻿17. Что такое чистая функция?\n﻿﻿﻿﻿18. let a = 1; ()=>{a =1 ; return 1} это чистая функция?\n﻿﻿﻿﻿19. Кто быстрее отрендерит кнопку реакт или ванильный js ?\n﻿﻿﻿﻿20. Для чего нужно мемоизация? какие методы знаешь и что сделали в реакт 19 для мемоизации?\nЗадача 1:\n\nconst p = new Promise((resolve) => {\n  resolve('');\n});\n\np.then(() => {\n  p.then(() => console.log('A'));\n  console.log('C');\n});\n\np.then(() => console.log('B'));\n\nОтвет: С B A\n\nЗадача 2:\n\n//Сгенерировать массив из 10 элементов, где каждый элемент это случайное число (целое) от 0 до 10. Найти сколько пар чисел из этого массива дают в сумме 10;\n\nfunction randomTen(){\n  const arr = Array.from({length:10},() => Math.floor(Math.random() * 11))\n  const target = 10\n  let count = 0;\n  const template = {}\n  \n  for(const num of arr){\n    const completed = target - num;\n   \n    if(template[completed]){\n      count += template[completed]\n    }\n    template[num] = (template[num] || 0) + 1\n  }\n  console.log('Текущий массив: ', arr)\n   console.log('Количество пар: ', count)\n  return count\n}\n\nrandomTen()"
      },
      {
        "timestamp": "2025-07-10 12:24:07",
        "content": "2025-07-10 12:24:07\n Евгений -> 2071074234:\nКомпания: Сбер\nПроект: HR платформа\nЗнакомство с командой\n\nРасскажи про свой опыт. \nВопросы: \n1) Почему уволился?\n2) Какой видишь свою команду? \n3) Назови 3 своих плюс и 3 минуса\n4) Как решаешь конфликты\n5) Что будешь делать если с бэкенда не нравятся как данные приходят?\n6) Если у вас спор с бекендером как будешь решать ? \n7) Что не нравится в людях? \n8) Что будешь делать данные еще не готовы но задачу надо делать? \n9) Как вы выбирал архитектуру, стек...",
        "full_content": "2025-07-10 12:24:07\n Евгений -> 2071074234:\nКомпания: Сбер\nПроект: HR платформа\nЗнакомство с командой\n\nРасскажи про свой опыт. \nВопросы: \n1) Почему уволился?\n2) Какой видишь свою команду? \n3) Назови 3 своих плюс и 3 минуса\n4) Как решаешь конфликты\n5) Что будешь делать если с бэкенда не нравятся как данные приходят?\n6) Если у вас спор с бекендером как будешь решать ? \n7) Что не нравится в людях? \n8) Что будешь делать данные еще не готовы но задачу надо делать? \n9) Как вы выбирал архитектуру, стек? \n10) Чем занимался, где работал до разработки ? \n11) Какое хобби? \nПотом вопросы к ним"
      },
      {
        "timestamp": "2025-07-10 08:27:58",
        "content": "2025-07-10 08:27:58\n Sentry -> 2071074234:\nСбер Девайс ФИНАЛ\nзп: 250+ \n\nПолтора часа рассказа про опыт, очень долго копались по всем технологиям.\n\nОбщие вопросы:\n\nНастройка ci/ci\nНаписание тестов\nКак решаешь конфликтные ситуации",
        "full_content": "2025-07-10 08:27:58\n Sentry -> 2071074234:\nСбер Девайс ФИНАЛ\nзп: 250+ \n\nПолтора часа рассказа про опыт, очень долго копались по всем технологиям.\n\nОбщие вопросы:\n\nНастройка ci/ci\nНаписание тестов\nКак решаешь конфликтные ситуации"
      },
      {
        "timestamp": "2025-07-09 17:05:42",
        "content": "2025-07-09 17:05:42\n Daniil Daniil -> 2071074234:\nКомпания: Сбербанк SberCraft\nРасскажи о себе\nВопросы по резюме\nТеория:\n1. Как ставились задачки(путь от бизнеса до того, как выкатили в прод)\n2. На что обращаешь внимание при ревью\n3. Какие самые сложные задачки делал\n4. Почему FSD и с какими трудностями столкнулись\n5. Какие тесты писали и что использовали\n6. С какими state manager работал? Какой ты считаешь наиболее оптимальнее?\n7. Делал ли ты адаптивный дизайн и что использовал?\n8. С каким преп...",
        "full_content": "2025-07-09 17:05:42\n Daniil Daniil -> 2071074234:\nКомпания: Сбербанк SberCraft\nРасскажи о себе\nВопросы по резюме\nТеория:\n1. Как ставились задачки(путь от бизнеса до того, как выкатили в прод)\n2. На что обращаешь внимание при ревью\n3. Какие самые сложные задачки делал\n4. Почему FSD и с какими трудностями столкнулись\n5. Какие тесты писали и что использовали\n6. С какими state manager работал? Какой ты считаешь наиболее оптимальнее?\n7. Делал ли ты адаптивный дизайн и что использовал?\n8. С каким препроцессором работал\n9. Сравни css/ccs-in-js\n10. LocalStorage,Session storage, cookie, index db\n11. Подробно про cookie и его теги\n12. Как создать куку\n13. как удалить куку\nДальше дает задачи\nЗадачи и их решение\n\n// пример гласных: a, i, o, e, u, y\n const vowels = new Set(['a', 'i', 'o', 'e', 'u'])\n\nconst findVowelsLength = str => {\n // let count = 0 это решение можешь писать в самом начале как не самое лучше а после оптимизации то, что ниже\n \n  // for(let char of str) {\n  //   if(vowels.includes(char)) {\n  //     count++\n  //   }\n  // }\n  // return count\n\n  if(typeof str !== 'string') throw new Error('Нужна строка')\n  if(!str.length) return 0\n  return Array.from(str).filter(char.toLowerCase() => vowels.has(char)).length\n}\n \nexpect(findVowelsLength('Akksja')).toBe(2);\n\n\n\n---------------\n const API_URL = 'api/tada.json' \n  \nconst fetchData = () => {\n     return fetch(API_URL).then(res => res.json())\n}\n//  ['hello', 'again', 'hello', 'Just called to say hello']\n \n \nfunction OrderList() {\n  const [loading, setLoading] = useState(true)\n  const [errorMsg, setErrorMsg] = useState('')\n  const [data, setData] = useState([])\n  \n  useEffect(() => {\n    fetchData()\n      .then(setData)\n     .catch(e => setErrorMsg(e.message))\n     .finally(() => setLoading(false))\n  },[])\n  \n  if(loading) {\n    return <div>Loading ...</div>\n  }\n  if(errorMsg) {\n    return <div>Error:{errorMsg}</div>\n  }\n  \n    return (\n      <div>\n        ....\n        <ul key='first'>\n        {data.map( (name, idx) => <li key={idx}> {name}</li>)}\n        </ul>\n        .....\n        <ul key='second'>\n        {data.map( (name, idx) => <li key={idx}> {name}</li>)}\n        </ul>\n        </div>\n    )\n}\n        \n\n--------\n\n\n\n// Анаграмма - это слово, образованное путём перестановки букв, составляющих другое слово\n// Дан массив строк, необходимо вернуть массив с массивами анаграмм, которые встречаются в массиве строк более 1 раза\nprocess(['xyz','abc', 'bca', 'zyx', 'klm', 'cab', 'zxy', 'xzy']) // [['xyz', 'zyx', 'zxy', 'xzy'], ['abc','bca', 'cab']]\n\nfunction process (arr) {\n  const map = new Map()\n  \n  for(const word of arr) {\n    const key = word.toLowerCase().split('').sort().join('')\n    if(!map.has(key)) {\n      map.set(key,[])\n    }\n    map.get(key).push(word)\n  }\n  const result = Array.from(map.values()).filter(group => group.length>1)\n  \n  return result\n}"
      },
      {
        "timestamp": "2025-07-09 16:03:46",
        "content": "2025-07-09 16:03:46\n Евгений -> 2071074234:\nКомпания: iFellow\nПроект: Сбер финансы\nЗП: 230\n\nВопросы: \n1. Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, знаковых задачах    \n2. Как у вас выстроен производственный процесс? Команда большая?    \n3. Unit тесты писали? Как писали? Доп: какие еще тесты писал? Какой опыт есть в тестировании?    \n4. Какие ожидания от нового места работы? Чтобы хотелось получить в итоге?    \n5. Какие способы организации CSS кода приходилось ...",
        "full_content": "2025-07-09 16:03:46\n Евгений -> 2071074234:\nКомпания: iFellow\nПроект: Сбер финансы\nЗП: 230\n\nВопросы: \n1. Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, знаковых задачах    \n2. Как у вас выстроен производственный процесс? Команда большая?    \n3. Unit тесты писали? Как писали? Доп: какие еще тесты писал? Какой опыт есть в тестировании?    \n4. Какие ожидания от нового места работы? Чтобы хотелось получить в итоге?    \n5. Какие способы организации CSS кода приходилось использовать?    \n6. Какие значения знаешь у display?    \n7. Какие способы центрировать блок знаешь?    \n8. Какие способы организации асинхронности знаешь в JS?    \n9. Какие способы копирования объекта знаешь? Доп вопрос: При кастомном решении копирования объекта - как скопировать функцию?\n10. Чем типы отличаются от interface ? \n11. Расскажи про Декораторы в typescript\n12. Для чего нужен нужен key в react. Доп вопрос что будет если поменять местами элементы?\n13. В каких случаях нужно использовать мемоизацию и какие способы ты знаешь ? Доп вопрос как ты можешь понять что нужно ее применять? \n14. Что используете на проекте merge или rebase ? \n\nЗадача 1: \n<!--Как на CSS сделать фигуру: в квадрат должны быть вписаны четыре треугольника с общей вершиной в центре?-->\n\n<div class='container'>\n  <div class='triangle red'></div>\n  <div class='triangle green'></div>\n  <div class='triangle yellow'></div>\n</div>\n\n<style>\n   .container {\n  position: relative;\n  width: 200px; /* Настройте размер по необходимости */\n  height: 200px; /* Настройте размер по необходимости */\n}\n\n.triangle {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-style: solid;\n}\n\n.red {\n  border-width: 100px 100px 0 0;\n  border-color: red transparent transparent transparent;\n  top: 0;\n  left: 0;\n}\n\n.green {\n  border-width: 0 0 100px 100px;\n  border-color: transparent transparent green transparent;\n  bottom: 0;\n  right: 0;\n}\n\n.yellow {\n  border-width: 100px 0 0 100px;\n  border-color: transparent transparent transparent yellow;\n  bottom: 0;\n  left: 0;\n} \n    \n</style>\nЗадача 2: \n// Что будет в консоли? И почему именно так?\n(function() {\n    var a = b = 3;\n})();\nconsole.log(typeof a);\nconsole.log(typeof b);\nЗадача 3: \nsetTimeout(() => console.log('timeout'));\nPromise.resolve().then(() => console.log('promise'));\nwindow.requestAnimationFrame(() => console.log('requestAnimationFrame'));\nconsole.log('code');\nЗадача 4: \n//Что будет выведено? И почему именно так?\n//Доп вопрос: что будет с value, которая внутри функции?\n//Доп вопрос: как исправить? Какие есть способы?\n\nvar test = (function() {\n    var value = 1;\n    function setValue(newValue) {\n        value = newValue;\n    }\n    return {\n        value: value,\n        setValue: setValue,\n    };\n})();\n\ntest.setValue(2);\nconsole.log(test.value);\nЗадача 5: \nfunction fibonacci(n) {\n    if (n <= 0) return 0; // Первый элемент последовательности\n    if (n === 1) return 1; // Второй элемент последовательности\n\n    let prevNum = 0; // Предыдущее число\n    let currNum = 1; // Текущее число\n\n    for (let i = 2; i <= n; i++) {\n        const temp = prevNum + currNum; // Следующее число\n        prevNum = currNum; // Обновляем предыдущее число\n        currNum = temp; // Обновляем текущее число\n    }\n\n    return currNum; // тут начал сомневаться, что так возвращать, но проверяющий сказал: принимается, логика мышления ясна - комментировал устно решение\n}\n\n// Пример использования:\nconsole.log(fibonacci(5)); // Вывод: 3"
      },
      {
        "timestamp": "2025-07-07 15:15:06",
        "content": "2025-07-07 15:15:06\n Diyor -> 2071074234:\n1. Сбер Ассистент\n2. Сами написали (даже не сказали что за вака сначала)\n3. ЗП просил от 330\n\n4. Лайвкодинга не было\n1) Зачем нужен key\n2) useEffect кейсы использования\n3) script async defer\n4) Виртуализация, пагинация\n5) Lighthouse\n6) Что происходит после ввода url?\n7) Способ хранить данные\n8) Как сузить тип\n9) Зачем нужен .lock файл\n10) NGINX проблема с SPA",
        "full_content": "2025-07-07 15:15:06\n Diyor -> 2071074234:\n1. Сбер Ассистент\n2. Сами написали (даже не сказали что за вака сначала)\n3. ЗП просил от 330\n\n4. Лайвкодинга не было\n1) Зачем нужен key\n2) useEffect кейсы использования\n3) script async defer\n4) Виртуализация, пагинация\n5) Lighthouse\n6) Что происходит после ввода url?\n7) Способ хранить данные\n8) Как сузить тип\n9) Зачем нужен .lock файл\n10) NGINX проблема с SPA"
      },
      {
        "timestamp": "2025-07-07 14:56:32",
        "content": "2025-07-07 14:56:32\n Евгений -> 2071074234:\nКомпания: Сбер\nПроект: HR-платформа\nЗП: 230\n\nРассказать немного про опыт\nВопросы:\n1. вводим url что происходит\n2. если сайт где то в сша, помешате ли нам открыть страницу\n3. можем ли мы использовать днс дружеских стран для того чтобы зайти на сайт сша\n4. рассказать про работу CORS\n5. Нравится ли заниматься версткой? \n6. flex vs grid когда что использовать\n7. работал ли с ui kit? как был устроен на прошлой работе? \n8. Как сделать разную тему у сайта? Че...",
        "full_content": "2025-07-07 14:56:32\n Евгений -> 2071074234:\nКомпания: Сбер\nПроект: HR-платформа\nЗП: 230\n\nРассказать немного про опыт\nВопросы:\n1. вводим url что происходит\n2. если сайт где то в сша, помешате ли нам открыть страницу\n3. можем ли мы использовать днс дружеских стран для того чтобы зайти на сайт сша\n4. рассказать про работу CORS\n5. Нравится ли заниматься версткой? \n6. flex vs grid когда что использовать\n7. работал ли с ui kit? как был устроен на прошлой работе? \n8. Как сделать разную тему у сайта? Через чистый css \n9. был ли у вас any под запретом? \n10. что находится внутри type DependencyList = ReadonlyArray<unknown>\n11. для чего never ? \n12. чем отличается стрелочная функция от обычной\n13. fn.bind(this1).bind(this2) что будет?\n14. arrowFn.apply(this3, []) что будет? \n15. Как можно сделать запрос к серверу?\n16. Как мы можем отслеживать ошибку в промисах ? \n17. Как отработает then и catch в каждом случае? \nthen().then().catch()\nthen.catch().then()\ncatch().then().then()\n18. чем отличается async\\await при примере в вопросе 17\n19. Как отловить в async\\await в try\\catch\n20. Если обернуть в блок try код из пункта 17, поймает ли тогда catch из try\\catch ? Почему отловит? \n21. Что такое чистая функция?\n22. let a = 1; ()=>{a =1 ; return 1} это чистая функция? \n23. кто быстрее отрендерит кнопку реакт или ванильный js ? \n24. Для чего нужно мемоизация? какие методы знаешь?\n25. Что сделали в реакт 19 для мемоизации?\nЗадача 1: евентлуп, в какой последовательности выведет буквы\nconst p = new Promise((resolve) => {\n  resolve('');\n});\n\np.then(() => {\n  p.then(() => console.log('A'));\n  console.log('C');\n});\n\np.then(() => console.log('B'));\nОтвет: C B A\nЗадача 2: \n/*\nСгенерировать массив из 10 элементов,\nгде каждый элемент это случайное число (целое) от 0 до 10. Найти сколько пар чисел из этого массива дают в сумме 10;\n*/\nfunction countPairsWithSum() {\n  const array = Array.from({ length: 10 }, () => Math.floor(Math.random() * 11));\n  const target = 10;\n\n  // Считаем количество вхождений каждого числа\n  const frequency = {};\n  let count = 0;\n\n  for (const num of array) {\n    const complement = target - num;\n    if (frequency[complement]) {\n      count += frequency[complement];\n    }\n\n    frequency[num] = (frequency[num] || 0) + 1;\n  }\n\n  console.log(array, count);\n  return count;\n}\n\ncountPairsWithSum();"
      },
      {
        "timestamp": "2025-07-04 18:17:47",
        "content": "2025-07-04 18:17:47\n Sentry -> 2071074234:\nСбер Девайс\nЗп: -\n\nЭтап алгосов 3 задачи. \n\nfunction compress(arr) {\n    if (arr.length === 0) return '';\n\n    // Удаляем дубликаты и сортируем массив\n    arr = [...new Set(arr)].sort((a, b) => a - b);\n\n    let result = [];\n    let start = arr[0];\n    let end = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] === end + 1) {\n            // Последовательность продолжается\n            end = arr[i];\n        } else {\n            // Посл...",
        "full_content": "2025-07-04 18:17:47\n Sentry -> 2071074234:\nСбер Девайс\nЗп: -\n\nЭтап алгосов 3 задачи. \n\nfunction compress(arr) {\n    if (arr.length === 0) return '';\n\n    // Удаляем дубликаты и сортируем массив\n    arr = [...new Set(arr)].sort((a, b) => a - b);\n\n    let result = [];\n    let start = arr[0];\n    let end = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] === end + 1) {\n            // Последовательность продолжается\n            end = arr[i];\n        } else {\n            // Последовательность закончилась\n            if (start === end) {\n                result.push(`${start}`);\n            } else {\n                result.push(`${start}-${end}`);\n            }\n            start = end = arr[i];\n        }\n    }\n\n    // Добавляем последнюю последовательность\n    if (start === end) {\n        result.push(`${start}`);\n    } else {\n        result.push(`${start}-${end}`);\n    }\n\n    return result.join(',');\n}\n\n\nfunction oddSort(arr) {\n    // Шаг 1: Разделяем массив на нечетные и четные числа\n    const odds = [];\n    const evens = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 1) {\n            odds.push({ value: arr[i], index: i }); // Сохраняем значение и индекс\n        } else {\n            evens.push({ value: arr[i], index: i });\n        }\n    }\n\n    // Шаг 2: Сортируем нечетные числа по возрастанию\n    odds.sort((a, b) => a.value - b.value);\n\n    // Шаг 3: Создаем новый отсортированный массив\n    let result = new Array(arr.length).fill(null); // Инициализируем результирующий массив\n\n    // Вставляем нечетные числа на их новые позиции\n    for (let i = 0; i < odds.length; i++) {\n        result[odds[i].index] = odds[i].value;\n    }\n\n    // Вставляем четные числа на их исходные позиции\n    for (let i = 0; i < evens.length; i++) {\n        result[evens[i].index] = evens[i].value;\n    }\n\n    return result;\n}\n\n\nconst groupAnagrams = (arr) => {\n  const mapa = {};\n\n  arr.forEach((el) => {\n    const sorted = el.toLowerCase().split(\"\").sort().join(\"\");\n\n    if (!mapa[sorted]) mapa[sorted] = [];\n\n    mapa[sorted].push(el);\n  });\n\n  return Object.values(mapa);\n};"
      },
      {
        "timestamp": "2025-06-18 13:32:19",
        "content": "2025-06-18 13:32:19\n Александр -> 2071074234:\nСбер для экспертов\nЗп - не назвали\nВакансия- https://hh.ru/vacancy/121048726\nРезультат - еще не сказали\nВопрос были по Архитектуре имено фронтенд части!",
        "full_content": "2025-06-18 13:32:19\n Александр -> 2071074234:\nСбер для экспертов\nЗп - не назвали\nВакансия- https://hh.ru/vacancy/121048726\nРезультат - еще не сказали\nВопрос были по Архитектуре имено фронтенд части!"
      },
      {
        "timestamp": "2025-06-17 12:00:46",
        "content": "2025-06-17 12:00:46\n Василий -> 2071074234:\nСбер\n\nСозвон-знакомство с руководителем отдела. Познакомиться, узнать про меня и рассказать про команды и задачи.\nТехнических вопросов не было",
        "full_content": "2025-06-17 12:00:46\n Василий -> 2071074234:\nСбер\n\nСозвон-знакомство с руководителем отдела. Познакомиться, узнать про меня и рассказать про команды и задачи.\nТехнических вопросов не было"
      },
      {
        "timestamp": "2025-06-16 14:13:23",
        "content": "2025-06-16 14:13:23\n Василий -> 2071074234:\nСбер техничка\n\n1) Открыл задачки из редактора \"Что будет в консоли\". Вопросы по принципу работы ивентлуп и замыканию\n2) Какие стадии рендера тормозят виртуализацию больших таблиц. Спрашивал про критический путь рендера, asinc defer. а хотел услышать про transform\n3) \n/**\n * Перегрузка функции sum\n */\nfunction sum(a: number, b: number): number; // Сигнатура для двух чисел\nfunction sum(a: string, b: string): string; // Сигнатура для двух строк\nfunction s...",
        "full_content": "2025-06-16 14:13:23\n Василий -> 2071074234:\nСбер техничка\n\n1) Открыл задачки из редактора \"Что будет в консоли\". Вопросы по принципу работы ивентлуп и замыканию\n2) Какие стадии рендера тормозят виртуализацию больших таблиц. Спрашивал про критический путь рендера, asinc defer. а хотел услышать про transform\n3) \n/**\n * Перегрузка функции sum\n */\nfunction sum(a: number, b: number): number; // Сигнатура для двух чисел\nfunction sum(a: string, b: string): string; // Сигнатура для двух строк\nfunction sum(a: any, b: any): any {         // Реализация функции\n    return a + b;\n}\n\n// Примеры использования\nconst result1 = sum(5, 10);     // 15 (тип number)\nconst result2 = sum(\"Hello, \", \"world!\"); // \"Hello, world!\" (тип string)\n4) \ntype Pick<T, K extends keyof T> = {\n  [P in K]: T[P];\n};\n5) \ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n};\n6) \ntype ResponseSuccess<T> = { payload: T }\ntype ResponseError<E> = { error: E }\n\nconst payloadFrom = <T, E>(data?: ResponseSuccess<T> | ResponseError<E>): T | undefined => {\n  if (data && 'payload' in data) {\n    return data.payload\n  }\n  return undefined\n}\n\nconst errorFrom = <T, E>(data?: ResponseSuccess<T> | ResponseError<E>): E | undefined => {\n  if (data && 'error' in data) {\n    return data.error\n  }\n  return undefined\n}\n\n// Примеры\nconst responseSuccess = {\n  payload: {\n    a: 1,\n    b: '2',\n  },\n}\n\nconst responseError = {\n  error: {\n    message: '123',\n  },\n}\n\nconst payload = payloadFrom(responseSuccess)\n// Тип payload: { a: number; b: string }\n\nconst error = errorFrom(responseError)\n// Тип error: { message: string }\n7) Как реализовать универсальную button\n// components/Button.tsx\nimport React from 'react';\n\ntype ButtonProps = {\n  children: React.ReactNode;\n  onClick?: () => void;\n  type?: 'button' | 'submit' | 'reset';\n  disabled?: boolean;\n};\n\nexport const Button: React.FC<ButtonProps> = ({\n  children,\n  onClick,\n  type = 'button',\n  disabled = false,\n}) => {\n  return (\n    <button type={type} onClick={onClick} disabled={disabled}>\n      {children}\n    </button>\n  );\n};\n8) Как из оригинальной Button вытащить атрибуты \ntype ButtonProps = {\n  children: React.ReactNode;\n} & React.ButtonHTMLAttributes<HTMLButtonElement>;\n9) Спрашивал про Solid, принци open close\n10) \nfunction mergeSortedArrays(arr1, arr2) {\n  const merged = []; // Итоговый массив для результата\n  let i = 0; // Индекс для первого массива\n  let j = 0; // Индекс для второго массива\n\n  // Пока не дошли до конца одного из массивов\n  while (i < arr1.length && j < arr2.length) {\n    // Сравниваем текущие элементы двух массивов\n    if (arr1[i] < arr2[j]) {\n      // Если элемент из первого массива меньше, добавляем его в merged\n      merged.push(arr1[i]);\n      i++; // двигаемся дальше по первому массиву\n    } else {\n      // Иначе добавляем элемент из второго массива\n      merged.push(arr2[j]);\n      j++; // двигаемся дальше по второму массиву\n    }\n  }\n  return merged; // Возвращаем объединённый отсортированный массив\n}"
      },
      {
        "timestamp": "2025-06-11 08:36:40",
        "content": "2025-06-11 08:36:40\n Василий -> 2071074234:\nСбер знакомство с лидом\n\nЦель собеса познакомить с процессами в команде (Сбер Пульс - команда солянка собрана из кусочков других команд, сейчас разработка похожа на стартап).\nМеня спрашивали только о том, на каких этапах у меня другие собесы.",
        "full_content": "2025-06-11 08:36:40\n Василий -> 2071074234:\nСбер знакомство с лидом\n\nЦель собеса познакомить с процессами в команде (Сбер Пульс - команда солянка собрана из кусочков других команд, сейчас разработка похожа на стартап).\nМеня спрашивали только о том, на каких этапах у меня другие собесы."
      },
      {
        "timestamp": "2025-06-08 06:39:54",
        "content": "2025-06-08 06:39:54\n Василий -> 2071074234:\nСбер Пульс техничка (1\\3 частей)\n\n1) Путь от запроса Url в адресной строке до рендера\n2) безопасность frontend приложения\n3) flex и grid разница\n4) Что делает тип type DependencyList = ReadonlyArray<unknown>\n5) разница never и void\n6) разница стрелочной и функции declaration\n7) как перехватить ошибку в fetch запросе\n8) зачем нужен react. В маленьком одностраничном приложении, что быстрее html+js или jsx\n9) Мемоизация в react как и зачем\n10) простая зад...",
        "full_content": "2025-06-08 06:39:54\n Василий -> 2071074234:\nСбер Пульс техничка (1\\3 частей)\n\n1) Путь от запроса Url в адресной строке до рендера\n2) безопасность frontend приложения\n3) flex и grid разница\n4) Что делает тип type DependencyList = ReadonlyArray<unknown>\n5) разница never и void\n6) разница стрелочной и функции declaration\n7) как перехватить ошибку в fetch запросе\n8) зачем нужен react. В маленьком одностраничном приложении, что быстрее html+js или jsx\n9) Мемоизация в react как и зачем\n10) простая задачки на знание eventloop (ответ СВА)"
      },
      {
        "timestamp": "2025-06-03 08:21:14",
        "content": "2025-06-03 08:21:14\n Kamil -> 2071074234:\nКомпания: Сбер для экспертов\nВакансия: Frontend-разработчик (Architect.Hub) \nhttps://rabota.sber.ru/search/4418648/\nЗП: 250 тыс. рублей\n\nСразу перешли к задачам:\n\n1. user.getName()\nconst user = {\n  name: 'Ivan',\n  getName: () => {\n    console.log('name: ', this.name);\n  },\n};\nuser.getName();\nРешение:\nname: undefined\ngetName — стрелочная функция, она не имеет собственного this и берёт его из внешнего контекста. Здесь this указывает на глобальный объект (w...",
        "full_content": "2025-06-03 08:21:14\n Kamil -> 2071074234:\nКомпания: Сбер для экспертов\nВакансия: Frontend-разработчик (Architect.Hub) \nhttps://rabota.sber.ru/search/4418648/\nЗП: 250 тыс. рублей\n\nСразу перешли к задачам:\n\n1. user.getName()\nconst user = {\n  name: 'Ivan',\n  getName: () => {\n    console.log('name: ', this.name);\n  },\n};\nuser.getName();\nРешение:\nname: undefined\ngetName — стрелочная функция, она не имеет собственного this и берёт его из внешнего контекста. Здесь this указывает на глобальный объект (window в браузере, undefined в strict mode).\n\n\n2. palette.getColor()\nconst palette = {\n  color: 'red',\n  color: 'blue',\n  getColor() {\n    console.log('color: ', this.color);\n  },\n};\npalette.getColor();\nРешение:\ncolor: blue\nОбъект не может иметь два одинаковых ключа — 'red' перезаписывается 'blue'. Метод getColor() — обычная функция, this указывает на palette.\n\n\n3. foo()\nfunction foo() {\n  console.log(this === window);\n}\nfoo();\nРешение:\ntrue\nВ глобальном контексте обычная функция (function foo()) привязана к глобальному объекту (window в браузере). В strict mode this будет undefined.\n\n4. bar()\nconst bar = () => {\n  console.log(this === window);\n};\nbar(); \n\n5.  Конструктор функции\nfunction Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\nconst p = Person('Ivan', 'Petrov');\n6. Работа с Map и spread оператор\nconst data = new Map();\ndata.set('foo', { a: 'bar' });\nconst dataCopy = { ...data };\n7. Присваивание объекта по ссылке\nconst person = {\n  name: 'Ivan',\n  age: 23,\n};\nconst newPerson = person;\nnewPerson.name = 'Bob';\n// console.log(newPerson.name);\n8. Создание объекта через конструктор Object\nconst anotherPerson = {};\nanotherPerson['name'] = 'Bob';\nanotherPerson['age'] = '32';\n// console.log(anotherPerson);\n9. Потеря контекста this при извлечении метода\nconst obj = {\n  name: 'Ivan',\n  getName() {\n    return this.name;\n  },\n};\nconst name = obj.getName;\nconsole.log('name: ', name());\nРешение:\n// 1. Вызвать метод на объекте\nconsole.log('name: ', obj.getName());\n\n// 2. Привязать контекст с помощью bind\nconst name = obj.getName.bind(obj);\nconsole.log('name: ', name());\n\n// 3. Использовать стрелочную функцию\nconst name = () => obj.getName();\nconsole.log('name: ', name());\n10. Нужно чтобы  \"1+5\" было отложенным\nconst sum = (a, b) => {\n  return a + b;\n};\nconsole.log(sum(1 + 5, 2));\n11. До этой задачи я не дошёл\nasync function fs_mkdir() {\n  throw new Error('bad error');\n}\n\nasync function getObj() {\n  return { foo: 'foo' };\n}\n\nasync function run() {\n  try {\n    const result1 = await fs_mkdir();\n    const result2 = await getObj();\n    console.log('results: ', { result1, result2 });\n  } catch (error) {\n    console.error(error);\n  }\n}\nrun();"
      },
      {
        "timestamp": "2025-05-22 14:05:39",
        "content": "2025-05-22 14:05:39\n Ivan -> 2071074234:\nКомпания - Сбер-навигатор,\nпозиция - мидл-разработчик,\nзп - не обсуждали\n\nСобес обещали на час, в итоге 2 часа, интервьюер - молодой скромный парень, каверзных вопросов не задавал =)\n\nВопросы:\n- Расскажи о последнем месте работе и какие интересные задачи выполнил.\n- Чем отличаются Var let и Const?\n- Чем отличаются примитивные ссылочные типы. (Хочет услышать про мутирование ссылочных).\n- Что такое Promises?\n- Что такое Реакт и как он работает.\n- Чем отлича...",
        "full_content": "2025-05-22 14:05:39\n Ivan -> 2071074234:\nКомпания - Сбер-навигатор,\nпозиция - мидл-разработчик,\nзп - не обсуждали\n\nСобес обещали на час, в итоге 2 часа, интервьюер - молодой скромный парень, каверзных вопросов не задавал =)\n\nВопросы:\n- Расскажи о последнем месте работе и какие интересные задачи выполнил.\n- Чем отличаются Var let и Const?\n- Чем отличаются примитивные ссылочные типы. (Хочет услышать про мутирование ссылочных).\n- Что такое Promises?\n- Что такое Реакт и как он работает.\n- Чем отличается TypeScript от JavaScript?\n- Какие Знаешь Utility Types и какие из них использовал?\n\nИ одна задача: попросил склонировать репозиторий и дописать приложение:\n\nЗадание:\n\n// 0. Добавить типизацию\n// 1. Получить список пользователей и отобразить их список\n// 2. Реализовать функцию удаления пользователя\n// 3. Реализовать компонент формы добавления пользователя\n//    - Создание должно работать при нажатии на enter или клик на кнопку\n//    - Установить фокус на форму с названием\n// 4. Избавиться от лишних ререндеров\n// 5. Любые улучшения на свой вкус\n\nИтог: 😒"
      },
      {
        "timestamp": "2025-05-19 16:56:42",
        "content": "2025-05-19 16:56:42\n Sasha -> 2071074234:\nСбер.\n\nСкрин 1\nВопросы: \n1. Что будет выводиться в консоль и на каком этапе?\n2. Можешь ли ты гарантировать, что useEffect  отработает один раз?\n\nСкрин 2\nВопросы:\n1. Что делает unwrap?\n2. Что нужно указать вместо - ?\n\nСкрин 3\nВопросы:\n\n1. Расскажи про unknown. Что такое TypeGuard (далее TG)? Для чего нужен TG? Что означает ключевое слово is в TG?\n2. Расскажи про три сценария использования extends\n3. Как типизировать пустой объект?\n4. Как типизировать объе...",
        "full_content": "2025-05-19 16:56:42\n Sasha -> 2071074234:\nСбер.\n\nСкрин 1\nВопросы: \n1. Что будет выводиться в консоль и на каком этапе?\n2. Можешь ли ты гарантировать, что useEffect  отработает один раз?\n\nСкрин 2\nВопросы:\n1. Что делает unwrap?\n2. Что нужно указать вместо - ?\n\nСкрин 3\nВопросы:\n\n1. Расскажи про unknown. Что такое TypeGuard (далее TG)? Для чего нужен TG? Что означает ключевое слово is в TG?\n2. Расскажи про три сценария использования extends\n3. Как типизировать пустой объект?\n4. Как типизировать объект с помощью Record? Какой синтаксис? Как указать разные типы?\n\nОстальные вопросы: \nРаботал ли css module? Что такое Tailwind? Как сделать так, чтобы при ошибке в className, код не собирался ?"
      },
      {
        "timestamp": "2025-04-15 00:56:25",
        "content": "2025-04-15 00:56:25\n Ber -> 2071074234:\n— Название компании: iFellow (Сбер Финансы), 1 этап (технический) в Сбере\n— Ссылка на вакансию: https://ifellow.ru/vacancy/frontend-razrabotchik-react/\n— ЗП: 250 гросс\n— Вопросы:\n1) Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, \nзнаковых задачах\n2) Как у вас выстроен производственный процесс? Команда большая?\n3) Unit тесты писали? Как писали? Доп: какие еще тесты писал? Какой опыт есть в тестировании?\n4) Какие ожидания от но...",
        "full_content": "2025-04-15 00:56:25\n Ber -> 2071074234:\n— Название компании: iFellow (Сбер Финансы), 1 этап (технический) в Сбере\n— Ссылка на вакансию: https://ifellow.ru/vacancy/frontend-razrabotchik-react/\n— ЗП: 250 гросс\n— Вопросы:\n1) Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, \nзнаковых задачах\n2) Как у вас выстроен производственный процесс? Команда большая?\n3) Unit тесты писали? Как писали? Доп: какие еще тесты писал? Какой опыт есть в тестировании?\n4) Какие ожидания от нового места работы? Чтобы хотелось получить в итоге?\n5) Какие способы организации CSS кода приходилось использовать?\n6) Какие значения знаешь у display?\n7) Какие способы центрировать блок знаешь?\n8) Какие способы организации асинхронности знаешь в JS?\n9) Какие способы копирования объекта знаешь?\nДоп вопрос: При кастомном решении копирования объекта - как скопировать функцию?\n10) Как внутри обработчика события onClick получить доступ к элементу, по которому \nпользователь кликнул?\n11) Какое отличие event.target от event.currentTarget?\n12) Чем useEffect отличается от useLayoutEffect?\n13) \n<!--Как на CSS сделать фигуру: в квадрат должны быть вписаны четыре треугольника с общей вершиной в центре?-->\n\n<div class='container'>\n  <div class='triangle red'></div>\n  <div class='triangle green'></div>\n  <div class='triangle yellow'></div>\n</div>\n\n<style>\n   .container {\n  position: relative;\n  width: 200px; /* Настройте размер по необходимости */\n  height: 200px; /* Настройте размер по необходимости */\n}\n\n.triangle {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-style: solid;\n}\n\n.red {\n  border-width: 100px 100px 0 0;\n  border-color: red transparent transparent transparent;\n  top: 0;\n  left: 0;\n}\n\n.green {\n  border-width: 0 0 100px 100px;\n  border-color: transparent transparent green transparent;\n  bottom: 0;\n  right: 0;\n}\n\n.yellow {\n  border-width: 100px 0 0 100px;\n  border-color: transparent transparent transparent yellow;\n  bottom: 0;\n  left: 0;\n} \n    \n</style>\n14) \n// Что будет в консоли? И почему именно так?\n(function() {\n    var a = b = 3;\n})();\nconsole.log(typeof a);\nconsole.log(typeof b);\n15) \nsetTimeout(() => console.log('timeout'));\nPromise.resolve().then(() => console.log('promise'));\nwindow.requestAnimationFrame(() => console.log('requestAnimationFrame'));\nconsole.log('code');\n16)\n// Что будет выведено?\n// Доп вопрос: что будет, если убрать 'use strict'?\n\n'use strict';\n\nvar obj = {\n    i: 10,\n    b: () => console.log(this.i, this),\n    c: function() {\n        console.log(this.i, this)\n    }\n}\n\nobj.b();\nobj.c();\n17) \n//Что будет выведено? И почему именно так?\n//Доп вопрос: что будет с value, которая внутри функции?\n//Доп вопрос: как исправить? Какие есть способы?\n\nvar test = (function() {\n    var value = 1;\n    function setValue(newValue) {\n        value = newValue;\n    }\n    return {\n        value: value,\n        setValue: setValue,\n    };\n})();\n\ntest.setValue(2);\nconsole.log(test.value);\n18) \n// Что будет выведено и почему именно так?\n\nclass A {\n    constructor () {\n        this.value = 10;\n    }\n\n    print() {\n        console.log(this.value)\n    }\n}\n\nconst a = new A;\n\nconst print = a.print;\nprint() //?\n\nconst b = new B(print);\n\nclass B {\n    constructor(foo) {\n        foo();   // ?\n        print(); // ?\n    }\n}\n19) Написать функцию, которая будет возвращать число Фибоначчи\nНаписал это решение:\nfunction fibonacci(n) {\n    if (n <= 0) return 0; // Первый элемент последовательности\n    if (n === 1) return 1; // Второй элемент последовательности\n\n    let prevNum = 0; // Предыдущее число\n    let currNum = 1; // Текущее число\n\n    for (let i = 2; i <= n; i++) {\n        const temp = prevNum + currNum; // Следующее число\n        prevNum = currNum; // Обновляем предыдущее число\n        currNum = temp; // Обновляем текущее число\n    }\n\n    return currNum; // тут начал сомневаться, что так возвращать, но проверяющий сказал: принимается, логика мышления ясна - комментировал устно решение\n}\n\n// Пример использования:\nconsole.log(fibonacci(5)); // Вывод: 3\n\n— Успех собеса: ✅\n— Фитбек о собесе от HR: ос отличная, готовы пригласить на финальный этап - знакомство с командой"
      },
      {
        "timestamp": "2025-04-10 22:13:14",
        "content": "2025-04-10 22:13:14\n Ostrov Ostrov -> 2071074234:\nКомпания: Сбер CIB Research (2 этап - команда)\n\nЗП - от 250k\n📢 Вакансия - hr написала\n\n❓ Вопросы:\n\n1.  Что тебя привлекает на том проекте, на котором ты работаешь?\n2.  Какая твоя роль в проекте? \n3.  За какие задачи отвечаешь и что делал. В каком виде это проявляется?\n4.  Как взаимодействуете в команде? \n5.  Как до тебя доходит задача?\n6.  Какой технический стек используете?\n7.  Где черпаешь свой интерес и мотивацию?\n8.  А что вообще за проект, н...",
        "full_content": "2025-04-10 22:13:14\n Ostrov Ostrov -> 2071074234:\nКомпания: Сбер CIB Research (2 этап - команда)\n\nЗП - от 250k\n📢 Вакансия - hr написала\n\n❓ Вопросы:\n\n1.  Что тебя привлекает на том проекте, на котором ты работаешь?\n2.  Какая твоя роль в проекте? \n3.  За какие задачи отвечаешь и что делал. В каком виде это проявляется?\n4.  Как взаимодействуете в команде? \n5.  Как до тебя доходит задача?\n6.  Какой технический стек используете?\n7.  Где черпаешь свой интерес и мотивацию?\n8.  А что вообще за проект, на котором ты работаешь?\n9.  Что ты хочешь найти на нашем проекте? Почему уходишь со своего?\n10.  Какие задачи тебя вообще интересуют как фронта?\n11.  Как выглядит твоя команда? Сколько человек на фронте?\n12.  Есть ли код ревью на том проекте где ты работаешь, и как оно выглядит?\n13.  Бывало ли такое что что-то не успевали за спринт? Что в таком случае ты делаешь?"
      },
      {
        "timestamp": "2025-04-10 22:12:03",
        "content": "2025-04-10 22:12:03\n Ostrov Ostrov -> 2071074234:\nКомпания: Сбер CIB Research (1 этап - тех)\n\nЗП - от 250k\n\n📢 Вакансия - hr написала\n\n❓ Вопросы\n\n1.Расскажи про себя, кратко про опыт. Какие задачи выполнял?\n2. Зачем нужны data атрибуты и можно ли  в них хранить пароли? (пароли нельзя хранить)\n3. Для чего нужны медиа-запросы в css?\n4. Разница между position relative, fixed, absolute\n5. Как вы следите за чистотой кода в проекте? И следите ли вообще?\n6. В работе git используете?\nЧто такое git stash?...",
        "full_content": "2025-04-10 22:12:03\n Ostrov Ostrov -> 2071074234:\nКомпания: Сбер CIB Research (1 этап - тех)\n\nЗП - от 250k\n\n📢 Вакансия - hr написала\n\n❓ Вопросы\n\n1.Расскажи про себя, кратко про опыт. Какие задачи выполнял?\n2. Зачем нужны data атрибуты и можно ли  в них хранить пароли? (пароли нельзя хранить)\n3. Для чего нужны медиа-запросы в css?\n4. Разница между position relative, fixed, absolute\n5. Как вы следите за чистотой кода в проекте? И следите ли вообще?\n6. В работе git используете?\nЧто такое git stash? Как достать последнее сохранение из git stash ? (git stash pop)\n7. В чем разница между git rebase и git merge?\n8. Какой способ у себя на работе используете?\n9. Сколько потоков в js?\n(хочет услышать про веб-воркеры)\n10. Каким образом устроена асинхронность в js ? (про event loop)\n11. Расскажи про событийную модель в браузере. Как остановить всплытие?\n11. Что такое Promise? Для чего нужен? Как  обработать его?\n12. Какой тип данных возвращает метод массива  .reduce() ?\n13. В чем разница между function declaration и function expression? В чем разница между стрелочными функциями и  fd и fe?\n14. Какие хуки на работе используешь?\n15. setState синхронный или асинхронный? И почему он асинхронный? Для чего?\n16. Расскажи про useEffect все что знаешь? как его можно применять? Как он устроен (синтаксис). Какие параметры принимает?\n17. Хук useCallback. Для чего? Когда его нужно применять, а когда не нужно?\n18. Для чего в рендере списков нужно передавать key в React?\n\n\n🧑🏻‍💻Лайвкодинг: \n-1 архив с задачей\n-2 с валидным решением\nВ краце: работа с таблицей в реакте"
      },
      {
        "timestamp": "2025-03-28 06:40:12",
        "content": "2025-03-28 06:40:12\n Матвей Захаров -> 2071074234:\nСбер HR-пульс (3 этап, с командой)\nВакансия: https://hh.ru/vacancy/118077320.\n\nВопросы:\n\n- Расскажи о себе\n- Как проводили ревью кода, на что обращаю внимание при ревью\n- Как приходили задачи\n- В каком бы направлении хотел развиваться \n- Зачем нужны стейт-менеджеры\n- Было ли межкомандное взаимодействие",
        "full_content": "2025-03-28 06:40:12\n Матвей Захаров -> 2071074234:\nСбер HR-пульс (3 этап, с командой)\nВакансия: https://hh.ru/vacancy/118077320.\n\nВопросы:\n\n- Расскажи о себе\n- Как проводили ревью кода, на что обращаю внимание при ревью\n- Как приходили задачи\n- В каком бы направлении хотел развиваться \n- Зачем нужны стейт-менеджеры\n- Было ли межкомандное взаимодействие"
      },
      {
        "timestamp": "2025-03-25 11:41:16",
        "content": "2025-03-25 11:41:16\n Матвей Захаров -> 2071074234:\nКомпания: Сбер \"HR-платформа Пульс\"\n\nВакансия: https://hh.ru/vacancy/118077320\n\nНесколько маленьких задач как здесь и похожих на них: \n\nhttps://t.me/c/2071074234/489/100927\nhttps://t.me/c/2071074234/489/44821\n\nИ задачи на скрине",
        "full_content": "2025-03-25 11:41:16\n Матвей Захаров -> 2071074234:\nКомпания: Сбер \"HR-платформа Пульс\"\n\nВакансия: https://hh.ru/vacancy/118077320\n\nНесколько маленьких задач как здесь и похожих на них: \n\nhttps://t.me/c/2071074234/489/100927\nhttps://t.me/c/2071074234/489/44821\n\nИ задачи на скрине"
      },
      {
        "timestamp": "2025-02-25 11:14:56",
        "content": "2025-02-25 11:14:56\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - финал\nСсылка на вакансию: написала HR\nЗП: от 250к\n\nВопросы от компании:\n1) Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, знаковых задачах.\n2) Как у вас выстроен производственный процесс? Команда большая?\n3) Комфортно в коллективе разработчиков или одному работать?\n4) Сталкивался ли с DevOps? Сам можешь настроить и/или делать правки в конфигах?\n\nРассказ о продукте и сервисе Сбера куда идет набор.\n\n...",
        "full_content": "2025-02-25 11:14:56\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - финал\nСсылка на вакансию: написала HR\nЗП: от 250к\n\nВопросы от компании:\n1) Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, знаковых задачах.\n2) Как у вас выстроен производственный процесс? Команда большая?\n3) Комфортно в коллективе разработчиков или одному работать?\n4) Сталкивался ли с DevOps? Сам можешь настроить и/или делать правки в конфигах?\n\nРассказ о продукте и сервисе Сбера куда идет набор.\n\nВстречные вопросы:\n1) Расскажите о команде.\n2) Какой стек на сервисе.\n3) Расскажите про особенности UI kitа.\n4) Как часто проходят релизы?\n5) Во сколько проходят дейли и какая продолжительность?\n6) Где проходит общение команды?\n7) Какие ожидания от нового разработчика?\n8) Какие планы по запуску/развитию  продукта в целом?"
      },
      {
        "timestamp": "2025-02-21 12:46:43",
        "content": "2025-02-21 12:46:43\n alzor -> 2071074234:\nАудиозапись к собеседованияю\nКомпания: iFellow(Сбер) - 2ой этап\nСсылка на вакансию: написала HR\nЗП: от 250к",
        "full_content": "2025-02-21 12:46:43\n alzor -> 2071074234:\nАудиозапись к собеседованияю\nКомпания: iFellow(Сбер) - 2ой этап\nСсылка на вакансию: написала HR\nЗП: от 250к"
      },
      {
        "timestamp": "2025-02-21 12:45:05",
        "content": "2025-02-21 12:45:05\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - 2ой этап\nСсылка на вакансию: написала HR\nЗП: от 250к\n\n1. Расскажи о себе, о своем опыте, чем занимался, что такого классного делал в последнее время, что получалось, что не получалось?\n2. Расскажи про команду, сколько фронтов в команде было?\n3. Как были устроены процессы(Agile, kanban)?\n4. Код ревью было, как проходило?\n5. Как оцениваешь погружонность других команд в ваш проект?(тк кросс командное ревью кода)\n6. Unit тесты писал...",
        "full_content": "2025-02-21 12:45:05\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - 2ой этап\nСсылка на вакансию: написала HR\nЗП: от 250к\n\n1. Расскажи о себе, о своем опыте, чем занимался, что такого классного делал в последнее время, что получалось, что не получалось?\n2. Расскажи про команду, сколько фронтов в команде было?\n3. Как были устроены процессы(Agile, kanban)?\n4. Код ревью было, как проходило?\n5. Как оцениваешь погружонность других команд в ваш проект?(тк кросс командное ревью кода)\n6. Unit тесты писали? Есть смысл тратить на это время?\n7. Почему работу меняешь? Что не устраивает?\n8. Удаленно работаешь?\n9. Какие ожидания от нового места работы? Чтобы хотелось получить в итоге?\n\n1.Какие способы организации CSS кода приходилось использовать?\n2.Какие значения знаешь у св-ва  display?\n3.Какие способы центрировать блок знаешь?\n4.Как работает z-index?\n5.Может ли меньший z-index перекрыть больший?\n6.Какие способы организации асинхронности знаешь в js?\n7.Какие способы копирования объекта знаешь?\n8.Как внутри обработчика события onClick получить доступ к элементу по которому пользователь кликнул?\n9. Какое отличие event.target от event.currentTarget?\n10. Чем type от interface отличается в TS?\n11. Чем useEffect отличается от useLayoutEffect?\n12. Зачем нужен атрибут key?\n13. Скажи чем merge от rebase отличается?\n\nЗадача 1: как на CSS сделать фигуру: в квадрат вписаны четыре треугольника с общей вершиной в центре:\n\n<div class=\"container\">\n  <div class=\"triangle red\"></div>\n  <div class=\"triangle green\"></div>\n  <div class=\"triangle yellow\"></div>\n</div>\n\n\n.container {\n  position: relative;\n  width: 200px; /* Настройте размер по необходимости */\n  height: 200px; /* Настройте размер по необходимости */\n}\n.triangle {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-style: solid;\n}\n.red {\n  border-width: 100px 100px 0 0;\n  border-color: red transparent transparent transparent;\n  top: 0;\n  left: 0;\n}\n.green {\n  border-width: 0 0 100px 100px;\n  border-color: transparent transparent green transparent;\n  bottom: 0;\n  right: 0;\n}\n.yellow {\n  border-width: 100px 0 0 100px;\n  border-color: transparent transparent transparent yellow;\n  bottom: 0;\n  left: 0;\n}\n\n\nЗадача 2: Что будет в консоли?\n\n(function(){\n    var a = b = 3;\n})();\nconsole.log(typeof a);\nconsole.log(typeof b);\n\nОтвет: undefined number\n\nЗадача 3: Что будет в консоли?\n\nsetTimeout(() => console.log(\"timeout\"));\n\nPromise.resolve().then(() => console.log(\"promise\"));\n\nwindow.requestAnimationFrame(() => console.log(\"requestAnimationFrame\"));\n\nconsole.log(\"code\");\n \nОтвет: code promise requestAnimationFrame timeout\n\nЗадача 4: Что будет в консоли?\n\n'use strict';\n\nvar obj = {\n  i: 10,\n  b: () => console.log(this.i, this),\n  c: function() {\n    console.log(this.i, this);\n  }\n}\nobj.b(); \nobj.c(); \n\nОтвет: \nпри 'use strict': \nobj.b(); // undefined, undefined\nobj.c(); // 10, объект obj\n\nбез 'use strict':\nobj.b(); // undefined, window\nobj.c(); // 10, объект obj\n\nЗадача 5: Что будет в консоли?\n\nvar test = (function() {\n    var value = 1;\n    function setValue(newValue) {\n        value = newValue;\n    }\n    return {\n        value: value,\n        setValue: setValue,\n    };\n})();\n\ntest.setValue(2);\nconsole.log(test.value); \n\nОтвет: 1\nДоп. вопрос: если удалить value: value, что будет?\nОтвет: undefined\n \nЗадача 6: Напишите функцию которая возвращает n-е число Фибоначчи.\n\nfunction fibonacci(n) {\n    if (n <= 0) return 0; // Первый элемент последовательности\n    if (n === 1) return 1; // Второй элемент последовательности\n\n    let a = 0; // Предыдущее число\n    let b = 1; // Текущее число\n\n    for (let i = 2; i <= n; i++) {\n        const temp = a + b; // Следующее число\n        a = b; // Обновляем предыдущее число\n        b = temp; // Обновляем текущее число\n    }\n\n    return a; // Возвращаем предыдущее число, так как цикл идет до n\n}\n\n// Пример использования:\nconsole.log(fibonacci(5)); // Вывод: 3"
      },
      {
        "timestamp": "2025-02-14 19:34:15",
        "content": "2025-02-14 19:34:15\n alzor -> 2071074234:\nКомпания: iFellow(Сбер)\nСсылка на вакансию: написала HR\nЭтап: 1ый этап тех. собеса\nЗП: от 250к",
        "full_content": "2025-02-14 19:34:15\n alzor -> 2071074234:\nКомпания: iFellow(Сбер)\nСсылка на вакансию: написала HR\nЭтап: 1ый этап тех. собеса\nЗП: от 250к"
      },
      {
        "timestamp": "2025-02-14 15:56:32",
        "content": "2025-02-14 15:56:32\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - 1эй этап\nСсылка на вакансию: написала  HR\nЗП: от 250к\nВопросы.\n\nБлок 1(Теория):\n1) Что такое промисы, как используешь в проектах, что предпочитаешь: async-await или .then.catch?\n2) Назови статические методы промисов.\n3) Назови реальный use case для Promice.race.\n4) Расскажи про Event Loop.\n5) Где кроме браузера может работать Event Loop?\n6) Были случаи в практике для использования Event Loop? Чтобы действительно помогло.\n7) Назо...",
        "full_content": "2025-02-14 15:56:32\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - 1эй этап\nСсылка на вакансию: написала  HR\nЗП: от 250к\nВопросы.\n\nБлок 1(Теория):\n1) Что такое промисы, как используешь в проектах, что предпочитаешь: async-await или .then.catch?\n2) Назови статические методы промисов.\n3) Назови реальный use case для Promice.race.\n4) Расскажи про Event Loop.\n5) Где кроме браузера может работать Event Loop?\n6) Были случаи в практике для использования Event Loop? Чтобы действительно помогло.\n7) Назови типы данных в JS.\n8) Какой тип данных у массивов?\n9) Был ли опыт работы с прототипами?\n10) Расскажи про DOM, что это такое в контексте JS? \n11) Как в JS получить доступ к какому либо узлу(ноде)?\n12) Расскажи про фазы всплытия-погружения.\n13) Как остановить всплытие?\n14) Есть опыт верстки? На сколько этот процесс нравится?\n15) Как центрировать блок с помощью CSS?\n16) Чем блочные элементы отличаются от строчных?\n17) Какие методы адаптивной верстки знаешь?\n18) В чем отличие единиц измерения em от rem?\n19) Теоретическая задача: есть шапка(header), слева логотип, справа кнопка. Как утощить кнопку вправо?\nОтвет на задачу: 1) хедеру сделать display: flex,  justify-content: space-between 2) кнопке margin-left: auto;\n20) Какую задачу решает React? Зачем он нужен?\n21) Разрабатывал компоненты на классах?\n22) Почему команда React решила отказаться от классовых компонентов и перешла к функциональным с разработкой хуков?\n23) Почему команда React заявляет, что хуки должны быть чистыми?\n24) Props которые прокидываются в компоненты можно мутировать или нельзя?\n25) Приведи пример когда можно мутировать состояние в React? //WTF\n26) Часто используешь хук useCallback и для чего?\n27) Были реальные случаи использования useCallback и ты ощущал пользу от него?\n28) Были ли случаи в твоей практике оптимизации приложение с влиянием на UX?\n29) Приведи пример способа оптимизации дорогой(объемной) операции чтобы она не влияла на весь остальной компонент.\n30) В каких случаях в React запускается ререндеринг?\n31) Расскажи про key.\n32) Тесно работаешь с TypeScript?\n33) Как у вас на проекте заведено: может быть ли такое, что что-то затипизированно через any.\n\nБлок 2(Опыт работы):\n1) Все еще работаешь или уволился?\n2) Где живешь?\n3) Расскажи про корпоративную культуру т.е. как у вас налажен процесс написания кодовой базы, что вы используете, какие методологии?\n4) Расскажи про опыт работы по SCRUM.\n5) В команде сколько разработчиков фротенд/бекэнд?\n6) Как ты считаешь в организации рабочего дня какие основные проблемы/задачи есть? Как организуешь свой рабочий день, пытаешься это делать?\n7) Какой грейд у тебя сейчас в команде?\n8) С микрофронтендом есть опыт работы?\n9) Есть опыт настройки webpack?\n10) Можно в vite сделать тонкую настройку, как в webpack?\n11) Сколько лет работаешь?\n12) Каков твой путь в IT?\n\nБлок 3(Встречные вопросы):\n1) Расскажи про проект.\n2) На своем компьютере можно работать?\n3) Есть ли онбординг?\n4) Слышал про командное(парное) программирование? Есть такое в сбере?\n5) Сам давно в iFellow работаешь?\n6) Как в целом опыт?\n7) Сколько всего этапов тех. собеседований?"
      },
      {
        "timestamp": "2025-02-14 12:50:42",
        "content": "2025-02-14 12:50:42\n Klimenty Karavaev -> 2071074234:\n- Компания Сбер через Глобус IT\n- Вакансия: сами написали\n- ЗП: 260 к\n- Вопросы: много теории, event loop, js, typescript, запись опять без звука\n\nДо этого был другой человек, его запись вот https://t.me/c/2071074234/489/100927\n\nЗадачки на код тут: https://stackblitz.com/edit/stackblitz-starters-4xhgchom?file=package.json",
        "full_content": "2025-02-14 12:50:42\n Klimenty Karavaev -> 2071074234:\n- Компания Сбер через Глобус IT\n- Вакансия: сами написали\n- ЗП: 260 к\n- Вопросы: много теории, event loop, js, typescript, запись опять без звука\n\nДо этого был другой человек, его запись вот https://t.me/c/2071074234/489/100927\n\nЗадачки на код тут: https://stackblitz.com/edit/stackblitz-starters-4xhgchom?file=package.json"
      },
      {
        "timestamp": "2025-02-14 07:56:44",
        "content": "2025-02-14 07:56:44\n Aintripin -> 2071074234:\n🤡 Викдывали вот чё:\n0. Что значит // WTF коммент в коде?\n1. Что такое to-do?\n2. Как дела, в целом?\n3. Как работается? Норм?\n4. Код реально тяжело читать; у меня знакомый есть джун, он без работы. Можем его посадить решать такие задачи, чтобы код рефакторить, а мы пойдём в плойку поиграем\n5. Как тебе вариант просто проект удалить полностью и просто с нуля переписать? (Тут он ответил, что норм места тут есть)\n6. Сказать ему, что по разговору я понял, ч...",
        "full_content": "2025-02-14 07:56:44\n Aintripin -> 2071074234:\n🤡 Викдывали вот чё:\n0. Что значит // WTF коммент в коде?\n1. Что такое to-do?\n2. Как дела, в целом?\n3. Как работается? Норм?\n4. Код реально тяжело читать; у меня знакомый есть джун, он без работы. Можем его посадить решать такие задачи, чтобы код рефакторить, а мы пойдём в плойку поиграем\n5. Как тебе вариант просто проект удалить полностью и просто с нуля переписать? (Тут он ответил, что норм места тут есть)\n6. Сказать ему, что по разговору я понял, что он очень опытный спец\n7. Тебе больше нравится React или чистый JS?\n8. Почему на JQuery не пишете?\n9. Почему был выбран React? Есть же другие фреймворки/библиотеки? Там, Vue или Angular?\n10. Я, вот, переписывал проект с JQuery на React\n11. Какие фронтовые курсы он смотрел для развития? (Тут он больше начнёт рассказывать, что он сам ходячий курс и так-то хостил дохуллион лекций, принимал участия в хакатонах, выигрывал даже)\n12. Планирует ли он курсы делать? (Короче, он делал курсы, но локально). Планирует ли он на YouTube и, в целом, на онлайн-площадки вывести?\n13. После этих рассказов додавить и спросить как именно развивался во фронте, что читал/смотрел\n14. По поводу деплоя и docker'а: прям вижу, что ты за это очень сильно шаришь. А можем подсказать/посоветовать ресурсы, где ты это изучал? Вообще, чё смотрел и т.д.?\n15. Про развитие на стороне фронта вопрос: архитектура, оптимизация проекта и проч: какие ресурсы смотрел?\n16. Вопрос по ЗП: если до 560 не получится, то хочу другую цифру озвучить в 251,000 и вот по какой причине: в прошлом месте работы у меня была ЗП в 240,000, а щас квартира подорожала, поэтому +10,000 к этой сумме; ещё 1000 рублей, как заклад ан инфляцию. А ещё 500 рублей — для личностного роста в материальном плане, как чистая прибавка к ЗП от уровня прошлой. Смогут ли они это сделать?\n17. Предложить ему заняться подбором квалифицированных сотрудников\n18. Спросить про размер уставного капитала\n19. Как он сморит на наличие 2-3 работ?\n20. Я хотел бы с вами покататься на лыжах или на сноуборде. Я сам на сноуборде катаюсь и компенсация в 150к, как будто бы, не совсем достаточно для того, чтобы покататься\n21. Есть ли в компании вертолёт? (Скажет, что нет). Я принесу столько денег компании, что и вертолёт появится. Собственно, я к чему: я хотел с вами улететь в горы на вертолёте, потом с вертолёта спрыгивать с парашютом и далее кататься по пухляку на сноуборде. Как ты на это смотришь?\n22. Как можно развить такие же софты, как у него? Я считаю, что сам вайб интервью задаётся интервьювером и у него это очень хорошо получается, располагает к себе и задаёт дружественную обстановку\n23. Дали оффер на 500к в тинькофф и 450 сбер, но я туда не пойду. Хотя, если вам надо, могу за 50% от оффера закинуть\n24. Сколько, как ты считаешь, можно заработать денег во фронтенд-разработке?\n25. Был ли он когда-нибудь в штатах? Спрашиваю потому что в последней моей компании я работал удалённо, но приехал как-то к ним на 2 месяца, где мы собирались вместе и курили траву (каннабис) (в этом моменте я шарил ему экран хрома, где гуглил, где легально можно это делать по штатам)\n26. Это были вопросы к Андрею; есть ещё Дмитрий — это PM и HR в одном лице; вопрос к нему: какие дальнейшие планы на своё развитие\n27. У тя на аватарке луна: входит ли в твои планы поездка на луну? Я предлагаю начать с вертолёта\n28. Сложно ли одновременно быть и HR, и PM'ом?\n29. Если сравнивать с биг-техами, ваш собес остался у меня в сердце. Многое для себя подчерпнул, многое запомнил\n30. В жизни главное позитив. Не важно, сойдёмся ли мы в зарплатных ожиданиях или нет, главное — что мы обменялись опытом и позитивом, а дальше, если оффер будет, работа пойдёт только вверх\n\n————————————————————————————————————————\nГоворили преимущественно про это:"
      },
      {
        "timestamp": "2025-02-12 13:55:48",
        "content": "2025-02-12 13:55:48\n Vsevolod -> 2071074234:\nКомпания: Сбер Казначейство\n\nЗП: пока не обсуждали\n\nВопросы: \nЧто такое переменные окружения?\nКакую IDE используете?\nКак взаимодействовал с git (консоль, UI)\nКак оцениваешь свой грейд?\nЕсли таску по времени не успеваешь сделать в срок какие твои действия?\nКак развиваешься в IT?\nдля чего package-lock.json?\nЧем отличается for от forEach?\nРазница == и ===\nМерджите ветки или делаете rebase?\nКак сузить тип в TS? что такое satisfies и чем от Record отличает...",
        "full_content": "2025-02-12 13:55:48\n Vsevolod -> 2071074234:\nКомпания: Сбер Казначейство\n\nЗП: пока не обсуждали\n\nВопросы: \nЧто такое переменные окружения?\nКакую IDE используете?\nКак взаимодействовал с git (консоль, UI)\nКак оцениваешь свой грейд?\nЕсли таску по времени не успеваешь сделать в срок какие твои действия?\nКак развиваешься в IT?\nдля чего package-lock.json?\nЧем отличается for от forEach?\nРазница == и ===\nМерджите ветки или делаете rebase?\nКак сузить тип в TS? что такое satisfies и чем от Record отличается?\nЗадачи:\nconsole.log(new Date(2000,1,1) == new Date(2000,1,1)) // что выведется (false) и как сделать чтобы было true \nРешение: \nпривести два объекта к строке, здесь же вопрос про глубокое и неглубокое копирование объекта\n\nconst array = [1,2,3];\n \nconst array2 = array.forEach((elem) => elem * 2).filter(item => item > 3);\n \nчто выведется? выведется TypeError так как forEach ничего не возвращает а filter не может пройтись по undefined\n\nпотом попросили исправить, делается через map\n\nconst array2 = array.map((elem) => elem * 2).filter(item => item > 3);\nЗдесь же вопрос можно ли пройтись forEach только по половине элементов \nОтвет: нельзя, потому что он итерируется по всем элементам\n\ninterface Todo {\n    id: number;\n    title: string;\n    done: boolean;\n}\n \nconst createNewTodo = (todo: Partial<Omit<Todo, 'id'>>): Todo => {\n    const id = useId();\n \n    return ({\n      title: todo.title,\n      done: todo.done,\n      id\n    })\n}\nОтрефакторить код и прикрутить типизацию здесь надо было, изначальный код задачи потерялся"
      },
      {
        "timestamp": "2025-01-31 18:28:52",
        "content": "2025-01-31 18:28:52\n Владислав -> 2071074234:\nКомпания: СБЕР\nвакансия: https://hh.ru/vacancy/116034557\nзп: не указано\n\nВопросы:\n - как писал тесты?\n - как настраивал ci-cd? (как писал Dockerfile, docker-compose, gitlab-ci.yml\n - говорили об архитектуре FSD\n - в каком файле описаны зависимости проекта с версиями\n - что описано в package.json и что в package-lock.json\n - какие плюсы вышли в 16 версии React\n - какие методы жизненных циклов можно заменить в современных хуках и как\n - отличие useMemo...",
        "full_content": "2025-01-31 18:28:52\n Владислав -> 2071074234:\nКомпания: СБЕР\nвакансия: https://hh.ru/vacancy/116034557\nзп: не указано\n\nВопросы:\n - как писал тесты?\n - как настраивал ci-cd? (как писал Dockerfile, docker-compose, gitlab-ci.yml\n - говорили об архитектуре FSD\n - в каком файле описаны зависимости проекта с версиями\n - что описано в package.json и что в package-lock.json\n - какие плюсы вышли в 16 версии React\n - какие методы жизненных циклов можно заменить в современных хуках и как\n - отличие useMemo от React.memo\n - что такое jsx\n - как работает redux\n - какие свойства display в css знаю\n - Семантическое версионирование (SemVer) - что это \n  (система версионирования програмного обеспечения)\n - что такое Babel"
      },
      {
        "timestamp": "2025-01-31 15:39:19",
        "content": "2025-01-31 15:39:19\n Матвей Захаров -> 2071074234:\nКомпания: Сбер (скрининг с фронтом)\nВакансия: https://spb.hh.ru/vacancy/116034557\nЗП: не обсуждалась\n\nПочти копия: https://t.me/c/2071074234/489/100942\n\nВопросы:\n- спрашивали преимущественно по опыту из резюме\n- тестирование (Jest, react-testing-library), snapshot тесты в react\n- Как был устроен CI/CD, как проходило code review \n- был ли опыт работы с Docker\n- был ли на проекте UI-kit\n- преимущества axios\n- хуки в React\n- зачем нужен package.jso...",
        "full_content": "2025-01-31 15:39:19\n Матвей Захаров -> 2071074234:\nКомпания: Сбер (скрининг с фронтом)\nВакансия: https://spb.hh.ru/vacancy/116034557\nЗП: не обсуждалась\n\nПочти копия: https://t.me/c/2071074234/489/100942\n\nВопросы:\n- спрашивали преимущественно по опыту из резюме\n- тестирование (Jest, react-testing-library), snapshot тесты в react\n- Как был устроен CI/CD, как проходило code review \n- был ли опыт работы с Docker\n- был ли на проекте UI-kit\n- преимущества axios\n- хуки в React\n- зачем нужен package.json и package json.lock\n- Семантическое версионирование\n- как отрендерил бы список при запросе по REST API длительностью 5 секунд (хуки, стейты для ошибки и загрузки)\n- что буду делать, если есть недопонимания с дизайнером, что буду делать, если нужно сверстать компонент, а дизайна ещё нет"
      },
      {
        "timestamp": "2025-01-30 06:17:08",
        "content": "2025-01-30 06:17:08\n Данил Красный -> 2071074234:\nНазвание компании: Сбер\nСсылка на вакансию: хр сама написала\nЗП: не обсуждалась\n\nВопросы:\n\n- Рассказать про то как браузер отрисовывает страницу\n- Преимущества GraphQL над REST\n- Коды ответа с сервера\n- cors\n- Git, git flow\n- merge vs rebase\n- inline vs block vs inline-block\n- flex vs grid\n- event loop\n- типы данных js\n- отличие function declaration от function expression, рассказать про стрелочную функцию\n- зачем react\n- useMemo, useCallback, me...",
        "full_content": "2025-01-30 06:17:08\n Данил Красный -> 2071074234:\nНазвание компании: Сбер\nСсылка на вакансию: хр сама написала\nЗП: не обсуждалась\n\nВопросы:\n\n- Рассказать про то как браузер отрисовывает страницу\n- Преимущества GraphQL над REST\n- Коды ответа с сервера\n- cors\n- Git, git flow\n- merge vs rebase\n- inline vs block vs inline-block\n- flex vs grid\n- event loop\n- типы данных js\n- отличие function declaration от function expression, рассказать про стрелочную функцию\n- зачем react\n- useMemo, useCallback, memo\n- зачем ts\n- interface vs type \n- webpack, module federation\n- рассказать про babel\n\nлайвкодинга не было"
      },
      {
        "timestamp": "2024-12-27 07:36:27",
        "content": "2024-12-27 07:36:27\n Egor -> 2071074234:\nКомпания: IBS(сбер)\nСсылка на вакансию: закрыли\nЗп: от 300\nЗапись: https://www.youtube.com/watch?v=jzV00LSW_rI",
        "full_content": "2024-12-27 07:36:27\n Egor -> 2071074234:\nКомпания: IBS(сбер)\nСсылка на вакансию: закрыли\nЗп: от 300\nЗапись: https://www.youtube.com/watch?v=jzV00LSW_rI"
      },
      {
        "timestamp": "2024-12-26 14:19:42",
        "content": "2024-12-26 14:19:42\n Egor -> 2071074234:\nКомпания: IBS(сбер)\nСсылка на вакансию: закрыли\nЗп: от 300\nЗадачи: \nfunction getStartDate(endDate: Date, n: number): Date | null {\n    let counter = n; \n    let startDate = endDate;\n\n    while (counter > 0) {\n        startDate = addDay(startDate, -1);\n        if (!isWeekend(startDate)) {\n            counter--;\n        }\n    }\n\n    return counter === 0 ? startDate : null;\n}\n\nпотом инет начал лагать, на этом закончился собес",
        "full_content": "2024-12-26 14:19:42\n Egor -> 2071074234:\nКомпания: IBS(сбер)\nСсылка на вакансию: закрыли\nЗп: от 300\nЗадачи: \nfunction getStartDate(endDate: Date, n: number): Date | null {\n    let counter = n; \n    let startDate = endDate;\n\n    while (counter > 0) {\n        startDate = addDay(startDate, -1);\n        if (!isWeekend(startDate)) {\n            counter--;\n        }\n    }\n\n    return counter === 0 ? startDate : null;\n}\n\nпотом инет начал лагать, на этом закончился собес"
      },
      {
        "timestamp": "2024-12-20 08:59:49",
        "content": "2024-12-20 08:59:49\n Egor -> 2071074234:\nКомпания: Сбер\nСсылка на вакансию: hr сама написала\nЗп: ???\nЗапись: https://youtu.be/YrRYjeXHfQQ",
        "full_content": "2024-12-20 08:59:49\n Egor -> 2071074234:\nКомпания: Сбер\nСсылка на вакансию: hr сама написала\nЗп: ???\nЗапись: https://youtu.be/YrRYjeXHfQQ"
      },
      {
        "timestamp": "2024-12-20 08:58:58",
        "content": "2024-12-20 08:58:58\n Egor -> 2071074234:\nКомпания: Сбер\nССылка на вакансию: закрыта \nЗп: от 330\nЗапись: https://youtu.be/ooxoRy2Rvko",
        "full_content": "2024-12-20 08:58:58\n Egor -> 2071074234:\nКомпания: Сбер\nССылка на вакансию: закрыта \nЗп: от 330\nЗапись: https://youtu.be/ooxoRy2Rvko"
      },
      {
        "timestamp": "2024-12-19 16:49:28",
        "content": "2024-12-19 16:49:28\n Egor -> 2071074234:\nКомпания: IBS(Сбер)\nСсылка на вакансию: закрыли вакансию \nЗп: от 330\nЗапись: https://www.youtube.com/watch?v=n9ktoVByUgU",
        "full_content": "2024-12-19 16:49:28\n Egor -> 2071074234:\nКомпания: IBS(Сбер)\nСсылка на вакансию: закрыли вакансию \nЗп: от 330\nЗапись: https://www.youtube.com/watch?v=n9ktoVByUgU"
      },
      {
        "timestamp": "2024-12-13 15:23:09",
        "content": "2024-12-13 15:23:09\n Damir -> 2071074234:\nСБЕР (Миграция SAP)\nЗП: озвучил 250k\nВакансия: https://hh.ru/vacancy/112544767 \n\n1) Расскажи о себе\n2) Спросит по резюме, что понравится\n\nПотом сразу лайфкод: \n1) Сгруппировать по датам\n2) Отсортировать по ключам\n3) Протипизировать функцию (скажет максимально переиспользуемо, лучше спросить, какие ключи вщ нужны будут, а то неоч понятно говорит, что вообще нужно)\n4) Написать небольшой реакт компонент с этими данными\n5) Оптимизация в реакт\n\n\nconst divisio...",
        "full_content": "2024-12-13 15:23:09\n Damir -> 2071074234:\nСБЕР (Миграция SAP)\nЗП: озвучил 250k\nВакансия: https://hh.ru/vacancy/112544767 \n\n1) Расскажи о себе\n2) Спросит по резюме, что понравится\n\nПотом сразу лайфкод: \n1) Сгруппировать по датам\n2) Отсортировать по ключам\n3) Протипизировать функцию (скажет максимально переиспользуемо, лучше спросить, какие ключи вщ нужны будут, а то неоч понятно говорит, что вообще нужно)\n4) Написать небольшой реакт компонент с этими данными\n5) Оптимизация в реакт\n\n\nconst divisions = [\n  {\n    name: 'Разработка',\n    tasks: [\n      {\n        id: 1,\n        status: 'in_progress',\n        date: '2023-01-01',\n        epics: 'epic1',\n        author: 'Иванов Иван',\n      },\n      {\n        id: 2,\n        status: 'completed',\n        date: '2023-01-02',\n        author: 'Иванов Иван',\n      },\n    ],\n  },\n  {\n    name: 'Тестирование',\n    tasks: [\n      {\n        id: 3,\n        status: 'waiting',\n        date: '2023-01-03',\n        author: 'Сидоров Сергей',\n      },\n      {\n        id: 4,\n        status: 'in_progress',\n        date: '2023-01-04',\n        author: 'Сидоров Сергей',\n        components: ['comp1', 'comp2'],\n      },\n      {\n        id: 5,\n        status: 'completed',\n        date: '2023-01-05',\n        author: 'Петрова Мария',\n      },\n    ],\n  },\n  {\n    name: 'Аналитика',\n    tasks: [\n      {\n        id: 3,\n        status: 'waiting',\n        date: '2023-01-03',\n        author: 'Сидоров Сергей',\n      },\n      {\n        id: 4,\n        status: 'in_progress',\n        date: '2023-01-04',\n        author: 'Иванова Анна',\n      },\n      {\n        id: 5,\n        status: 'completed',\n        date: '2023-01-05',\n        author: 'Петрова Мария',\n      },\n      {\n        id: 4,\n        status: 'in_progress',\n        date: '2023-01-04',\n        author: 'Иванова Анна',\n      },\n    ],\n  },\n];\n\n// Цель отобразить график сгруппированный по датам и отображающий количество задач в день\n// Задача подготовить данные для графика\n\n\n\ntype GroupByDate = <T extendes { tasks: { date: string }[] }[]> (arr: T) => [string, number][]\n\n\n\nconst groupByDate: GroupByDate = (arr) => {\n  const map = {};\n  arr.forEach((el) => {\n    el.tasks.forEach((task) => {\n      const date = task.date;\n\n      if (map[date]) {\n        map[date]++\n      } else {\n        map[date] = 1\n      }\n    })\n  })\n\n  const sortedDates = Object.keys(map).sort((a, b) => new Date(a) - new Date(b)).reduce((acc, val) => {\n    acc[val] = map[val]\n    return acc;\n  }, {});\n\n  return Object.entries(sortedDates)\n}\n\nconst Chart () => {\n  // реализация не важна\n}\n\nconst ChartPage = () => {\n  const [chartData, setChartData] = useState([])\n\n  useEffect(() => {\n    loadChartData();\n  }, [])\n\n  const loadChartData = () => {\n    return new Promise((res, rej) => res(divisions)).then((data) => {\n      const transformedData = groupByDate(data);\n      setChartData(transformedData)\n    })\n  }\n  \n  return <Chart value={chartData} />\n}"
      },
      {
        "timestamp": "2024-12-11 12:28:51",
        "content": "2024-12-11 12:28:51\n Mikhail Sorokin -> 2071074234:\nСбер Еаптека\nВакансия — https://hh.ru/vacancy/108965591\nЗп — на тот момент не обсуждалось, я называл желаемую сумму от 300 000 на руки",
        "full_content": "2024-12-11 12:28:51\n Mikhail Sorokin -> 2071074234:\nСбер Еаптека\nВакансия — https://hh.ru/vacancy/108965591\nЗп — на тот момент не обсуждалось, я называл желаемую сумму от 300 000 на руки"
      },
      {
        "timestamp": "2024-12-11 08:11:31",
        "content": "2024-12-11 08:11:31\n Tonidevs -> 2071074234:\nНазвание: СБЕР Миграция САП SAP\nссылка: https://hh.ru/vacancy/112544767 \nЗП: не обсуждали\nФидбек: не ответили\n\nвопросы и задачи: отсюда https://t.me/c/2071074234/489/47098\n- спросит про оптимизации реакт приложений\n- спросит про опыт, про задачи, скиллы итд\n\nможет дать ещё эту задачу:\n/* Дано мок массив из 5 элементов. В реальности апи выдает 10 тысяч + элементов\nНеобходимо сделать вывод списка курсов и реализовать функционал открытия модального окна\n...",
        "full_content": "2024-12-11 08:11:31\n Tonidevs -> 2071074234:\nНазвание: СБЕР Миграция САП SAP\nссылка: https://hh.ru/vacancy/112544767 \nЗП: не обсуждали\nФидбек: не ответили\n\nвопросы и задачи: отсюда https://t.me/c/2071074234/489/47098\n- спросит про оптимизации реакт приложений\n- спросит про опыт, про задачи, скиллы итд\n\nможет дать ещё эту задачу:\n/* Дано мок массив из 5 элементов. В реальности апи выдает 10 тысяч + элементов\nНеобходимо сделать вывод списка курсов и реализовать функционал открытия модального окна\n*/\n\nconst courseData = [\n  {\n    title: 'Основы программирования',\n    description: 'Курс для начинающих программистов, который поможет освоить основы программирования на JavaScript.',\n    duration: 10,\n    difficulty: 'beginner'\n  },\n  {\n    title: 'Продвинутый JavaScript',\n    description: 'Курс для опытных разработчиков, который поможет углубить знания в области JavaScript и освоить продвинутые техники.',\n    duration: 20,\n    difficulty: 'intermediate'\n  },\n  {\n    title: 'Frontend разработка',\n    description: 'Курс по фронтенд разработке, который поможет освоить HTML, CSS и JavaScript для создания веб-интерфейсов.',\n    duration: 40,\n    difficulty: 'intermediate',\n    prerequisites: ['Основы HTML', 'Основы CSS'], // Предварительные требования к курсу\n    instructors: ['<NAME>', '<NAME>'] // Преподаватели курса\n  },\n  {\n    title: 'Backend разработка',\n    description: 'Курс по backend разработке, который поможет освоить Node.js и другие технологии для создания серверной части веб-приложений.',\n    duration: 60,\n    difficulty: 'intermediate',\n    prerequisites: ['Основы программирования на JavaScript'] // Предварительные требования к курсу\n  },\n  {\n    title: 'Fullstack разработка',\n    description: 'Курс по fullstack разработке, который поможет освоить полный стек технологий для создания веб-приложений от начала до конца.',\n    duration: 80,\n    difficulty: 'advanced'\n  } \n];\n\ninterface IModal<T> extends {\n    course: T\n}\n\nconst Modal = <T extends {title: string}>({ course }:IModal<T>) => {\n  return <div style={{ position: 'fixed', inset: '15vh', background: 'gray', zIndex: 1000 }}>\n    <h1>Модальное окно</h1>\n    <div>\n       <button>действие1</button>\n       <button>действие2</button>\n       <button>действие2</button>\n    </div>\n  </div>\n}\n\ninterface IList {\n    title: string,\n    description: string,\n    duration: number,\n    difficulty: string,\n}\n\nconst List = ({courseData}):IList => {\n    const [isModalOpen, setIsModalOpen] = useState(false)\n    const [selectedCourse, setSelectedCourse] = useState(null)\n    const [filter, setFilter] = useState(')\n\n    const openModal = (course) => {\n        serSelectedCourse(course)\n        setIsModalOpen(true)\n    }\n\n    const closeModal = (course) => {\n        setIsModalOpen(false)\n        serSelectedCourse(null)\n    }\n\n\n    const filteredCourse = courseData.filter(course => course.title.toLowerCase().includes(filter.tolowerCase))\n    \n\n    return (\n        <div>\n            <input\n                    type=\"text\"\n                    value={filter}\n                    placeholder=\"search\"\n                    onchange={(e) => setFilter(e.target.value)}\n            />\n            <ul>\n             courseData.map((course) = > (\n                <li key={course.title} onClick={() => openModal(course)l}>\n                    {course.title}\n                </li>\n                ))\n            </ul>\n            <Modal isOpen={isModalOpen} onClose={closemodal} course={selectedCourse}/>\n        </div>\n    )\n    \n}"
      },
      {
        "timestamp": "2024-11-27 14:31:31",
        "content": "2024-11-27 14:31:31\n Егор -> 2071074234:\nКомпания: IBS в Сбер в \"Пульс\" (Финал)\nВакансия: https://spb.hh.ru/vacancy/102216684\nЗП: 200+\n\nМного рассказывал про проект, про процессы в команде. Показывал storybook и компоненты\n\nСпросил про:\n- опыт написания UI компонентов\n- как проходило код ревью\n- что такое design token",
        "full_content": "2024-11-27 14:31:31\n Егор -> 2071074234:\nКомпания: IBS в Сбер в \"Пульс\" (Финал)\nВакансия: https://spb.hh.ru/vacancy/102216684\nЗП: 200+\n\nМного рассказывал про проект, про процессы в команде. Показывал storybook и компоненты\n\nСпросил про:\n- опыт написания UI компонентов\n- как проходило код ревью\n- что такое design token"
      },
      {
        "timestamp": "2024-11-24 11:20:24",
        "content": "2024-11-24 11:20:24\n George Nizamutdinow -> 2071074234:\nКомпания: SberTech (Сбер)\nВакания: https://hh.ru/vacancy/109472410\nЗП: не указана (просил от 240000р на руки)\n\nВопросы:\n1) Рассказать про опыт\n2) Был ли опыт написания своего UI кита\n3) Рассказать про свои достижения\n\nЗадачи:\n1) Вывести сумму всех \"value\" в дереве и сделать типизацию\n\n\nconst tree = {\n  left: {\n    left: {\n      left: {\n        right: {\n          left: {\n            value: 7,\n          },\n          right: {\n            value...",
        "full_content": "2024-11-24 11:20:24\n George Nizamutdinow -> 2071074234:\nКомпания: SberTech (Сбер)\nВакания: https://hh.ru/vacancy/109472410\nЗП: не указана (просил от 240000р на руки)\n\nВопросы:\n1) Рассказать про опыт\n2) Был ли опыт написания своего UI кита\n3) Рассказать про свои достижения\n\nЗадачи:\n1) Вывести сумму всех \"value\" в дереве и сделать типизацию\n\n\nconst tree = {\n  left: {\n    left: {\n      left: {\n        right: {\n          left: {\n            value: 7,\n          },\n          right: {\n            value: 14,\n          },\n          value: 66,\n        },\n        value: 23,\n      },\n      value: 90,\n    },\n    right: {\n      value: 67,\n    },\n    value: 34,\n  },\n  right: {\n    value: 11,\n  },\n  value: 16,\n};\n\nfunction treeValueSumm(value) {\n  // your code here\n  return 0;\n}\n\nconsole.log(treeValueSumm(tree));\nconsole.log(treeValueSumm(tree) === 328);\n\n\n\n2) Убрать повторения из строки\n\n\nconst sentence = \"Кккоооот Бааарссиккк зззапрыыгнннул   наааа зааабоооррррр\";\n\nfunction removeRepeats(value) {\n  // your code here\n  return \"Кот Барсик запрыгнул на забор\";\n}\n\nconsole.log(removeRepeats(sentence));\nconsole.log(removeRepeats(sentence) === \"Кот Барсик запрыгнул на забор\");\n\n\n\n3) Сделать мини-аналог jQuery\n\n\n// helpers.js\n//init code\nconst el = document.createElement(\"div\");\nel.className = \"js-node\";\ndocument.body.appendChild(el);\n\n\n\nimport \"./helpers\";\n\nfunction $(selector) {\n  //code here\n}\n\n// пример использования\n// const $node = $(\".js-node\");\n\n// $node.addClass(\"bordered\").html(\"<li>hello</li>\").toggleClass(\"disabled\").css({\n//   color: \"green\",\n//   padding: \"10px\"\n// });\n\n\n\n4) Сделать 10 запросов и вывести среднее время выполнения запроса и количество выполненных запросов.\n\n\nimport React from \"react\";\n\nexport function App() {\n  const [numOfRequests] = React.useState(10);\n  const [url] = React.useState(\"codesandbox.io\");\n\n  return (\n    <div>\n      <div>\n        <label>URL</label>\n        <input value={url} />\n      </div>\n      <div>\n        <label>Number of requests</label>\n        <input value={numOfRequests} />\n      </div>\n      <div>\n        <label>Avg response time</label>\n        <input />\n      </div>\n      <div>\n        <label>Requests made</label>\n        <input />\n      </div>\n      <button>Start</button>\n    </div>\n  );\n}"
      },
      {
        "timestamp": "2024-11-21 11:50:21",
        "content": "2024-11-21 11:50:21\n Maksim -> 2071074234:\nКомпания: Сбер                                                                                                                                                                                                                       Вакансия: https://hh.ru/vacancy/110444904                                                                                                                                                                                           ...",
        "full_content": "2024-11-21 11:50:21\n Maksim -> 2071074234:\nКомпания: Сбер                                                                                                                                                                                                                       Вакансия: https://hh.ru/vacancy/110444904                                                                                                                                                                                                                                                      Зп: до 350к                                                                                                                                                                                                                                       Вопрос расскажи про опыт и Задачи:                                                                                                                                                                                           const isAnagram = (firstString, secondString) => {\n   return firstString.toLowerCase().split('').sort().join('') ===\n   secondString.toLowerCase().split('').sort().join('')\n}\nconsole.log(isAnagram(\"foefet\", \"toffee\"));       // true\nconsole.log(isAnagram(\"Buckethead\", \"DeathCubeK\")); // true\nconsole.log(isAnagram(\"hello\", \"world\"));         // false\n\n\n/* 1. Что будет в консоли? */\nfunction sayHi() {\n  console.log(name) // undifiend\n  console.log(age)  //  Referens Errror\n  var name = \"Lydia\"\n  let age = 21\n}\nsayHi();\n\n/* 2. Что будет в консоли? */\nconst shape = {\n  radius: 10,\n  diameter() {\n    return this.radius * 2;\n  },\n  perimeter: () => 2 * Math.PI * this.radius\n};\n\nconsole.log(shape.diameter()); // 20\nconsole.log(shape.perimeter()); // NaN\n\n\n/* 3. Что будет в консоли? */\nlet c = { greeting: 'Hey!' };\nlet d;\nd = c;\nc.greeting = 'Hello';\nconsole.log(d.greeting); // Hello\n\n/* 4. Что будет в консоли? */\nconst person = { name: 'Lydia' };\n\nfunction greeting(age) {\n  console.log(`${this.name} is ${age}`);\n}\n\ngreeting.call(person, 21); //Lydia is 21\ngreeting.bind(person, 21); // ничего\n\n\n/* 5. Что будет в консоли? */\n\n(() => {\n  let x, y;\n  try {\n    throw new Error();\n  } catch (x) {\n    (x = 1), (y = 2);\n    console.log(x);\n  }\n  console.log(x);\n  console.log(y);\n})();\n\n\n/* 5. Что будет в консоли? */\nlet person1 = { name: 'Lydia' };\nconst members = [person1];\nperson1 = null;\n\nconsole.log(members); [{ name: 'Lydia' }]\n\n\n/* 6. Что будет в консоли? */\nconst person2 = {\n  name: 'Lydia',\n  age: 21\n};\n\nfor (const item in person2) {\n  console.log(item); \n}\n\n\n/* 7. Какое значение num? */\nconst num = parseInt(\"7*6\", 10);\n\n\n\n/* 8. Что будет в консоли? */\nfunction getInfo(member, year) {\n  member.name = 'Lydia';\n  year = 1998;\n}\n\nconst person3 = { name: 'Sarah' };\nconst birthYear = '1997';\n\ngetInfo(person3, birthYear);\n\nconsole.log(person3, birthYear);\n\n\n\n/* 8. Что будет в консоли? */\nfunction greeting() {\n  throw 'Hello world!';\n}\n\nfunction sayHiWithTryCatch() {\n  try {\n    const data = greeting();\n    console.log('It worked!', data);\n  } catch (e) {\n    console.log('Oh no an error:', e);\n  }\n}\n\nsayHiWithTryCatch();\n\n/* 9. Что будет в консоли? */\nfunction Car() {\n  console.log(this)    \n  //this.make = 'Lamborghini';\n // return { make: 'Maserati' };\n}\n\nconst myCar = new Car();\nconsole.log(myCar.make);\n\n\n/* 10. Что будет в консоли? */\nconst numbers = [1, 2, 3, 4, 5];\nconst [y] = numbers;\n\nconsole.log(y);\n\n<!-- /* 1. Что будет в консоли? */-->\n <div onclick=\"console.log('div')\">\n  <p onclick=\"console.log('p')\">\n    Кликни меня!\n  </p>\n</div>"
      },
      {
        "timestamp": "2024-11-19 19:29:57",
        "content": "2024-11-19 19:29:57\n Гладких Александр -> 2071074234:\nКомпания Сбер Bell Integrator 2 этап \nОбщение с менеджерами\nВакансия hr написала\nЗП: от 200\nВопросы\n- Расскажи о своем опыте \n- Причины ухода\n- как пришел во фронтенд как выбирал стэк какой учить\n- был ли опыты в бэкенде\n- был ли опыт настройки пайплайна\n- Потом был рассказ о своем продукте\n- готов ли поработать с CI-CD c релизами",
        "full_content": "2024-11-19 19:29:57\n Гладких Александр -> 2071074234:\nКомпания Сбер Bell Integrator 2 этап \nОбщение с менеджерами\nВакансия hr написала\nЗП: от 200\nВопросы\n- Расскажи о своем опыте \n- Причины ухода\n- как пришел во фронтенд как выбирал стэк какой учить\n- был ли опыты в бэкенде\n- был ли опыт настройки пайплайна\n- Потом был рассказ о своем продукте\n- готов ли поработать с CI-CD c релизами"
      },
      {
        "timestamp": "2024-11-19 10:59:54",
        "content": "2024-11-19 10:59:54\n Михаил -> 2071074234:\n// пример гласных: a, i, o, e, u, y\nconst findVowelsLength = str => {\n    if(!str) return 0;\n    \n    const vowelsMap = {\n        a:true, \n        i:true,\n         o:true, \n         e:true, \n         u:true,\n         y:true\n    }\n    \n    let count = 0;\n    \n    for(let i = 0; i < str.length; i++){\n        const cur = str[i].toLowerCase()\n        if(vowelsMap[cur]) count+=1\n    }\n    \n    return count\n}\n \nexpect(findVowelsLength('akksja')).toBe(2);\nexpe...",
        "full_content": "2024-11-19 10:59:54\n Михаил -> 2071074234:\n// пример гласных: a, i, o, e, u, y\nconst findVowelsLength = str => {\n    if(!str) return 0;\n    \n    const vowelsMap = {\n        a:true, \n        i:true,\n         o:true, \n         e:true, \n         u:true,\n         y:true\n    }\n    \n    let count = 0;\n    \n    for(let i = 0; i < str.length; i++){\n        const cur = str[i].toLowerCase()\n        if(vowelsMap[cur]) count+=1\n    }\n    \n    return count\n}\n \nexpect(findVowelsLength('akksja')).toBe(2);\nexpect(findVowelsLength('')).toBe(0);\nexpect(findVowelsLength(null)).toBe(0);\nexpect(findVowelsLength('aaaa12121212')).toBe(0);\n\n//----------------------------------\n\nconst proccess = arr => {\n    const anagramsMap = {}\n    \n    arr.forEach((el)=>{\n        const sortedEl = el.toLowerCase().sort();\n        \n        if(!anagramsMap[sortedEl]){\n            anagramsMap[sortedEl] = [el]\n        }else{\n            anagramsMap[sortedEl].push(el)\n        }\n        \n    })\n    \n    return Object.values(anagramsMap)\n}\n\n// Анаграмма - это слово, образованное путём перестановки букв, составляющих другое слово\n// Дан массив строк, необходимо вернуть массив с массивами анаграмм, которые встречаются в массиве строк более 1 раза\nprocess(['xyz','abc', 'bca', 'zyx', 'klm', 'cab', 'zxy', 'xzy']) // [['xyz', 'zyx', 'zxy', 'xzy'], ['bca', 'cab']]\n\n\n\n//------------------\nconst node = new Jquery(\".some-block\")\n\nconst node = $(\".some-block\");\n \nnode\n    .appendClass(\".additional-class\")\n    .setHTML(\"<h1>Hello, World!</h1>\")\n    .onClick(() => {\n        console.log(\"click\");\n    })\n    \n    \n    \nclass Jquery {\n    this.node = null\n    \n    constructor(selector){\n        this.node = document.querySelector(selector)\n    }\n    \n    \n    appendClass:(cn) => {\n        this.node.classlist.add(cn)\n        return this\n    }\n    \n    setHTML: (html)=>{\n        this.node.innerHTML = html\n        return this\n    }\n    \n    onClick: (cb) => {\n       this.node.addEventListener(\"click\", cb)\n       return this\n    }\n}\n\n\n\n--------\n\n\nfunction fetchData() {\n    return fetch('api/tada.json');\n     \n}\n//  ['hello', 'again', 'hello', 'Just called to say hello']\n \n \nfunction Component() {\n    const [data, setData] = useState([]);\n    \n    useEffect(() => {\n        const getData = async () => {\n            try {\n                const res = await fetchData();\n                const data = await res.json()\n                setData(data);\n            } catch(e){}\n        }\n        \n        getData();\n    }, [])\n    \n     \n    return <div>\n        \n        <ul>\n            {data.map((el, idx) => <li key={idx}>{el}</li>)\n        </ul>\n    </div>\n}\n\n\n\n//--------------\n\n\nexport const InfoWindow = ({ errors }) => {\n    const [showErrors, setShowErrors] = useState(false);\n     \n    const onToggleErorr = () => setShowErrors(showErrors => !showErrors);\n \n    return (\n        <div>\n            <h2>Attention</h2>\n            <p>You have error in your form data. Please, correct the following mistakes:</p>\n            <button onClick={onToggleErorr}>Toggle to see error</button>\n            {showErrors && <ul>{errors.map((item, idx) => <li key={idx}>{item}</li>)}</ul>}\n        </div>\n    )\n}\n\n\n\n\n// ------\n\n\n\nconst numbers = [2,3,4,1,7,6,19];\nconst target = 10;\n \nfunction findTwoNumbers(arr, target) {\n    const numsMap = new Map()\n    \n    for(let i = 0; i < arr.length; i++){\n        const cur = arr[i]\n        \n        if(numsMap.has(target - cur)){\n            return [cur, target - cur]\n        } else {\n            numsMap.set(cur, i);\n        }\n    }\n    \n    return []\n};\n \nfindTwoNumbers(numbers, target); // [3, 7]\nКомпания: СБЕР SberPrime\nЗП: 300k\n\nВопросы:\n- Хуки React\n- useLayoutEffect vs useEffect\n- key\n- cookie / localStoraga / sessionStoraga / indexDb\n- JWT\n- как реализовать JWT авторизацию\n\n+ задачи на JS / refactoring"
      },
      {
        "timestamp": "2024-11-14 19:37:47",
        "content": "2024-11-14 19:37:47\n Гладких Александр -> 2071074234:\nКомпания Сбер UI/UX Team 2 этап \nОбщение с РО\nВакансия https://hh.ru/vacancy/108949751\nЗП: от 200\nВопросы\n- В основном болтология рассказывали о проекте\n- расскажи за опыт в кратце\n- Причины ухода\n- Что ждешь от нового места работы\n- Есть ли план своего развития в целом куда хочешь расти\n- Какие у  тебя увлечения хобби\n- Что считаешь болле важным качество или срок\n- Что будешь делать когда таски раньше завершения спринта выполнил\n- Расскажи п...",
        "full_content": "2024-11-14 19:37:47\n Гладких Александр -> 2071074234:\nКомпания Сбер UI/UX Team 2 этап \nОбщение с РО\nВакансия https://hh.ru/vacancy/108949751\nЗП: от 200\nВопросы\n- В основном болтология рассказывали о проекте\n- расскажи за опыт в кратце\n- Причины ухода\n- Что ждешь от нового места работы\n- Есть ли план своего развития в целом куда хочешь расти\n- Какие у  тебя увлечения хобби\n- Что считаешь болле важным качество или срок\n- Что будешь делать когда таски раньше завершения спринта выполнил\n- Расскажи про конфликт и как решал"
      },
      {
        "timestamp": "2024-11-14 19:26:49",
        "content": "2024-11-14 19:26:49\n Гладких Александр -> 2071074234:\nСбер (Bell Integrator)\n Вакансия: hr сама написала\n Вопросы \n  - Расскажи про свой опыт в кратце\n  - Проекты команды как взаимодействовали\n  \n  - Задачи\n  \n  var a = 10\n   function foo() {\n   a = 5\n  }\nНазови все способы сделать перменную а недоступной для изменений\n \n  console.log('' || {})\n  console.log('' ?? {})\n  \n  Что такое ?? и что будет в консоли\n  \n  console.log(this.user.name)\n  \n  что будет в консоли \n  как сделать чтобы был undefi...",
        "full_content": "2024-11-14 19:26:49\n Гладких Александр -> 2071074234:\nСбер (Bell Integrator)\n Вакансия: hr сама написала\n Вопросы \n  - Расскажи про свой опыт в кратце\n  - Проекты команды как взаимодействовали\n  \n  - Задачи\n  \n  var a = 10\n   function foo() {\n   a = 5\n  }\nНазови все способы сделать перменную а недоступной для изменений\n \n  console.log('' || {})\n  console.log('' ?? {})\n  \n  Что такое ?? и что будет в консоли\n  \n  console.log(this.user.name)\n  \n  что будет в консоли \n  как сделать чтобы был undefined\n  \n  что такое каррирование\n  \n  const a = {key: 'a'}, b = {key: 'b'}, c = {key: 'c'}\n  a[b] = c\n  a[c] = b\n   console.log(a[b], a[c])\n  что будет в консоли\n  \n  function foo(a) {\n   console.log(b)\n       return  {\n           foo: (b) => foo(b)\n   }\n  }\n   foo(1).foo(2).foo(3).foo(4)\n  что в консоли\n  \n  написать кастомный промис который резолвит 1\n  вопросы по промисам\n  \n  <Component func={this.foo}/>\n  <Component func={() => this.foo()}/>\n  в чем разница что лучше\n  \n  useEfect(() => {\n   console.log(1)\n  \n  return () => {\n   console.log(2)\n  }\n  }, [name])\n  порядок логов\n  \n  использовал abourt controller\n  \n  useEffect(() => {\n  const controller = new AbortController();\n  dispatch(getData(controller.signal));\n  return () => {\n   controller.abort(); // Отменяет запрос при размонтировании компонента\n   };\n  }, []);\n  \n  - зачем нужен combineReducer\n  \n  import {style} from './style.less'\n  почему мы можем так написать\n  будет ли ругаться ts и как исправить\n  \n  try {\n  } catch (error: ?) {\n  }\n  как типизировать error и почему так\n  - какие утилити тайп знаешь\n  \n   const props: IProps<Record<EState, number>> = {\n    value: {\n        [EState.ONE]: 1,\n        [EState.TWO]: 2,\n        [EState.THREE]: 3\n }\n};"
      },
      {
        "timestamp": "2024-11-12 18:20:57",
        "content": "2024-11-12 18:20:57\n Гладких Александр -> 2071074234:\nКомпания Сбер UI/UX Team \nВакансия https://hh.ru/vacancy/108949751\nЗП: от 200\nВопросы\n- расскажи за опыт\n- расскажи про интересные задачи которые приходилось делать\n- как веб-сокеты в проект подключали\n- в целом по резюме за опыт идут\n- почему меняешь место работы\n- про Virtual DOM и Реконсилатион\n- Для чего нужен Context в реакт где бы использовал\n- Что такое чистый компонент пример\n- React.memo\n- Управляемые и неуправляемые компоненты для ч...",
        "full_content": "2024-11-12 18:20:57\n Гладких Александр -> 2071074234:\nКомпания Сбер UI/UX Team \nВакансия https://hh.ru/vacancy/108949751\nЗП: от 200\nВопросы\n- расскажи за опыт\n- расскажи про интересные задачи которые приходилось делать\n- как веб-сокеты в проект подключали\n- в целом по резюме за опыт идут\n- почему меняешь место работы\n- про Virtual DOM и Реконсилатион\n- Для чего нужен Context в реакт где бы использовал\n- Что такое чистый компонент пример\n- React.memo\n- Управляемые и неуправляемые компоненты для чего и где использовал\n- Какие хуки знаешь\n- useRef для чего и где использовал\n- Какие делал свои кастомные хуки\n- Правила реализации кастомных хуков\n- useEffect зачем нужен (рассказывай все что знаешь)\n- Какие псевдоэлементы и псевдоклассы знаешь и используешь\n- Назови все свойства флекс какие знаешь\n- Когда использовать флекс когда грид\n- Что такое промис и все что знаешь\n- Методы промиса\n\n\nЗадачи \n 1. \n\nconst Child = () => {\n  useEffect(() => {\n    console.log('3')\n  }, [])\n  console.log('4')\n\n  return <div>Child</div>\n}\n\nconst App = () => {\n  console.log('1')\n\n  useEffect(() => {\n    console.log('2')\n  }, [])\n\n  return (\n    <div>\n      Parent\n      <Child/>\n    </div>\n  )\n}\n\nпорядок логов,  что сделать чтобы чтобы 2 была раньше 3\n\n\n2. реализовать компонент UserWrapper\n\ninterface UserWrapperProps {\n    username: string;\n    children: (user: User | null) => React.Node\n}\n\nexport const UserWrapper: React.FC<UserWrapperProps> = ({ username, children }) => {\n    const [user, setUser] = useState<User | null>(null);\n\n    useEffect(() => {\n        fetchUser(username)\n          .then(user => setUser(user));\n    }, [username]);\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    return (\n      <>\n        {children(user)}\n      </>\n     )\n};\n\n\nдополнительно как можно отменить запрос (abort controller)\n\n3. отрефакторить проект https://stackblitz.com/edit/react-ts-kadbze?file=App.tsx"
      },
      {
        "timestamp": "2024-11-06 15:39:05",
        "content": "2024-11-06 15:39:05\n Mike -> 2071074234:\nКомпания: Сбер УВХД \nСначала собеса попросили расшарить ВЕСЬ ЭКРАН \nЗП:200к \nВопросы: \n1.Работал ли с webpack \n2.Работал ли с микрофронтами \n3.Самая запоминающаяся задача за время работы \n4.Дали кусок кода на реакте, посмотреть что не так и что бы иправил\nуже исправленный\n    const getPosts = async () => { \n        const data = await getData(\"posts\"); \n        setPosts(data); \n    }; \n \n    const getComments = async () => { \n        const data = await get...",
        "full_content": "2024-11-06 15:39:05\n Mike -> 2071074234:\nКомпания: Сбер УВХД \nСначала собеса попросили расшарить ВЕСЬ ЭКРАН \nЗП:200к \nВопросы: \n1.Работал ли с webpack \n2.Работал ли с микрофронтами \n3.Самая запоминающаяся задача за время работы \n4.Дали кусок кода на реакте, посмотреть что не так и что бы иправил\nуже исправленный\n    const getPosts = async () => { \n        const data = await getData(\"posts\"); \n        setPosts(data); \n    }; \n \n    const getComments = async () => { \n        const data = await getData(\"comments\"); \n        setComments(data); \n    }; \n \n    getPosts(); \n    getComments(); \n}, []);\n5.UseEffect vs UseLayoutEffect \n6.Как в одном запросе сделать разделение\n(1.разделить сами запросы - для постов и комметов,  \n2. Использовать методы промисов\n    const fetchData = async () => { \n        const [postData, commentData] = await Promise.all([ \n            getData(\"posts\"), \n            getData(\"comments\"), \n        ]); \n        setPosts(postData); \n        setComments(commentData); \n    }; \n    fetchData(); \n}, []);\n7.all vs allsettled vs race vs any \n8.Реализовать функцию фибонначи, но не через рекурсию \nfunction fibonacci(n) {    \nif (n <= 0) return 0; \n    if (n === 1) return 1; \n    let a = 0; \n    let b = 1; \n    for (let i = 2; i <= n; i++) { \n        const www = b; \n        b = a + b; \n        a = www; \n    } \n    return b; \n} \n9.Погружение/всплытие \n10.Реализуй функцию, чтобы получить значение как в консоле \nconst flattenedArray = nestedArray.flat(); \nconsole.log(flattenedArray); \n// Output: [0, 1, 2, 3, 4, 5] \nКак мог бы реализовать её по-другому?(через цикл) \n11.реализовать debouced \n12.bind / call / apply \nP.S. т.к. шарил весь экран в середине собеса попросил показать ХРОМ И ЗАТЕМ ЗАКРЫТЬ ЕГО \nбез записи)"
      },
      {
        "timestamp": "2024-11-06 14:56:01",
        "content": "2024-11-06 14:56:01\n Гасим Мурасов -> 2071074234:\nкомпания: Сбер\nзп: 250 000\nвакансия: пригласил друг по рефералке\nвидео: https://youtu.be/tKMeOglkUms",
        "full_content": "2024-11-06 14:56:01\n Гасим Мурасов -> 2071074234:\nкомпания: Сбер\nзп: 250 000\nвакансия: пригласил друг по рефералке\nвидео: https://youtu.be/tKMeOglkUms"
      },
      {
        "timestamp": "2024-11-03 11:22:42",
        "content": "2024-11-03 11:22:42\n Artyom Sozykin -> 2071074234:\nКомпания: Лига Цифровой Экономики (сбер)\nВакансия: https://hh.ru/vacancy/107380873\nЗП: 200к\nВопросы:\n 1. Чем отличается var let const\n 2. Можещь ли ты изменять объект в const\n 3. Что такое generic\n 4. Для чего нужны enum\n 5. Как можно скопировать объект?\n 6. Какие есть минусы у копирования объекта через json\n 7. Что такое garbage коллекторы\n 8. Что такое слабые ссылки?\n 9. Зачем нужен отрибут key?\n 10. setState асинхронная или синхронная?\n 11. Ч...",
        "full_content": "2024-11-03 11:22:42\n Artyom Sozykin -> 2071074234:\nКомпания: Лига Цифровой Экономики (сбер)\nВакансия: https://hh.ru/vacancy/107380873\nЗП: 200к\nВопросы:\n 1. Чем отличается var let const\n 2. Можещь ли ты изменять объект в const\n 3. Что такое generic\n 4. Для чего нужны enum\n 5. Как можно скопировать объект?\n 6. Какие есть минусы у копирования объекта через json\n 7. Что такое garbage коллекторы\n 8. Что такое слабые ссылки?\n 9. Зачем нужен отрибут key?\n 10. setState асинхронная или синхронная?\n 11. Что делает strictMode в React\n 12. Где хранить refresh token?"
      },
      {
        "timestamp": "2024-10-29 10:34:04",
        "content": "2024-10-29 10:34:04\n Вадим -> 2071074234:\nКомпания : Сбер(что-то для инкассаторов)\nЗп: не обсуждали\nВакансия: https://hh.ru/vacancy/108070756\nВопросы: про тех опыт\nЗадачи: на просимисы, и походу вопросы к нему\n- задача затянуть себе репу, развернуть и реализовать запрос за данными и их отобразить( курсы валют) и потом спрашивал по по архитектуре как бы я сделал если бы из бэка данные менялись бы а у нас клиент лег, как можно сделать так, чтобы ничего не падало.",
        "full_content": "2024-10-29 10:34:04\n Вадим -> 2071074234:\nКомпания : Сбер(что-то для инкассаторов)\nЗп: не обсуждали\nВакансия: https://hh.ru/vacancy/108070756\nВопросы: про тех опыт\nЗадачи: на просимисы, и походу вопросы к нему\n- задача затянуть себе репу, развернуть и реализовать запрос за данными и их отобразить( курсы валют) и потом спрашивал по по архитектуре как бы я сделал если бы из бэка данные менялись бы а у нас клиент лег, как можно сделать так, чтобы ничего не падало."
      },
      {
        "timestamp": "2024-10-28 18:34:49",
        "content": "2024-10-28 18:34:49\n Sergey Chizhikov -> 2071074234:\nКомпания: Сбер\nЗП: 250к\nВакансия: hr написала\n\nВопросы:\n+var, let, const\n+Ссылочные типы данных\n+Отличия функций\n+call, apply, bind\n+чистые функции\n+асинхронность в js\n+расскажи про React\n+Хуки React\n+жизненный цикл компонента\n+ база по TypeScript\n+webSocket, longPolling, Polling\n\nЗадачка на запрос данных и их сортировку",
        "full_content": "2024-10-28 18:34:49\n Sergey Chizhikov -> 2071074234:\nКомпания: Сбер\nЗП: 250к\nВакансия: hr написала\n\nВопросы:\n+var, let, const\n+Ссылочные типы данных\n+Отличия функций\n+call, apply, bind\n+чистые функции\n+асинхронность в js\n+расскажи про React\n+Хуки React\n+жизненный цикл компонента\n+ база по TypeScript\n+webSocket, longPolling, Polling\n\nЗадачка на запрос данных и их сортировку"
      },
      {
        "timestamp": "2024-10-25 14:16:52",
        "content": "2024-10-25 14:16:52\n Sergey Chizhikov -> 2071074234:\n- компания: сбер\n-зп: просил 250к\n-вакансия: нет\n\nВопросы:\n+Был один вопрос про различие GET и POST\n+Задача на код ревью\n+Задача на запрос юзеров и сортировку по имени",
        "full_content": "2024-10-25 14:16:52\n Sergey Chizhikov -> 2071074234:\n- компания: сбер\n-зп: просил 250к\n-вакансия: нет\n\nВопросы:\n+Был один вопрос про различие GET и POST\n+Задача на код ревью\n+Задача на запрос юзеров и сортировку по имени"
      },
      {
        "timestamp": "2024-10-23 04:28:18",
        "content": "2024-10-23 04:28:18\n Сергей -> 2071074234:\nСбер - встреча с командой(проект связанный с банкоматами)\nЗП: от 200к, дальше не обсуждали\n\nСпрашивали про опыт довольно подробно и поведенческое(минут 40, остальные 20 минут про проект рассказывают)\n- расскажи про последнее место работы\n- что будешь делать если задача описана не подробно(допустим, есть модалка где можно выбрать пользователя и группу, там вот две кнопки эти)\n- были ли конфликты, предлагал ли новые решения, как аргументировал их(если там...",
        "full_content": "2024-10-23 04:28:18\n Сергей -> 2071074234:\nСбер - встреча с командой(проект связанный с банкоматами)\nЗП: от 200к, дальше не обсуждали\n\nСпрашивали про опыт довольно подробно и поведенческое(минут 40, остальные 20 минут про проект рассказывают)\n- расскажи про последнее место работы\n- что будешь делать если задача описана не подробно(допустим, есть модалка где можно выбрать пользователя и группу, там вот две кнопки эти)\n- были ли конфликты, предлагал ли новые решения, как аргументировал их(если там тимлид допустим говорил что надо по-другому делать)\n- про опыт подробно реализацию спрашивали(в моем случае интересная задача была с dnd, про нее, где вешались обработчики, как обрабатывались, где сохранялись)\n- немного по TS пробежались, был ли TS, зачем он нужен, на задачу с использованием Omit, что такое дженерики, зачем нужны\n- как обучаешься, где смотришь новую информацию\n- почему уходишь с текущего места работы\n- предупредил ли об уходе\n- как будешь выбирать офферы, какие критерии\n- как с ui kit работа была, где он хранился на проекте\n- какая архитектура была\n- что такое redux-rtk, как внутри реализован\n- работал ли с нативным redux, graphQL, effector, webpack, vite\n- если на текущем месте работы предложили бы повысить зарплату, все равно ушел бы?"
      },
      {
        "timestamp": "2024-10-22 13:39:26",
        "content": "2024-10-22 13:39:26\n аыеъа -> 2071074234:\nСбер (проект аналог нетмонет альфабанка, но в сбере)\nЗП: Не обсуждали\nВакансия: Написал HR\nВопросы:\nБыла только одна задача на 1.5 - 2 часа\nНа основе Rick And Morty API (слышал что могут дать Pokemon API) написать приложение на React TypeScript\n// request \nhttps://rickandmortyapi.com/api/character/page=1\n // api\nhttps://rickandmortyapi.com/documentation/#character\n // 1. получить список персонажей и отрисовать карточки с аватаром персонажа // и его имене...",
        "full_content": "2024-10-22 13:39:26\n аыеъа -> 2071074234:\nСбер (проект аналог нетмонет альфабанка, но в сбере)\nЗП: Не обсуждали\nВакансия: Написал HR\nВопросы:\nБыла только одна задача на 1.5 - 2 часа\nНа основе Rick And Morty API (слышал что могут дать Pokemon API) написать приложение на React TypeScript\n// request \nhttps://rickandmortyapi.com/api/character/page=1\n // api\nhttps://rickandmortyapi.com/documentation/#character\n // 1. получить список персонажей и отрисовать карточки с аватаром персонажа // и его именем \n// 2. реализовать пагинацию по списку (стрелки назад и вперед) (\n// 3. добавить поля с вводом имени и селект с полом (женский и мужской) // 4. реализовать фильтрацию по полу и имени."
      },
      {
        "timestamp": "2024-10-22 11:31:32",
        "content": "2024-10-22 11:31:32\n Artyom Sozykin -> 2071074234:\nКомпания: Сбер (Экспресс)\nВакансия: -\nЗП: 250к\nВопросы:\n 1. С какими UIkit поработал?\n 2. Что такое ООП?\n 3. Расскажи про принципы SOLID?\n 4. С какими языками программирования работал?\n 5. С какими сборшиками работал?\n 6. Тесты делал?\n 7. Что у класса можно протестировать?\n 8. Что такое функция-конструктор?\n 9. Можно ли тестровать геттеры и сеттеры?\n 10. Какие структуры данных изучал?\n 11. Что такое O большая\n 12. Какие виды алгоритмов бывают по...",
        "full_content": "2024-10-22 11:31:32\n Artyom Sozykin -> 2071074234:\nКомпания: Сбер (Экспресс)\nВакансия: -\nЗП: 250к\nВопросы:\n 1. С какими UIkit поработал?\n 2. Что такое ООП?\n 3. Расскажи про принципы SOLID?\n 4. С какими языками программирования работал?\n 5. С какими сборшиками работал?\n 6. Тесты делал?\n 7. Что у класса можно протестировать?\n 8. Что такое функция-конструктор?\n 9. Можно ли тестровать геттеры и сеттеры?\n 10. Какие структуры данных изучал?\n 11. Что такое O большая\n 12. Какие виды алгоритмов бывают по сложности\n 13. Что происходит когда вбиваешь в адресную строку сайт и нажимешь кнопку enter?\n 14. Что будет если не указать размеры width и heigth картинки в html?\n 15. Что такое this?\n 16. Что такое прототипное наследование?\n 17. Какие есть особенности прототипов?\n\nЗадачи 1\nКаким цветом будет Text 1 и Text 2?\nПравильный ответ: оба будут блу\n\nЗадача 2\nПравильный ответ: name будет ho, потому что присваивается новый объект переменной firstObj, а secondObj сохраняет ссылку на самый первый объект\n\nЗадача 3\n// start end resolve setTimeout\n\nЗадача 4\nПравильный ответ: barfoo barbar. Дело в том, что super воспроизводит конструктор из А, создается name = foo, а getName берет реализацию из this, вот и получается barfoo, а затем name заменяется на bar и вызывается снова getName из текущего контекста barbar\n\nЗадача 5\nРешение 1:  return arr.concat(arr)\nРешение 2: Чтобы оптимизировать по памяти return arr.push(arr)"
      },
      {
        "timestamp": "2024-10-22 10:26:06",
        "content": "2024-10-22 10:26:06\n Вадим -> 2071074234:\nКомпания:Сбер(1 этап) \nВакансия: они направляют в команды после первого этапа \nЗП: не обсуждали \nВопросы: \n-про последнее место работы; \n-затем css, html( приоритетные selects, семантика, доступность, как скрыть элемент, в чем отличие display:none от других свойств сокрытия элемента, задачку какой фон был уже скидывали ее в эту группу)\n- js( var,let,const, promises, ооп, event loop, задачки такие же были и в этой группе https://t.me/c/2071074234/489/7717...",
        "full_content": "2024-10-22 10:26:06\n Вадим -> 2071074234:\nКомпания:Сбер(1 этап) \nВакансия: они направляют в команды после первого этапа \nЗП: не обсуждали \nВопросы: \n-про последнее место работы; \n-затем css, html( приоритетные selects, семантика, доступность, как скрыть элемент, в чем отличие display:none от других свойств сокрытия элемента, задачку какой фон был уже скидывали ее в эту группу)\n- js( var,let,const, promises, ооп, event loop, задачки такие же были и в этой группе https://t.me/c/2071074234/489/77175) \n-ts( typeguard, утилитные типы дженерик, задачку тоже на типы несложную , интерфейс отличие от type) \n-react(хуки, правила хуков, реконселейшен, fiber, и так же задачка) \n- про монолит и микросервисы \n- http and https"
      },
      {
        "timestamp": "2024-10-20 16:14:29",
        "content": "2024-10-20 16:14:29\n Maksim -> 2071074234:\nСбер для Экспертов (Софт)                                                                                                                                                                                                                               Вакансия:https://hh.ru/vacancy/107892762                                                                                                                                                                         ...",
        "full_content": "2024-10-20 16:14:29\n Maksim -> 2071074234:\nСбер для Экспертов (Софт)                                                                                                                                                                                                                               Вакансия:https://hh.ru/vacancy/107892762                                                                                                                                                                                                                                                зп: 230                                                                                                                                                                                                                                             Вопросы: 1)Расскажи про последнее место работы 2)как работали(Scrum(ретро и т.д)) 3)Расскажи про задачи которыми гордишься 4)Как брал задачи + про перекрестное код ревью 5)Как с беком взаимодействовал (swagger) 6)Как ты считаешь должен ли разработчик общаться с заказчиком!? 7)После показали презентацию продукта,команду и стек."
      },
      {
        "timestamp": "2024-10-20 16:02:32",
        "content": "2024-10-20 16:02:32\n Maksim -> 2071074234:\nibs (2ой этап в сбер тех+софт)                                                                                                                                                                                                Вакансия: ссылки нет                                                                                                                                                                                                                       ...",
        "full_content": "2024-10-20 16:02:32\n Maksim -> 2071074234:\nibs (2ой этап в сбер тех+софт)                                                                                                                                                                                                Вакансия: ссылки нет                                                                                                                                                                                                                           Зп:250к                                                                                                                                                                                                                                             Вопросы: 1)Расскажи про опыт. 2)Как на проекте формировали папки и файлы 3)Был на проекте Storibook про него 4)Писали тесты и какие ,какое покрытие 5)Отличие стрелочной от Fn и напиши пример(прикриплю в конце) 6)Про key в React 7)В React перерисовки (Пропс изминение и т.д) 8)Про хуки (memo поверхностное сравнение делает) 9)useEffect подробно(про жизненные циклы) \nconst obj = {\n  name: \"Alice\",\n  greet: function() {\n    const sayHello = () => console.log(this.name);\n    sayHello();\n  }\n};\n\nobj.greet(); // Выведет: Alice\nlet i = 10;\nconst arr = [];\n\nwhile(--i){\n    let index = i  // исправление\n    arr.push(() => {\n      console.log(i)\n    })\n}\n\narr[2](); // 0  выведет 0\nsetTimeout(() => {\n  console.log(1);\n}, 0);\n\n\nconst p = new Promise((resolve) => {\n     console.log(2);\n     resolve();\n});\n\n\np.then(() => { console.log(3) }).then(() => { console.log(4); });\n\nconsole.log(5)\n\n// 2 5 3 4 1\nconst getFetchTime = (fetch) => {\n   const startTime = Date.now()\n\n   return fetch().then(response => { const endTime = Date.now();  return endTime - startTime })\n}\n\ngetFetchTime(fetch).then(diffTime => { log(diffTime); })"
      },
      {
        "timestamp": "2024-10-20 10:35:41",
        "content": "2024-10-20 10:35:41\n аыеъа -> 2071074234:\nСбер \nЗп: не обсуждали\nВакансия: написала hr\nВопросы:\nРассказать про разные протоколы\nРендеринг страницы в браузере\nЗадачи теже самые что и тут, но были еще\nНаписать свой promise any\nОстальные прикрепил картинкой",
        "full_content": "2024-10-20 10:35:41\n аыеъа -> 2071074234:\nСбер \nЗп: не обсуждали\nВакансия: написала hr\nВопросы:\nРассказать про разные протоколы\nРендеринг страницы в браузере\nЗадачи теже самые что и тут, но были еще\nНаписать свой promise any\nОстальные прикрепил картинкой"
      },
      {
        "timestamp": "2024-10-18 05:08:09",
        "content": "2024-10-18 05:08:09\n Сергей -> 2071074234:\n- Сбер(не помню какой именно)\n- Первый этап\n- ЗП: 200+\n- Успех: по не дали ответ(Скорее всего не прошел, повалился на TS лайвкоде)\nБыли вопросы по всем блокам.\n- Доступность\n- Button vs Link при их стилизации\n- DOM, CSSOM\n- Как страница отрисовывается(ip, dns, repaint, reflow)\n- Как изолировать стили, Shadow Dom\n- Замыкание\n- let,var,const\n- This\n- Fiber\n- Pick, Omit, Extract, Exclude, Partial, Required\n- Key реакт\n- WebSocket, SSE, SSR, Лонг пулинг\n- N...",
        "full_content": "2024-10-18 05:08:09\n Сергей -> 2071074234:\n- Сбер(не помню какой именно)\n- Первый этап\n- ЗП: 200+\n- Успех: по не дали ответ(Скорее всего не прошел, повалился на TS лайвкоде)\nБыли вопросы по всем блокам.\n- Доступность\n- Button vs Link при их стилизации\n- DOM, CSSOM\n- Как страница отрисовывается(ip, dns, repaint, reflow)\n- Как изолировать стили, Shadow Dom\n- Замыкание\n- let,var,const\n- This\n- Fiber\n- Pick, Omit, Extract, Exclude, Partial, Required\n- Key реакт\n- WebSocket, SSE, SSR, Лонг пулинг\n- Next плюсы минусы отличие от react\n- С какими БД работал\n- WebSocket/Vite\n- Перечисли все команды, которые знаешь с git\n- В чем плюс TS\n- Спрайты\n- хуки\n- uselayoutEffect vs useEffect\n- Virtual Dom, реконсилейшин\n- Как оптимизировать любое приложение(не только React)\n- Специфичность \n- Display\n- Дженерики\n\nЗадачи:\n// 1) после монтирования асинхронно получить число и вывести его\n// 2) выводить текущее значение вертикального скролла окна (window.scrollY)\n \n \n// import React, { useState, useEffect } from 'react';\n \n// // имитация запроса к серверу. просто получаем число асинхронно\n// const fetchRandomNumber = () => Promise.resolve(Math.random());\n \n// const NumberAndScroll = () => {\n//   const [number, setNumber] = useState(0);\n//   const [scroll, setScroll] = useState(0);\n   \n//   useEffect(() => {\n//     fetchRandomNumber().then(res => setNumber(res))\n//   },[]);\n  \n//   useEffect(()=>{\n//     const handleScroll = () => setScroll(window.scrollY)\n//     window.addEventListener('scroll', handleScroll);\n \n//     return () => window.removeEventListener('scroll', handleScroll);\n//   },[])\n   \n//   return (\n//     <div>\n//       <div> Number: { number } </div>\n//       <div> Scroll: { scroll } </div>\n//     </div> \n//   )\n// }\n\n\n// type FModificate = <T extends Record<string, unknown>, E extends unknown>(obj: T, fieldValue: E) => Record<string, E | keyof T>\n \n// const modificate:FModificate = (obj, fieldValue) => {\n//     obj.field = fieldValue;\n//     return obj;\n// }\n\n\n// const func = <T>(a:T): T {\n//     return a\n// } \n\n// const value = 1234;\n//  const a = typeof value; // \n// console.log(typeof (a)); //??? Number\n\n// /////////////////////////////\n\n// console.log(0.1 + 0.2 == 0.3);\n\n\n/////////////////////////////\n\n// console.log('one');\n// setTimeout(function() {\n//   console.log('two');\n// }, 0);\n// Promise.resolve().then(function() {\n//   console.log('three');\n// })\n// console.log('four');\n\n/// one four three two \n\n/////////////////////////////\n// for (var i = 0; i < 3; i++) {\n//     setTimeout(function log(j) {\n//         console.log(j); // что выведет?\n//     }, 1000, i);\n// }\n\n/////////////////////////////\n\n// console.log(1);\n// setTimeout(function() {\n//     console.log(2);\n// }, 0)\n// console.log(3);\n\n// // 1 3 2"
      },
      {
        "timestamp": "2024-10-16 17:38:49",
        "content": "2024-10-16 17:38:49\n Artyom Sozykin -> 2071074234:\nСбер (1 этап)\nЗП: 250к\nВопросы по протоколам, css селекторам, dom display: none vs visible: hidden\nЛайфкодинг:\nПо сути надо расставить bind в 2 и 3\nconst logger = {\n    mode: 'Dev',\n    check() {\n        console.log(`This is ${this.mode} mode`);\n    }\n};\n\nlogger.check(); // => ? (1) Dev\n\nconst loggerCheck = logger.check.bind(logger);\n\nloggerCheck(); // => ? (2) Dev\n\nfunction execute(fn) {\n    \n    return fn();\n}\n\nexecute(logger.check.bind(logger...",
        "full_content": "2024-10-16 17:38:49\n Artyom Sozykin -> 2071074234:\nСбер (1 этап)\nЗП: 250к\nВопросы по протоколам, css селекторам, dom display: none vs visible: hidden\nЛайфкодинг:\nПо сути надо расставить bind в 2 и 3\nconst logger = {\n    mode: 'Dev',\n    check() {\n        console.log(`This is ${this.mode} mode`);\n    }\n};\n\nlogger.check(); // => ? (1) Dev\n\nconst loggerCheck = logger.check.bind(logger);\n\nloggerCheck(); // => ? (2) Dev\n\nfunction execute(fn) {\n    \n    return fn();\n}\n\nexecute(logger.check.bind(logger)); // => ? (3) Dev\n\n2 задача\nреализовать второй counter умножающий на 2 от первого counter\n\nexport default function Two() {\n  const [count, setCount] = useState(0);\n  const [doubleCount, setDoubleCount] = useState(count * 2);\n  const handleCount = () => {\n    setCount((prevState) => prevState + 1);\n    // setDoubleCount(prev)\n  };\n\n  useEffect(() => {\n    setDoubleCount(count * 2);\n  }, [count]);\n\n  return (\n    <div className=\"App\">\n      <h2>Count Without useEffect</h2>\n      <h3>Count: {count}</h3>\n      <h3>Count * 2: {doubleCount}</h3>\n      <button onClick={handleCount}>Count++</button>\n    </div>\n  );\n}\n\n3 задача:\nvar i = 10;\nvar array = [];\n\n﻿﻿﻿while (i--) {\n﻿﻿ array. push(function() {\n return i + i;\n});\n\nconsole. log([\narray[0](), // ???\narray[1](), //???\n])\n\nНадо по сути сделать переменную в while let k = i и после заменить в функции return k + k"
      },
      {
        "timestamp": "2024-10-15 11:59:58",
        "content": "2024-10-15 11:59:58\n Katerina -> 2071074234:\nКомпания: ай теко\nВакансия: https://spb.hh.ru/vacancy/106341557?from=employer&hhtmFrom=employer\nЗП: 250к\nВопросы: один в один - https://t.me/c/2071074234/489/67643\n\nПроект в сбер! вопросы от проекта к проекту меняются, т.к. собесят чуваки с проекта непосредственно )",
        "full_content": "2024-10-15 11:59:58\n Katerina -> 2071074234:\nКомпания: ай теко\nВакансия: https://spb.hh.ru/vacancy/106341557?from=employer&hhtmFrom=employer\nЗП: 250к\nВопросы: один в один - https://t.me/c/2071074234/489/67643\n\nПроект в сбер! вопросы от проекта к проекту меняются, т.к. собесят чуваки с проекта непосредственно )"
      },
      {
        "timestamp": "2024-10-13 16:31:26",
        "content": "2024-10-13 16:31:26\n Maksim -> 2071074234:\nСбер (для экспертов тех+софт)                                                                                                                                                                                Вакансия:https://hh.ru/vacancy/107892762                                                                                                                                                                               зп:250                               ...",
        "full_content": "2024-10-13 16:31:26\n Maksim -> 2071074234:\nСбер (для экспертов тех+софт)                                                                                                                                                                                Вакансия:https://hh.ru/vacancy/107892762                                                                                                                                                                               зп:250                                                                                                                                                                                                                                                Вопросы:1)Расскажи об опыте.О задачах которыми гордишься.Как ты понимаешь ,что должен делать сеньер!?(брать больше ответственности  за команду,синковаться с бизнес частью,ответственность за достижения в команде) .2)Симантическая верстка и использовал ли на проектах.3)Какие знаешь position в css.4)С какими css работал(module,css in js),что лучше.5)Про window location,history(в браузере)5)Про оптимизацию(деление на чанки,виртулизация и т.д).6)Отличие webpack и vite (с чем работал).7)Про хранилище в браузере(local,session и т.д).8)Eventloop.9)Map , Set .10)requestAnimationFrame.11)Promise.12)CORS.13)Про хуки реакт.14)Как работает React(Virtyal Dom и т.д).15)git pull , git rebase , git chery pick (пользовался ли и что делают)!!!\nconst createCounter = () => {\n  let count = 0;\n\n  const increment = () => {\n    count++;\n  };\n\n  const decrement = () => {\n    count--;\n  };\n\n  return {\n    count,\n    increment,\n    decrement,\n  };\n};\n\nconst result = createCounter();\n\nresult.increment(); \nresult.increment();\nresult.decrement(); \n\nconsole.log(result.count); // 0\nПочему 0 и как исправить!?\nimport React, { useState, useEffect } from 'react';\n\n// Функция для получения данных\nconst fetchItems = () => Promise.resolve(['apple', 'orange']);\n\nconst ItemsAndScroll = () => {\n  const [items, setItems] = useState<string[]>([]);\n  const [scroll, setScroll] = useState<number>(0);\n\n  // useEffect для получения данных\n  useEffect(() => {\n    fetchItems().then((data) => setItems(data));\n  }, []); // Пустой массив зависимостей, чтобы выполнить только при монтировании\n\n  // useEffect для отслеживания прокрутки\n  useEffect(() => {\n    const handleScroll = () => {\n      setScroll(window.scrollY);\n    };\n\n    // Добавляем обработчик события прокрутки\n    window.addEventListener('scroll', handleScroll);\n\n    // Удаляем обработчик события при размонтировании\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []); // Пустой массив зависимостей, чтобы выполнить только при монтировании\n\n  return (\n    <>\n      <div style={{ height: '25vh', overflow: 'hidden' }}>\n        <div>Scroll: {scroll}</div>\n        <ul>\n          {items.map((item) => (\n            <li key={item} style={{ marginTop: '8px', marginBottom: '8px' }}>\n              {item}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default ItemsAndScroll;\nисправить!!!"
      },
      {
        "timestamp": "2024-10-11 14:59:18",
        "content": "2024-10-11 14:59:18\n Mike -> 2071074234:\nКомпания: СБЕР Страхование(Angular)\nВакансия:https://hh.ru/vacancy/107613424\nЗП: 250к\nВопросы:\n1.Свойства Window\n2.local/sessionStorage\n3.JWT\n4.CORS\n5.ООП\n6.Полиморфизм детально\n7.Вопрос по процессам, как тесты на проекте делали и какой флоу тестов(закончил таску и как тестер получал её)\nБез задач",
        "full_content": "2024-10-11 14:59:18\n Mike -> 2071074234:\nКомпания: СБЕР Страхование(Angular)\nВакансия:https://hh.ru/vacancy/107613424\nЗП: 250к\nВопросы:\n1.Свойства Window\n2.local/sessionStorage\n3.JWT\n4.CORS\n5.ООП\n6.Полиморфизм детально\n7.Вопрос по процессам, как тесты на проекте делали и какой флоу тестов(закончил таску и как тестер получал её)\nБез задач"
      },
      {
        "timestamp": "2024-10-09 11:32:18",
        "content": "2024-10-09 11:32:18\n Михаил -> 2071074234:\nЛига Цифровой Экономики (на проект в Сбер)\nвакансия hh.ru/vacancy/107380873\nзп 200к",
        "full_content": "2024-10-09 11:32:18\n Михаил -> 2071074234:\nЛига Цифровой Экономики (на проект в Сбер)\nвакансия hh.ru/vacancy/107380873\nзп 200к"
      },
      {
        "timestamp": "2024-09-30 18:33:16",
        "content": "2024-09-30 18:33:16\n Анжелика -> 2071074234:\nСбер \n- зп :от 200;\n- вакансия: зарефералили;\n- успех: ✅, пригласили на сл этап;\n- по вопросам был разнобой классических:\n - js,\n - семантика, +- scss.module\n - из чего состоит сборка( про то что код без лишнего, при этом кросбраузерный)\n - реакт хуки для мемоизации, браузерные хранилища( и что хранить данные можно в квери параметрах)\n - задачки на скринах: 4( на стили, на js, просто по сути написать интерфейс( подробности про невер, на промисы)",
        "full_content": "2024-09-30 18:33:16\n Анжелика -> 2071074234:\nСбер \n- зп :от 200;\n- вакансия: зарефералили;\n- успех: ✅, пригласили на сл этап;\n- по вопросам был разнобой классических:\n - js,\n - семантика, +- scss.module\n - из чего состоит сборка( про то что код без лишнего, при этом кросбраузерный)\n - реакт хуки для мемоизации, браузерные хранилища( и что хранить данные можно в квери параметрах)\n - задачки на скринах: 4( на стили, на js, просто по сути написать интерфейс( подробности про невер, на промисы)"
      },
      {
        "timestamp": "2024-09-27 09:14:26",
        "content": "2024-09-27 09:14:26\n Timofei Syromiatnikov -> 2071074234:\n— Название: Антара (аутстаф в Сбер, 2 этап - тех. собес к клиенту)\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— ЗП: от 200к\n— Вопросы:\n1) Расскажи про свой опыт. Какое образование. Сколько лет. Почему ушел с послед. места работы.\n2) Какие знаешь хуки? useRef особенности?\n3) Какие жизненные циклы компонента реализует useEffect и как?\n4) Каким стейт-менеджером пользовался, зачем нужны они вообще? Какой архитекту...",
        "full_content": "2024-09-27 09:14:26\n Timofei Syromiatnikov -> 2071074234:\n— Название: Антара (аутстаф в Сбер, 2 этап - тех. собес к клиенту)\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— ЗП: от 200к\n— Вопросы:\n1) Расскажи про свой опыт. Какое образование. Сколько лет. Почему ушел с послед. места работы.\n2) Какие знаешь хуки? useRef особенности?\n3) Какие жизненные циклы компонента реализует useEffect и как?\n4) Каким стейт-менеджером пользовался, зачем нужны они вообще? Какой архитектурный патерн у Redux? Что в Redux реализует своевременное обновление данных при изменении? (observer)\n5) Что такое flux? \n6) Приоритетность селекторов.\n7) Как выровнять див?\n8) em, rem что это?\n9) Как парсится страница? Все этапы, на каком мы обрабатываем скрипты? Что такое async и defer у скриптов?\n10) Что такое эвентлупа, что входит в микро и макро задачи?\n11) Погружение, всплытие в DOM, что это?\n\n— Задачи:\n1) Что выведется и почему:\nsetTimeout(() => { console.log(a, b,c)  }, 100)\n\nconst promise = new Promise((resolve) => {\n  b--;\n  resolve();\n})\n\npromise\n  .then(() => console.log(a))\n  .catch(() => console.log(b--))\n  .catch(() => console.log(c))\n\nlet a = 1:\nlet b = 2;\n\nconsole.log(c)\n\nvar c = 3;\n\n// undefined 2 1 1 3\n\n2) Задача на ревью\nconst Component = ({ main  }) => {\n  if (main) return null\n  const [array, setArray] = useState([0])\n  const ref = useRef(0)\n\n  const handleClick = useCallback(() => {\n    setArray([array, ref.current])\n  }, [])\n\n  useEffect(() => {\n    ref.current = Math.random() + ref.current + array[array.length-1]\n  }, [array, ref])\n\n  retrun <div>{\n    array.map(id => <div>{id}</div>)\n  }</div>  \n}\n3) Напиши функцию которая вернет только уникальные значения массива. Не используя нативные способы JS, по типу new Set()\n// [1, 1, 2, 3, 5, 2, 8, 9, 1, 0] ===> [1, 2, 3, 5, 8, 9, 0]"
      },
      {
        "timestamp": "2024-09-24 16:12:33",
        "content": "2024-09-24 16:12:33\n SQwerty -> 2071074234:\nIFellow (аутстафф в Сбер)\nСсылка на вакансию: написала hr\nЗП: 250k\nВопросы: \nЧто такое контекст this? В чем особенность стрелочной функции? Что такое замыкание, подробно\nБаза по Promise. Какие типы есть в js?\nСпрашивал про классовые компоненты, про методы жизненного цикла в классовых компонентах. В чем отличие от функциональных компонентов? Про виртуализацию, как реализовывал кастомно?\nБыли вопросы по redux про сущности flux. Что такое RTK Query, в чем...",
        "full_content": "2024-09-24 16:12:33\n SQwerty -> 2071074234:\nIFellow (аутстафф в Сбер)\nСсылка на вакансию: написала hr\nЗП: 250k\nВопросы: \nЧто такое контекст this? В чем особенность стрелочной функции? Что такое замыкание, подробно\nБаза по Promise. Какие типы есть в js?\nСпрашивал про классовые компоненты, про методы жизненного цикла в классовых компонентах. В чем отличие от функциональных компонентов? Про виртуализацию, как реализовывал кастомно?\nБыли вопросы по redux про сущности flux. Что такое RTK Query, в чем его приемущество?"
      },
      {
        "timestamp": "2024-09-18 12:50:11",
        "content": "2024-09-18 12:50:11\n Timofei Syromiatnikov -> 2071074234:\n— Название: Антара (аутстаф в сбер)\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— ЗП: когда откликался было до 200к, сейчас от 200к поставили, хз\n— Вопросы:\n1) Что такое useRef и useState хуки, расскажи о них поподробнее и разницу.\n2) Расскажи что такое useEffect, различие между useLaoutEffect, и как мы можем вызвать колбек при размонтировании компонента?\n3) Что такое event.stopPropagation() и event.preventDefa...",
        "full_content": "2024-09-18 12:50:11\n Timofei Syromiatnikov -> 2071074234:\n— Название: Антара (аутстаф в сбер)\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— ЗП: когда откликался было до 200к, сейчас от 200к поставили, хз\n— Вопросы:\n1) Что такое useRef и useState хуки, расскажи о них поподробнее и разницу.\n2) Расскажи что такое useEffect, различие между useLaoutEffect, и как мы можем вызвать колбек при размонтировании компонента?\n3) Что такое event.stopPropagation() и event.preventDefault()?\n4) С помощью чего можно решить проблему пропс дриллинга?\n5) Какие минусы использования useContext в реакте?\n6) Что такое дженерики в  TS?\n\n— Задачи:\n1) Напиши функцию, которая принимает аргументом массив (в массиве могут быть числа и/или вложенные массивы), и выдает сумму всех чисел из переданного массива.\nconsole.log(sum([1,1,1, [2, 1], [1, [1, [1], 3]]]) // вернуть должно: 12\n2) Напиши кастомный хук useFetch, который принимает урл, и отдает объект с значениями data, isLoading, isError, и функцию reload, при вызове которой мы по новой шлем запрос за данными.\nfunction App() {\n  const { data, isLoading, isError, reload } = useFetch('https://externalapi')\n\n  return <div>\n    <div>{data?.map(value => <div>{value.name}</div>)</div>\n    <button onClick={reload}>reload</button>\n  </div>\n}\n3. Что выведется в консоли?\nconsole.log(1 + '2' + '2')\nconsole.log(1 + +'2' + '2')\nconsole.log('A' - 'B')\nconsole.log(typeof /abc/)\nconsole.log(true - 12)\nconsole.log(0.1 + 0.2)\n\nconst obj = { '1': 10, 1: 3 }\nconsole.log(obj['1'] + obj[1])\n4. Напиши функцию between, которая принимает минимальное и максимальное значение. И возвращает true или false если значение назходится в этом диапозоне соотвтественно. (Задача с подковыркой, вызов функции ничего нельзя менять, надо адаптировать решение под вызов который дан в задаче)\nfunction betwee(min, max) {\n\n// короче тут возвращаем функцию, чтобы filter мог её вызвать, в этот колбек принимает current число, и тут сравниваем уже, если в диапазоне возвращаем true, если нет - false\n}\n\nconst arr = [1, 2, 3, 4, 5, 6]\nconst range = arr.filter(betwee(3, 6))\nconsole.log(range) // [4, 5]"
      },
      {
        "timestamp": "2024-09-13 11:29:41",
        "content": "2024-09-13 11:29:41\n Timofei Syromiatnikov -> 2071074234:\n— Название: Сбер АБС для Индии (собес был полностью на русском)\n— Вакансия: https://hh.ru/vacancy/106373352?hhtmFrom=employer_vacancies\n— ЗП: 280-300к\n— Вопросы:\n1) Расскажи про свои задачи, которыми гордишься?\n2) Расскажи про флоу по которому вы работали? Например про CI/CD\n3) С какими сборщиками работал?\n4) Работал ли с SSR? Расскажи как использовали, если работал.\n\n— Задачи:\n1) Напиши кастомный хук useFetch, который принимает только ur...",
        "full_content": "2024-09-13 11:29:41\n Timofei Syromiatnikov -> 2071074234:\n— Название: Сбер АБС для Индии (собес был полностью на русском)\n— Вакансия: https://hh.ru/vacancy/106373352?hhtmFrom=employer_vacancies\n— ЗП: 280-300к\n— Вопросы:\n1) Расскажи про свои задачи, которыми гордишься?\n2) Расскажи про флоу по которому вы работали? Например про CI/CD\n3) С какими сборщиками работал?\n4) Работал ли с SSR? Расскажи как использовали, если работал.\n\n— Задачи:\n1) Напиши кастомный хук useFetch, который принимает только url. Обработай еще такой юз кейс когда у нас поменялся url, и может вернуться не актуальные данные. То есть у нас уже был фетч -> поменялся урл -> делаем новый фетч -> старый фетч возвращает данные позже, чем новый. Из за этого неактуальные данные приходят\n\nconst useFetch = (url) => {}\n\nfunction Comment({ url }) {\n// . . . = useFetch(url)\n\nreturn <div>{data}</div>\n}\n\n2) Напиши функцию дебаунс\n3) Напиши функцию promiseAll\n4) Напиши функционал рендера древовидного списка, где элемент может раскрываться и закрываться если у него есть дети.\n  // Task is quite ordinary:\n  //\n  // 1) import comments.ts file here\n  // 2) show results as \"toggle list\"\n\n  // + message 1\n  // - message 2\n  //   + message 4\n  //   message 5\n\nexport const comments = [\n  {\n    id: 1,\n    text: 'message 1',\n    children: [\n      {\n        id: 3,\n        text: 'message 3',\n      },\n    ],\n  },\n  {\n    id: 2,\n    text: 'message 2',\n    children: [\n      {\n        id: 4,\n        text: 'message 4',\n        children: [\n          {\n            id: 7,\n            text: 'message 7',\n          },\n          {\n            id: 8,\n            text: 'message 8',\n          },\n        ],\n      },\n      {\n        id: 5,\n        text: 'message 5',\n      },\n    ],\n  },\n];"
      },
      {
        "timestamp": "2024-09-11 11:05:11",
        "content": "2024-09-11 11:05:11\n аыеъа -> 2071074234:\nСбер для экспертов\n- ЗП: не обсуждали\n- Вопросы: \nОценить себя по грейду\npackage.lock.json для чего нужен, будет ли отправлен в Git\nПеременные окружения (env)\nНа какой версии React был проект, какие фичи новые из 18 версии использовал\nКакие хуки писал\nРассказать про порталы в React\n- Задачи:\nconsole.log(new Date(2000,1,1) == new Date(2000,1,1)) // ?\n// false\n// Как сделать что-бы был true\nconsole.log(new Date(2000,1,1).getTime() == new Date(2000,1,1).get...",
        "full_content": "2024-09-11 11:05:11\n аыеъа -> 2071074234:\nСбер для экспертов\n- ЗП: не обсуждали\n- Вопросы: \nОценить себя по грейду\npackage.lock.json для чего нужен, будет ли отправлен в Git\nПеременные окружения (env)\nНа какой версии React был проект, какие фичи новые из 18 версии использовал\nКакие хуки писал\nРассказать про порталы в React\n- Задачи:\nconsole.log(new Date(2000,1,1) == new Date(2000,1,1)) // ?\n// false\n// Как сделать что-бы был true\nconsole.log(new Date(2000,1,1).getTime() == new Date(2000,1,1).getTime()) // ?\n// true\n// ------------------------------------------------------------------------\n \nconst array = [1,2,3];\n                                2, 4, 6                 4, 6\nconst array2 = array.forEach(item => item * 2).filter(item => item > 3);\n const a = array.forEach(item => item * 2); // undefined\n const b = a.filter(item => item > 3) // error\n \n \nconst array3 = array.map(item => item * 2).filter(item => item > 3);\n \nconsole.log(array2) // ? // [4, 6] // undefined\nconsole.log(array3) // [4, 6]\n\n// Правильный ответ что forEach ничего не возвращает, а в filter попадает undefined, что вызывает ошибку  ------------------------------------------------------------------------    \n \n \n(function() {\n    function modifyBondData(price, bondType) {\n        price.rub = 1200;\n        bondType = \"fixed\";\n        isEditable = true;\n        \n        function printBondData() {\n            console.log(price); // 4 // {rub: 1200}\n            console.log(bondType); // 5 // \"fixed\"\n            console.log(isEditable); // 6 // null \n        }\n \n        return printBondData;\n    }\n \n    let price = { rub: 1000 };\n    let bondType = \"floating\";\n    let isEditable = false;\n \n    const printItemData = modifyBondData(price, bondType, isEditable);\n \n    console.log(price); // 1 // { rub: 1200 }\n    console.log(bondType); // 2 // \"floating\"\n    console.log(isEditable); // 3 // true \n \n    price = { usd: 10 };\n    bondType = \"amortization\";\n    isEditable = null;\n \n    printItemData();\n}());  \n// \n \n// ------------------------------------------------------------------------\n\n\n\ninterface Item {\n    id: number;\n    title: string;\n    done: boolean;\n}\n\n \nconst createNewItem = (itemData: Omit<Item, 'id'>): Item => {\n    const id = useId();\n \n    return ({\n      …itemData, id\n    })\n}\n\n\n// Что будет при нажатии на onClick, будет 0 т.к. setState асинхронен и выполнится при след. рендере\nconst ExampleComponent = () => {\n  const [state, setState] = useState(0);\n \n  const onClick = () => {\n    setState(1);\n  }\n \n  return <button onClick={onClick}>{state}</button> // \n\nconst ExampleComponent = () => {\n  const [state, setState] = useState(0);\n \n  const onClick = () => {\n    setState(state + 1);\n    setState(state + 1);\n    setState(state + 1);\n  }\n \n  return <button onClick={onClick}>{state}</button> // будет 1"
      },
      {
        "timestamp": "2024-09-11 10:00:24",
        "content": "2024-09-11 10:00:24\n Бахтияр -> 2071074234:\nIBS ЦФА 3 Этап\n- зп 230 - сказал что можно и больше \n- вакансия: https://t.me/c/2071074234/616/58479\n- вопросы:\n1) Где работал ,чем занимался(Подробно) !? \n2) Почему решили для себя рассмотреть новые предложения по работе!? \n3) Чего бы вам хотелось сейчас найти на ранке!? \n4) Какую зарплату хотели бы!?                                                                                                         Ваши вопросы: взаимодействие с командой ( Сбер-J...",
        "full_content": "2024-09-11 10:00:24\n Бахтияр -> 2071074234:\nIBS ЦФА 3 Этап\n- зп 230 - сказал что можно и больше \n- вакансия: https://t.me/c/2071074234/616/58479\n- вопросы:\n1) Где работал ,чем занимался(Подробно) !? \n2) Почему решили для себя рассмотреть новые предложения по работе!? \n3) Чего бы вам хотелось сейчас найти на ранке!? \n4) Какую зарплату хотели бы!?                                                                                                         Ваши вопросы: взаимодействие с командой ( Сбер-Juil (Scrum) ), легаси нет ( Давольно новый проект ), они вендер( аутсорс ), про испт (гигиенический выбор задач, настройка окружения, доступы)."
      },
      {
        "timestamp": "2024-09-10 19:15:24",
        "content": "2024-09-10 19:15:24\n Руслан -> 2071074234:\n— Название: сбер гораций\n— зп: 250 - 290к\n— вакансия: https://hh.ru/vacancy/104910371\n— задачи:\n1\n// Функция мемоизации\n// Это базовый патерн мемонизации так что пиши смело!!!!!!!!!!!\nconst memoize = (fn) => {\n  const cache = {}; // Создаем объект для хранения результатов\n\n  return (...args) => {\n    const key = JSON.stringify(args); // Преобразуем аргументы в строку для использования в качестве ключа\n    // !!! при сложении -2+2 будет ноль и в таком сл...",
        "full_content": "2024-09-10 19:15:24\n Руслан -> 2071074234:\n— Название: сбер гораций\n— зп: 250 - 290к\n— вакансия: https://hh.ru/vacancy/104910371\n— задачи:\n1\n// Функция мемоизации\n// Это базовый патерн мемонизации так что пиши смело!!!!!!!!!!!\nconst memoize = (fn) => {\n  const cache = {}; // Создаем объект для хранения результатов\n\n  return (...args) => {\n    const key = JSON.stringify(args); // Преобразуем аргументы в строку для использования в качестве ключа\n    // !!! при сложении -2+2 будет ноль и в таком случае проверка не пройдет, нужно учитывать это\n    if (cache[key]) {\n      console.log('Fetching from cache:', key); // Если результат есть в кеше, возвращаем его\n      return cache[key];\n    }\n\n    console.log('Calculating result for:', key); // Если результата в кеше нет, вычисляем его\n    const result = fn(...args); // Вызываем исходную функцию\n    cache[key] = result; // Сохраняем результат в кеш\n    return result;\n  };\n};\n\n// Пример использования\nconst sum = (a, b) => a + b; // Функция для сложения\nconst memoizedSum = memoize(sum); // Мемоизированная версия функции\n\nconsole.log(memoizedSum(2, 3)); // Вычисляет результат\nconsole.log(memoizedSum(2, 3)); // Возвращает результат из кеша\n2 Написать дебаунс\n\n3 вывод первых наиболее часто встречающихся дубликатов\n\nfunction topKFrequent(nums, k) {\n  const frequencyMap = {}; // Используем объект для хранения частоты\n\n  // Подсчет частоты каждого числа\n  nums.forEach(num => {\n    frequencyMap[num] = (frequencyMap[num] || 0) + 1;\n  });\n\n  // Преобразуем объект в массив пар [число, частота], затем сортируем по частоте\n  const sortedNums = Object.entries(frequencyMap).sort((a, b) => b[1] - a[1]);\n\n  // Возвращаем первые K чисел\n  return sortedNums.slice(0, k).map(entry => entry[0]);\n}\n\n// Пример использования\nconst nums = [4, 4, 3, 3, 3, 4, 4, 8, 8, 2];\nconst k = 2;\nconsole.log(topKFrequent(nums, k)); // Output: [4, 3]\n4 \nfunction groupAnagrams(strs) {\n  const map = {}; // Объект для хранения групп анаграмм\n\n  strs.forEach(str => {\n    // Сортируем буквы в слове по алфавиту, это будет ключ\n    const sortedStr = str.split('').sort().join('');\n\n    // Если ключ уже есть в объекте, добавляем туда слово\n    if (map[sortedStr]) {\n      map[sortedStr].push(str);\n    } else {\n      // Если ключа нет, создаем новый массив с этим словом\n      map[sortedStr] = [str];\n    }\n  });\n\n  // Возвращаем группы анаграмм как массив массивов\n  return Object.values(map);\n}\n\n// Пример использования\nconst strs = [\"act\", \"pots\", \"tops\", \"cat\", \"stop\", \"hat\"];\nconsole.log(groupAnagrams(strs)); \n// Output: [ [ 'act', 'cat' ], [ 'pots', 'tops', 'stop' ], [ 'hat' ] ]"
      },
      {
        "timestamp": "2024-09-06 14:11:26",
        "content": "2024-09-06 14:11:26\n Руслан -> 2071074234:\nИП Свистунова Екатерина Александровна сбер проект тех собес\n— зп: до 370к\n— вакансия: https://hh.ru/vacancy/105803250?hhtmFrom=chat\n— вопросы: \n1. интересные задачи\n2. var let const\n3. можно ли изменить объект, объявленный через const\n4. как сделать объект иммутабельным\n5. как скопировать объект глубоко и поверхностно\n6. eval для чего\n7. как работает сборщик мусора, слабые ссылки\n8. атрибут key, если не передать его\n9. рендеринг в реакте синхронный или ...",
        "full_content": "2024-09-06 14:11:26\n Руслан -> 2071074234:\nИП Свистунова Екатерина Александровна сбер проект тех собес\n— зп: до 370к\n— вакансия: https://hh.ru/vacancy/105803250?hhtmFrom=chat\n— вопросы: \n1. интересные задачи\n2. var let const\n3. можно ли изменить объект, объявленный через const\n4. как сделать объект иммутабельным\n5. как скопировать объект глубоко и поверхностно\n6. eval для чего\n7. как работает сборщик мусора, слабые ссылки\n8. атрибут key, если не передать его\n9. рендеринг в реакте синхронный или нет\n10. реакт fiber\n11. стрикт мод в реакт\n12. браузерные хранилища, отличия\n13. куда бы засунул refresh токен\n— задачи\nfunction fibonacci(n) {\n    if (n <= 0) return 0;\n    if (n === 1) return 1;\n\n    let a = 0; // F(0)\n    let b = 1; // F(1)\n    let c;\n\n    for (let i = 2; i <= n; i++) {\n        c = a + b; // F(n) = F(n-1) + F(n-2)\n        a = b;     // Сдвигаем значения\n        b = c;\n    }\n\n    return b; // Возвращаем F(n)\n}\n\n// Пример использования:\nconsole.log(fibonacci(10)); // Выведет 55"
      },
      {
        "timestamp": "2024-09-04 13:25:36",
        "content": "2024-09-04 13:25:36\n Maksim -> 2071074234:\n—- Сбер для Экспертов                                                                                                                                                                                                                                                 —зп 200                                                                                                                                                                                            ...",
        "full_content": "2024-09-04 13:25:36\n Maksim -> 2071074234:\n—- Сбер для Экспертов                                                                                                                                                                                                                                                 —зп 200                                                                                                                                                                                                                                                                   —ссылка https://hh.ru/vacancy/106488837                                                                                                                                                                                                                 import React, { useState, useEffect } from 'react';\n\nconst fetch = () => Promise.resolve(['apple', 'orange']);\n\nconst ItemsAndScroll = () => {\n    \n  const [items, setItems] = useState([]);\n  const [scroll, setScroll] = useState(0);\n\n  useEffect(() => {\n      \n    fetch()\n    .then((data) => setItems(data))\n    \n    const handleScroll = () => {\n        setScroll(window.scrollY)\n    }\n    \n    window.addEventListener('scroll', handleScroll );\n\n    return () => window.removeEventListener('scroll', handleScroll);\n\n  },[]);\n\n  return (\n    <>\n    \n      <div style={{height: '25vh'; overflow: 'hidden';}} className=\"styles ? styles1 : '\"> \n      \n       <div> Scroll: { scroll } </div>\n      <ul>\n        { items.map(item=>(\n        <li key={item}\n        style={{marginTop: '8px'; marginBottom: '8px';}}>\n        {item}\n        </li>))}\n        </ul>\n        \n      </div>\n      \n      \n    </> \n  )\n}  console.log('0');\n\nnew Promise(resolve => setTimeout(resolve)).then(() => console.log(1));\n\nsetTimeout(() => {\n    console.log('2');\n});\n\nnew Promise((resolve, reject) => {\n    console.log('3');\n    resolve(1);\n\n    new Promise(() => {\n        console.log('4');\n    });\n});\n\nPromise.resolve().then(() => {\n    console.log('5');\n});\n\nconsole.log('6');             //  console.log('0');\n\nnew Promise(resolve => setTimeout(resolve)).then(() => console.log(1));\n\nsetTimeout(() => {\n    console.log('2');\n});\n\nnew Promise((resolve, reject) => {\n    console.log('3');\n    resolve(1);\n\n    new Promise(() => {\n        console.log('4');\n    });\n});\n\nPromise.resolve().then(() => {\n    console.log('5');\n});\n\nconsole.log('6');  console.log('0');\n\nnew Promise(resolve => setTimeout(resolve)).then(() => console.log(1));\n\nsetTimeout(() => {\n    console.log('2');\n});\n\nnew Promise((resolve, reject) => {\n    console.log('3');\n    resolve(1);\n\n    new Promise(() => {\n        console.log('4');\n    });\n});\n\nPromise.resolve().then(() => {\n    console.log('5');\n});"
      },
      {
        "timestamp": "2024-09-03 13:15:35",
        "content": "2024-09-03 13:15:35\n Timofei Syromiatnikov -> 2071074234:\n— Название: Сбер \"Фокус\"\n— Вакансия: https://rabota.sber.ru/search/4312918\n— ЗП: 280-300к\n— Задачи: \n1) Отрефакторить, решить потенциальные ошибки. Блоки где править подсвечены комментами // 1 // 2 // 3\nimport { FC, useCallback, useEffect, useRef, useState } from \"react\";\n\nimport ... from ...\n\ntype Props = {\n  user: string;\n  roles?: string[]\n}\n\nexport const ProfilePage: FC<Props> = ({user, roles = []}) => {\n  // 1\n  let isShowInfo = fals...",
        "full_content": "2024-09-03 13:15:35\n Timofei Syromiatnikov -> 2071074234:\n— Название: Сбер \"Фокус\"\n— Вакансия: https://rabota.sber.ru/search/4312918\n— ЗП: 280-300к\n— Задачи: \n1) Отрефакторить, решить потенциальные ошибки. Блоки где править подсвечены комментами // 1 // 2 // 3\nimport { FC, useCallback, useEffect, useRef, useState } from \"react\";\n\nimport ... from ...\n\ntype Props = {\n  user: string;\n  roles?: string[]\n}\n\nexport const ProfilePage: FC<Props> = ({user, roles = []}) => {\n  // 1\n  let isShowInfo = false;\n\n  const handleShowInfo = useCallback(() => {\n    isShowInfo = !isShowInfo\n  }, [isShowInfo])\n\n  // 2\n  const [userData, setUserData] = userState<UserData | null>(null);\n  const [rolesData, setRolesData] = useState<LoaderRolesData | null>(null);\n\n  useEffect(() => {\n    const userData = calculateUserDataSync(user)\n    const fetchedRolesData = loadRoleData(user, roles)\n\n    setUserData(userData)\n    setRolesData(fetchedRolesData)\n  }, [user, roles])\n}\n\n// 3\nconst isAdmin = roles.includes(\"admin\")\n\nif(isAdmin) {\n  return <AdminPage user={user} />;\n}\n\nconst refParent = useRef<HTMLDivElement>()\nconst refContent = useRef<HTMLDivElement>()\n\nuseContentSizeUpdater(refParent, refContent);\n\nreturn (<ProfileContent.Provider>\n  <div ref={refParent} className=\"profile\">\n\n    <div ref={refContent}>\n      <ContentWithUsingProfileContext />\n    </div>\n\n    <Button onClick={handleShowInfo}>Show info</Button>\n\n    {isShowInfo && userData && rolesData && (<Info userData={userData} rolesData={rolesData} />)}\n\n  </div>\n</ProfileContent.Provider>)"
      },
      {
        "timestamp": "2024-08-26 14:09:08",
        "content": "2024-08-26 14:09:08\n Denis -> 2071074234:\nНазвание компании: Сбер\nВакансия: неизвестно, hr написала (~300k net)\nВопросы:\nЗадач не было, только вопросы:\nСемантика в css. Зачем нужна, aria атрибуты.\nЗамыкания в js. \nАсинхронность и eventloop. \nМетоды промисов ( Promise.all , .allSettled, .race, .any) зачем нужны\nВиды хуков. Вопросы по useEffect.\nКакими стейт-менеджерами пользовался?\nКакие типы хранилищ есть в браузере и как они работают? (session storage, localStorage, cookies)\nМемоизация, чем отл...",
        "full_content": "2024-08-26 14:09:08\n Denis -> 2071074234:\nНазвание компании: Сбер\nВакансия: неизвестно, hr написала (~300k net)\nВопросы:\nЗадач не было, только вопросы:\nСемантика в css. Зачем нужна, aria атрибуты.\nЗамыкания в js. \nАсинхронность и eventloop. \nМетоды промисов ( Promise.all , .allSettled, .race, .any) зачем нужны\nВиды хуков. Вопросы по useEffect.\nКакими стейт-менеджерами пользовался?\nКакие типы хранилищ есть в браузере и как они работают? (session storage, localStorage, cookies)\nМемоизация, чем отличается useCallback useMemo.\nЗачем нужен React.memo, какие параметры принимает?"
      },
      {
        "timestamp": "2024-08-24 13:30:41",
        "content": "2024-08-24 13:30:41\n Kirill Anikeev -> 2071074234:\nназвание компании: ПАО Сбербанк \nссылка: https://hh.ru/vacancy/104174075\nзп:270\nуспех: да, готовят оффер, но откажусь из-за того что гибрид в мск\nвопросы:\nВесь разговор почти был про опыт, про задачи которые делал\nЕщё спрашивал про реакт, про хукки\nпро кеширование в RTK Query\nкак работает redux по этапам\nredux saga, как работают функции генераторы. \nЛайвкодинга не было)",
        "full_content": "2024-08-24 13:30:41\n Kirill Anikeev -> 2071074234:\nназвание компании: ПАО Сбербанк \nссылка: https://hh.ru/vacancy/104174075\nзп:270\nуспех: да, готовят оффер, но откажусь из-за того что гибрид в мск\nвопросы:\nВесь разговор почти был про опыт, про задачи которые делал\nЕщё спрашивал про реакт, про хукки\nпро кеширование в RTK Query\nкак работает redux по этапам\nredux saga, как работают функции генераторы. \nЛайвкодинга не было)"
      },
      {
        "timestamp": "2024-08-19 14:24:54",
        "content": "2024-08-19 14:24:54\n Бахтияр -> 2071074234:\n- Компания: Сбер УВХД;\n- Ссылка на вакансию: https://schelkovo.hh.ru/vacancy/102297269?hhtmFrom=employer_vacancies;\n\n- ЗП: undefined;\n- Вопросы:\n- Ивент луп;\n- react fiber;\n- let, var, const;\n- Способы иммутабельной работы с объектами\n- strict mode\n- разница useLayoutEffect, useEffect\n- Задачи: Задачи на рефакторинг реакт, попросили расшарить ВЕСЬ экран, поэтому без скринов и записи\n\nimport React, { useState, useEffect, useCallback } from 'react';\n\n// ...",
        "full_content": "2024-08-19 14:24:54\n Бахтияр -> 2071074234:\n- Компания: Сбер УВХД;\n- Ссылка на вакансию: https://schelkovo.hh.ru/vacancy/102297269?hhtmFrom=employer_vacancies;\n\n- ЗП: undefined;\n- Вопросы:\n- Ивент луп;\n- react fiber;\n- let, var, const;\n- Способы иммутабельной работы с объектами\n- strict mode\n- разница useLayoutEffect, useEffect\n- Задачи: Задачи на рефакторинг реакт, попросили расшарить ВЕСЬ экран, поэтому без скринов и записи\n\nimport React, { useState, useEffect, useCallback } from 'react';\n\n// Интерфейсы для типов данных\ninterface Post {\n  id: number;\n  body: string;\n  title: string;\n  userId: number;\n}\n\ninterface Comment {\n  id: number;\n  postId: number;\n  body: string;\n  email: string;\n  name: string;\n}\n\n// Асинхронная функция для получения данных\nconst getData = async (url: string) => {\n  try {\n    const response = await fetch(`https://jsonplaceholder.typicode.com/${url}`);\n    return await response.json();\n  } catch (e) {\n    console.error('Error fetching data:', e);\n    return [];\n  }\n};\n\n// Компонент списка с постами и комментариями\nconst List: React.FC<{ commentPrefix: string }> = ({ commentPrefix }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  // useEffect для загрузки данных\n  useEffect(() => {\n    const fetchData = async () => {\n      const postResp = await getData('posts');\n      const commentsResp = await getData('comments');\n      setComments(commentsResp);\n      setPosts(postResp);\n    };\n\n    fetchData();\n\n    return () => console.log('LIST UNMOUNT - компонент размонтирован');\n  }, []);\n\n  // Функция для поиска комментариев по postId\n  const findCommentsById = (postId: number) => {\n    return comments.filter(comment => comment.postId === postId);\n  };\n\n  return (\n    <div>\n      {posts.map((post) => (\n        <div key={post.id}>\n          <h1>Название поста: {post.title}</h1>\n          <p>Описание: {post.body}</p>\n          <p>Комментарии:</p>\n          <ul>\n            {findCommentsById(post.id).map((comment) => (\n              <li key={comment.id}>\n                Комментарий: {commentPrefix} {comment.body}\n              </li>\n            ))}\n          </ul>\n          <hr />\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Главный компонент приложения\nexport const App: React.FC = () => {\n  const prefix = \"$\";\n  const [counter, setCounter] = useState(0);\n  const [text, setText] = useState(\"\");\n  const [showList, setShowList] = useState(true);\n\n  // Коллбек для обработки клика по кнопке\n  const onClickButton = useCallback(() => {\n    console.log(`поле инпута равно - ${text}`);\n    setShowList(!showList);\n  }, [text, showList]);\n\n  // Обработчик изменения текста в инпуте\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setText(e.target.value);\n  };\n\n  // useEffect для установки интервала\n  useEffect(() => {\n    const intervalId = setInterval(() => setCounter((prev) => prev + 30), 1000 * 30);\n    return () => clearInterval(intervalId); // Очищаем интервал при размонтировании\n  }, []);\n\n  return (\n    <div>\n      <h1>Время с момента запуска {counter} сек!</h1>\n      <Input onChange={handleInputChange} value={text} />\n      <Button onClick={onClickButton} />\n      <hr />\n      {showList && <List commentPrefix={prefix} />}\n    </div>\n  );\n};"
      },
      {
        "timestamp": "2024-08-17 17:49:24",
        "content": "2024-08-17 17:49:24\n Руслан -> 2071074234:\nit one 2й этап сбер проект\n— зп: от 270к\n— вакансия: https://www.it-one.ru/vacancies/fc5e2a23182adfedf09a030c0ca1eced/\n— вопросы: \n1. Как выбирал бы что добавить в проект zustand или redux\n2. атрибут key\n3. type vs interface\n4. как был построен процесс разработки компонентов в ui kit\n5. когда твое решение не принимали либо предлагали другое - как разруливали\n6. про процессы в предудущем месте",
        "full_content": "2024-08-17 17:49:24\n Руслан -> 2071074234:\nit one 2й этап сбер проект\n— зп: от 270к\n— вакансия: https://www.it-one.ru/vacancies/fc5e2a23182adfedf09a030c0ca1eced/\n— вопросы: \n1. Как выбирал бы что добавить в проект zustand или redux\n2. атрибут key\n3. type vs interface\n4. как был построен процесс разработки компонентов в ui kit\n5. когда твое решение не принимали либо предлагали другое - как разруливали\n6. про процессы в предудущем месте"
      },
      {
        "timestamp": "2024-08-16 09:35:17",
        "content": "2024-08-16 09:35:17\n Serj Shalygin -> 2071074234:\nСбер\n- вакансия по рекомендации\n- зп от 350\n- вопросы\n\n1. Зачем нужны самописные хуки\n2. Отличие forEach от Map\n\nЗадачи\n\n1. что вернет сравнение объектов, понятно что ссылки разные и будет false, чтобы было true нужно в метод возвести\nconsole.log(new Date(2000,1,1).getTime() == new Date(2000,1,1).getTime()) // false\n\n2. \nconst array = [1,2,3];\n \nconst array2 = array.map(item => item * 2).filter(item => item > 3);\n \nconsole.log(array2) // ?[4,6]\n\n...",
        "full_content": "2024-08-16 09:35:17\n Serj Shalygin -> 2071074234:\nСбер\n- вакансия по рекомендации\n- зп от 350\n- вопросы\n\n1. Зачем нужны самописные хуки\n2. Отличие forEach от Map\n\nЗадачи\n\n1. что вернет сравнение объектов, понятно что ссылки разные и будет false, чтобы было true нужно в метод возвести\nconsole.log(new Date(2000,1,1).getTime() == new Date(2000,1,1).getTime()) // false\n\n2. \nconst array = [1,2,3];\n \nconst array2 = array.map(item => item * 2).filter(item => item > 3);\n \nconsole.log(array2) // ?[4,6]\n\n3. Рассказать что и почему будет выведено в консоль\n\n(function() {\n    \n    function modifyBondData(price, bondType) {\n        price.rub = 1200;\n        bondType = \"fixed\";\n        isEditable = true;\n \n        function printBondData() {\n            console.log(price); // 4 {rub: 1200, usd: 10}\n            console.log(bondType); // 5  \"fixed\"\n            console.log(isEditable); // 6 true\n        }\n \n        return printBondData;\n    }\n \n    let price = { rub: 1000 };\n    let bondType = \"floating\";\n    let isEditable = false;\n \n    const printItemData = modifyBondData(price, bondType, isEditable);\n \n    console.log(price); // 1 {rub: 1200}\n    console.log(bondType); // 2 \"floating\"\n    console.log(isEditable); // 3 false\n \n    price = { usd: 10 };\n    bondType = \"amortization\";\n    isEditable = null;\n \n    printItemData();\n}());"
      },
      {
        "timestamp": "2024-08-02 23:04:23",
        "content": "2024-08-02 23:04:23\n Евгений Лямин -> 2071074234:\n— Сбер Пульс знакомство с командой\n— hr написал\n— 250 -280 просил\nвопросы:\n-расскажи про себя, над какими проектами работал, какие интересные задачи решал\n-какие проекты интересуют что ищешь\n-доводилось ли писать проект с 0\n-работал ли со styled componets\n-были ли сложности какие то при написнаиии тестов\n-как ты видишь свое развитие\n-когда срабатывает селектор в редаксе\n-чем redux отличается от MobX\n-когда срабатывает useEffect, чем отлитчается о...",
        "full_content": "2024-08-02 23:04:23\n Евгений Лямин -> 2071074234:\n— Сбер Пульс знакомство с командой\n— hr написал\n— 250 -280 просил\nвопросы:\n-расскажи про себя, над какими проектами работал, какие интересные задачи решал\n-какие проекты интересуют что ищешь\n-доводилось ли писать проект с 0\n-работал ли со styled componets\n-были ли сложности какие то при написнаиии тестов\n-как ты видишь свое развитие\n-когда срабатывает селектор в редаксе\n-чем redux отличается от MobX\n-когда срабатывает useEffect, чем отлитчается от useLayoutEffect\n-были ли в команде конфликты как решали\nУспех:❌\nФитбек: Выбрали внутреннего сотрудника из другого департамента, который решил сменить проект"
      },
      {
        "timestamp": "2024-07-24 20:35:16",
        "content": "2024-07-24 20:35:16\n Евгений Лямин -> 2071074234:\n— Сбер Транзакционный бизнес\n— написал hr\n— зп: сказал от 250\n\nВопросы:\n- расскажи про опыт\n- как часто были релизы\n- что такое Event loop\n- что знаешь про сборщик мусора\n- чем отличаются  null и undefined\n- на что указывает this\n- какие виды контекста есть\n- расскажи про приоритеты у стилей\n- чем отличаются margin от  padding\n- что такое виртуальный дом? для чего нужен?\n- почему виртуальный дом быстрее за счет чего\n- как не переррисовывать лишни...",
        "full_content": "2024-07-24 20:35:16\n Евгений Лямин -> 2071074234:\n— Сбер Транзакционный бизнес\n— написал hr\n— зп: сказал от 250\n\nВопросы:\n- расскажи про опыт\n- как часто были релизы\n- что такое Event loop\n- что знаешь про сборщик мусора\n- чем отличаются  null и undefined\n- на что указывает this\n- какие виды контекста есть\n- расскажи про приоритеты у стилей\n- чем отличаются margin от  padding\n- что такое виртуальный дом? для чего нужен?\n- почему виртуальный дом быстрее за счет чего\n- как не переррисовывать лишний раз компонент\n- что такое портал\n- как  можно уснаследовать компонент реакта, его логику( речь про HOC)\n- как использовать метод родительского классовго компонента в дочернем(про super)\n- что такое jsx для чего нужен\n- можем ли мы без jsx писать в реакте\n- чем action отличается от reducer\n- что хранится в payload\n- все данные записываешь в стор?\n- как передать данные из дочернего в родительский компонент\n- что такое дженерики\n- как сделать что бы компонент принимал только number или string\n- зачем нужен менеджер состояний\n- зачем нам нужен глобальный стор\n- приходилось работать с готовыми Ui-kit\n- приходилось ли сталкиваться с модулями в css\n- как работает модульность в css\n- что такое rest api\n- Приходилось ли сталкиватся с module federation\n- Для чего нужен module federation. как объединяются микрофронты\n- в чем состоит концепция микрофронтэндов\n- как изменить стили компонента из библиотеки ui-kit\n- как доказать бэк разработчику что ошибка на его стороне )\n- как построен процесс нахождения ошибки"
      },
      {
        "timestamp": "2024-07-24 15:49:16",
        "content": "2024-07-24 15:49:16\n Tim -> 2071074234:\nСбер, финал\n\n-зп: 240k\n-вакансия: https://rabota.sber.ru/search/4301433/\n-фидбек: дали оффер\n\nЧем сейчас занимаешься, расскажи про себя, опыт?\nКак совмещал работу с учебой очной?\nКем себя видишь через 3 года?)))\nСможешь переехать?",
        "full_content": "2024-07-24 15:49:16\n Tim -> 2071074234:\nСбер, финал\n\n-зп: 240k\n-вакансия: https://rabota.sber.ru/search/4301433/\n-фидбек: дали оффер\n\nЧем сейчас занимаешься, расскажи про себя, опыт?\nКак совмещал работу с учебой очной?\nКем себя видишь через 3 года?)))\nСможешь переехать?"
      },
      {
        "timestamp": "2024-07-24 14:57:04",
        "content": "2024-07-24 14:57:04\n Tim -> 2071074234:\nСбер, техсобес в кластер миграции SAP\n\n-зп: 220-240k\n-вакансия: https://rabota.sber.ru/search/4301433/\n-успех: дали оффер ✅\n-фидбек: пригласили на собес с лидом \n\nВопросы:\nРасскажи про себя?\nЗачем нужны стейт менеджеры, алтернатива в react, минусы?\nКакие значешь стейт менеджеры?\nRTKQuery, useQuery/useMutation?\nКогда использовать UseCallback?\nЧто такое мемоизация?\nЗачем нужен css modules?\nStyled-components?\nИспользования useRef и useState для хранения состо...",
        "full_content": "2024-07-24 14:57:04\n Tim -> 2071074234:\nСбер, техсобес в кластер миграции SAP\n\n-зп: 220-240k\n-вакансия: https://rabota.sber.ru/search/4301433/\n-успех: дали оффер ✅\n-фидбек: пригласили на собес с лидом \n\nВопросы:\nРасскажи про себя?\nЗачем нужны стейт менеджеры, алтернатива в react, минусы?\nКакие значешь стейт менеджеры?\nRTKQuery, useQuery/useMutation?\nКогда использовать UseCallback?\nЧто такое мемоизация?\nЗачем нужен css modules?\nStyled-components?\nИспользования useRef и useState для хранения состояния?\nVar, let, const?\ncall, apply?\nОпиши что происходит, когда вводишь адрес в поисковою строку, URl, DNS, IP и тд?\nDefer, Async?\nCORS, как отрубить их или обойти?\nFSD, Enteties и Features?\n\nЗадачи:\n// Реализовать свой resolveAll без промисов:\nconst a = function(done) {\n  setTimeout(done, 0, 'result a');\n}\n\nconst b = function(done) {\n  setTimeout(done, 200, 'result b');\n}\n\nconst c = function(done) {\n  setTimeout(done, 500, 'result c');\n}\n\nresolveAll([a, b, c], (results) => {\n  console.log(results);\n})\n\nfunction resolveAll(funcArr, doneAll) {\n  const results = [];\n  \n  funcArr.forEach((func, index) => {\n    func((result) => {\n      results[index] = result;\n\n      if (funcArr.length - 1 === index) {\n        doneAll(results)\n      }\n    })\n  })\n}\n\n// Реализовать хук история состояний:\nfunction useStateWithHistory(initial) {\n  const [state, setStateFunc] = useState(() => initial);\n  const history = useRef([initial]);\n  let currentIndex = useRef(0);\n\n  const setState = useCallback((state) => {\n    history.current.push(state);\n    setStateFunc(state);\n    currentIndex.current = history.current.length - 1;\n  }, []);\n\n  const goBack = useCallback(() => {\n    if (currentIndex.current <= 0) {\n      return;\n    }\n    currentIndex.current -= 1;\n    setStateFunc(history.current[currentIndex.current]);\n  }, []);\n\n  const goForward = useCallback(() => {\n    if (currentIndex.current >= history.current.length - 1) {\n      return;\n    }\n    currentIndex.current += 1;\n    setStateFunc(history.current[currentIndex.current]);\n  }, []);\n\n  return [state, setState, goBack, goForward, history.current];\n}\n\n\n// Сколько раз выведет console.log() и что выведет?\nfor(var i = 0; i < 3; i++) {\n  console.log(i)\n}\n\n// Чтобы работало с var:\nfor(var i = 0; i < 3; i++) {\n    setTimeout((arg) => console.log(arg) , 1000, i) \n}\n\n// Можно сделать через IIFE для var. Либо исправить на let, чтобы работало правильно, т.е. выводил 1, 2, 3 (перероверь)\n\nconst person = {\n    name: 'Bob',\n    sayName: function() {\n        console.log(this.name);\n    }\n};\nconst sayName = person.sayName;\nsayName(); // undefined\nperson.sayName(); // Bob\n \n\n// Последовательность вывода \n\nconsole.log(1);\nsetTimeout(() => console.log(2));\nPromise.resolve().then(() => console.log(3));                 \nPromise.resolve().then(() => setTimeout(() => console.log(4)));\nPromise.resolve().then(() => console.log(5));\nsetTimeout(() => console.log(6));\nconsole.log(7);\nconsole.log(8);\n\n\nОтвет: 17835264"
      },
      {
        "timestamp": "2024-07-24 04:58:21",
        "content": "2024-07-24 04:58:21\n Ярослав Мудрый -> 2071074234:\n- Сбер IT\n- ссылка: сами написали\n- зп: 300+\n- вопросы:\n\n- расскажи про опыт\n- какие сложные задачи делал\n- как работает event loop\n- что используешь чтоб найти и исправить баги\n- задача на рефакторинг react компонента\n(код не сохранил, рекомендую повторить темы: использование хуков, использование useRef, оптимизация компонентов через useCallback, useMemo, методы жизненного цикла для функциональных компонентов)",
        "full_content": "2024-07-24 04:58:21\n Ярослав Мудрый -> 2071074234:\n- Сбер IT\n- ссылка: сами написали\n- зп: 300+\n- вопросы:\n\n- расскажи про опыт\n- какие сложные задачи делал\n- как работает event loop\n- что используешь чтоб найти и исправить баги\n- задача на рефакторинг react компонента\n(код не сохранил, рекомендую повторить темы: использование хуков, использование useRef, оптимизация компонентов через useCallback, useMemo, методы жизненного цикла для функциональных компонентов)"
      },
      {
        "timestamp": "2024-07-21 08:39:26",
        "content": "2024-07-21 08:39:26\n Евгений Лямин -> 2071074234:\n— Сбер Пульс\n— Hr написал\n— от 250\n— Задачи\nconst p = new Promise(rresolve => {\n     resolve('')\n})\n\nconsole.log('A')\n\nsetTimeout(() =>  {console.log('b')}, 0)\n\np.then(() => {\n  p.then(() console.log('c'))\n  consoile.log('d')\n})\n\np.then(() => console.log('e'))\nPromise.reject('error')\n   then(() => console.log('resolved'), ()=> console.log('reject'))\nPromise.reject('error')\n   .catch(data1 => console.log(data1))\n   then(() => console.log('resolved...",
        "full_content": "2024-07-21 08:39:26\n Евгений Лямин -> 2071074234:\n— Сбер Пульс\n— Hr написал\n— от 250\n— Задачи\nconst p = new Promise(rresolve => {\n     resolve('')\n})\n\nconsole.log('A')\n\nsetTimeout(() =>  {console.log('b')}, 0)\n\np.then(() => {\n  p.then(() console.log('c'))\n  consoile.log('d')\n})\n\np.then(() => console.log('e'))\nPromise.reject('error')\n   then(() => console.log('resolved'), ()=> console.log('reject'))\nPromise.reject('error')\n   .catch(data1 => console.log(data1))\n   then(() => console.log('resolved'), ()=> console.log('reject'))\nPromise.reject('error')\n   .catch(data1 => console.log(data1))\n   .catch(data2 => console.log(data2))\n   then(() => console.log('resolved'), ()=> console.log('reject'))\nvar x = function() {\n  return a\n  var a = 1\n  function a() {return 'hello'}\n}\n\nconsole.log(x())\nvar length = 10\n\nfunction fn() {\n  console.log(this.length)\n}\n\nvar obj = {\n   length: 5,\n   method: function(fn) {\n      fn()\n  }\n}\n\nobj.method(fn, 1)\nvar length = 10\n\nfunction fn() {\n  console.log(this.length)\n}\n\nvar obj = {\n   length: 5,\n   method: function(fn) {\n      arguments[0]()\n  }\n}\n\nobj.method(fn, 1)\nfor(var i = 0; i < 5 ; i++) {\n   setTimeout(() => {\n   console.log(i + i + '' + i)\n   }, i *10)\n}\nconst a = {}\nconst b = {key: 'b'}\nconst c = {key: 'c'}\n\na[b] = 123\na[c] = 456\n\nconsole.log(a[b])\nconsole.log(a[c])\n// Написать функцию которая на вход принимает url, ассинхронно ходит по этому Url get запросом и возвращает данные (json). если во время запроса произошла ошибка, то пробовать запросить еще 5 раз.Если в итоге не удалось, вернуть ошибку 'Заданный url недоступен'\nasync function fetchDataWithRetry(url, maxRetries = 5) {\n    let retries = 0;\n    while (retries < maxRetries) {\n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error('Ошибка');\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            retries++;\n            console.log(Попытка ${retries}: Произошла ошибка - ${error.message});\n        }\n    }\n    throw new Error('URL не доступен даже после 5 попыток');\n}\n\nfetchDataWithRetry('https://api.example.com/data')\n    .then(data => {\n        console.log('Полученные данные:', data);\n    })\n    .catch(error => {\n        console.error('Ошибка:', error.message);\n    });\n\n— Вопросы\n- Расскажи про опыт\n- Что происходит когда вводим адрес в валрессную строку\n- как обрабатываетсыя браузером html\n- как скрипты обрабатываются\n- методы http\n- что такое cors\n- Как верстал компоненты\n- Размерности css\n- Что такое семантическая верстка\n- Что такое Event Loop\n- Какой размер у стека\n- Var const let\n- отличия между циклами for  и  forEach\n- что такое чистая функция\n- расскажи про реакт плюсы минусы зачем нужен\n- методы жизненого цикла\n- как можно получить доступ к элементы в реакт\n- зачем нужен Key\n- Что такое батчинг как работает\n- Можешь рассказать про батчинг состояние в реакте\n- Как относишься к типизации"
      },
      {
        "timestamp": "2024-07-16 14:25:00",
        "content": "2024-07-16 14:25:00\n Ilya -> 2071074234:\n- Компания: Сбер УВХД;\n- Ссылка на вакансию: https://schelkovo.hh.ru/vacancy/102297269?hhtmFrom=employer_vacancies;\n- ЗП: undefined;\n- Вопросы:\n1) Ивент луп;\n2) react fiber;\n3) let, var, const;\n4) synthetic events;\n5) какие хуки знаешь;\n6) Способы иммутабельной работы с объектами\n7) strict mode\n8) зачем useCallback, useMemo\n- Задачи: Задачи на рефакторинг реакт, попросили расшарить ВЕСЬ экран, поэтому без скринов.\n\n- Успех собеса: Моментальный оффер, онли...",
        "full_content": "2024-07-16 14:25:00\n Ilya -> 2071074234:\n- Компания: Сбер УВХД;\n- Ссылка на вакансию: https://schelkovo.hh.ru/vacancy/102297269?hhtmFrom=employer_vacancies;\n- ЗП: undefined;\n- Вопросы:\n1) Ивент луп;\n2) react fiber;\n3) let, var, const;\n4) synthetic events;\n5) какие хуки знаешь;\n6) Способы иммутабельной работы с объектами\n7) strict mode\n8) зачем useCallback, useMemo\n- Задачи: Задачи на рефакторинг реакт, попросили расшарить ВЕСЬ экран, поэтому без скринов.\n\n- Успех собеса: Моментальный оффер, онли гибрид, по ЗП вообще не хотят говорить, особенно если говорите, что еще в другие команды сбера собеситесь. Только после принятия оффера."
      },
      {
        "timestamp": "2024-07-15 09:10:46",
        "content": "2024-07-15 09:10:46\n Руслан -> 2071074234:\nСбер\n—зп: 290к\n— вакансия: https://hh.ru/vacancy/103356750\n— Вопросы:\n1. critical rendering path\n2. фазы событий в js\n3. как остановить всплытие события\n4. как клонировать объекты\nЗадачи:\nfunction countConsecutiveChars(inputString) {\n    if (inputString.length === 0) {\n        return ''; // Если строка пустая, возвращаем пустую строку\n    }\n    \n    let result = '';\n    let count = 1; // Счётчик повторений, начинаем с 1, так как первый символ всегда счи...",
        "full_content": "2024-07-15 09:10:46\n Руслан -> 2071074234:\nСбер\n—зп: 290к\n— вакансия: https://hh.ru/vacancy/103356750\n— Вопросы:\n1. critical rendering path\n2. фазы событий в js\n3. как остановить всплытие события\n4. как клонировать объекты\nЗадачи:\nfunction countConsecutiveChars(inputString) {\n    if (inputString.length === 0) {\n        return ''; // Если строка пустая, возвращаем пустую строку\n    }\n    \n    let result = '';\n    let count = 1; // Счётчик повторений, начинаем с 1, так как первый символ всегда считается\n    \n    for (let i = 0; i < inputString.length; i++) {\n        if (inputString[i] === inputString[i + 1]) {\n            count++; // Если текущий символ равен следующему, увеличиваем счётчик\n        } else {\n            // Если текущий символ отличается от следующего, добавляем его и количество повторений к результату\n            result += inputString[i];\n            if (count > 1) {\n                result += count;\n            }\n            count = 1; // Сбрасываем счётчик для новой группы символов\n        }\n    }\n    \n    return result;\n}\n\n// Пример использования:\nconsole.log(countConsecutiveChars('aaabbc')); // Выведет 'a3b2c'\nconsole.log(countConsecutiveChars('aabbaa')); // Выведет 'a2b2a2'\nconsole.log(countConsecutiveChars('abc')); // Выведет 'abc'\nconsole.log(countConsecutiveChars('')); // Выведет ''\n// Создаем объект с ключами и значениями\nconst obj = {\n    key1: \"value1\",\n    key2: \"value2\",\n    key3: \"value3\",\n};\n\n// Добавляем метод getValues к объекту\nObject.prototype.getValues = function(...keys) {\n    // Если аргумент один и это строка, разбиваем её на массив\n    if (keys.length === 1 && typeof keys[0] === 'string') {\n        keys = keys[0].split(' ');\n    } else if (keys.length === 1 && Array.isArray(keys[0])) {\n        // Если аргумент один и это массив, используем его\n        keys = keys[0];\n    }\n    \n    // Используем map для извлечения значений по ключам и join для объединения их в строку\n    return keys.map(key => this[key]).join(' ');\n};\n\n// Пример использования:\nconsole.log(obj.getValues('key1 key2 key3')); // Выведет \"value1 value2 value3\"\nconsole.log(obj.getValues('key1', 'key2', 'key3')); // Выведет \"value1 value2 value3\"\nconsole.log(obj.getValues(['key1', 'key2', 'key3'])); // Выведет \"value1 value2 value3\"\nНужно было проревьюить компонент и и исправить ошибки. результат\nimport React, { useState, useEffect } from 'react';\n\n// Переименуем функцию для лучшей читаемости\nconst fetchRandomItems = () => Promise.resolve(['apple']);\n\nconst NumberAndScroll = () => {\n  const [items, setItems] = useState([]);\n  const [scroll, setScroll] = useState(0);\n\n  useEffect(() => {\n    // Объявляем асинхронную функцию внутри useEffect\n    const fetchItems = async () => {\n      const data = await fetchRandomItems();\n      setItems(data);\n    };\n    \n    fetchItems();\n\n    const handleScroll = () => setScroll(window.scrollY);\n    window.addEventListener('scroll', handleScroll);\n\n    // Очищаем обработчик событий при размонтировании компонента\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return (\n    <div>\n      <ul>\n        {items.map(item => (\n          <li key={item}>{item}</li>\n        ))}\n      </ul>\n      <div>Scroll: {scroll}</div>\n    </div>\n  );\n};\n\nexport default NumberAndScroll;"
      },
      {
        "timestamp": "2024-07-11 14:55:33",
        "content": "2024-07-11 14:55:33\n Tim -> 2071074234:\nСбер, техсобес в команду ВРМ.Дэшборд\n\nВакансия: https://rabota.sber.ru/search/4306148/\nЗП(озвученная): 180-200k\n\nВопросы:\nЧто такое замыкание?\nФункция является обьектом первого класса?\nЧто такое декоратор?\nКакие декораторы бывают?\nЧто такое FSD?\nРасскажи про Flux?\n\n// Задача: написать функцию кеширования fib и sum\n\nfunction fib(n) {\n  if (n >= 40) {\n    return \"it will be really slow\";\n  }\n  if (n <= 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);...",
        "full_content": "2024-07-11 14:55:33\n Tim -> 2071074234:\nСбер, техсобес в команду ВРМ.Дэшборд\n\nВакансия: https://rabota.sber.ru/search/4306148/\nЗП(озвученная): 180-200k\n\nВопросы:\nЧто такое замыкание?\nФункция является обьектом первого класса?\nЧто такое декоратор?\nКакие декораторы бывают?\nЧто такое FSD?\nРасскажи про Flux?\n\n// Задача: написать функцию кеширования fib и sum\n\nfunction fib(n) {\n  if (n >= 40) {\n    return \"it will be really slow\";\n  }\n  if (n <= 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\nfunction sum(...values) {\n  return values.reduce((acc, value) => acc + value, 0);\n}\n\n// Дополнение к задаче: добавить возможность работы с методом обьекта\n\nconst obj = {\n  greeting: \"Hello\",\n  sayHi(name) {\n    console.log(this.greeting + name);\n  },\n};\n\n// Решение\n\nfunction memoFunc(fn) {\n  const cashed = {};\n  return function (...args) {\n    const argumentsString = JSON.stringify(args);\n    if (!cashed[argumentsString]) {\n      cashed[argumentsString] = fn(...JSON.parse(argumentsString));\n    }\n    return cashed[argumentsString];\n  };\n}\n\nЗадание 2. Рефакторинг React. Стандартные ошибки, ничего интересного.\nЗадание 3. Написать мемоизацию списка. При удалении элемента из списка, остальные элементы не должны ререндериться. \nЗадание 4. Огромное задание по написанию своего компонента:\n\nРепозиторий с готовым серверным приложением и скелетом клиентского приложения\n\nТребования:\n\nПолучение конфига опроса с сервера.\nРендер опроса по полученному конфигу.\nОтправка пользовательских событий answer/finish на сервер.\nДоп. требования:\n\nСохранять состояние частично пройденного опроса при перезагрузке страницы\nОбеспечить надежность доставки пользовательских событий. Например, у пользователя может отвалиться интернет, пока он едет в лифте\nОтправка событий “просмотра” вопроса/страницы. Хотим понимать увидел ли пользователь определенный вопрос или страницу.\n\nВпечатления\nСобеседующий душный и какой-то уставший. По факту собеседует в свою команду, так что придется с ним работать) Хз советовать или нет, но я бы ради опыта принял офер."
      },
      {
        "timestamp": "2024-07-01 13:12:18",
        "content": "2024-07-01 13:12:18\n dm . -> 2071074234:\n- Сбер\n- Вакансия: https://hh.ru/vacancy/100530637\n- ЗП от 250 net\n- Задачи:\n1) В каком порядке будут логаться числа?\n js\nconsole.log(1);\nsetTimeout(() => console.log(2));\nPromise.resolve().then(() => console.log(3));                 \nPromise.resolve().then(() => setTimeout(() => console.log(4)));\nPromise.resolve().then(() => console.log(5));\nsetTimeout(() => console.log(6));\nconsole.log(7);\nconsole.log(8);\nОтвет: 17835264\n2) Что выведется в консоль?\n js\n...",
        "full_content": "2024-07-01 13:12:18\n dm . -> 2071074234:\n- Сбер\n- Вакансия: https://hh.ru/vacancy/100530637\n- ЗП от 250 net\n- Задачи:\n1) В каком порядке будут логаться числа?\n js\nconsole.log(1);\nsetTimeout(() => console.log(2));\nPromise.resolve().then(() => console.log(3));                 \nPromise.resolve().then(() => setTimeout(() => console.log(4)));\nPromise.resolve().then(() => console.log(5));\nsetTimeout(() => console.log(6));\nconsole.log(7);\nconsole.log(8);\nОтвет: 17835264\n2) Что выведется в консоль?\n js\nconst person = {\n    name: 'Bob',\n    sayName: function() {\n        console.log(this.name);\n    }\n};\nconst sayName = person.sayName;\nsayName(); // undefined\nperson.sayName(); // Bob\n3) Написать функцию resolveAll, ниже готовый результат.\nfunction resolveAll(funcArr, doneAll) {\n    const results = [];\n    let completedCount = 0;\n    \n    funcArr.forEach((func, index) => {\n        func(result => {\n            results[index] = result;\n            completedCount++;\n            \n            if (completedCount === funcArr.length) {\n                doneAll(results);\n            }\n        });\n    });\n}\n// Запуск:\nconst a = function (done) {\n    setTimeout(done, 0, 'result a');\n}\n\nconst b = function (done) {\n    setTimeout(done, 200, 'result b');\n}\n\nconst c = function (done) {\n    setTimeout(done, 500, 'result c');\n}\n\nresolveAll([a, b, c], (results) => {\n    console.log(results); // ['result a', 'result b', 'result c']\n})\n4) Написать хук useStateWithHistory.\n js\nfunction useStateWithHistory(initial) {\n    const [state, setStateFunc] = useState(() => initial);\n    const history = useRef([initial]);\n    let currentIndex = useRef(0);\n\n    const setState = useCallback((state) => {\n        history.current.push(state);\n        setStateFunc(state);\n        currentIndex.current = history.current.length - 1;\n    });\n\n    const goBack = useCallback(() => {\n        if (currentIndex.current <= 0) {\n            return;\n        }\n        currentIndex.current -= 1;\n        setStateFunc(history.current[currentIndex.current]);\n    });\n\n    const goForward = useCallback(() => {\n        if (currentIndex.current >= history.current.length - 1) {\n            return;\n        }\n        currentIndex.current += 1;\n        setStateFunc(history.current[currentIndex.current]);\n    });\n\n    return [state, setState, goBack, goForward, history.current];\n}\n- Вопросы:\n1) Рассказать про интересные задачи.\n2) Для чего нужны стейт менеджеры?\n3) Рассказать о браузерных хранилищах.\n4) jwt-авторизация\n5) CORS\n6) rest API, методы\n7) websocket, graphQL, rpc\n- Успех: ✅"
      },
      {
        "timestamp": "2024-07-01 11:14:18",
        "content": "2024-07-01 11:14:18\n Matvey -> 2071074234:\nСбер для экспертов (УВХД)\n- Вакансия: https://schelkovo.hh.ru/vacancy/102297269?hhtmFrom=employer_vacancies\n- ЗП:  от 240 \n\nВопросы: \nJS:\n - var, let, const \n - почему у var есть всплытие \n - Object.freeze \n - сборщик мусора (есть ли разница в разных средах) \n\nБраузер: \n - local storage, session storage, cookie какая разница \n - какие флаги у cookie \n - CORS \n\nReact:\n - плюсы и минусы React \n - атрибут key \n - хуки какие используешь \n - разница useCallb...",
        "full_content": "2024-07-01 11:14:18\n Matvey -> 2071074234:\nСбер для экспертов (УВХД)\n- Вакансия: https://schelkovo.hh.ru/vacancy/102297269?hhtmFrom=employer_vacancies\n- ЗП:  от 240 \n\nВопросы: \nJS:\n - var, let, const \n - почему у var есть всплытие \n - Object.freeze \n - сборщик мусора (есть ли разница в разных средах) \n\nБраузер: \n - local storage, session storage, cookie какая разница \n - какие флаги у cookie \n - CORS \n\nReact:\n - плюсы и минусы React \n - атрибут key \n - хуки какие используешь \n - разница useCallback от useMemo\n - useLayoutEffect разница от useEffect \n \nЗадача:\n(Постановка: написал джун нужно исправить после 50 строки)\n - https://interview.tbank.ru/link/Q7jlQ7MtHmXb/interview"
      },
      {
        "timestamp": "2024-06-25 14:29:35",
        "content": "2024-06-25 14:29:35\n Вандал Нестреляй -> 2071074234:\nСбер для экспертов\n— Ссылка: https://hh.ru/vacancy/101519043\n— ЗП: не помню\n— Вопросы:\n1. В каком виде приходили задачи, насколько детально описаны?\n2. Какие баги приходилось фиксить?\n— Задачи:\n1.  Напишите функцию, которая принимает на вход массив чисел от 1 до 100. При этом возвращает массив в котором вместо чисел, кратных трем будет содержаться слово слово Fizz, а вместо чисел, кратных пяти — слово Buzz. Если число кратно и 3 и 5, то вместо...",
        "full_content": "2024-06-25 14:29:35\n Вандал Нестреляй -> 2071074234:\nСбер для экспертов\n— Ссылка: https://hh.ru/vacancy/101519043\n— ЗП: не помню\n— Вопросы:\n1. В каком виде приходили задачи, насколько детально описаны?\n2. Какие баги приходилось фиксить?\n— Задачи:\n1.  Напишите функцию, которая принимает на вход массив чисел от 1 до 100. При этом возвращает массив в котором вместо чисел, кратных трем будет содержаться слово слово Fizz, а вместо чисел, кратных пяти — слово Buzz. Если число кратно и 3 и 5, то вместо него должно храниться слово FizzBuzz. \n\n2.  Что выведется в консоль? \n for (var i = 0; i < 10; i++) {\n    setTimeout(function () {\n        console.log(‘timeout’, i);\n    }, 0);\n    console.log(‘loop’, i);\n}"
      },
      {
        "timestamp": "2024-06-19 19:09:34",
        "content": "2024-06-19 19:09:34\n Сергей -> 2071074234:\nСбер тех\n \n- Ссылка на платформе пульс \n- ЗП: от 200 т.р \n- успех: ?\n \nВОПРОСЫ:\n- event loop\n- типы данных\n- хуки React\n- reconciliation\n\nЗАДАЧИ:\n\n// 1 задача \n \nconst promise = new Promise((resolve) => { \n  console.log('3'); \n  resolve('6'); \n}).then(console.log); \n \nPromise.reject(5) \n    .then(() => console.log('35'), \n        () => console.log('36') \n    ) \n    .catch(() => console.log('Error')) \n    .then(() => console.log('ok')) \n \npromise.then(()...",
        "full_content": "2024-06-19 19:09:34\n Сергей -> 2071074234:\nСбер тех\n \n- Ссылка на платформе пульс \n- ЗП: от 200 т.р \n- успех: ?\n \nВОПРОСЫ:\n- event loop\n- типы данных\n- хуки React\n- reconciliation\n\nЗАДАЧИ:\n\n// 1 задача \n \nconst promise = new Promise((resolve) => { \n  console.log('3'); \n  resolve('6'); \n}).then(console.log); \n \nPromise.reject(5) \n    .then(() => console.log('35'), \n        () => console.log('36') \n    ) \n    .catch(() => console.log('Error')) \n    .then(() => console.log('ok')) \n \npromise.then(() => console.log('promise is done'))\n \n\n// 2 задача \n \nfunction test() { \n  const p = Promise.resolve(); \n   \n  const user = { \n      name: 'Ваня' \n  } \n   \n  const showUser = () => { \n      console.log(this.name) \n  } \nshowUser() \n  setTimeout(() => { \n    console.log('timeout'); \n \n    p.then(() => { \n      console.log('promise 1'); \n    }); \n  }); \n \n  setTimeout(() => { \n    console.log('timeout 2'); \n  }, 0); \n} \n \ntest(); \n \n// 3 задача - Написать свой Promise.all \n \nconst myPromiseAll = (promisesArray) => { \n    // your code \n};' \n \nconst promises = [ \n  new Promise(res => setTimeout(() => res(\"123\"), 1500)), \n  new Promise(res => setTimeout(() => res(\"456\"), 300)), \n  new Promise(res => setTimeout(() => res(\"789\"), 100)) \n];"
      },
      {
        "timestamp": "2024-03-27 20:07:16",
        "content": "2024-03-27 20:07:16\n Daniil Max -> 2071074234:\n— Название компании: Сбер Технологии [третий этап, общение с ПО]\n— Ссылка на вакансию: hr сама написал\n— ЗП: 310-400к.\n— Задачи: общение с ПО\n— Успех собеса: ✅\n— Фитбек о собесе: \nДаниил, извини за долгий ответ, был в поликлинике, взял на работе отгул, тк отравился. \n\nУ меня новости так себе( \nСамый максимум по сумме оффера, который сейчас готовы предложить - 270 тыс. рублей по ТК РФ. Ты прекрасно прошел собесы и о тебе очень хорошо отзывались интер...",
        "full_content": "2024-03-27 20:07:16\n Daniil Max -> 2071074234:\n— Название компании: Сбер Технологии [третий этап, общение с ПО]\n— Ссылка на вакансию: hr сама написал\n— ЗП: 310-400к.\n— Задачи: общение с ПО\n— Успех собеса: ✅\n— Фитбек о собесе: \nДаниил, извини за долгий ответ, был в поликлинике, взял на работе отгул, тк отравился. \n\nУ меня новости так себе( \nСамый максимум по сумме оффера, который сейчас готовы предложить - 270 тыс. рублей по ТК РФ. Ты прекрасно прошел собесы и о тебе очень хорошо отзывались интервьюеры, но бюджет просто не позволяет сделать предложение выше, я последние два дня общался с коллегами и пытался найти варианты повысить предложение. \n\nЯ помню, что у тебя, зп ожидания выше 310-400, но на данный момент вот так 😢"
      },
      {
        "timestamp": "2024-03-27 16:44:57",
        "content": "2024-03-27 16:44:57\n Kirill N -> 2071074234:\nДополнение с 11.03 - 27.03\nКомпания: Minevrasoft 11.03 \nhttps://youtu.be/c2TDgGjVxcQ \n \nКомпания: про Айти ресурс от 12.03 \nhttps://youtu.be/tBrVrALlflE \n \nКомпания: КиберЛаб 12.03 \nhttps://youtu.be/Ayov7AAZ9zA \nКомпания: 16.03 \nhttps://youtu.be/g8awopYcbh4   \n \nКомпания: IT ONE 18 03 \nhttps://youtu.be/opoqwpzVRVo \n \nКомпания: Эвотека 19 03 \nhttps://youtu.be/pq64Y2e0-CQ \n \nКомпания: BAUM от 20 03 \nhttps://youtu.be/YR2G2tRzgJo \n \nКомпания: Сбер Техноло...",
        "full_content": "2024-03-27 16:44:57\n Kirill N -> 2071074234:\nДополнение с 11.03 - 27.03\nКомпания: Minevrasoft 11.03 \nhttps://youtu.be/c2TDgGjVxcQ \n \nКомпания: про Айти ресурс от 12.03 \nhttps://youtu.be/tBrVrALlflE \n \nКомпания: КиберЛаб 12.03 \nhttps://youtu.be/Ayov7AAZ9zA \nКомпания: 16.03 \nhttps://youtu.be/g8awopYcbh4   \n \nКомпания: IT ONE 18 03 \nhttps://youtu.be/opoqwpzVRVo \n \nКомпания: Эвотека 19 03 \nhttps://youtu.be/pq64Y2e0-CQ \n \nКомпания: BAUM от 20 03 \nhttps://youtu.be/YR2G2tRzgJo \n \nКомпания: Сбер Технологии 22 03 \nhttps://youtu.be/dm34hydCIIA \n \nКомпания: KTS 22 03 \nhttps://youtu.be/Nt177GK9LAE \n \nКомпания: KTS 27 03 \nhttps://youtu.be/QDi0AkDwwgw \n \nКомпания: Лемма 27 03 \nhttps://youtu.be/grfpac_XgvA"
      },
      {
        "timestamp": "2024-03-26 06:10:48",
        "content": "2024-03-26 06:10:48\n Ivan -> 2071074234:\nНазвание компании: Сбер\nВакансия: Private Banking, отправила hr в галере\nВилка: 260к net\nБыл собес на 30 минут, общались с лидом на софт скиллы, прошлый опыт, почему ухожу с предыдущего места, работу в команде, задачи которыми я мог бы похвастаться, про грубые ошибки с точки зрения оптимизации, которые допускал и кем вижу себя через 2-3 года. Потом  с фронтом поговорили об отношении к ts, тестам, redux, с какими библиотеками по работе с формами взаимодейс...",
        "full_content": "2024-03-26 06:10:48\n Ivan -> 2071074234:\nНазвание компании: Сбер\nВакансия: Private Banking, отправила hr в галере\nВилка: 260к net\nБыл собес на 30 минут, общались с лидом на софт скиллы, прошлый опыт, почему ухожу с предыдущего места, работу в команде, задачи которыми я мог бы похвастаться, про грубые ошибки с точки зрения оптимизации, которые допускал и кем вижу себя через 2-3 года. Потом  с фронтом поговорили об отношении к ts, тестам, redux, с какими библиотеками по работе с формами взаимодействовал и дали тестовое сделать тастрекер с тремя колонками, возможностью добавлять и редактировать карточки, состояние должны хранится в redux"
      },
      {
        "timestamp": "2024-03-22 11:21:39",
        "content": "2024-03-22 11:21:39\n Daniil Max -> 2071074234:\n— Название компании: Сбер Технологии [второй этап]\n— Ссылка на вакансию: hr сама написал\n— ЗП: 310-400к.\n— Задачи: теория\nЗапись на ютуб: https://www.youtube.com/watch?v=dm34hydCIIA\n— Успех собеса: ✅\n— Фитбек о собесе: впечатления после собеса по мне очень положительные",
        "full_content": "2024-03-22 11:21:39\n Daniil Max -> 2071074234:\n— Название компании: Сбер Технологии [второй этап]\n— Ссылка на вакансию: hr сама написал\n— ЗП: 310-400к.\n— Задачи: теория\nЗапись на ютуб: https://www.youtube.com/watch?v=dm34hydCIIA\n— Успех собеса: ✅\n— Фитбек о собесе: впечатления после собеса по мне очень положительные"
      },
      {
        "timestamp": "2024-03-18 16:35:50",
        "content": "2024-03-18 16:35:50\n Vitalya Bedik -> 2071074234:\n#первый_собес\n\n— Название компании: Сбер (HR Пульс)\n— Ссылка на вакансию: HR сама написала\nhttps://hh.ru/vacancy/94347224?hhtmFrom=employer_vacancies\nOne Day Offer (в один день несколько собесов и сразу оффер, если все ок в этот же день)\n— ЗП: Просил 220-300 (предварительно 270 договаривались перед собесом)\n— Задачи: Теория + задача\n— Записи на ютуб:\n          -  созвон с командой (презентация продукта) - https://www.youtube.com/watch?v=mhljV1c0S...",
        "full_content": "2024-03-18 16:35:50\n Vitalya Bedik -> 2071074234:\n#первый_собес\n\n— Название компании: Сбер (HR Пульс)\n— Ссылка на вакансию: HR сама написала\nhttps://hh.ru/vacancy/94347224?hhtmFrom=employer_vacancies\nOne Day Offer (в один день несколько собесов и сразу оффер, если все ок в этот же день)\n— ЗП: Просил 220-300 (предварительно 270 договаривались перед собесом)\n— Задачи: Теория + задача\n— Записи на ютуб:\n          -  созвон с командой (презентация продукта) - https://www.youtube.com/watch?v=mhljV1c0S30\n          - техсобес: https://www.youtube.com/watch?v=g3oEfGKB9is\n          - созвон с кластер тимлид (про опыт и мои вопросы): https://www.youtube.com/watch?v=qIiWpVeV-UY (неполная запись)\n— Успех собеса: ☑️Pending (прохожу СБ) \n— Фидбек о собесе от HR:  уверенный мидл/мидл+\n\n❗️позднее отпишу все подробности и результат"
      },
      {
        "timestamp": "2024-03-09 13:32:31",
        "content": "2024-03-09 13:32:31\n Kirill N -> 2071074234:\nЗаписи собеседований  \nКомпания: MOVAVI от 26.02 \nhttps://www.youtube.com/watch?v=X8BAWSHpr9g \n \nКомпания: Мой склад 26.02 \nhttps://www.youtube.com/watch?v=I5vdydjkmAE \n \nКомпания: Собес 27.02 \nhttps://www.youtube.com/watch?v=USFqJBmNrW4 \n \nКомпания: Озон 1.03 (1 этап) \nhttps://www.youtube.com/watch?v=-9CTCHiGLtg \n \nКомпания: Озон 05.03 (2 этап) \nhttps://youtu.be/SsOs-mTIiN8 \n \nКомпания: ГПБ 01.03 \nhttps://youtu.be/dn7HsjOcDfk \n \nКомпания: ВК 05.03 \nh...",
        "full_content": "2024-03-09 13:32:31\n Kirill N -> 2071074234:\nЗаписи собеседований  \nКомпания: MOVAVI от 26.02 \nhttps://www.youtube.com/watch?v=X8BAWSHpr9g \n \nКомпания: Мой склад 26.02 \nhttps://www.youtube.com/watch?v=I5vdydjkmAE \n \nКомпания: Собес 27.02 \nhttps://www.youtube.com/watch?v=USFqJBmNrW4 \n \nКомпания: Озон 1.03 (1 этап) \nhttps://www.youtube.com/watch?v=-9CTCHiGLtg \n \nКомпания: Озон 05.03 (2 этап) \nhttps://youtu.be/SsOs-mTIiN8 \n \nКомпания: ГПБ 01.03 \nhttps://youtu.be/dn7HsjOcDfk \n \nКомпания: ВК 05.03 \nhttps://youtu.be/X4T0G_n1jqo \n \nКомпания ВТБ 06.03  \nhttps://youtu.be/3wfKfjohkw0 \n \nКомпания: Сбер технологии 07.03 \nhttps://youtu.be/gt2RcGbzloQ \n \nКомпания: Иннотех 07.03 \nhttps://youtu.be/soujRRxtnC8 \nКомпания: IT ONE 07.03 \nhttps://youtu.be/RaZ-iZOJgDM"
      },
      {
        "timestamp": "2024-03-07 14:01:15",
        "content": "2024-03-07 14:01:15\n Daniil Max -> 2071074234:\n— Название компании: Сбер Технологи\n— Ссылка на вакансию: hr сам написал \n— ЗП: 310~400К\n— Задачи: теория \n— Запись на ютуб: https://youtu.be/w0fOhN_dCec?si=Spvlb9lpAIVUMuAs\n— Успех собеса: ✅\n— Фитбек о собесе от HR:\nУверенный сениор, можно рассмотреть, если есть еще где то запросы, тем более активно ищет варианты\n\n#senior #сбер_технологим",
        "full_content": "2024-03-07 14:01:15\n Daniil Max -> 2071074234:\n— Название компании: Сбер Технологи\n— Ссылка на вакансию: hr сам написал \n— ЗП: 310~400К\n— Задачи: теория \n— Запись на ютуб: https://youtu.be/w0fOhN_dCec?si=Spvlb9lpAIVUMuAs\n— Успех собеса: ✅\n— Фитбек о собесе от HR:\nУверенный сениор, можно рассмотреть, если есть еще где то запросы, тем более активно ищет варианты\n\n#senior #сбер_технологим"
      },
      {
        "timestamp": "2024-03-05 21:33:30",
        "content": "2024-03-05 21:33:30\n Daniil Max -> 2071074234:\n— Название компании: Сбер [заключительный этап, общение с бизнесом]\n— Ссылка на вакансию: потеряна \n— ЗП: 200К\n— Задачи: софтскиллы \n— Запись на ютуб: https://youtu.be/h8Ki40Waxgk\n— Успех собеса: ✅\n— Фитбек о собесе от HR: оффер\n— Комментарий: на этот раз общение с бизнесом. Знакомлюсь и задаю много вопросов\n\n#middle #сбер",
        "full_content": "2024-03-05 21:33:30\n Daniil Max -> 2071074234:\n— Название компании: Сбер [заключительный этап, общение с бизнесом]\n— Ссылка на вакансию: потеряна \n— ЗП: 200К\n— Задачи: софтскиллы \n— Запись на ютуб: https://youtu.be/h8Ki40Waxgk\n— Успех собеса: ✅\n— Фитбек о собесе от HR: оффер\n— Комментарий: на этот раз общение с бизнесом. Знакомлюсь и задаю много вопросов\n\n#middle #сбер"
      },
      {
        "timestamp": "2024-03-05 20:49:04",
        "content": "2024-03-05 20:49:04\n Daniil Max -> 2071074234:\n— Название компании: Сбер [общение с бизнесом, последний этап)\n— Ссылка на вакансию: потеряна \n— ЗП: 200К\n— Задачи: софтскиллы \n— Запись на ютуб: https://youtu.be/p41IDNO_9n8\n— Успех собеса: ❌️\n— Фитбек о собесе от HR: не писала\n— Комментарий: на этот раз это общение с бизнесом. Задаю много вопросов \n\n#middle #сбер",
        "full_content": "2024-03-05 20:49:04\n Daniil Max -> 2071074234:\n— Название компании: Сбер [общение с бизнесом, последний этап)\n— Ссылка на вакансию: потеряна \n— ЗП: 200К\n— Задачи: софтскиллы \n— Запись на ютуб: https://youtu.be/p41IDNO_9n8\n— Успех собеса: ❌️\n— Фитбек о собесе от HR: не писала\n— Комментарий: на этот раз это общение с бизнесом. Задаю много вопросов \n\n#middle #сбер"
      },
      {
        "timestamp": "2024-02-26 12:27:35",
        "content": "2024-02-26 12:27:35\n Daniil Max -> 2071074234:\n— Название компании: Сбер девайсы [третий этап, заключительный] \n❗️Собес, где очень детально копают про твой опыт \n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Уровень собеса: hard 🧨\n— Задачи: софтскиллы \n— Запись на ютуб: https://youtu.be/KyQE0C-1Jq0\n— Успех собеса: ✅\n— Фитбек о собесе от HR: начинаем поиск команды, в которую можно Вас разместить. \n— Комментарий: на этот раз это общение с бизнесом. это третий этап собеседования после первого и втор...",
        "full_content": "2024-02-26 12:27:35\n Daniil Max -> 2071074234:\n— Название компании: Сбер девайсы [третий этап, заключительный] \n❗️Собес, где очень детально копают про твой опыт \n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Уровень собеса: hard 🧨\n— Задачи: софтскиллы \n— Запись на ютуб: https://youtu.be/KyQE0C-1Jq0\n— Успех собеса: ✅\n— Фитбек о собесе от HR: начинаем поиск команды, в которую можно Вас разместить. \n— Комментарий: на этот раз это общение с бизнесом. это третий этап собеседования после первого и второго технического. \n\n#middle #сбер_девайсы"
      },
      {
        "timestamp": "2024-01-25 07:26:12",
        "content": "2024-01-25 07:26:12\n Vladimir Latyshev -> 2071074234:\nНазвание компании: очередной Сбер))\nЗП: от 250+\nвопросы во многом такие же как и здесь  https://t.me/c/2071074234/489/3885\n\nИз теории необычные вопросы:\n- спросили про Доступность сайтов. Тоесть про доступность для слабовидящих людей.\n\nПоследняя задача:\nДопустим, к тебе пришли и сказали, что планируется новый проект. \n  Нужно создать веб-приложение для отдела КБ. В этом приложении сотрудник КБ должен видеть возникшие инциденты, которые поступ...",
        "full_content": "2024-01-25 07:26:12\n Vladimir Latyshev -> 2071074234:\nНазвание компании: очередной Сбер))\nЗП: от 250+\nвопросы во многом такие же как и здесь  https://t.me/c/2071074234/489/3885\n\nИз теории необычные вопросы:\n- спросили про Доступность сайтов. Тоесть про доступность для слабовидящих людей.\n\nПоследняя задача:\nДопустим, к тебе пришли и сказали, что планируется новый проект. \n  Нужно создать веб-приложение для отдела КБ. В этом приложении сотрудник КБ должен видеть возникшие инциденты, которые поступают из некоторой внешней системы, брать инциденты в работу, производить над ними все необходимые действия для закрытия инцидентов, взаимодействовать из интерфейса со всеми причастными к инциденту. Руководитель должен следить за работой подчинённых, видеть статистику по возникающим и обрабатываемым инцидентам, формировать из интерфейса отчёты. Что ты будешь делать со всей этой информацией и как организуешь свою работу?"
      },
      {
        "timestamp": "2024-01-23 16:46:30",
        "content": "2024-01-23 16:46:30\n Vladimir Latyshev -> 2071074234:\nНазвание компании: очередной Сбер))\nЗП: от 250\nвопросы во многом такие же как и здесь  https://t.me/c/2071074234/489/3244\n\nЗадача:\nconst a = {\n  value: 1,\n  children: [\n    {\n      value: 2,\n      children: [{ value: 4, value: 5 }]\n    },\n    {\n      value: 3,\n      children: [{ value: 6, value: 7 }]\n    },\n  ]\n}\n//  [1,2,3,4,5,6,7]\n\n\nconst foo = (obj) => {\n  const res = [];\n\n  const inFoo = (obj1) => {\n\n  Object.entries(obj1).map((item) => {...",
        "full_content": "2024-01-23 16:46:30\n Vladimir Latyshev -> 2071074234:\nНазвание компании: очередной Сбер))\nЗП: от 250\nвопросы во многом такие же как и здесь  https://t.me/c/2071074234/489/3244\n\nЗадача:\nconst a = {\n  value: 1,\n  children: [\n    {\n      value: 2,\n      children: [{ value: 4, value: 5 }]\n    },\n    {\n      value: 3,\n      children: [{ value: 6, value: 7 }]\n    },\n  ]\n}\n//  [1,2,3,4,5,6,7]\n\n\nconst foo = (obj) => {\n  const res = [];\n\n  const inFoo = (obj1) => {\n\n  Object.entries(obj1).map((item) => {    \n    \n    if (item[0] === 'value') {\n      \n      res.push(item[1]);\n    } else {\n      \n      inFoo(item[1]);    \n    }\n    \n  })     \n  }\n  inFoo(obj);\n\n  return res; \n}\n\nconsole.log(foo(a));\n\nНепонятно сознательно или нет, но в задаче есть ошибка  \n{ value: 6, value: 7 }\nФактически второй value перезатирает первый и объект получается из одного элемента. и в итоге ответ который собеседующий писал нужно получить, получить ни при каких обстоятельствах не получится."
      },
      {
        "timestamp": "2024-01-23 12:09:35",
        "content": "2024-01-23 12:09:35\n Michael Yakovlev -> 2071074234:\nКомпания: Сбер\n\nКоманда девопсов. Нужно написать таскменеджер на подобие Jira для их системы мониторинга и контроля серверов, облаков и тд.\n\nИщут на это 2 фронта. Команда без аналитиков, дизайнеров и продакта. Одни разрабы и тимлид)\nНужно сделать вчера)\n\nСпрашивали про мой опыт. Как устроено на текущей работе: какой стек, архитектурные вопросы, про docker, ci/cd, тесты, как команда работает и тд.\n\nПо теории: хуки, дженерики, тайп гард, HOC, ка...",
        "full_content": "2024-01-23 12:09:35\n Michael Yakovlev -> 2071074234:\nКомпания: Сбер\n\nКоманда девопсов. Нужно написать таскменеджер на подобие Jira для их системы мониторинга и контроля серверов, облаков и тд.\n\nИщут на это 2 фронта. Команда без аналитиков, дизайнеров и продакта. Одни разрабы и тимлид)\nНужно сделать вчера)\n\nСпрашивали про мой опыт. Как устроено на текущей работе: какой стек, архитектурные вопросы, про docker, ci/cd, тесты, как команда работает и тд.\n\nПо теории: хуки, дженерики, тайп гард, HOC, какие хуки относятся к жизненному циклу. На этом всё.\n\nЗадач не было.\n\nБыл вопрос как я организую работу и архитектуру их нового проекта.\n\nИз плюсов полная удалёнка на территории Мск и Подмосковья.\n\nЗП: 320к\n\nРезультат: сказал им, что дам обратную связь в понедельник, нужно подумать.\n\n#Сбер #senior"
      },
      {
        "timestamp": "2024-01-18 18:03:21",
        "content": "2024-01-18 18:03:21\n Daniil Max -> 2071074234:\n— Название компании: Сбер здоровье [второй этап, заключительный]\n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Задачи: софтскиллы \n— Запись на ютуб: https://youtu.be/btf2qOKXR2s?si=A_4f-ryP_gfmP3zD\n— Успех собеса: ✅\n— Фитбек о собесе от HR: огонь\n— Комментарий: на этот раз это общение с бизнесом. это второй этап собеседования после первого технического. \n\n#middle #сбер_здоровье",
        "full_content": "2024-01-18 18:03:21\n Daniil Max -> 2071074234:\n— Название компании: Сбер здоровье [второй этап, заключительный]\n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Задачи: софтскиллы \n— Запись на ютуб: https://youtu.be/btf2qOKXR2s?si=A_4f-ryP_gfmP3zD\n— Успех собеса: ✅\n— Фитбек о собесе от HR: огонь\n— Комментарий: на этот раз это общение с бизнесом. это второй этап собеседования после первого технического. \n\n#middle #сбер_здоровье"
      },
      {
        "timestamp": "2024-01-18 17:49:32",
        "content": "2024-01-18 17:49:32\n Michael Yakovlev -> 2071074234:\nСбер. IT\n\nСобес был приятный на чиле)\n\nМного разговаривали за технологии и мой опыт их применения. WebRTC, логирование ошибок, fsd, state менеджеры, микрофронты и тд. Без конкретных вопросов, просто беседа на кругозор.\nРассказать о своей работе, успехи и неудачи.\n\nВопросы:\n\nПаттерны программирования (общие и какие есть в Реакте)\nМожно ли применять SOLID в React\nОтличие useEffect от useLayoutEffect\nОтличие useRef от useState\nБатчинг\nПричины рен...",
        "full_content": "2024-01-18 17:49:32\n Michael Yakovlev -> 2071074234:\nСбер. IT\n\nСобес был приятный на чиле)\n\nМного разговаривали за технологии и мой опыт их применения. WebRTC, логирование ошибок, fsd, state менеджеры, микрофронты и тд. Без конкретных вопросов, просто беседа на кругозор.\nРассказать о своей работе, успехи и неудачи.\n\nВопросы:\n\nПаттерны программирования (общие и какие есть в Реакте)\nМожно ли применять SOLID в React\nОтличие useEffect от useLayoutEffect\nОтличие useRef от useState\nБатчинг\nПричины рендера и как работает Реакт (файбер и тд)\nЧем отличается npm install от npm ci\nЧем отличаются any, unknown и never.\nType guard\n\nЗадачи:\n\n1.\n\n\n\n\n\nconst a = {\n  value: 1,\n  children: [\n    {\n      value: 2,\n      children: [{ value: 4, value: 5 }]\n    },\n    {\n      value: 3,\n      children: [{ value: 6, value: 7 }]\n    },\n  ]\n}\n//  вывести [1,2,3,4,5,6,7]\n\n2.\n\n\n\n\nlet obj = {\n  a: 1\n};\n\nconsole.log(obj.a, '1');\n\nfunction b(obj) {\n  obj = {\n    a: 2\n  };\n}\n\nb(obj);\n\nconsole.log(obj.a, '2');\n\n(function(obj) {\n  obj.a = 3\n})(obj);\n\nconsole.log(obj.a, ‘3’);\n\nЗП: от 300к\n\n\nИз больших минусов вакансии: фигачить придётся в одного, нужно десктопное приложение переписать в веб (сделать сайт), проект полностью с нуля, есть только аналитика и моки дизайна.\n\n#СБЕРIT #senior"
      },
      {
        "timestamp": "2024-01-10 09:07:30",
        "content": "2024-01-10 09:07:30\n Daniil Max -> 2071074234:\n— Название компании: Сбер здоровье [первый этап, технический]\n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Задачи: теория \n— Запись на ютуб: https://youtu.be/phYS3Pt219s?si=LqUUybJO4d_MDKmR\n— Успех собеса: ✅\n— Фитбек о собесе от HR: огонь\n— Комментарий: тимлид ищет развития, схожие интересы. \nЭто не только собес, а ещё и общение прямо после собеса с тимлидом.\n\n#middle",
        "full_content": "2024-01-10 09:07:30\n Daniil Max -> 2071074234:\n— Название компании: Сбер здоровье [первый этап, технический]\n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Задачи: теория \n— Запись на ютуб: https://youtu.be/phYS3Pt219s?si=LqUUybJO4d_MDKmR\n— Успех собеса: ✅\n— Фитбек о собесе от HR: огонь\n— Комментарий: тимлид ищет развития, схожие интересы. \nЭто не только собес, а ещё и общение прямо после собеса с тимлидом.\n\n#middle"
      },
      {
        "timestamp": "2024-01-10 08:40:00",
        "content": "2024-01-10 08:40:00\n Daniil Max -> 2071074234:\n— Название компании: Сбер Девайсы \n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Задачи: лайвкодинг \n— Запись на ютуб: https://youtu.be/UsQDv6r1yxs?si=Zy_ecgZc98VzdVNP\n— Успех собеса: ✅\n— Фитбек о собесе от HR: предлагаем 240к рублей, 270к много\n\n#middle",
        "full_content": "2024-01-10 08:40:00\n Daniil Max -> 2071074234:\n— Название компании: Сбер Девайсы \n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Задачи: лайвкодинг \n— Запись на ютуб: https://youtu.be/UsQDv6r1yxs?si=Zy_ecgZc98VzdVNP\n— Успех собеса: ✅\n— Фитбек о собесе от HR: предлагаем 240к рублей, 270к много\n\n#middle"
      },
      {
        "timestamp": "2024-01-09 06:53:16",
        "content": "2024-01-09 06:53:16\n Daniil Max -> 2071074234:\n— Название компании: Сбер Core\n— Ссылка на вакансию: утеряна\n— ЗП: 350К \n— Задачи: лайвкодинг\n— Запись на ютуб: https://www.youtube.com/watch?v=7OwYdw3DTh8 команда\n— Успех собеса: ❌\n— Фитбек HR о собесе: нужно решать больше алгосов",
        "full_content": "2024-01-09 06:53:16\n Daniil Max -> 2071074234:\n— Название компании: Сбер Core\n— Ссылка на вакансию: утеряна\n— ЗП: 350К \n— Задачи: лайвкодинг\n— Запись на ютуб: https://www.youtube.com/watch?v=7OwYdw3DTh8 команда\n— Успех собеса: ❌\n— Фитбек HR о собесе: нужно решать больше алгосов"
      }
    ]
  },
  {
    "company": "Т-Банк",
    "count": 43,
    "records": [
      {
        "timestamp": "2025-07-10 13:22:20",
        "content": "2025-07-10 13:22:20\n Mark Nikonorov ⚛ -> 2071074234:\nКомпания: т-банк 2-этап алгосы\n1 задача\n\nДаны два отсортированных по возрастанию массива целых чисел arr1 и arr2. Напишите функцию, которая возвращает массив элементов, присутствующих только в одном из массивов (симметрическую разность).\n\nТребования:\nВходные массивы уже отсортированы по возрастанию\nРезультат должен быть отсортирован по возрастанию\nДубликаты в пределах одного массива должны быть сохранены\nНе используйте дополнительные структуры...",
        "full_content": "2025-07-10 13:22:20\n Mark Nikonorov ⚛ -> 2071074234:\nКомпания: т-банк 2-этап алгосы\n1 задача\n\nДаны два отсортированных по возрастанию массива целых чисел arr1 и arr2. Напишите функцию, которая возвращает массив элементов, присутствующих только в одном из массивов (симметрическую разность).\n\nТребования:\nВходные массивы уже отсортированы по возрастанию\nРезультат должен быть отсортирован по возрастанию\nДубликаты в пределах одного массива должны быть сохранены\nНе используйте дополнительные структуры данных (Set, Map и т.д.)\n\nПример 1:\n\ntext\nВход: nums1 = [1, 2, 3], nums2 = [2, 4, 6]  \nВыход: [1, 3, 4, 6]  \nПример 2:\n\ntext\nВход: nums1 = [4, 5, 6], nums2 = [6, 7, 8]  \nВыход: [4, 5, 7, 8]  \nПримечание:\n\nПорядок элементов в результате не важен.\n\nРешение\nfunction getSymmetricDifference(arr1, arr2) {\n    const result = [];\n    let i = 0, j = 0;\n\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] === arr2[j]) {\n            i++;\n            j++;\n        } else if (arr1[i] < arr2[j]) {\n            result.push(arr1[i]);\n            i++;\n        } else {\n            result.push(arr2[j]);\n            j++;\n        }\n    }\n\n    while (i < arr1.length) {\n        result.push(arr1[i]);\n        i++;\n    }\n\n    while (j < arr2.length) {\n        result.push(arr2[j]);\n        j++;\n    }\n\n    return result;\n}\nПример использования:\n\nconsole.log(getSymmetricDifference([1, 2, 3], [2, 4, 6])); // [1, 3, 4, 6]\nconsole.log(getSymmetricDifference([4, 5, 6], [6, 7, 8])); // [4, 5, 7, 8]\n\nЗадача 2.\nУсловие задачи: \"Максимальное количество одновременных зрителей\"\nФормулировка:\nДан массив интервалов stream, где каждый интервал представляет время подключения и отключения одного зрителя в формате [start, end]. Необходимо определить максимальное количество зрителей, которые одновременно находились в стриме.\n\nТребования:\nВходные данные: массив пар чисел [[start1, end1], [start2, end2], ...]\nВсе времена - целые неотрицательные числа\nИнтервалы считаются включительно (зритель активен в момент start и end)\nЕсли один зритель отключается в момент t, а другой подключается в тот же момент t, сначала учитываем отключение\n\nПример 1:\nВход: [[1, 5], [2, 6], [3, 4]]\nВыход: 3\nОбъяснение:\n- В момент 1: 1 зритель\n- В момент 2: 2 зрителя\n- В моменты 3-4: 3 зрителя\n- В момент 5: 2 зрителя\n- В момент 6: 1 зритель\nМаксимум - 3 зрителя\n\nПример 2:\nВход: [[10, 20], [15, 25], [20, 30]]\nВыход: 2\nОбъяснение:\n- В момент 20: один зритель уходит, другой приходит\n- Максимум достигается в интервале 15-19 (2 зрителя)\n\nРешение:\nfunction findMaxViewers(stream) {\n    const events = [];\n    for (const [start, end] of stream) {\n        events.push([start, 1]);\n        events.push([end + 1, -1]); // +1 для корректной обработки границ\n    }"
      },
      {
        "timestamp": "2025-07-08 08:41:25",
        "content": "2025-07-08 08:41:25\n Kirichelli -> 2071074234:\nКомпания: Т-Банк\nЗадачки:\n1. Написать функцию deepCopy\n\nРешение:\n\nfunction deepCopy(value) {\n  // Проверяем, является ли значение примитивом или null/undefined\n  if (value === null || typeof value !== \"object\") {\n    return value; // Примитивы и null/undefined возвращаем как есть\n  }\n\n  // Проверяем, является ли значение массивом\n  if (Array.isArray(value)) {\n    // Создаем новый массив и рекурсивно копируем каждый элемент\n    return value.map(item ...",
        "full_content": "2025-07-08 08:41:25\n Kirichelli -> 2071074234:\nКомпания: Т-Банк\nЗадачки:\n1. Написать функцию deepCopy\n\nРешение:\n\nfunction deepCopy(value) {\n  // Проверяем, является ли значение примитивом или null/undefined\n  if (value === null || typeof value !== \"object\") {\n    return value; // Примитивы и null/undefined возвращаем как есть\n  }\n\n  // Проверяем, является ли значение массивом\n  if (Array.isArray(value)) {\n    // Создаем новый массив и рекурсивно копируем каждый элемент\n    return value.map(item => deepCopy(item));\n  }\n\n  // Если значение — объект, создаем новый пустой объект\n  const result = {};\n\n  // Проходим по всем свойствам исходного объекта\n  for (const key in value) {\n    if (value.hasOwnProperty(key)) {\n      // Рекурсивно копируем каждое свойство\n      result[key] = deepCopy(value[key]);\n    }\n  }\n\n  return result;\n}\n\n\n2. Написать функцию memo\n\nРешение:\n\n\nconst memo = (fn) => {\n  const cache = new Map();\n\n  return function (...args) {\n    const stringArgs = JSON.stringify(args);\n\n    if (cache.has(stringArgs)) {\n      console.log(\"from cache\");\n      return cache.get(stringArgs);\n    }\n\n    const result = fn(...args);\n    cache.set(stringArgs, result);\n    return result;\n  };\n};\n\nconst count = (a, b) => {\n  return a + b;\n};\nconst memoCount = memo(count);\n\n\n4. Задачка на перерендер компонентов(есть выше)\n4. Задачки на рика и морти(есть выше тоже)"
      },
      {
        "timestamp": "2025-07-06 19:30:01",
        "content": "2025-07-06 19:30:01\n Mark Nikonorov ⚛ -> 2071074234:\nКомпания Т-банк\nЗп 350 \n\nзадача 1: написать event emmiter (есть выше)\nпочему нельзя передать в ключи обьекта что-то кроме string или number? \nапи обьекта так работает\n\nчто если передать в emit.on({}, () => {})? // запишется event по ключу objectObject.\n\nчто если передать в emit.on(\"toString\", () => {})? // перезапишется toString и при попытке его использования дефолтного поведения не будет\n\nчтобы конфликтов не было с проблемами выше лучше испо...",
        "full_content": "2025-07-06 19:30:01\n Mark Nikonorov ⚛ -> 2071074234:\nКомпания Т-банк\nЗп 350 \n\nзадача 1: написать event emmiter (есть выше)\nпочему нельзя передать в ключи обьекта что-то кроме string или number? \nапи обьекта так работает\n\nчто если передать в emit.on({}, () => {})? // запишется event по ключу objectObject.\n\nчто если передать в emit.on(\"toString\", () => {})? // перезапишется toString и при попытке его использования дефолтного поведения не будет\n\nчтобы конфликтов не было с проблемами выше лучше использовать Map в this.events\n\nзадача 2: написать функцию promisify\nfunction promisify(fn) {\n  return function (...args) {\n    // Возвращаем новую функцию, которая возвращает промис\n    return new Promise((resolve, reject) => {\n      // Вызываем оригинальную функцию с переданными аргументами и колбэком\n      fn(...args, (err, result) => {\n        if (err) return reject(err); // Если ошибка — отклоняем промис\n        resolve(result);             // Если всё хорошо — резолвим результат\n      });\n    });\n  };\n}\n\nзадача 3: задача на rick и morty (есть выше)"
      },
      {
        "timestamp": "2025-06-26 10:48:01",
        "content": "2025-06-26 10:48:01\n Sentry -> 2071074234:\nКомпания: Т-банк\nПосле рассказа о себе лайв-код\n\nЗадача 1:\nНаписать эмиттер:\n\nclass EventEmitter {\n  constructor() {\n    // Хранилище для событий и их подписчиков\n    this.events = {};\n  }\n\n  // Метод для подписки на событие\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = [];\n    }\n\n    this.events[eventName].push(callback);\n\n    return this;\n  }\n\n  // Метод для отписки от события\n  off(eventName, callback) ...",
        "full_content": "2025-06-26 10:48:01\n Sentry -> 2071074234:\nКомпания: Т-банк\nПосле рассказа о себе лайв-код\n\nЗадача 1:\nНаписать эмиттер:\n\nclass EventEmitter {\n  constructor() {\n    // Хранилище для событий и их подписчиков\n    this.events = {};\n  }\n\n  // Метод для подписки на событие\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = [];\n    }\n\n    this.events[eventName].push(callback);\n\n    return this;\n  }\n\n  // Метод для отписки от события\n  off(eventName, callback) {\n    if (this.events[eventName]) {\n      this.events[eventName] = this.events[eventName].filter(cb => cb !== callback);\n    }\n    \n    return this.\n  }\n\n  // Метод для оповещения о событии\n  emit(eventName, data) {\n    if (this.events[eventName]) {\n      this.events[eventName].forEach(callback => callback(data));\n    }\n\n    return this.\n  }\n}\n\n// Пример использования\n\nconst cb = () => null;\n\n// Создаем экземпляр класса EventEmitter\nconst eventEmitter = new EventEmitter();\neventEmitter\n.on(‘test’, cb);\n.off(‘test’, cb)\n\nЗадача 2:\nНаписать promiseAll:\nfunction promiseAll(promises) {\n\n  return new Promise((resolve, reject) => {\n\n    let results = [];\n\n    let completedPromises = 0;\n\n    promises.forEach((promise, index) => {\n\n      Promise.resolve(promise).then(value => {\n\n        results[index] = value;\n\n        completedPromises++;\n\n        if (completedPromises === promises.length) {\n\n          resolve(results);\n\n        }\n\n      }).catch(err => reject(err));\n\n    });\n    if (promises.length === 0) {\n\n      resolve(results); \n\n    }\n\n  });\n\n}\nЗадача 3: \n\nПеререндеры. Было Выше \n\n+ Задача по Rick and Morty"
      },
      {
        "timestamp": "2025-06-16 13:52:56",
        "content": "2025-06-16 13:52:56\n Василий -> 2071074234:\nТ-Банк техничка\n\n1)\n// Задача 1\n// Реализовать EventEmitter\n// При этом методы on, off, emitt надо реализовать так, чтобы можно было чэйнить\n// Учитывать, что сохраняемые функции-обработчики не должны повторяться\n// (хотел начать сразу через Map и Set - почему-то он отклонил этот план и в итоге делал через объект)\n// Вот что-то подобное получилось\nclass EventEmitter {\n    constructor () {\n        this.events = {};\n    }\n\n    on(event, cb) {\n        if(...",
        "full_content": "2025-06-16 13:52:56\n Василий -> 2071074234:\nТ-Банк техничка\n\n1)\n// Задача 1\n// Реализовать EventEmitter\n// При этом методы on, off, emitt надо реализовать так, чтобы можно было чэйнить\n// Учитывать, что сохраняемые функции-обработчики не должны повторяться\n// (хотел начать сразу через Map и Set - почему-то он отклонил этот план и в итоге делал через объект)\n// Вот что-то подобное получилось\nclass EventEmitter {\n    constructor () {\n        this.events = {};\n    }\n\n    on(event, cb) {\n        if(!this.events[event]) {\n            this.events[event] = [];\n        }\n\n        this.events[event].push(cb);\n        return this;\n    };\n\n    off(event, cb) {\n        if(!this.events[event]) return this;\n        this.events[event] = this.events[event].filter(item => return item !== cb);\n        return this;\n    }\n\n    emit(event, ...args) {\n        if(!this.events[event]) return this;\n        this.events[event].forEach(cb => cb(...args));\n        return this;\n    }\n}\n2) Рассказать про работу evnetloop, какие есть особенности работы requestAnimationFrame\n3) Написать функцию мемоизации с возможность очистить кэш\nfunction memoize(func) {\n  const cache = new Map();\n  \n  function memoized(...args) {\n    const key = JSON.stringify(args);\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    const result = func.apply(this, args);\n    cache.set(key, result);\n    return result;\n  }\n  \n  // Добавляем метод для очистки кэша\n  memoized.clear = function() {\n    cache.clear();\n  };\n  \n  return memoized;\n}\n4) Реализовать приложение по поиску героев Рик и Морти\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n\n// Определяем интерфейсы для типизации данных от API\ninterface Character {\n  id: number;\n  name: string;\n}\n\ninterface ApiResponse {\n  info: {\n    count: number;    // Общее количество персонажей\n    pages: number;    // Всего страниц\n    next: string | null;  // URL следующей страницы\n    prev: string | null;  // URL предыдущей страницы\n  };\n  results: Character[];  // Массив персонажей\n}\n\nconst RickAndMortySearch: React.FC = () => {\n  // Состояние для хранения поискового запроса\n  const [searchTerm, setSearchTerm] = useState('');\n  // Состояние для хранения списка персонажей\n  const [characters, setCharacters] = useState<Character[]>([]);\n  // Состояние загрузки данных\n  const [loading, setLoading] = useState(false);\n  // Состояние для хранения ошибок\n  const [error, setError] = useState<string | null>(null);\n  // Текущая страница пагинации\n  const [page, setPage] = useState(1);\n  // Общее количество страниц\n  const [totalPages, setTotalPages] = useState(0);\n\n  /**\n   * Функция для загрузки персонажей из API\n   * @param term - Поисковый запрос\n   * @param pageNum - Номер страницы\n   */\n  const fetchCharacters = useCallback(async (term: string, pageNum: number) => {\n    setLoading(true);  // Включаем индикатор загрузки\n    setError(null);    // Сбрасываем ошибки\n    \n    try {\n      // Отправляем GET-запрос к API\n      const response = await axios.get<ApiResponse>(\n        'https://rickandmortyapi.com/api/character',\n        {\n          params: {  // Параметры запроса\n            name: term,  // Имя для поиска\n            page: pageNum // Номер страницы\n          }\n        }\n      );\n      \n      // Обновляем состояние с полученными данными\n      setCharacters(response.data.results);\n      setTotalPages(response.data.info.pages);\n    } catch (err) {\n      // Обрабатываем ошибки\n      if (axios.isAxiosError(err) && err.response?.status === 404) {\n        // Специальная обработка для случая \"не найдено\"\n        setCharacters([]);\n        setError('No characters found');\n      } else {\n        // Общая обработка других ошибок\n        setError('An error occurred while fetching data');\n      }\n      setTotalPages(0);\n    } finally {\n      setLoading(false);  // Выключаем индикатор загрузки\n    }\n  }, []);"
      },
      {
        "timestamp": "2025-06-11 14:36:24",
        "content": "2025-06-11 14:36:24\n Egor -> 2071074234:\nТ-Банк(финал) проект hippo\nвакансия: рефка\nзп: от 350\nhttps://www.youtube.com/watch?v=xv51xqb8Z6U",
        "full_content": "2025-06-11 14:36:24\n Egor -> 2071074234:\nТ-Банк(финал) проект hippo\nвакансия: рефка\nзп: от 350\nhttps://www.youtube.com/watch?v=xv51xqb8Z6U"
      },
      {
        "timestamp": "2025-06-04 03:19:06",
        "content": "2025-06-04 03:19:06\n Egor -> 2071074234:\n02.06 Т-Банк(3 этап) систем дизайн\nВакансия: по рефке\nЗП: ?\n\nhttps://www.youtube.com/watch?v=55BtdZTdxe0",
        "full_content": "2025-06-04 03:19:06\n Egor -> 2071074234:\n02.06 Т-Банк(3 этап) систем дизайн\nВакансия: по рефке\nЗП: ?\n\nhttps://www.youtube.com/watch?v=55BtdZTdxe0"
      },
      {
        "timestamp": "2025-05-21 12:27:39",
        "content": "2025-05-21 12:27:39\n Egor -> 2071074234:\nТ-Банк 1 этап 21.05\nРефералка\nОт 330\nВопросы: \nРасскажи про опыт\nЗадачи:\n\n1. что выведет? как исправить?\nconst userService = {\n  currentFilter: 'active',\n  users: [\n    { name: 'Alex', status: 'active' },\n    { name: 'Nick', status: 'deleted' },\n  ],\n  getFilteredUsers() {\n    return this.users.filter(function(user) {\n      return user.status === this.currentFilter;\n    });\n  }\n};\n\nconsole.log(userService.getFilteredUsers());\n\n\n2. что выведет?\n\nconsole.lo...",
        "full_content": "2025-05-21 12:27:39\n Egor -> 2071074234:\nТ-Банк 1 этап 21.05\nРефералка\nОт 330\nВопросы: \nРасскажи про опыт\nЗадачи:\n\n1. что выведет? как исправить?\nconst userService = {\n  currentFilter: 'active',\n  users: [\n    { name: 'Alex', status: 'active' },\n    { name: 'Nick', status: 'deleted' },\n  ],\n  getFilteredUsers() {\n    return this.users.filter(function(user) {\n      return user.status === this.currentFilter;\n    });\n  }\n};\n\nconsole.log(userService.getFilteredUsers());\n\n\n2. что выведет?\n\nconsole.log(1); // Синхронный\n\nsetTimeout(() => console.log(2)); // Макрозадача (выполнится после микрозадач)\n\nPromise.resolve().then(() => console.log(3)); // Микрозадача\n\nconsole.log(4); // Синхронный\n\nsetTimeout(() => console.log(5)); // Макрозадача\n\nconsole.log(6); // Синхронный\n\n\nКакое будет поведение на странице?\n\nfunction infiniteMicrotask() {\n  Promise.resolve().then(infiniteMicrotask);\n}\n\ninfiniteMicrotask();\n\nтот же вопрос\n\nfunction infiniteMacrotask() {\n  setTimeout(infiniteMacrotask, 0);\n}\n\ninfiniteMacrotask();\n\n4. написать eventEmitter\n\nclass EventEmitter {\n  constructor() {\n    this.events = {};\n  }\n\n  // Подписка на событие\n  on(eventName, listener) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = [];\n    }\n    this.events[eventName].push(listener);\n    return this; // для чейнинга\n  }\n\n  // Отписка от события\n  off(eventName, listener) {\n    if (!this.events[eventName]) return this;\n    \n    this.events[eventName] = this.events[eventName].filter(\n      fn => fn !== listener\n    );\n    return this;\n  }\n\n  // Единоразовая подписка\n  once(eventName, listener) {\n    const onceWrapper = (...args) => {\n      listener.apply(this, args);\n      this.off(eventName, onceWrapper);\n    };\n    this.on(eventName, onceWrapper);\n    return this;\n  }\n\n  // Вызов события\n  emit(eventName, ...args) {\n    if (!this.events[eventName]) return false;\n    \n    this.events[eventName].forEach(listener => {\n      listener.apply(this, args);\n    });\n    return true;\n  }\n\n  // Количество подписчиков на событие\n  listenerCount(eventName) {\n    if (!this.events[eventName]) return 0;\n    return this.events[eventName].length;\n  }\n\n  // Получение всех подписчиков события\n  listeners(eventName) {\n    return this.events[eventName] || [];\n  }\n}\n\n5. Даны 3 вложенных компонента, что будет если в родителе произойдет ререндер?\nчто будет если в одном из дочерних написать в инпут, спровоцировав ререндер, как избежать ререндера дочернего компонента?\n6. Реализовать функционал отображения списка, и поиска через input\n\n// Функция getPeople остается неизменной\nfunction getPeople(search, page = 1, options = {}) {\n  return fetch(\n    `https://swapi.dev/api/people?search=${search}&page=${page}`,\n    options\n  )\n    .then(res => res.json())\n    .then(data => data);\n}\n\n// Функция debounce остается неизменной\nconst debounce = (callback, delay) => {\n  let timeoutId;\n  return (...args) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      callback(...args);\n    }, delay);\n  };\n};\n\nexport function App() {\n  const [search, setSearch] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [peoples, setPeoples] = useState([]);\n\n  useEffect(() => {\n    if (search) {\n      setIsLoading(true);\n      getPeople(search, 1)\n        .then(data => {\n          setPeoples(data.results);\n        })\n        .catch(error => {\n            console.error(error);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        })\n    } else {\n      setPeoples([]);\n    }\n  }, [search]);\n\n  const handleSearch = event => {\n    setSearch(event.target.value);\n  };\n\n  const debouncedSearch = debounce(handleSearch, 500);\n\n  return (\n    <div>\n      <input type='text' onChange={debouncedSearch} placeholder='Поиск' />\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        <ul>\n          {peoples.map(person => (\n            <li key={person.url}>{person.name}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}"
      },
      {
        "timestamp": "2025-05-12 13:36:43",
        "content": "2025-05-12 13:36:43\n Артур Виноградов -> 2071074234:\nКомпания: Т-банк. Алгоритмы\nЗП: 300\nРефка\n\n1 задача.\nДан массив натуральных чисел. требуется проверить, можно ли в нём выбрать четыре различных элемента x, y, z, w так, чтобы x + y  = z + w\n\nЭлементы считаем различными, если индексы всех элементов уникальны.\nЕсли это возможно - вывести индексы этих элементов\n[2,  1, 5, 2, 7, 4] -> 0, 5, 1, 2\n[1, 2, 2, 0] -> no solution\n\n// какие есть интересные кейсы, которые нужно прописать и протестировать?\n...",
        "full_content": "2025-05-12 13:36:43\n Артур Виноградов -> 2071074234:\nКомпания: Т-банк. Алгоритмы\nЗП: 300\nРефка\n\n1 задача.\nДан массив натуральных чисел. требуется проверить, можно ли в нём выбрать четыре различных элемента x, y, z, w так, чтобы x + y  = z + w\n\nЭлементы считаем различными, если индексы всех элементов уникальны.\nЕсли это возможно - вывести индексы этих элементов\n[2,  1, 5, 2, 7, 4] -> 0, 5, 1, 2\n[1, 2, 2, 0] -> no solution\n\n// какие есть интересные кейсы, которые нужно прописать и протестировать?\n// какая сложность решения по времени и по памяти? ( время O(n2), память O(n2) )\n\n\n2 задача\n\nНа вход подаётся непустая строка. Необходимо вернуть самый длинный палиндром в данной строке.\n\n// input: непустая строка\n// output: самый длинный палиндром в ней\n// \"baac\" => \"aa\"\n// \"abaababb => \"abaaba\"\n// \"abcba\" => \"abcba\"\n\nКакая сложность по времени?\nКак сократить хотя-бы до n2?\nДумаю здесь можно глянуть решения\nhttps://leetcode.com/problems/longest-palindrome/description/"
      },
      {
        "timestamp": "2025-04-30 11:29:07",
        "content": "2025-04-30 11:29:07\n Артур Виноградов -> 2071074234:\nТ-банк. 1 этап\nВакансия по рефке\nЗП: 300\nВсё точно также как здесь https://t.me/c/2071074234/489/82022\nи + задачки с API для rick & morty:\ndebounce\nрешить проблему с гонкой промисов при использовании (про AbortController).\nт.е как остановить предыдущие вызовы апи",
        "full_content": "2025-04-30 11:29:07\n Артур Виноградов -> 2071074234:\nТ-банк. 1 этап\nВакансия по рефке\nЗП: 300\nВсё точно также как здесь https://t.me/c/2071074234/489/82022\nи + задачки с API для rick & morty:\ndebounce\nрешить проблему с гонкой промисов при использовании (про AbortController).\nт.е как остановить предыдущие вызовы апи"
      },
      {
        "timestamp": "2025-04-28 12:12:05",
        "content": "2025-04-28 12:12:05\n Ber -> 2071074234:\nТ-банк (1 этап - React, JS в вебе)\nВакансия: https://www.tbank.ru/career/it/front-end-razrabotka/frontend-developer-react/\nЗП: 210-260\nЗадачи:\n\n// Задача 1\n// В чем проблема? Какие есть способы исправить?\n// Чем отличается стрелочная функция?\n// А если вынести коллбэк метода filter в отдельную переменную, которая будет хранить эту функцию-коллбэк?\n// Можно ли корректно вынести ее и в каком виде?\n// Как добиться так, чтобы была ошибка при выполнении?(тут на...",
        "full_content": "2025-04-28 12:12:05\n Ber -> 2071074234:\nТ-банк (1 этап - React, JS в вебе)\nВакансия: https://www.tbank.ru/career/it/front-end-razrabotka/frontend-developer-react/\nЗП: 210-260\nЗадачи:\n\n// Задача 1\n// В чем проблема? Какие есть способы исправить?\n// Чем отличается стрелочная функция?\n// А если вынести коллбэк метода filter в отдельную переменную, которая будет хранить эту функцию-коллбэк?\n// Можно ли корректно вынести ее и в каком виде?\n// Как добиться так, чтобы была ошибка при выполнении?(тут надо отвечать про директиву 'use strict', при этом рассказывать почему и как будет ошибка)\n// Что такое this?\nconst userSource = {\n    statusFilter: 'online',\n    data: [\n        {name: 'Bob', status: 'offline'},\n        {name: 'Bob', status: 'offline'},\n        {name: 'Bob', status: 'online'},\n    ],\n\n    getOnlineUsers: function() {\n        return this.data.filter(function(item) {\n            return item.status === this.statusFilter;\n        });\n    }\n};\n\nconsole.log(userSource.getOnlineUsers())\n\n\n// Задача 2\n// Реализовать EventEmitter\n// При этом методы on, off, emitt надо реализовать так, чтобы можно было чэйнить\n// Учитывать, что сохраняемые функции-обработчики не должны повторяться\n// (хотел начать сразу через Map и Set - почему-то он отклонил этот план и в итоге делал через объект)\n// Вот что-то подобное получилось\nclass EventEmitter {\n    constructor () {\n        this.events = {};\n    }\n\n    on(event, cb) {\n        if(!this.events[event]) {\n            this.events[event] = [];\n        }\n\n        this.events[event].push(cb);\n        return this;\n    };\n\n    off(event, cb) {\n        if(!this.events[event]) return this;\n        this.events[event] = this.events[event].filter(item => return item !== cb);\n        return this;\n    }\n\n    emit(event, ...args) {\n        if(!this.events[event]) return this;\n        this.events[event].forEach(cb => cb(...args));\n        return this;\n    }\n}\n\n// Задача 3\n// На консоль логи с макро и микрозадачами\n// Сперва была простая задача - то есть только setTimeout и then, синхронный код\n// Потом добавилась переменная foo, внутри которой инициализируется функция, которая порождает микрозадачу и при этом в then вызывается снова эта же переменная foo\n// (ответил, что будет переполнение стэка микрозадачами)\n// Потом добавилась переменная boo, внутри которой функция, которая порождает макрозадачу через setTimeout и планируется выполенение переменной boo снова\n// (ответил, что между макрозадачами будет выполнение синхронного кода)\n// Много вопросов задавал по EventLoop\n\n// Задача 4 на React\n/*\nGET https://rickandmortyapi.com/api/character?name=rick\n\n\n{\n  info: {\n    count: number,\n    pages: number,\n    next: string | null, //url\n    prev: string | null, //url\n  },\n  results: Array({ name: string, id: number })\n}\n\nВ случае если в апи отправлено имя несуществующего персонажа, апи отвечает ошибкой 404:\n{'error': 'There is nothing here'}\n\nСоздать приложение, с помощью которого можно искать по списку героев\n\nТребования\n1. Одно поле для ввода поискового запроса, запрашивать данные по вводу текста\n2. После получения ответа вывести список полученных сущеностей (только name)\n3. Индикация состояния загрузки\n4. Обработать кейс, когда апи отвечает ошибкой\n\n5. Следующим этапом сделать дебаунс\n6. Пагинацию\n\n*/"
      },
      {
        "timestamp": "2025-04-28 11:48:40",
        "content": "2025-04-28 11:48:40\n Ber -> 2071074234:\nТ-банк (2 этап - алгоритмика)\nВакансия: https://www.tbank.ru/career/it/front-end-razrabotka/frontend-developer-react/\nЗП: 210-260\n\nВ начале было предупреждение: можем решать в нашей онлайн-песочнице, либо на твоей IDE, но тогда шаришь весь экран\n(мои догадки: видимо, в их песочнице смотрится уход курсора)\n\nЗадачи:\n\n// 1-я задача\n// Есть два массива [112, 1, 4, 10] и [32, 12, 68, 12, 1]\n// Необходимо оптимально их объединить в один массив и по возрастанию\n/...",
        "full_content": "2025-04-28 11:48:40\n Ber -> 2071074234:\nТ-банк (2 этап - алгоритмика)\nВакансия: https://www.tbank.ru/career/it/front-end-razrabotka/frontend-developer-react/\nЗП: 210-260\n\nВ начале было предупреждение: можем решать в нашей онлайн-песочнице, либо на твоей IDE, но тогда шаришь весь экран\n(мои догадки: видимо, в их песочнице смотрится уход курсора)\n\nЗадачи:\n\n// 1-я задача\n// Есть два массива [112, 1, 4, 10] и [32, 12, 68, 12, 1]\n// Необходимо оптимально их объединить в один массив и по возрастанию\n// Что такое О? Как оценивается сложность по времени? Что такое пространственная сложность? Как ее оценивать?\n\n// 2-я задача\n// Надо обработать данные, которые представляют собой координаты Х и Y\n// Например, [{1, 1}, {2, 2}, {3, 1}]\n// Надо проверить, что у таких данных есть ось симметрии Y\n// Реализовать в виде функции, которая будет принимать подобные данные\n// и корректно определять наличие/отсутствие такой оси\n// В певой итерации можно не учитывать, что на оси Х ось симметрии может быть на дробной координате Х"
      },
      {
        "timestamp": "2025-04-21 07:58:29",
        "content": "2025-04-21 07:58:29\n Ber -> 2071074234:\nКомпания: Т-Банк (скриннинг)\nВакансия: https://www.tbank.ru/career/it/front-end-razrabotka/frontend-developer-react/\nЗП: конкретно еще будет решаться после следующих этапов (1 - React, js; 2 - алгоритмы; 3 - общение с командой)\nВопросы:\n1. Как узнать, что в переменной хранится функция?\n2. Что такое CORS?\n3. Чем отличаются sessionStorage от cookie?\n4. Как узнать, что в переменной хранится массив?\n5. Дан массив из 3 элементов, сколько будет элементов, если д...",
        "full_content": "2025-04-21 07:58:29\n Ber -> 2071074234:\nКомпания: Т-Банк (скриннинг)\nВакансия: https://www.tbank.ru/career/it/front-end-razrabotka/frontend-developer-react/\nЗП: конкретно еще будет решаться после следующих этапов (1 - React, js; 2 - алгоритмы; 3 - общение с командой)\nВопросы:\n1. Как узнать, что в переменной хранится функция?\n2. Что такое CORS?\n3. Чем отличаются sessionStorage от cookie?\n4. Как узнать, что в переменной хранится массив?\n5. Дан массив из 3 элементов, сколько будет элементов, если добавить элемент по индексу 7?\n6. Что приводит к ререндеру компонентов в React?\n7. Как изменить состояние компонента?\n7.1. Как запустить веб-приложение внутри другого веб-приложения?\n\n8. Если конфликтная ситуация с коллегой, как будешь решать?\n9. Какое качество тебе помогает справляться с большой нагрузкой и решением конфликтных ситуаций?\n10. Что у тебя есть из дополнительного в опыте: митапы, выступления на конференциях, статьи?\n11. У тебя есть опыт предложения своих решений и как ты их продвигал, как предлагал?\n12. В чем ты хотел развиваться дальше? Кем себя видишь в дальнейшем?\n13. Почему ищешь работу сейчас?\n14. Сколько бы ты дней мог ходить в офис?"
      },
      {
        "timestamp": "2025-03-27 07:18:07",
        "content": "2025-03-27 07:18:07\n Александр Птицын -> 2071074234:\n-- Название компании: IT One\n-- Ссылка на вакансию: hr сама написала\n-- ЗП: 350+\n-- Задачи: https://interview.tbank.ru/link/qsjfnT2XRjWq/result",
        "full_content": "2025-03-27 07:18:07\n Александр Птицын -> 2071074234:\n-- Название компании: IT One\n-- Ссылка на вакансию: hr сама написала\n-- ЗП: 350+\n-- Задачи: https://interview.tbank.ru/link/qsjfnT2XRjWq/result"
      },
      {
        "timestamp": "2025-02-21 15:02:46",
        "content": "2025-02-21 15:02:46\n Михаил -> 2071074234:\nКомпания: IT_One 1 Этап\nВакансия: HR написала\nЗП: 280-320k\n\nЗадачи:\nhttps://interview.tbank.ru/link/rth2WjJHS400/result",
        "full_content": "2025-02-21 15:02:46\n Михаил -> 2071074234:\nКомпания: IT_One 1 Этап\nВакансия: HR написала\nЗП: 280-320k\n\nЗадачи:\nhttps://interview.tbank.ru/link/rth2WjJHS400/result"
      },
      {
        "timestamp": "2025-02-06 20:34:52",
        "content": "2025-02-06 20:34:52\n Misha -> 2071074234:\nКомпания: Т-Банк (скрининг)\n\nСсылка на вакансию: https://www.tbank.ru/career/it/front-end-razrabotka/senior-frontend-developer-angular/\n\nЗП: согласовал на старте 260к. на руки\n\nВопросы:\n- Приводит ли типы оператор ===  \n- Если переменная объявлена через var, let, const есть ли доступ к ней, снаружи функции  \n- Как клонировать объект малым количеством кода  \n- Чему равен результат выполнения функции, если нет оператора выполнения return\n- Какая область ви...",
        "full_content": "2025-02-06 20:34:52\n Misha -> 2071074234:\nКомпания: Т-Банк (скрининг)\n\nСсылка на вакансию: https://www.tbank.ru/career/it/front-end-razrabotka/senior-frontend-developer-angular/\n\nЗП: согласовал на старте 260к. на руки\n\nВопросы:\n- Приводит ли типы оператор ===  \n- Если переменная объявлена через var, let, const есть ли доступ к ней, снаружи функции  \n- Как клонировать объект малым количеством кода  \n- Чему равен результат выполнения функции, если нет оператора выполнения return\n- Какая область видимости у переменной объявленной через let\n- Отличие bind от apply  \n- Что коллекция map может использовать в качестве ключей\n- Что выполнится раньше Promise.resolve или setTimeout\n- Как подписаться на одно событие DOM элемента несколькими обработчиками\n- Отличие let const  \n- Что возвращает setTimeout  \n- Какой тип возвращаемого значения функции fetch  \n- Что делает instanseOf\n\n Успех собеса ❌\n\nФитбек от HR - ответил правильно только на 50% вопросов, что не является проходным показателем."
      },
      {
        "timestamp": "2025-02-04 08:57:48",
        "content": "2025-02-04 08:57:48\n Petr Zabrodniy -> 2071074234:\nНазвание компании : Т-Банк (Тинькофф), 3 этап System Design (Архитектура веб)\nСсылка на вакансию : HR сама написала \nЗП : от 270к \nЗадачи : \nЗадача про мессенджер, как и в предыдущих собесах. \n\nОсновные требования : \n- НФТ  уточнить  и расписать\n- Тех стек фронт, опционально бек \n- Компонентный дизайн и архитектура на фронте \n- HLD схема\n- какие запросы будешь делать к апи, примерно, типа получить сообщения, отправить, что в аргументах и тд\n- оп...",
        "full_content": "2025-02-04 08:57:48\n Petr Zabrodniy -> 2071074234:\nНазвание компании : Т-Банк (Тинькофф), 3 этап System Design (Архитектура веб)\nСсылка на вакансию : HR сама написала \nЗП : от 270к \nЗадачи : \nЗадача про мессенджер, как и в предыдущих собесах. \n\nОсновные требования : \n- НФТ  уточнить  и расписать\n- Тех стек фронт, опционально бек \n- Компонентный дизайн и архитектура на фронте \n- HLD схема\n- какие запросы будешь делать к апи, примерно, типа получить сообщения, отправить, что в аргументах и тд\n- описать интерфейс сообщения, юзера, что то такое \n- Производительность\n- Безопасность\n- Дальнейшие челленджы с стеком, челенджы при горизонтальном/вертикальном масштабировании мессенджера (опционально)\n\nСохранился скрин итоговый с требованиями. В остальных пунктах \n- Производительность : Web Vitals, lighthouse\n- Безопасность : атаки XSS, jwt, httpOnly&secure"
      },
      {
        "timestamp": "2025-01-30 19:34:39",
        "content": "2025-01-30 19:34:39\n Wanderer -> 2071074234:\nКомпания: Т-банк(Тинькофф) \nСсылка на вакансию: Написала HR\nЗП: Вилка 300 - 330   \nФункция minCost(A, K, X) принимает три аргумента:\n- A: массив цен товаров,\n- K: количество доступных купонов,\n- X: скидка, предоставляемая одним купоном.\nЗадачи: \n\n1. Задача заключается в том, чтобы минимизировать общую стоимость товаров с учетом использования купонов. Каждый купон может быть использован на самый дорогой товар, уменьшая его цену на значение X. Функция с...",
        "full_content": "2025-01-30 19:34:39\n Wanderer -> 2071074234:\nКомпания: Т-банк(Тинькофф) \nСсылка на вакансию: Написала HR\nЗП: Вилка 300 - 330   \nФункция minCost(A, K, X) принимает три аргумента:\n- A: массив цен товаров,\n- K: количество доступных купонов,\n- X: скидка, предоставляемая одним купоном.\nЗадачи: \n\n1. Задача заключается в том, чтобы минимизировать общую стоимость товаров с учетом использования купонов. Каждый купон может быть использован на самый дорогой товар, уменьшая его цену на значение X. Функция сортирует массив цен по убыванию и применяет купоны к наиболее дорогим товарам, пока не закончатся купоны или пока не будут обработаны все товары. В конце функция возвращает суммарную стоимость оставшихся товаров.\n\n function minCost(A, K, X) {\n    // Сортируем массив по убыванию\n    A.sort((a, b) => b - a);\n\n    // Применяем купоны к самым дорогим товарам\n    for (let i = 0; i < A.length && K > 0; i++) {\n        let couponsUsed = Math.min(K, Math.floor(A[i] / X)); // Сколько купонов можно применить\n        A[i] = Math.max(A[i] - couponsUsed * X, 0);\n        K -= couponsUsed; // Уменьшаем количество доступных купонов\n    }\n\n    // Возвращаем суммарную стоимость оставшихся товаров\n    return A.reduce((sum, price) => sum + price, 0);\n}\n\n// Пример использования\nconst A = [8, 3, 10, 5, 13];\nconst K = 4;\nconst X = 7;\n\nconst result = minCost(A, K, X);\nconsole.log(result); // Ожидаемый результат: 12\n2: Объединение двух массивов\n\nФункция printUnion(arr1, arr2) находит и выводит уникальные элементы из двух отсортированных массивов arr1 и arr2. Функция проходит по обоим массивам, сравнивая их элементы, и выводит каждый уникальный элемент только один раз. Если элемент из одного массива равен элементу из другого, он также выводится только один раз. Таким образом, функция создает объединение двух массивов без дубликатов.\n\n\nfunction printUnion(arr1, arr2) {\n    let i = 0, j = 0;\n    let lastPrinted;\n    \n    while(i < arr1.length && j < arr2.length) {\n        if(arr1[i] < arr2[j]) {\n            if(arr1[i] !== lastPrinted) {\n                console.log(arr1[i]);\n                lastPrinted = arr1[i];\n            }\n            i++;\n        }\n        else if(arr2[j] < arr1[i]) {\n            if(arr2[j] !== lastPrinted) {\n                console.log(arr2[j]);\n                lastPrinted = arr2[j];\n            }\n            j++;\n        }\n        else {\n            if(arr1[i] !== lastPrinted) {\n                console.log(arr1[i]);\n                lastPrinted = arr1[i];\n            }\n            i++;\n            j++;\n        }\n    }\n    \n    while(i < arr1.length) {\n        if(arr1[i] !== lastPrinted) {\n            console.log(arr1[i]);\n            lastPrinted = arr1[i];\n        }\n        i++;\n    }\n    \n    while(j < arr2.length) {\n        if(arr2[j] !== lastPrinted) {\n            console.log(arr2[j]);\n            lastPrinted = arr2[j];\n        }\n        j++;\n    }\n}"
      },
      {
        "timestamp": "2025-01-28 10:13:20",
        "content": "2025-01-28 10:13:20\n Wanderer -> 2071074234:\nТинькофф / Т-Банк 1 этап (vanilla js + react)\nСсылка на вакансию: Написала HR\nЗП: Вилка 300 - 330 \n\nЗадачи:\nНаписать Event emitter\nEvent loop что будет в консоли?\nЗадача на анализ перерендеров и их оптимизация: React.memo, React.useCallback, React.useMemo. \nНаписать небольшое приложение по API Рика и Морти.\nОтображать список персонажей, поиск по имени, пагинацию, состояние ошибки и загрузки\nВопросы: Теоретических вопросов не было\nРезультат: Успешно, п...",
        "full_content": "2025-01-28 10:13:20\n Wanderer -> 2071074234:\nТинькофф / Т-Банк 1 этап (vanilla js + react)\nСсылка на вакансию: Написала HR\nЗП: Вилка 300 - 330 \n\nЗадачи:\nНаписать Event emitter\nEvent loop что будет в консоли?\nЗадача на анализ перерендеров и их оптимизация: React.memo, React.useCallback, React.useMemo. \nНаписать небольшое приложение по API Рика и Морти.\nОтображать список персонажей, поиск по имени, пагинацию, состояние ошибки и загрузки\nВопросы: Теоретических вопросов не было\nРезультат: Успешно, позвали на 2 этап ✅"
      },
      {
        "timestamp": "2024-11-05 14:01:22",
        "content": "2024-11-05 14:01:22\n аыеъа -> 2071074234:\nТ-Банк (Тинькофф) Финал\nКоманда разработки главной страницы\nЗП: 250к\nВидео:",
        "full_content": "2024-11-05 14:01:22\n аыеъа -> 2071074234:\nТ-Банк (Тинькофф) Финал\nКоманда разработки главной страницы\nЗП: 250к\nВидео:"
      },
      {
        "timestamp": "2024-11-05 09:15:03",
        "content": "2024-11-05 09:15:03\n Гасим Мурасов -> 2071074234:\nт-банк 1ый этап\nзп 250к просил\nвакансия по рефералке\n1) написать EventEmmiter(была выше)\n2) кастомный PromiseAll\n3) нужно сказать какие компоненты будет ререндерится и почему -\nhttps://interview.tbank.ru/link/Tv8S2dJR9wLC/result\n4) написать приложение с апи rick & morty(есть выше)\nGET https://rickandmortyapi.com/api/character?name=rick\n\ninfo: (\ncount: number,\npages: number,\nnext: string | null, // url,\nprev: string | null, //url\n},\nresults: Array...",
        "full_content": "2024-11-05 09:15:03\n Гасим Мурасов -> 2071074234:\nт-банк 1ый этап\nзп 250к просил\nвакансия по рефералке\n1) написать EventEmmiter(была выше)\n2) кастомный PromiseAll\n3) нужно сказать какие компоненты будет ререндерится и почему -\nhttps://interview.tbank.ru/link/Tv8S2dJR9wLC/result\n4) написать приложение с апи rick & morty(есть выше)\nGET https://rickandmortyapi.com/api/character?name=rick\n\ninfo: (\ncount: number,\npages: number,\nnext: string | null, // url,\nprev: string | null, //url\n},\nresults: Array({ name: string, id: number })\n\nВ случае если в апи отправлено имя несуществукшего персонажа, апи отвечает ошибкой 404:\n(\"error\":\"There is nothing here\")\n\nСоздать приложение, с помощью которого можно искать по списку героев.\n\nDocumentation (rickandmortyapi.com)\nТребования\n\n• Одно поле для ввода поискового запроса, запрашивать данные по вводу текста\n• После получения ответа вывести список полученных сущностей (только пате) |\n• Индикация состояния загрузки\n• Обработать кейс когда апи отвечает ошибкой /"
      },
      {
        "timestamp": "2024-10-29 07:49:36",
        "content": "2024-10-29 07:49:36\n Алмас -> 2071074234:\nКомпания: Т-банк\nЗП: 400\nВакансия: hr написала\nЗадачи те же что и обычно + 1 новая\n\n1)\nconsole.log(1);\nsetTimeout(function() {\n    console.log(2);\n});\nPromise.resolve(3).then(console.log);\nconsole.log(4);\nsetTimeout(function() {\n    console.log(5);\n}, 0);\nconsole.log(6);\n\nпотом модификация 1\n\nconsole.log(1);\nsetTimeout(function() {\n    console.log(2);\n});\nPromise.resolve(3).then(console.log);\nconsole.log(4);\nsetTimeout(function() {\n    console.log(5);\n},...",
        "full_content": "2024-10-29 07:49:36\n Алмас -> 2071074234:\nКомпания: Т-банк\nЗП: 400\nВакансия: hr написала\nЗадачи те же что и обычно + 1 новая\n\n1)\nconsole.log(1);\nsetTimeout(function() {\n    console.log(2);\n});\nPromise.resolve(3).then(console.log);\nconsole.log(4);\nsetTimeout(function() {\n    console.log(5);\n}, 0);\nconsole.log(6);\n\nпотом модификация 1\n\nconsole.log(1);\nsetTimeout(function() {\n    console.log(2);\n});\nPromise.resolve(3).then(console.log);\nconsole.log(4);\nsetTimeout(function() {\n    console.log(5);\n}, 0);\nconsole.log(6);\nconst foo1 = () => {\n    console.log('foo1');\n    return Promise.resolve().then(foo1);\n}\nfoo1();\n\nмодификация 2\n\nconsole.log(1);\nsetTimeout(function() {\n    console.log(2);\n});\nPromise.resolve(3).then(console.log);\nconsole.log(4);\nsetTimeout(function() {\n    console.log(5);\n}, 0);\nconsole.log(6);\nconst foo2 = () => {\n    console.log('foo2');\n    setTimeout(foo2);\n}\nfoo2();\n\nмодификация 3\n\nconsole.log(1);\nsetTimeout(function() {\n    console.log(2);\n});\nsetTimeout(() => {\n    Promise.resolve().then(() => console.log(7));\n});\nPromise.resolve(3).then(console.log);\nconsole.log(4);\nsetTimeout(function() {\n    console.log(5);\n}, 0);\nconsole.log(6);\n\n2) что Выведет код?\nconst userService = {\n    currentFilter: 'active',\n    users: [\n        { name: 'Alex', status: 'active' },\n        { name: 'Nick', status: 'deleted' },\n    ],\n    getFilteredUsers: function() {\n        return this.users.filter(function(user) {\n            return user.status === this.currentFilter;\n        });\n    }\n};\n\nconsole.log(userService.getFilteredUsers());\nпотом попросит забиндить правильно контекст\n\n3)своя реализация  promiseAll\n4) Приложение содержит кнопку, при нажатии на которую должен появиться инпут с фокусом. Но почему-то это не работает.\nРасскажите, почему возникает такая проблема и предложите варианты ее исправления.\nimport { useRef, useState } from \"react\";\n\nexport default function App() {\n    const [isVisible, setIsVisible] = useState(false);\n    const inputRef = useRef();\n\n    const showInput = () => {\n        setIsVisible(true);\n        inputRef.current.focus();\n    };\n\n    return (\n        <div>\n            <button onClick={showInput}>Show and focus input</button>\n            {isVisible && <input ref={inputRef} type=\"text\" />}\n        </div>\n    );\n}\n\n5) задача как в предыдуших топиках про рик и морти"
      },
      {
        "timestamp": "2024-10-18 13:53:40",
        "content": "2024-10-18 13:53:40\n аыеъа -> 2071074234:\nТ-Банк (Тинькофф) Архитектурный этап\nЗП: Не обсуждали\nВакансия: Написала HR\n\nВидео (голос интервьюера не записался😭)\nЗадача с моим решением:\nhttps://excalidraw.com/#room=89450b44aa0acbb36b46,rBmb2P6JuJPt9XSWsRhuLw\nЗадача с прошлого архитектурного: \nhttps://excalidraw.com/#room=36d00cecfb850495e0d5,3aMMxi9HEy96MYaudtqxEg\n\n#архитектура #систем_дизайн",
        "full_content": "2024-10-18 13:53:40\n аыеъа -> 2071074234:\nТ-Банк (Тинькофф) Архитектурный этап\nЗП: Не обсуждали\nВакансия: Написала HR\n\nВидео (голос интервьюера не записался😭)\nЗадача с моим решением:\nhttps://excalidraw.com/#room=89450b44aa0acbb36b46,rBmb2P6JuJPt9XSWsRhuLw\nЗадача с прошлого архитектурного: \nhttps://excalidraw.com/#room=36d00cecfb850495e0d5,3aMMxi9HEy96MYaudtqxEg\n\n#архитектура #систем_дизайн"
      },
      {
        "timestamp": "2024-10-15 19:06:08",
        "content": "2024-10-15 19:06:08\n 5429820319 -> 2071074234:\n- Т-банк\n - Первый этап (React + JS)\n- ЗП: до 400к\n- Вакансия: hr сама написала\n- Успех: нет\n\n\nСегодня жестко разьебали в Тинькофф\n\nХотел попробовать пройти на своих, но тут понял что собесы стали настолько сложными что в одиночку тащить просто нереально\n\nБыло все не как тут в чате, меня сначала спрасили за опыт, про задачи - довольно подроно, минут на 15\n\nПотом сразу была задача на Deep Copy, вспомнил и ее написал ее довольно бодро, но она не покры...",
        "full_content": "2024-10-15 19:06:08\n 5429820319 -> 2071074234:\n- Т-банк\n - Первый этап (React + JS)\n- ЗП: до 400к\n- Вакансия: hr сама написала\n- Успех: нет\n\n\nСегодня жестко разьебали в Тинькофф\n\nХотел попробовать пройти на своих, но тут понял что собесы стали настолько сложными что в одиночку тащить просто нереально\n\nБыло все не как тут в чате, меня сначала спрасили за опыт, про задачи - довольно подроно, минут на 15\n\nПотом сразу была задача на Deep Copy, вспомнил и ее написал ее довольно бодро, но она не покрывала не все тестовые случаи, короче, прокапался с ней и в итоге так и не завелось, нужно было изначально идти с другим подходом\n\nПотом была задача Promie Any, написал решение быстро, но протупил и поставил счетчик не в том блоке (просто одну скобку раньше и все было бы ок), из за этого долго тупил почему не работает и словил кучу доп вопросов про синхронноть/асинхронность\n\nДалее нужно было по React-коду сказать какие компоненты перерисуются а какие нет (тут уже была такая задача в чате), вроде все рассказал, тут было относительно просто, но была куча вопросов а почему ты так думаешь, а как в реате это работает, а если сделать так поменяется ли что то и т.п\n\nИ далее была задача написать слот-машину (кода не осталось, не успел скопировать)\n\nЯ даже не понял что именно нужно было сделать, оставалось всего 15 минут до конца, я нервничал, там было уже частично написанное приложение с разными утилитарными функциями и это нужно было доделать - по итогу там должна была получиться что то типа однорукого бандита где вращаются числа когда дергается ручка.\n\nПо итогу фейл\n\nНе будьте мной, не ходите одни"
      },
      {
        "timestamp": "2024-10-11 10:11:25",
        "content": "2024-10-11 10:11:25\n аыеъа -> 2071074234:\nТ-Банк (Тинькофф) Алгоритмический этап\nУспех: ✅\nЗП: Не обсуждали\nВакансия: написала hr\nЗадачи:\n\n1. Дан массив, нужно его разрезать так, что бы сумма правой и левой части были равны\nВернуть левую сумму\nfunction maxSum(arr) {\n    let left = 0;\n    let right = arr.length - 1;\n    let leftSum = 0;\n    let rightSum = 0;\n    let maxLeftSum = 0;\n\n    while (left <= right) {\n        if (leftSum <= rightSum) {\n            leftSum += arr[left];\n            left++;...",
        "full_content": "2024-10-11 10:11:25\n аыеъа -> 2071074234:\nТ-Банк (Тинькофф) Алгоритмический этап\nУспех: ✅\nЗП: Не обсуждали\nВакансия: написала hr\nЗадачи:\n\n1. Дан массив, нужно его разрезать так, что бы сумма правой и левой части были равны\nВернуть левую сумму\nfunction maxSum(arr) {\n    let left = 0;\n    let right = arr.length - 1;\n    let leftSum = 0;\n    let rightSum = 0;\n    let maxLeftSum = 0;\n\n    while (left <= right) {\n        if (leftSum <= rightSum) {\n            leftSum += arr[left];\n            left++;\n        } else {\n            rightSum += arr[right];\n            right--;\n        }\n\n        if (leftSum === rightSum) {\n            maxLeftSum = Math.max(maxLeftSum, leftSum);\n        }\n    }\n\n    return maxLeftSum;\n}\n\n\n2. https://leetcode.com/problems/permutation-in-string/description/\n\n3. Дан массив домов houses где число это этаж дома и цель - индекс нужного дома \nНужно найти минимальную длину лестницы с которой можно дойти до нужного дома\nfn([1, 2, 6, 1], 2) => 4\nfn([100 ... 100, 1 (target), 2, 100 ... 100],) => 1\nОтвет: Нужно итерироваться с индекса target на право и на лево, при каждой итерации выщитовать корректный минимум"
      },
      {
        "timestamp": "2024-10-08 19:03:39",
        "content": "2024-10-08 19:03:39\n 5429820319 -> 2071074234:\nТ-банк (скрининг)\nВакансия: hr сама написала\nЗП: до 400к\nУспех: ✅\nВопросы:\nМожно ли обратиться к переменным типа var/let/const за пределами функции?\nВ чем разница между let и const?\nВ чем разница между == и ===?\nЧто возвращает функция по умолчанию?\nКак можно клонировать объект в\nJavaScript?\nКакой тип данных возвращет fetch?\nЧто выполниться раньше Promise или setTimeout?\nЧто возвращает setTimeout?\nЗачем нужен Symbol?\nЧто такое Мар?\nВ чем разница межд...",
        "full_content": "2024-10-08 19:03:39\n 5429820319 -> 2071074234:\nТ-банк (скрининг)\nВакансия: hr сама написала\nЗП: до 400к\nУспех: ✅\nВопросы:\nМожно ли обратиться к переменным типа var/let/const за пределами функции?\nВ чем разница между let и const?\nВ чем разница между == и ===?\nЧто возвращает функция по умолчанию?\nКак можно клонировать объект в\nJavaScript?\nКакой тип данных возвращет fetch?\nЧто выполниться раньше Promise или setTimeout?\nЧто возвращает setTimeout?\nЗачем нужен Symbol?\nЧто такое Мар?\nВ чем разница между bind и call?\nКакие есть этапы у event?\nВ чем разница между margin и padding?\nКак можно отцентровать элемент?\nЧто приоритетнее id или class?"
      },
      {
        "timestamp": "2024-10-08 13:55:34",
        "content": "2024-10-08 13:55:34\n аыеъа -> 2071074234:\nТ-Банк (Тинькофф) Техсобес\nВакансия: написала hr\nЗП: не обсуждали\nУспех: ✅\nВопросы:\n\nСразу перешли к задачкам\n// что выведет и почему\nconsole.log(1);\n\nsetTimeout(function() {\n  console.log(2)\n})\n\nPromise.resolve(3).then(console.log)\n\nconsole.log(1);\n\nsetTimeout(function() {\n  console.log(5)\n}, 0)\n\nconsole.log(6);\nчто будет если к коду выше добавить это\nconst foo1 = () => {\n  console.log('foo1')\n  \n  return Promise.resolve().then(foo1)\n}\n\nfoo1()\nили это\n\n...",
        "full_content": "2024-10-08 13:55:34\n аыеъа -> 2071074234:\nТ-Банк (Тинькофф) Техсобес\nВакансия: написала hr\nЗП: не обсуждали\nУспех: ✅\nВопросы:\n\nСразу перешли к задачкам\n// что выведет и почему\nconsole.log(1);\n\nsetTimeout(function() {\n  console.log(2)\n})\n\nPromise.resolve(3).then(console.log)\n\nconsole.log(1);\n\nsetTimeout(function() {\n  console.log(5)\n}, 0)\n\nconsole.log(6);\nчто будет если к коду выше добавить это\nconst foo1 = () => {\n  console.log('foo1')\n  \n  return Promise.resolve().then(foo1)\n}\n\nfoo1()\nили это\n\nconst foo2 = () => {\n  console.log('foo1')\n  \n  setTimeout(foo2)\n}\n\nfoo2()\nОтвет в том что при первом случае будут лаги из-за рекурсивного промиса, а во втором, приложение будет отвечать на действия потому-что это макротаска\n\nНаписать свой EventEmitter и проверку для него\nНаписать свой PromiseAll и функции проверки к нему\nКод не сохранился, вопрос был почему не появится инпут после нажатия на кнопку (ответ из-за того что реф с фокусом ставится до рендера самого инпута) и как решить эту проблему 3-4мя способами\n\nНаписать по апи рика и морти приложение с поиском и обработкой ошибок, если останется время будут усложнения: \nДобавление дебаунса\nПросят написать кастомный хук в который нужно перенести код с запросами, дополнение это булева hasNextPage и функциия fetchMore которая добавляет еще страницу к текущим персонажам \nПод конец спросил как оборвать запрос (abortController)\n\nЯ решал задачки слишком быстро и мне постоянно добавляли кучу доп вопросов и усложнений к задачкам, не будьте мной"
      },
      {
        "timestamp": "2024-10-01 11:48:44",
        "content": "2024-10-01 11:48:44\n Timofei Syromiatnikov -> 2071074234:\n— Название: Т-банк (1 этап JS + React)\n— Вакансия: написала hr\n— ЗП: 300к\n— Задачи:\n1. Что выйдет в консоль лог в каком порядке и почему\n// что выведет\nconsole.log(1);\n\nsetTimeout(function() {\n  console.log(2)\n})\n\nPromise.resolve(3).then(console.log)\n\nconsole.log(1);\n\nsetTimeout(function() {\n  console.log(5)\n}, 0)\n\nconsole.log(6);\n2. Что выйдет в консоль лог в каком порядке и почему\n// что выведет\nconsole.log(1);\n\nsetTimeout(function() {\n...",
        "full_content": "2024-10-01 11:48:44\n Timofei Syromiatnikov -> 2071074234:\n— Название: Т-банк (1 этап JS + React)\n— Вакансия: написала hr\n— ЗП: 300к\n— Задачи:\n1. Что выйдет в консоль лог в каком порядке и почему\n// что выведет\nconsole.log(1);\n\nsetTimeout(function() {\n  console.log(2)\n})\n\nPromise.resolve(3).then(console.log)\n\nconsole.log(1);\n\nsetTimeout(function() {\n  console.log(5)\n}, 0)\n\nconsole.log(6);\n2. Что выйдет в консоль лог в каком порядке и почему\n// что выведет\nconsole.log(1);\n\nsetTimeout(function() {\n  console.log(2)\n})\n\nPromise.resolve(3).then(console.log)\n\nconsole.log(1);\n\nsetTimeout(function() {\n  console.log(5)\n}, 0)\n\nconst pr = new Promise(resolve => {\n  console.log('foo')\n\n  setTimeout(() => {\n     console.log('bar')\n     resolve()\n  })\n})\n\nconsole.log(6);\n3. Что выйдет в консоль лог и почему, какими способами мы можем пофиксить\n// что произойдет\nconst foo1 = () => {\n  console.log('foo1')\n  \n  return Promise.resolve().then(foo1)\n}\n\nfoo1()\nconst foo2 = () => {\n  console.log('foo1')\n  \n  setTimeout(foo2)\n}\n\nfoo2()\n3. В каком порядке выведутся консоль логи, почему. На каком элементе будет фокус при первом рендере\nimport React, { useEffect, useRef, forwardRef } from 'react';\n\nconst Child2 = forwardRef((props, ref) => {\n  useEffect(() => {\n    console.log('4');\n  }, [ref]);\n\n  return (\n    <div>\n      <input type=\"text\" />\n      <button ref={ref}>Click Me</button>\n    </div>\n  );\n});\n\nconst Child1 = () => {\n  const buttonRef = useRef(null);\n\n  useEffect(() => {\n    console.log('3');\n    // Устанавливаем фокус на кнопку\n    if (buttonRef.current) {\n      buttonRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <div>\n      <Child2 ref={buttonRef} />\n    </div>\n  );\n};\n\nconst Parent = () => {\n  useEffect(() => {\n    console.log('2');\n  }, []);\n\n  return (\n    <div>\n      <Child1 />\n    </div>\n  );\n};\n\nconst App = () => {\n  useEffect(() => {\n    console.log('1');\n  }, []);\n\n  return (\n    <div>\n      <Parent />\n    </div>\n  );\n};\n\nexport default App;\n5. Аналогичная задача https://t.me/c/2071074234/489/50951"
      },
      {
        "timestamp": "2024-09-26 17:02:00",
        "content": "2024-09-26 17:02:00\n Dispersioned -> 2071074234:\nТ-Банк (Тинькофф) 4 этап (фит с командой) команда без названия\nкоманда делает по сути headless ui SDK со своими наворотами и DI, нужно писать много тестов на playwright и помогать продуктовым командам фиксить баги этого SDK\nЗП: >320net\nУспех: Не пойду к ним ⚠️, хуйня какая-то\nФидбек: ???",
        "full_content": "2024-09-26 17:02:00\n Dispersioned -> 2071074234:\nТ-Банк (Тинькофф) 4 этап (фит с командой) команда без названия\nкоманда делает по сути headless ui SDK со своими наворотами и DI, нужно писать много тестов на playwright и помогать продуктовым командам фиксить баги этого SDK\nЗП: >320net\nУспех: Не пойду к ним ⚠️, хуйня какая-то\nФидбек: ???"
      },
      {
        "timestamp": "2024-09-26 11:45:06",
        "content": "2024-09-26 11:45:06\n Dispersioned -> 2071074234:\nТ-Банк (Тинькофф) 4 этап (фит с командой)\nОписание продукта Statist.Events\nДля дата аналитиков Tinkoff group, у которых есть потребность в каталогизации, поиске и управлении событиями, Statist Events это продукт, который является витриной и центром управления событиями, позволяющий повысить качество и эффективность использования данных. Statist Events \nСсылка на вакансию: утеряна\nЗП: >320net\nВопросы: рассказать о себе\nУспех собеса: Отказался ⚠️ та...",
        "full_content": "2024-09-26 11:45:06\n Dispersioned -> 2071074234:\nТ-Банк (Тинькофф) 4 этап (фит с командой)\nОписание продукта Statist.Events\nДля дата аналитиков Tinkoff group, у которых есть потребность в каталогизации, поиске и управлении событиями, Statist Events это продукт, который является витриной и центром управления событиями, позволяющий повысить качество и эффективность использования данных. Statist Events \nСсылка на вакансию: утеряна\nЗП: >320net\nВопросы: рассказать о себе\nУспех собеса: Отказался ⚠️ так как ищут фуллстака и надо регулярно лазать в бэк на ноде, буду собеситься в другую команду\nФидбек ???"
      },
      {
        "timestamp": "2024-09-24 11:25:28",
        "content": "2024-09-24 11:25:28\n Dispersioned -> 2071074234:\nТ-Банк (Тинькофф) 3 этап (архитектура)\nСсылка на вакансию: утеряна\nЗП: > 320net\nЗадача: проектируем мессенджер, 1 в 1 как тут https://t.me/c/2071074234/489/5027\nЗапись: прикладываю, вместе с главным что рисовали\nУспех собеса: Успешно ✅ \nФидбек:\nМаксим, привет \nКак и всегда, ты отлично прошел секцию \nПередаю немного рекомендаций: \n\nПривет! Ты отлично справился с заданием! Из личных советов могу подсказать, что для менее сумбурного результата в схем...",
        "full_content": "2024-09-24 11:25:28\n Dispersioned -> 2071074234:\nТ-Банк (Тинькофф) 3 этап (архитектура)\nСсылка на вакансию: утеряна\nЗП: > 320net\nЗадача: проектируем мессенджер, 1 в 1 как тут https://t.me/c/2071074234/489/5027\nЗапись: прикладываю, вместе с главным что рисовали\nУспех собеса: Успешно ✅ \nФидбек:\nМаксим, привет \nКак и всегда, ты отлично прошел секцию \nПередаю немного рекомендаций: \n\nПривет! Ты отлично справился с заданием! Из личных советов могу подсказать, что для менее сумбурного результата в схемах, стоит больше внимания уделять данным(домену) с которыми работаешь. Так же, для более комфортного проектирования можно было спросить конкретные цифры по нефункциональным требованиям.\n\nДля проектирования - https://c4model.com/\nПро безопасность - https://owasp.org/www-project-top-ten/"
      },
      {
        "timestamp": "2024-09-23 09:11:06",
        "content": "2024-09-23 09:11:06\n Dispersioned -> 2071074234:\nТ-Банк (Тинькофф) 2 этап (агоритмы)\nСсылка на вакансию: утеряна\nЗП: >320net\n\nЗадачи:\n1. Задача скорее с codewars 4-5q, нежели leetcode. \nЕсть двумерный массив, который заполнен целыми интами 1,2,3... как панель домофона (слева направо, сверху вниз). \nНа вход функции подаётся массив интов (пароль к домофону), которые есть в вышеописанном двумерном массиве. нужно определить за сколько ходов по нему можно пройти по всем числам в пароле.\nРешение:\nfunc...",
        "full_content": "2024-09-23 09:11:06\n Dispersioned -> 2071074234:\nТ-Банк (Тинькофф) 2 этап (агоритмы)\nСсылка на вакансию: утеряна\nЗП: >320net\n\nЗадачи:\n1. Задача скорее с codewars 4-5q, нежели leetcode. \nЕсть двумерный массив, который заполнен целыми интами 1,2,3... как панель домофона (слева направо, сверху вниз). \nНа вход функции подаётся массив интов (пароль к домофону), которые есть в вышеописанном двумерном массиве. нужно определить за сколько ходов по нему можно пройти по всем числам в пароле.\nРешение:\nfunction minMoves(lock, password) {\n  const rows = lock.length; // количество строк\n  const cols = lock[0].length; // количество столбцов\n\n  // Функция для преобразования числа в координаты (row, col)\n  function getCoordinates(num) {\n    const row = Math.floor((num - 1) / cols);\n    const col = (num - 1) % cols;\n    return { row, col };\n  }\n\n  let moves = 0;\n\n  // Проходим по каждому числу в пароле\n  for (let i = 1; i < password.length; i++) {\n    const start = getCoordinates(password[i - 1]);\n    const end = getCoordinates(password[i]);\n\n    // Рассчитываем разницу по строкам и столбцам\n    const rowDiff = Math.abs(start.row - end.row);\n    const colDiff = Math.abs(start.col - end.col);\n\n    // Количество движений равно максимальной разнице\n    moves += Math.max(rowDiff, colDiff);\n  }\n\n  return moves;\n}\n\n// Пример использования\nconst lock = [\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9, 10, 11, 12]\n];\n\nconst password = [1, 9, 3, 7];\nconsole.log(minMoves(lock, password)); // Выведет 5\n\n2. Задача с leetcode, вроде эта: 904 Fruit Into Baskets https://leetcode.com/problems/fruit-into-baskets/description. Дан массив целочисленных интов. Нужно найти такой подмассив, что: сумма элементов в нём максимальная, уникальных чисел в подмассиве не более 2\nЗапись: -\nУспех собеса: Успешно ✅ позвали на архитектурное интервью \nФидбек: \nПривет, как и в прошлый раз ты отлично справился с секцией"
      },
      {
        "timestamp": "2024-09-19 13:39:13",
        "content": "2024-09-19 13:39:13\n Dispersioned -> 2071074234:\nТинькофф / Т-Банк 1 этап (vanilla js + react)\nСсылка на вакансию: утеряна\nЗП: >320net\n\nЗадачи:\n1. event emitter\n2. promise any\n3. deepCopy\n4. Анализ перерендеров и их оптимизация\n5. Написать небольшое приложение по апи Рика и Морти. Отображать список персов, поиск по имени, пагинацию, состояние ошибки и загрузки\n\nВопросы: Теории не было, сразу перешли к задачам\nЗапись: нет\nУспех собеса: успешно, позвали на 2 этап ✅\nФидбек: скриншот",
        "full_content": "2024-09-19 13:39:13\n Dispersioned -> 2071074234:\nТинькофф / Т-Банк 1 этап (vanilla js + react)\nСсылка на вакансию: утеряна\nЗП: >320net\n\nЗадачи:\n1. event emitter\n2. promise any\n3. deepCopy\n4. Анализ перерендеров и их оптимизация\n5. Написать небольшое приложение по апи Рика и Морти. Отображать список персов, поиск по имени, пагинацию, состояние ошибки и загрузки\n\nВопросы: Теории не было, сразу перешли к задачам\nЗапись: нет\nУспех собеса: успешно, позвали на 2 этап ✅\nФидбек: скриншот"
      },
      {
        "timestamp": "2024-09-02 20:38:16",
        "content": "2024-09-02 20:38:16\n Евгений Лямин -> 2071074234:\n— Т-Банк 3 этап Архитектура\n— hr написал\n— 250-280 просил\n— фидбек: \nКак проектировать верхнеуровневый дизайн системы - https://c4model.com/\nМожно почитать дополнительно про load balancing (не совсем корректно был использован в решении) - https://www.nginx.com/resources/glossary/load-balancing/\nТакже старайся не забывать и про НФТ, вот System Design с примерами - [https://github.com/karanpratapsingh/system-designВаши](https://github.com/karanprat...",
        "full_content": "2024-09-02 20:38:16\n Евгений Лямин -> 2071074234:\n— Т-Банк 3 этап Архитектура\n— hr написал\n— 250-280 просил\n— фидбек: \nКак проектировать верхнеуровневый дизайн системы - https://c4model.com/\nМожно почитать дополнительно про load balancing (не совсем корректно был использован в решении) - https://www.nginx.com/resources/glossary/load-balancing/\nТакже старайся не забывать и про НФТ, вот System Design с примерами - [https://github.com/karanpratapsingh/system-designВаши](https://github.com/karanpratapsingh/system-design%D0%92%D0%B0%D1%88%D0%B8) рекомендации\n\n— видео: https://youtu.be/ujGBQDnWSF0"
      },
      {
        "timestamp": "2024-08-29 15:57:43",
        "content": "2024-08-29 15:57:43\n Евгений Лямин -> 2071074234:\n— Т-Банк 2 этап Алгоритмы\n— hr написал\n— 250-280 просил\n— фидбек: \n\nОт интервьюера: \"Хорошо решаешь задачи, видно подход к анализу условия\nСтоит немного подтянуть теорию в части оценки сложности, оцениваешь не очень уверенно.\n\nPS. По последней задаче контрпример: [2, 4, 12, 8, 10, 6, 14, 16] - твое решение выдает [1,6], правильно [2,5]\"\n\n— Задачи:\n1.Нужно написать функцию, которая проверяет является строка подпоследовательностью названия файла\nfu...",
        "full_content": "2024-08-29 15:57:43\n Евгений Лямин -> 2071074234:\n— Т-Банк 2 этап Алгоритмы\n— hr написал\n— 250-280 просил\n— фидбек: \n\nОт интервьюера: \"Хорошо решаешь задачи, видно подход к анализу условия\nСтоит немного подтянуть теорию в части оценки сложности, оцениваешь не очень уверенно.\n\nPS. По последней задаче контрпример: [2, 4, 12, 8, 10, 6, 14, 16] - твое решение выдает [1,6], правильно [2,5]\"\n\n— Задачи:\n1.Нужно написать функцию, которая проверяет является строка подпоследовательностью названия файла\nfunction IDESearch(search, full) {\n  // Инициализируем два указателя для строки поиска и полного названия файла\n  let searchIndex = 0;\n  let fullIndex = 0;\n\n  // Проходим по всей строке полного названия файла\n  while (fullIndex < full.length) {\n    // Если текущий символ совпадает с символом в строке поиска\n    if (full[fullIndex] === search[searchIndex]) {\n      searchIndex++; // Двигаемся к следующему символу в строке поиска\n    }\n    // Двигаемся к следующему символу в полном названии файла\n    fullIndex++;\n\n    // Если указатель строки поиска достиг конца, это значит, что все символы найдены в правильном порядке\n    if (searchIndex === search.length) {\n      return true; // Подпоследовательность найдена\n    }\n  }\n\n  // Если мы не нашли всю строку поиска, возвращаем false\n  return false;\n}\n\n// Примеры вызовов функции\nconsole.log(IDESearch(\"crdle\", \"crocodile.txt\")); // true\nconsole.log(IDESearch(\"le\", \"crocodile.txt\"));    // true\nconsole.log(IDESearch(\"el\", \"crocodile.txt\"));    // false\nconsole.log(IDESearch(\"coco\", \"crocodile.txt\"));  // true\nconsole.log(IDESearch(\"crdleee\", \"crocodile.txt\")); // false\nconsole.log(IDESearch(\"crkdl\", \"crocodile.txt\")); // false\n\n\n2.найти индексы самого длинного неотсортированого подмассива\nfunction getShortestUnsortedSubarray(nums) {\n    let numsLength = nums.length\n    let left = 0, right = numsLength - 1;\n    const subArray = nums.slice(left, right + 1)\n    let minSubArray = Math.min(...subArray)\n    let maxSubArray = Math.max(...subArray)\n\n    while (left < numsLength - 1 && nums[left] <= nums[left + 1]) {\n        left++;\n    }\n\n    if (left === numsLength - 1) {\n        return []\n    }\n\n    if (right > 0 && nums[right] >= nums[right - 1]) {\n        right--\n    }\n\n    while (right < numsLength - 1 && nums[right + 1] < maxSubArray) {\n        right++\n    }\n\n    while (left > 0 && nums[left - 1] > minSubArray) {\n        left--\n    }\n\n    return [left, right];\n}"
      },
      {
        "timestamp": "2024-08-27 07:39:29",
        "content": "2024-08-27 07:39:29\n Alexander -> 2071074234:\n– Название: Тинькофф / Т-банк (алгоритмический этап)\n– Вопросы: \nДве алгоритмические задачи\nПервая two sum\nВторая find all numbers disappeared in an array\n(не совсем они, но чрезмерно похожие)\nОбе литкодовские",
        "full_content": "2024-08-27 07:39:29\n Alexander -> 2071074234:\n– Название: Тинькофф / Т-банк (алгоритмический этап)\n– Вопросы: \nДве алгоритмические задачи\nПервая two sum\nВторая find all numbers disappeared in an array\n(не совсем они, но чрезмерно похожие)\nОбе литкодовские"
      },
      {
        "timestamp": "2024-06-14 07:15:06",
        "content": "2024-06-14 07:15:06\n Andrei Chirkov -> 2071074234:\nТинькофф, Тех. собес\n- Вакансия: по реферальной ссылке\n- ЗП: 270+\n- Успех собеса: Нет\n\nНаписать просис эни и далее надо отрефакторить реакт код. Остальные задачи закрылись после завершения собеса\nЗадачи:\n\nfunction promiseAny(promises) {\n    return new Promise((resolve, reject) => {\n        let errors = [];\n        let rejectedCount = 0;\n\n        promises.forEach((promise, index) => {\n            Promise.resolve(promise)\n                .then(res...",
        "full_content": "2024-06-14 07:15:06\n Andrei Chirkov -> 2071074234:\nТинькофф, Тех. собес\n- Вакансия: по реферальной ссылке\n- ЗП: 270+\n- Успех собеса: Нет\n\nНаписать просис эни и далее надо отрефакторить реакт код. Остальные задачи закрылись после завершения собеса\nЗадачи:\n\nfunction promiseAny(promises) {\n    return new Promise((resolve, reject) => {\n        let errors = [];\n        let rejectedCount = 0;\n\n        promises.forEach((promise, index) => {\n            Promise.resolve(promise)\n                .then(resolve)\n                .catch((error) => {\n                    errors[index] = error;\n                    rejectedCount += 1;\n                    if (rejectedCount === promises.length) {\n                        reject(new AggregateError(errors, \"All promises were rejected\"));\n                    }\n                });\n        });\n    });\n}"
      },
      {
        "timestamp": "2024-02-07 15:53:47",
        "content": "2024-02-07 15:53:47\n )( -> 2071074234:\n- Название компании: Тинькофф[первый этап js и react]\n- Ссылка на вакансию: hr сам написал\n- ЗП: 220\n- Задачи максимально похожие как из видео. Вот то что было у меня\nhttps://docs.google.com/document/d/1S-UXFj4hQ3L9KrhojjRcafv0ecGFtY6eARJ8CyI4NB0/edit?usp=sharing\n- Успех собеса: -\n- Фидбек о собесе от HR: -",
        "full_content": "2024-02-07 15:53:47\n )( -> 2071074234:\n- Название компании: Тинькофф[первый этап js и react]\n- Ссылка на вакансию: hr сам написал\n- ЗП: 220\n- Задачи максимально похожие как из видео. Вот то что было у меня\nhttps://docs.google.com/document/d/1S-UXFj4hQ3L9KrhojjRcafv0ecGFtY6eARJ8CyI4NB0/edit?usp=sharing\n- Успех собеса: -\n- Фидбек о собесе от HR: -"
      },
      {
        "timestamp": "2024-02-05 19:39:22",
        "content": "2024-02-05 19:39:22\n Daniil Max -> 2071074234:\n— Название компании: Тинькофф [пятый этап, заключительный, знакомство с командой]\n— Ссылка на вакансию: утеряна \n— ЗП: 310~400к\n— Задачи: софтскиллы\nРассказали про проект;\nПопросили рассказать про себя;\nЗадавали вопросы про опыт;\nЯ задавал вопросы про их продукт;\n— Успех собеса: ❌\n— Фитбек от hr:\nВсем привет. В тинек по той команде реджект. \nДали по мне фитбек подробный команда. \n\nСказали сильные скиллы у него как в архитектуре, так и в софтскиллах....",
        "full_content": "2024-02-05 19:39:22\n Daniil Max -> 2071074234:\n— Название компании: Тинькофф [пятый этап, заключительный, знакомство с командой]\n— Ссылка на вакансию: утеряна \n— ЗП: 310~400к\n— Задачи: софтскиллы\nРассказали про проект;\nПопросили рассказать про себя;\nЗадавали вопросы про опыт;\nЯ задавал вопросы про их продукт;\n— Успех собеса: ❌\n— Фитбек от hr:\nВсем привет. В тинек по той команде реджект. \nДали по мне фитбек подробный команда. \n\nСказали сильные скиллы у него как в архитектуре, так и в софтскиллах. Интересуеся про бизнес и качественное решение задач. Короче, как спец огонь все, но... \n\nПомню, что hr сказала: \n1. Был в рубашке, как будто бы настраивает на не очень формальную обстановку. \n2. Вёл разговор деловым стилем и из-за этого как будто бы не очень в команде коммуницировать. \n3. Работал по скраму, а у нас не скрам, поэтому будет сложнее \n4. У нас много вёрстки, поэтому как будто бы не метч"
      },
      {
        "timestamp": "2024-01-31 19:11:39",
        "content": "2024-01-31 19:11:39\n Daniil Max -> 2071074234:\n— Название компании: тинькофф [четвертый этап, архитектура]\n— Ссылка на вакансию: hr сама написала \n— ЗП: 310-400к.\n— Задачи: архитектура\nЗапись на ютуб: https://youtu.be/vWOWWYEa37M?si=eJNRAC_G9XYAu-b5\n— Успех собеса: ✅️\n— Фитбек о собесе:\nДаниил, доброе утро!) Возвращаюсь с обратной связью. \nТы хорошо прошел интервью по Web-архитектуре, поздравляю! Отправила твою кандидатуру нанимающим менеджерам, жду ответа. И буду направлять тебя для знакомства ...",
        "full_content": "2024-01-31 19:11:39\n Daniil Max -> 2071074234:\n— Название компании: тинькофф [четвертый этап, архитектура]\n— Ссылка на вакансию: hr сама написала \n— ЗП: 310-400к.\n— Задачи: архитектура\nЗапись на ютуб: https://youtu.be/vWOWWYEa37M?si=eJNRAC_G9XYAu-b5\n— Успех собеса: ✅️\n— Фитбек о собесе:\nДаниил, доброе утро!) Возвращаюсь с обратной связью. \nТы хорошо прошел интервью по Web-архитектуре, поздравляю! Отправила твою кандидатуру нанимающим менеджерам, жду ответа. И буду направлять тебя для знакомства с командами.\n\nP.S. Интервьюер просил передать тебе развивающую обратную связь: \"Привет! На интервью мы построили Мессенджер. Ты хорошо справился с фронтовой архитектурой. Но есть часть моментов, которые я бы посоветовал тебе подтянуть:\n\nКакие бывают типы требований: Функциональные Требования (ФТ) и Нефункциональные (НФТ)\n\nCDN https://www.keycdn.com/support/how-does-a-cdn-work\n\nLoad balancing https://www.nginx.com/resources/glossary/load-balancing/\n\nРеляционные/Нереляционные БД\"\n\n#тинькофф"
      },
      {
        "timestamp": "2024-01-19 12:38:40",
        "content": "2024-01-19 12:38:40\n Daniil Max -> 2071074234:\n— Название компании: тинькофф [третий этап — программирование]\n— Ссылка на вакансию: hr сама написала \n— ЗП: 310-400к.\n— Задачи: лайвкодинг\n\n1. function getMax(str) {\n    let globalMax = 0;\n    for(let i = 0; i < str.length; i++) {\n        const set = new Set();\n        let max = 0;\n        for(let j = i; j < str.length; j++) {\n            if(!set.has(str[j])) {\n                set.add(str[j]);\n                max++;\n            }\n            else b...",
        "full_content": "2024-01-19 12:38:40\n Daniil Max -> 2071074234:\n— Название компании: тинькофф [третий этап — программирование]\n— Ссылка на вакансию: hr сама написала \n— ЗП: 310-400к.\n— Задачи: лайвкодинг\n\n1. function getMax(str) {\n    let globalMax = 0;\n    for(let i = 0; i < str.length; i++) {\n        const set = new Set();\n        let max = 0;\n        for(let j = i; j < str.length; j++) {\n            if(!set.has(str[j])) {\n                set.add(str[j]);\n                max++;\n            }\n            else break;\n        }\n        globalMax = Math.max(globalMax, max)\n    }\n    return globalMax;\n}\n\nconsole.log(getMax('abcdabcde'))\n\n2. function IDESearch(substring, filename) {\n  let index = 0;\n\n  for (let i = 0; i < filename.length; i++) {\n    if (filename[i] === substring[index]) {\n      index++;\n    }\n\n    if (index === substring.length) {\n      return true;\n    }\n  }\n\n  return false;\n}\n— Успех собеса: ✅️\n— Фитбек о собесе:\nСпасибо за проведенное время. Советую продолжать изучение структур данных и алгоритмов, изучить книги по этим темам и решать задачи на leetcode\"\nДалее, пойдем либо на архитектурную секцию, либо пойдем знакомиться с командами. Детали появятся в понедельник\n\n#тинькофф"
      },
      {
        "timestamp": "2024-01-13 08:27:53",
        "content": "2024-01-13 08:27:53\n Daniil Max -> 2071074234:\n— Название компании: Тинькофф\n— Ссылка на вакансию: hr сама написала\n— ЗП: 310~400К.\n— Задачи: лайвкодинг\n\nРеализовать EventEmitter\n\nclass EventEmitter {\n  constructor() {\n    // Хранилище для событий и их подписчиков\n    this.events = {};\n  }\n\n  // Метод для подписки на событие\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = [];\n    }\n\n    this.events[eventName].push(callback);\n\n    return this;\n  }\n\n  ...",
        "full_content": "2024-01-13 08:27:53\n Daniil Max -> 2071074234:\n— Название компании: Тинькофф\n— Ссылка на вакансию: hr сама написала\n— ЗП: 310~400К.\n— Задачи: лайвкодинг\n\nРеализовать EventEmitter\n\nclass EventEmitter {\n  constructor() {\n    // Хранилище для событий и их подписчиков\n    this.events = {};\n  }\n\n  // Метод для подписки на событие\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = [];\n    }\n\n    this.events[eventName].push(callback);\n\n    return this;\n  }\n\n  // Метод для отписки от события\n  off(eventName, callback) {\n    if (this.events[eventName]) {\n      this.events[eventName] = this.events[eventName].filter(cb => cb !== callback);\n    }\n    \n    return this.\n  }\n\n  // Метод для оповещения о событии\n  emit(eventName, data) {\n    if (this.events[eventName]) {\n      this.events[eventName].forEach(callback => callback(data));\n    }\n\n    return this.\n  }\n}\n\n// Пример использования\n\nconst cb = () => null;\n\n// Создаем экземпляр класса EventEmitter\nconst eventEmitter = new EventEmitter();\neventEmitter\n.on(‘test’, cb);\n.off(‘test’, cb)\n\nРеализовать Promise.any\n\n\nfunction promiseAny<T>(promises: Promise<T>[]): Promise<T> {\n  return new Promise((resolve, reject) => {\n    // Counter for tracking rejections\n    let rejectionCount = 0;\n    const errors: any[] = [];\n\n    promises.forEach((promise, index) => {\n      Promise.resolve(promise)\n        .then(resolve)\n        .catch(error => {\n          errors[index] = error;\n          rejectionCount++;\n          if (rejectionCount === promises.length) {\n            reject(errors);\n          }\n        });\n    });\n  });\n}\n\nБыла задачка на event loop\nЗадачка по реакт: вывести список героев, сделав запрос на бекенд, реализовать дебаунс для ипнута.\n— Успех собеса: ✅\n— Фитбек о собесе: прохожу дальше"
      },
      {
        "timestamp": "2024-01-09 07:58:53",
        "content": "2024-01-09 07:58:53\n Daniil Max -> 2071074234:\n— Название компании: Тинькофф [первый этап]\n— Ссылка на вакансию: ~\n— ЗП: 310К~400К, синьор\n— Вопросы: \n1. За функцией можно ли достать let var и const переменные, обьявленные в рамках функции? \n2. Как можно клонировать объект? \n3. Какой тип возвращает fetch\n4. == и ===, рассказать \n5. Что такое new Map? Что там может храниться \n6. Что по умолчанию возвращает функция? \n7. let и const\n8. bind и apply \n9. Что раньше выполнится промис или setTimeout?\n1...",
        "full_content": "2024-01-09 07:58:53\n Daniil Max -> 2071074234:\n— Название компании: Тинькофф [первый этап]\n— Ссылка на вакансию: ~\n— ЗП: 310К~400К, синьор\n— Вопросы: \n1. За функцией можно ли достать let var и const переменные, обьявленные в рамках функции? \n2. Как можно клонировать объект? \n3. Какой тип возвращает fetch\n4. == и ===, рассказать \n5. Что такое new Map? Что там может храниться \n6. Что по умолчанию возвращает функция? \n7. let и const\n8. bind и apply \n9. Что раньше выполнится промис или setTimeout?\n10. Что возвращает setTimeout и зачем он это возвращает?\n//... и ещё какие-то 5 вопросов"
      }
    ]
  },
  {
    "company": "Иннотех",
    "count": 24,
    "records": [
      {
        "timestamp": "2025-03-14 14:44:51",
        "content": "2025-03-14 14:44:51\n андрей -> 2071074234:\nКомпания: Иннотех ВТБ (забота о клиентах), Встреча с лидом\nНаписал HR\n\n1. О себе\n2. Бизнес блок и команда разработки- сколько человек было, \n3. Как ставились задачи\n4. Как осуществлялось долговременное планирование\n5. Планирование задач\n6. Как велась документация \n7. Причина поиска работы",
        "full_content": "2025-03-14 14:44:51\n андрей -> 2071074234:\nКомпания: Иннотех ВТБ (забота о клиентах), Встреча с лидом\nНаписал HR\n\n1. О себе\n2. Бизнес блок и команда разработки- сколько человек было, \n3. Как ставились задачи\n4. Как осуществлялось долговременное планирование\n5. Планирование задач\n6. Как велась документация \n7. Причина поиска работы"
      },
      {
        "timestamp": "2025-02-17 15:44:55",
        "content": "2025-02-17 15:44:55\n Wanderer -> 2071074234:\nКомпания: Иннотех (РКО ЮЛ)\nЗП: от 300 \nВакансия: Написала в ЛС\nВопросы: \n\nРасскажи о своем опыте?\nКакие хуки React знаешь?\nЧто такое Module Federation?\nModule Federation — это технология, введенная в Webpack 5, которая позволяет разделять код и загружать части приложения (модули) из разных источников или даже разных репозиториев, как если бы это был один монолитный проект. В контексте React она используется для интеграции разных React-приложений или и...",
        "full_content": "2025-02-17 15:44:55\n Wanderer -> 2071074234:\nКомпания: Иннотех (РКО ЮЛ)\nЗП: от 300 \nВакансия: Написала в ЛС\nВопросы: \n\nРасскажи о своем опыте?\nКакие хуки React знаешь?\nЧто такое Module Federation?\nModule Federation — это технология, введенная в Webpack 5, которая позволяет разделять код и загружать части приложения (модули) из разных источников или даже разных репозиториев, как если бы это был один монолитный проект. В контексте React она используется для интеграции разных React-приложений или их частей в одно целое.\n\nПрименение Module Federation в React позволяет разрабатывать микрофронтенды. Каждый микрофронтенд может быть самостоятельным приложением, которое при необходимости подключается и используется другим приложением. Это дает большую гибкость и позволяет командам работать независимо, ускоряя разработку.\n// Реализуй функцию createCounter(start, type, step), которая создаёт счетчик и возвращает функцию для последовательного изменения значения.\n// Параметры:\n// start (целое число, по умолчанию 0) — начальное значение счетчика.\n// type (строка, по умолчанию \"+\") — математическая операция (\"+\", \"-\", \"*\", \"/\").\n// step (целое число, по умолчанию 1) — величина изменения счетчика.\n// Функция должна:\n// Возвращать новую функцию, которая при каждом вызове изменяет start в соответствии с заданной операцией type и значением step.\n// Поддерживать операции сложения (\"+\"), вычитания (\"-\"), умножения (\"*\"), деления (\"/\").\n// Генерировать ошибку, если передан некорректный оператор.\n\n\nfunction createCounter(start = 0, type = '+', step = 1) {\n  return function () {\n    switch (type) {\n      case '+':\n        return start += step;\n      case '-':\n        return start -= step;\n      case '*':\n        return start *= step;\n      case '/':\n        return start /= step;\n      default:\n        throw new Error(\"Недопустимая операция. Используйте '+', '-', '*', '/'\");\n    }\n  };\n}\n\n// Примеры использования:\nconst counter1 = createCounter(3); // По умолчанию: type='+', step=1\nconsole.log(counter1()); // num === 4\n\nconst counter2 = createCounter(3, '-', 3);\nconsole.log(counter2()); // num_2 === 0\n\nconst counter3 = createCounter(3, '*', 3);\nconsole.log(counter3()); // num_3 === 9\n\n// 2. Дан древовидный список объектов, где каждый объект содержит:\n// value — строковое значение узла,\n// children — массив дочерних узлов (или null, если узел является листом).\n// Требуется написать функцию getPaths(items), которая вернёт массив всех возможных путей от корневых узлов до листьев. Каждый путь должен \n// представлять собой строку, в которой узлы соединены символом \" -> \"\n\nfunction getPaths(items, path = []) {\n    let result = [];\n\n    items.forEach(item => {\n        const newPath = [...path, item.value]; // Добавляем текущий узел в путь\n\n        if (item.children) {\n            // Рекурсивно обходим дочерние элементы\n            result.push(...getPaths(item.children, newPath));\n        } else {\n            // Если детей нет, добавляем путь в результат\n            result.push(newPath.join(' -> '));\n        }\n    });\n\n    return result;\n}\n\n// Исходный массив\nvar clothes = [\n    { value: 'Головной убор', children: [{ value: 'Шапка', children: null }, { value: 'Кепка', children: null }] },\n    { value: 'Одежда', children: [{ value: 'Верхняя одежда', children: [{ value: 'Ветровка', children: null }] }, { value: 'Джинсы', children: null }, { value: 'Брюки', children: null }] },\n    { value: 'Обувь', children: [{ value: 'Кроссовки', children: [{ value: 'Беговые кроссовки', children: [{ value: 'some deep item', children: null }] }] }, { value: 'Ботинки', children: null }] }\n];\n\n// Запуск функции и вывод результата\nconsole.log(getPaths(clothes).join('\\n'));"
      },
      {
        "timestamp": "2025-02-11 13:22:41",
        "content": "2025-02-11 13:22:41\n alzor -> 2071074234:\nКомпания: Иннотех\nСсылка на вакансию: Написала HR\nЗП: от 250к\nСобеседующий сказал шарить весь экран.\nВопросы:\n1) Какие хуки реакта знаешь?\n2) Какие утилитарные типы в TS ты знаешь и что они делают?\n3) С какими сборщиками работал? Webpack или Vite?\n4) Какую проблему решают сборщики?\n5) Module Federation это встроеный в Webpack функционал?\nЗадача: 1. Нужно создать кастомный компонент Tree, который отображает данные из различных объектов(Данные 1, Данные 2)...",
        "full_content": "2025-02-11 13:22:41\n alzor -> 2071074234:\nКомпания: Иннотех\nСсылка на вакансию: Написала HR\nЗП: от 250к\nСобеседующий сказал шарить весь экран.\nВопросы:\n1) Какие хуки реакта знаешь?\n2) Какие утилитарные типы в TS ты знаешь и что они делают?\n3) С какими сборщиками работал? Webpack или Vite?\n4) Какую проблему решают сборщики?\n5) Module Federation это встроеный в Webpack функционал?\nЗадача: 1. Нужно создать кастомный компонент Tree, который отображает данные из различных объектов(Данные 1, Данные 2), вывод должен быть с соблюдением иерархии. Все типизировать.\n\nРешение задачи 1:\n\ntype TreeNode<T> = {\n  children?: TreeNode<T>[];\n} & T;\n\ntype TreeProps<T> = {\n  data: TreeNode<T>;\n  getValue: (node: T) => number;\n  getTitle: (node: T) => string;\n};\n\nfunction Tree<T>({ data, getValue, getTitle }: TreeProps<T>) {\n  return (\n    <ul>\n      <li>\n        {getValue(data)} - {getTitle(data)}\n        {data.children && (\n          <ul>\n            {data.children.map((child, index) => (\n              <Tree\n                key={index}\n                data={child}\n                getValue={getValue}\n                getTitle={getTitle}\n              />\n            ))}\n          </ul>\n        )}\n      </li>\n    </ul>\n  );\n}\n\nconst data1 = {\n  value: 10,\n  comment: \"wtf\",\n  children: [\n    {\n      value: 15,\n      comment: \"sdsdfsdf\",\n    },\n    {\n      value: 20,\n      comment: \"plfgblmfgbm;\",\n      children: [\n        {\n          value: 25,\n          comment: \"123123123\",\n        },\n      ],\n    },\n  ],\n};\n\nconst data2 = {\n  title: 10,\n  description: \"wtf\",\n  children: [\n    {\n      title: 15,\n      description: \"sdsdfsdf\",\n    },\n    {\n      title: 20,\n      description: \"plfgblmfgbm;\",\n      children: [\n        {\n          title: 25,\n          description: \"123123123\",\n        },\n      ],\n    },\n  ],\n};\n\nexport default function App() {\n  return (\n    <div>\n      <h2>Tree with Data 1</h2>\n      <Tree\n        data={data1}\n        getValue={(node) => node.value}\n        getTitle={(node) => node.comment}\n      />\n  );\n}\n\nЗадача 2. Нужно найти варианты сброса стейта при нажатии на Next player!\nРешение: 1) Прокинуть key в каждый Counter 2) Завести state под каждый Counter\n\nexport default function Scoreboard() {\n  const [isPlayerA, setIsPlayerA] = useState(true);\n  return (\n    <div>\n      {isPlayerA ? (\n        <Counter person=\"Taylor\" />\n      ) : (\n        <Counter person=\"Sarah\" />\n      )}\n      <button onClick={() => {\n        setIsPlayerA(!isPlayerA);\n      }}>\n        Next player!\n      </button>\n    </div>\n  );\n}\n\nfunction Counter({ person }) {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{person}'s score: {score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}\n\nЗадача 3.Типизировать функцию fn. На вход поступает объект data и функция getValue. Возвращаемый тип функции fn должен быть ограничен типами ключей передаваемого объекта data\n\ntype Data = {\n  title: string;\n  desc: string;\n  num: number;\n  isVisible: boolean;\n};\ntype Fn = <K extends keyof Data>(params: { data: Data; getValue: (data: Data) => Data[K] }) => Data[K];\n\nconst fn: Fn = ({ data, getValue }) => {\n  return getValue(data);\n};\n\nconst data = {\n  title: 'title',\n  desc: 'desc',\n  num: 5,\n  isVisible: true,\n};\n\nconst result = fn({ data, getValue: node => node.num });\nconsole.log(result); // 5\n\n\nЗадача 4. \nЗадачка на подумать, как архитектурно мог решить эту проблему.\nПришел аналитик и ставит задачу, можно воспользоваться чисто реализацие на фронте или при взаимодействии с беком. Нужно реализовать в интерфейсе кнопку по клику на которую нам необходимо выгрузить отчет(excel, pdf). \nКлючевые проблемы: мы не знаем сколько времени формируется отчет и на сколько он тяжеловeсный.\nРешение: 1) Возможно использовать webworkers на фронтовой части 2) Реализовать LongPooling 3) Использовать WebSockets"
      },
      {
        "timestamp": "2025-01-22 10:39:22",
        "content": "2025-01-22 10:39:22\n Wanderer -> 2071074234:\nКомпания: Иннотех (СОПИБ) \nВакансия описание: Написали в ТГ\nЗП: от 300к\nВопросы: \n- Расскажите про свой опыт, какие проекты, какой флоу. \nДополнительно: Лучше потренироваться порешать задачи на кастомные хуки если кого пригласили. Говорили что на проекте много самописных хуков. \n\nfunction debounce(func, delay) {\n  let timeoutId = null;\n\n  return function (...args) {\n    if (timeoutId) {\n      clearTimeout(timeoutId); // Очистка предыдущего таймера\n   ...",
        "full_content": "2025-01-22 10:39:22\n Wanderer -> 2071074234:\nКомпания: Иннотех (СОПИБ) \nВакансия описание: Написали в ТГ\nЗП: от 300к\nВопросы: \n- Расскажите про свой опыт, какие проекты, какой флоу. \nДополнительно: Лучше потренироваться порешать задачи на кастомные хуки если кого пригласили. Говорили что на проекте много самописных хуков. \n\nfunction debounce(func, delay) {\n  let timeoutId = null;\n\n  return function (...args) {\n    if (timeoutId) {\n      clearTimeout(timeoutId); // Очистка предыдущего таймера\n    }\n    timeoutId = setTimeout(() => {\n      func.apply(this, args); // Вызов функции с сохранением контекста\n    }, delay);\n  };\n}\n\nimport React, { useState, useEffect, useRef } from 'react';\n\n// Кастомный хук для хранения предыдущего значения\nconst usePrevValue = (value) => {\n  const ref = useRef(); // Создаем ref для хранения предыдущего значения\n\n  useEffect(() => {\n    ref.current = value; // Обновляем ref на каждом рендере\n  }, [value]); // Следим за изменением value\n\n  return ref.current; // Возвращаем предыдущее значение\n};\n\n// Функция для логирования значения с дебаунсом\nconst fakeLogger = (value) => {\n  console.log(\"Logger: \", value); // Логируем значение в консоль\n};\n\nexport default function App() {\n  const [counter, setCounter] = useState(0); // Состояние счетчика\n  const prevCounter = usePrevValue(counter); // Используем кастомный хук для получения предыдущего значения\n\n  // Функция для увеличения счетчика\n  const increment = () => {\n    setCounter((prev) => prev + 1); // Увеличиваем значение счетчика на 1\n  };\n\n  // Логирование значения с дебаунсом\n  useEffect(() => {\n    const debounce = setTimeout(() => {\n      fakeLogger(counter);\n    }, 300); // Устанавливаем задержку в 300 мс\n\n    return () => clearTimeout(debounce); // Очищаем таймер при размонтировании или изменении\n  }, [counter]);\n\n  return (\n    <div className=\"App\">\n      <h1>Счетчик с предыдущим значением</h1>\n      <p>Текущее значение: {counter}</p>\n      <p>Предыдущее значение: {prevCounter}</p>\n      <button onClick={increment}>Увеличить</button> {/* Кнопка увеличения значения */}\n    </div>\n  );\n}"
      },
      {
        "timestamp": "2025-01-18 05:58:27",
        "content": "2025-01-18 05:58:27\n Egor -> 2071074234:\nКомпания: Иннотех(документарный бизнес)\nСсылка на вакансию: закрыли\nЗп: от 330к\nЗадачи: \n1. Что выведется в консоль при монтировании и повторном ререндере\nconst Component1 = () => {\n   /* console.log('Component1') */;\n\n  React.useEffect(() => {\n     /* console.log('Component1 useEffect') */;\n\n    return () => {\n       /* console.log('Component1 useEffect return') */;\n    }\n  }, []);\n\n  return <p>'Component 1'</p>;\n}\n\nconst Component2 = () => {\n   /* conso...",
        "full_content": "2025-01-18 05:58:27\n Egor -> 2071074234:\nКомпания: Иннотех(документарный бизнес)\nСсылка на вакансию: закрыли\nЗп: от 330к\nЗадачи: \n1. Что выведется в консоль при монтировании и повторном ререндере\nconst Component1 = () => {\n   /* console.log('Component1') */;\n\n  React.useEffect(() => {\n     /* console.log('Component1 useEffect') */;\n\n    return () => {\n       /* console.log('Component1 useEffect return') */;\n    }\n  }, []);\n\n  return <p>'Component 1'</p>;\n}\n\nconst Component2 = () => {\n   /* console.log('Component2') */;\n\n  React.useEffect(() => {\n     /* console.log('Component2 useEffect') */;\n\n    return () => {\n       /* console.log('Component2 useEffect return') */;\n    }\n  });\n\n  return <p>'Component 2'</p>;\n}\n\nconst Component3 = () => {\n   /* console.log('Component3') */;\n\n  React.useLayoutEffect(() => {\n     /* console.log('Component3 useLayoutEffect') */;\n\n    return () => {\n       /* console.log('Component3 useLayoutEffect return') */;\n    }\n  });\n\n  return <p>'Component 3'</p>;\n}\n\nfunction App() {\n\n  React.useEffect(() => {\n     /* console.log('useEffect App') */;\n  });\n\n  const [count, setCount] = React.useState(() => {\n     /* console.log('useState') */;\n\n    return 0;\n  });\n\n  return (\n    <div className=\"App\">\n      <button ref={(ref) => {\n        /* console.log('setRef') */;\n         }} onClick={() => setCount(prev => prev + 1)}>+</button>\n      <Component1 />\n      <Component2 />\n      <Component3 />\n\n      {count}\n      <h1>Hello CodeSandbox</h1>\n      <h2>Start editing to see some magic happen!</h2>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.querySelector(\"#app\"))\n2. В каком порядке будет исполнен код?\nconst RENDER_WATCH_NUMBER = 4;\n\n// Task #5 \"Работа Event Loop. В каком порядке будет исполнен код?\"\n\n// В среднем 800мс\nfunction slowFunc() {\n  const startTime = performance.now();\n\n  for (let i = 0; i < 16e8; i++) {}\n\n  const endTime = performance.now();\n\n  console.log(`slowFunc is executed for ${endTime - startTime}ms`);\n}\n\nfunction func1() {\n  /* console.log('func1') */;\n\n  new Promise(function(resolve) {\n    resolve('func1 Promise 1');\n  }).then(result => {\n    /* console.log(result) */;\n  });\n\n  new Promise(function(resolve) {\n    resolve('func1 Promise 2');\n  }).then(result => {\n    /* console.log(result) */;\n  });\n\n  setTimeout(function() {\n    new Promise(function(resolve) {\n      resolve('func1 setTimeout 1 Promise 1');\n    }).then(result => {\n      /* console.log(result) */;\n    });\n\n    new Promise(function(resolve) {\n      resolve('func1 setTimeout 1 Promise 2');\n    }).then(result => {\n      /* console.log(result) */;\n    });\n\n    new Promise(function(resolve) {\n      resolve('func1 setTimeout 1 Promise 3');\n    }).then(result => {\n      /* console.log(result) */;\n    });\n\n    /* console.log('func1 setTimeout 1') */;\n\n    slowFunc();\n  }, 0);\n\n  setTimeout(function() {\n    new Promise(function(resolve) {\n      resolve('func1 setTimeout 2 Promise');\n    }).then(result => {\n      /* console.log(result) */;\n    });\n\n    /* console.log('func1 setTimeout 2') */;\n\n    slowFunc();\n  }, 0);\n}\n\nfunction func2() {\n  /* console.log('func2') */;\n}\n\nfunction func3() {\n  /* console.log('func3') */;\n\n  setTimeout(function() {\n    /* console.log('func3 setTimeout') */;\n  }, 0);\n\n  new Promise(function(resolve) {\n    resolve('func3 Promise');\n  }).then(result => {\n    /* console.log(result) */;\n  });\n}\n\nfunction watchRerender() {\n  let count = 0;\n  let start;\n\n  const draw = (timeStamp) => {\n    if (start !== undefined) {\n      console.log(`render for ${performance.now() - start} ms`);\n    }\n\n    start = performance.now();\n\n\n    if (count < RENDER_WATCH_NUMBER) {\n      count++\n      requestAnimationFrame(draw)\n    }\n\n  }\n\n  draw(0);\n}\n\nfunction main() {\n  console.log('main');\n\n  func3();\n  func2();\n  func1();\n}\n\nwatchRerender();\nmain();\n\nrequestIdleCallback(() => {\n  /* console.log('IdleCallback') */\n})\nВопросы: \n1. Прошелся по резюме, спрашивал по пунктам достижений\n2. Объяснить последние 2 принципа solid\n3. Как event loop работает\n4. Что такое портал, как происходит взаимодействие с виртуал дом"
      },
      {
        "timestamp": "2024-12-20 09:02:10",
        "content": "2024-12-20 09:02:10\n Egor -> 2071074234:\nКомпания: Иннотех \nСсылка на вакансию: https://hh.ru/vacancy/112587662?hhtmFrom=chat\nЗп: от 330\nЗапись: https://youtu.be/Hb0YQRCXy4c",
        "full_content": "2024-12-20 09:02:10\n Egor -> 2071074234:\nКомпания: Иннотех \nСсылка на вакансию: https://hh.ru/vacancy/112587662?hhtmFrom=chat\nЗп: от 330\nЗапись: https://youtu.be/Hb0YQRCXy4c"
      },
      {
        "timestamp": "2024-11-28 21:01:02",
        "content": "2024-11-28 21:01:02\n Андрей -> 2071074234:\nКомпания: Иннотех\nВакансия: - \nЗп: не обсуждали\nВопросы за опыт, рассказать про методы промисов, ф-ии генераторы, как избежать утечек памяти и перешли к задачкам: \nconst freezeObjects = (obj) => {\n\n  for (let key in obj) {\n    if (typeof obj[key] === 'object') {\n      freezeObjects(obj[key])\n    }\n  }\n\n  return Object.freeze(obj)\n}\n\n\nconst maxNum = (arr) => Math.max(...arr)\n\n// напиши тип для функции, с одним дженериком. Если дженерик является строкой, ...",
        "full_content": "2024-11-28 21:01:02\n Андрей -> 2071074234:\nКомпания: Иннотех\nВакансия: - \nЗп: не обсуждали\nВопросы за опыт, рассказать про методы промисов, ф-ии генераторы, как избежать утечек памяти и перешли к задачкам: \nconst freezeObjects = (obj) => {\n\n  for (let key in obj) {\n    if (typeof obj[key] === 'object') {\n      freezeObjects(obj[key])\n    }\n  }\n\n  return Object.freeze(obj)\n}\n\n\nconst maxNum = (arr) => Math.max(...arr)\n\n// напиши тип для функции, с одним дженериком. Если дженерик является строкой, то тип представляет собой функцию с любым количеством параметров, возвращающую эту строку. \n// Для любого другого типа дженерика - функцию с одним числовым параметром, которая возвращает число\n// f.e. const stringFn: Func<'str'> = (a: number, b: string) => 'str'\n// f.e. const otherFn: Func = (a: number) => number\n\ntype Func<T = unknown> = T extends string ? (...args: any[]) => T : (a: number) => number\n\nconst arr: Array<string> = ['a', 'b']\n\ntype inferArrayVal<T> = T extends Array<infer V> ? V : never\n\ntype arrVal = inferArrayVal<typeof arr>\n\ntype A = {\n    field1: string\n    kind: kind.A\n}\n\ntype B = {\n    field3: string\n    field4: string\n    kind: kind.B\n}\n\ntype C = A | B\n\nenum kind {\n    A = 'A',\n    B = 'B'\n}\n\nfunction add(arg: C) {\n    switch (arg.kind) {\n        case kind.A:\n            \n            break;\n    \n        default:\n            break;\n    }\n}\n// Прокомментировать код, как улучшить\nconst MainComponent = (props) => {\n    const [searchValue, setSearchValue] = useState('')\n    \n    return <div>\n    <input value={searchValue} onChange={setSearchValue(e.target.value)}/>\n    <SomeExpensiveComponent/>\n    </div>\n    \n    \n    }"
      },
      {
        "timestamp": "2024-11-28 10:45:05",
        "content": "2024-11-28 10:45:05\n Андрей -> 2071074234:\nКомпания: Иннотех\nВакансия: https://hh.ru/vacancy/110256354\nЗП: не обсуждали\nВопросы:\n\nнууужно ннннааааппиииисссааатттттььь фуууннкккцццииию которая нннаааа вввххходдд прррииинниааеет эээту ссстрроку и воозвратттит еёёё ббббеееззз лллиииишшшнннееееггггооо дуббблиррроовааннния бббуккккв\n\n===\n\nvar a = { foo: 10 };\nvar b = a;\nb.foo = 20;\nconsole.log(a);\n\nlet a = { foo: 10 };\nconst b = a;\nb.foo = 20;\nconsole.log(a);\n\nvar a = [1,2,3];\nlet c = a;\ncont b = c;\n...",
        "full_content": "2024-11-28 10:45:05\n Андрей -> 2071074234:\nКомпания: Иннотех\nВакансия: https://hh.ru/vacancy/110256354\nЗП: не обсуждали\nВопросы:\n\nнууужно ннннааааппиииисссааатттттььь фуууннкккцццииию которая нннаааа вввххходдд прррииинниааеет эээту ссстрроку и воозвратттит еёёё ббббеееззз лллиииишшшнннееееггггооо дуббблиррроовааннния бббуккккв\n\n===\n\nvar a = { foo: 10 };\nvar b = a;\nb.foo = 20;\nconsole.log(a);\n\nlet a = { foo: 10 };\nconst b = a;\nb.foo = 20;\nconsole.log(a);\n\nvar a = [1,2,3];\nlet c = a;\ncont b = c;\nb.push(2);\nconsole.log(a);\n\nconst a = {\nsome: '1'\n};\n\nconst fn = (b) => {\nb.some = '2';\n\nreturn b;\n}\n\nconst c = fn(a);\n\nconsole.log(a.some + c.some);\n\n===\n\nfunction a(){\nconst f = function f(){};\nf.magic = 'wow';\n\nreturn new f();\n}\n\nconst test = a();\nconsole.log(test.magic);\n\ncosnt a = {}\na.some = 1\n\n===\ntrue / false"
      },
      {
        "timestamp": "2024-10-04 07:45:16",
        "content": "2024-10-04 07:45:16\n Stepan Ch. -> 2071074234:\nИННОТЕХ\n- Вакансия: https://t.me/c/2071074234/616/68541\n- зп: 270+\n\nВопросы:\n1. Вопросы по резюме\n2. Почему уходишь с работы?\n3. Как создавать кастомные хуки?\n4. С какими хуками работаешь?\n5. Расскажи про Virtual Dom\n6. Рендер процесс\n7. Сборка бандла\n8. CI/CD\n9. MobX, Redux\n10. Object vs object\n11. Примитивные типы в TS\n12. Utility Types\n13. V8\n14. JIT\n15. С какими библиотеками для форм работал?\n16. Методы массива?\n17. RTK Query",
        "full_content": "2024-10-04 07:45:16\n Stepan Ch. -> 2071074234:\nИННОТЕХ\n- Вакансия: https://t.me/c/2071074234/616/68541\n- зп: 270+\n\nВопросы:\n1. Вопросы по резюме\n2. Почему уходишь с работы?\n3. Как создавать кастомные хуки?\n4. С какими хуками работаешь?\n5. Расскажи про Virtual Dom\n6. Рендер процесс\n7. Сборка бандла\n8. CI/CD\n9. MobX, Redux\n10. Object vs object\n11. Примитивные типы в TS\n12. Utility Types\n13. V8\n14. JIT\n15. С какими библиотеками для форм работал?\n16. Методы массива?\n17. RTK Query"
      },
      {
        "timestamp": "2024-09-23 18:16:28",
        "content": "2024-09-23 18:16:28\n Никита -> 2071074234:\n— Название: Иннотех\n— Вакансия: hr сама написала\n— зп: 270к(назвал)\n— вопросы:\n1) задача на то, как работает сборщик мусора\nvar vasya = {\n    obj:petya\n}\nvar petya = {\n    obj:vasya\n}\ndelete vasya\ndelete petya\nconsole.log(vasya, petya) \n2) задача на потерю контекста функции(максимально стандартная)\n3) задача на изменение объекта внутри функции\nvar obj = {\n  a: 1\n};\n\n(function(obj) {\n  obj.a = 2; // Меняем свойство объекта, а не сам объект\n})(obj);\n\ncons...",
        "full_content": "2024-09-23 18:16:28\n Никита -> 2071074234:\n— Название: Иннотех\n— Вакансия: hr сама написала\n— зп: 270к(назвал)\n— вопросы:\n1) задача на то, как работает сборщик мусора\nvar vasya = {\n    obj:petya\n}\nvar petya = {\n    obj:vasya\n}\ndelete vasya\ndelete petya\nconsole.log(vasya, petya) \n2) задача на потерю контекста функции(максимально стандартная)\n3) задача на изменение объекта внутри функции\nvar obj = {\n  a: 1\n};\n\n(function(obj) {\n  obj.a = 2; // Меняем свойство объекта, а не сам объект\n})(obj);\n\nconsole.log(obj.a); // Теперь выведет 2\n4) задача на event loop, загвоздка в том, что макротаска плодит микротаски\n5) задача на todoList, там прокидываем 2 функции в todoItem, но если в Callback засунуть в лист не будут добавляться элементы, нужно было либо со вторыми аргументами memo поработать, или по его словам что-то такое сделать(я не решил): \nconst addToDo = useCallback(()=>{\nsetTodoList(prev=>[...prev, new Todo()]\n},[setTodoList])\n6)что такое state и setState?\n7) рефактор useeffect с запросом и скролом: массив зависимостей, разделить логикую, сделлать в евенте и клин апе одну ссылку на скролл, убрать async\n8) на чем стили писали? минусы-плюсы styledComponent\n9) шрифты в styledComponent\n10) что знаешь про идемпотентность?"
      },
      {
        "timestamp": "2024-09-05 17:19:11",
        "content": "2024-09-05 17:19:11\n Руслан -> 2071074234:\nИннотех тех собес\n— зп: от 300к\n— вакансия: https://hh.ru/vacancy/105890858\n— вопросы: \n1. таска, которой гордишься\n2. фейл, за который стыдно\n3. был ли опыт с микрофронтами\n4. critical rendering path\n5. http 1.1 vs 2\n6. свойство display\n7. св-во position \n8. селекторы цсс, вес\n9. inline стили хорошо ли использовать\n10. типы данных в js\n11. почему typeof array = object, typeof fn = function\n12. как проверить, что поле в объекте есть, отличия способов\n13...",
        "full_content": "2024-09-05 17:19:11\n Руслан -> 2071074234:\nИннотех тех собес\n— зп: от 300к\n— вакансия: https://hh.ru/vacancy/105890858\n— вопросы: \n1. таска, которой гордишься\n2. фейл, за который стыдно\n3. был ли опыт с микрофронтами\n4. critical rendering path\n5. http 1.1 vs 2\n6. свойство display\n7. св-во position \n8. селекторы цсс, вес\n9. inline стили хорошо ли использовать\n10. типы данных в js\n11. почему typeof array = object, typeof fn = function\n12. как проверить, что поле в объекте есть, отличия способов\n13. глубокое копирование объекта vs поверхностное. способы копирования\n13. structuredClone является ли частью js`а\n14. как запретить изменение объекта, пара способов\n15. как замерить время выполнения куска кода\n16. type vs interface\n17. будет ли ререндер если передавать объект дочернему компоненту в пропы, в каких случаях да, в каких нет\n— задачи:\n1.\n// ф-ция должна вернуть массив объектов без дубликатов\nfunction removeDuplicates(arr) {\n  // Создаём новый массив для хранения уникальных объектов\n  const uniqueArr = [];\n\n  // Используем Set для хранения строковых представлений объектов\n  const seen = new Set();\n\n  arr.forEach((obj) => {\n    // Преобразуем объект в строку для проверки уникальности\n    const objStr = JSON.stringify(obj);\n\n    // Если строковое представление объекта ещё не было добавлено, добавляем объект в уникальный массив\n    if (!seen.has(objStr)) {\n      seen.add(objStr);\n      uniqueArr.push(obj);\n    }\n  });\n\n  return uniqueArr;\n}\n\n// Пример использования\nconst arr = [{ a: 1 }, { a: 1 }, { a: 2 }, { b: 1 }, { b: 1 }, { c: 2 }, { d:\n2.\nна удаление пробелов по бокам строки с помощью тс\ntype TrimmedString<T extends string> = \n    T extends ` ${infer R}` ? TrimmedString<R> : // Удаление пробела в начале\n    T extends `${infer R} ` ? TrimmedString<R> : // Удаление пробела в конце\n    T; // Окончательный результат\n3. была задача с классом, в котором были нарушены solid принципы, нужно было пофиксить\n4. задача на луп не сохранилась"
      },
      {
        "timestamp": "2024-08-22 17:47:23",
        "content": "2024-08-22 17:47:23\n Kirill Anikeev -> 2071074234:\n-Иннотех(dion)\n-вакансия: https://hh.ru/vacancy/103901060\n-зп: от250\nсобеседующий просит шарить весь экран. Сам без камеры, хотя требует камеру от меня\nзадача:\nfunction filterStr(str) {\n    let result = '';\n    for (let i = 0; i < str.length; i++) {\n      let char = str[i];\n      let prev = str[i-1]\n        if (char !== prev) {\n            result = result + char;\n        }\n    }\n    return result;\n}\nconst str = \"ннууужно ннннаааапппииииссссссааа...",
        "full_content": "2024-08-22 17:47:23\n Kirill Anikeev -> 2071074234:\n-Иннотех(dion)\n-вакансия: https://hh.ru/vacancy/103901060\n-зп: от250\nсобеседующий просит шарить весь экран. Сам без камеры, хотя требует камеру от меня\nзадача:\nfunction filterStr(str) {\n    let result = '';\n    for (let i = 0; i < str.length; i++) {\n      let char = str[i];\n      let prev = str[i-1]\n        if (char !== prev) {\n            result = result + char;\n        }\n    }\n    return result;\n}\nconst str = \"ннууужно ннннаааапппииииссссссааатттттттьыь фуууккккнннццццццциююю которая ннннаааа вввввхххоодддд пппрррииииинннннннмммааааеетт ээээту ссстрррокуу и ввоззвррраащщщиииттт еееё ссс ббббеееззз ллллииишшшннннееегггоо дуууббблиииррррооовааннния бббууккккввв\";\nconsole.log(filterStr(str));\nпо задачи много доп вопросов:\nсложность алгоритмическая(как рассчитывается),\nкак оцениваешь решение\nкак бы тестил\nа что было бы если (были бы числа вроде 100 в строке, были бы слова где идут 2 одинаковые буквы подряд), как решал бы\nдругие вопросы:\nглубоко копал про прототипы, лексическое окружение, паттерны проектирования, наследование"
      },
      {
        "timestamp": "2024-08-08 13:45:51",
        "content": "2024-08-08 13:45:51\n Александр Птицын -> 2071074234:\nhttps://t.me/c/2071074234/616/49262\nГК Иннотех\n- вакансия:  https://saratov.hh.ru/vacancy/104460530\n- зп: минимум 350, комфорт от 400\n\nЗадачки:\n\n//Необходимо реализовать функцию debounce таким образом, чтобы после многократного вызова функции debouncedFetch в консоли\n//вывелся только один результат \"return result 6\"\n\nfunction debounce(callback, time) {\n  let timerId;\n\n  return function(...arg) {\n    clearTimeout(timerId);\n    timerId = setTime...",
        "full_content": "2024-08-08 13:45:51\n Александр Птицын -> 2071074234:\nhttps://t.me/c/2071074234/616/49262\nГК Иннотех\n- вакансия:  https://saratov.hh.ru/vacancy/104460530\n- зп: минимум 350, комфорт от 400\n\nЗадачки:\n\n//Необходимо реализовать функцию debounce таким образом, чтобы после многократного вызова функции debouncedFetch в консоли\n//вывелся только один результат \"return result 6\"\n\nfunction debounce(callback, time) {\n  let timerId;\n\n  return function(...arg) {\n    clearTimeout(timerId);\n    timerId = setTimeout(() => {\n      callback.apply(this, arg);\n    }, time);\n  };\n}\n\nconst fetch = x => {\n  setTimeout(() => {\n    console.log('return result ', x);\n  }, 3000);\n};\n\nconst debouncedFetch = debounce(fetch, 500);\n\ndebouncedFetch(2);\ndebouncedFetch(3);\ndebouncedFetch(4);\ndebouncedFetch(5);\ndebouncedFetch(6);"
      },
      {
        "timestamp": "2024-07-01 15:50:53",
        "content": "2024-07-01 15:50:53\n dm . -> 2071074234:\n- Иннотех (на проект DION)\n- Вакансия: hr написала\n- ЗП: от 250 net\n- Задачи:\n1) Написать функцию, которая удалит лишние буквы\n js\nfunction removeDuplicates(str) {\n    let result = '';\n    let prevChar = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let currentChar = str[i];\n        if (currentChar !== prevChar) {\n            result += currentChar;\n        }\n        prevChar = currentChar;\n    }\n\n    return result;\n}\n\nconst inputString = \"ннуууж...",
        "full_content": "2024-07-01 15:50:53\n dm . -> 2071074234:\n- Иннотех (на проект DION)\n- Вакансия: hr написала\n- ЗП: от 250 net\n- Задачи:\n1) Написать функцию, которая удалит лишние буквы\n js\nfunction removeDuplicates(str) {\n    let result = '';\n    let prevChar = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let currentChar = str[i];\n        if (currentChar !== prevChar) {\n            result += currentChar;\n        }\n        prevChar = currentChar;\n    }\n\n    return result;\n}\n\nconst inputString = \"ннууужно ннннаааапппииииссссссааатттттттьыь фуууккккнннццццццциююю которая ннннаааа вввввхххоодддд пппрррииииинннннннмммааааеетт ээээту ссстрррокуу и ввоззвррраащщщиииттт еееё ссс ббббеееззз ллллииишшшннннееегггоо дуууббблиииррррооовааннния бббууккккввв\";\nconst outputString = removeDuplicates(inputString);\nconsole.log(outputString);\n- Вопросы:\n1) Почему react - библиотека?\n2) Какие паттерны знаешь?\n3) Какой шаблон проектирования  использует реакт: композицию или абстракцию?\n4) Какой паттерн использует редакс?\n- Успех: ✅\n- Комментарий: собеседующий просил зашарить весь экран, код писать в своем ide."
      },
      {
        "timestamp": "2024-06-25 15:20:40",
        "content": "2024-06-25 15:20:40\n dm . -> 2071074234:\n- Иннотех\n- Ссылки нет, hr написала\n- ЗП: 250-280 net\n- Задачи:\n1) нууужно    ннааппиииисссааатттттььь фукккнцццию которая нннаааа вввххходдд прррииинниааеет эээту ссстрроку и воозвратттит её ббббеееззз лллиииишшшнннееееггггооо дуббблиррроовааннния бббуккккв\n2) Что выведется в консоль\n js\nvar a = {foo: 10}\nvar b = a\nb.foo = 20\nconsole.log(a)\n3) Что выведется в консоль\n js\nlet a = {foo: 10}\nconst b = a\nb.foo = 20\nconsole.log(a)\n4) Задачка на понимание функ...",
        "full_content": "2024-06-25 15:20:40\n dm . -> 2071074234:\n- Иннотех\n- Ссылки нет, hr написала\n- ЗП: 250-280 net\n- Задачи:\n1) нууужно    ннааппиииисссааатттттььь фукккнцццию которая нннаааа вввххходдд прррииинниааеет эээту ссстрроку и воозвратттит её ббббеееззз лллиииишшшнннееееггггооо дуббблиррроовааннния бббуккккв\n2) Что выведется в консоль\n js\nvar a = {foo: 10}\nvar b = a\nb.foo = 20\nconsole.log(a)\n3) Что выведется в консоль\n js\nlet a = {foo: 10}\nconst b = a\nb.foo = 20\nconsole.log(a)\n4) Задачка на понимание функции-конструктора и this\n- Вопросы:\n1) Реакт реализаует паттерн композиции или ассоциации? доказать свою точку зрения\n2) Какой паттерн реализует prototype в js? порассуждать\n3) Можем ли мы нарушать архитектурный паттерн в редаксе, по которому должен быть один единственный стейт на все приложение? доказать свою точку зрения\n- Фидбек: положительный, позвали на общение с командой и продуктоунером\n- Комментарий: собеседующий попросил включить камеру + расшарить весь экран, а не только браузер; обратил внимание на обс, попросил не записывать. Код писать в своем IDE, рефакторить \"глазами\", не запуская."
      },
      {
        "timestamp": "2024-05-26 16:23:24",
        "content": "2024-05-26 16:23:24\n Roman -> 2071074234:\nНазвание компании: Иннотех стрим Октопус\n- зп: просил от 300к\n- вакансия: hr сам предложил собес еще в этот стрим\nуспех собеса: отказ\nфидбэк: Не хватило уровня хард скиллов для их проекта. Но подробного фидбека в чем именно - не давали.\n\nВопросы:\n- про опыт, продукты, достижения, факапы, предыдущие места\n- как была устроена работа, почему так глубоко был погружен в продукт?\n- почему ушел с предыдущего места работы?\n- почему сейчас вышел на рынок, что не ...",
        "full_content": "2024-05-26 16:23:24\n Roman -> 2071074234:\nНазвание компании: Иннотех стрим Октопус\n- зп: просил от 300к\n- вакансия: hr сам предложил собес еще в этот стрим\nуспех собеса: отказ\nфидбэк: Не хватило уровня хард скиллов для их проекта. Но подробного фидбека в чем именно - не давали.\n\nВопросы:\n- про опыт, продукты, достижения, факапы, предыдущие места\n- как была устроена работа, почему так глубоко был погружен в продукт?\n- почему ушел с предыдущего места работы?\n- почему сейчас вышел на рынок, что не устраивает на текущем месте?\n- что такое развитие для тебя?\n- с точки зрения финансовых ожиданий, что ты хочешь найти?\n\n- ты рассказал, что переходили с легаси на новый стек, расскажи, при выборе стека на что вы опирались, с какими проблемами столкнулись, что нужно было обсудить, чтобы не применять, было ли такое?\n- какой стек еще использовали, кроме реакта?\n- для использования стилей, что применяете?\n- преимущества использования CSS in JS по сравнению с обычными CSS файлами?\n- что касаемо локализации стилей, как это в чистом CSS и как это происходит в styled components? собеседующий хотел услышать про конфликт стилей\n- расскажи, про флексы и гриды, что за технологии, какие чаще применял?\n\n- расскажи про свои факапы \n- как ты себя ощущаешь, оцениваешь как коммуникатора, у нас большая команда, нужно со всеми успевать общаться\n\n\n- специфичность в CSS, как работает?\n- страница открывается с паддингами и непонятным отображением блоков. Еще не применил стили, а у страницы и блоков есть паддинги или марджины, как такого момента избежать - вопрос про сброс стилей браузерных\n- с помощью display: none можно спрятать элемент, какие еще знаешь способы, как спрятать элемент на веб-странице?\n- в чем разница display: none, opacity, и visibility?\n- этапы критического пути рендеринга?\n- event loop - что это такое, как работает?\n- что такое MutationObserver?\n- к чему относится загрузка изображений, клик - к каким таскам?\n\n- в какой последовательности выведется код?\n\nconsole.log(1);\n\nsetTimeout(() => {\n    console.log(2);\n});\n\nPromise.resolve(3).then(console.log);\n\nconsole.log(4);\n\nsetTimeout(() => {\n    console.log(5);\n}, 0);\n\nconsole.log(6);\n\n\n- что произойдет, если раскомментировать foo1() ?\n\nconst foo1 = () => {\n   console.log(\"foo1\")\n   \n   return Promise.resolve().then(foo1)\n}\n\n// foo1()\n\n\n- что произойдет, если раскомментировать foo2() ?\n\nconst foo2 = () => {\n   console.log(\"foo2\")\n   \n   setTimeout(foo2)\n}\n\n// foo2()\n\n\n- что-то в рамках CI/CD выполнял? Что конкретно?\n- какой был сборщик?\n- сборка фронтовой части, Vite или Webpack?\n- Какую ключевую роль, за что отвечает Webpack?\n- В какого формата файлы преобразует Webpack?\n- Есть такая проблема как раскатка на разные стенды и передача переменных окружения, чтобы наш фронт понимал, куда ходить на какой стенд - сталкивался с такими проблемами? Как решал?\n- сам руками всё настраивал, CI, линтеры, тесты прохождение, фиксил что-то там в процессе?\n- когда переходили на новый стек, были ли какие-то архитектурные проблемы, как решали их или не решалось?\n- какие плюсы React 18 версии по сравнению с предыдущими версиями?\n- что такое батчинг?\n\nЗадача:\nЕсть счетчик, кнопка клика, что пройзодет, когда кликнешь на эту кнопку?\nhttps://codesandbox.io/p/devbox/react-interview-wx3mp4?file=%2Fsrc%2FApp.jsx%3A5%2C25\n\n- если перед будет задача построить или организовать разработку приложения независимо в разных командах какие твои будут дальнейшие действия, что необходимо будет сделать?\n- опыт с module federation у тебя был, где работал, когда?\n- сам микрофронты настраивал или лид что-то делал?\n\n- если бы тебе необходимо было делать бесконечную загрузку в дропдауне, как бы ты ее реализовал с помощью обычного JS? использовать intersection observer"
      },
      {
        "timestamp": "2024-05-23 15:14:06",
        "content": "2024-05-23 15:14:06\n Roman -> 2071074234:\nНазвание компании: Иннотех стрим Состоятельные клиенты\n- зп: просил от 300к\n- вакансия: hr предложил собес в другой стрим\n- Успех собеса: ?\n\nВопросы:\n- про опыт\n- как отцентровать элемент\n- разница em и rem\n- доступность, что это такое, для чего нужна, как добиваешься на проекте\n- разница var, let, const\n- bind, call, apply\n- рассказать про стрелочную функцию\n- методы массивов - перечислить\n- рассказать про reduce\n- Промисы, его состояния, методы промисо...",
        "full_content": "2024-05-23 15:14:06\n Roman -> 2071074234:\nНазвание компании: Иннотех стрим Состоятельные клиенты\n- зп: просил от 300к\n- вакансия: hr предложил собес в другой стрим\n- Успех собеса: ?\n\nВопросы:\n- про опыт\n- как отцентровать элемент\n- разница em и rem\n- доступность, что это такое, для чего нужна, как добиваешься на проекте\n- разница var, let, const\n- bind, call, apply\n- рассказать про стрелочную функцию\n- методы массивов - перечислить\n- рассказать про reduce\n- Промисы, его состояния, методы промисов\n- Event loop\n\nЗадача:\nhttps://codesandbox.io/p/sandbox/interview-counter-ndktc3?file=%2Ftask.txt%3A3%2C38\n\nВопросы после задачи: \n- для чего нужен useRef, для чего использовал\n- рассказать про CORS\n- как работал с гитом, через консоль или интерфейс\n- разница git rebase и git merge"
      },
      {
        "timestamp": "2024-04-22 20:50:55",
        "content": "2024-04-22 20:50:55\n 5429820319 -> 2071074234:\nНазвание компании: Иннотех (вакансия в ВТБ)\nСсылка на вакансию: hr сама написала\nЗП: говорил хочу 240 \nЗадачи: \nПодробно спрашивали про прошлый опыт и процессы в прошлой компании Из техники была работа браузера, react reconcilation, cors, пара кусков кода где нужно было объяснить что происходил или в какой последовательности выведется \nУспех собеса: дали оффер на 200к\nСобес был 15 апреля",
        "full_content": "2024-04-22 20:50:55\n 5429820319 -> 2071074234:\nНазвание компании: Иннотех (вакансия в ВТБ)\nСсылка на вакансию: hr сама написала\nЗП: говорил хочу 240 \nЗадачи: \nПодробно спрашивали про прошлый опыт и процессы в прошлой компании Из техники была работа браузера, react reconcilation, cors, пара кусков кода где нужно было объяснить что происходил или в какой последовательности выведется \nУспех собеса: дали оффер на 200к\nСобес был 15 апреля"
      },
      {
        "timestamp": "2024-04-16 15:45:57",
        "content": "2024-04-16 15:45:57\n Artem -> 2071074234:\n- Название компании: Иннотех\n- Ссылка на вакансию: HR сама написала\n- ЗП: попросил от 250\n- Задачи: https://stackblitz.com/edit/js-8eprxw?file=index.js \nhttps://stackblitz.com/edit/react-ts-szb1ts?file=src%2FExampleOne.tsx\nУспех: ❌",
        "full_content": "2024-04-16 15:45:57\n Artem -> 2071074234:\n- Название компании: Иннотех\n- Ссылка на вакансию: HR сама написала\n- ЗП: попросил от 250\n- Задачи: https://stackblitz.com/edit/js-8eprxw?file=index.js \nhttps://stackblitz.com/edit/react-ts-szb1ts?file=src%2FExampleOne.tsx\nУспех: ❌"
      },
      {
        "timestamp": "2024-03-28 14:57:28",
        "content": "2024-03-28 14:57:28\n Vitalya Bedik -> 2071074234:\n— Название компании: Иннотех (техсобес)\n— Ссылка на вакансию: https://hh.ru/vacancy/95333177?from=share_ios\n— ЗП: не обсуждали\n— Задачи: что выведет в консоль + вопросы + про опыт\n— Записи на ютуб: https://www.youtube.com/watch?v=CLKDuDvrnqQ\n— Успех собеса: ❓Pending\n— Фидбек о собесе: жду обратной связи",
        "full_content": "2024-03-28 14:57:28\n Vitalya Bedik -> 2071074234:\n— Название компании: Иннотех (техсобес)\n— Ссылка на вакансию: https://hh.ru/vacancy/95333177?from=share_ios\n— ЗП: не обсуждали\n— Задачи: что выведет в консоль + вопросы + про опыт\n— Записи на ютуб: https://www.youtube.com/watch?v=CLKDuDvrnqQ\n— Успех собеса: ❓Pending\n— Фидбек о собесе: жду обратной связи"
      },
      {
        "timestamp": "2024-03-21 10:36:48",
        "content": "2024-03-21 10:36:48\n Александр -> 2071074234:\nНазвание компании: Иннотех\nСсылка на вакансию: https://nn.hh.ru/vacancy/93555047\nЗапись: https://youtu.be/3wfKfjohkw0\nЗп: 340 net\nУспех собеса: успех",
        "full_content": "2024-03-21 10:36:48\n Александр -> 2071074234:\nНазвание компании: Иннотех\nСсылка на вакансию: https://nn.hh.ru/vacancy/93555047\nЗапись: https://youtu.be/3wfKfjohkw0\nЗп: 340 net\nУспех собеса: успех"
      },
      {
        "timestamp": "2024-03-09 13:32:31",
        "content": "2024-03-09 13:32:31\n Kirill N -> 2071074234:\nЗаписи собеседований  \nКомпания: MOVAVI от 26.02 \nhttps://www.youtube.com/watch?v=X8BAWSHpr9g \n \nКомпания: Мой склад 26.02 \nhttps://www.youtube.com/watch?v=I5vdydjkmAE \n \nКомпания: Собес 27.02 \nhttps://www.youtube.com/watch?v=USFqJBmNrW4 \n \nКомпания: Озон 1.03 (1 этап) \nhttps://www.youtube.com/watch?v=-9CTCHiGLtg \n \nКомпания: Озон 05.03 (2 этап) \nhttps://youtu.be/SsOs-mTIiN8 \n \nКомпания: ГПБ 01.03 \nhttps://youtu.be/dn7HsjOcDfk \n \nКомпания: ВК 05.03 \nh...",
        "full_content": "2024-03-09 13:32:31\n Kirill N -> 2071074234:\nЗаписи собеседований  \nКомпания: MOVAVI от 26.02 \nhttps://www.youtube.com/watch?v=X8BAWSHpr9g \n \nКомпания: Мой склад 26.02 \nhttps://www.youtube.com/watch?v=I5vdydjkmAE \n \nКомпания: Собес 27.02 \nhttps://www.youtube.com/watch?v=USFqJBmNrW4 \n \nКомпания: Озон 1.03 (1 этап) \nhttps://www.youtube.com/watch?v=-9CTCHiGLtg \n \nКомпания: Озон 05.03 (2 этап) \nhttps://youtu.be/SsOs-mTIiN8 \n \nКомпания: ГПБ 01.03 \nhttps://youtu.be/dn7HsjOcDfk \n \nКомпания: ВК 05.03 \nhttps://youtu.be/X4T0G_n1jqo \n \nКомпания ВТБ 06.03  \nhttps://youtu.be/3wfKfjohkw0 \n \nКомпания: Сбер технологии 07.03 \nhttps://youtu.be/gt2RcGbzloQ \n \nКомпания: Иннотех 07.03 \nhttps://youtu.be/soujRRxtnC8 \nКомпания: IT ONE 07.03 \nhttps://youtu.be/RaZ-iZOJgDM"
      },
      {
        "timestamp": "2024-01-17 23:10:41",
        "content": "2024-01-17 23:10:41\n Daniil Max -> 2071074234:\n— Название компании: иннотех\n— Ссылка на вакансию: hr сама написала \n\nС вами готовы пообщаться на интервью в стрим Главная книга- Реализация СУБО Главная Книга в рамках задач по импортозамещения ЦФТ2 Main и выведению из нее функциональностей Главной Книги.\n\n— ЗП: 310-400к. hr сказала можно больше\n— Задачи: теория \n\n1. Отличие useEffect от useLayoutEffect \n2. какие хуки использую в react \n3. какие есть виды мемоизации в react \n4. HOC memo и как запре...",
        "full_content": "2024-01-17 23:10:41\n Daniil Max -> 2071074234:\n— Название компании: иннотех\n— Ссылка на вакансию: hr сама написала \n\nС вами готовы пообщаться на интервью в стрим Главная книга- Реализация СУБО Главная Книга в рамках задач по импортозамещения ЦФТ2 Main и выведению из нее функциональностей Главной Книги.\n\n— ЗП: 310-400к. hr сказала можно больше\n— Задачи: теория \n\n1. Отличие useEffect от useLayoutEffect \n2. какие хуки использую в react \n3. какие есть виды мемоизации в react \n4. HOC memo и как запретить обновлять компонент с помощью memo \n5. зачем нужны ключи в реакте \n6. что такое согласование в react?\n7. как реакт понимает какие компоненты нужно обновлять\n8. что такое декларативный подход в реакт. разница чистого Js и реакт\n9. про классы, почему ушли от классов к функциональным компонентам\n\n— Успех собеса: ❌\n— Фитбек о собесе: оценили не синьором, фитбек странный получил \nПо итогам интервью коллеги не готовы  сделать вам предложение, не хватило знаний на позицию senior (пример- было отрывочно изложено в части рендера страницы в браузере, как работает virtual dom, как работает оптимизация дерева и какой алгоритм для этого используется, зачем нужен Key). Коллеги отметили хорошие коммуникативные навыки, фокус на бизнес пользу, всестороннюю развитость и заинтересованность в IT сфере. \nНа вопросы их ответил все, кроме FSD...) \n\n#иннотех"
      },
      {
        "timestamp": "2024-01-10 08:42:19",
        "content": "2024-01-10 08:42:19\n Daniil Max -> 2071074234:\n— Название компании: Иннотех, какой-то стрим\n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Задачи: теория \n— Запись на ютуб: https://youtu.be/j9Oa0Nh-zSA?si=ppEmK96-ijjYcqyt\n— Успех собеса: ✅\n— Фитбек о собесе от HR: огонь\n\n#middle",
        "full_content": "2024-01-10 08:42:19\n Daniil Max -> 2071074234:\n— Название компании: Иннотех, какой-то стрим\n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Задачи: теория \n— Запись на ютуб: https://youtu.be/j9Oa0Nh-zSA?si=ppEmK96-ijjYcqyt\n— Успех собеса: ✅\n— Фитбек о собесе от HR: огонь\n\n#middle"
      }
    ]
  },
  {
    "company": "Альфа-Банк",
    "count": 23,
    "records": [
      {
        "timestamp": "2025-07-16 14:55:27",
        "content": "2025-07-16 14:55:27\n Ivan -> 2071074234:\nКомпания: Альфа банк\nЗП: 250+\n\n1. Какими задачами гордишься?\n2. Что не нравится в работе?\n3. Примитивные и ссылочные типы данных.\n4. Сборщик мусора\n5. Мутирующие и не мутирующие методы массивов. Что лучше?\n6. this, стрелочные функции, классические функции.\n7. Промисы\n8. EventLoop\n9. WebWorker\n10. Виртуализация списков\n11. Про Реакт. Преимущества и недостатки. (недостатки он про spa и seo/fcp)\n12. jwt авторизация\n13. Про cors\n14. Про куки\n15. Про Redux. За...",
        "full_content": "2025-07-16 14:55:27\n Ivan -> 2071074234:\nКомпания: Альфа банк\nЗП: 250+\n\n1. Какими задачами гордишься?\n2. Что не нравится в работе?\n3. Примитивные и ссылочные типы данных.\n4. Сборщик мусора\n5. Мутирующие и не мутирующие методы массивов. Что лучше?\n6. this, стрелочные функции, классические функции.\n7. Промисы\n8. EventLoop\n9. WebWorker\n10. Виртуализация списков\n11. Про Реакт. Преимущества и недостатки. (недостатки он про spa и seo/fcp)\n12. jwt авторизация\n13. Про cors\n14. Про куки\n15. Про Redux. Зачем весь этот бойлерплейт экшены/редюсеры, почему бы не сделать как в mobx? Мутировать поля напрямую, написав для этого нужную логику.\n16. Как подходить к написанию uikit?\n\nЗадача 1\nconst numberSet = new Set<number>();\n\n// OK\nnumberSet.add(42);\n\n// Должна быть ошибка\nnumberSet.add(\"42\"); // Ошибка: Argument of type 'string' is not assignable to parameter of type 'number'.\nЗадача 2\nfunction toArray<T>(value: T): T[] {\n    return [value];\n}\nЗадача 3\ntype Item = {\n    id: string | number;\n    name: string;\n    date: string | Date;\n};\n\ntype Props = {\n    onClick: () => void;\n    data: Item[];\n};\n\nconst obj: Props = {\n    onClick: () => {\n        console.log(\"Button clicked!\");\n    },\n    data: [\n        {\n            id: 1,\n            name: \"John Doe\",\n            date: \"2023-10-05\",\n        },\n        {\n            id: 2,\n            name: \"Jane Smith\",\n            date: new Date(),\n        },\n    ],\n};\nЗадача 4\nconst useFirstRender = () => {\n  const isFirstRenderRef = useRef(true);\n\n  useEffect(() => {\n    isFirstRenderRef.current = false;\n  }, []);\n\n  return isFirstRenderRef.current;\n};\nЗадача 5\nДана таблица.\nНужно через псевдокод объяснить как можно реализовать фильтрацию. Фильтры 1) селект с выбором города 2) инпут с именем 3) range с зарплатой. И как пагинацию реализовать. В общем, все подставляется в query параметры и дергается ручка при изменении фильтров. Если меняются фильтры нужно сбрасывать к первой странице."
      },
      {
        "timestamp": "2025-07-16 10:26:26",
        "content": "2025-07-16 10:26:26\n Anastasia -> 2071074234:\nКомпания: Альфа-банк (знакомства с командой)\nЗП: от 200к\n\nПришла вся команда. Рассказали о себе и о проекте\nСпрашивали:\n1. Мой опыт и интересные таски?\n2. Процессы на текущем месте?\n3. CI/CD , был ли опыт, настраивала ли самостоятельно? если нет, то кто занимался?\n4. Как и кто заводил таски в JIRA?\n5. Взаимодействие с командой?\n6. Немножко задали вопросов по моему проекту на текущей работе?\n7. Были ли конфликты, как решала?\n8. Предлагала ли свои каки...",
        "full_content": "2025-07-16 10:26:26\n Anastasia -> 2071074234:\nКомпания: Альфа-банк (знакомства с командой)\nЗП: от 200к\n\nПришла вся команда. Рассказали о себе и о проекте\nСпрашивали:\n1. Мой опыт и интересные таски?\n2. Процессы на текущем месте?\n3. CI/CD , был ли опыт, настраивала ли самостоятельно? если нет, то кто занимался?\n4. Как и кто заводил таски в JIRA?\n5. Взаимодействие с командой?\n6. Немножко задали вопросов по моему проекту на текущей работе?\n7. Были ли конфликты, как решала?\n8. Предлагала ли свои какие-то решения? Допустим что-то внедрить на проект\n9. Был ли опыт с микрофронтами?\n10. Как вообще развиваюсь и развиваюсь ли? Что последнее я читала и изучала?\n11. Было ли такое, что были какие-то срочные таски, на которые надо переключиться было? \n12. Хобби и интересы?"
      },
      {
        "timestamp": "2025-07-14 17:03:07",
        "content": "2025-07-14 17:03:07\n Anastasia -> 2071074234:\nКомпания: Альфа-банк\nСсылка на вакансию: нет, HR писала сама\nЗП: я просила от 200к\n\n1. Сначала рассказали о себе и задали вопросы про мой опыт\n2. Дальше были задачки, которые сопровождались теор. вопросами. Сначала напишу все вопросы, потом скину задачки\n\nВопросы:\n1. Причины перерисовки в React\n2. Когда нужно менять стейт через предыдущее состояние (например: setState(prev => prev + 1)), а когда можно сделать просто setState(state + 1)? \n3. батчинг э...",
        "full_content": "2025-07-14 17:03:07\n Anastasia -> 2071074234:\nКомпания: Альфа-банк\nСсылка на вакансию: нет, HR писала сама\nЗП: я просила от 200к\n\n1. Сначала рассказали о себе и задали вопросы про мой опыт\n2. Дальше были задачки, которые сопровождались теор. вопросами. Сначала напишу все вопросы, потом скину задачки\n\nВопросы:\n1. Причины перерисовки в React\n2. Когда нужно менять стейт через предыдущее состояние (например: setState(prev => prev + 1)), а когда можно сделать просто setState(state + 1)? \n3. батчинг это? \n4. что будет, если мы напишем \nconst changeCount = () => {\nsetState(state + 1)\nsetState(state + 1)\nsetState(state + 1)\nsetState(state + 1)\n}\n// будет батчинг, но выполнится только последний setState\n5. Разница между контролируемыми и неконтролируемыми значениями у инпута\n6. События в JS: погружение, таргет фаза, всплытие\n7. e.preventDefault(), e.stopPropagation(), e.stopImmidiatePropagation() - рассказать о том для чего нужны\n8. Кастомные хуки. Чем отличаются от обычных функций и когда надо использовать их, а не обычные функции?\n9. Мемоизация, кеширование. Когда надо использовать, а когда не надо?\n10. Кейсы, когда нам нужно использовать useCallback?\n11. Когда нужно использовать <React.Fragment></React.Fragment>, а когда достаточно фрагмента в виде <></>?\n12. Зачем нам нужны ключи в реакте?\n13. Сколько аргументов в .map() и какие они?\n14. Мемоизация в 19 реакте? \n15. Мемоизация в классовых компонентах? (Pure Component)\n16. Можно ли назвать компонент в реакте с маленькой буквы? Что будет если так сделаем?\n17. Стандартное поведение формы при сабмите? Как отключить?\n\nЗадачки: \n1. Не работает счетчик. Объяснить почему. Исправить.\nКод:\nexport default function Counter() {\n    let count = 0;\n\n    const changeCount = () => {\n        count += 1;\n    };\n\n    return (\n        <div>\n            <div>Count = {count}</div>\n            <button onClick={changeCount}>Knoms</button>\n        </div>\n    );\n}\nРешение:  удаляем всё до return и добавляем это:\nconst [count, setCount] = useState(0);\n\n\nconst changeCount = () => {\n    setCount(prev => prev + 1);\n  };\n2.  \n/*\nВывести зачения полей в консоль, при клике на форму,\nучитывая, что первый input controlled, а второй uncontrolled\n*/\nexport default function () => {\n    const onClickForm = () => {\n        console.log(\"controlled:  \" );\n        console.log(\"uncontrolled:  \" );\n    };\n\n    return (\n        <form onClick={onClickForm}>\n            <input   placeholder=\"controlled\"  />\n            <input placeholder=\"uncontrolled\"  />\n\n            <button type=\"button\">Отправить заявку на кредит</button>\n        </form>\n    );\n}\nРешение: \nexport default function CreditForm() {\n    const [value1, setValue1] = useState(''); // для контролируемого инпута\n    const inputRef = useRef(null); // для неконтролируемого\n\n    const onClickForm = (e) => {\ne.preventDefault(); //чтобы отключить стандартное поведение формы\n\n        console.log(\"controlled: \" + value1);\n        console.log(\"uncontrolled: \" + inputRef.current.value);\n    };\n\n    return (\n        <form onSubmit={onClickForm}>\n            <input \n                placeholder=\"controlled\" \n                value={value1}\n                onChange={(e) => setValue1(e.target.value)}\n            />\n            <input \n                placeholder=\"uncontrolled\" \n                ref={inputRef}\n            />\n            <button type=\"submit\">Отправить заявку на кредит</button>\n        </form>\n    );\n}\n3. Реализовать хук useFirstRender (при клике на кнопку скитает какой по счету сейчас произошел ререндер страницы)\nconst userfirstRender = () => {}\n\nexport default function RenderAfterFirstRender(props) {\n    const isFirstRender = userFirstRender();\n\n    if (isFirstRender) return \"unvero\";\n\n    return props.children;\n}\nРешение:\nconst useFirstRender = () => {\n  const isFirstRenderRef = useRef(true);\n\n  useEffect(() => {\n    isFirstRenderRef.current = false;\n  }, []);\n\n  return isFirstRenderRef.current;\n};"
      },
      {
        "timestamp": "2025-07-07 02:45:57",
        "content": "2025-07-07 02:45:57\n Sodnom Tyksheev -> 2071074234:\nАльфа банк\nЗп:250 \n\nВопросы: \n 1.Чем отличается useDebounce от trottle \n 2.Чем отличается flex от grid\n 3.Если указали максимальный z-index, но он не отработал почему?(не указали postiton нужный )\n 4.Способы оптимизации в вебе\n 5.Как можно добиться того чтоб не ждать загрузки шрифта?(font-dispaly:swap)\n 6.Рассказать про critical render path\n 7.Где мы можем подключить скрипт\n 8.Как можно оптимизировать загрузку CSS \n 9.Если у нас есть скрипт кот...",
        "full_content": "2025-07-07 02:45:57\n Sodnom Tyksheev -> 2071074234:\nАльфа банк\nЗп:250 \n\nВопросы: \n 1.Чем отличается useDebounce от trottle \n 2.Чем отличается flex от grid\n 3.Если указали максимальный z-index, но он не отработал почему?(не указали postiton нужный )\n 4.Способы оптимизации в вебе\n 5.Как можно добиться того чтоб не ждать загрузки шрифта?(font-dispaly:swap)\n 6.Рассказать про critical render path\n 7.Где мы можем подключить скрипт\n 8.Как можно оптимизировать загрузку CSS \n 9.Если у нас есть скрипт который внутри себя еще подключает скрипты, куда и где его подключать\n 10.Специфичность селекторов\n 11.Какая специфичность у * ?\n 12.Разница между блочными и строчными элементами\n 13.Как сделать так чтоб элемент выводился слева или справа а остальные элементы обтекали его(про свойство float)\n 14.Разница между type interface \n 15.Что такое перегрузка функции\n 16.Utility types какие знаешь\n Задача 1:\n1. //типизировать объект S \n\nconst s:SType = { \nname1: { role: 'user' }, name2: { role: 'admin'}, name3:{ role:'operator' }, name4: { role: 'admin' }, name5: { role: 'user' } \n} \n\ntype UserRole = 'user'|'admin'|'operator' \n\ntype UserObject={role:UserRole} \n\ntype SType = Record<string,UserObject> \n\n// 2. и написать функцию, которая вернёт объект, где ключами будут роли, // а значениями - массив того, что было ключами // (динамически, могут добавляться или удаляться новые роли) // то есть, в данном случае такой ответ будет: // \n{ // \"user\": [\"name1\", \"name5\"], // \"admin\": [\"name2\", \"name4\"], // \"operator\": [\"name3\"] // } \n\n\nfunction getRoles(s:SType):Record<UserRole,string[]>{ const res:Record<string,string[]> = {} \n\nfor(const [name,data] of Object.entries(s)){ \n  const role = data.role \n  if(!res[role]){\n      res[role] = [] }          res[role].push(name) \n} \n   return res \n} \n\nconsole.log(getRoles(s))\n\nЗадача 2:\n/// Написать полифил reduce\nArray. prototype. reduce = function(callb,initialVal)i if(typeof initialVal === 'undefined' ){ initialVal = this[0] let result = initialVal for(let i = 0; i < this.length;i++){ const res = callb(this[i], result,i,this) result = res return result ｝ const arr = [1, 3, 2] • arr.reduce((cur, acc, i, arr) => { return cur + acc;"
      },
      {
        "timestamp": "2025-07-04 06:55:05",
        "content": "2025-07-04 06:55:05\n Ruslan -> 2071074234:\nАльфа-банк техсобес 03.07\nВопросы по резюме:\nКак оптимизировали таблицы?\nГде хранили данные?\nКак работали с SSE и Websocket?\nИх отличия?\nРерендеры в Реакт, как избегать?\nКак оптимизировать?\nКакие средства для оптимизации использовал, где смотрел метрики?\nВопрос про MobX почему он?\nКак  mobX  справлялся с большими данными на фронте? не лагал?\nПочему использовали Zustand?\nПлюсы минусы их, отличия от Redux?\nТеория:\nReact -> хуки в реакт? какие? что делают?...",
        "full_content": "2025-07-04 06:55:05\n Ruslan -> 2071074234:\nАльфа-банк техсобес 03.07\nВопросы по резюме:\nКак оптимизировали таблицы?\nГде хранили данные?\nКак работали с SSE и Websocket?\nИх отличия?\nРерендеры в Реакт, как избегать?\nКак оптимизировать?\nКакие средства для оптимизации использовал, где смотрел метрики?\nВопрос про MobX почему он?\nКак  mobX  справлялся с большими данными на фронте? не лагал?\nПочему использовали Zustand?\nПлюсы минусы их, отличия от Redux?\nТеория:\nReact -> хуки в реакт? какие? что делают?\nОчистка? как делать отписки от событий? (cleanup - return)\nuseCallback  что такое? \nЧто провоцирует ререндер? \nКак насильно совершить ререндер?\nЧто такое forceUpdate?\nЧто такое Разделение ответственности?\nКакие архитектурные подходы есть? smart/dumb  подход?\nОптимизация CRP? Как оптимизировать CSS?\nЧто делает contain?\nHTTP? HTTPS?\nКак бы ты оптимизировал загрузку деревьев?\nJSON Schema? required?\nЕсли используешь JSON.stringify какие могут быть проблемы?\nFlexbox  и Grid разница?\nКак отцентрировать там и там элементы?\nКак сделать адаптив без медиа запросов?\nКакие есть величины? Что такое px, pt, em, rem, vh, vw?\nСуществуют ли типы в TypeScript во время исполнения?\nЧто такое TypeGuerds?\nЯвное кастование плохо?\nРазница LocalStorage/SessionStorage?\nСинхронный асинхронный кто?\nЗадачи!\n// Задача: Добавить валидацию email (регулярное выражение)\n// и блокировку кнопки при ошибке.\nconst Form = () => {\n  const [email, setEmail] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const val = e.target.value;\n    setEmail(val);\n\n    if (!emailRegex.test(val)) {\n      setError(\"Неверный формат email\");\n    } else {\n      setError(\"\");\n    }\n  };\n\n  return (//\n    <>\n      <input \ntype=\"email\" \nvalue={email} \nonChange={handleChange} />\n      <button \ndisabled={!!error}\n>Отправить</button>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n    </>\n  );\n};\nЗадача на тротл\nfunciton heavyCalc(e)  {// long 100ms \n    \n}\n\nthrottle = (fn, delay) => {\n    let lastCall = 0\n    \n    return function (...args) {\n        const now = Date.now();\n        if (now - lastCall >= delay) {\n            lastCall = now;\n            fn.apply(this, args);\n        }\n    }\n}\n\nthrottledHeavyCalc = throttle(heavyCalc, 100)\ndroppable.on('dragover', throttledHeavyCalc) \n    \n};"
      },
      {
        "timestamp": "2025-06-23 17:25:10",
        "content": "2025-06-23 17:25:10\n Василий -> 2071074234:\nАльфа Банк - команду для меня ещё не выбрали - техничка\n\n1) Много вопросов по опыту (что делал, а как делал, какой стек, чего хочешь и прочее)\n2) \nvar a = {\n  firstName: 'Bill',\n  lastName: 'Ivanov',\n  sayName: function() {\n    console.log(this.firstName);\n  },\n  sayLastName: () => {\n    console.log(this.lastName);\n  }\n};\n\na.sayName();          // Bill\nvar b = a.sayName;\nb();                  // undefined (в строгом режиме — ошибка)\na.sayName.bind({ fi...",
        "full_content": "2025-06-23 17:25:10\n Василий -> 2071074234:\nАльфа Банк - команду для меня ещё не выбрали - техничка\n\n1) Много вопросов по опыту (что делал, а как делал, какой стек, чего хочешь и прочее)\n2) \nvar a = {\n  firstName: 'Bill',\n  lastName: 'Ivanov',\n  sayName: function() {\n    console.log(this.firstName);\n  },\n  sayLastName: () => {\n    console.log(this.lastName);\n  }\n};\n\na.sayName();          // Bill\nvar b = a.sayName;\nb();                  // undefined (в строгом режиме — ошибка)\na.sayName.bind({ firstName: 'Boris' })(); // Boris\na.sayName();          // Bill\na.sayLastName();      // undefined (стрелочная функция не имеет своего this)\na.sayName.bind({ firstName: 'Boris' }).bind({ firstName: 'Tom' })(); // Boris (bind нельзя перезаписать)\na.sayLastName.bind({ lastName: 'Petrov' })(); // undefined (стрелочная функция игнорирует bind)\n3) Простая задача на понимание eventloop(рассказать про него подробно, что к чему относится)\n4) 3 функции на рекурсивный вызов в синхронном порядке, через settimeout и promise, что будет с браузером?\n5)  \nconst atm = (nominals, amount, limits) => {\n  // 1) Собираем массив { nominal, limit } и сортируем по убыванию номинала\n  const cash = nominals\n    .map((nominal, i) => ({ nominal, limit: limits[i] || 0 }))\n    .sort((a, b) => b.nominal - a.nominal);\n\n  let remaining = amount;\n  const result = [];\n\n  // 2) Жадно берём по каждому номиналу, но не больше чем в limit\n  for (const { nominal, limit } of cash) {\n    if (remaining <= 0) break;\n\n    const need = Math.floor(remaining / nominal);\n    const take = Math.min(need, limit);\n\n    if (take > 0) {\n      result.push(`${nominal} x ${take}`);\n      remaining -= nominal * take;\n    }\n  }\n\n  // 3) Проверяем, удалось ли точно выдать сумму\n  if (remaining !== 0) {\n    throw new Error(\n      `Невозможно выдать сумму ${amount}. Остаток ${remaining} не охвачен имеющимися купюрами.`\n    );\n  }\n\n  return result;\n};"
      },
      {
        "timestamp": "2025-06-19 10:48:48",
        "content": "2025-06-19 10:48:48\n Максим Соломыкин -> 2071074234:\nКомпания - Альфа банк (команда)\nВакансия - hr написала\nЗП - 250к",
        "full_content": "2025-06-19 10:48:48\n Максим Соломыкин -> 2071074234:\nКомпания - Альфа банк (команда)\nВакансия - hr написала\nЗП - 250к"
      },
      {
        "timestamp": "2025-04-09 17:10:28",
        "content": "2025-04-09 17:10:28\n Максим Соломыкин -> 2071074234:\nКомпания - Альфа банк(знакомство)\nВакансия - https://hh.ru/vacancy/118439154?from=share_ios\nЗП - от 250 000 на руки\n\nВопросы\nПро себя\nПро опыт\nПочему использовали socket io\nГлавный факап на работе\nКакие были процессы в команде\nСамая интересная задача\nСостав команды \nПисал ли документацию",
        "full_content": "2025-04-09 17:10:28\n Максим Соломыкин -> 2071074234:\nКомпания - Альфа банк(знакомство)\nВакансия - https://hh.ru/vacancy/118439154?from=share_ios\nЗП - от 250 000 на руки\n\nВопросы\nПро себя\nПро опыт\nПочему использовали socket io\nГлавный факап на работе\nКакие были процессы в команде\nСамая интересная задача\nСостав команды \nПисал ли документацию"
      },
      {
        "timestamp": "2025-04-07 12:17:33",
        "content": "2025-04-07 12:17:33\n Максим Соломыкин -> 2071074234:\nКомпания - Альфа-банк\nЗП - от 250к\nВакансия - https://hh.ru/vacancy/118439154?from=share_ios\nЭтап - Знакомство\n\nВопросы \n1. Про себя\n2. Про команду\n3. Какой был флоу\n4. Как проводил код-ревью\n5. Почему переписывали на TS проект\n6. Какие есть уязвимости в браузере\n7. Разница между хэшированием и шифрованием",
        "full_content": "2025-04-07 12:17:33\n Максим Соломыкин -> 2071074234:\nКомпания - Альфа-банк\nЗП - от 250к\nВакансия - https://hh.ru/vacancy/118439154?from=share_ios\nЭтап - Знакомство\n\nВопросы \n1. Про себя\n2. Про команду\n3. Какой был флоу\n4. Как проводил код-ревью\n5. Почему переписывали на TS проект\n6. Какие есть уязвимости в браузере\n7. Разница между хэшированием и шифрованием"
      },
      {
        "timestamp": "2025-04-04 09:38:45",
        "content": "2025-04-04 09:38:45\n Матвей Захаров -> 2071074234:\nКомпания: Альфа банк (3 этап с командой)\nВакансия: https://hh.ru/vacancy/118439154?hhtmFrom=employer_vacancies\nЗапись: https://youtu.be/am_5-EB5AAU\n\nВопросы:\n- О себе, опыте, какую ценность приносил для пользователей\n- Вопросы по текущей команде\n- В каком виде приходила задача\n- Приносил ли что-то в бэклог\n- Что ищешь на новом месте, с чем хотел бы работать\n- Что для тебя некомфортные процессы в рамках работы",
        "full_content": "2025-04-04 09:38:45\n Матвей Захаров -> 2071074234:\nКомпания: Альфа банк (3 этап с командой)\nВакансия: https://hh.ru/vacancy/118439154?hhtmFrom=employer_vacancies\nЗапись: https://youtu.be/am_5-EB5AAU\n\nВопросы:\n- О себе, опыте, какую ценность приносил для пользователей\n- Вопросы по текущей команде\n- В каком виде приходила задача\n- Приносил ли что-то в бэклог\n- Что ищешь на новом месте, с чем хотел бы работать\n- Что для тебя некомфортные процессы в рамках работы"
      },
      {
        "timestamp": "2025-04-02 18:38:12",
        "content": "2025-04-02 18:38:12\n Максим Соломыкин -> 2071074234:\nКомпания - Альфа Банк\nВакансия - hr написала\nЗП - от 250к\n\nВопросы:\n- React что это?\n- virtual dom?\n- хуки, новые хуки\n- useEffect vs useLayoutEffect\n- controlled uncontrolled comp.\n- useRef\n- контекст в React?\n- с какими библ-ми работал?\nВо время задач:\n- виды экспорта?\n- useEffect, когда срабатывет?\n- разница стрелочные и обычные функции? \n- EventLoop\n- typescript что и зачем?\n- utility types?\n- omit vs exclude\n\nЗадачи все как тут:\nhttps://t...",
        "full_content": "2025-04-02 18:38:12\n Максим Соломыкин -> 2071074234:\nКомпания - Альфа Банк\nВакансия - hr написала\nЗП - от 250к\n\nВопросы:\n- React что это?\n- virtual dom?\n- хуки, новые хуки\n- useEffect vs useLayoutEffect\n- controlled uncontrolled comp.\n- useRef\n- контекст в React?\n- с какими библ-ми работал?\nВо время задач:\n- виды экспорта?\n- useEffect, когда срабатывет?\n- разница стрелочные и обычные функции? \n- EventLoop\n- typescript что и зачем?\n- utility types?\n- omit vs exclude\n\nЗадачи все как тут:\nhttps://t.me/c/2071074234/489/113977\n+ та что на фотке"
      },
      {
        "timestamp": "2025-04-01 12:08:21",
        "content": "2025-04-01 12:08:21\n Матвей Захаров -> 2071074234:\nКомпания: Альфа банк (с командой)\nВакансия: https://hh.ru/vacancy/118439154?hhtmFrom=employer_vacancies\n\nВопросы:\n- О себе\n- Опыт работы с системными или бизнес аналитиками, как взаимодействовал с ними\n- В каком виде приходили задачи\n- Занимался ли вопросами оптимизации кода/работа с безопасностью\n- Было ли взаимодействие с бизнесом, как строилось\n- Если видишь, что задачу от бизнеса можно сделать по-другому, как поступишь (и схожие вопросы, кас...",
        "full_content": "2025-04-01 12:08:21\n Матвей Захаров -> 2071074234:\nКомпания: Альфа банк (с командой)\nВакансия: https://hh.ru/vacancy/118439154?hhtmFrom=employer_vacancies\n\nВопросы:\n- О себе\n- Опыт работы с системными или бизнес аналитиками, как взаимодействовал с ними\n- В каком виде приходили задачи\n- Занимался ли вопросами оптимизации кода/работа с безопасностью\n- Было ли взаимодействие с бизнесом, как строилось\n- Если видишь, что задачу от бизнеса можно сделать по-другому, как поступишь (и схожие вопросы, касающиеся твоей активности в команде/с бизнесом)\n- Как бы объяснил сложный технический вопрос простым языком\n- Самая сложная задача, хобби, дальнейшее развитие"
      },
      {
        "timestamp": "2025-03-24 12:44:25",
        "content": "2025-03-24 12:44:25\n Матвей Захаров -> 2071074234:\nКомпания: Альфа банк\nВакансия: https://hh.ru/vacancy/118439154?hhtmFrom=employer_vacancies\n\nЗадачи со скринов + много сопутствующих вопросов по этой теории",
        "full_content": "2025-03-24 12:44:25\n Матвей Захаров -> 2071074234:\nКомпания: Альфа банк\nВакансия: https://hh.ru/vacancy/118439154?hhtmFrom=employer_vacancies\n\nЗадачи со скринов + много сопутствующих вопросов по этой теории"
      },
      {
        "timestamp": "2024-10-11 10:45:49",
        "content": "2024-10-11 10:45:49\n Михаил -> 2071074234:\nАльфа Банк\nвакансия hh.ru/vacancy/107792634\nзп 200к",
        "full_content": "2024-10-11 10:45:49\n Михаил -> 2071074234:\nАльфа Банк\nвакансия hh.ru/vacancy/107792634\nзп 200к"
      },
      {
        "timestamp": "2024-10-02 10:47:12",
        "content": "2024-10-02 10:47:12\n аыеъа -> 2071074234:\nАльфа-Банк Финалка\nЗп: 250к\nВакансия: https://digital.alfabank.ru/vacancies/frontend_developerreact_redux_105581\nВопросы:\nПочему уходишь и какие есть проблемы на текущем проекте\nСамая сложная задача\nЧто нравится во фронтенде\nЧто внедрил на продукт по собственной инициативе\nОткуда берешь информацию\nЧто для тебя крутая команда\nЕсли бы пришлось создавать новый проект с 0, какие технологии бы ты выбрал\nРаботал ли с сагами\nЧто будешь делать если понял что зад...",
        "full_content": "2024-10-02 10:47:12\n аыеъа -> 2071074234:\nАльфа-Банк Финалка\nЗп: 250к\nВакансия: https://digital.alfabank.ru/vacancies/frontend_developerreact_redux_105581\nВопросы:\nПочему уходишь и какие есть проблемы на текущем проекте\nСамая сложная задача\nЧто нравится во фронтенде\nЧто внедрил на продукт по собственной инициативе\nОткуда берешь информацию\nЧто для тебя крутая команда\nЕсли бы пришлось создавать новый проект с 0, какие технологии бы ты выбрал\nРаботал ли с сагами\nЧто будешь делать если понял что задача описана не правильно\nЧто будешь делать если упадёт прод\nЧто будешь делать если появилась срочная задача\nРассказать про хобби\nЕсли будет конфликт бека и фронта, но оба считают что они правы, что будешь делать?"
      },
      {
        "timestamp": "2024-10-02 07:35:52",
        "content": "2024-10-02 07:35:52\n Stepan Ch. -> 2071074234:\nАльфа-Банк\nЗп: 250к\nВопросы:\n\n1. Расскажи про опыт\n2. Redux\n3. Actions\n4. configureStore\n5. Conditional Types\n6. Virtual Dom\n7. Fiber\n8. Rest API\n9. Promise\n10. Call, apply, bind\n11. Garbage Collector\n12. Замыкание\n\nimport \"./styles.css\";\nimport React from \"react\";\n\ninterface DataItem {\n  id: number;\n  name: string;\n  category: string;\n}\n\ninterface Category {\n  id: number;\n  name: string;\n  localized_ru: string;\n  localized_en: string;\n}\n\nasync func...",
        "full_content": "2024-10-02 07:35:52\n Stepan Ch. -> 2071074234:\nАльфа-Банк\nЗп: 250к\nВопросы:\n\n1. Расскажи про опыт\n2. Redux\n3. Actions\n4. configureStore\n5. Conditional Types\n6. Virtual Dom\n7. Fiber\n8. Rest API\n9. Promise\n10. Call, apply, bind\n11. Garbage Collector\n12. Замыкание\n\nimport \"./styles.css\";\nimport React from \"react\";\n\ninterface DataItem {\n  id: number;\n  name: string;\n  category: string;\n}\n\ninterface Category {\n  id: number;\n  name: string;\n  localized_ru: string;\n  localized_en: string;\n}\n\nasync function getData(): Promise<DataItem[]> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve([\n        { id: 1, name: \"potato\", category: \"vegetable\" },\n        { id: 2, name: \"cucumber\", category: \"vegetable\" },\n        { id: 3, name: \"orange\", category: \"fruit\" },\n        { id: 4, name: \"pumpkin\", category: \"vegetable\" },\n        { id: 5, name: \"melon\", category: \"fruit\" },\n      ]);\n    }, 2000);\n  });\n}\n\nasync function getCategories(): Promise<Category[]> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve([\n        {\n          id: 1,\n          name: \"vegetable\",\n          localized_ru: \"Овощ\",\n          localized_en: \"Vegetable\",\n        },\n        { id: 2, name: \"fruit\", localized_ru: \"Фрукт\", localized_en: \"Fruit\" },\n      ]);\n    }, 2000);\n  });\n}\n\nexport default function App() {\n  const [items, setItems] = React.useState<DataItem[]>([]);\n  const [category, setCategory] = React.useState<Category[]>([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    setIsLoading(true);\n    Promise.all([getData(), getCategories()])\n      .then(([data, categories]) => {\n        setItems(data);\n        setCategory(categories);\n      })\n      .catch(console.error)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const getCategoryName = (categoryName: string) => {\n    const foundCategory = category.find(\n      (category) => category.name === categoryName\n    );\n    return foundCategory ? foundCategory.localized_ru : \"Неизвестно\";\n  };\n\n  if (isLoading) return <p>Loading...</p>;\n\n  return (\n    <div className=\"App\">\n      {items.map((item) => (\n        <React.Fragment key={item.id}>\n          <p>\n            {item.name} - {getCategoryName(item.category)}\n          </p>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}"
      },
      {
        "timestamp": "2024-09-30 10:59:34",
        "content": "2024-09-30 10:59:34\n аыеъа -> 2071074234:\nАльфа-Банк Финалка \nЗП: от 250к  \nВакансия: https://digital.alfabank.ru/vacancies/frontend_developerreact_redux_105581 \nВопросы: \nРасскажи про себя\nКакие конфликты были?\nКакие самые крупные факапы?\nЧто ищешь на новом месте?\nЕсли прилетели 2 срочные задачи с одинаковым приоритетом, но время есть только на одну, что будешь делать?\nЕсли в середине спринта понял что не успеваешь доделать задачу, то что сделаешь?\nТвои хобби?\nПочему Фронтенд?\nС какими стейт ме...",
        "full_content": "2024-09-30 10:59:34\n аыеъа -> 2071074234:\nАльфа-Банк Финалка \nЗП: от 250к  \nВакансия: https://digital.alfabank.ru/vacancies/frontend_developerreact_redux_105581 \nВопросы: \nРасскажи про себя\nКакие конфликты были?\nКакие самые крупные факапы?\nЧто ищешь на новом месте?\nЕсли прилетели 2 срочные задачи с одинаковым приоритетом, но время есть только на одну, что будешь делать?\nЕсли в середине спринта понял что не успеваешь доделать задачу, то что сделаешь?\nТвои хобби?\nПочему Фронтенд?\nС какими стейт менеджарами работал?\nFlow задачи на проекте\nFlow CI/CD на проекте\nПочему банковская сфера?\nКем ты видишь себя через 3 года (серьёзно?) \nЧто не нравится на предыдущем месте работы?\nПоследние 3 фильма и сериала которые смотрел(чел хотел услышать АНИМЕ) \nСмотрю ли АНИМЕ \nПереродиться в собаку или пчёлку? И почему? (в собаку)"
      },
      {
        "timestamp": "2024-09-30 07:34:43",
        "content": "2024-09-30 07:34:43\n аыеъа -> 2071074234:\nАльфа-Банк ТехСобес\nЗП: от 250к\nВакансия: https://digital.alfabank.ru/vacancies/frontend_developerreact_redux_105581\nУспех: ✅\nВидео:",
        "full_content": "2024-09-30 07:34:43\n аыеъа -> 2071074234:\nАльфа-Банк ТехСобес\nЗП: от 250к\nВакансия: https://digital.alfabank.ru/vacancies/frontend_developerreact_redux_105581\nУспех: ✅\nВидео:"
      },
      {
        "timestamp": "2024-09-24 16:20:10",
        "content": "2024-09-24 16:20:10\n аыеъа -> 2071074234:\nАльфа-Банк (Интервью с командой)\nЗП: не обсуждали\nВакансия: https://digital.alfabank.ru/vacancies/frontend_developerreact_redux_105581\nВопросы:\nЧасто задавали несколько вопросов вглубь на ответ\nРассказать про опыт (какие технологии использовал, какие проблемы встречал, где был ui kit)\nКакие были конфликты, как их решал (конфликты с беком, бизнесом, командой)\nКак выбирали технологии на проект (Как и кто выбирал, как происходило обсуждение, твоя роль в обс...",
        "full_content": "2024-09-24 16:20:10\n аыеъа -> 2071074234:\nАльфа-Банк (Интервью с командой)\nЗП: не обсуждали\nВакансия: https://digital.alfabank.ru/vacancies/frontend_developerreact_redux_105581\nВопросы:\nЧасто задавали несколько вопросов вглубь на ответ\nРассказать про опыт (какие технологии использовал, какие проблемы встречал, где был ui kit)\nКакие были конфликты, как их решал (конфликты с беком, бизнесом, командой)\nКак выбирали технологии на проект (Как и кто выбирал, как происходило обсуждение, твоя роль в обсуждении и что ты предлагал, какие были споры)\nТесты (Писал ли, в каких ситуациях)\nЧем не нравится текущий проект и почему ухожу \nЧто ищу на новом месте работы"
      },
      {
        "timestamp": "2024-08-17 17:38:04",
        "content": "2024-08-17 17:38:04\n Руслан -> 2071074234:\nselecty (альфа банк) 2й этап тех собес \n— зп: от 270к\n— вакансия: hr написала\n— задачи: \n/*\n  Что произойдет при клике по кнопке?\n*/\nexport default function Counter() {\n  let count = 0;\n\n  const changeCount = () => {\n    count += 1;\n  };\n\n  return (\n    <div>\n      <div>Count = {count}</div>\n\n      <button onClick={changeCount}>Кнопка</button>\n    </div>\n  );\n}\n\n/*\n Вывести значения полей в консоль, при клиике на форму, \n учитывая что первый input contr...",
        "full_content": "2024-08-17 17:38:04\n Руслан -> 2071074234:\nselecty (альфа банк) 2й этап тех собес \n— зп: от 270к\n— вакансия: hr написала\n— задачи: \n/*\n  Что произойдет при клике по кнопке?\n*/\nexport default function Counter() {\n  let count = 0;\n\n  const changeCount = () => {\n    count += 1;\n  };\n\n  return (\n    <div>\n      <div>Count = {count}</div>\n\n      <button onClick={changeCount}>Кнопка</button>\n    </div>\n  );\n}\n\n/*\n Вывести значения полей в консоль, при клиике на форму, \n учитывая что первый input controlled, а второй input uncontrolled.\n*/\nexport default () => {\n  const onClickForm = () => {\n    console.log(\"controlled: \" /* вставить value1 */);\n    console.log(\"uncontrolled: \" /* вставить value2 */);\n  };\n\n  return (\n    <form onClick={onClickForm}>\n      <input placeholder=\"controlled\" />\n      <input placeholder=\"uncontrolled\" />\n\n      <button>Отправить заявку на кредит</button>\n    </form>\n  );\n};\n\n/*\n  Реализовать хук useFirstRender\n*/\nconst useFirstRender = () => {};\n\nexport default function RenderAfterFirstRender(props) {\n  const isFirstRender = useFirstRender();\n\n  if (isFirstRender) return \"ничего\";\n\n  return props.children;\n}\n\nfunction print() {\n console.log(1);\n}\nasync function foo(){\n console.log(2);\n await print();\n console.log(3);\n}\nconsole.log(4);\nfoo();\nconsole.log(5);\n\nconsole.log('start'); // Выводит 'start' в консоль\n\nsetTimeout(() => console.log('timeout'), 0); // Ставится в очередь на выполнение через 0 миллисекунд\n\nnew Promise((resolve, reject) => {\n    console.log('promise constructor'); // Выводит 'promise constructor' в консоль\n    reject(); // Отклоняет промис, вызывая цепочку catch\n})\n.then(() => console.log('promise')) // Этот then не выполнится, т.к. промис отклонён\n.catch(() => console.log('promise1')) // Выводит 'promise1' в консоль, т.к. промис отклонён\n.catch(() => console.log('promise2')) // Эта цепочка catch выполнится и выведет 'promise2'\n.then(() => console.log('promise3')) // Выполнится после catch, выводя 'promise3'\n.then(() => console.log('promise4')); // Выполнится после предыдущего then, выводя 'promise4'\n\nconsole.log('final'); // Выводит 'final' в консоль\n\nvar a = {\n    firstName: 'Bill',\n    lastName: 'Ivanov',\n    sayName: function() {\n        console.log(this.firstName);\n    },\n    sayLastName: () => {\n        console.log(this.lastName);\n    }\n};\n\na.sayName(); // 'Bill'\n\nvar b = a.sayName;\n\nb(); // undefined\n\na.sayName.bind({ firstName: 'Boris' })(); // 'Boris'\n\na.sayName(); // 'Bill'\na.sayLastName(); // undefined\n\nimport React from \"react\";\nimport sendMetric from \"metrics\";\nimport sendData from \"data\";\nimport bigComputations from \"bigComputations\";\n\nconst pleaseReviewMe = (props) => {\n    const [data, setDate] = React.useState(bigComputations(props.argument));\n    const [items] = useState([{ id: 1 }, { id: 2 }, { id: 3 }]);\n\n    React.useEffect(() => {\n        document.addEventListener(\"click\", () => {\n            sendMetric(\"click\");\n        });\n    }, []);\n\n    const click = React.useCallback((id) => {\n        sendData(data, id);\n    }, [data]);\n\n    return (\n        <React.Fragment>\n            {items.map((item) => (\n                <div onClick={() => click(item.id)} key={item.id}>\n                    {item.id}\n                </div>\n            ))}\n        </React.Fragment>\n    );\n};\n\nexport pleaseReviewMe;"
      },
      {
        "timestamp": "2024-06-25 07:54:42",
        "content": "2024-06-25 07:54:42\n Александр Горохов -> 2071074234:\nНазвание компании: Альфа-банк\nЗП: 200\n\nПреимущества реакт\nДеклоративность\nКлассовые компоненты, отличия от функций\nuseRef\nkey когда мапим список\nЗадачи:",
        "full_content": "2024-06-25 07:54:42\n Александр Горохов -> 2071074234:\nНазвание компании: Альфа-банк\nЗП: 200\n\nПреимущества реакт\nДеклоративность\nКлассовые компоненты, отличия от функций\nuseRef\nkey когда мапим список\nЗадачи:"
      },
      {
        "timestamp": "2024-06-24 20:57:50",
        "content": "2024-06-24 20:57:50\n dm . -> 2071074234:\n- Альфа-банк, тех. скриннинг (бот в тг)\n- Ссылки нет, рекрутер написал.\n- ЗП: от 250 net \n- Задачи:\n1) Около 12 задачек на вывод в консоль, все простые на несколько строчек. \nПроверяют знание функций, областей видимости, контекст, евент луп и промисы.\nМожно успеть вручную напечатать в консоль и проверить.\n2) Около 4 задачек теоритических, тоже можно успеть загуглить.\n- Комментарий: на каждый вопрос ограничение в 60 сек, нужно выбирать из предложенных вари...",
        "full_content": "2024-06-24 20:57:50\n dm . -> 2071074234:\n- Альфа-банк, тех. скриннинг (бот в тг)\n- Ссылки нет, рекрутер написал.\n- ЗП: от 250 net \n- Задачи:\n1) Около 12 задачек на вывод в консоль, все простые на несколько строчек. \nПроверяют знание функций, областей видимости, контекст, евент луп и промисы.\nМожно успеть вручную напечатать в консоль и проверить.\n2) Около 4 задачек теоритических, тоже можно успеть загуглить.\n- Комментарий: на каждый вопрос ограничение в 60 сек, нужно выбирать из предложенных вариантов ответа. \nВсе вопросы довольно простые.\n- Фидбек: прошел."
      },
      {
        "timestamp": "2024-03-05 20:50:33",
        "content": "2024-03-05 20:50:33\n Daniil Max -> 2071074234:\n— Название компании: Альфа Банк [знакомство с командой, последний этап)\n— Ссылка на вакансию: потеряна \n— ЗП: 200К\n— Задачи: софтскиллы \n— Запись на ютуб: https://youtu.be/zwCR809ItEM\n— Успех собеса: ✅️\n— Фитбек о собесе от HR: точно не помню, что было дальше, но отказался в альфа идти. \n— Комментарий: на этот раз знакомство с командой. Знакомлюсь и задаю много вопросов\n\n#middle #альфа_банк",
        "full_content": "2024-03-05 20:50:33\n Daniil Max -> 2071074234:\n— Название компании: Альфа Банк [знакомство с командой, последний этап)\n— Ссылка на вакансию: потеряна \n— ЗП: 200К\n— Задачи: софтскиллы \n— Запись на ютуб: https://youtu.be/zwCR809ItEM\n— Успех собеса: ✅️\n— Фитбек о собесе от HR: точно не помню, что было дальше, но отказался в альфа идти. \n— Комментарий: на этот раз знакомство с командой. Знакомлюсь и задаю много вопросов\n\n#middle #альфа_банк"
      }
    ]
  },
  {
    "company": "Linked Helper",
    "count": 20,
    "records": [
      {
        "timestamp": "2025-05-09 06:53:18",
        "content": "2025-05-09 06:53:18\n Yuri Trondin -> 2071074234:\nКомпания: Linked Helper\nВакансия: HR написала\nЗП: называл от 350  (вилка вроде 3.5-5$)\nВопросы:\nКак ранее в чате https://t.me/c/2071074234/489/89751\nв разнобой и немного видоизмененные\nплюс эта задача \n/**\n* Написать функцию sostavChisla(massivChisel: number[], chislo: number),\n  которая бы находила все возможные комбинации чисел из massivChisel,\n  сумма которых равна chislo. При этом:\n  1) massivChisel содержит, только уникальные положительные чи...",
        "full_content": "2025-05-09 06:53:18\n Yuri Trondin -> 2071074234:\nКомпания: Linked Helper\nВакансия: HR написала\nЗП: называл от 350  (вилка вроде 3.5-5$)\nВопросы:\nКак ранее в чате https://t.me/c/2071074234/489/89751\nв разнобой и немного видоизмененные\nплюс эта задача \n/**\n* Написать функцию sostavChisla(massivChisel: number[], chislo: number),\n  которая бы находила все возможные комбинации чисел из massivChisel,\n  сумма которых равна chislo. При этом:\n  1) massivChisel содержит, только уникальные положительные числа (> 0)\n  2) в комбинации не должно быть повторений чисел\n  3) все комбинации должны быть уникальными\n  @param massivChisel: number[]\n  @param chislo: number\n  @return Array<Array<number>>\n*/\n//ответ\nfunction sostavChisla(massivChisel, chislo) {\n    const result = [];\n    function findCombinations(start, currentCombination, currentSum) {\n        if (currentSum === chislo) {\n            result.push([...currentCombination]);\n            return;\n        }\n        if (currentSum > chislo) {return}\n        for (let i = start; i < massivChisel.length; i++) {\n            currentCombination.push(massivChisel[i]);\n            findCombinations(i + 1, currentCombination, currentSum + massivChisel[i]);\n            currentCombination.pop();\n        }\n    }\n    findCombinations(0, [], 0);\n    return result;\n}\n\nи постгрес задача: https://datalemur.com/questions/sql-well-paid-employees\n\nНа все время собеса попросила пошарить экран целиком, проверила, что у меня ничего не запущено в трее и в браузере, заставила вырубить второй монитор. \n\nЗапись сделалась стремно, почему-то только белый экран со звуком только собеседующего."
      },
      {
        "timestamp": "2025-02-06 13:24:38",
        "content": "2025-02-06 13:24:38\n Марк -> 2071074234:\nНазвание: linked helper (первый этап)\nВакансия: https://hh.ru/vacancy/116265495?query=linked+helper&hhtmFrom=vacancy_search_list\nЗП: 3500$ - 5500$\nЗадачи:\n1. Что выведет в консоль?\nfunction updateProfile(person) {\n    person = {\n        name: 'Peter'\n    };\n}\n\nfunction process() {\n    let person = { name: 'Mike' };\n    updateProfile(person);\n    console.log(person);\n}\n\nprocess();\n2. Что выведет в консоль?\nfunction makeGroup() {\n    let people = [];\n\n    l...",
        "full_content": "2025-02-06 13:24:38\n Марк -> 2071074234:\nНазвание: linked helper (первый этап)\nВакансия: https://hh.ru/vacancy/116265495?query=linked+helper&hhtmFrom=vacancy_search_list\nЗП: 3500$ - 5500$\nЗадачи:\n1. Что выведет в консоль?\nfunction updateProfile(person) {\n    person = {\n        name: 'Peter'\n    };\n}\n\nfunction process() {\n    let person = { name: 'Mike' };\n    updateProfile(person);\n    console.log(person);\n}\n\nprocess();\n2. Что выведет в консоль?\nfunction makeGroup() {\n    let people = [];\n\n    let i = 0;\n    while (i < 100) {\n        let man = function () {\n            alert(i);\n        };\n        people.push(man);\n        i++;\n    }\n\n    return people;\n}\n\nlet group = makeGroup();\ngroup[0](); // Вызывает alert со значением переменной `i`\ngroup[5](); // Вызывает alert со значением переменной `i`\n3. Что выведет в консоль?\n(function question() {\n    const p = Promise.reject();\n\n    p\n        .then(() => console.log('5'))\n        .catch(() => console.log('6'))\n        .then(() => console.log('7'));\n\n    p\n        .catch(() => console.log('10'))\n        .then(() => console.log('11'))\n        .catch(() => console.log('12'));\n})();\n4. Что выведет в консоль?\nfunction Example() {\n    const [count, setCount] = React.useState(0);\n\n    React.useEffect(() => {\n        const id = setInterval(() => {\n            setCount(count + 1);\n        }, 1000);\n\n        return () => clearInterval(id);\n    }, []);\n\n    console.log(count);\n\n    return <h1>{count}</h1>;\n}\n5. Что выведет в консоль?\nfunction Example() {\n    const [flag, setFlag] = React.useState(false);\n\n    React.useEffect(() => {\n        setFlag(true);\n        console.log('effect run');\n\n        return () => console.log('effect clean up');\n    }, [flag]);\n\n    console.log('render');\n\n    return null;\n}\n6. Реши алгоритм который пройдет все тест кейсы(прошел):\n/**\n * Написать функцию sostavChisla(massivChisel: number[], chislo: number),\n * которая бы находила все возможные комбинации чисел из massivChisel,\n * сумма которых равна chislo. При этом:\n * 1) massivChisel содержит только уникальные положительные числа (> 0)\n * 2) в комбинации не должно быть повторений чисел\n * 3) все комбинации должны быть уникальными\n *\n * Для проверки работоспособности функции запустить runTests()\n *\n * @param massivChisel: number[]\n * @param chislo: number\n * @return Array<Array<number>>\n */\nfunction sostavChisla(massivChisel, chislo) {\n    const result = [];\n\n    massivChisel.sort((a, b) => a - b);\n\n    function findCombinations(currentCombination, remainingSum, startIndex) {\n        if (remainingSum === chislo) {\n            result.push([...currentCombination]);\n            return;\n        }\n\n        for (let i = startIndex; i < massivChisel.length; i++) {\n            const currentNumber = massivChisel[i];\n\n            if (currentNumber + remainingSum > chislo) continue;\n\n            currentCombination.push(currentNumber);\n            findCombinations(\n                currentCombination,\n                remainingSum + currentNumber,\n                i + 1\n            );\n            currentCombination.pop();\n        }\n    }\n\n    findCombinations([], 0, 0);\n\n    console.log(result);\n    return result;\n}"
      },
      {
        "timestamp": "2025-02-04 16:49:17",
        "content": "2025-02-04 16:49:17\n Лёша -> 2071074234:\nКомпания: linked helper (1 этап)\nзп: от 2000$ до 3500$ на руки\nСсылка на вакансию: HR сам написал\n\nЗапись: черный экран без звука собеседующего (спасибо obs) 🤷‍♂️🤷‍♂️🤷‍♂️\n\nНа всю часть задач и лайвкодинга нужно шарить экран.\nЗадачи: как в посте https://t.me/c/2071074234/489/89751 (мне их давали в разнобой).\nЛайвкодинг с ответом: \n/**\n* Написать функцию sostavChisla(massivChisel: number[], chislo: number),\n  которая бы находила все возможные комбинации чис...",
        "full_content": "2025-02-04 16:49:17\n Лёша -> 2071074234:\nКомпания: linked helper (1 этап)\nзп: от 2000$ до 3500$ на руки\nСсылка на вакансию: HR сам написал\n\nЗапись: черный экран без звука собеседующего (спасибо obs) 🤷‍♂️🤷‍♂️🤷‍♂️\n\nНа всю часть задач и лайвкодинга нужно шарить экран.\nЗадачи: как в посте https://t.me/c/2071074234/489/89751 (мне их давали в разнобой).\nЛайвкодинг с ответом: \n/**\n* Написать функцию sostavChisla(massivChisel: number[], chislo: number),\n  которая бы находила все возможные комбинации чисел из massivChisel,\n  сумма которых равна chislo. При этом:\n  1) massivChisel содержит, только уникальные положительные числа (> 0)\n  2) в комбинации не должно быть повторений чисел\n  3) все комбинации должны быть уникальными\n  @param massivChisel: number[]\n  @param chislo: number\n  @return Array<Array<number>>\n*/\n//ответ\nfunction sostavChisla(massivChisel, chislo) {\n    const result = [];\n    function findCombinations(start, currentCombination, currentSum) {\n        if (currentSum === chislo) {\n            result.push([...currentCombination]);\n            return;\n        }\n        if (currentSum > chislo) {return}\n        for (let i = start; i < massivChisel.length; i++) {\n            currentCombination.push(massivChisel[i]);\n            findCombinations(i + 1, currentCombination, currentSum + massivChisel[i]);\n            currentCombination.pop();\n        }\n    }\n    findCombinations(0, [], 0);\n    return result;\n}"
      },
      {
        "timestamp": "2024-12-03 12:03:14",
        "content": "2024-12-03 12:03:14\n Michael Iskovski -> 2071074234:\n— Название компании: Linked Helper\n— Вакансия: https://hh.ru/vacancy/112183741\n— Тип собеседования: Задачи на вывод консоли\n— Запись: Не сохранилась. Скрины задач в архиве\n— Успех собеса: ❌\n— Фитбек: Отсутствует. Предполагаю, что не пригласили на следующий этап в виду наличия ошибок и невнятной самопрезентации после технической части (Не смог переключится из режима компилятора в режим спикера)",
        "full_content": "2024-12-03 12:03:14\n Michael Iskovski -> 2071074234:\n— Название компании: Linked Helper\n— Вакансия: https://hh.ru/vacancy/112183741\n— Тип собеседования: Задачи на вывод консоли\n— Запись: Не сохранилась. Скрины задач в архиве\n— Успех собеса: ❌\n— Фитбек: Отсутствует. Предполагаю, что не пригласили на следующий этап в виду наличия ошибок и невнятной самопрезентации после технической части (Не смог переключится из режима компилятора в режим спикера)"
      },
      {
        "timestamp": "2024-11-26 12:04:06",
        "content": "2024-11-26 12:04:06\n Aleksandr -> 2071074234:\nLinked Helper\n1 этап\nВопросы по  легенде:\n- Расскажи про свой опыт\n- Какие сложные задачи решал\n- Какие были факапы\n- Чем гордишься по работе\nЗадачи: https://t.me/c/2071074234/489/80727\nВидео: https://www.youtube.com/watch?v=clUVFDa8p8A",
        "full_content": "2024-11-26 12:04:06\n Aleksandr -> 2071074234:\nLinked Helper\n1 этап\nВопросы по  легенде:\n- Расскажи про свой опыт\n- Какие сложные задачи решал\n- Какие были факапы\n- Чем гордишься по работе\nЗадачи: https://t.me/c/2071074234/489/80727\nВидео: https://www.youtube.com/watch?v=clUVFDa8p8A"
      },
      {
        "timestamp": "2024-11-26 10:04:58",
        "content": "2024-11-26 10:04:58\n Maksim -> 2071074234:\nКомпания: Linked Helper (3 этап)                                                                                                                                                                                              Задача: /**\n* LEVEL 1.\n  Есть склад спец. одежды разных размеров. \n  К нам приходит заказ на спец. одежду, в котором указывается для каждого рабочего его id: number, size: [s1: number] | [s1: number, s2: s1+1], \n  а также masterSize: '...",
        "full_content": "2024-11-26 10:04:58\n Maksim -> 2071074234:\nКомпания: Linked Helper (3 этап)                                                                                                                                                                                              Задача: /**\n* LEVEL 1.\n  Есть склад спец. одежды разных размеров. \n  К нам приходит заказ на спец. одежду, в котором указывается для каждого рабочего его id: number, size: [s1: number] | [s1: number, s2: s1+1], \n  а также masterSize: 's1' | 's2', если указано два возможных рамера.\n  То есть по каждому рабочему может быть указан либо один подходящий размер одежды, либо два, причем 2-ой размер только на 1 больше первого.\n  \n  Нужно написать функцию processOrder, которая бы на получила на вход:\n  1) массив доступных размеров спец. одежды\n  store: Array<{ size: number, quantity: number}>\n  2) Заказ на спец. одежду для сотрудников:\n  order: Array<{ id: number, size: [s1: number] } | { id: number, size: [s1: number, s2: s1+1], masterSize: 's1' | 's2'  }>\n  \n  На выходе функция должна выдать false, \n  если на складе недостаточно одежды на обеспечение всех сотрудников, \n  а если это возможно, то возвращала объект:\n  {\n    stats: Array<{size: number, quantity: number}>,\n    assignment:  Array<{id: number, size: number}>,\n    mismatches: number\n  }\n  где \n  stats - упорядоченный массив по возрастанию size массив размеров выдаваемой одежды со склада,\n  assignment - массив распределения одежды по сотрудникам,\n  mismatches - по скольким элементам заказа была выдана одежда НЕ соответствующая masterSize. \n    \n  processOrder должна расчитывать такое возможное распределение одежды, чтобы mismatches был минимальным.\n    \n  Для проверки работоспособности функции запустить runTests()\n  \n  @param store: Array<{ size: number, quantity: number}>\n  @param order: Array<{ id: number, size: [s1: number] } | { id: number, size: [s1: number, s2: s1+1], masterSize: 's1' | 's2'  }>\n  @return false | {\n    stats: Array<{size: number, quantity: number}>,\n    assignment:  Array<{id: number, size: number}>,\n    mismatches: number\n  }\n*/    function processOrder(store, order) {\n    // Создаем карту склада: size -> quantity\n    const stockMap = new Map();\n    for (const item of store) {\n        stockMap.set(item.size, item.quantity);\n    }\n\n    // Разделяем заказы на фиксированные (один размер) и гибкие (два размера)\n    const fixedOrders = [];\n    const flexibleOrders = [];\n    \n    for (const item of order) {\n        if (item.size.length === 1) {\n            fixedOrders.push(item);\n        } else if (item.size.length === 2 && \n                  (item.masterSize === 's1' || item.masterSize === 's2')) {\n            flexibleOrders.push(item);\n        } else {\n            return false; // Некорректный формат заказа\n        }\n    }\n\n    // Сначала обрабатываем фиксированные заказы\n    const assignment = [];\n    const allocatedSizes = new Map();\n    \n    // Функция для выделения размера\n    const allocateSize = (size) => {\n        if (stockMap.has(size) && stockMap.get(size) > 0) {\n            stockMap.set(size, stockMap.get(size) - 1);\n            allocatedSizes.set(size, (allocatedSizes.get(size) || 0) + 1);\n            return true;\n        }\n        return false;\n    };\n\n    // Обрабатываем фиксированные заказы\n    for (const order of fixedOrders) {\n        if (!allocateSize(order.size[0])) {\n            return false;\n        }\n        assignment.push({ id: order.id, size: order.size[0] });\n    }\n\n    // Проверяем возможность выполнения всех гибких заказов\n    const tempStockMap = new Map(stockMap);\n    for (const order of flexibleOrders) {\n        const [s1, s2] = order.size;\n        if (!((tempStockMap.get(s1) || 0) > 0 || (tempStockMap.get(s2) || 0) > 0)) {\n            return false;\n        }\n    }"
      },
      {
        "timestamp": "2024-11-25 14:13:04",
        "content": "2024-11-25 14:13:04\n George Nizamutdinow -> 2071074234:\nКомпания: Linked Helper\nВакансия: https://hh.ru/vacancy/109666237\nЗП: от 2000$ до 3500$ на руки\n\nВопросы (тех.часть):\n\n1) Задача\n\n\n/**\n* Написать функцию sostavChisla(massivChisel: number[], chislo: number),\n  которая бы находила все возможные комбинации чисел из massivChisel,\n  сумма которых равна chislo. При этом:\n  1) massivChisel содержит, только уникальные положительные числа (> 0)\n  2) в комбинации не должно быть повторений чисел\n  3)...",
        "full_content": "2024-11-25 14:13:04\n George Nizamutdinow -> 2071074234:\nКомпания: Linked Helper\nВакансия: https://hh.ru/vacancy/109666237\nЗП: от 2000$ до 3500$ на руки\n\nВопросы (тех.часть):\n\n1) Задача\n\n\n/**\n* Написать функцию sostavChisla(massivChisel: number[], chislo: number),\n  которая бы находила все возможные комбинации чисел из massivChisel,\n  сумма которых равна chislo. При этом:\n  1) massivChisel содержит, только уникальные положительные числа (> 0)\n  2) в комбинации не должно быть повторений чисел\n  3) все комбинации должны быть уникальными\n\n  Для проверки работоспособности функции запустить runTests()\n\n  @param massivChisel: number[]\n  @param chislo: number\n  @return Array<Array<number>>\n*/\nfunction sostavChisla(massivChisel, chislo) {\n  // код писать только внутри данной функции\n\n}\n\n// console.log(sostavChisla([8, 2, 3, 4, 6, 7, 1], 99));\n\nfunction compareNumericArrays(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  arr1 = [...arr1].sort();\n  arr2 = [...arr2].sort();\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction compareArraysOfNumericArrays(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let el1 of arr1) {\n    if (arr2.findIndex((el2) => compareNumericArrays(el1, el2)) < 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nrunTests();\n\nfunction runTests() {\n  const tests = [\n    {\n      chislo: 5,\n      massivChisel: [8, 2, 3, 4, 6, 7, 1],\n      result: [\n        [2, 3],\n        [4, 1],\n      ],\n    },\n    {\n      chislo: 99,\n      massivChisel: [8, 2, 3, 4, 6, 7, 1],\n      result: [],\n    },\n    {\n      chislo: 8,\n      massivChisel: [1, 2, 3, 4, 5, 6, 7, 8],\n      result: [[1, 3, 4], [1, 2, 5], [3, 5], [2, 6], [1, 7], [8]],\n    },\n    {\n      chislo: 8,\n      massivChisel: [7, 8, 3, 4, 5, 6, 1, 2],\n      result: [[1, 3, 4], [1, 2, 5], [3, 5], [2, 6], [1, 7], [8]],\n    },\n    {\n      chislo: 15,\n      massivChisel: [7, 8, 3, 4, 5, 6, 1, 2],\n      result: [\n        [1, 2, 3, 4, 5],\n        [2, 3, 4, 6],\n        [1, 3, 5, 6],\n        [4, 5, 6],\n        [1, 3, 4, 7],\n        [1, 2, 5, 7],\n        [3, 5, 7],\n        [2, 6, 7],\n        [1, 2, 4, 8],\n        [3, 4, 8],\n        [2, 5, 8],\n        [1, 6, 8],\n        [7, 8],\n      ],\n    },\n  ];\n\n  let errors = 0;\n  for (const test of tests) {\n    let result;\n    try {\n      result = sostavChisla(test.massivChisel, test.chislo);\n\n      if (!compareArraysOfNumericArrays(result, test.result)) {\n        errors++;\n        console.log(\"--------------------------------------------\");\n        console.log(\"failed for test\", test, \"Got result\", result);\n      }\n    } catch (e) {\n      errors++;\n      console.log(\"failed for\", test, \"exception\", e.message);\n    }\n  }\n\n  if (errors === 0) {\n    console.log(\"checkStringForBracects test successfuly completed\");\n  } else {\n    console.log(`checkStringForBracects test failed with ${errors} errors`);\n  }\n}"
      },
      {
        "timestamp": "2024-11-24 11:04:58",
        "content": "2024-11-24 11:04:58\n George Nizamutdinow -> 2071074234:\nКомпания: Linked Helper\nВакания: https://hh.ru/vacancy/109666237\nЗП: от 2 000 до 3 500 $ на руки\n\nВопросы(hr-скрининг): \n1) Рассказать про опыт, что заинтересовало в вакансии\n2) Задачи из скринов",
        "full_content": "2024-11-24 11:04:58\n George Nizamutdinow -> 2071074234:\nКомпания: Linked Helper\nВакания: https://hh.ru/vacancy/109666237\nЗП: от 2 000 до 3 500 $ на руки\n\nВопросы(hr-скрининг): \n1) Рассказать про опыт, что заинтересовало в вакансии\n2) Задачи из скринов"
      },
      {
        "timestamp": "2024-11-19 13:52:41",
        "content": "2024-11-19 13:52:41\n Aleksandr -> 2071074234:\nLinked Helper\n2 этап\nПопросила расшарить экран\nи спалила то что открыт meet.jit и происходит трансляция (пологаю что зоом это как то отображает),\nпопросила закрыть.\nЗадача:\n/**\n* LEVEL 0.\n  Есть склад спец. одежды разных размеров.\n  store: Array<{ size: number, quantity: number}>\n  \n  К нам приходит заказ на спец. одежду\n  order: Array<{ id: number, size: [s1: number] | [s1: number, s2: s1+1]  }>, \n  в котором указывается для каждого рабочего его id:...",
        "full_content": "2024-11-19 13:52:41\n Aleksandr -> 2071074234:\nLinked Helper\n2 этап\nПопросила расшарить экран\nи спалила то что открыт meet.jit и происходит трансляция (пологаю что зоом это как то отображает),\nпопросила закрыть.\nЗадача:\n/**\n* LEVEL 0.\n  Есть склад спец. одежды разных размеров.\n  store: Array<{ size: number, quantity: number}>\n  \n  К нам приходит заказ на спец. одежду\n  order: Array<{ id: number, size: [s1: number] | [s1: number, s2: s1+1]  }>, \n  в котором указывается для каждого рабочего его id: number и size: [s1: number] | [s1: number, s2: s1+1]. \n    \n  То есть по каждому рабочему может быть указан \n  либо один подходящий размер одежды, либо два, причем 2-ой размер только на 1 больше первого.\n  \n  Нужно написать функцию processOrder, которая бы на получила на вход:\n  1) массив доступных размеров спец. одежды\n  store: Array<{ size: number, quantity: number}>\n  2) Заказ на спец. одежду для сотрудников:\n  order: Array<{ id: number, size: [s1: number] | [s1: number, s2: s1+1]  }>\n  \n  На выходе функция должна выдать false, \n  если на складе недостаточно одежды на обеспечение всех сотрудников, \n  а если это возможно, то возвращала объект:\n  {\n    stats: Array<{size: number, quantity: number}>,\n    assignment:  Array<{id: number, size: number}>\n  }\n  где stats - упорядоченный массив по возрастанию size массив \n              размеров size и количества quantity выдаваемой одежды со склада;\n  assignment - массив распределения одежды по сотрудникам,\n              где id - идентификатор рабочего из order, size - выданный ему размер\n    \n  Для проверки работоспособности функции запустить runTests()\n  \n  @param store: Array<{ size: number, quantity: number}>\n  @param order: Array<{ id: number, size: [s1: number] | [s1: number, s2: s1+1]  }>\n  @return false | {\n    stats: Array<{size: number, quantity: number}>,\n    assignment:  Array<{id: number, size: number}>\n  }\n*/\nfunction processOrder(store, order) {\n  // код писать только внутри данной функции\n  \n}\n\nfunction compareNumericArrays(arr1, arr2) {\n  if(arr1.length !== arr2.length) {\n    return null;\n  }\n  \n  arr1 = [...arr1].sort();\n  arr2 = [...arr2].sort();\n  \n  for(let i=0; i<arr1.length; i++) {\n    if(arr1[i] !== arr2[i]) {\n      return null;\n    }\n  }\n  \n  return true;\n}\n\nfunction compareArraysOfNumericArrays(arr1, arr2) {\n  if(arr1.length !== arr2.length) {\n    return false;\n  }\n  \n  for(let el1 of arr1) {\n    if(arr2.findIndex(el2 => compareNumericArrays(el1, el2)) < 0) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\nrunTests();"
      },
      {
        "timestamp": "2024-11-16 16:26:51",
        "content": "2024-11-16 16:26:51\n Стас Тихомиров -> 2071074234:\nLinked Helper (1 этап)\nЗП: 200к\nВакансия: https://rostov.hh.ru/vacancy/109666237?query=linked+helper&hhtmFrom=vacancy_search_list\nВопросы: 1 в 1 как здесь: https://t.me/c/2071074234/489/83120",
        "full_content": "2024-11-16 16:26:51\n Стас Тихомиров -> 2071074234:\nLinked Helper (1 этап)\nЗП: 200к\nВакансия: https://rostov.hh.ru/vacancy/109666237?query=linked+helper&hhtmFrom=vacancy_search_list\nВопросы: 1 в 1 как здесь: https://t.me/c/2071074234/489/83120"
      },
      {
        "timestamp": "2024-11-14 10:47:15",
        "content": "2024-11-14 10:47:15\n twomadd -> 2071074234:\nLinked Helper 3 собес 2 задача\nЗП: 200к\nВакансия: hr сама написала\nЗадача:\n/**\n* LEVEL 1.\n  Есть склад спец. одежды разных размеров. \n  К нам приходит заказ на спец. одежду, в котором указывается для каждого рабочего его id: number, size: [s1: number] | [s1: number, s2: s1+1], \n  а также masterSize: 's1' | 's2', если указано два возможных рамера.\n  То есть по каждому рабочему может быть указан либо один подходящий размер одежды, либо два, причем 2-ой р...",
        "full_content": "2024-11-14 10:47:15\n twomadd -> 2071074234:\nLinked Helper 3 собес 2 задача\nЗП: 200к\nВакансия: hr сама написала\nЗадача:\n/**\n* LEVEL 1.\n  Есть склад спец. одежды разных размеров. \n  К нам приходит заказ на спец. одежду, в котором указывается для каждого рабочего его id: number, size: [s1: number] | [s1: number, s2: s1+1], \n  а также masterSize: 's1' | 's2', если указано два возможных рамера.\n  То есть по каждому рабочему может быть указан либо один подходящий размер одежды, либо два, причем 2-ой размер только на 1 больше первого.\n  \n  Нужно написать функцию processOrder, которая бы на получила на вход:\n  1) массив доступных размеров спец. одежды\n  store: Array<{ size: number, quantity: number}>\n  2) Заказ на спец. одежду для сотрудников:\n  order: Array<{ id: number, size: [s1: number] } | { id: number, size: [s1: number, s2: s1+1], masterSize: 's1' | 's2'  }>\n  \n  На выходе функция должна выдать false, \n  если на складе недостаточно одежды на обеспечение всех сотрудников, \n  а если это возможно, то возвращала объект:\n  {\n    stats: Array<{size: number, quantity: number}>,\n    assignment:  Array<{id: number, size: number}>,\n    mismatches: number\n  }\n  где \n  stats - упорядоченный массив по возрастанию size массив размеров выдаваемой одежды со склада,\n  assignment - массив распределения одежды по сотрудникам,\n  mismatches - по скольким элементам заказа была выдана одежда НЕ соответствующая masterSize. \n    \n  processOrder должна расчитывать такое возможное распределение одежды, чтобы mismatches был минимальным.\n    \n  Для проверки работоспособности функции запустить runTests()\n  \n  @param store: Array<{ size: number, quantity: number}>\n  @param order: Array<{ id: number, size: [s1: number] } | { id: number, size: [s1: number, s2: s1+1], masterSize: 's1' | 's2'  }>\n  @return false | {\n    stats: Array<{size: number, quantity: number}>,\n    assignment:  Array<{id: number, size: number}>,\n    mismatches: number\n  }\n*/\nfunction processOrder(store, order) {\n    //Тут писать код\n}\nfunction compareNumericArrays(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  arr1 = [...arr1].sort();\n  arr2 = [...arr2].sort();\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction compareArraysOfNumericArrays(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let el1 of arr1) {\n    if (arr2.findIndex((el2) => compareNumericArrays(el1, el2)) < 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nrunTests();"
      },
      {
        "timestamp": "2024-11-13 13:42:28",
        "content": "2024-11-13 13:42:28\n Maksim -> 2071074234:\nLinked Helper (1 этап)                                                                                                                                                                                                                       Зп: Не обсуждали (2000 - 3500$ написано в вакансии )                                                                                                                                                          Вакансия: http...",
        "full_content": "2024-11-13 13:42:28\n Maksim -> 2071074234:\nLinked Helper (1 этап)                                                                                                                                                                                                                       Зп: Не обсуждали (2000 - 3500$ написано в вакансии )                                                                                                                                                          Вакансия: https://rostov.hh.ru/vacancy/109666237?query=linked+helper&hhtmFrom=vacancy_search_list                                                                                                                                                                                                            Вопросы 1 в 1 как здесь : https://t.me/c/2071074234/489/85574"
      },
      {
        "timestamp": "2024-11-11 13:34:32",
        "content": "2024-11-11 13:34:32\n twomadd -> 2071074234:\n-Название: Linked Helper(2 этап - решение задачи)\n-Вакансия: hr сама написала\n-ЗП: 200к\n-Сразу к задаче. Надо решить чтобы прошли все тесты , а именно функцию function processOrder(store, order)\nВот условие: \n```\n/**\n* LEVEL 0.\n  Есть склад спец. одежды разных размеров.\n  store: Array<{ size: number, quantity: number}>\n  \n  К нам приходит заказ на спец. одежду\n  order: Array<{ id: number, size: [s1: number] | [s1: number, s2: s1+1]  }>, \n  в котором ук...",
        "full_content": "2024-11-11 13:34:32\n twomadd -> 2071074234:\n-Название: Linked Helper(2 этап - решение задачи)\n-Вакансия: hr сама написала\n-ЗП: 200к\n-Сразу к задаче. Надо решить чтобы прошли все тесты , а именно функцию function processOrder(store, order)\nВот условие: \n```\n/**\n* LEVEL 0.\n  Есть склад спец. одежды разных размеров.\n  store: Array<{ size: number, quantity: number}>\n  \n  К нам приходит заказ на спец. одежду\n  order: Array<{ id: number, size: [s1: number] | [s1: number, s2: s1+1]  }>, \n  в котором указывается для каждого рабочего его id: number и size: [s1: number] | [s1: number, s2: s1+1]. \n    \n  То есть по каждому рабочему может быть указан \n  либо один подходящий размер одежды, либо два, причем 2-ой размер только на 1 больше первого.\n  \n  Нужно написать функцию processOrder, которая бы на получила на вход:\n  1) массив доступных размеров спец. одежды\n  store: Array<{ size: number, quantity: number}>\n  2) Заказ на спец. одежду для сотрудников:\n  order: Array<{ id: number, size: [s1: number] | [s1: number, s2: s1+1]  }>\n  \n  На выходе функция должна выдать false, \n  если на складе недостаточно одежды на обеспечение всех сотрудников, \n  а если это возможно, то возвращала объект:\n  {\n    stats: Array<{size: number, quantity: number}>,\n    assignment:  Array<{id: number, size: number}>\n  }\n  где stats - упорядоченный массив по возрастанию size массив \n              размеров size и количества quantity выдаваемой одежды со склада;\n  assignment - массив распределения одежды по сотрудникам,\n              где id - идентификатор рабочего из order, size - выданный ему размер\n    \n  Для проверки работоспособности функции запустить runTests()\n  \n  @param store: Array<{ size: number, quantity: number}>\n  @param order: Array<{ id: number, size: [s1: number] | [s1: number, s2: s1+1]  }>\n  @return false | {\n    stats: Array<{size: number, quantity: number}>,\n    assignment:  Array<{id: number, size: number}>\n  }\n*/\nfunction processOrder(store, order) {\n  // код писать только внутри данной функции\n\n \n}\n\nfunction compareNumericArrays(arr1, arr2) {\n  if(arr1.length !== arr2.length) {\n    return false;\n  }\n  \n  arr1 = [...arr1].sort();\n  arr2 = [...arr2].sort();\n  \n  for(let i=0; i<arr1.length; i++) {\n    if(arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\nfunction compareArraysOfNumericArrays(arr1, arr2) {\n  if(arr1.length !== arr2.length) {\n    return false;\n  }\n  \n  for(let el1 of arr1) {\n    if(arr2.findIndex(el2 => compareNumericArrays(el1, el2)) < 0) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\nrunTests();"
      },
      {
        "timestamp": "2024-11-06 15:10:16",
        "content": "2024-11-06 15:10:16\n Mike -> 2071074234:\nКомпания: Linked Helper\nЗП: 250к\nвопросы выше есть, все по аналогии",
        "full_content": "2024-11-06 15:10:16\n Mike -> 2071074234:\nКомпания: Linked Helper\nЗП: 250к\nвопросы выше есть, все по аналогии"
      },
      {
        "timestamp": "2024-11-06 14:42:32",
        "content": "2024-11-06 14:42:32\n Гасим Мурасов -> 2071074234:\nкомпания: linked helper\nзп: 250 000\nвакансия: https://hh.ru/vacancy/109666237?hhtmFrom=vacancy_search_list\nвопросы есть выше\n\nвидео https://youtu.be/02fT0KAKxOU",
        "full_content": "2024-11-06 14:42:32\n Гасим Мурасов -> 2071074234:\nкомпания: linked helper\nзп: 250 000\nвакансия: https://hh.ru/vacancy/109666237?hhtmFrom=vacancy_search_list\nвопросы есть выше\n\nвидео https://youtu.be/02fT0KAKxOU"
      },
      {
        "timestamp": "2024-10-31 13:48:25",
        "content": "2024-10-31 13:48:25\n twomadd -> 2071074234:\nLinked Helper 1-ый этап\nВакансия: hr написала\nЗП: 200к\nВопросы: только про опыт  (интересные задачи и достижения) \nПочему ушел с последнего места работы.\nЗадачи:\nЧто будет выведено в консоль ?\n\nfunction Example() {\n  const [flag, setFlag] = React.useState(false);\n\n  React.useEffect(() => {\n    setFlag(true);\n    console.log('effect run');\n    return () => console.log('effect clean up');\n  }, [flag]);\n\n  console.log('render');\n  return null; // Компонен...",
        "full_content": "2024-10-31 13:48:25\n twomadd -> 2071074234:\nLinked Helper 1-ый этап\nВакансия: hr написала\nЗП: 200к\nВопросы: только про опыт  (интересные задачи и достижения) \nПочему ушел с последнего места работы.\nЗадачи:\nЧто будет выведено в консоль ?\n\nfunction Example() {\n  const [flag, setFlag] = React.useState(false);\n\n  React.useEffect(() => {\n    setFlag(true);\n    console.log('effect run');\n    return () => console.log('effect clean up');\n  }, [flag]);\n\n  console.log('render');\n  return null; // Компонент ничего не рендерит\n}"
      },
      {
        "timestamp": "2024-09-11 10:22:35",
        "content": "2024-09-11 10:22:35\n Бахтияр -> 2071074234:\nLinked helper\n- зп: не обсуждали\n- вакансия: написала сама\n- вопросы:",
        "full_content": "2024-09-11 10:22:35\n Бахтияр -> 2071074234:\nLinked helper\n- зп: не обсуждали\n- вакансия: написала сама\n- вопросы:"
      },
      {
        "timestamp": "2024-09-04 16:58:47",
        "content": "2024-09-04 16:58:47\n Timofei Syromiatnikov -> 2071074234:\n— Название: Linked Helper (2 этап - решение одной задачки)\n— Вакансия: https://hh.ru/vacancy/102127027\n— ЗП: 4к$\n— Вопросов не было, перешли сразу к задаче. Нужно решить, и чтобы решение прошло все тесты:\n/**\n* LEVEL 0.\n  Есть склад спец. одежды разных размеров.\n  store: Array<{ size: number, quantity: number}>\n  \n  К нам приходит заказ на спец. одежду\n  order: Array<{ id: number, size: [s1: number] | [s1: number, s2: s1+1]  }>, \n  в кото...",
        "full_content": "2024-09-04 16:58:47\n Timofei Syromiatnikov -> 2071074234:\n— Название: Linked Helper (2 этап - решение одной задачки)\n— Вакансия: https://hh.ru/vacancy/102127027\n— ЗП: 4к$\n— Вопросов не было, перешли сразу к задаче. Нужно решить, и чтобы решение прошло все тесты:\n/**\n* LEVEL 0.\n  Есть склад спец. одежды разных размеров.\n  store: Array<{ size: number, quantity: number}>\n  \n  К нам приходит заказ на спец. одежду\n  order: Array<{ id: number, size: [s1: number] | [s1: number, s2: s1+1]  }>, \n  в котором указывается для каждого рабочего его id: number и size: [s1: number] | [s1: number, s2: s1+1]. \n    \n  То есть по каждому рабочему может быть указан \n  либо один подходящий размер одежды, либо два, причем 2-ой размер только на 1 больше первого.\n  \n  Нужно написать функцию processOrder, которая бы на получила на вход:\n  1) массив доступных размеров спец. одежды\n  store: Array<{ size: number, quantity: number}>\n  2) Заказ на спец. одежду для сотрудников:\n  order: Array<{ id: number, size: [s1: number] | [s1: number, s2: s1+1]  }>\n  \n  На выходе функция должна выдать false, \n  если на складе недостаточно одежды на обеспечение всех сотрудников, \n  а если это возможно, то возвращала объект:\n  {\n    stats: Array<{size: number, quantity: number}>,\n    assignment:  Array<{id: number, size: number}>\n  }\n  где stats - упорядоченный массив по возрастанию size массив \n              размеров size и количества quantity выдаваемой одежды со склада;\n  assignment - массив распределения одежды по сотрудникам,\n              где id - идентификатор рабочего из order, size - выданный ему размер\n    \n  Для проверки работоспособности функции запустить runTests()\n  \n  @param store: Array<{ size: number, quantity: number}>\n  @param order: Array<{ id: number, size: [s1: number] | [s1: number, s2: s1+1]  }>\n  @return false | {\n    stats: Array<{size: number, quantity: number}>,\n    assignment:  Array<{id: number, size: number}>\n  }\n*/\nfunction processOrder(store, order) {\n  // код писать только внутри данной функции\n\n \n}\n\nfunction compareNumericArrays(arr1, arr2) {\n  if(arr1.length !== arr2.length) {\n    return false;\n  }\n  \n  arr1 = [...arr1].sort();\n  arr2 = [...arr2].sort();\n  \n  for(let i=0; i<arr1.length; i++) {\n    if(arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\nfunction compareArraysOfNumericArrays(arr1, arr2) {\n  if(arr1.length !== arr2.length) {\n    return false;\n  }\n  \n  for(let el1 of arr1) {\n    if(arr2.findIndex(el2 => compareNumericArrays(el1, el2)) < 0) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\nrunTests();"
      },
      {
        "timestamp": "2024-08-30 11:47:20",
        "content": "2024-08-30 11:47:20\n Timofei Syromiatnikov -> 2071074234:\n— Название: Linked Helper (1 этап скрининг + задачки)\n— Вакансия: https://hh.ru/vacancy/102127027\n— Вопросы: после скрининга перешли к задачам\n— Задачи: нужно устно сказать ответ",
        "full_content": "2024-08-30 11:47:20\n Timofei Syromiatnikov -> 2071074234:\n— Название: Linked Helper (1 этап скрининг + задачки)\n— Вакансия: https://hh.ru/vacancy/102127027\n— Вопросы: после скрининга перешли к задачам\n— Задачи: нужно устно сказать ответ"
      },
      {
        "timestamp": "2024-08-13 20:09:00",
        "content": "2024-08-13 20:09:00\n Руслан -> 2071074234:\nLinked Helper\n— зп: от 4000$ гросс\n— вакансия: https://hh.ru/vacancy/102127449\n— вопросы:\n— задачи:",
        "full_content": "2024-08-13 20:09:00\n Руслан -> 2071074234:\nLinked Helper\n— зп: от 4000$ гросс\n— вакансия: https://hh.ru/vacancy/102127449\n— вопросы:\n— задачи:"
      }
    ]
  },
  {
    "company": "Северсталь",
    "count": 17,
    "records": [
      {
        "timestamp": "2025-06-11 08:07:26",
        "content": "2025-06-11 08:07:26\n Alexander -> 2071074234:\nСеверсталь второй этап (созвон с лидом)\nВакансия - написала HR\nЗП - 250-300к\nСозвон с лидом, рассказал про себя, про проекты и компанию в целом, как устроены дейлики и викли. Я рассказал ему про свой опыт. Спрашивал почему ухожу с текущего места работы, через сколько смогу выйти, если дадут оффер. Куда хочу развиваться, делаю ли пет проекты, что изучаю новое и как развиваюсь, спрашивал про книги, про увлечения вне работы.Работал ли с graphql? Ожидани...",
        "full_content": "2025-06-11 08:07:26\n Alexander -> 2071074234:\nСеверсталь второй этап (созвон с лидом)\nВакансия - написала HR\nЗП - 250-300к\nСозвон с лидом, рассказал про себя, про проекты и компанию в целом, как устроены дейлики и викли. Я рассказал ему про свой опыт. Спрашивал почему ухожу с текущего места работы, через сколько смогу выйти, если дадут оффер. Куда хочу развиваться, делаю ли пет проекты, что изучаю новое и как развиваюсь, спрашивал про книги, про увлечения вне работы.Работал ли с graphql? Ожидания по зарплате, как будешь выбирать место работы, если на руках несколько офферов, в каком городе живешь(чтобы знать к какому офису прикреплять при трудоустройстве)"
      },
      {
        "timestamp": "2024-11-20 07:04:13",
        "content": "2024-11-20 07:04:13\n Стас Тихомиров -> 2071074234:\nКомпания: Северсталь\nВакансия: написала hr, позиция мидл\nЗП: 200к\n\nВопросы:\n- Что такое type guards\n\nПотом пошли задачи, было много задач, прям гоняли что будет тут, а что если так, можно посмотреть в начало с тестами, только не было вариантов ответов, надо было самому говорить что будет https://t.me/c/2071074234/489/33289\n\n- Написать type guard, \nрешенная задача\ntype User = { name: string; permissions: string[]; }  \ntype Admin = { name: string;...",
        "full_content": "2024-11-20 07:04:13\n Стас Тихомиров -> 2071074234:\nКомпания: Северсталь\nВакансия: написала hr, позиция мидл\nЗП: 200к\n\nВопросы:\n- Что такое type guards\n\nПотом пошли задачи, было много задач, прям гоняли что будет тут, а что если так, можно посмотреть в начало с тестами, только не было вариантов ответов, надо было самому говорить что будет https://t.me/c/2071074234/489/33289\n\n- Написать type guard, \nрешенная задача\ntype User = { name: string; permissions: string[]; }  \ntype Admin = { name: string; }  \ntype Person = User | Admin;  \n\nconst isUser = (person: Person): person is User => {  \n    return (person as User).permissions !== undefined;  \n};  \n\nconst hasPermission = (namePermission: string, person: Person) => {  \n    return isUser(person) && person.permissions.includes(namePermission);  \n};  \n\n// Примеры использования  \nconst user: User = { name: 'John', permissions: ['read', 'write'] };  \nconst admin: Admin = { name: 'Jane' };  \n\nconsole.log(hasPermission('write', user)); // true  \nconsole.log(hasPermission('write', admin)); // false\n\n- протипизировать функцию чтобы не ругался на callFn({ name: 'Gleb', fn: () => {} }). \nРешенная задача\nfunction callFn<T extends { name: string; fn: () => void; [key: string]: any }>(obj: T) {  \n    obj.fn();  \n}  \n\n// Примеры вызовов  \ncallFn({ name: 'John', fn: () => {}, age: 16 }); // valid  \ncallFn({ name: 'Oleg', fn: () => {}, owner: 'Irina' }); // valid  \ncallFn({ name: 'Gleb', fn: () => {} }); // valid\n- еще одна задача, дернуть апишки и отфильтровать\nрешенная задача\n/** Задача\n - Получить список предметов из сервера getServerItemsApi();\n - Получить список предметов из стима getSteamItemsApi();\n - Отфильтровать список предметов стима оставив предметы, которых нет на сервере\n */\n\nconst mockServerItems = [\"Aquamarine Revenge (Minimal Wear)\", \"Case Hardened (Field-Tested)\", \"Jet Set (Well-Worn)\", \"AUG | Daedalus (Field-Tested)\"];\nconst mockSteamItems = [\"Aquamarine Revenge (Minimal Wear)\", \"Case Hardened (Field-Tested)\", \"Jet Set (Well-Worn)\", \"AUG | Daedalus (Field-Tested)\", \"R8 Revolver | Crazy 8 (Factory New)\"];\n\nfunction saveItemToServerApi(value) {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(value), 1000)\n  })\n}\n\nfunction getServerItemsApi() {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(mockServerItems), 1000)\n  })\n}\n\nfunction getSteamItemsApi() {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(mockSteamItems), 1000)\n  })\n}\n\nasync function parsingNewItems() {\n  try {\n    // Получить список предметов из сервера\n    const serverItems = await getServerItemsApi();\n    console.log('Server Items:', serverItems);\n\n    // Получить список предметов из стима\n    const steamItems = await getSteamItemsApi();\n    console.log('Steam Items:', steamItems);\n\n    // Отфильтровать список предметов из стима, оставив предметы, которых нет на сервере\n    const newItems = steamItems.filter(item => !serverItems.includes(item));\n    console.log('New Items:', newItems);\n\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}"
      },
      {
        "timestamp": "2024-11-15 12:04:43",
        "content": "2024-11-15 12:04:43\n Артем -> 2071074234:\nКомпания: Северсталь\nВакансия: https://hh.ru/vacancy/109199890 \nЗП: 220\nВопросы: \nВсплытия события\ncapture: true\ncss изменили но не изменился цвет почему\ngit bisect\nerrorBoundary\nв 1 виджете ошибка как ее предотвратить\nесть код там ошибка как исправишь\n400 500 код\nЗадача: решить чтобы все работало исправно\n// Есть реализация компонента, от которого требуется 2 вещи:\n// 1) выводить текущее значение вертикального скролла окна (window.scrollY)\n// 2) после м...",
        "full_content": "2024-11-15 12:04:43\n Артем -> 2071074234:\nКомпания: Северсталь\nВакансия: https://hh.ru/vacancy/109199890 \nЗП: 220\nВопросы: \nВсплытия события\ncapture: true\ncss изменили но не изменился цвет почему\ngit bisect\nerrorBoundary\nв 1 виджете ошибка как ее предотвратить\nесть код там ошибка как исправишь\n400 500 код\nЗадача: решить чтобы все работало исправно\n// Есть реализация компонента, от которого требуется 2 вещи:\n// 1) выводить текущее значение вертикального скролла окна (window.scrollY)\n// 2) после монтирования асинхронно получить число и вывести его\n// Нужно найти, объяснить и исправить как можно больше проблем в реализации\n\nimport { useState, useEffect } from 'react';\n\n// имитация запроса к серверу. просто получаем число асинхронно\nconst fetchRandomNumber = () => Promise.resolve(Math.random());\n\nconst NumberAndScroll = () => {\n  const [number, setNumber] = useState(0);\n  const [scroll, setScroll] = useState(window.scrollY);\n  \n  useEffect( () => {\n  \n    const fetchNumber = async () => {\n        const randomNumber = await fetchRandomNumber()\n        setNumber(randomNumber)\n    }\n    \n  fetchNumber()\n  },[]);\n  \n  \n    useEffect( () => {\n    \n    const handleScroll = () => setScroll(window.scrollY)\n    \n    window.addEventListener('scroll', handleScroll);\n\n    return () => window.removeEventListener('scroll', handleScroll);\n  },[]);\n  \n  return (\n    <div>\n      <div> Number: { number } </div>\n      <div> Scroll: { scroll } </div>\n    </div>  \n  )\n}"
      },
      {
        "timestamp": "2024-11-05 15:21:28",
        "content": "2024-11-05 15:21:28\n аыеъа -> 2071074234:\nСеверсталь \nТехсобес\nУспех: Оффер ✅ \nЗП: 250к\nВакансия: https://rostov.hh.ru/vacancy/102031303\nВопросы: \nСпросил как я знаю TS по 10-и бальной шкале, сказал что на 8, не знаю только как использовать инфер и собеседующий скипнул весь блок с TS \nМутирующие и не мутирующие методы массива\nconst mockServerImages = [\n        { id: 1, url: 'http://images.com/frog.jpg' },\n        { id: 2, url: 'http://images.com/cat.jpg' },\n        { id: 3, url: 'http://images.c...",
        "full_content": "2024-11-05 15:21:28\n аыеъа -> 2071074234:\nСеверсталь \nТехсобес\nУспех: Оффер ✅ \nЗП: 250к\nВакансия: https://rostov.hh.ru/vacancy/102031303\nВопросы: \nСпросил как я знаю TS по 10-и бальной шкале, сказал что на 8, не знаю только как использовать инфер и собеседующий скипнул весь блок с TS \nМутирующие и не мутирующие методы массива\nconst mockServerImages = [\n        { id: 1, url: 'http://images.com/frog.jpg' },\n        { id: 2, url: 'http://images.com/cat.jpg' },\n        { id: 3, url: 'http://images.com/dog.jpg' },\n        { id: 4, url: 'http://images.com/fish.jpg' },\n        { id: 5, url: 'http://images.com/human.jpg' },\n    ];\n\nconst mockClientImages = [\n        'http://images.com/frog.jpg',\n        'http://images.com/cat.jpg',\n        'http://images.com/dog.jpg',\n        'http://images.com/fish.jpg',\n        'http://images.com/human.jpg',\n        'http://images.com/alien.jpg',\n        'http://images.com/robot.jpg',\n    ];\n\nfunction saveItemToServerApi(url) {\n   return new Promise(resolve => {\n      setTimeout(() => resolve(value), 1000)\n   })\n}\n\nfunction getServerItemsApi() {\n   return new Promise(resolve => {\n      setTimeout(() => resolve(mockServerImages), 1000)\n   })\n}\n\nfunction getClientItemsApi() {\n   return new Promise(resolve => {\n      setTimeout(() => resolve(mockClientImages), 1000)\n   })\n}\n\n/ Задача\n - Получить список предметов из сервера getServerItemsApi();\n - Получить список предметов у клиента getClientItemsApi();\n - Отфильтровать список предметов клиента оставив предметы, \n которых нет на сервере\n - Добавить новые предметы на сервер saveItemToServerApi(url); \n \n  Дополнительно\n Одновременно можно добавлять не более 2 предметов\n */\n\nconst parsingNewItems = async () => {\n    const serverItems = await getServerItemsApi()\n    const clientItems = await getClientItemsApi()\n\n    \n    const serverItemsSet = new Set()\n    for (let item of serverItems) {\n        serverItemsSet.add(item.url)\n    }\n    \n    const resultItems = []\n    \n    for (let item of clientItems) {\n        if (!serverItemsSet.has(item)) {\n            resultItems.push(item)\n        }\n    }\n    \n    console.log(resultItems)\n    \n    for (let i = 0; i < resultItems.length; i += 2) {\n        const neededItems = resultItems.slice(i, i + 2)\n        await Promise.all(saveItemToServerApi(neededItems))\n    }\n}\n\nparsingNewItems()"
      },
      {
        "timestamp": "2024-11-05 15:14:06",
        "content": "2024-11-05 15:14:06\n аыеъа -> 2071074234:\nСеверсталь\nЛайтовый Финал\nУспех: Оффер✅\nЗП: 250к\nВакансия: https://rostov.hh.ru/vacancy/102031303\nВидео:",
        "full_content": "2024-11-05 15:14:06\n аыеъа -> 2071074234:\nСеверсталь\nЛайтовый Финал\nУспех: Оффер✅\nЗП: 250к\nВакансия: https://rostov.hh.ru/vacancy/102031303\nВидео:"
      },
      {
        "timestamp": "2024-10-20 17:01:45",
        "content": "2024-10-20 17:01:45\n Ada500 -> 2071074234:\n- Северсталь\n- Тех интервью\n- ЗП: 250 тыс\n- Вакансия: https://hh.ru/vacancy/107283521?hhtmFrom=employer_vacancies\nВопросы: Расскажи про опыт,\nПисала ли свои компоненты или используете готовые библиотеки\nРасскажи про WebSockets\nОсобенность websockets\nАналоги WebSockets\nЧто такое побитовые операторы.\nЧто такое утечка данных\nКакие бом надо очищать(scroll, resize, websockets, setTimeout, seinterval)\nПисала ли кастомные хуки\nКак проверяется что соединение не...",
        "full_content": "2024-10-20 17:01:45\n Ada500 -> 2071074234:\n- Северсталь\n- Тех интервью\n- ЗП: 250 тыс\n- Вакансия: https://hh.ru/vacancy/107283521?hhtmFrom=employer_vacancies\nВопросы: Расскажи про опыт,\nПисала ли свои компоненты или используете готовые библиотеки\nРасскажи про WebSockets\nОсобенность websockets\nАналоги WebSockets\nЧто такое побитовые операторы.\nЧто такое утечка данных\nКакие бом надо очищать(scroll, resize, websockets, setTimeout, seinterval)\nПисала ли кастомные хуки\nКак проверяется что соединение не прервано в websockets(ping pong, heatbeat)\nРаботала ли с gitlub\nОтрефакторить код(ссылка не сохранилась)"
      },
      {
        "timestamp": "2024-10-07 04:24:34",
        "content": "2024-10-07 04:24:34\n Stepan Ch. -> 2071074234:\nСеверсталь \n- Вакансия: https://t.me/c/2071074234/616/69890\n- Зп: 250к\n- Вопросы: \nВсе из платины ничего нового\n1. \nfunction delay(s = 2) {\n  const pause = s * 1000;\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log(`Пауза была ${s} секунд`);\n      resolve();\n    }, pause);\n  });\n}\n\n2. \nPromise.reject(\"a\")\n  .catch((p) => p + \"b\") // Перехватывает \"a\", возвращает \"ab\"\n  .catch((p) => p + \"c\") // Не вызывается\n  .then((p) => ...",
        "full_content": "2024-10-07 04:24:34\n Stepan Ch. -> 2071074234:\nСеверсталь \n- Вакансия: https://t.me/c/2071074234/616/69890\n- Зп: 250к\n- Вопросы: \nВсе из платины ничего нового\n1. \nfunction delay(s = 2) {\n  const pause = s * 1000;\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log(`Пауза была ${s} секунд`);\n      resolve();\n    }, pause);\n  });\n}\n\n2. \nPromise.reject(\"a\")\n  .catch((p) => p + \"b\") // Перехватывает \"a\", возвращает \"ab\"\n  .catch((p) => p + \"c\") // Не вызывается\n  .then((p) => p + \"d\")  // Получает \"ab\", возвращает \"abd\"\n  .then((p) => console.log(p)); // Логирует \"abd\"\n3. \nconst categorizedProducts = products.reduce((acc, product) => {\n  const { category, name } = product;\n  if (!acc[category]) {\n    acc[category] = [];\n  }\n  acc[category].push(name);\n  return acc;\n}, {});\n4. \ntype TypeCond<T, U> = T extends never ? {a: U} : {b: U};\n5. \ntype Foo = {\n    name: 'foo';\n    id: number;\n}\n\ntype Bar = {\n    name: 'bar';\n    id: number;\n}\n\ntype All = Foo | Bar;\n\ntype ExtractTypeByName<T, G> = T extends {name: G} ? T : never;\n\ntype ExtractedType = ExtractTypeByName<All, 'foo'>; // Результирующий тип - Foo\n6. \nconst PrivateRoute = ({ isAuthenticated }) => {\n  return isAuthenticated ? <Outlet /> : <Navigate to=\"/login\" />;\n};\n7. \nconst PrivateRoute = ({ element, ...rest }) => {\n  const { isAuth } = useContext(AuthContext);\n  return isAuth ? element : <Navigate to=\"/login\" />;\n};"
      },
      {
        "timestamp": "2024-09-24 16:44:11",
        "content": "2024-09-24 16:44:11\n Александр -> 2071074234:\nКомпания: Северсталь - 3 этап \nВакансия: HR сама написала \nЗП: 250к\nВопросы:\n- Расскажи про самые сложные задачи\n- Расскажи чем нравится заниматься, а чем нет\n- Расскажи про свой опыт \n- Расскажи как обучаешься, где берешь инфу\n- Расскажи про свои команды\n\nОбщение было очень лайтовым, классно пообщались, не было ощущения что на собесе, как будто с другом созвонился",
        "full_content": "2024-09-24 16:44:11\n Александр -> 2071074234:\nКомпания: Северсталь - 3 этап \nВакансия: HR сама написала \nЗП: 250к\nВопросы:\n- Расскажи про самые сложные задачи\n- Расскажи чем нравится заниматься, а чем нет\n- Расскажи про свой опыт \n- Расскажи как обучаешься, где берешь инфу\n- Расскажи про свои команды\n\nОбщение было очень лайтовым, классно пообщались, не было ощущения что на собесе, как будто с другом созвонился"
      },
      {
        "timestamp": "2024-09-24 16:08:08",
        "content": "2024-09-24 16:08:08\n Александр -> 2071074234:\nКомпания: Северсталь\nЗП: 250к\nВакансия: HR сама написала на почту \nВопросы: не было \nЗадачи: была очень большая тудушка с кучей различного болерплейта и надо было отрефакторить, ничего не записал и стрим не вел потому что сразу попросили показать экран полностью",
        "full_content": "2024-09-24 16:08:08\n Александр -> 2071074234:\nКомпания: Северсталь\nЗП: 250к\nВакансия: HR сама написала на почту \nВопросы: не было \nЗадачи: была очень большая тудушка с кучей различного болерплейта и надо было отрефакторить, ничего не записал и стрим не вел потому что сразу попросили показать экран полностью"
      },
      {
        "timestamp": "2024-09-23 18:08:59",
        "content": "2024-09-23 18:08:59\n Александр -> 2071074234:\n- Компания: Северсталь \n- Зп: 250\n- Вакансия: https://spb.hh.ru/vacancy/104130786\n- вопросы: не все помню, в основном были про eventloop, промисы, так же много спрашивали про реакт хуки\n- задача: https://codesandbox.io/p/sandbox/react-contextapi-task-fix-after-inteview-forked-73drny?file=%2Fsrc%2Fcomponents%2Ftodo-list%2Ftodo-list.jsx%3A31%2C5",
        "full_content": "2024-09-23 18:08:59\n Александр -> 2071074234:\n- Компания: Северсталь \n- Зп: 250\n- Вакансия: https://spb.hh.ru/vacancy/104130786\n- вопросы: не все помню, в основном были про eventloop, промисы, так же много спрашивали про реакт хуки\n- задача: https://codesandbox.io/p/sandbox/react-contextapi-task-fix-after-inteview-forked-73drny?file=%2Fsrc%2Fcomponents%2Ftodo-list%2Ftodo-list.jsx%3A31%2C5"
      },
      {
        "timestamp": "2024-07-24 08:35:39",
        "content": "2024-07-24 08:35:39\n AM -> 2071074234:\n— Северсталь \n— hr сама написала\n— ЗП: 250к.\n— Уже проходил собес в другую команду (потом оказалось что команду набрали и мне предложили другой проект, но нужно пройти собес заново) из за этого по теории не гоняли, сразу задачи\n— Задачи:\n\nasync function parsingNewItems() {\n  try {\n    // Получить список предметов из сервера\n    const serverItems = await getServerItemsApi();\n\n    // Получить список предметов из стима\n    const steamItems = await getSteamItem...",
        "full_content": "2024-07-24 08:35:39\n AM -> 2071074234:\n— Северсталь \n— hr сама написала\n— ЗП: 250к.\n— Уже проходил собес в другую команду (потом оказалось что команду набрали и мне предложили другой проект, но нужно пройти собес заново) из за этого по теории не гоняли, сразу задачи\n— Задачи:\n\nasync function parsingNewItems() {\n  try {\n    // Получить список предметов из сервера\n    const serverItems = await getServerItemsApi();\n\n    // Получить список предметов из стима\n    const steamItems = await getSteamItemsApi();\n\n    // Преобразовать массив serverItems в объект для более быстрого поиска\n    const serverItemsObj = serverItems.reduce((acc, item) => {\n      acc[item] = true;\n      return acc;\n    }, {});\n\n\n    // Отфильтровать список предметов из стима, оставив предметы, которых нет на сервере\n    const newItems = steamItems.filter(item => !serverItemsObj[item]);\n\n    // Добавлять новые предметы на сервер, одновременно не более двух предметов\n    for (let i = 0; i < newItems.length; i += 2) {\n      const itemsToSave = newItems.slice(i, i + 2);\n      await Promise.all(itemsToSave.map(item => saveItemToServerApi(item)));\n    }\n\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nconst mockServerItems = [\"Aquamarine Revenge (Minimal Wear)\", \"Case Hardened (Field-Tested)\", \"Jet Set (Well-Worn)\", \"AUG | Daedalus (Field-Tested)\"];\nconst mockSteamItems = [\"Aquamarine Revenge (Minimal Wear)\", \"Case Hardened (Field-Tested)\", \"Jet Set (Well-Worn)\", \"AUG | Daedalus (Field-Tested)\", \"R8 Revolver | Crazy 8 (Factory New)\"];\n\nfunction saveItemToServerApi(value) {\n   return new Promise(resolve => {\n      setTimeout(() => resolve(value), 1000)\n   })\n}\n\nfunction getServerItemsApi() {\n   return new Promise(resolve => {\n      setTimeout(() => resolve(mockServerItems), 1000)\n   })\n}\n\nfunction getSteamItemsApi() {\n   return new Promise(resolve => {\n      setTimeout(() => resolve(mockSteamItems), 1000)\n   })\n}\n\n/** Задача\n - Получить список предметов из сервера getServerItemsApi();\n - Получить список предметов из стима getSteamItemsApi();\n - Отфильтровать список предметов стима оставив предметы, которых нет на сервере\n - Добавить новые предметы на сервер saveItemToServerApi (Одновременно можно добавлять не более 2 предметов*);\n * Дополнительно\n\n */\n \n async function parsingNewItems() {\n    try {\n        const serverItems = await getServerItemsApi();\n        const steamItems = await getSteamItemsApi();\n        \n        \n        const newServerItemsObj = serverItems.reduce((acc, item) => {\n            acc[item] = true;\n            \n            return acc;\n        }, {});\n        \n        \n        const newItems = steamItems.filter((item) => {\n            return !newServerItemsObj[item];\n        })\n        \n        \n        for(let i = 0; i < newItems.length; i += 2) {\n            const items = newItems.slice(i, i + 2);\n            \n            await Promise.all(items.map(item => saveItemToServerApi(item)));\n        }\n        \n    } catch(error) {\n        console.error(error);\n    }\n}\n\ntype Mapping<T> = {\n  [K in keyof T]?: (value: T[K]) => string;\n};"
      },
      {
        "timestamp": "2024-07-15 00:52:02",
        "content": "2024-07-15 00:52:02\n AM -> 2071074234:\n— Северсталь\n— Ссылка: https://ekaterinburg.hh.ru/vacancy/102210908?hhtmFrom=employer_vacancies\n— ЗП: сказал от 200, дали 250\n— Результат: ✅ успех\n\n— Вопросы:\n1) Расскажи про себя, свой опыт, почему увольняешься?\n2) Расскажи про мемоизацию, её минусы?\n3) Условия ререндера компонента?\n4) Алгоритм сравнения DOM, какая сложность?\n5) Что ты выберешь из 3 вариантов: деньги, интересные задачи, отличный коллектив? (можно выбрать 2 варианта)\n6) В каком направлении ...",
        "full_content": "2024-07-15 00:52:02\n AM -> 2071074234:\n— Северсталь\n— Ссылка: https://ekaterinburg.hh.ru/vacancy/102210908?hhtmFrom=employer_vacancies\n— ЗП: сказал от 200, дали 250\n— Результат: ✅ успех\n\n— Вопросы:\n1) Расскажи про себя, свой опыт, почему увольняешься?\n2) Расскажи про мемоизацию, её минусы?\n3) Условия ререндера компонента?\n4) Алгоритм сравнения DOM, какая сложность?\n5) Что ты выберешь из 3 вариантов: деньги, интересные задачи, отличный коллектив? (можно выбрать 2 варианта)\n6) В каком направлении дальше хочешь развиваться? \n7) Откуда берешь новые знания, что последнее интересное читал?\n8) Расскажи про жизненный цикл событий? \n9) На какой фазе отрабатывает handle? \n10) Есть ли способ чтобы событие отрабатывала на погружение?\n11) Как откатить merge request в публичной ветке?\n12) git revert и git reset их отличие? \n13) Работал ли с CI/CD? \n14) Использовали ли вы ErrorBoundary? Представь, что нужно написать свой ErrorBoundary, какие механизмы ты бы использовал? \n15) Можно ли на основе прототипного наследования реализовать множественное наследование? \n16) Как в Event Loop решаются макро- и микро- процессы, очередность макро- и микро- задач?\n17) Как подвесить событийный цикл? \n\n— Задачи: \nЗадача 1 - получить таблицу по ролям + totalWeight\nconst goods = [ \n  {id: 'ab', name: 'Имя-01', type: 'сталь', weight: 1 }, \n  {id: 'bc',name: 'Имя-02', type: 'чугун', weight: 2 }, \n  {id: 'cd',name: 'Имя-03', type: 'cтaль', weight: 3 }, \n  {id: 'de',name: 'Имя-04', type: 'чугун', weight: 4 }, \n  {id: 'ef',name: 'Имя-05', type: 'чугун', weight: 5 }, \n  {id: 'fg',name: 'Имя-03', type: 'cтaль', weight: '4'}, \n];\n\n// Задача: получить таблицу по ролям + totalWeight:\n// {\n//    'сталь': {ids: ['ab', 'cd', 'fg'], totalWeight: 8},\n//    'чугун': {ids: ['bc', 'de', 'ef'], totalWeight: 11},\n// }\n\n// решение\nconst result = goods.reduce((acc, item) => {\n  // Преобразуем weight в число\n  const weight = +item.weight;\n\n  if (!acc[item.type]) {\n    acc[item.type] = { ids: [], totalWeight: 0 };\n  }\n\n  acc[item.type].ids.push(item.id);\n  acc[item.type].totalWeight += weight;\n\n  return acc;\n}, {});\n\n\nЗадача 2 - рефакторинг кода \nimport React, { useState, useEffect } from \"react\";\n\n// имитация запроса к серверу, просто получим число асинхронно\nconst fetchRandomNumber = () => \n  Math.random() < 0.5\n    ? Promise.resolve(Math.random())\n    : Promise.reject(new Error('Ошибка запроса.'));\n\n\nconst App = () => {\n  const [number, setNumber] = useState();\n  const [scroll, setScroll] = useState();\n\n  useEffect(async () => {\n      setNumber(await fetchRandomNumber());\n      \n      window.addEventListener(\"scroll\", () => setScroll(window.scrollY));\n  \n      return () => window.removeEventListener(\"scroll\", \n        () => setScroll(window.scrollY)\n      );\n  });\n  \n  return (\n    <div>\n        <div>Number: {number}</div> // добавить проверку на number\n        <div>Scroll: {scroll}</div>\n    </div>\n  )\n}\n\nДополнение к 2 задаче - написать useThrottle\nimport { useState, useEffect, useRef } from 'react';\n\nfunction useThrottle(value, limit) {\n  const [throttledValue, setThrottledValue] = useState(value);\n  const lastRan = useRef(Date.now());\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      if (Date.now() - lastRan.current >= limit) {\n        setThrottledValue(value);\n        lastRan.current = Date.now();\n      }\n    }, limit - (Date.now() - lastRan.current));\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, limit]);\n\n  return throttledValue;\n}\n\nexport default useThrottle;"
      },
      {
        "timestamp": "2024-06-28 13:48:47",
        "content": "2024-06-28 13:48:47\n Vildan Khabibov -> 2071074234:\n- Северсталь\n- https://ufa.hh.ru/vacancy/102674624\n- ЗП: от 250к\n- Задачи: Было так же онлайн тестирование, не все рассуждения и ответы в записи видео верны.",
        "full_content": "2024-06-28 13:48:47\n Vildan Khabibov -> 2071074234:\n- Северсталь\n- https://ufa.hh.ru/vacancy/102674624\n- ЗП: от 250к\n- Задачи: Было так же онлайн тестирование, не все рассуждения и ответы в записи видео верны."
      },
      {
        "timestamp": "2024-06-28 13:46:45",
        "content": "2024-06-28 13:46:45\n Vildan Khabibov -> 2071074234:\n- Северсталь\n- https://ufa.hh.ru/vacancy/102674624\n- ЗП: от 250к\n- Задачи: Было так же онлайн тестирование, не все рассуждения и ответы в записи видео верны.\n\n/** Задача\n - Получить список предметов из сервера getServerItemsApi();\n - Получить список предметов из стима getSteamItemsApi();\n - Отфильтровать список предметов стима оставив предметы, которых нет на сервере\n - Добавить новые предметы на сервер saveItemToServerApi (Одновременно можно д...",
        "full_content": "2024-06-28 13:46:45\n Vildan Khabibov -> 2071074234:\n- Северсталь\n- https://ufa.hh.ru/vacancy/102674624\n- ЗП: от 250к\n- Задачи: Было так же онлайн тестирование, не все рассуждения и ответы в записи видео верны.\n\n/** Задача\n - Получить список предметов из сервера getServerItemsApi();\n - Получить список предметов из стима getSteamItemsApi();\n - Отфильтровать список предметов стима оставив предметы, которых нет на сервере\n - Добавить новые предметы на сервер saveItemToServerApi (Одновременно можно добавлять не более 2 предметов*);\n * Дополнительно\n\n */\n\nconst mockServerItems = [\"Aquamarine Revenge (Minimal Wear)\", \"Case Hardened (Field-Tested)\", \"Jet Set (Well-Worn)\", \"AUG | Daedalus (Field-Tested)\"];\nconst mockSteamItems = [\"Aquamarine Revenge (Minimal Wear)\", \"Case Hardened (Field-Tested)\", \"Jet Set (Well-Worn)\", \"AUG | Daedalus (Field-Tested)\", \"R8 Revolver | Crazy 8 (Factory New)\"];\n\nfunction saveItemToServerApi(value) {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(value), 1000)\n  })\n}\n\nfunction getServerItemsApi() {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(mockServerItems), 1000)\n  })\n}\n\nfunction getSteamItemsApi() {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(mockSteamItems), 1000)\n  })\n}\n\nasync function parsingNewItems() {\n  try {\n    // Получить список предметов из сервера\n    const serverItems = await getServerItemsApi();\n    console.log('Server Items:', serverItems);\n\n    // Получить список предметов из стима\n    const steamItems = await getSteamItemsApi();\n    console.log('Steam Items:', steamItems);\n\n    // Отфильтровать список предметов из стима, оставив предметы, которых нет на сервере\n    const newItems = steamItems.filter(item => !serverItems.includes(item));\n    console.log('New Items:', newItems);\n\n    // Добавлять новые предметы на сервер, одновременно не более двух предметов\n    for (let i = 0; i < newItems.length; i += 2) {\n      const itemsToSave = newItems.slice(i, i + 2);\n      console.log('Saving Items:', itemsToSave);\n      await Promise.all(itemsToSave.map(item => saveItemToServerApi(item)));\n      console.log('Saved Items:', itemsToSave);\n    }\n\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\n// типизировать функцию getDetails\n\nconst mappingValues = {\n   name: (value: string) => Name: ${value},\n}\n\ntype User = {\n   name: string;\n   age: number;\n}\n\nconst user: User = {\n  name: 'Oleg',\n  age: 22,\n}\n\nfunction getDetails(obj, mapping) {\n   const result: Array<{ key: string; value: unknown }> = []\n   for (const key in obj) {\n      const value = obj[key]\n      const fn = mapping[key]\n      result.push({ key, value: fn ? fn(value) : value })\n   }\n   return result\n}\n\nconst details = getDetails(user, mappingValues)\n\n//решение\ntype Mapping<T> = {\n  [K in keyof T]?: (value: T[K]) => unknown;\n};\n\nfunction getDetails<T extends object>(obj: T, mapping: Mapping<T>)"
      },
      {
        "timestamp": "2024-05-31 10:59:59",
        "content": "2024-05-31 10:59:59\n Daniil Max -> 2071074234:\n— Название компании: Северсталь\n— Ссылка на вакансию: ссылки нет, на hh спамил отклики \n— ЗП: 250К. Но позиция была senior разраба, поэтому зп можно выше просить \n— Задачи: теория + практика \n\nВидео на ютуб: https://youtu.be/cf4HaOdt9SU?si=YCPdpLFzB_7uR0lW\n\n— Успех собеса: ❌\n— Фитбек о собесе от HR: \nАнна, если можно направь ему лично от меня фидбек, что не взяли потому, что проекты большие, сложные. Много бизнес-логики. Много взаимодействия с други...",
        "full_content": "2024-05-31 10:59:59\n Daniil Max -> 2071074234:\n— Название компании: Северсталь\n— Ссылка на вакансию: ссылки нет, на hh спамил отклики \n— ЗП: 250К. Но позиция была senior разраба, поэтому зп можно выше просить \n— Задачи: теория + практика \n\nВидео на ютуб: https://youtu.be/cf4HaOdt9SU?si=YCPdpLFzB_7uR0lW\n\n— Успех собеса: ❌\n— Фитбек о собесе от HR: \nАнна, если можно направь ему лично от меня фидбек, что не взяли потому, что проекты большие, сложные. Много бизнес-логики. Много взаимодействия с другими программистами и со смежниками. Дедлайны жесткие. Т.е. у нас в моменте мало времени на эксперименты в духе потянет/нет. На отсутствие вышки можно закрыть глаза, на большой опыт в годах тоже, реальный опыт нужен. Его pet-проектами не заменишь. Можно попробовать несколько месяцев поработать в ya, vk, mail и т.п. - это не так долго, зато опыт будет реальный!\n\n— Комментарий:🥇ШОУ-ВКАТУН Александр Волков! 😎"
      },
      {
        "timestamp": "2024-05-30 17:18:29",
        "content": "2024-05-30 17:18:29\n stil -> 2071074234:\nНазвание компании: Северсталь\nЗп: 270к\nЗадача:\nimport { useState, useEffect } from \"react\"\nimport _ from \"lodash\"\n\n// 1. Получить и вывести первые 10 постов, адрес:\n// https://dummyjson.com/posts?limit=${limit}&skip=${skip}\n// 2. Реализовать постраничный просмотр постов с помощью кнопок Prev / Next\n// 3. Вывести теги загруженных постов, одинаковые теги не должны повторяться\n// 4. При клике на тег реализовать фильтрацию загруженных постов по тегу\n// 5. Реа...",
        "full_content": "2024-05-30 17:18:29\n stil -> 2071074234:\nНазвание компании: Северсталь\nЗп: 270к\nЗадача:\nimport { useState, useEffect } from \"react\"\nimport _ from \"lodash\"\n\n// 1. Получить и вывести первые 10 постов, адрес:\n// https://dummyjson.com/posts?limit=${limit}&skip=${skip}\n// 2. Реализовать постраничный просмотр постов с помощью кнопок Prev / Next\n// 3. Вывести теги загруженных постов, одинаковые теги не должны повторяться\n// 4. При клике на тег реализовать фильтрацию загруженных постов по тегу\n// 5. Реализовать механизм поиска постов по введенному тексту, адресЖ\n// https://dummyjson.com/posts/search?q=${q}\n\nconst POST_LIMIT = 10\n\nconst fetchPosts = () => {}\n\n// const fetchPostsWithSearch = () => {}\n\nexport default function App() {\n  const [posts, setPosts] = useState<Post[]>([])\n\n  const tags = []\n\n  // Предыдущая / следующая страница\n  const handleNextClick = () => {}\n  const handlePrevClick = () => {}\n\n  // Тег\n  const handleTagClick = () => {}\n\n  // Поиск\n  // const handleSearchChange = () => {}\n\n  useEffect(() => {})\n\n  return (\n    <div className=\"App\">\n      <h1>Posts</h1>\n      {/** Постраничный просмотр */}\n      <div style={{ display: \"flex\", gap: 16 }}>\n        <button type=\"button\">Prev</button>\n        <button type=\"button\">Next</button>\n        <input />\n      </div>\n      {/** Теги */}\n      <div\n        style={{\n          marginBlock: 16,\n          paddingBlock: 16,\n          display: \"flex\",\n          gap: 16,\n          flexWrap: \"wrap\",\n          borderTop: \"1px solid black\",\n          borderBottom: \"1px solid black\",\n        }}\n      >\n        <button type=\"button\">reset</button>\n        {tags.map((tag) => (\n          <button type=\"button\" key={tag}>\n            {tag}\n          </button>\n        ))}\n      </div>\n      {/** Посты */}\n      <div>\n        {posts.map((post) => (\n          <PostCard {...post} key={post.id} />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nconst PostCard = (props: Post) => {\n  const { tags, title, body } = props\n\n  return (\n    <div>\n      <h3>{title}</h3>\n      <p>{body}</p>\n      <p style={{ display: \"flex\", gap: 16 }}>\n        {tags.map((tag) => (\n          <small key={tag} style={{ border: \"1px solid\", padding: 5 }}>\n            {tag}\n          </small>\n        ))}\n      </p>\n    </div>\n  )\n}\n\ntype PostContainer = {\n  total: number\n  skip: number\n  limit: number\n  posts: Post[]\n}\n\ntype Post = {\n  id: number\n  title: string\n  body: string\n  userId: number\n  tags: string[]\n}"
      },
      {
        "timestamp": "2024-05-13 20:34:44",
        "content": "2024-05-13 20:34:44\n Aleksandr -> 2071074234:\nНазвание компании - Северсталь\nВакансия: https://hh.ru/vacancy/98263726?hhtmFromLabel=suitable_employer_vacancies&hhtmFrom=vacancy\nЗП: от 300 net запросил\nЗадачи: Немного теории, лайвкодинг \nЗапись: https://youtu.be/kypCKo833aU\nУспех: ✅ (принял оффер, на 320 net и премии 25% от годового)\nКомментарий от себя: Собес должен был идти полтора часа, а в итоге за 45-50 минут закончили (но им выделили в этот раз всего 60 минут), сперва поговорили про мой опы...",
        "full_content": "2024-05-13 20:34:44\n Aleksandr -> 2071074234:\nНазвание компании - Северсталь\nВакансия: https://hh.ru/vacancy/98263726?hhtmFromLabel=suitable_employer_vacancies&hhtmFrom=vacancy\nЗП: от 300 net запросил\nЗадачи: Немного теории, лайвкодинг \nЗапись: https://youtu.be/kypCKo833aU\nУспех: ✅ (принял оффер, на 320 net и премии 25% от годового)\nКомментарий от себя: Собес должен был идти полтора часа, а в итоге за 45-50 минут закончили (но им выделили в этот раз всего 60 минут), сперва поговорили про мой опыт, на записи поздно начал записывать, там я даже чуток потерялся, так как они тупо шли по резюме и у меня был пункт со 2 места работы, за который я вообще пояснить не мог, но отмазка, мол давно было - сработала ))\nА так тупо по резюме идут после твоего короткого рассказа и спрашивают по конкретным пунктам\n\nИ на собесе меня неслышно (("
      }
    ]
  },
  {
    "company": "IT-One",
    "count": 16,
    "records": [
      {
        "timestamp": "2025-06-27 05:33:02",
        "content": "2025-06-27 05:33:02\n Евгений -> 2071074234:\nКомпания IT ONE \nНа проект СБЕРа \nзп от 230\n\nпочти 2 часа лайвокодинга и между задачами спрашивал теорию\nВопросы:\n1. какая алгоритмическая сложность у первой задачи\n2. Какие есть функции\n3. Чем отличается var, let, const\n4. Temporal Dead Zone\n5. Области видимости\n6. Замыкание\n7. Какие способы хранения информации\n8. Eventloop\n9. requestIdleCallback\n10. Статические методы промисов\n11. Назвать Utility types\n12. unknown\n13. useState подробнее рассказать\n14...",
        "full_content": "2025-06-27 05:33:02\n Евгений -> 2071074234:\nКомпания IT ONE \nНа проект СБЕРа \nзп от 230\n\nпочти 2 часа лайвокодинга и между задачами спрашивал теорию\nВопросы:\n1. какая алгоритмическая сложность у первой задачи\n2. Какие есть функции\n3. Чем отличается var, let, const\n4. Temporal Dead Zone\n5. Области видимости\n6. Замыкание\n7. Какие способы хранения информации\n8. Eventloop\n9. requestIdleCallback\n10. Статические методы промисов\n11. Назвать Utility types\n12. unknown\n13. useState подробнее рассказать\n14. В чем разница между рендерингом и отрисовкой\n15. Отличие useEffect от useLayaotEffect\n16. lazy initialization\n17. функция очистки\n18. useRef\nЗадача 1:\nArray.prototype.findUnique = function () {\n    const mapa = new Map();\n    \n    this.forEach((el) => {\n        if (mapa.has(el)) {\n            mapa.set(el, mapa.get(el) + 1);\n        } else {\n            mapa.set(el, 1);\n        }\n    });\n    \n    const result = [];\n    mapa.forEach((count, key) => {\n        if (count === 1) result.push(key);\n    });\n    \n    return result;\n};\n\nconsole.log([10, 5, 10, 0, 6, 6, 7, 2, 9].findUnique()); // [5, 0, 7, 2]\nЗадача 2: написать функцию замыкания\nfunction func1() {\n    let a = 0;\n    return function() {\n        count++;\n        return count;\n    }\n}\n\nconst couter = func1();\nЗадача 3: сказать для чего это \n1. ?.\n2. ...\n3. ??\n4. &&=\n5. structuredClone(bar)\n6. someArray.at(0)\nЗадача 4: по мимо что выведет еще объяснить почему\nlet obj = { a: 1 };\nlet array = [obj];\nobj = { ...obj, b: 5 };\n\nconsole.log(obj); // { a: 1, b: 5 }\nconsole.log(array); // [{ a: 1 }]\nЗадача 5: евентлуп\nsetTimeout(() => {\n    console.log(\"timeOut\");\n}, 0);\n\nconsole.log(1);\n\nnew Promise(resolve => {\n    console.log(\"Promise\");\n    setTimeout(() => {\n        console.log(\"777\");\n        resolve();\n    }, 0);\n}).then(() => {\n    console.log(\"then1\");\n}).then(() => {\n    console.log(\"then2\");\n});\n\nconsole.log(4);\n\nsetTimeout(() => {\n    console.log(\"timeOut2\");\n}, 0);\n\n// 1 Promise 4 timeOut 777 then1 then2 timeOut2\nЗадача 6: что тут происходит и что будет в Result\ntype ExampleType = {\n    Field1: string;\n    Field2: string;\n    Field3: number;\n    Field4: boolean;\n};\n\ntype T1<S, T> = { [K in keyof S]: S[K] extends T ? K : never }[keyof S];\n\ntype Result = T1<ExampleType, string>;\nЗадача 7: типизировать\n \nconst X = { a: 1, b: 2, c: 3, d: 4 };\n\nfunction getProperty<T extends object, K extends keyof T>(obj: T, key: K): T[K] {\n    return obj[key];\n}\n\ngetProperty(X, 'a');\ngetProperty(X, '_m'); // Error: Type '\"_m\"' is not assignable to type '\"a\" | \"b\" | \"c\" | \"d\"'\nЗадача 8: подсветить ref \n// Почему хук usePrevious всегда возвращает предыдущее значение value, хотя внутри хука useEffect отрабатывает на каждое изменение value?\n\nimport React, { useState, useRef, useEffect } from \"react\";\n\nfunction usePrevious(value) {\n    const ref = useRef(value);\n\n    useEffect(() => {\n        ref.current = value;\n    }, [value]);\n\n    return ref.current;\n}\n\nconst Previous = () => {\n    const [count, setCount] = useState(0);\n    const previousCount = usePrevious(count);\n\n    return (\n        <>\n            <p>Current: {count}</p>\n            <p>Previous: {previousCount}</p>\n            <button onClick={() => setCount(prevCount => prevCount + 5)}>Random</button>\n        </>\n    );\n};\n\nexport default Previous;\nЗадача 9: выведет 2 1 3, объяснить почему \nimport React, { useState, useLayoutEffect, useEffect } from \"react\";\n\nconst Effects = () => {\n    const [count, setCount] = useState(0);\n\n    useLayoutEffect(() => console.log(\"each render 1\"));\n\n    console.log(\"each render 2\");\n\n    useEffect(() => console.log(\"each render 3\"));\n\n    return (\n        <>\n            <button onClick={() => setCount((prevProps) => ++prevProps)}>\n                Increment\n            </button>\n        </>\n    );\n};\n\nexport default Effects;\nЗадача 10:  lazy initialization"
      },
      {
        "timestamp": "2025-02-03 13:00:22",
        "content": "2025-02-03 13:00:22\n Сергей -> 2071074234:\nКомпания: IT-ONE\nВакансия: HR сама написала\nВопросы: \n- Расскажи про свой опыт кратко\n- Задачи очень похожи с https://t.me/c/2071074234/489/97674\n- Какие структуры данных знаешь\n- Задачи:\n\n// 1\nconst users = [\n  { id: 1, age: 20, isAdmin: false, name: 'Иван', city: 'Moscow', registred: false },\n  { id: 2, age: 30, isAdmin: false, name: 'Дима', city: 'Omsk', registred: false },\n  { id: 3, age: 20, isAdmin: true, name: 'Леха', city: 'Moscow', registred: t...",
        "full_content": "2025-02-03 13:00:22\n Сергей -> 2071074234:\nКомпания: IT-ONE\nВакансия: HR сама написала\nВопросы: \n- Расскажи про свой опыт кратко\n- Задачи очень похожи с https://t.me/c/2071074234/489/97674\n- Какие структуры данных знаешь\n- Задачи:\n\n// 1\nconst users = [\n  { id: 1, age: 20, isAdmin: false, name: 'Иван', city: 'Moscow', registred: false },\n  { id: 2, age: 30, isAdmin: false, name: 'Дима', city: 'Omsk', registred: false },\n  { id: 3, age: 20, isAdmin: true, name: 'Леха', city: 'Moscow', registred: true },\n  { id: 4, age: 20, isAdmin: false, name: 'Леха', city: 'Omsk', registred: false },\n  { id: 5, age: 30, isAdmin: false, name: 'Иван', city: 'Moscow', registred: true },\n  { id: 6, age: 30, isAdmin: false, name: 'Леха', city: 'Moscow', registred: true },\n  { id: 7, age: 20, isAdmin: true, name: 'Иван', city: 'Omsk', registred: true },\n]\n\n// Необоходимо преобразовать исходный массив в структуру,\n// где данные пользователя будут сгруппированы по одному из полей объекта user(кроме поля id)\n// Внутри сформированной группы должен лежить объект(или Map),\n// ключи в котором должно быть поле 'id'\n// а значения, объект из исходного массива с соответствующим полем \"id\"(не включая само поле id)\n// Один из варинатов результата (для поля age)\n\nconst result = {\n  20: {\n    1: { age: 20, isAdmin: false, name: 'Иван', city: 'Moscow', registred: false },\n    3: { age: 20, isAdmin: true, name: 'Леха', city: 'Moscow', registred: true },\n    4: { age: 20, isAdmin: false, name: 'Леха', city: 'Omsk', registred: false },\n    7: { age: 20, isAdmin: true, name: 'Иван', city: 'Omsk', registred: true },\n  },\n  30: {\n    2: { age: 30, isAdmin: false, name: 'Дима', city: 'Omsk', registred: false },\n    5: { age: 30, isAdmin: false, name: 'Иван', city: 'Moscow', registred: true },\n  },\n}\n\n// 2\n// Что выведется в консоли?\nfoo()\nfoo1()\n\nfunction foo() {\n  console.log('foo')\n}\n\nconst foo1 = function () {\n  console.log('foo1')\n}\n\n// 3\n// Что выведется в консоли?\nfunction makeCounter() {\n  let c = 1\n  return function () {\n    return c++\n  }\n}\n\nconst counter = makeCounter()\nconst counter2 = makeCounter()\n\nconsole.log(counter)\nconsole.log(counter2)\n\nconsole.log(counter)\nconsole.log(counter2)\n\n// 4\n// Что выведется в консоли?\nfoo()\n\nfunction foo() {\n  console.log(this)\n}\n\n// 5\n// Что выведется в консоли?\nconst a = {\n  name: 'Name',\n  log() {\n    const a = this\n    const inner = function () {\n      console.log(a.name)\n    }\n    inner()\n  },\n}\n\na.log()\n\n// 6\n// Что выведется в консоли?\nconst obj1 = {\n  name: 1,\n  foo: function () {\n    return this.name\n  },\n}\n\nconst obj2 = {\n  name: 2,\n  bar: obj1.foo,\n}\n\nconsole.log(obj2.bar())\n\n// 7\n// Что выведется в консоли?\nlet obj = { a: 1 }\nlet array = [obj]\nobj = { ...obj, b: 5 }\nconsole.log(obj)\nconsole.log(array)\n\n// 8\n// Что выведется в консоли?\nimport { useEffect, useLayoutEffect, useState } from 'react'\n\nconst Effects = () => {\n  const [count, setCount] = useState(0)\n\n  useLayoutEffect(() => console.log('each render 1'), [])\n  console.log('each render 2')\n  useEffect(() => console.log('each render 3'), [])\n\n  return (\n    <>\n      <button onClick={() => setCount((prevProps) => ++prevProps)}>Increment</button>\n    </>\n  )\n}\n\n// 9\n// Зарефакторить компонент\nimport React from 'react'\n\nconst SomeElement = ({ hasData }) => {\n  if (hasData) {\n    return (\n      <div>\n        <DataElement />\n        <SomeImportantElement />\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      {hasData && <DataElement />}\n      <SomeImportantElement />\n    </div>\n  )\n}\n\n// 10\n// Что будет отображено в блоке с \"Значание: \", если быстро передвинуть ползунок в конечное положение?\n// Доп вопрос: А если потом быстро вернуть его обратно?\n\nimport React, { useState } from 'react'\n\nfunction InputComponent() {\n  const [value, setValue] = useState('1')\n  const onChnage = (event) => {\n    setValue(event.target.value)\n    setTimeout(() => {\n      setValue(value)\n    }, 2000)\n  }\n\n  return (\n    <>\n      <input min=\"1\" max=\"4\" step=\"1\" value={value} type=\"range\" onChange={onChnage} />\n      <br />\n      Значение: {value}\n    </>\n  )\n}"
      },
      {
        "timestamp": "2025-01-30 07:07:25",
        "content": "2025-01-30 07:07:25\n Сергей -> 2071074234:\nКомпания: IT-ONE\nВакансия: hr писала\nВопросы: \n- Задачи очень похожи с  https://t.me/c/2071074234/489/97674\n- Какие структуры данных знаешь\n- Задачи:\n//Имеется исходный массив из объектов пользователей\nconst users = [\n    { id: 1, age: 20, isAdmin: false, name: \"Иван\", city: \"Moscow\", registred: false },\n    { id: 2, age: 30, isAdmin: false, name: \"Дима\", city: \"Omsk\", registred: false },\n    { id: 3, age: 20, isAdmin: true, name: \"Леха\", city: \"Moscow\"...",
        "full_content": "2025-01-30 07:07:25\n Сергей -> 2071074234:\nКомпания: IT-ONE\nВакансия: hr писала\nВопросы: \n- Задачи очень похожи с  https://t.me/c/2071074234/489/97674\n- Какие структуры данных знаешь\n- Задачи:\n//Имеется исходный массив из объектов пользователей\nconst users = [\n    { id: 1, age: 20, isAdmin: false, name: \"Иван\", city: \"Moscow\", registred: false },\n    { id: 2, age: 30, isAdmin: false, name: \"Дима\", city: \"Omsk\", registred: false },\n    { id: 3, age: 20, isAdmin: true, name: \"Леха\", city: \"Moscow\", registred: true },\n    { id: 4, age: 20, isAdmin: false, name: \"Леха\", city: \"Omsk\", registred: false },\n    { id: 5, age: 30, isAdmin: false, name: \"Иван\", city: \"Moscow\", registred: true },\n    { id: 6, age: 30, isAdmin: false, name: \"Леха\", city: \"Moscow\", registred: true },\n    { id: 7, age: 20, isAdmin: true, name: \"Дима\", city: \"Omsk\", registred: true },\n];\n// Необходимо перобразовать исходный массив в структуру,\n// где данные пользователя будут сгруппированы по одному из полей объекта user (кроме поля id)\n// Внутри софрмированной группы должен лежать объект (или Map),\n// ключами в котором должно быть поле \"id\"\n// а значением, объект из исходного массива с соответствующим полем \"id\" (не включая само поле id)\n// Один из вариантов результата (для поля age)\nconst result = {\n    20: {\n        1: { age: 20, isAdmin: false, name: \"Иван\", city: \"Moscow\", registred: false },\n        3: { age: 20, isAdmin: true, name: \"Леха\", city: \"Moscow\", registred: true },\n        4: { age: 20, isAdmin: false, name: \"Леха\", city: \"Omsk\", registred: false },\n        7: { age: 20, isAdmin: true, name: \"Дима\", city: \"Omsk\", registred: true }\n    },\n    30: {\n        2: { age: 30, isAdmin: false, name: \"Дима\", city: \"Omsk\", registred: false },\n        5: { age: 30, isAdmin: false, name: \"Иван\", city: \"Moscow\", registred: true }\n    }\n}\n\n\nfoo();\nfoo1();\n\nfunction foo() {\n    console.log(\"foo\");\n}\n\nconst foo1 = function () {\n    console.log(\"foo1\");\n};\n\n\n\nfunction makeCounter() {\n    let c = 1;\n    return function () {\n        return c++;\n    }\n}\n\nconst counter = makeCounter();\nconst counter2 = makeCounter();\n\nconsole.log(counter());\nconsole.log(counter2());\n\nconsole.log(counter());\nconsole.log(counter2());\n\n\nfoo();\n\nfunction foo() {\n    console.log(this);\n}\n\n\nconst a = {\n    name: \"Name\",\n    log() {\n        const a = this\n        const inner = function () {\n            console.log(a.name);\n        };\n\n        inner();\n    },\n};\n\na.log();\n\n\nconst obj1 = {\n    name: 1,\n    foo: function () {\n        return this.name;\n    },\n};\n\nconst obj2 = {\n    name: 2,\n    bar: obj1.foo,\n};\n\nconsole.log(obj2.bar());\n\n\nlet obj = { a: 1 };\nlet array = [obj];\nobj = { ...obj, b: 5 };\nconsole.log(obj);\nconsole.log(array);\n\n\n\nimport { useEffect, useLayoutEffect, useState } from \"react\";\n\nconst Effects = () => {\n    const [count, setCount] = useState(0);\n\n    useLayoutEffect(() => console.log(\"each render 1\"), []);\n\n    console.log(\"each render 2\");\n\n    useEffect(() => console.log(\"each render 3\"), []);\n\n    return (\n        <>\n            <button onClick={() => setCount((prevProps) => ++prevProps)}>\n                Increment\n            </button>\n        </>\n    );\n};\n\nexport default Effects;"
      },
      {
        "timestamp": "2024-10-07 14:18:15",
        "content": "2024-10-07 14:18:15\n Михаил -> 2071074234:\nIT ONE\nвакансия - HR сама написала\nзп 200к",
        "full_content": "2024-10-07 14:18:15\n Михаил -> 2071074234:\nIT ONE\nвакансия - HR сама написала\nзп 200к"
      },
      {
        "timestamp": "2024-08-29 09:24:21",
        "content": "2024-08-29 09:24:21\n Руслан -> 2071074234:\nit one команда газпромбанка\n— зп: от 270к\n— вакансия: https://www.it-one.ru/vacancies/846ffa42488552e9b4d52dcd9dfd0ea2/\n— задачи:\nНа то, что выведется в консоли, как поведет себя код. + задачка на рендер дерева в таблице",
        "full_content": "2024-08-29 09:24:21\n Руслан -> 2071074234:\nit one команда газпромбанка\n— зп: от 270к\n— вакансия: https://www.it-one.ru/vacancies/846ffa42488552e9b4d52dcd9dfd0ea2/\n— задачи:\nНа то, что выведется в консоли, как поведет себя код. + задачка на рендер дерева в таблице"
      },
      {
        "timestamp": "2024-08-25 17:52:12",
        "content": "2024-08-25 17:52:12\n Руслан -> 2071074234:\nIt one собес в команду\n—  вакансия: https://www.it-one.ru/vacancies/759d0d4ccd651559a6f2decbfd6c5f60/\n— зп: от 270к\n— Задачи:\n1. Написать кастомный flat метод и протипизировать\n— Вопросы:\n1. про опыт и интересные задачи\n2. map, foreach, reduce - для чего\n3. Nan\n4. Про промисы\n5. эвент луп",
        "full_content": "2024-08-25 17:52:12\n Руслан -> 2071074234:\nIt one собес в команду\n—  вакансия: https://www.it-one.ru/vacancies/759d0d4ccd651559a6f2decbfd6c5f60/\n— зп: от 270к\n— Задачи:\n1. Написать кастомный flat метод и протипизировать\n— Вопросы:\n1. про опыт и интересные задачи\n2. map, foreach, reduce - для чего\n3. Nan\n4. Про промисы\n5. эвент луп"
      },
      {
        "timestamp": "2024-08-17 18:12:57",
        "content": "2024-08-17 18:12:57\n Руслан -> 2071074234:\nit one 2й этап тех собес \n— зп: от 270к\n— вакансия: https://www.it-one.ru/vacancies/7b335475edf612a10306cd80ca5bcd7c/\n— задачи:\nfunction x() {}\nconsole.log(typeof x); // ?\nconsole.log(x instanceof Object); // ?\n\nvar str1 = String(123);\nvar str2 = new String(123);\n\nconsole.log(typeof str1 === typeof str2); // ?\nconsole.log(str1 === str2); // ?\nconsole.log(str1 === String(123)); // ?\nconsole.log(str2 === new String(123)); // ?\nconsole.log(str1 === 123); /...",
        "full_content": "2024-08-17 18:12:57\n Руслан -> 2071074234:\nit one 2й этап тех собес \n— зп: от 270к\n— вакансия: https://www.it-one.ru/vacancies/7b335475edf612a10306cd80ca5bcd7c/\n— задачи:\nfunction x() {}\nconsole.log(typeof x); // ?\nconsole.log(x instanceof Object); // ?\n\nvar str1 = String(123);\nvar str2 = new String(123);\n\nconsole.log(typeof str1 === typeof str2); // ?\nconsole.log(str1 === str2); // ?\nconsole.log(str1 === String(123)); // ?\nconsole.log(str2 === new String(123)); // ?\nconsole.log(str1 === 123); // ?\nconsole.log(str1 === \"123\"); // ?\n\nconsole.log(str1 == str2); // ?\nconsole.log(str1 == 123); // ?\nconsole.log(str1 == \"123\"); // ?\n\nvar y = [];\nconsole.log(typeof y); // ?\n\nvar str3 = \"123\";\nstr3[0] = \"2\";\nconsole.log(str3); // ?\n\n\nvar a = 1 + 2 + 3 + \"\";\nvar b = \"\" + 1 + 2 + 3;\n\nconsole.log(a); // ?\nconsole.log(b); // ?\n\nvar c = \"123x\";\nconsole.log(Number(c)); // ?\nconsole.log(parseInt(c, 10)); // ?\nconsole.log(+c); // ?\nconsole.log(typeof +c); // ?\n\nconsole.log(Boolean(String(false))); // ?\n\nvar d = [];\nconsole.log(d ? 1 : 2); // ?\n\n\nvar i = 1;\nvar b = {};\n\n(function() {\n    i++;\n    b.j = 1;\n})();\n\nconsole.log(i, b); // ?\n\n(function(i, b) {\n    i++;\n    b.k = 1;\n})(i, b);\n\nconsole.log(i, b); // ?\n\nvar p = x =>\n    new Promise(resolve =>\n        setTimeout(() => resolve(x), 1000)\n    );\n\nPromise.resolve(1)\n    .then(x =>\n        p(x)\n    )\n    .then(v => console.log(v));\n\nPromise.resolve(2)\n    .then(x => {\n        p(x)\n    })\n    .then(v => console.log(v));\n\nconsole.log(3);\n\n// что за что отвечает\ntype Func<T, K extends keyof T> = (a: T, b: K) => T[K];\n\ntype T1 = ReturnType<any>;\ntype T2 = Parameters<any>;\ntype T3 = Omit<any, any>;\ntype T4 = Pick<any, any>;\ntype T5 = Partial<any>;\ntype T6 = Required<any>;\n\n// рефакторинг\n\nfunction Main() {\n  const [counter, setCounter] = useState(0);\n\n  const onClick = useCallback(() => {\n    setCounter(counter + 1);\n  }, [setCounter]);\n\n  return (\n    <div>\n      <button onClick={onClick}>{counter}</button>\n    </div>\n  );\n}\n\n\n\nfunction findPairWithSum(target, arr) {\n    let mapArr = new Map();\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let complited = target - num;\n        if (mapArr.has(complited)) {\n            return [mapArr.get(complited), i]; // Возвращаем индексы\n        }\n        mapArr.set(num, i);\n    }\n    return null; // Если пара не найдена\n}\n\n// Пример использования:\nconst arr = [1, 2, 3, 4, 5];\nconst target = 6;\nconsole.log(findPairWithSum(target, arr)); // Вывод: [1, 3] (индексы чисел 2 и 4)"
      },
      {
        "timestamp": "2024-08-17 17:49:24",
        "content": "2024-08-17 17:49:24\n Руслан -> 2071074234:\nit one 2й этап сбер проект\n— зп: от 270к\n— вакансия: https://www.it-one.ru/vacancies/fc5e2a23182adfedf09a030c0ca1eced/\n— вопросы: \n1. Как выбирал бы что добавить в проект zustand или redux\n2. атрибут key\n3. type vs interface\n4. как был построен процесс разработки компонентов в ui kit\n5. когда твое решение не принимали либо предлагали другое - как разруливали\n6. про процессы в предудущем месте",
        "full_content": "2024-08-17 17:49:24\n Руслан -> 2071074234:\nit one 2й этап сбер проект\n— зп: от 270к\n— вакансия: https://www.it-one.ru/vacancies/fc5e2a23182adfedf09a030c0ca1eced/\n— вопросы: \n1. Как выбирал бы что добавить в проект zustand или redux\n2. атрибут key\n3. type vs interface\n4. как был построен процесс разработки компонентов в ui kit\n5. когда твое решение не принимали либо предлагали другое - как разруливали\n6. про процессы в предудущем месте"
      },
      {
        "timestamp": "2024-07-25 13:49:08",
        "content": "2024-07-25 13:49:08\n Artem D -> 2071074234:\nIT One, тех собес\nзп: ушёл от ответа\nвакансия: сами написали\n\nлайвкодинг:\n1.\n// написать функцию, либо последовательность операций, которая вернет результат следующих условий\n// результат есть строка из сконкатенированных value элементов коллекции, расположенных в обратном порядке символов,\n// результат собирается только из не содержащих записей и конкатенируется в порядке возрастания order\n// результат не содержит одинаковых символов\n\nconst input = [\n...",
        "full_content": "2024-07-25 13:49:08\n Artem D -> 2071074234:\nIT One, тех собес\nзп: ушёл от ответа\nвакансия: сами написали\n\nлайвкодинг:\n1.\n// написать функцию, либо последовательность операций, которая вернет результат следующих условий\n// результат есть строка из сконкатенированных value элементов коллекции, расположенных в обратном порядке символов,\n// результат собирается только из не содержащих записей и конкатенируется в порядке возрастания order\n// результат не содержит одинаковых символов\n\nconst input = [\n  { value: 'abcd', order: 4, expired: false },\n  { value: 'qwex', order: 2, expired: true },\n  { value: 'lyxz', order: 1, expired: false },\n  { value: 'abx2', order: 3, expired: false },\n];\n\nconst Func = function (input) {\n  res = input.sort((item, prev) => item.order - prev.order).reduce((res, item) => {\n    if (item.expired)\n      return res;\n    return res + item.value.split(\"\").reverse().join(\"\");\n  }, \"\")\n  \n  const unique = new Set(res);\n  return Array.from(unique).join('');\n}\n\n\n2.\nsetTimeout(()=>{\n    console.log(\"timeOut\");\n}, 0);\n\nconsole.log(1);\n\nnew Promise(resolve=>{\n    console.log(\"Promise\");\n    setTimeout(()=>{\n        console.log(\"777\");\n        resolve();\n    },0);\n}).then(()=>{\n    console.log(\"then1\");\n}).then(()=>{\n    console.log(\"then2\");\n})\n\nconsole.log(4);\n\nsetTimeout(()=>{\n    console.log(\"timeOut2\");\n}, 0);\n\n// 1\n// Promise\n// 4\n// timeOut\n// 777\n// then1\n// then2\n// timeOut2\n\n\nдальше у меня chatGPT отказывается конвертировать скрин в текст\n\n- Успех: жду\n- Комментарий: Первый собес через сообщество, увы, помогатор подключился только через 40 минут после начала собеса, потому я вообще забыл, что кто-то помогать может и отвечал полностью сам\n\nзапись собеса: https://drive.google.com/file/d/14jfI9SEqjAohy1VmRJTnjNi2auVw9ZzH/view?usp=sharing"
      },
      {
        "timestamp": "2024-07-15 21:19:31",
        "content": "2024-07-15 21:19:31\n Ramis Mubarakov -> 2071074234:\n— IT_ONE, финальный собес на проект Газпромбанка: ГПБ_РКДК (ККП)\n— Ссылка на вакансию: hr написал и скинул ссылку https://www.it-one.ru/vacancies/3c849a30f3e123980434ae4cdffa8426/\n— Озвученная мной ЗП: 250k+\n— Вопросы:\n\n1) Рассказ про опыт в прошлой компании.\n2) «Количество входов в систему возросло». А кто вам выдавал эту информацию?\n3) На фронте замеряли метрики?\n4) Писали ли тесты на проекте? Какие виды тестов писали?\n5) Где хранили бизнес-л...",
        "full_content": "2024-07-15 21:19:31\n Ramis Mubarakov -> 2071074234:\n— IT_ONE, финальный собес на проект Газпромбанка: ГПБ_РКДК (ККП)\n— Ссылка на вакансию: hr написал и скинул ссылку https://www.it-one.ru/vacancies/3c849a30f3e123980434ae4cdffa8426/\n— Озвученная мной ЗП: 250k+\n— Вопросы:\n\n1) Рассказ про опыт в прошлой компании.\n2) «Количество входов в систему возросло». А кто вам выдавал эту информацию?\n3) На фронте замеряли метрики?\n4) Писали ли тесты на проекте? Какие виды тестов писали?\n5) Где хранили бизнес-логику: в сторах или в компонентах?\n6) В useSelector была какая-то логика? Юзали reselect?\n7) Зачем приняли решение писать ui-kit? Чем не устроил Material UI, Ant Design?\n8) Закончили ли вы проекты, о которых рассказал? На каком этапе сейчас они?\n9) Как из одной ветки в другую пару комитов перекинуть?\n10) Чем отличается pooling от long pooling?\n11) Какие знаешь хуки для оптимизации?\n12) Зачем нужен useCallback?\n13) Что происходит в функции конструкторе?\n14) Ты говорил про конструктор класса, а что будет если тело конструктора пустое?\n\n— Задачи:\n1) Исправить ошибки в компоненте:\nconst data = [\n    {\n        key: 0,\n        name: \"Контрагент А\",\n        summ: 123456789\n    },\n    {\n        key: 1,\n        name: \"Контрагент Б\",\n        summ: 987654321\n    },\n    {\n        key: 3,\n        name: \"Контрагент В\",\n        summ: 123456789\n    }\n];\n\nconst api = () => new Promise(resolve => setTimeout(() => resolve(data), 1000));\n\n/////\n\nconst List = () => {\n    const [data, setData] = useState(null);\n\n    useEffect(async () => {\n        const response = await api();\n        setData(response);\n    })\n\n    return (\n        <h1>Список контрагентов</h1>\n        <ul>\n            {data.map((item) => (<li>{item.name}: {item.summ}</li>))}\n        </ul>\n    )\n}\n2) \n// что выведется в консоль?\n\nfunction Pet(name) {\n    this._name = name;\n    this.getName = () => this._name;\n}\n\nconst cat = new Pet('Tom');\nconsole.log(cat.getName()) // Tom\n\nconst { getName } = cat;\nconsole.log(getName()) // Tom\n3) \n// написать класс Singleton, который при вызове возвращает ссылку на один и тот же объект\n\n// const a = new Singleton();\n// const b = new Singleton();\n// a === b ---> true\n4) \n// Реализовать кастомный хук useThrottle(value, delay) ---> throttledValue\n— Успех собеса: ❌"
      },
      {
        "timestamp": "2024-05-22 07:57:00",
        "content": "2024-05-22 07:57:00\n Руслан -> 2071074234:\n— Название компании: It one(первичный собес)\n— Вакансия: написал на почту с их сайта\n— Успех: ✅\n— Задачи(по именам скринов):\n1. Нужно делать через Map, т.к. может быть группировка по registered, тогда в качестве ключей будет  булеан тип.\n2-6: что будет в консоли и почему\n7: что будет лежать в results на 13 строке и почему.\n9: поправить чтобы работало\n10: ответ на 9\n12. протипизировать\n13: сделать OptionalRecord type, чтобы можно было опционально добавля...",
        "full_content": "2024-05-22 07:57:00\n Руслан -> 2071074234:\n— Название компании: It one(первичный собес)\n— Вакансия: написал на почту с их сайта\n— Успех: ✅\n— Задачи(по именам скринов):\n1. Нужно делать через Map, т.к. может быть группировка по registered, тогда в качестве ключей будет  булеан тип.\n2-6: что будет в консоли и почему\n7: что будет лежать в results на 13 строке и почему.\n9: поправить чтобы работало\n10: ответ на 9\n12. протипизировать\n13: сделать OptionalRecord type, чтобы можно было опционально добавлять поля в объект\n14: найти ошибку\n15: оптимизировать ререндер, сделать так, чтобы SubElement ререндерился, когда в него прокидывается четный count\n16: объяснить механизм работы хука"
      },
      {
        "timestamp": "2024-03-27 16:44:57",
        "content": "2024-03-27 16:44:57\n Kirill N -> 2071074234:\nДополнение с 11.03 - 27.03\nКомпания: Minevrasoft 11.03 \nhttps://youtu.be/c2TDgGjVxcQ \n \nКомпания: про Айти ресурс от 12.03 \nhttps://youtu.be/tBrVrALlflE \n \nКомпания: КиберЛаб 12.03 \nhttps://youtu.be/Ayov7AAZ9zA \nКомпания: 16.03 \nhttps://youtu.be/g8awopYcbh4   \n \nКомпания: IT ONE 18 03 \nhttps://youtu.be/opoqwpzVRVo \n \nКомпания: Эвотека 19 03 \nhttps://youtu.be/pq64Y2e0-CQ \n \nКомпания: BAUM от 20 03 \nhttps://youtu.be/YR2G2tRzgJo \n \nКомпания: Сбер Техноло...",
        "full_content": "2024-03-27 16:44:57\n Kirill N -> 2071074234:\nДополнение с 11.03 - 27.03\nКомпания: Minevrasoft 11.03 \nhttps://youtu.be/c2TDgGjVxcQ \n \nКомпания: про Айти ресурс от 12.03 \nhttps://youtu.be/tBrVrALlflE \n \nКомпания: КиберЛаб 12.03 \nhttps://youtu.be/Ayov7AAZ9zA \nКомпания: 16.03 \nhttps://youtu.be/g8awopYcbh4   \n \nКомпания: IT ONE 18 03 \nhttps://youtu.be/opoqwpzVRVo \n \nКомпания: Эвотека 19 03 \nhttps://youtu.be/pq64Y2e0-CQ \n \nКомпания: BAUM от 20 03 \nhttps://youtu.be/YR2G2tRzgJo \n \nКомпания: Сбер Технологии 22 03 \nhttps://youtu.be/dm34hydCIIA \n \nКомпания: KTS 22 03 \nhttps://youtu.be/Nt177GK9LAE \n \nКомпания: KTS 27 03 \nhttps://youtu.be/QDi0AkDwwgw \n \nКомпания: Лемма 27 03 \nhttps://youtu.be/grfpac_XgvA"
      },
      {
        "timestamp": "2024-03-22 11:51:38",
        "content": "2024-03-22 11:51:38\n SQwerty -> 2071074234:\n#первый_собес\n\n- Название компании: IT-One\n- Ссылка на вакансию: hr сама написала\n- ЗП: Просил от 200k\n- Задачи: теория + лайвкодинг\n- Запись техсобеса: https://youtu.be/opoqwpzVRVo\n- Успех собеса: ❌  (Не удивительно)",
        "full_content": "2024-03-22 11:51:38\n SQwerty -> 2071074234:\n#первый_собес\n\n- Название компании: IT-One\n- Ссылка на вакансию: hr сама написала\n- ЗП: Просил от 200k\n- Задачи: теория + лайвкодинг\n- Запись техсобеса: https://youtu.be/opoqwpzVRVo\n- Успех собеса: ❌  (Не удивительно)"
      },
      {
        "timestamp": "2024-03-09 13:32:31",
        "content": "2024-03-09 13:32:31\n Kirill N -> 2071074234:\nЗаписи собеседований  \nКомпания: MOVAVI от 26.02 \nhttps://www.youtube.com/watch?v=X8BAWSHpr9g \n \nКомпания: Мой склад 26.02 \nhttps://www.youtube.com/watch?v=I5vdydjkmAE \n \nКомпания: Собес 27.02 \nhttps://www.youtube.com/watch?v=USFqJBmNrW4 \n \nКомпания: Озон 1.03 (1 этап) \nhttps://www.youtube.com/watch?v=-9CTCHiGLtg \n \nКомпания: Озон 05.03 (2 этап) \nhttps://youtu.be/SsOs-mTIiN8 \n \nКомпания: ГПБ 01.03 \nhttps://youtu.be/dn7HsjOcDfk \n \nКомпания: ВК 05.03 \nh...",
        "full_content": "2024-03-09 13:32:31\n Kirill N -> 2071074234:\nЗаписи собеседований  \nКомпания: MOVAVI от 26.02 \nhttps://www.youtube.com/watch?v=X8BAWSHpr9g \n \nКомпания: Мой склад 26.02 \nhttps://www.youtube.com/watch?v=I5vdydjkmAE \n \nКомпания: Собес 27.02 \nhttps://www.youtube.com/watch?v=USFqJBmNrW4 \n \nКомпания: Озон 1.03 (1 этап) \nhttps://www.youtube.com/watch?v=-9CTCHiGLtg \n \nКомпания: Озон 05.03 (2 этап) \nhttps://youtu.be/SsOs-mTIiN8 \n \nКомпания: ГПБ 01.03 \nhttps://youtu.be/dn7HsjOcDfk \n \nКомпания: ВК 05.03 \nhttps://youtu.be/X4T0G_n1jqo \n \nКомпания ВТБ 06.03  \nhttps://youtu.be/3wfKfjohkw0 \n \nКомпания: Сбер технологии 07.03 \nhttps://youtu.be/gt2RcGbzloQ \n \nКомпания: Иннотех 07.03 \nhttps://youtu.be/soujRRxtnC8 \nКомпания: IT ONE 07.03 \nhttps://youtu.be/RaZ-iZOJgDM"
      },
      {
        "timestamp": "2024-03-07 18:44:00",
        "content": "2024-03-07 18:44:00\n Евгений Чип -> 2071074234:\nНазвание компании: IT One -> ГПБ\nвакансия: рефералка\nзп:300-350\nзадачи: теория + лайфкод\nЗапись: https://youtu.be/RaZ-iZOJgDM?si=TznvzXGPHQnwlAtL\n\nуспех собеса: ?\nфидбек: ?",
        "full_content": "2024-03-07 18:44:00\n Евгений Чип -> 2071074234:\nНазвание компании: IT One -> ГПБ\nвакансия: рефералка\nзп:300-350\nзадачи: теория + лайфкод\nЗапись: https://youtu.be/RaZ-iZOJgDM?si=TznvzXGPHQnwlAtL\n\nуспех собеса: ?\nфидбек: ?"
      },
      {
        "timestamp": "2024-01-22 12:05:02",
        "content": "2024-01-22 12:05:02\n Aleksei -> 2071074234:\n-Название компании: It-one\n-Ссылка на вакансию: hr сама написала\n-Зп:  от 340 \n-Задачи\n1)\nconst input = [\n  {\n    name: \"Кроссовки Nike Air Jordan 1\",\n    paid: false,\n    cost: 70,\n    date: \"2023-06-24T17:25:00.000Z\",\n  },\n  {\n    name: \"Кроссовки Nike Air Force 1\",\n    paid: true,\n    cost: 79,\n    date: \"2023-06-21T11:22:00.000Z\",\n  },\n  {\n    name: \"Кроссовки Nike JORDAN\",\n    paid: false,\n    cost: 86,\n    date: \"2023-06-21T22:15:00.000Z\",\n  },\n ...",
        "full_content": "2024-01-22 12:05:02\n Aleksei -> 2071074234:\n-Название компании: It-one\n-Ссылка на вакансию: hr сама написала\n-Зп:  от 340 \n-Задачи\n1)\nconst input = [\n  {\n    name: \"Кроссовки Nike Air Jordan 1\",\n    paid: false,\n    cost: 70,\n    date: \"2023-06-24T17:25:00.000Z\",\n  },\n  {\n    name: \"Кроссовки Nike Air Force 1\",\n    paid: true,\n    cost: 79,\n    date: \"2023-06-21T11:22:00.000Z\",\n  },\n  {\n    name: \"Кроссовки Nike JORDAN\",\n    paid: false,\n    cost: 86,\n    date: \"2023-06-21T22:15:00.000Z\",\n  },\n  {\n    name: \"Кроссовки Nike Dunk\",\n    paid: true,\n    cost: 68,\n    date: \"2023-06-24T14:54:00.000Z\",\n  },\n  {\n    name: \"Кеды PUMA RBD Game\",\n    paid: true,\n    cost: 71,\n    date: \"2023-06-24T16:35:00.000Z\",\n  },\n  {\n    name: \"Кеды adidas Sportswear GRAND COURT BASE\",\n    paid: true,\n    cost: 90,\n    date: \"2023-06-21T11:27:00.000Z\",\n  },\n  {\n    name: \"Слипоны Columbia\",\n    paid: true,\n    cost: 36,\n    date: \"2023-06-23T00:22:00.000Z\",\n  },\n];\n\n// в нашем распоряжении имеются данные выше\n// мы работаем над экраном истории покупок пользователя\n\n// написать функцию, которая подготовит данные для вывода историю покупок в виде списка:\n// с группировкой по дате\n// с отображением только оплаченных/неоплаченных позиций\n// и отображением итоговой суммы потраченных денег\n2)\nsetTimeout(()=>{\n    console.log(\"timeOut\");\n}, 0)\n \nconsole.log(1);\n \nnew Promise(resolve=>{\n    console.log(\"Promise\");\n    setTimeout(()=>{\n        console.log(\"777\");\n        resolve()\n    },0)\n}).then(()=>{\n    console.log(\"then1\");\n}).then(()=>{\n    console.log(\"then2\");\n})\n \nconsole.log(4);\n \nsetTimeout(()=>{\n    console.log(\"timeOut2\");\n},0)\n\n1\nPromise\n4\ntimeOut\n777\nthen1\nthen2\ntimeOut2\n3)\nзадача на дженерики (есть только решение)\nfunction getProp<T extends object, K extends keyof T>(o: T, p: K): p is K {\n    return p in o;\n}\n\nconst x = {a: 1, b: 2, c: 3};\nconst x100 = {x: 1};\n\nconsole.log(getProp(x, 'a'));     // true\nconsole.log(getProp(x, 'o'));     // false\n\n4) рассказать какие ошибки в коде и оптимизировать\nfunction Clicker() {\n  const [clicks, setClicks] = useState(0);\n \n  const onClick = () => {\n    setTimeout(() => {\n      setClicks(prevClick => prevClick + 1);\n    }, 2000);\n  };\n \n  return (\n    <>\n      {clicks}\n      <button onClick={onClick}>\n         Increment\n      </button>\n    </>\n  );\n}\n5) аналогично с 4 задачей\nconst heavyFunc = (count)=>{\n    \n};\nconst LazyInit = (props)=>{\n    const [count, setCount] = useState(heavyFunc(props.count));\n    return (\n        <> \n            {count}\n            <button onClick={()=>setCount((prevProps)=>++prevProps)}>\n              Increment\n            </button>\n        </>\n    )\n}\n6) задача на консоль логи\nconst Effects = ()=>{\n  const [count, setCount] = useState(0);\n  useLayoutEffect(()=> console.log(\"each render 1\"));\n  console.log(\"each render 2\");\n  useEffect(()=> console.log(\"each render 3\"));\n  return (\n      <>\n          <button onClick={()=>setCount((prevProps)=>++prevProps)}>\n            Increment\n          </button>\n      </>\n  )\n}\n7) написать код так чтоб SubComponent рендерился лишь при четных числах (через мемо)\nconst ParentElement = ()=>{\n  const [count, setCount] = useState(0)\n  const increment = () => setCount((prevProps) => ++prevProps);\n  return(\n    <>\n      Parent: {count}  <br/>\n      <SubElement clicker={increment} count={count}/>\n  </>)\n}\n \nconst SubElement = ({clicker, count})=>{\n  return (\n    <>\n      Sub: {count} <br/>\n      <button onClick={clicker}>Increment</button>\n    </>)\n}\nБыло много вопросов на теорию и кругозор про Тс, особенно утилити типы и Map охотно спрашивал, про промисы были вопросы. порой нестандартные вопросы но интервьювер подводил в нужное русло если начинал копать не туда.\n-Успех собеса - ?\n-Фитбек о собесе: ?"
      }
    ]
  },
  {
    "company": "iFellow",
    "count": 13,
    "records": [
      {
        "timestamp": "2025-07-18 15:03:59",
        "content": "2025-07-18 15:03:59\n Игорь -> 2071074234:\niFellow в СБЕР\nВакансия: сама написала\nЗП: 280\n\n1) Расскажи про себя + парочка вопросов по резюме\n1.1) Вижу в резюме что писал свой UI kit самописный или на чем то? Ant или MUI использовал?\n1.2) Вижу опыт с Effector, Redux и пр что можешь сказать по ним?\n1.3) Что используешь для кэширования? (useQuery, RTK Query)\n1.4) Вижу опыт с CSS-in-Js что скажешь? Как еще стили писал?\n2) Какие значения знаешь у display? \n3) rem vs em\n4) Как центрировать элемент по в...",
        "full_content": "2025-07-18 15:03:59\n Игорь -> 2071074234:\niFellow в СБЕР\nВакансия: сама написала\nЗП: 280\n\n1) Расскажи про себя + парочка вопросов по резюме\n1.1) Вижу в резюме что писал свой UI kit самописный или на чем то? Ant или MUI использовал?\n1.2) Вижу опыт с Effector, Redux и пр что можешь сказать по ним?\n1.3) Что используешь для кэширования? (useQuery, RTK Query)\n1.4) Вижу опыт с CSS-in-Js что скажешь? Как еще стили писал?\n2) Какие значения знаешь у display? \n3) rem vs em\n4) Как центрировать элемент по вертикали?\n5) Какие способы организации асинхронности знаешь в JS?\n6) Отличие type и interface\n7) Отличие enum и const enum + кейсы использования\n8) Что такое React? Плюсы?\n9) Способы оптимизации? (глубоко не копал)\n10) Для чего нужны ключи?\n11) merge или rebase юзаете?\n\nЗадача 1\n(function() {\n    var a = b = 3;\n})();\nconsole.log(typeof a);\nconsole.log(typeof b);\nЗадача 2 \n'use strict'\n\nconst obj = {\n  i: 10\n  b: () => {\n    console.log(this.i, this)\n  }\n  c: function() {\n    console.log(this.i, this)\n  }\n}\n\nobj.b (undefined, {})\nobj.c (10, obj)\nЗадача 3\nfunction fibonacci(n) {\n  // Обрабатываем базовые случаи:\n  // f(1) = 0, f(2) = 1\n  if (n <= 1) return 0;\n  if (n === 2) return 1;\n  // prev — предыдущее число (f(1))\n  // curr — текущее число (f(2))\n  let prev = 0;\n  let curr = 1;\n  // Начинаем с f(3) и идём до f(n)\n  for (let i = 3; i <= n; i++) {\n    // Вычисляем следующее число Фибоначчи\n    let next = prev + curr;\n\n    // Сдвигаем значения вперёд:\n    // текущее становится предыдущим, а новое — текущим\n    prev = curr;\n    curr = next;\n  }\n  // После завершения цикла curr содержит f(n)\n  return curr;\n}\n\nconsole.log(fibonacci(5)); // 3"
      },
      {
        "timestamp": "2025-07-16 10:13:19",
        "content": "2025-07-16 10:13:19\n Евгений -> 2071074234:\nКомпания iFellow\nПроект: Сбер финансы\nЗП: 230\n\nТимлид не пришел , в итоге был один разраб который не знает на какой именно проект, спросил про опыт\nВопросы: \n1.Есть боль на проекте, 20 тыс объктов приходят их нельзя разбить на части они взаимосвязаны, загрузка долгая, что с этим делать ? \n2. С чем бы хотел поработать\n3. Есть ли офферы\n4. На что ориентируешься при выборе оффера? \nДальше просто общались на разные темы",
        "full_content": "2025-07-16 10:13:19\n Евгений -> 2071074234:\nКомпания iFellow\nПроект: Сбер финансы\nЗП: 230\n\nТимлид не пришел , в итоге был один разраб который не знает на какой именно проект, спросил про опыт\nВопросы: \n1.Есть боль на проекте, 20 тыс объктов приходят их нельзя разбить на части они взаимосвязаны, загрузка долгая, что с этим делать ? \n2. С чем бы хотел поработать\n3. Есть ли офферы\n4. На что ориентируешься при выборе оффера? \nДальше просто общались на разные темы"
      },
      {
        "timestamp": "2025-07-09 16:03:46",
        "content": "2025-07-09 16:03:46\n Евгений -> 2071074234:\nКомпания: iFellow\nПроект: Сбер финансы\nЗП: 230\n\nВопросы: \n1. Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, знаковых задачах    \n2. Как у вас выстроен производственный процесс? Команда большая?    \n3. Unit тесты писали? Как писали? Доп: какие еще тесты писал? Какой опыт есть в тестировании?    \n4. Какие ожидания от нового места работы? Чтобы хотелось получить в итоге?    \n5. Какие способы организации CSS кода приходилось ...",
        "full_content": "2025-07-09 16:03:46\n Евгений -> 2071074234:\nКомпания: iFellow\nПроект: Сбер финансы\nЗП: 230\n\nВопросы: \n1. Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, знаковых задачах    \n2. Как у вас выстроен производственный процесс? Команда большая?    \n3. Unit тесты писали? Как писали? Доп: какие еще тесты писал? Какой опыт есть в тестировании?    \n4. Какие ожидания от нового места работы? Чтобы хотелось получить в итоге?    \n5. Какие способы организации CSS кода приходилось использовать?    \n6. Какие значения знаешь у display?    \n7. Какие способы центрировать блок знаешь?    \n8. Какие способы организации асинхронности знаешь в JS?    \n9. Какие способы копирования объекта знаешь? Доп вопрос: При кастомном решении копирования объекта - как скопировать функцию?\n10. Чем типы отличаются от interface ? \n11. Расскажи про Декораторы в typescript\n12. Для чего нужен нужен key в react. Доп вопрос что будет если поменять местами элементы?\n13. В каких случаях нужно использовать мемоизацию и какие способы ты знаешь ? Доп вопрос как ты можешь понять что нужно ее применять? \n14. Что используете на проекте merge или rebase ? \n\nЗадача 1: \n<!--Как на CSS сделать фигуру: в квадрат должны быть вписаны четыре треугольника с общей вершиной в центре?-->\n\n<div class='container'>\n  <div class='triangle red'></div>\n  <div class='triangle green'></div>\n  <div class='triangle yellow'></div>\n</div>\n\n<style>\n   .container {\n  position: relative;\n  width: 200px; /* Настройте размер по необходимости */\n  height: 200px; /* Настройте размер по необходимости */\n}\n\n.triangle {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-style: solid;\n}\n\n.red {\n  border-width: 100px 100px 0 0;\n  border-color: red transparent transparent transparent;\n  top: 0;\n  left: 0;\n}\n\n.green {\n  border-width: 0 0 100px 100px;\n  border-color: transparent transparent green transparent;\n  bottom: 0;\n  right: 0;\n}\n\n.yellow {\n  border-width: 100px 0 0 100px;\n  border-color: transparent transparent transparent yellow;\n  bottom: 0;\n  left: 0;\n} \n    \n</style>\nЗадача 2: \n// Что будет в консоли? И почему именно так?\n(function() {\n    var a = b = 3;\n})();\nconsole.log(typeof a);\nconsole.log(typeof b);\nЗадача 3: \nsetTimeout(() => console.log('timeout'));\nPromise.resolve().then(() => console.log('promise'));\nwindow.requestAnimationFrame(() => console.log('requestAnimationFrame'));\nconsole.log('code');\nЗадача 4: \n//Что будет выведено? И почему именно так?\n//Доп вопрос: что будет с value, которая внутри функции?\n//Доп вопрос: как исправить? Какие есть способы?\n\nvar test = (function() {\n    var value = 1;\n    function setValue(newValue) {\n        value = newValue;\n    }\n    return {\n        value: value,\n        setValue: setValue,\n    };\n})();\n\ntest.setValue(2);\nconsole.log(test.value);\nЗадача 5: \nfunction fibonacci(n) {\n    if (n <= 0) return 0; // Первый элемент последовательности\n    if (n === 1) return 1; // Второй элемент последовательности\n\n    let prevNum = 0; // Предыдущее число\n    let currNum = 1; // Текущее число\n\n    for (let i = 2; i <= n; i++) {\n        const temp = prevNum + currNum; // Следующее число\n        prevNum = currNum; // Обновляем предыдущее число\n        currNum = temp; // Обновляем текущее число\n    }\n\n    return currNum; // тут начал сомневаться, что так возвращать, но проверяющий сказал: принимается, логика мышления ясна - комментировал устно решение\n}\n\n// Пример использования:\nconsole.log(fibonacci(5)); // Вывод: 3"
      },
      {
        "timestamp": "2025-05-21 08:51:18",
        "content": "2025-05-21 08:51:18\n Max -> 2071074234:\nIfellow 2 этап 20.05 (на проект сбера)\nзп: 180 \nвопросы:\n - тоже самое, что и здесь https://t.me/c/2071074234/489/118921\n- rem и em\n - чем отличается type от interface\n- useMemo, useCallback, memo\n- зачем нужен key в React",
        "full_content": "2025-05-21 08:51:18\n Max -> 2071074234:\nIfellow 2 этап 20.05 (на проект сбера)\nзп: 180 \nвопросы:\n - тоже самое, что и здесь https://t.me/c/2071074234/489/118921\n- rem и em\n - чем отличается type от interface\n- useMemo, useCallback, memo\n- зачем нужен key в React"
      },
      {
        "timestamp": "2025-04-23 12:19:10",
        "content": "2025-04-23 12:19:10\n Илья Пономарев -> 2071074234:\niFellow. 1-й тех этап на проект Сбера\nВакансия: написала HR\nЗП: ~ 220-240\n\nВопросы:\nБлок 1\n- Что такое Promise\n- Promise Api. Примеры работы со статическими методами на практике\n- Event Loop\n- Типы данных\nБлок 2\n- Значения свойства position\n- Способы позиционирования элемента по горизонтали и вертикали\n- rem vs em\n- Способы организации многозадачности в JS (Web Workers, Service Workers)\n- Способы скопировать объект. Какие есть ньюансы\n- Как из ф...",
        "full_content": "2025-04-23 12:19:10\n Илья Пономарев -> 2071074234:\niFellow. 1-й тех этап на проект Сбера\nВакансия: написала HR\nЗП: ~ 220-240\n\nВопросы:\nБлок 1\n- Что такое Promise\n- Promise Api. Примеры работы со статическими методами на практике\n- Event Loop\n- Типы данных\nБлок 2\n- Значения свойства position\n- Способы позиционирования элемента по горизонтали и вертикали\n- rem vs em\n- Способы организации многозадачности в JS (Web Workers, Service Workers)\n- Способы скопировать объект. Какие есть ньюансы\n- Как из функции обработчика события обратиться к элементу на котором оно было вызвано\n- any vs unknown\n- useEffect vs useLayoutEffect\n- Параметры useEffect\n- Управляемые компоненты в React\n- merge vs rebase\nБлок 3\n- Что такое чистая функция\n- Оценка сложности алгоритмов\n- Тебе поставили задачу разобраться (минимимзировать) повторяющиеся GET запросы при уходе / возвращении на страницу. Твои действия. Рассказал про кеширование (на клиенте / на беке). Чтобы закешировал, а что нет \n- Перечислить React хуки\n- useMemo.  Примеры из практики"
      },
      {
        "timestamp": "2025-04-21 18:52:16",
        "content": "2025-04-21 18:52:16\n Max -> 2071074234:\nIFellow\nВакансия: hr написала\nЗП: 180\nВопросы:\nКакие есть свойства position\nСпособы отцентровать блок\nrem em Что такое\nКакие есть свойства position\nОтличия межу arrow function  function declaration  function expression\nКак работает Event-loop\nОтличия var let и const\nОтличия type от interface\nAny vs unknown\nЧто такое утверждение типов\nКак работает useEffect, зачем нужен\nКак работает useLayoutEffect, зачем нужен, отличия от useEffect \nКак работает useMemo, з...",
        "full_content": "2025-04-21 18:52:16\n Max -> 2071074234:\nIFellow\nВакансия: hr написала\nЗП: 180\nВопросы:\nКакие есть свойства position\nСпособы отцентровать блок\nrem em Что такое\nКакие есть свойства position\nОтличия межу arrow function  function declaration  function expression\nКак работает Event-loop\nОтличия var let и const\nОтличия type от interface\nAny vs unknown\nЧто такое утверждение типов\nКак работает useEffect, зачем нужен\nКак работает useLayoutEffect, зачем нужен, отличия от useEffect \nКак работает useMemo, зачем нужен\nКак работает useCallback, зачем нужен\nВ каких случаях нужно использовать мемоизацию и зачем\nЗадачи:\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3);\n  }).then(() => {\n    console.log(4);\n  });\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log(5);\n}).then(() => {\n  console.log(6);\n});\n\nsetTimeout(() => {\n  console.log(7);\n}, 0);\n\nconsole.log(8);\n// 1, 5, 8, 6, 2, 3, 4,7\nЗадача: \nобъяснить что означают\n1) .?\n2) ??\n3)  ...\n4) &=\n5) ||=\n6) `${foo}`\n7) someArray.at()\nЗадача:\nНаписать коллбек для memo в компоненте, чтобы рендерил дочерний только, если пропсы чётные\nРешение:\n(prevProps, nextProps) => {\n    // Ререндерим только на четные числа или когда count не изменился\n    return nextProps.count % 2 !== 0 && prevProps.count !== nextProps.count;\n}"
      },
      {
        "timestamp": "2025-02-25 11:14:56",
        "content": "2025-02-25 11:14:56\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - финал\nСсылка на вакансию: написала HR\nЗП: от 250к\n\nВопросы от компании:\n1) Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, знаковых задачах.\n2) Как у вас выстроен производственный процесс? Команда большая?\n3) Комфортно в коллективе разработчиков или одному работать?\n4) Сталкивался ли с DevOps? Сам можешь настроить и/или делать правки в конфигах?\n\nРассказ о продукте и сервисе Сбера куда идет набор.\n\n...",
        "full_content": "2025-02-25 11:14:56\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - финал\nСсылка на вакансию: написала HR\nЗП: от 250к\n\nВопросы от компании:\n1) Расскажи о последнем релевантном опыте. Сделать акцент на личных достижениях, знаковых задачах.\n2) Как у вас выстроен производственный процесс? Команда большая?\n3) Комфортно в коллективе разработчиков или одному работать?\n4) Сталкивался ли с DevOps? Сам можешь настроить и/или делать правки в конфигах?\n\nРассказ о продукте и сервисе Сбера куда идет набор.\n\nВстречные вопросы:\n1) Расскажите о команде.\n2) Какой стек на сервисе.\n3) Расскажите про особенности UI kitа.\n4) Как часто проходят релизы?\n5) Во сколько проходят дейли и какая продолжительность?\n6) Где проходит общение команды?\n7) Какие ожидания от нового разработчика?\n8) Какие планы по запуску/развитию  продукта в целом?"
      },
      {
        "timestamp": "2025-02-21 12:46:43",
        "content": "2025-02-21 12:46:43\n alzor -> 2071074234:\nАудиозапись к собеседованияю\nКомпания: iFellow(Сбер) - 2ой этап\nСсылка на вакансию: написала HR\nЗП: от 250к",
        "full_content": "2025-02-21 12:46:43\n alzor -> 2071074234:\nАудиозапись к собеседованияю\nКомпания: iFellow(Сбер) - 2ой этап\nСсылка на вакансию: написала HR\nЗП: от 250к"
      },
      {
        "timestamp": "2025-02-21 12:45:05",
        "content": "2025-02-21 12:45:05\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - 2ой этап\nСсылка на вакансию: написала HR\nЗП: от 250к\n\n1. Расскажи о себе, о своем опыте, чем занимался, что такого классного делал в последнее время, что получалось, что не получалось?\n2. Расскажи про команду, сколько фронтов в команде было?\n3. Как были устроены процессы(Agile, kanban)?\n4. Код ревью было, как проходило?\n5. Как оцениваешь погружонность других команд в ваш проект?(тк кросс командное ревью кода)\n6. Unit тесты писал...",
        "full_content": "2025-02-21 12:45:05\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - 2ой этап\nСсылка на вакансию: написала HR\nЗП: от 250к\n\n1. Расскажи о себе, о своем опыте, чем занимался, что такого классного делал в последнее время, что получалось, что не получалось?\n2. Расскажи про команду, сколько фронтов в команде было?\n3. Как были устроены процессы(Agile, kanban)?\n4. Код ревью было, как проходило?\n5. Как оцениваешь погружонность других команд в ваш проект?(тк кросс командное ревью кода)\n6. Unit тесты писали? Есть смысл тратить на это время?\n7. Почему работу меняешь? Что не устраивает?\n8. Удаленно работаешь?\n9. Какие ожидания от нового места работы? Чтобы хотелось получить в итоге?\n\n1.Какие способы организации CSS кода приходилось использовать?\n2.Какие значения знаешь у св-ва  display?\n3.Какие способы центрировать блок знаешь?\n4.Как работает z-index?\n5.Может ли меньший z-index перекрыть больший?\n6.Какие способы организации асинхронности знаешь в js?\n7.Какие способы копирования объекта знаешь?\n8.Как внутри обработчика события onClick получить доступ к элементу по которому пользователь кликнул?\n9. Какое отличие event.target от event.currentTarget?\n10. Чем type от interface отличается в TS?\n11. Чем useEffect отличается от useLayoutEffect?\n12. Зачем нужен атрибут key?\n13. Скажи чем merge от rebase отличается?\n\nЗадача 1: как на CSS сделать фигуру: в квадрат вписаны четыре треугольника с общей вершиной в центре:\n\n<div class=\"container\">\n  <div class=\"triangle red\"></div>\n  <div class=\"triangle green\"></div>\n  <div class=\"triangle yellow\"></div>\n</div>\n\n\n.container {\n  position: relative;\n  width: 200px; /* Настройте размер по необходимости */\n  height: 200px; /* Настройте размер по необходимости */\n}\n.triangle {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-style: solid;\n}\n.red {\n  border-width: 100px 100px 0 0;\n  border-color: red transparent transparent transparent;\n  top: 0;\n  left: 0;\n}\n.green {\n  border-width: 0 0 100px 100px;\n  border-color: transparent transparent green transparent;\n  bottom: 0;\n  right: 0;\n}\n.yellow {\n  border-width: 100px 0 0 100px;\n  border-color: transparent transparent transparent yellow;\n  bottom: 0;\n  left: 0;\n}\n\n\nЗадача 2: Что будет в консоли?\n\n(function(){\n    var a = b = 3;\n})();\nconsole.log(typeof a);\nconsole.log(typeof b);\n\nОтвет: undefined number\n\nЗадача 3: Что будет в консоли?\n\nsetTimeout(() => console.log(\"timeout\"));\n\nPromise.resolve().then(() => console.log(\"promise\"));\n\nwindow.requestAnimationFrame(() => console.log(\"requestAnimationFrame\"));\n\nconsole.log(\"code\");\n \nОтвет: code promise requestAnimationFrame timeout\n\nЗадача 4: Что будет в консоли?\n\n'use strict';\n\nvar obj = {\n  i: 10,\n  b: () => console.log(this.i, this),\n  c: function() {\n    console.log(this.i, this);\n  }\n}\nobj.b(); \nobj.c(); \n\nОтвет: \nпри 'use strict': \nobj.b(); // undefined, undefined\nobj.c(); // 10, объект obj\n\nбез 'use strict':\nobj.b(); // undefined, window\nobj.c(); // 10, объект obj\n\nЗадача 5: Что будет в консоли?\n\nvar test = (function() {\n    var value = 1;\n    function setValue(newValue) {\n        value = newValue;\n    }\n    return {\n        value: value,\n        setValue: setValue,\n    };\n})();\n\ntest.setValue(2);\nconsole.log(test.value); \n\nОтвет: 1\nДоп. вопрос: если удалить value: value, что будет?\nОтвет: undefined\n \nЗадача 6: Напишите функцию которая возвращает n-е число Фибоначчи.\n\nfunction fibonacci(n) {\n    if (n <= 0) return 0; // Первый элемент последовательности\n    if (n === 1) return 1; // Второй элемент последовательности\n\n    let a = 0; // Предыдущее число\n    let b = 1; // Текущее число\n\n    for (let i = 2; i <= n; i++) {\n        const temp = a + b; // Следующее число\n        a = b; // Обновляем предыдущее число\n        b = temp; // Обновляем текущее число\n    }\n\n    return a; // Возвращаем предыдущее число, так как цикл идет до n\n}\n\n// Пример использования:\nconsole.log(fibonacci(5)); // Вывод: 3"
      },
      {
        "timestamp": "2025-02-14 19:34:15",
        "content": "2025-02-14 19:34:15\n alzor -> 2071074234:\nКомпания: iFellow(Сбер)\nСсылка на вакансию: написала HR\nЭтап: 1ый этап тех. собеса\nЗП: от 250к",
        "full_content": "2025-02-14 19:34:15\n alzor -> 2071074234:\nКомпания: iFellow(Сбер)\nСсылка на вакансию: написала HR\nЭтап: 1ый этап тех. собеса\nЗП: от 250к"
      },
      {
        "timestamp": "2025-02-14 15:56:32",
        "content": "2025-02-14 15:56:32\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - 1эй этап\nСсылка на вакансию: написала  HR\nЗП: от 250к\nВопросы.\n\nБлок 1(Теория):\n1) Что такое промисы, как используешь в проектах, что предпочитаешь: async-await или .then.catch?\n2) Назови статические методы промисов.\n3) Назови реальный use case для Promice.race.\n4) Расскажи про Event Loop.\n5) Где кроме браузера может работать Event Loop?\n6) Были случаи в практике для использования Event Loop? Чтобы действительно помогло.\n7) Назо...",
        "full_content": "2025-02-14 15:56:32\n alzor -> 2071074234:\nКомпания: iFellow(Сбер) - 1эй этап\nСсылка на вакансию: написала  HR\nЗП: от 250к\nВопросы.\n\nБлок 1(Теория):\n1) Что такое промисы, как используешь в проектах, что предпочитаешь: async-await или .then.catch?\n2) Назови статические методы промисов.\n3) Назови реальный use case для Promice.race.\n4) Расскажи про Event Loop.\n5) Где кроме браузера может работать Event Loop?\n6) Были случаи в практике для использования Event Loop? Чтобы действительно помогло.\n7) Назови типы данных в JS.\n8) Какой тип данных у массивов?\n9) Был ли опыт работы с прототипами?\n10) Расскажи про DOM, что это такое в контексте JS? \n11) Как в JS получить доступ к какому либо узлу(ноде)?\n12) Расскажи про фазы всплытия-погружения.\n13) Как остановить всплытие?\n14) Есть опыт верстки? На сколько этот процесс нравится?\n15) Как центрировать блок с помощью CSS?\n16) Чем блочные элементы отличаются от строчных?\n17) Какие методы адаптивной верстки знаешь?\n18) В чем отличие единиц измерения em от rem?\n19) Теоретическая задача: есть шапка(header), слева логотип, справа кнопка. Как утощить кнопку вправо?\nОтвет на задачу: 1) хедеру сделать display: flex,  justify-content: space-between 2) кнопке margin-left: auto;\n20) Какую задачу решает React? Зачем он нужен?\n21) Разрабатывал компоненты на классах?\n22) Почему команда React решила отказаться от классовых компонентов и перешла к функциональным с разработкой хуков?\n23) Почему команда React заявляет, что хуки должны быть чистыми?\n24) Props которые прокидываются в компоненты можно мутировать или нельзя?\n25) Приведи пример когда можно мутировать состояние в React? //WTF\n26) Часто используешь хук useCallback и для чего?\n27) Были реальные случаи использования useCallback и ты ощущал пользу от него?\n28) Были ли случаи в твоей практике оптимизации приложение с влиянием на UX?\n29) Приведи пример способа оптимизации дорогой(объемной) операции чтобы она не влияла на весь остальной компонент.\n30) В каких случаях в React запускается ререндеринг?\n31) Расскажи про key.\n32) Тесно работаешь с TypeScript?\n33) Как у вас на проекте заведено: может быть ли такое, что что-то затипизированно через any.\n\nБлок 2(Опыт работы):\n1) Все еще работаешь или уволился?\n2) Где живешь?\n3) Расскажи про корпоративную культуру т.е. как у вас налажен процесс написания кодовой базы, что вы используете, какие методологии?\n4) Расскажи про опыт работы по SCRUM.\n5) В команде сколько разработчиков фротенд/бекэнд?\n6) Как ты считаешь в организации рабочего дня какие основные проблемы/задачи есть? Как организуешь свой рабочий день, пытаешься это делать?\n7) Какой грейд у тебя сейчас в команде?\n8) С микрофронтендом есть опыт работы?\n9) Есть опыт настройки webpack?\n10) Можно в vite сделать тонкую настройку, как в webpack?\n11) Сколько лет работаешь?\n12) Каков твой путь в IT?\n\nБлок 3(Встречные вопросы):\n1) Расскажи про проект.\n2) На своем компьютере можно работать?\n3) Есть ли онбординг?\n4) Слышал про командное(парное) программирование? Есть такое в сбере?\n5) Сам давно в iFellow работаешь?\n6) Как в целом опыт?\n7) Сколько всего этапов тех. собеседований?"
      },
      {
        "timestamp": "2024-12-17 16:35:21",
        "content": "2024-12-17 16:35:21\n Egor -> 2071074234:\nКомпания: IFellow \nСсылка на вакансию: hr сама написала\nЗп: от 330\nЗапись: https://youtu.be/ZMlcnlnT4YI",
        "full_content": "2024-12-17 16:35:21\n Egor -> 2071074234:\nКомпания: IFellow \nСсылка на вакансию: hr сама написала\nЗп: от 330\nЗапись: https://youtu.be/ZMlcnlnT4YI"
      },
      {
        "timestamp": "2024-09-24 16:12:33",
        "content": "2024-09-24 16:12:33\n SQwerty -> 2071074234:\nIFellow (аутстафф в Сбер)\nСсылка на вакансию: написала hr\nЗП: 250k\nВопросы: \nЧто такое контекст this? В чем особенность стрелочной функции? Что такое замыкание, подробно\nБаза по Promise. Какие типы есть в js?\nСпрашивал про классовые компоненты, про методы жизненного цикла в классовых компонентах. В чем отличие от функциональных компонентов? Про виртуализацию, как реализовывал кастомно?\nБыли вопросы по redux про сущности flux. Что такое RTK Query, в чем...",
        "full_content": "2024-09-24 16:12:33\n SQwerty -> 2071074234:\nIFellow (аутстафф в Сбер)\nСсылка на вакансию: написала hr\nЗП: 250k\nВопросы: \nЧто такое контекст this? В чем особенность стрелочной функции? Что такое замыкание, подробно\nБаза по Promise. Какие типы есть в js?\nСпрашивал про классовые компоненты, про методы жизненного цикла в классовых компонентах. В чем отличие от функциональных компонентов? Про виртуализацию, как реализовывал кастомно?\nБыли вопросы по redux про сущности flux. Что такое RTK Query, в чем его приемущество?"
      }
    ]
  },
  {
    "company": "РСХБ-Интех",
    "count": 10,
    "records": [
      {
        "timestamp": "2025-05-22 11:59:55",
        "content": "2025-05-22 11:59:55\n Timur -> 2071074234:\nКомпания: РСХБ-интех. тех собес\nзп: 300к\nВакансия\n\nсам собес был лайтовый, на +-30 минут\n\nВопросы:\n1.спросили чем занимался на прошлом проекте и с чем, помимо реакта, работал\n\nЗадача 1:\nЧто выведет в консоль\nvar a = 1;\nvar b = 1;\nvar c = '1';\nvar d = 1.0;\nvar f = 1.0000000000000001;\n\nconsole.log(a == b);   // true\nconsole.log(a == c);   // true\nconsole.log(a === c);  // false\nconsole.log(a == d);   // true\nconsole.log(a === d);  // true\nconsole.log(a == ...",
        "full_content": "2025-05-22 11:59:55\n Timur -> 2071074234:\nКомпания: РСХБ-интех. тех собес\nзп: 300к\nВакансия\n\nсам собес был лайтовый, на +-30 минут\n\nВопросы:\n1.спросили чем занимался на прошлом проекте и с чем, помимо реакта, работал\n\nЗадача 1:\nЧто выведет в консоль\nvar a = 1;\nvar b = 1;\nvar c = '1';\nvar d = 1.0;\nvar f = 1.0000000000000001;\n\nconsole.log(a == b);   // true\nconsole.log(a == c);   // true\nconsole.log(a === c);  // false\nconsole.log(a == d);   // true\nconsole.log(a === d);  // true\nconsole.log(a == f);   // true\n\nЗадача 2:\nКак передать a и c в функцию так, чтобы b остался по дефолту?\n// Как задать параметр, пропустив предыдущий необязательный\nfunction foo(a: string, b: string = 'b', c: string = 'c') {...}\n\nfoo('string1', undefined, 'string2');\n\nЗадача 3:\nНаписать функцию sleep, которая выполнится через переданное количество мс\nasync function fn() {\n    const s = await delay('str', 2000);\n    console.log(s);\n}\n\nconst delay = (str, ms) => {\n    return new Promise((res) => {\n        setTimeout(() => {\n            res(str);\n        }, ms);\n    });\n}\n\nfn();\n\nЗадача 4:\nЧто выведет на 13 строке и почему \nconst _obj = {\n    name: \"Petr\",\n    sayHi: function () {\n        alert(`Hi ${this.name}`);\n    }\n};\n\nfunction stringify(obj) {\n    return JSON.stringify(obj);\n}\n\nfunction parse(str) {\n    return JSON.parse(str);\n}\n\nparse(stringify(_obj)).sayHi(); // is not a function\nтк  JSON.stringify() не сохраняет функции - только свойства\nметод sayHi исчезает при сериализации, и после parse(...) его уже нет\n\nЗадача 5:\nчто произойдет в каждом из блоков кода\n// 1 — бесконечный синхронный цикл (блокирует поток), браузер зависает\nwhile (1) {}\n\n// 2 — асинхронная рекурсия через setTimeout (не блокирует поток)\nfunction fn() {\n    setTimeout(fn); \n}\nfnTimeout();\n\n// 3 — асинхронная рекурсия через Promise, работает без блокировки, но может перегрузить call stack\nfunction fn() {\n    return Promise.resolve()\n      .then(fn);\n}\nfn(); \n\nЗадача 5:\nнаписать простой counter на реакте\nconst Button = () => {\n  const [counter, setCounter] = useState(0);\n\n  const handleClick = () => {\n    setCounter(prev => prev + 1);\n  };\n\n  return (\n    <>\n      <label>count: {counter}</label>\n      <button onClick={handleClick}>Update counter</button>\n    </>\n  );\n};"
      },
      {
        "timestamp": "2025-03-12 16:11:12",
        "content": "2025-03-12 16:11:12\n Андрей Мелицков -> 2071074234:\nКомпания: рсхб интех\nз/п 300 гросс\nгибрид Москва\nПровал: Не смог внятно рассказать про HTTP, Redux под капотом, и почему-то не зачел замыкание и хостинг(\n\nВопросы на техничке:\n1. О себе\n2. Что именно сделал на проекте, чуть покопал по техничке\n3. Что такое http\n4. Из чего состоит запрос (заголовки тело методы домен и тд.)\n5. CORS (что это? для чего? где ставятся?)\n6. Куки, сесион и локал сторажи для чего отличие? Какие кейсы использования?\n7. l...",
        "full_content": "2025-03-12 16:11:12\n Андрей Мелицков -> 2071074234:\nКомпания: рсхб интех\nз/п 300 гросс\nгибрид Москва\nПровал: Не смог внятно рассказать про HTTP, Redux под капотом, и почему-то не зачел замыкание и хостинг(\n\nВопросы на техничке:\n1. О себе\n2. Что именно сделал на проекте, чуть покопал по техничке\n3. Что такое http\n4. Из чего состоит запрос (заголовки тело методы домен и тд.)\n5. CORS (что это? для чего? где ставятся?)\n6. Куки, сесион и локал сторажи для чего отличие? Какие кейсы использования?\n7. let, const, var отличия\n8. Что принес нам ES6?\n9. Отличие функций обычных от стрелочных? this, определение какое в коде\n10. Замыкание\n11. отличие || от ??(я хз)\n12. Что такое Редакс и как работает?\n13. Что такое useContext()\n12. задача: пройтись по массиву и вызвать в консоль индексы элементов с разницей в секунду без setInterval.\n\nconst printWithDelay = (array) => {\n  let index = 0;\n  let timeoutId;\n\n  const printNext = () => {\n    if (index < array.length) {\n      console.log(`Index: ${index}, Element: ${array[index]}`);\n      index++;\n      timeoutId = setTimeout(printNext, 1000); // Задержка в 1 секунду\n    }\n  };\n\n  printNext();\n\n  // Возвращаем функцию для очистки таймаутов\n  return () => {\n    clearTimeout(timeoutId);\n  };\n};\n\n// Пример использования:\nconst clearFunction = printWithDelay([10, 20, 30, 40, 50]);\n\n// Если нужно остановить выполнение до завершения, можно вызвать clearFunction()\n// clearFunction();\n\nэто я дал пример решения с очисткой таймаутов, я сделал без них проще по времени не успели на очистку таймаутов, так как я подробно разжевывал ответы на теорию.\nВакансия: https://hh.ru/vacancy/118141705?from=share_ios"
      },
      {
        "timestamp": "2025-03-12 13:52:04",
        "content": "2025-03-12 13:52:04\n Евгений Гусев -> 2071074234:\nКомпания: РСХБ-Интех\nЗп: 220k\nВакансия: нету, hr сама написала \nВопросы:\n1.Что происходит при вводе в адресную строку\n2.SOLID\n3. Разницы Throttle и Debounce\n4. Патерны проектирование\n5.Замыкание\n6. Как работа с формой\n7.Правила  работы с хуками\n8. Хуки для оптимизации\n9. Задача на рефакторинг компонента.",
        "full_content": "2025-03-12 13:52:04\n Евгений Гусев -> 2071074234:\nКомпания: РСХБ-Интех\nЗп: 220k\nВакансия: нету, hr сама написала \nВопросы:\n1.Что происходит при вводе в адресную строку\n2.SOLID\n3. Разницы Throttle и Debounce\n4. Патерны проектирование\n5.Замыкание\n6. Как работа с формой\n7.Правила  работы с хуками\n8. Хуки для оптимизации\n9. Задача на рефакторинг компонента."
      },
      {
        "timestamp": "2025-03-08 12:31:19",
        "content": "2025-03-08 12:31:19\n андрей -> 2071074234:\nКомпания: РСХБ ИНТЕХ\nНаписал HR\n\nСобеседующий больной гик, который будет душить и копать в глубину\n\n1. HTTP, HTTPS, запросы, из чего состоит запрос, как отличается запрос и ответ, как запрос понимает куда он отправляется, как отправить картинку 1гб.\n2. REST API - что это, чем отличается от других подходов, основные свойства rest(одни и тоже данные при запросе)\n3. Что шифруется в HTTPS\n4. CORS, пример CORS, CSRF, способ защиты от CSRF\n5. Разница версий п...",
        "full_content": "2025-03-08 12:31:19\n андрей -> 2071074234:\nКомпания: РСХБ ИНТЕХ\nНаписал HR\n\nСобеседующий больной гик, который будет душить и копать в глубину\n\n1. HTTP, HTTPS, запросы, из чего состоит запрос, как отличается запрос и ответ, как запрос понимает куда он отправляется, как отправить картинку 1гб.\n2. REST API - что это, чем отличается от других подходов, основные свойства rest(одни и тоже данные при запросе)\n3. Что шифруется в HTTPS\n4. CORS, пример CORS, CSRF, способ защиты от CSRF\n5. Разница версий протоколов HTTP, что такое мультиплексирование\n6. Что такое ECMA-script, как js может работать в разных средах \n7. Что добавили в ES6\n8. Типы данных, что такое Symbol\n9. Таблица приведения типов\n10. Области видимости, их отличие\n11. Всплытие\n12. Различие функций\n13. Контекст, когда присваивается контекст \n14. Как перебрать ключи объекта \n15. Замыкание, для чего используется\n16. Что такое асинхронный код, чем отличается от синхронного\n17. Зачем нужен Eventloop, как выделяется поток в браузере, как создать свой поток и общаться между ними\n18. Реактивный ли React?\n19. Что будет если вызвать несколько setState(num +1), как это исправить, почему это так работает\n20. Virtual DOM, как react сравнивает деревья, атрибут key, нужно ли везде прописывать key\n21. Props drilling на 100 000 уровней, как react оптимизирует и может выдать при такой нагрузке 60 fps и возможность взаимодействия с ui\n22. Без какого классового компонента не обойтись в функциональных, Error boundary\n23. Этапы Жизненного цикла, когда происходят рендеры в классах \n24. ShouldComponentUpdate, React.memo, логика сравнения пропсов\n25. Отличие useEffect от useLayoutEffect,\n26. Как оптимизировать приложение, с чего начать\n27. Зачем нужен стейт менеджер, почему не писать все на useContext, когда стоит переходить на стейт менеджеры\n28. Написать свой PromiseAll, будет ныть почему написал Promise.resolve(promise), а не promise.resolve(promise)\npromises.forEach((promise, index) => { Promise.resolve(promise)"
      },
      {
        "timestamp": "2024-11-11 21:42:18",
        "content": "2024-11-11 21:42:18\n 5429820319 -> 2071074234:\nПока ждал офера от Додо ткнул сюда\n\n- Компания: РСХБ-Интех \n- ЗП: сказали максимум 270\n- Вакансия: https://spb.hh.ru/vacancy/110389943\n- Вопросы:\nReconcilation в React (рассказать что и зачем)\nReact.memo/useMemo/Strict Mode\nПравила Хуков (то что нельзя их вызывать кондиционно)\nKey\nuseTransiton/defered value\nКакими стейт менеджерами пользовался/в сем их отличия (технически как устроены)\nЧто происходит после ввода адреса в строку браузера\nМетоды REST ...",
        "full_content": "2024-11-11 21:42:18\n 5429820319 -> 2071074234:\nПока ждал офера от Додо ткнул сюда\n\n- Компания: РСХБ-Интех \n- ЗП: сказали максимум 270\n- Вакансия: https://spb.hh.ru/vacancy/110389943\n- Вопросы:\nReconcilation в React (рассказать что и зачем)\nReact.memo/useMemo/Strict Mode\nПравила Хуков (то что нельзя их вызывать кондиционно)\nKey\nuseTransiton/defered value\nКакими стейт менеджерами пользовался/в сем их отличия (технически как устроены)\nЧто происходит после ввода адреса в строку браузера\nМетоды REST API\nРаботал ли с GraphQL\nКакие виды архитектур знаешь\nЧто делал на своем проекте\nКак проходило код ревью\nКак получал задачи\nЗачем вы их делали\nЗачем post mortem\n\nНИ ОДНОГО ВОПРОСА ПО JS\n\nСобес был странный, напомнило Иннотех \n\n- Успех: ✅"
      },
      {
        "timestamp": "2024-11-07 10:04:11",
        "content": "2024-11-07 10:04:11\n Артем -> 2071074234:\nКомпания: РСХБ-Интех\nЗП: не обсуждаласб\nВакансия: https://hh.ru/vacancy/109307308\n\nВопросы: \nEffector как работал\nдля чего Done\npromise все типы\nПравила хуков\nReact memo\nкак мемоизировать \nFCD(правила)\nПоказали компонент надо было заревьюить\nтипы данных\nпочему индекс нельзя юзать в key\ngit cherry-pick\nRest api\nможно ли в get передать body\nCambula\nКакие таски знаешь\nкакие используються на фронте\nгде схемы рисовал \nкакую версию использовал",
        "full_content": "2024-11-07 10:04:11\n Артем -> 2071074234:\nКомпания: РСХБ-Интех\nЗП: не обсуждаласб\nВакансия: https://hh.ru/vacancy/109307308\n\nВопросы: \nEffector как работал\nдля чего Done\npromise все типы\nПравила хуков\nReact memo\nкак мемоизировать \nFCD(правила)\nПоказали компонент надо было заревьюить\nтипы данных\nпочему индекс нельзя юзать в key\ngit cherry-pick\nRest api\nможно ли в get передать body\nCambula\nКакие таски знаешь\nкакие используються на фронте\nгде схемы рисовал \nкакую версию использовал"
      },
      {
        "timestamp": "2024-11-02 10:46:44",
        "content": "2024-11-02 10:46:44\n q q -> 2071074234:\nрсхб-интех\nзп от 170к\nвакансии нет",
        "full_content": "2024-11-02 10:46:44\n q q -> 2071074234:\nрсхб-интех\nзп от 170к\nвакансии нет"
      },
      {
        "timestamp": "2024-09-25 12:41:49",
        "content": "2024-09-25 12:41:49\n Ada500 -> 2071074234:\nРСХБ Интех\n- ЗП : от 200тыс.\n- Вакансия: hr написала\n- Вопросы :\n- что такое http\n- из чего состоит запрос\n- какие бывают области видимости\n- как можно объявить переменную\n- что такое event loop\n- что такое useMemo, useCallback, memo\n- расскажи о хуках\n-  redux в общем для чего\n- что нельзя делать в редакс\nзадачи две на батчинг и написание кастомного Promise.All\n// Написать свою имплементацию Promise.all, можно использовать все кроме самого promiseAll.\n...",
        "full_content": "2024-09-25 12:41:49\n Ada500 -> 2071074234:\nРСХБ Интех\n- ЗП : от 200тыс.\n- Вакансия: hr написала\n- Вопросы :\n- что такое http\n- из чего состоит запрос\n- какие бывают области видимости\n- как можно объявить переменную\n- что такое event loop\n- что такое useMemo, useCallback, memo\n- расскажи о хуках\n-  redux в общем для чего\n- что нельзя делать в редакс\nзадачи две на батчинг и написание кастомного Promise.All\n// Написать свою имплементацию Promise.all, можно использовать все кроме самого promiseAll.\n\nconst promiseAll = (promises) => {\nreturn new Promise((resolve, reject)=>{\n    const results=[]\n    let completedPromises=0\n    promises.forEach((promise, index)=>{\n        Promise.resolve(promise)\n        .then((result)=>{\n            results[index]=result\n            \n            completedPromises++\n            \n            if(completedPromises===promises.length){\n                resolve(results)\n            }\n        })\n        .catch((error)=>{\n            reject(error)\n        })\n    })\n})\n}\n\npromiseAll([]).then(results => ).catch();"
      },
      {
        "timestamp": "2024-06-07 16:23:14",
        "content": "2024-06-07 16:23:14\n Andrei Chirkov -> 2071074234:\nРСХБ-Интех\n- Вакансия: https://hh.ru/vacancy/99914239\n- ЗП: 250+\n- Успех собеса: Оффер на 264к\n- Комментарий: только половина видоса, чувак жесткий гик, спрашивает быстро и много без лайвкода\n- Видео: https://www.youtube.com/watch?v=TgAk-SGED_I",
        "full_content": "2024-06-07 16:23:14\n Andrei Chirkov -> 2071074234:\nРСХБ-Интех\n- Вакансия: https://hh.ru/vacancy/99914239\n- ЗП: 250+\n- Успех собеса: Оффер на 264к\n- Комментарий: только половина видоса, чувак жесткий гик, спрашивает быстро и много без лайвкода\n- Видео: https://www.youtube.com/watch?v=TgAk-SGED_I"
      },
      {
        "timestamp": "2024-05-22 10:30:35",
        "content": "2024-05-22 10:30:35\n Ярослав Мудрый -> 2071074234:\n- Название компании: РСХБ-Интех\n- вакансия: HR сам написал\n- успех: ?\n- зп: 300k+\n\nВопросы:\n- Что такое протокол http, разница между версиями http.\n- что такое rest.\n- что нового в ES5\n- отличия стрелочной и обычной функции\n- как перебрать ключи объекта\n- event loop, очередность вывода\n- обработка ошибок componentDidCatch\n- хуки в react\n- flux архитектура в redux\n- что нельзя делать внутри редюсера, что нельзя хранить в редакс \n- memo, useCallba...",
        "full_content": "2024-05-22 10:30:35\n Ярослав Мудрый -> 2071074234:\n- Название компании: РСХБ-Интех\n- вакансия: HR сам написал\n- успех: ?\n- зп: 300k+\n\nВопросы:\n- Что такое протокол http, разница между версиями http.\n- что такое rest.\n- что нового в ES5\n- отличия стрелочной и обычной функции\n- как перебрать ключи объекта\n- event loop, очередность вывода\n- обработка ошибок componentDidCatch\n- хуки в react\n- flux архитектура в redux\n- что нельзя делать внутри редюсера, что нельзя хранить в редакс \n- memo, useCallback, useMemo\n\nЗадачи:\nфункция должна выводить индексы элементов массива с интервалом 1 секунда, нельзя использовать setInterval\n\nasync function printIndicesWithDelay(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    console.log(i);\n  }\n}\n\n// Пример использования:\nconst array = ['a', 'b', 'c', 'd'];\nprintIndicesWithDelay(array);\n\nКастомный promiseAll\n\n    return new Promise((resolve, reject) => {\n        let results = new Array(promises.length);\n        let completed = 0;\n\n        promises.forEach((promise, index) => {\n            promise\n                .then((result) => {\n                    results[index] = result;\n                    completed++;\n\n                    if (completed === promises.length) {\n                        resolve(results);\n                    }\n                })\n                .catch((error) => {\n                    reject(error);\n                });\n        });\n    });\n};"
      }
    ]
  },
  {
    "company": "Wildberries",
    "count": 10,
    "records": [
      {
        "timestamp": "2025-06-19 08:18:08",
        "content": "2025-06-19 08:18:08\n Roman -> 2071074234:\nНазвание компании: Wildberries WB в инфраструктуру \nСсылка на вакансию: HR сама написала\nЗП: просил 400+\n\n1. О себе\n2. Почему использовали микрофронты?\n3. Можешь сравнить styled components и emotion? Рассказать плюсы и минусы?\n4. Что такое event loop и как он работает?\n5. Какие еще примеры макротасок знаешь, помимо setTimeout и setInterval?\n6. В какой момент в event loop происходит рендер?\n7. Какие минусы реакта?\n8. Минусы useContext?\n\n9.\n\nЕсли обновить ...",
        "full_content": "2025-06-19 08:18:08\n Roman -> 2071074234:\nНазвание компании: Wildberries WB в инфраструктуру \nСсылка на вакансию: HR сама написала\nЗП: просил 400+\n\n1. О себе\n2. Почему использовали микрофронты?\n3. Можешь сравнить styled components и emotion? Рассказать плюсы и минусы?\n4. Что такое event loop и как он работает?\n5. Какие еще примеры макротасок знаешь, помимо setTimeout и setInterval?\n6. В какой момент в event loop происходит рендер?\n7. Какие минусы реакта?\n8. Минусы useContext?\n\n9.\n\nЕсли обновить tasks, то обновится ли ComponentB \n\n// ComponentA\nconst { tasks } = useContext(MyContext)\n\n// ComponentB\nconst { settings } = useContext(MyContext)\n\n\n10. Проект очень маленький, всего несколько состояний. Коллега предлагает все состояния поместить в один контекст, обернем контекстом наше приложение и будем доставать состояние, там где нам нужно. Ты бы одобрил такое решение?\n11. Если контекст будет пагубно влиять на приложение, будут лишние рендеры, будет лагать, чтобы ты сделал?\n12. Примеры легковесных стейт менеджеров?\n13. Расскажи про useEffect, как он работает?\n\n14.\n\nuseEffect(() => {\n   console.log('effect')\n\n   return () => console.log('unsub')\n}, [])\n\n// 1. произошло монтирование\n// 2. произошло размонтирование\n\nЧто выведет в консоли?\n\n\n15. \n\nuseEffect(() => {\n   console.log('effect')\n\n   return () => console.log('unsub')\n}, [abc])\n\n// 1. произошло монтирование, состояние abc = 1\n// 2. состояние abc изменилось на 5\n// 3. произошло размонтирование\n\nЧто выведет в консоли?\n\n\n16. Как ты понимаешь, что функцию нужно оборачивать в useCallback?\n\n17. \n\nнужно ли оборачивать функцию onClick в useCallback?\n\nconst Button = ({ onClick }) => <button onClick={onClick} >btn</button>\n\n\n18. Как ты понимаешь, что нужно что-то обернуть в useMemo?\n\n19.\n\nНужно ли filters оборачивать в useMemo?\n\nconst Content = ({ onChangeFilters }) => {\n  const page = useSelector(selectPage)\n  const filters = { page }\n  \n  useEffect(() => {\n    onChangeFilters(filters)\n  }, [filters, onChangeFilters])\n  \n  return null\n}\n\n\n20. \n\nНужно в этом коде правильно применить useMemo, useCallback, может memo\n\nconst Button = ({onClick, onInit}) => {\n  \n  return <button onClick={onClick}>btn</button>\n}\n\nconst Content = () => {\n  \n  const [count, setCount] = useState(0)\n  \n  const handleClick = () => {\n    setCount((prev) => prev + 1)\n  }\n  \n  const handleInit = () => {\n    setCount((prev) => prev - 1)\n  }\n  return <Button onClick={handleClick} onInit={handleInit}/>\n};\n\n\n21. Когда компонент нужно обернуть в memo?\n22. Как при помощи js отправить 20 файлов на сервер. 1 запрос отсылает 1 файл. Как отправить на сервер 20 файлов, сделав 20 запросов?\n23. Хотим отобразить на экране какие файлы не отправились (например, 1, 3 и 7 файл), как это сделать?\n24. Есть таблица, есть запрос на получение пользователей, он возвращает 2к пользователей. Нужно рендерить этих пользователей в таблице. Задача оптимизировать, чтобы работало хорошо и без пролагиваний. Предложи несколько вариантов решения данной проблемы.\n25. Знаешь, как работает виртуализация?\n26. Есть колокольчик в хедере, рядом кружочек красный с цифрой - количество сообщений. Как реализовать реалтайм для циферки?\n\n27. Напиши Promise.all\n\n\nall([\n  1,\n  Promise.resolve(2),\n  new Promise((resolve) => setTimeout(() => resolve(3), 2000)),\n]).then((res) => {\n  console.log('res', res) // [1, 2, 3]\n})\n\nall([\n  Promise.resolve(1),\n  Promise.resolve(2),\n  new Promise((_, reject) => setTimeout(() => reject(3), 2000)),\n]).catch((err) => {\n  console.log('err', err) // 3\n})\n\nfunction all() {\n  \n}\n\n\n28. Как ты будешь работать с формами и валидацией? Какие библиотеки используешь?\n29. Сравни react-hook-form и formik"
      },
      {
        "timestamp": "2025-06-10 14:26:47",
        "content": "2025-06-10 14:26:47\n Антон -> 2071074234:\nwildberries техничка\nвакансия: hr написала\n\nсначала долго расспрашивал по легенде. кто ставил задачи, какие процессы внутри спринта, с кем взаимодействовал(как взаимодействовал). \nПрошлись по проектам, где какой стек, какие задачи решал. чуть копнул внутрь фичей. \n\nзадачки: \n\n// console.log(1);\n// setTimeout(() => console.log(2));\n// Promise.resolve().then(() => console.log(3));\n// Promise.resolve().then(() => setTimeout(() => console.log(4)));\n// Promis...",
        "full_content": "2025-06-10 14:26:47\n Антон -> 2071074234:\nwildberries техничка\nвакансия: hr написала\n\nсначала долго расспрашивал по легенде. кто ставил задачи, какие процессы внутри спринта, с кем взаимодействовал(как взаимодействовал). \nПрошлись по проектам, где какой стек, какие задачи решал. чуть копнул внутрь фичей. \n\nзадачки: \n\n// console.log(1);\n// setTimeout(() => console.log(2));\n// Promise.resolve().then(() => console.log(3));\n// Promise.resolve().then(() => setTimeout(() => console.log(4)));\n// Promise.resolve().then(() => console.log(5));\n// setTimeout(() => console.log(6));\n// console.log(7);\n// Promise.resolve().then(console.log('123'))\n// async function wait() {\n//   console.log(8)\n//   let prom = await new Promise(resolve => {\n//     console.log(9)\n//     setTimeout(resolve, 1000)\n//   });\n// }\n// wait()\nОтвет:\n// 1 7 '123' 8 9 3 5 2 6 4\n\n2) написать функцию по удалению дупликатов из массива(два решения)\n\n// const removeDuplicates = (arr) => {\n//     return [...new Set(arr)]\n// }\n\nconst removeDuplicates = (arr) => {\n    return arr.filter((item, index) => arr.indexOf(item) === index)\n}\n\n3) рефактор\n\nimport { useCallback, useState } from \"react\";\n\nimport { Api } from \"../utils/Api\";\n\n/*\n  Легенда:\n  Необходимо отобразить список ключей (произвольные строки), запрашиваемый с бэкенда.\n  При нажатии кнопки \"Сгенерировать ключ\" необходимо сгенерировать новый ключ (апи запрос) и отобразить его в списке.\n  Каждый ключ можно использовать. В таком случае он должен изменить свое визуальное отображение и увеличить счетчик использованных ключей.\n  Каждый ключ можно удалить. При удалении использованного ключа, счетчик использованных ключей уменьшается (счетчику важны только неудаленные использованные ключи)\n  Для поддержания актуального списка ключей необходимо обновлять список каждые 30 секунд. При получении от апи новых ключей считать их неиспользованными\n */\n\nexport function App() {\n    const [keys, setKeys] = useState(null);\n    const [isKeysRequested, setIsKeysRequested] = useState(false);\n\n    const [isLoading, setLoadingState] = useState(false);\n const [countUsedKeys, setCountUsedKeys] = useState(0);\n\n    const toggleLoading = useCallback(() => {\n        setLoadingState(!isLoading);\n    }, [isLoading]);\n\n    const incrementUsedKeys = () => {\n        setCountUsedKeys((prevValue) => prevValue++);\n    }\n\n    const decrementUsedKeys = useCallback(() => {\n        setCountUsedKeys((prevValue) => prevValue--);\n    }, []);\n\n    const addKey = useCallback(async () => {\n        toggleLoading();\n\n        const key = await Api.generateKey();\n        setKeys((prevKeys) => prevKeys.push(key));\n\n        toggleLoading();\n    }, [toggleLoading]);\n\n    const removeKey = useCallback((value) => {\n        setKeys((prevKeys) => prevKeys.filter((key) => key !== value));\n    }, []);\n\n    if (!isKeysRequested) {\n        setIsKeysRequested(true);\n        Api.loadKeys().then((response) => {\n            setKeys(response);\n            setInterval(() => {\n                Api.loadKeys().then((response) => {\n                    setKeys(response);\n                })\n            }, 30000);\n        }).catch(e => {\n            setIsKeysRequested(false);\n        })\n    }\n\n    return (\n        <main>\n            <div>\n                <h3>Всего ключей: {keys.length}</h3>\n                <h3>Использовано текущих ключей: {countUsedKeys}</h3>\n            </div>\n\n            {!keys.length && <div>Список ключей пуст</div>}\n\n            {keys.length && (\n                <div className=\"keys\">\n                    {keys.map((key) => (\n                        <Key\n                            value={key}\n                            removeKey={removeKey(key)}\n                            decrementUsedKeys={decrementUsedKeys}\n                            incrementUsedKeys={incrementUsedKeys}\n                        />\n                    ))}\n                </div>\n            )}\n\n            <div>\n                <Button\n                    onClick={addKey}\n                    isLoading={isLoading}\n                    label=\"Сгенерировать ключ\"\n                />\n            </div>\n        </main>\n    );\n};"
      },
      {
        "timestamp": "2025-02-26 13:32:28",
        "content": "2025-02-26 13:32:28\n Адам -> 2071074234:\nКомпания: WB wildberries\nВакансия: https://career.wb.ru/vacancies/13605\n\nВопросы:\ncss: единицы измерения\nКакие есть свойства position\nзадача про флаг и css как тут (6)  https://t.me/c/2071074234/489/106399\nдальше были эти задачи https://trycode.pw/c/GWR6A\nи ревью вот этого кода в github https://trycode.pw/c/EEW0A",
        "full_content": "2025-02-26 13:32:28\n Адам -> 2071074234:\nКомпания: WB wildberries\nВакансия: https://career.wb.ru/vacancies/13605\n\nВопросы:\ncss: единицы измерения\nКакие есть свойства position\nзадача про флаг и css как тут (6)  https://t.me/c/2071074234/489/106399\nдальше были эти задачи https://trycode.pw/c/GWR6A\nи ревью вот этого кода в github https://trycode.pw/c/EEW0A"
      },
      {
        "timestamp": "2025-02-26 11:02:03",
        "content": "2025-02-26 11:02:03\n Ilya -> 2071074234:\nКомпания: Wildberries\nЗП: 250\nВакансия: hr написала \n\nВопросы:\n1) какая команда, какой стек был, был ли опыт с е2е тестами\n\nЗадачи:\n\nВсе как отсюда\nhttps://trycode.pw/c/48NZJ",
        "full_content": "2025-02-26 11:02:03\n Ilya -> 2071074234:\nКомпания: Wildberries\nЗП: 250\nВакансия: hr написала \n\nВопросы:\n1) какая команда, какой стек был, был ли опыт с е2е тестами\n\nЗадачи:\n\nВсе как отсюда\nhttps://trycode.pw/c/48NZJ"
      },
      {
        "timestamp": "2025-02-13 12:42:37",
        "content": "2025-02-13 12:42:37\n Timofei Syromiatnikov -> 2071074234:\n— Компания: wb wildberries\n— Вакансия: https://career.wb.ru/vacancies/13605\n— ЗП: 250-300к сказал, ищут middle-senior\n\n— Вопросы:\n1) Расскажи мазками где работал, чем занимался, про свои задачи, про команду.\n2) Как проводи ревью, кто проводил, расскажи весь флоу, по какому принципу проводился ревью, на что обращалось внимание при ревью.\n\n—Задачи:\n1) \n// Сделай такой функционал, чтобы у строки можно было вызвать функция, передать число в н...",
        "full_content": "2025-02-13 12:42:37\n Timofei Syromiatnikov -> 2071074234:\n— Компания: wb wildberries\n— Вакансия: https://career.wb.ru/vacancies/13605\n— ЗП: 250-300к сказал, ищут middle-senior\n\n— Вопросы:\n1) Расскажи мазками где работал, чем занимался, про свои задачи, про команду.\n2) Как проводи ревью, кто проводил, расскажи весь флоу, по какому принципу проводился ревью, на что обращалось внимание при ревью.\n\n—Задачи:\n1) \n// Сделай такой функционал, чтобы у строки можно было вызвать функция, передать число в неё, и она возвращала дублированное значение строки равное числу которое получила функция.\nconst str = '123';\n// str.repeatify(3) // 123123123\n\n//Моё решение\nString.prototype.repeatify = function(count) {\n    let result = ''\n    \n    for (i = 0; i < count; i++) {\n        result += this\n    }\n    \n    return result\n}\n\n// console.log(str.repeatify(3))\n2) \n// Найти числа, которые повторяются столько же раз, сколько их номинал\n// '44442733366666' => [3 ,4]\n\n// Моё решение\nfunction findNumbers2(num)  {\n    const obj = {}\n    const result = []\n    \n    for(let i = 0; i < num.length; i++) {\n        const value = Number(num[i])\n        \n        if (obj[value]) {\n            obj[value] += 1\n        \n        } else {\n            obj[value] = 1\n        }\n    }\n    \n    for(key in obj) {\n        const value = obj[key]\n        \n        if (Number(key) === value) {\n            result.push(key)\n        }\n    }\n    \n    return result\n}\n\n// console.log(findNumbers2('44442733366666'));\n3) \n// Event Loop\nconst myPromise = Promise.resolve(Promise.resolve('Promise!'));\n\nfunction funcOne() {\n  myPromise.then(res => res).then(res => console.log(res));\n  setTimeout(() => console.log('Timeout!', 0));\n  console.log('Last line!');\n}\n\nasync function funcTwo() {\n  const res = await myPromise;\n  console.log(await res);\n  setTimeout(() => console.log('Timeout!', 0));\n  console.log('Last line!');\n}\n\nfuncOne();\nfuncTwo();\n4) \n// Что выведет в консоль лог и почему\nconst [count, setCount] = useState(0);\nconst updateState = () => {\n  setCount(prev => prev+1);\n  setCount(prev => prev+1);\n  setCount(prev => prev+1);\n  console.log(count);\n}\n\n5) \n// Отрефактори код\nimport React, { useState } from 'react';\n\nconst Button =  ({ onClick }) => {\n  console.log(\"button render\");\n  return (\n    <button onClick={onClick}>\n      \"Click me\"\n    </button>\n  );\n}\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n  const updateState = () => {\n    setCount(value => value + 1);\n  }\n\n  return (\n    <div>\n     <button onClick={updateState}>increase count</button>\n     \n     <Button onClick={ () => {\n    console.log(\"button click\")\n  }} />\n    </div>\n  );\n}\n\n6) Задача на CSS, есть картинка сверху и превью снизу, надо только с помощью css выстроить похожее превью как на картинке. При этом изменять html нельзя.\nhttps://codepen.io/timur-eit/pen/yLWoPmM\n\n7) Провести ревью кода, на собесе интервьер попросит оставлять комменты на гитхабе, как при ревью.\nhttps://codesandbox.io/p/sandbox/wx3kwx"
      },
      {
        "timestamp": "2024-11-26 15:44:36",
        "content": "2024-11-26 15:44:36\n sabrenda -> 2071074234:\nКомпания: Wildberries\nВакансия: https://spb.hh.ru/vacancy/111162291?hhtmFrom=vacancies\nЗп: 250к\n\nТочно такой же собес как тут https://t.me/c/2071074234/489/80356\n\nВопросы:\n\n-Html/css\nкак работает: Flex-grow, flex 1 0 0\nКак достать ссылку href у <a> и вывести в консоли\nEvent события\n\n-Js\nКак работает, привести примеры с разработки\ne.stopPropagation()\ne.preventDefault()\n\n-React\nReact и React Dom чем отличаются\nuseMemo, useCallback, Memo - как работают\nu...",
        "full_content": "2024-11-26 15:44:36\n sabrenda -> 2071074234:\nКомпания: Wildberries\nВакансия: https://spb.hh.ru/vacancy/111162291?hhtmFrom=vacancies\nЗп: 250к\n\nТочно такой же собес как тут https://t.me/c/2071074234/489/80356\n\nВопросы:\n\n-Html/css\nкак работает: Flex-grow, flex 1 0 0\nКак достать ссылку href у <a> и вывести в консоли\nEvent события\n\n-Js\nКак работает, привести примеры с разработки\ne.stopPropagation()\ne.preventDefault()\n\n-React\nReact и React Dom чем отличаются\nuseMemo, useCallback, Memo - как работают\nuseEffect\n\nКодили только с React, на ссылке в видео такой же код был\n\nСоветую еще доку по React почитать, спрашивал про работу и в целом смотрел на понимание работы react"
      },
      {
        "timestamp": "2024-10-30 16:01:40",
        "content": "2024-10-30 16:01:40\n Artyom Sozykin -> 2071074234:\nWildberries\nЗП: 250к\nВакансия: https://hh.ru/vacancy/108119183",
        "full_content": "2024-10-30 16:01:40\n Artyom Sozykin -> 2071074234:\nWildberries\nЗП: 250к\nВакансия: https://hh.ru/vacancy/108119183"
      },
      {
        "timestamp": "2024-07-17 07:53:58",
        "content": "2024-07-17 07:53:58\n )( -> 2071074234:\nкомпания: wb(wildberries)\nзп: 200+\nвакансия: hr сам написал\n\nвопросы:\nочень много и глубоко спрашивают про вебпак, докер и ci/cd в принципе, хотят простых ответов без размышлений\nвопросы на подобии: основные сущности в вебпак, как передать динамически env во время сборки в докер и тд\n\n\nвсе теоретические вопросы по задачам, прям отдельных вопросов не было  \n\nбаза задач из https://gist.github.com/bakunovdo/9f09a785f9b0939fa5702141488b1f52\n(ссылка взята из ом,...",
        "full_content": "2024-07-17 07:53:58\n )( -> 2071074234:\nкомпания: wb(wildberries)\nзп: 200+\nвакансия: hr сам написал\n\nвопросы:\nочень много и глубоко спрашивают про вебпак, докер и ci/cd в принципе, хотят простых ответов без размышлений\nвопросы на подобии: основные сущности в вебпак, как передать динамически env во время сборки в докер и тд\n\n\nвсе теоретические вопросы по задачам, прям отдельных вопросов не было  \n\nбаза задач из https://gist.github.com/bakunovdo/9f09a785f9b0939fa5702141488b1f52\n(ссылка взята из ом, 70% задач были такие же + алгоритмическая )\n\nбыла еще задача на алгоритмы, не сохранилась, так как просто озвучили и не было возможности сделать скрин условия"
      },
      {
        "timestamp": "2024-05-28 17:09:17",
        "content": "2024-05-28 17:09:17\n Tonidevs -> 2071074234:\nНазвание компании: WB wildberries  #wildberries \n- вакансия: hr написала \n- зп: прошу от 260к\n- успех: ❓\n- задачи:\n— ЧАСТЬ задач БЫЛА отсюда: \nhttps://t.me/c/2071074234/489/21217\n— и вот одна\n // [2, 7, 11, 19], 18 => [7, 11]\n // [1, 2, 3, 4, 6, 8, 9], 5 => [[1, 4], [2, 3]]\n\n// function serchNum(arr, targetNum) {\n//     const numDi = {}\n    \n//     const result = []\n    \n//     for(let i = 0; i < arr.length; i++ ) {\n        \n//         const num = arr...",
        "full_content": "2024-05-28 17:09:17\n Tonidevs -> 2071074234:\nНазвание компании: WB wildberries  #wildberries \n- вакансия: hr написала \n- зп: прошу от 260к\n- успех: ❓\n- задачи:\n— ЧАСТЬ задач БЫЛА отсюда: \nhttps://t.me/c/2071074234/489/21217\n— и вот одна\n // [2, 7, 11, 19], 18 => [7, 11]\n // [1, 2, 3, 4, 6, 8, 9], 5 => [[1, 4], [2, 3]]\n\n// function serchNum(arr, targetNum) {\n//     const numDi = {}\n    \n//     const result = []\n    \n//     for(let i = 0; i < arr.length; i++ ) {\n        \n//         const num = arr[i]\n         \n//         const comp = targetNum - num;\n        \n        \n//         if(numDi[comp] !== undefined) {\n//             result.push([comp, num])\n//         }\n//         numDi[num] = i\n//     }\n    \n//     return result\n// }\n\n\n// console.log(serchNum([1, 2, 3, 4, 6, 8, 9], 5))\n- вопросы:\nEvent Loop - Как работает \nService Worker  - что такое\nRedux Saga - отличия от Toolkit\nСложность алгоритма - как считается"
      },
      {
        "timestamp": "2024-05-24 06:37:36",
        "content": "2024-05-24 06:37:36\n Александр Птицын -> 2071074234:\nНазвание компании: WB #wildberries \n- зп: от 350к на руки\n- вакансия: сами написали\n- успех: ❌ (фидбек неадекватный, сказал что пришлось много подсказывать по задачам, хотя подсказывал уж точно не он =) )\n\nВсе задачи закинул сюда:\nhttps://trycode.pw/c/48NZJ",
        "full_content": "2024-05-24 06:37:36\n Александр Птицын -> 2071074234:\nНазвание компании: WB #wildberries \n- зп: от 350к на руки\n- вакансия: сами написали\n- успех: ❌ (фидбек неадекватный, сказал что пришлось много подсказывать по задачам, хотя подсказывал уж точно не он =) )\n\nВсе задачи закинул сюда:\nhttps://trycode.pw/c/48NZJ"
      }
    ]
  },
  {
    "company": "Bell Integrator",
    "count": 8,
    "records": [
      {
        "timestamp": "2025-07-16 16:47:40",
        "content": "2025-07-16 16:47:40\n Роман -> 2071074234:\nКомпания: Bell integrator(Сбер)\nВопросы:\n-Рассказать о проекте \n-Какой был состав команды\n-Как проводили код-ревью\n-На какой грейд себя оцениваешь\n-Почему увольняешься\n-Методы копирования объектов\nЗадачки:\nЧто выведет в консоль:\nconst a = { prop1: { prop2: \"test2\" } };\nconst b = { ...a };\na.prop1.prop2 = \"test3\";\nconsole.log(b.prop1.prop2); // Выведет: \"test3\"\nlet firstObj = { name: 'Hello' };\n\nlet secondObj = firstObj;\n\nfirstObj = { name: 'Bye' };\n\ncons...",
        "full_content": "2025-07-16 16:47:40\n Роман -> 2071074234:\nКомпания: Bell integrator(Сбер)\nВопросы:\n-Рассказать о проекте \n-Какой был состав команды\n-Как проводили код-ревью\n-На какой грейд себя оцениваешь\n-Почему увольняешься\n-Методы копирования объектов\nЗадачки:\nЧто выведет в консоль:\nconst a = { prop1: { prop2: \"test2\" } };\nconst b = { ...a };\na.prop1.prop2 = \"test3\";\nconsole.log(b.prop1.prop2); // Выведет: \"test3\"\nlet firstObj = { name: 'Hello' };\n\nlet secondObj = firstObj;\n\nfirstObj = { name: 'Bye' };\n\nconsole.log(secondObj.name); // Выведет: 'Hello'\nsetTimeout(() => console.log(1), 0);\n\nnew Promise((resolve) => {\n    console.log(2);\n    resolve(3);\n})\n    .then((res) => console.log(res)) \n    .then((res) => {\n        setTimeout(() => {\n            console.log(res); \n        }, 0);\n    })\n    .then(() => {\n        throw new Error(\"error\"); // \n        console.log(5); \n    })\n    .catch(() => console.log(6)) \n    .then(() => console.log(7)) \n    .finally(() => console.log(8)); \n\nconsole.log(9);\n\n//2 9 3 6 7 8 1 undefined\nНаписать тип someName и написать наиболее оптимальную проверку\ntype ID = string;\n\ninterface Picture {\n    size: number;\n    name: string;\n}\n\ninterface Props {\n    pictures: Record<ID, Picture>;\n    id: string;\n}\n\nconst someName:... = ({ pictures, id }) => Object.entries(pictures)\n        .find(picture => picture[0] === id) !== undefined;\n    \n    return <>{/* ... */}</>;\n};\n\n// const hasPicture: boolean = pictures.hasOwnProperty(id) (Попросил правильно обозвать переменную)\nНаписать функцию reverseString, без использования arr.reverse\nfunction reverseString(str) {\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n}\nНу и дописать реверс для предложения\nfunction reverseWords(sentence) {\n    return sentence.split(' ').map(word => reverseString(word)).join(' ');\n}"
      },
      {
        "timestamp": "2025-07-04 19:34:23",
        "content": "2025-07-04 19:34:23\n Роман -> 2071074234:\nКомпания: Bell Integrator (TELE2)\nЗП: 200-220\nВопросов по опыту не было как и лайвкодинга, сразу перешли к тех.вопросам.\n\nWeb: \n-Расскажи про DNS/DNS-Resolving\n-Что такое TCP и IP, как работают, чем отличаются\n-Что такое HTTP keep-alive\n-Что такое CDN\n-Что такое CORS, как обрабатываются сложные запросы (preflight-запросы)\n-Отличия cookie/localStorage/sessionStorage, когда используются\n\nHTML/CSS:\n-Что такое preload и prefetch, для чего нужны\n-Отличия asyn...",
        "full_content": "2025-07-04 19:34:23\n Роман -> 2071074234:\nКомпания: Bell Integrator (TELE2)\nЗП: 200-220\nВопросов по опыту не было как и лайвкодинга, сразу перешли к тех.вопросам.\n\nWeb: \n-Расскажи про DNS/DNS-Resolving\n-Что такое TCP и IP, как работают, чем отличаются\n-Что такое HTTP keep-alive\n-Что такое CDN\n-Что такое CORS, как обрабатываются сложные запросы (preflight-запросы)\n-Отличия cookie/localStorage/sessionStorage, когда используются\n\nHTML/CSS:\n-Что такое preload и prefetch, для чего нужны\n-Отличия async и defer\n-Что такое CSP, для чего нужно\n-Рассказать про aria и data-* атрибуты\n-Зачем использовать семантическую верстку. Назвать теги семантической верстки\n-Рассказать про тег picture, как использовать. \n-Специфичность селекторов. \n-Отличия вьюпортовых единиц от процентов. \n-Псевдоклассы и псевдоэлементы. Что такое, чем отличаются. \n-Разница focus и active\n-Разница :nth-child и :nth-of-type \n-Значения свойства display: , назвать отличия.Как влияет padding у инлайна и инлайн блока\n-Рассказать про box-sizing\n-Какой процесс анимации более ресурсоемкий. Transform: || Position: absolute\n\nTS:\n-Особенности TS. Зачем нужен. Плюсы и минусы.\n-Какие utility types знаешь\n-Что такое Generics\n-Отличия type от interface\n-Назвать собственные типы у TypeScript'a\n\nJS:\n-Разница var, let, const. Какое отличие в производительности. \n-Рассказать про метод Object.freeze\n-Отличия Promise.all и Promise.allSettled\n-Какая разница между Object.create() и new Constructor\n-Что такое Symbol и зачем он нужен. \n-Функции генераторы. Где могут быть полезны\n-Что такое BigInt и когда может потребоваться. \n-Отличия Map и WeekMap\n-Как реализовать асинхронную функцию sleep() без setTimeout\n-Чем может быть опасен new Function\n-Как бы реализовал мемоизирующую функцию\n\nReact:\n-Перечислить хуки реакта\n-Разница между useEffect и useLayoutEffect\n-Рассказать про React.forwardRef \n-Как работает React.memo, когда может быть бесполезен\n-Когда лучше использовать апи Context, а когда прибегать к стейт-менеджерам\n-Какая разница между контролируемыми и неконтролируемыми компонентами\n-Рассказать про key в реакте. Почему важны\n-Рассказать как бы реализовал хук useDebounce \n-Что такое Portal в реакт. Когда использовать\n-Что такое Suspense"
      },
      {
        "timestamp": "2025-05-26 18:27:44",
        "content": "2025-05-26 18:27:44\n Никита -> 2071074234:\nBell Integrator \nПроект Сбера - SberJazz\nHr написала\nЗП: от 200\n\nВопросы:\nСпрашивает про опыт, технологии, можно хорошо поболтать с ним, чилловый\nЗнаком ли с WebRTC?\n\nЗадачи:\n\nУСЛОВИЕ\n// Нужно написать функцию stringJoin, которая склеивает строки через разделитель\nfunction stringJoin() {\n    ...//-код\n}\nstringJoin('  *  ', '1', '5', '7'); // вернет '1 * 5 * 7'\nstringJoin('_', 'snake', 'case', 'text'); // вернет 'snake_case_text'\nРЕШЕНИЕ\nfunction stringJ...",
        "full_content": "2025-05-26 18:27:44\n Никита -> 2071074234:\nBell Integrator \nПроект Сбера - SberJazz\nHr написала\nЗП: от 200\n\nВопросы:\nСпрашивает про опыт, технологии, можно хорошо поболтать с ним, чилловый\nЗнаком ли с WebRTC?\n\nЗадачи:\n\nУСЛОВИЕ\n// Нужно написать функцию stringJoin, которая склеивает строки через разделитель\nfunction stringJoin() {\n    ...//-код\n}\nstringJoin('  *  ', '1', '5', '7'); // вернет '1 * 5 * 7'\nstringJoin('_', 'snake', 'case', 'text'); // вернет 'snake_case_text'\nРЕШЕНИЕ\nfunction stringJoin(separator, ...args) {\n    return args.join(separator)\n}\nА теперь можешь написать решение используя ES5, или даже ES3 (🤨)\nЭто ES5:\nfunction stringJoinESS(separator){\n    var strings = []\n    for (var i = 1; i < arguments.length; i++){\n        strings[i - 1] = arguments[i]\n    }\n    return strings.join(separator) \n}\n\nУСЛОВИЕ\n// Написать декоратор для функции, который ограничивает число вызовов.\n// callLimit(fn, count[, callback]), принимает следующие аргументы:\n// fn - функция, которую декормруем;\n// count - максимальное число вызовов;\n// callback - вызывается, когда совершен последний вызов. Опционально.\n// У вызываемой функции должен быть метод для перезагрузки таймера в начальное положение.\n// Пример:\n...\nfunction callLimit(fn, count, callback) {\n    ...//...код\n}\n\n...\nfunction log(title, message) {\n    ...console.log(title + ':' + message);\n}\n\n...\nconst logLimited = callLimit(log, 3);\nlogLimited('title', 'desc'); // 'title: desc'\nlogLimited('title2', 'desc'); // 'title2: desc'\nlogLimited('title3', 'desc'); // 'title3: desc'\nlogLimited('title4', 'desc'); // Этот не сработает\n...\n\nlogLimited.reset(); // Перезагрузили таймер\n// Можно еще 3 раза вызвать\nlogLimited('title5', 'desc'); // 'title5: desc'\nlogLimited('title6', 'desc'); // 'title6: desc'\nlogLimited('title7', 'desc'); // 'title7: desc'\n...\n\nvar logLimited2 = callLimit(log, 2, () => console.log('finish'));\nlogLimited2('foo', 'bar'); // 'foo: bar'\nlogLimited2('foo2', 'bar'); // 'foo2: bar'\n//'finish'\n\nРЕШЕНИЕ\nfunction callLimit(fn, count, callback) {\n    let limit = 0;\n\n    function logLimited(...args) {\n        if (limit >= count) return;\n\n        limit++;\n\n        fn.apply(this, args);\n\n        if (limit === count && callback) {\n            callback();\n        }\n    }\n\n    logLimited.reset = function () {\n        limit = 0;\n    };\n\n    return logLimited;\n}"
      },
      {
        "timestamp": "2025-04-09 15:21:01",
        "content": "2025-04-09 15:21:01\n Равиль Васильев -> 2071074234:\nBell integrator\n\nЗП - до 230 на руки\n\n📢 Вакансия -hr написала\n\n🎥 Запись собеса - https://www.youtube.com/watch?v=RDtJWe8PM5o",
        "full_content": "2025-04-09 15:21:01\n Равиль Васильев -> 2071074234:\nBell integrator\n\nЗП - до 230 на руки\n\n📢 Вакансия -hr написала\n\n🎥 Запись собеса - https://www.youtube.com/watch?v=RDtJWe8PM5o"
      },
      {
        "timestamp": "2025-01-31 16:00:34",
        "content": "2025-01-31 16:00:34\n Ivan -> 2071074234:\nКомпания : Bell integrator\nЗП: 200\nМного вопросов совпадают с этим собеседованием - https://t.me/c/2071074234/489/86370\nСпрашивали про опыт \nИнтересные задачи \nМикрофронтенд \nЧто сделать чтобы переменная внутри функции была недоступна к изменению (область видимости let или IIFE)\n var a = 10\n   function foo() {\n   a = 5\n  }\nApply call bind\nЗамыкание \nconsole.log('' || {} )\nconsole.log('' ?? {} )\nЧто такое каррирование?\n  function foo(a) {\n   console.log(b)...",
        "full_content": "2025-01-31 16:00:34\n Ivan -> 2071074234:\nКомпания : Bell integrator\nЗП: 200\nМного вопросов совпадают с этим собеседованием - https://t.me/c/2071074234/489/86370\nСпрашивали про опыт \nИнтересные задачи \nМикрофронтенд \nЧто сделать чтобы переменная внутри функции была недоступна к изменению (область видимости let или IIFE)\n var a = 10\n   function foo() {\n   a = 5\n  }\nApply call bind\nЗамыкание \nconsole.log('' || {} )\nconsole.log('' ?? {} )\nЧто такое каррирование?\n  function foo(a) {\n   console.log(b)\n       return  {\n           foo: (b) => foo(b)\n   }\n  }\n   foo(1).foo(2).foo(3).foo(4)\n  <Component func={this.foo}/>\n  <Component func={() => this.foo()}/>\nВ чем разница эти компонентов и как лучше делать?\nimport {style} from './style.less' (почему будет ругаться ts)\nКак типизировать ошибку \nРассказать про хуки \nUseeffect vs Uselayouteffect \nAbortcontroller\nThis в js\nКакие функции бывают и их отличия \nSuspense в реакт \nПорталы в реакт(createPortal)\nReact thunk\nTreeshaking \n\nЗадача:\nДан Enum \nДан generic нужно дописать \nenum EState { ONE = 'ONE', TWO = 'TWO', THREE = 'THREE' };\n\ninterface IProps<V extends Record<EState, number>> extends ICommonProps {\n    value: V;\n}\n\nconst props: IProps<Record<EState, number>> = { // Заменили string на Record<EState, number>\n    value: { // Y заменяется на объект с ключами из EState и числами\n        [EState.ONE]: 1,\n        [EState.TWO]: 2,\n        [EState.THREE]: 3\n    }\n};"
      },
      {
        "timestamp": "2024-11-19 19:29:57",
        "content": "2024-11-19 19:29:57\n Гладких Александр -> 2071074234:\nКомпания Сбер Bell Integrator 2 этап \nОбщение с менеджерами\nВакансия hr написала\nЗП: от 200\nВопросы\n- Расскажи о своем опыте \n- Причины ухода\n- как пришел во фронтенд как выбирал стэк какой учить\n- был ли опыты в бэкенде\n- был ли опыт настройки пайплайна\n- Потом был рассказ о своем продукте\n- готов ли поработать с CI-CD c релизами",
        "full_content": "2024-11-19 19:29:57\n Гладких Александр -> 2071074234:\nКомпания Сбер Bell Integrator 2 этап \nОбщение с менеджерами\nВакансия hr написала\nЗП: от 200\nВопросы\n- Расскажи о своем опыте \n- Причины ухода\n- как пришел во фронтенд как выбирал стэк какой учить\n- был ли опыты в бэкенде\n- был ли опыт настройки пайплайна\n- Потом был рассказ о своем продукте\n- готов ли поработать с CI-CD c релизами"
      },
      {
        "timestamp": "2024-11-14 19:26:49",
        "content": "2024-11-14 19:26:49\n Гладких Александр -> 2071074234:\nСбер (Bell Integrator)\n Вакансия: hr сама написала\n Вопросы \n  - Расскажи про свой опыт в кратце\n  - Проекты команды как взаимодействовали\n  \n  - Задачи\n  \n  var a = 10\n   function foo() {\n   a = 5\n  }\nНазови все способы сделать перменную а недоступной для изменений\n \n  console.log('' || {})\n  console.log('' ?? {})\n  \n  Что такое ?? и что будет в консоли\n  \n  console.log(this.user.name)\n  \n  что будет в консоли \n  как сделать чтобы был undefi...",
        "full_content": "2024-11-14 19:26:49\n Гладких Александр -> 2071074234:\nСбер (Bell Integrator)\n Вакансия: hr сама написала\n Вопросы \n  - Расскажи про свой опыт в кратце\n  - Проекты команды как взаимодействовали\n  \n  - Задачи\n  \n  var a = 10\n   function foo() {\n   a = 5\n  }\nНазови все способы сделать перменную а недоступной для изменений\n \n  console.log('' || {})\n  console.log('' ?? {})\n  \n  Что такое ?? и что будет в консоли\n  \n  console.log(this.user.name)\n  \n  что будет в консоли \n  как сделать чтобы был undefined\n  \n  что такое каррирование\n  \n  const a = {key: 'a'}, b = {key: 'b'}, c = {key: 'c'}\n  a[b] = c\n  a[c] = b\n   console.log(a[b], a[c])\n  что будет в консоли\n  \n  function foo(a) {\n   console.log(b)\n       return  {\n           foo: (b) => foo(b)\n   }\n  }\n   foo(1).foo(2).foo(3).foo(4)\n  что в консоли\n  \n  написать кастомный промис который резолвит 1\n  вопросы по промисам\n  \n  <Component func={this.foo}/>\n  <Component func={() => this.foo()}/>\n  в чем разница что лучше\n  \n  useEfect(() => {\n   console.log(1)\n  \n  return () => {\n   console.log(2)\n  }\n  }, [name])\n  порядок логов\n  \n  использовал abourt controller\n  \n  useEffect(() => {\n  const controller = new AbortController();\n  dispatch(getData(controller.signal));\n  return () => {\n   controller.abort(); // Отменяет запрос при размонтировании компонента\n   };\n  }, []);\n  \n  - зачем нужен combineReducer\n  \n  import {style} from './style.less'\n  почему мы можем так написать\n  будет ли ругаться ts и как исправить\n  \n  try {\n  } catch (error: ?) {\n  }\n  как типизировать error и почему так\n  - какие утилити тайп знаешь\n  \n   const props: IProps<Record<EState, number>> = {\n    value: {\n        [EState.ONE]: 1,\n        [EState.TWO]: 2,\n        [EState.THREE]: 3\n }\n};"
      },
      {
        "timestamp": "2024-10-31 09:51:20",
        "content": "2024-10-31 09:51:20\n Сергей -> 2071074234:\n- Компания: аутсорс ВК\n- Вакансия: от  bell integrator\n- ЗП: до 270к озвучивали\n- Вопросы: \n- по резюме подробно пробежались, подробно про то как ставились задачи, конфликты, процессы в общем, про работу с легаси, работа с webpack\n- пришла HTML что дальше происходит\n- Async vs defer, type=module\n- requestAnimationFrame\n- специфичность селекторов\n- layout/paint/ может ли paint произойти без Layout, может ли layout без paint\n- можем ли использовать анимац...",
        "full_content": "2024-10-31 09:51:20\n Сергей -> 2071074234:\n- Компания: аутсорс ВК\n- Вакансия: от  bell integrator\n- ЗП: до 270к озвучивали\n- Вопросы: \n- по резюме подробно пробежались, подробно про то как ставились задачи, конфликты, процессы в общем, про работу с легаси, работа с webpack\n- пришла HTML что дальше происходит\n- Async vs defer, type=module\n- requestAnimationFrame\n- специфичность селекторов\n- layout/paint/ может ли paint произойти без Layout, может ли layout без paint\n- можем ли использовать анимации в промисах\n- event loop, когда происходит render\n- let/const/var области видимо\n- замыкание\n- this\n- workers\n- react в чем плюс\n- spa/ssr плюсы минусы как работает\n- хуки React\n- как добавить сео с SPA\n- мемоизация\n- правила хуков\n- Ts\n- any vs unkown\n- omit pick extract exclude\n- enum vs union"
      }
    ]
  },
  {
    "company": "Антара",
    "count": 8,
    "records": [
      {
        "timestamp": "2025-01-28 15:17:05",
        "content": "2025-01-28 15:17:05\n alzor -> 2071074234:\nКомпания: Антара (аутстафф)\nВакансия: https://hh.ru/vacancy/116140686\nЭтап: тех.скрининг\nЗП: 220к",
        "full_content": "2025-01-28 15:17:05\n alzor -> 2071074234:\nКомпания: Антара (аутстафф)\nВакансия: https://hh.ru/vacancy/116140686\nЭтап: тех.скрининг\nЗП: 220к"
      },
      {
        "timestamp": "2024-10-22 09:20:13",
        "content": "2024-10-22 09:20:13\n Katerina -> 2071074234:\nКомпания: Антара(2 этап - собес на проект Сбера)\nВакансия: https://spb.hh.ru/vacancy/108244512?from=employer&hhtmFrom=employer\nЗП: 200 - 250k\nВопросы\nОчень много по резюме, проходились по каждой строчке, как по текущему месту работы, так и по предыдущему\n- FSD какие компоненты в каких папках, примеры\n- Хранилища браузеров, чем различаются и что безопаснее\n- Рассказать про WebSocket, Polling и Long Polling\n- Работала ли с css? Различия flex и grid\n- Мо...",
        "full_content": "2024-10-22 09:20:13\n Katerina -> 2071074234:\nКомпания: Антара(2 этап - собес на проект Сбера)\nВакансия: https://spb.hh.ru/vacancy/108244512?from=employer&hhtmFrom=employer\nЗП: 200 - 250k\nВопросы\nОчень много по резюме, проходились по каждой строчке, как по текущему месту работы, так и по предыдущему\n- FSD какие компоненты в каких папках, примеры\n- Хранилища браузеров, чем различаются и что безопаснее\n- Рассказать про WebSocket, Polling и Long Polling\n- Работала ли с css? Различия flex и grid\n- Можем ли через js работать с псевдоклассами\n- Var, let, const - классика\n- Event loop\n- Рассказать про Event propagation, как остановить всплытие, как получить элемент на котором оно сработало\n- Хуки, рассказать просто\n- Git, как плотно работала, что использовала (спросили знаю ли про squash, cherry-pick)\n- База по TypeScript \n- Перегрузка функций в TypeScript\nЗадачи:\n//1 - зарефакторить\nexport const TestContainer = ({main}: {main: boolean}) => {\n  if (main) return null;\n  \n  const ref = useRef<number>(0);\n  const [array, setArray] = useState<number[]>([0]);\n  \n  const handleClick = useCallback(() => {\n      setArray([prev, ref.current])\n  }, []);\n  \n  useEffect(() => {\n      setInterval(() => {\n          ref.current = ref.current + Math.random() + array[array.length-1];\n      }, 100);\n  }, [ref, array, setArray]);\n\n  \n  return (\n      <div onClick={handleClick}>\n          {array.map(id => (\n              <div>{item}</div>\n          ))}\n      </div>\n  );\n};\n\n//2\nconst inData = \"user.name.firstname=Bob&user.name.lastname=Smith&user.favoritecolor=Light%20Blue\";\n\nfunction queryObjectify(arg) {\n  // ??\n}\n\nqueryObjectify(inData)\n/* Результатом выполнения для входящей строки, должен быть следующий объект\n{\n'user': {\n  'name': {\n  'firstname': 'Bob',\n  'lastname': 'Smith'\n  },\n  'favoritecolor': 'Light Blue'\n}\n};\n*/"
      },
      {
        "timestamp": "2024-10-15 12:38:20",
        "content": "2024-10-15 12:38:20\n Katerina -> 2071074234:\nКомпания: Антара (первый собес на грейд)\nВакансия: https://spb.hh.ru/vacancy/108244512?from=employer&hhtmFrom=employer\nЗП: вилка 210-250к\nВопросы: все базовые по теории.\nИз интересного:\n1) package-lock.json отличия от package.json\n2) что будет если в then будет вызываться другой then (в последующих then будет результат первого промиса)\n3) управляемые и неуправляемые компоненты\n4) цикл редакса: создаем экшен/передаем в диспатч/обновляем стор в редюсере...",
        "full_content": "2024-10-15 12:38:20\n Katerina -> 2071074234:\nКомпания: Антара (первый собес на грейд)\nВакансия: https://spb.hh.ru/vacancy/108244512?from=employer&hhtmFrom=employer\nЗП: вилка 210-250к\nВопросы: все базовые по теории.\nИз интересного:\n1) package-lock.json отличия от package.json\n2) что будет если в then будет вызываться другой then (в последующих then будет результат первого промиса)\n3) управляемые и неуправляемые компоненты\n4) цикл редакса: создаем экшен/передаем в диспатч/обновляем стор в редюсере/обновляем интерфейс\nЗадачи: не было"
      },
      {
        "timestamp": "2024-09-27 09:14:26",
        "content": "2024-09-27 09:14:26\n Timofei Syromiatnikov -> 2071074234:\n— Название: Антара (аутстаф в Сбер, 2 этап - тех. собес к клиенту)\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— ЗП: от 200к\n— Вопросы:\n1) Расскажи про свой опыт. Какое образование. Сколько лет. Почему ушел с послед. места работы.\n2) Какие знаешь хуки? useRef особенности?\n3) Какие жизненные циклы компонента реализует useEffect и как?\n4) Каким стейт-менеджером пользовался, зачем нужны они вообще? Какой архитекту...",
        "full_content": "2024-09-27 09:14:26\n Timofei Syromiatnikov -> 2071074234:\n— Название: Антара (аутстаф в Сбер, 2 этап - тех. собес к клиенту)\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— ЗП: от 200к\n— Вопросы:\n1) Расскажи про свой опыт. Какое образование. Сколько лет. Почему ушел с послед. места работы.\n2) Какие знаешь хуки? useRef особенности?\n3) Какие жизненные циклы компонента реализует useEffect и как?\n4) Каким стейт-менеджером пользовался, зачем нужны они вообще? Какой архитектурный патерн у Redux? Что в Redux реализует своевременное обновление данных при изменении? (observer)\n5) Что такое flux? \n6) Приоритетность селекторов.\n7) Как выровнять див?\n8) em, rem что это?\n9) Как парсится страница? Все этапы, на каком мы обрабатываем скрипты? Что такое async и defer у скриптов?\n10) Что такое эвентлупа, что входит в микро и макро задачи?\n11) Погружение, всплытие в DOM, что это?\n\n— Задачи:\n1) Что выведется и почему:\nsetTimeout(() => { console.log(a, b,c)  }, 100)\n\nconst promise = new Promise((resolve) => {\n  b--;\n  resolve();\n})\n\npromise\n  .then(() => console.log(a))\n  .catch(() => console.log(b--))\n  .catch(() => console.log(c))\n\nlet a = 1:\nlet b = 2;\n\nconsole.log(c)\n\nvar c = 3;\n\n// undefined 2 1 1 3\n\n2) Задача на ревью\nconst Component = ({ main  }) => {\n  if (main) return null\n  const [array, setArray] = useState([0])\n  const ref = useRef(0)\n\n  const handleClick = useCallback(() => {\n    setArray([array, ref.current])\n  }, [])\n\n  useEffect(() => {\n    ref.current = Math.random() + ref.current + array[array.length-1]\n  }, [array, ref])\n\n  retrun <div>{\n    array.map(id => <div>{id}</div>)\n  }</div>  \n}\n3) Напиши функцию которая вернет только уникальные значения массива. Не используя нативные способы JS, по типу new Set()\n// [1, 1, 2, 3, 5, 2, 8, 9, 1, 0] ===> [1, 2, 3, 5, 8, 9, 0]"
      },
      {
        "timestamp": "2024-09-26 13:13:06",
        "content": "2024-09-26 13:13:06\n Ada500 -> 2071074234:\n-Антара\nЗп: от 200тыс\nВакансия: hr сама написала\nВопросы:\n-Что такое селекторы?\n-Приоритетность селекторов\n-какие есть хранилищи в браузере? \n-какие есть флаги у cookie, для чего они, отличие\n- расскажи про методы оптимизации в реакт\n- методы копирования объекта\n- расскажи про хуки\n- отличие useState от useRef\nЗадачи : \nЧто выведит в консоль \nconsole.log(1++'1'+3)\nconsole.log ('A'-'B')\nНапиши кастомный useFetch",
        "full_content": "2024-09-26 13:13:06\n Ada500 -> 2071074234:\n-Антара\nЗп: от 200тыс\nВакансия: hr сама написала\nВопросы:\n-Что такое селекторы?\n-Приоритетность селекторов\n-какие есть хранилищи в браузере? \n-какие есть флаги у cookie, для чего они, отличие\n- расскажи про методы оптимизации в реакт\n- методы копирования объекта\n- расскажи про хуки\n- отличие useState от useRef\nЗадачи : \nЧто выведит в консоль \nconsole.log(1++'1'+3)\nconsole.log ('A'-'B')\nНапиши кастомный useFetch"
      },
      {
        "timestamp": "2024-09-22 19:35:34",
        "content": "2024-09-22 19:35:34\n Никита -> 2071074234:\n— Название: Антара\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— зп: 250к\n— вопросы:\n1) Как отрисовывается html после получения?\n2) Что знаешь про вес селекторов?\n3) Какие знаешь свойства flex?\n4) == и ===\n5) чем proto отличается от prototype?\n6) localStorage, sessionStorage, cookie\n7) какие есть флаги есть в cookie\n8) Какие хуки использовал\n9) отличие useRef от useState\n10) Что такое дженерики?\nлайв кодинг:\n1) написать свой ...",
        "full_content": "2024-09-22 19:35:34\n Никита -> 2071074234:\n— Название: Антара\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— зп: 250к\n— вопросы:\n1) Как отрисовывается html после получения?\n2) Что знаешь про вес селекторов?\n3) Какие знаешь свойства flex?\n4) == и ===\n5) чем proto отличается от prototype?\n6) localStorage, sessionStorage, cookie\n7) какие есть флаги есть в cookie\n8) Какие хуки использовал\n9) отличие useRef от useState\n10) Что такое дженерики?\nлайв кодинг:\n1) написать свой map\n2) задача на волну из 'hello' сделать ['Hello','hEllo','heLlo','helLo','hellO']\n3) Стандартный рефакторинг с useEffect: добавить массив зависимостей, отписку, убрать async, разделить на 2 useEffect(запрос, и логика скролла)"
      },
      {
        "timestamp": "2024-09-18 12:50:11",
        "content": "2024-09-18 12:50:11\n Timofei Syromiatnikov -> 2071074234:\n— Название: Антара (аутстаф в сбер)\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— ЗП: когда откликался было до 200к, сейчас от 200к поставили, хз\n— Вопросы:\n1) Что такое useRef и useState хуки, расскажи о них поподробнее и разницу.\n2) Расскажи что такое useEffect, различие между useLaoutEffect, и как мы можем вызвать колбек при размонтировании компонента?\n3) Что такое event.stopPropagation() и event.preventDefa...",
        "full_content": "2024-09-18 12:50:11\n Timofei Syromiatnikov -> 2071074234:\n— Название: Антара (аутстаф в сбер)\n— Вакансия: https://hh.ru/vacancy/106841097?hhtmFrom=employer_vacancies\n— ЗП: когда откликался было до 200к, сейчас от 200к поставили, хз\n— Вопросы:\n1) Что такое useRef и useState хуки, расскажи о них поподробнее и разницу.\n2) Расскажи что такое useEffect, различие между useLaoutEffect, и как мы можем вызвать колбек при размонтировании компонента?\n3) Что такое event.stopPropagation() и event.preventDefault()?\n4) С помощью чего можно решить проблему пропс дриллинга?\n5) Какие минусы использования useContext в реакте?\n6) Что такое дженерики в  TS?\n\n— Задачи:\n1) Напиши функцию, которая принимает аргументом массив (в массиве могут быть числа и/или вложенные массивы), и выдает сумму всех чисел из переданного массива.\nconsole.log(sum([1,1,1, [2, 1], [1, [1, [1], 3]]]) // вернуть должно: 12\n2) Напиши кастомный хук useFetch, который принимает урл, и отдает объект с значениями data, isLoading, isError, и функцию reload, при вызове которой мы по новой шлем запрос за данными.\nfunction App() {\n  const { data, isLoading, isError, reload } = useFetch('https://externalapi')\n\n  return <div>\n    <div>{data?.map(value => <div>{value.name}</div>)</div>\n    <button onClick={reload}>reload</button>\n  </div>\n}\n3. Что выведется в консоли?\nconsole.log(1 + '2' + '2')\nconsole.log(1 + +'2' + '2')\nconsole.log('A' - 'B')\nconsole.log(typeof /abc/)\nconsole.log(true - 12)\nconsole.log(0.1 + 0.2)\n\nconst obj = { '1': 10, 1: 3 }\nconsole.log(obj['1'] + obj[1])\n4. Напиши функцию between, которая принимает минимальное и максимальное значение. И возвращает true или false если значение назходится в этом диапозоне соотвтественно. (Задача с подковыркой, вызов функции ничего нельзя менять, надо адаптировать решение под вызов который дан в задаче)\nfunction betwee(min, max) {\n\n// короче тут возвращаем функцию, чтобы filter мог её вызвать, в этот колбек принимает current число, и тут сравниваем уже, если в диапазоне возвращаем true, если нет - false\n}\n\nconst arr = [1, 2, 3, 4, 5, 6]\nconst range = arr.filter(betwee(3, 6))\nconsole.log(range) // [4, 5]"
      },
      {
        "timestamp": "2024-08-21 17:20:49",
        "content": "2024-08-21 17:20:49\n Kirill Anikeev -> 2071074234:\nНазвание: Антара\nСсылка: https://hh.ru/vacancy/105320834\nзп: 200\nВопросы: не успел запись сделать, завтра исправлюсь, так что скомкано\nрассказать про изоляцию стилей\nрассказать про селектары\nкакие семантичные теги знаешь?\nподробно по ивент луп\nразница между type interface\nUtility Types\nреакт хуки\nрассказать подробно про мемоизацию\nзадачи (к сожалению код не сохранился, исправлюсь): \n отсортировать четные элементы массива\nрефакторинг кода в реакт...",
        "full_content": "2024-08-21 17:20:49\n Kirill Anikeev -> 2071074234:\nНазвание: Антара\nСсылка: https://hh.ru/vacancy/105320834\nзп: 200\nВопросы: не успел запись сделать, завтра исправлюсь, так что скомкано\nрассказать про изоляцию стилей\nрассказать про селектары\nкакие семантичные теги знаешь?\nподробно по ивент луп\nразница между type interface\nUtility Types\nреакт хуки\nрассказать подробно про мемоизацию\nзадачи (к сожалению код не сохранился, исправлюсь): \n отсортировать четные элементы массива\nрефакторинг кода в реакт компонентах\nинструменты хранения информации в браузере\nрассказать подробно про куки"
      }
    ]
  },
  {
    "company": "Лига Цифровой Экономики",
    "count": 8,
    "records": [
      {
        "timestamp": "2025-07-03 08:04:00",
        "content": "2025-07-03 08:04:00\n Гладких Александр -> 2071074234:\nКомпания Лига Цифровой Экономики 2 этап\nВакансия: написала HR\n\nВопросы \nРасскажи о себе о предыдущем опыте?\nКак решали проблему  внедрения FSD с учетом того что проект долго разрабатывается и есть старички как обучать их и тд с какими проблемами сталкивался\nПодробно идет по резюме по флоу работы командам и тд\nuse strict что такое зачем нужен как использовали\nMap Set Object примеры из жизни\nnull undefined\nreflow vs repaint в чем разница\nкак на...",
        "full_content": "2025-07-03 08:04:00\n Гладких Александр -> 2071074234:\nКомпания Лига Цифровой Экономики 2 этап\nВакансия: написала HR\n\nВопросы \nРасскажи о себе о предыдущем опыте?\nКак решали проблему  внедрения FSD с учетом того что проект долго разрабатывается и есть старички как обучать их и тд с какими проблемами сталкивался\nПодробно идет по резюме по флоу работы командам и тд\nuse strict что такое зачем нужен как использовали\nMap Set Object примеры из жизни\nnull undefined\nreflow vs repaint в чем разница\nкак на странице вызвать reflow\nв двух словах как происходит построение страницы какие фазы есть\nкакие проблемы могут быть на странице при частом reflow\nposition absolute vs relative\nany vs unknown\nкак unknown превращается в какой то тип\nпримеры ситуации где применил any а где unknown\nкак бы решал если дали на рефакторинг компоненты с кучей any\nдженерики использовал  или нет\nпримеры использования дженериков из реальной работы\nв каких случаях вызывается перерисовка родителя\nкак в хуках можно вызвать forceUpdate\nuseSyncExternalStore() зачем нужен \nпочему нельзя объявлять хуки в условиях\nдали на рефакторинг старый код пользователи говорят все тормозит дергается тебе дали задачу решить как будешь действовать\nкак будешь собирать метрики производительности\nмемоизация что такое и зачем нужна в реакте\nчем отличается от кэширования\nuseMemo где использовал\nwebWorker работал или нет\nчто такое микро макротаски\nесли есть бесконечная очередь микротасок заблокирует? а если сеттаймауты?\nRAF requestAnimationFrame что это использовал ли\nпример использования RAF \n\nзадача \n\nРеализовать функцию debounce\n\nfunction debounce = function(fn, t) {\n     let timeout;\n     \n     return function(...args) {\n  clearTimeout(timeout)\n\n        timeout = setTimeout(() => {\n  fn(...args)\n}, t)\n\n}  \n}"
      },
      {
        "timestamp": "2025-06-23 08:31:50",
        "content": "2025-06-23 08:31:50\n Гладких Александр -> 2071074234:\nКомпания Лига Цифровой Экономики 1 этап\nВакансия: написала HR\n\nВопросы \nРасскажи о себе о предыдущем опыте?\nКак происходило взаимодействие с другими фронтами?\nКак ревью проходило? \nЧто использовал в качестве сборщика?\nПриходилось ли конфигурировать?\nБыл ли опыт с SSR? \n\nЗадачи\n\nconsole.log(1)\nsetTimeout(() => console.log(2), 0)\nconsole.log(3)\n//======================\nconst arr = [1, 2, 3]\narr[10] = 10\nconsole.log(arr.length)\n// ==============...",
        "full_content": "2025-06-23 08:31:50\n Гладких Александр -> 2071074234:\nКомпания Лига Цифровой Экономики 1 этап\nВакансия: написала HR\n\nВопросы \nРасскажи о себе о предыдущем опыте?\nКак происходило взаимодействие с другими фронтами?\nКак ревью проходило? \nЧто использовал в качестве сборщика?\nПриходилось ли конфигурировать?\nБыл ли опыт с SSR? \n\nЗадачи\n\nconsole.log(1)\nsetTimeout(() => console.log(2), 0)\nconsole.log(3)\n//======================\nconst arr = [1, 2, 3]\narr[10] = 10\nconsole.log(arr.length)\n// ==========================\nconst obj1 = { a: 1 }\nconst obj2 = obj1\nobj2.a = 2\nconsole.log(obj1.a)\n// ================\nconst obj = {\n    value: 42,\n    getValue: function(){\n        return this.value\n    }\n}\n\n// ==========================\nfunction memoize(fn) {\n    const cache = new Map()\n    return function (...args){\n        const key = args.join(',')\n        if(cache.has(key)) {\n            return cache.get(key)\n        }\n\n        const result = fn(...args)\n        cache.set(key, result)\n        return result\n    }\n}\n\nплюсы минусы и зачем нужна мемоизации какие подводные камни?\n// ======================================================\n// реализовать отсортирванный список городов пример \n// А \n// Архангельск\n// Астрахань \nесть массив городов cities[{id: 1, name: 'Aрхангельск'}, ...]\n\n/**\n * Функция для сортировки и группировки городов по первой букве названия,\n * основанная на вашем коде.\n * @param {Array<Object>} arr - Массив объектов городов.\n * @returns {Object} Объект, где ключи - это первые буквы, а значения - отсортированные массивы названий городов.\n */\nfunction sortedCities(arr) {\n  const map = {}; // Создаем объект для хранения сгруппированных городов\n\n  // 1. Сначала сортируем сам массив городов по названию\n  // Это важно, чтобы города внутри каждой группы были отсортированы\n  const sortedInputCities = [...arr].sort((a, b) => {\n    return a.name.localeCompare(b.name, 'ru', { sensitivity: 'base' });\n  });\n\n  // 2. Группируем отсортированные города\n  for (const city of sortedInputCities) {\n    const firstChar = city.name[0].toUpperCase(); // Берем первую букву и приводим к верхнему регистру\n\n    // Если для этой буквы еще нет массива в map, создаем его\n    if (!map[firstChar]) {\n      map[firstChar] = [];\n    }\n    // Добавляем название города в соответствующий массив\n    map[firstChar].push(city); // Добавляем объект города целиком, а не только имя\n  }\n\n  // 3. (Необязательно, но полезно): Если нужно сортировать группы по буквам,\n  // это можно сделать при рендере, либо здесь.\n  // Например, чтобы убедиться, что 'А' идет перед 'Б'.\n  // Наша map уже будет иметь ключи в порядке добавления первых городов,\n  // но Object.keys().sort() при рендере решит эту проблему.\n\n  return map;\n}\n\n// Проверяем работу функции в консоли\nconsole.log(\"Сгруппированные города (в консоли):\", sortedCities(cities));\n\n\n// React компонент App\nconst App = () => {\n  // Вызываем нашу функцию для получения сгруппированных и отсортированных данных\n  const groupedCitiesData = sortedCities(cities);\n\n  // Получаем отсортированные ключи (буквы) для рендеринга\n  // Это важно, чтобы буквы выводились в алфавитном порядке\n  const sortedKeys = Object.keys(groupedCitiesData).sort();\n\n  return (\n    <div>\n      <h1>Список городов</h1>\n      {/* Итерируем по отсортированным буквам */}\n      {sortedKeys.map(letter => (\n        <div key={letter}>\n          <h2>{letter}:</h2>\n          <ul>\n            {/* Итерируем по городам внутри каждой группы */}\n            {groupedCitiesData[letter].map(city => (\n              <li key={city.id}> {/* Важно использовать уникальный ключ */}\n                {city.name} (ID: {city.id})\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Рендерим компонент App в DOM-элемент\nReactDOM.render(<App />, document.getElementById(\"root\"));"
      },
      {
        "timestamp": "2025-02-01 09:06:45",
        "content": "2025-02-01 09:06:45\n Дмитрий Юрьев -> 2071074234:\nВакансия: Лига цифровой экономики (проект Сбербанк)\nНаправление деятельности - Глобальные рынки. Система сопровождения сделок",
        "full_content": "2025-02-01 09:06:45\n Дмитрий Юрьев -> 2071074234:\nВакансия: Лига цифровой экономики (проект Сбербанк)\nНаправление деятельности - Глобальные рынки. Система сопровождения сделок"
      },
      {
        "timestamp": "2024-10-09 11:32:18",
        "content": "2024-10-09 11:32:18\n Михаил -> 2071074234:\nЛига Цифровой Экономики (на проект в Сбер)\nвакансия hh.ru/vacancy/107380873\nзп 200к",
        "full_content": "2024-10-09 11:32:18\n Михаил -> 2071074234:\nЛига Цифровой Экономики (на проект в Сбер)\nвакансия hh.ru/vacancy/107380873\nзп 200к"
      },
      {
        "timestamp": "2024-09-04 16:50:10",
        "content": "2024-09-04 16:50:10\n Max -> 2071074234:\nЛига цифровой экономики\nвакансия: https://hh.ru/vacancy/106046323?from=share_ios\nЗП: 230-250 \nВопросы:\n1) Как работали?\n2) Как были настроены процессы? Опиши детально\n3) Как работал ci/cd?\n4) Что использовали в качестве контролера версий? (Gitlab)\n5) Описать детально процесс выкатки фичи\n6) Как использовали nginx? Использовали ли?\n7) Расскажи про реакт, как работает, в чем плюсы и минусы?\n8) Что будет если добавить key не в map, а просто? Что будет происхо...",
        "full_content": "2024-09-04 16:50:10\n Max -> 2071074234:\nЛига цифровой экономики\nвакансия: https://hh.ru/vacancy/106046323?from=share_ios\nЗП: 230-250 \nВопросы:\n1) Как работали?\n2) Как были настроены процессы? Опиши детально\n3) Как работал ci/cd?\n4) Что использовали в качестве контролера версий? (Gitlab)\n5) Описать детально процесс выкатки фичи\n6) Как использовали nginx? Использовали ли?\n7) Расскажи про реакт, как работает, в чем плюсы и минусы?\n8) Что будет если добавить key не в map, а просто? Что будет происходить? Ответ- никак не повлияет (очень странный вопрос)\n9) Расскажи про алгоритмы, уровни сложности алгоритмов,\n10 Задача: просто рассказать рассуждения как бы искал рандомное число по массиву из 100 элементов (задача на знание алгоритмов)\n11) Как реакт помогает предотварить xss атаки?\n12) Что такое CORS/ расскажи про options, что такое CSP\n13) Какие патерны использовали на проекте? (FSD и так далее)\n14) Какие лучшие практики построения приложения? Какие применяли на работе?\n\nОЧЕНЬ  МНОГО ВОПРОСОВ ПРО  ОПЫТ"
      },
      {
        "timestamp": "2024-06-05 11:37:38",
        "content": "2024-06-05 11:37:38\n Tonidevs -> 2071074234:\n— Лига цифровой экономики техсобес\n— Ссылка: \n— ЗП: назвал от 260к+\n— Задачи: в опыт копает, теория, чтение кода, лайвкода - не было\n— Успех: ❓\n— Вопросы: все отсюда https://t.me/c/2071074234/489/16627\n— Задачи(вот что успел запомнить):\n-  дана строка \"some string dsadasd\" - пример строки(рандом), нужно развернуть каждое слово\n\nfunction reverseWords(str) {\n  return str.split(' ').map(word => word.split('').reverse().join('')).join(' ');\n}\n- задача на ...",
        "full_content": "2024-06-05 11:37:38\n Tonidevs -> 2071074234:\n— Лига цифровой экономики техсобес\n— Ссылка: \n— ЗП: назвал от 260к+\n— Задачи: в опыт копает, теория, чтение кода, лайвкода - не было\n— Успех: ❓\n— Вопросы: все отсюда https://t.me/c/2071074234/489/16627\n— Задачи(вот что успел запомнить):\n-  дана строка \"some string dsadasd\" - пример строки(рандом), нужно развернуть каждое слово\n\nfunction reverseWords(str) {\n  return str.split(' ').map(word => word.split('').reverse().join('')).join(' ');\n}\n- задача на событийный цикл\n\n setTimeout(function timeout() {\n    console.log('Таймаут');\n}, 0);\n\nlet p = new Promise(function(resolve, reject) {\n    console.log('Создание промиса');\n    resolve();\n});\n\np.then(function(){\n    console.log('Обработка промиса');\n});\n\nconsole.log('Конец скрипта');\n\n// Создание промиса Конец скрипта Обработка промиса Таймаут\n- задача на замыкание \nlet globalVar = \"Endy\";\nlet outerVar = 'Dwight';\n\nfunction outerFunc(outerParam) {\n    function innerFunc(innerParam) {\n        console.log(globalVar, outerParam, innerParam);\n    }\n    return innerFunc;\n}\n\nconst x = outerFunc(outerVar);\nouterVar = 'Kevin';\nglobalVar = \"Michael\";\nx(\"Stanley\");"
      },
      {
        "timestamp": "2024-06-03 09:16:19",
        "content": "2024-06-03 09:16:19\n Artur -> 2071074234:\nКомпания: Лига Цифровой Экономики, собес в проект от Сбера\nСсылка на вакансию: hr сама написала в тг\nСсылка на собес: отсутствует (забыл включить обс)\nЗП: до 230к\nУровень: middle\nУспех собеса: ?\n\nЗадачи:\n\n1) написать промис\n\n2) реализовать промис в async await\n\nрешение:\n\nasync function handlePromise() {\n  try {\n    const result = await promise;\n    console.log(result);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nhandlePromise();\n\n\n3) реализовать...",
        "full_content": "2024-06-03 09:16:19\n Artur -> 2071074234:\nКомпания: Лига Цифровой Экономики, собес в проект от Сбера\nСсылка на вакансию: hr сама написала в тг\nСсылка на собес: отсутствует (забыл включить обс)\nЗП: до 230к\nУровень: middle\nУспех собеса: ?\n\nЗадачи:\n\n1) написать промис\n\n2) реализовать промис в async await\n\nрешение:\n\nasync function handlePromise() {\n  try {\n    const result = await promise;\n    console.log(result);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nhandlePromise();\n\n\n3) реализовать функцию \n\nfunction withTimeOut(promise, timeout){\n   ...\n}\n\nрешение:\n\nfunction withTimeout(promise, timeout) {\n  return new Promise((resolve, reject) => {\n    const timer = setTimeout(() => {\n      reject(new Error('Promise timed out'));\n    }, timeout);\n\n    promise.then(\n      (value) => {\n        clearTimeout(timer);\n        resolve(value);\n      },\n      (error) => {\n        clearTimeout(timer);\n        reject(error);\n      }\n    );\n  });\n}\n\n4) реализовать компонент, в котором два поля - рубли и доллары. Реализовать логику конвертирования долларов в рубли и наоборот\n\nрешение:\n\nimport React, { useState } from 'react';\n\nconst CurrencyConverter = () => {\n    const [rubles, setRubles] = useState('');\n    const [dollars, setDollars] = useState('');\n    const exchangeRate = 90;\n\n    const handleRublesChange = (e) => {\n        const rublesValue = e.target.value;\n        setRubles(rublesValue);\n        if (rublesValue !== '') {\n            setDollars((rublesValue / exchangeRate).toFixed(2));\n        } else {\n            setDollars('');\n        }\n    };\n\n    const handleDollarsChange = (e) => {\n        const dollarsValue = e.target.value;\n        setDollars(dollarsValue);\n        if (dollarsValue !== '') {\n            setRubles((dollarsValue * exchangeRate).toFixed(2));\n        } else {\n            setRubles('');\n        }\n    };\n\n    return (\n        <div>\n            <div>\n                <label>\n                    Рубли:\n                    <input type=\"number\" value={rubles} onChange={handleRublesChange} />\n                </label>\n            </div>\n            <div>\n                <label>\n                    Доллары:\n                    <input type=\"number\" value={dollars} onChange={handleDollarsChange} />\n                </label>\n            </div>\n        </div>\n    );\n};\n\nexport default CurrencyConverter;\n\n\n5) дан массив со строками в которых есть и буквы и цифры. Нужно было перевернуть массив, перевернуть каждый элемент, собрать строку только с буквами, и только с цифрами\n\nрешение:\n\nconst data = ['f', '53', '5e62d95', '1c413ba'];\n\n// Перевернуть весь массив\nconst reversedArray = [...data].reverse();\n\n// Перевернуть каждый элемент в массиве\nconst reversedElementsArray = reversedArray.map(item => item.split('').reverse().join(''));\n\n// Собрать строку только с буквами\nconst lettersOnly = reversedElementsArray.join('').split('').filter(char => isNaN(char)).join('');\n\n// Собрать строку только с цифрами\nconst digitsOnly = reversedElements.join('').replace(/[^0-9]/g, '');"
      },
      {
        "timestamp": "2024-04-25 16:57:37",
        "content": "2024-04-25 16:57:37\n Санжар -> 2071074234:\n- Название компании: Лига цифровой экономики [Тех. скрин]\n- Ссылка на вакансию: https://ufa.hh.ru/vacancy/91278944\n- ЗП: запросил 330к-380к\n- Задачи: теория, чтение кода, одна простая таска на лайвкод\n- Успех: ✅\n\nВопросы:\n- Что такое async await\n- Что такое замыкание\n- Как оптимизировать приложение (метрики FCP LCP CLS и т.д.)\n- Какие инструменты для анализа используешь (lighthouse, perfomance, network и т.д.)\n- Что такое реактивность данных, как она ус...",
        "full_content": "2024-04-25 16:57:37\n Санжар -> 2071074234:\n- Название компании: Лига цифровой экономики [Тех. скрин]\n- Ссылка на вакансию: https://ufa.hh.ru/vacancy/91278944\n- ЗП: запросил 330к-380к\n- Задачи: теория, чтение кода, одна простая таска на лайвкод\n- Успех: ✅\n\nВопросы:\n- Что такое async await\n- Что такое замыкание\n- Как оптимизировать приложение (метрики FCP LCP CLS и т.д.)\n- Какие инструменты для анализа используешь (lighthouse, perfomance, network и т.д.)\n- Что такое реактивность данных, как она устроена во vue3\n- Что такое виртуальный DOM\n- Какие есть хранилища в браузере, в чем их отличия, предназначения\n- Что такое и для чего нужны WebRTC, WebSocket\n- Для чего нужен typescript\n\nЗадачи (код забыл сохранить):\n- дана строка \"some string\", нужно развернуть каждое слово (написать код)\n- задача на контекст (сказать что будет выведено в консоли)\n- задача на событийный цикл (сказать что будет выведено в консоли)\n- задача на замыкание (сказать что будет выведено в консоли)"
      }
    ]
  },
  {
    "company": "MinervaSOFT",
    "count": 7,
    "records": [
      {
        "timestamp": "2025-04-21 09:06:39",
        "content": "2025-04-21 09:06:39\n Nikita -> 2071074234:\nКомпания: MinervaSoft (техсобес)\nВакансия: Hr написал напрямую\nЗп: 200-250к\n\nВопросы: тот же файл что здесь Формат - идёте по скринам, рассказываешь, что делает код и что бы поправил в нём. Без теории, без лайфкодинга",
        "full_content": "2025-04-21 09:06:39\n Nikita -> 2071074234:\nКомпания: MinervaSoft (техсобес)\nВакансия: Hr написал напрямую\nЗп: 200-250к\n\nВопросы: тот же файл что здесь Формат - идёте по скринам, рассказываешь, что делает код и что бы поправил в нём. Без теории, без лайфкодинга"
      },
      {
        "timestamp": "2025-04-07 07:46:31",
        "content": "2025-04-07 07:46:31\n Farid -> 2071074234:\nКомпания: Minervasoft\nВакансия: Написал hr в тг\nЗП: предлагают от 170к\n\nВопросы: те же что и тут https://t.me/c/2071074234/489/89743, кроме последнего (прикрепил)\n\n\nБез лайвкодинга",
        "full_content": "2025-04-07 07:46:31\n Farid -> 2071074234:\nКомпания: Minervasoft\nВакансия: Написал hr в тг\nЗП: предлагают от 170к\n\nВопросы: те же что и тут https://t.me/c/2071074234/489/89743, кроме последнего (прикрепил)\n\n\nБез лайвкодинга"
      },
      {
        "timestamp": "2024-11-24 10:57:51",
        "content": "2024-11-24 10:57:51\n George Nizamutdinow -> 2071074234:\nКомпания: Minervasoft\nВакания: https://spb.hh.ru/vacancy/109544382\nЗП: от 170 000 до 190 000 ₽ на руки\n\nВопросы(hr-скрининг): \n1) Рассказать про опыт\n2) Какой результат у выражения 2 == '2' и 2 === '2'?\n3) Какая разница между display: none и visibility: hidden?\n4) Чем отличается useEffect без указания массива зависимостей от useEffect с пуcтым массивом зависимостей?\n\nВопросы(тех.часть): вопросы из документа, отрефакторить и расскзать как ра...",
        "full_content": "2024-11-24 10:57:51\n George Nizamutdinow -> 2071074234:\nКомпания: Minervasoft\nВакания: https://spb.hh.ru/vacancy/109544382\nЗП: от 170 000 до 190 000 ₽ на руки\n\nВопросы(hr-скрининг): \n1) Рассказать про опыт\n2) Какой результат у выражения 2 == '2' и 2 === '2'?\n3) Какая разница между display: none и visibility: hidden?\n4) Чем отличается useEffect без указания массива зависимостей от useEffect с пуcтым массивом зависимостей?\n\nВопросы(тех.часть): вопросы из документа, отрефакторить и расскзать как работает код"
      },
      {
        "timestamp": "2024-10-22 11:05:37",
        "content": "2024-10-22 11:05:37\n Artyom Sozykin -> 2071074234:\nКомпания: Minervasoft (поведенческое интервью)\nВакансия:  https://spb.hh.ru/vacancy/107775068?hhtmFrom=employer_vacancies \nЗП: 190к\nВопросы:\n       1. Какой твой продукт мечты, над каким бы хотел работать\n 2. С чем точно не хочется работать?\n 3. Спросили про то, как попал во фронтенд, почем заинтересовало\n 4. Какие ценности в компании для тебя важны?\n 5. Как ты оцениваешь время выполнение задач?\n 6. Что ты сделаешь, если есть беспокойство, что н...",
        "full_content": "2024-10-22 11:05:37\n Artyom Sozykin -> 2071074234:\nКомпания: Minervasoft (поведенческое интервью)\nВакансия:  https://spb.hh.ru/vacancy/107775068?hhtmFrom=employer_vacancies \nЗП: 190к\nВопросы:\n       1. Какой твой продукт мечты, над каким бы хотел работать\n 2. С чем точно не хочется работать?\n 3. Спросили про то, как попал во фронтенд, почем заинтересовало\n 4. Какие ценности в компании для тебя важны?\n 5. Как ты оцениваешь время выполнение задач?\n 6. Что ты сделаешь, если есть беспокойство, что не успеешь до конца спринта в пятницу допилить фичу, сообщишь в четверг на дейлики или только в пятницу?\n 7. По какому принципу вы планируете задачи в спринт\n 8. Когда оканчивается твоя зона ответственности над задачей?\n 9. Что ты делаешь когда отправил задачу на тестирование, берешь сразу новую или ждешь тестирования старой?\n 10. А если берешь новую задачу, а старую возвращают на доработку, то переключаешься на старую?\n 11. А в целом в компании много задач над которыми работают одновременно несколько человек? \n\nФидбек до среды 23.10"
      },
      {
        "timestamp": "2024-10-20 09:47:07",
        "content": "2024-10-20 09:47:07\n Artyom Sozykin -> 2071074234:\nКомпания: Minervasoft\nВакансия: https://hh.ru/vacancy/107775068?from=share_ios\nЗП: 190к\nВопросы:\n1) Вопрос про ссылочные типы\n2) Как отцентровать блок в css\n3) Чем отличаются стрелочные функции от FD\n4) Порталы в React\n5) Рассказать про архитектуру flux (redux)\n\nПригласили на финальный этап ✅",
        "full_content": "2024-10-20 09:47:07\n Artyom Sozykin -> 2071074234:\nКомпания: Minervasoft\nВакансия: https://hh.ru/vacancy/107775068?from=share_ios\nЗП: 190к\nВопросы:\n1) Вопрос про ссылочные типы\n2) Как отцентровать блок в css\n3) Чем отличаются стрелочные функции от FD\n4) Порталы в React\n5) Рассказать про архитектуру flux (redux)\n\nПригласили на финальный этап ✅"
      },
      {
        "timestamp": "2024-10-01 21:34:55",
        "content": "2024-10-01 21:34:55\n Katerina -> 2071074234:\nMinervasoft\nЗп: 170-190к\nВопросы: теория и большая часть за опыт\nВ целом все также - https://t.me/c/2071074234/489/12395\n\nРезультат: должны позвать на следующий этап, пока результата нет",
        "full_content": "2024-10-01 21:34:55\n Katerina -> 2071074234:\nMinervasoft\nЗп: 170-190к\nВопросы: теория и большая часть за опыт\nВ целом все также - https://t.me/c/2071074234/489/12395\n\nРезультат: должны позвать на следующий этап, пока результата нет"
      },
      {
        "timestamp": "2024-03-13 13:52:53",
        "content": "2024-03-13 13:52:53\n Nikita -> 2071074234:\n—MinervaSoft\n—Успех: дали оффер(180к, больше не дают)\n—Зп: Назвал от 180\n—Запись\n—Задачи: Теория",
        "full_content": "2024-03-13 13:52:53\n Nikita -> 2071074234:\n—MinervaSoft\n—Успех: дали оффер(180к, больше не дают)\n—Зп: Назвал от 180\n—Запись\n—Задачи: Теория"
      }
    ]
  },
  {
    "company": "Pyrus",
    "count": 7,
    "records": [
      {
        "timestamp": "2025-07-03 14:55:48",
        "content": "2025-07-03 14:55:48\n Daniil Daniil -> 2071074234:\nКомпания: Pyrus\nВОпросы:\n1. requestAnimationFrame что это, зачем и когда выполняется?\n2. ПОчему для анимаций используется requestAnimationFrame а не макротаски\n3. Сложность для Set?\nНо изначально даются разные и задачки по которым потом он задает разные вопросы\n\nЗадача 1. \nЧто будет в консоли после выполнения кода? \nvar x = 3; \nvar obj = { \n x: 2, \n foo: { \n   x: 1, \n   bar: function () { \n     сonsole.log(this.x); \n   }, \n   baz: function () { \n...",
        "full_content": "2025-07-03 14:55:48\n Daniil Daniil -> 2071074234:\nКомпания: Pyrus\nВОпросы:\n1. requestAnimationFrame что это, зачем и когда выполняется?\n2. ПОчему для анимаций используется requestAnimationFrame а не макротаски\n3. Сложность для Set?\nНо изначально даются разные и задачки по которым потом он задает разные вопросы\n\nЗадача 1. \nЧто будет в консоли после выполнения кода? \nvar x = 3; \nvar obj = { \n x: 2, \n foo: { \n   x: 1, \n   bar: function () { \n     сonsole.log(this.x); \n   }, \n   baz: function () { \n     setTimеout(function () { \n       consоle.log(this.x); \n     }); \n   } \n } \n}; \n\nobj.foo.bar(); //1\nvar func = obj.fоo.bar; \nfunc(); //3\nobj.foo.baz(); //4\nx = 4;\n\n\nЗадача 2. \nНаписать два CSS-правила, которые для заданной (слева) разметки обеспечат заданное (справа) отображение\n\n<div class=\"foo\">Some text</div>\n<span class=\"foo\">Some text</span>\n<div id=\"bar\">Some text</div>\n<div class=\"baz\">\n   <div>Some</div>\n   <div>text</div>\n</div>\nSome text\nSome text\nSome text\nSome text\n\n\n\nРешение: div.foo, #bar { \n      font-weight: bold;\n}\n\n\n\n\nЗадача 3. \nДан массив строк (не меньше 3 элементов), в котором одна из строк отличается по составу  входящих в неё букв от остальных строк в массиве. Порядок, количество, регистр букв и пробелы роли не играют. Реализовать метод, который принимает на вход такой массив строк, и возвращает  отличающуюся строку. \n\nassert( findUniq(['a', 'a Aa', 'ab a', 'AA a']) === 'ab a' );\nassert( findUniq(['ab', 'a Aa', 'ab a', 'bAA a']) === 'a Aa' );\nassert( findUniq(['aBca', 'fO o', 'ac b', 'bac', 'bca', 'cabaccBA', ' Ccba']) === 'fO o' );\n\nfunction findUniq(strings) {\nconst normalize = str => {\n const lower = str.toLowerCase()\n const lettersOnly = []\n for (let char of lower) {\n  if(char !== ‘ ‘) lettersOnly.push(char)\n}\n const unique = [...new Set(lettersOnly)]\nreturn unique.sort().join(‘’)\n}\nconst mapped = strings.map(normalize)\n\nconst counts = {}\nfor (let key of mapped) {\ncounts[key] = (counts[key] || 0) + 1\n}\n\nconst uniqKey = Object.keys(counts).find(key => counts[key] ===1)\nconst index = mapped.indexOf(uniqKey)\nreturn strhings[index]\n}\n\n\n\nЗадача 4. Произвести рефакторинг, исправив ошибки \nfor (var i = 0; i < 10; i++)\n    $('#container').find('#item' + i)\n       .click(function () {\n           $(this).css('background-color', 'red');\n           $(this).css('width', $(this).css('width') + 10);\n           alert('First click on item ' + i);\n           $(this).click(function () {\n               $(this).css('background-color', '');\n               $(this).css('width', $(this).css('width') - 10);\n               alert('Second click on item ' + i);\n               $(this).off('click');\n           })\n       })\n—------------------\n//тут я начал писать, но он сказал можно не дописывать и  устно рассказал\nfor (let i = 0; i < 10; i++) {\n  const $el =  $('#container').find('#item' + i)\n       $el.one(‘click’, function() {\nconst"
      },
      {
        "timestamp": "2025-05-18 14:44:37",
        "content": "2025-05-18 14:44:37\n Timur -> 2071074234:\nКомпания: Pyrus. тех собес\nЗп: 250-280к\nВакансия\n\nдали задачи в документе на 30 минут, после на собес подключились лид беков и фронт, спрашивал в основном бек\n\n1. Очень подробно про jwt:\n- что такое, зачем нужен, из чего состоит\n- как происходит аутентификация с jwt \n- почему безопасен?(хотел услышать про цифровую подпись)\n- где храним рефреш и почему\n- как можно защитить от кражи(httpOnly, sameSite и тд)\n- если у пользователя два access токена, то может...",
        "full_content": "2025-05-18 14:44:37\n Timur -> 2071074234:\nКомпания: Pyrus. тех собес\nЗп: 250-280к\nВакансия\n\nдали задачи в документе на 30 минут, после на собес подключились лид беков и фронт, спрашивал в основном бек\n\n1. Очень подробно про jwt:\n- что такое, зачем нужен, из чего состоит\n- как происходит аутентификация с jwt \n- почему безопасен?(хотел услышать про цифровую подпись)\n- где храним рефреш и почему\n- как можно защитить от кражи(httpOnly, sameSite и тд)\n- если у пользователя два access токена, то может ли быть и два рефреша?\n\n\nЗадача 1:\nпросили объяснить что и почему выводится, спросили:\n1. что такое область видимости \n2. что такое лексическое окружение\n3. почему в нестрогом режиме значения отличаются\n\nЗадача 2.\nспросили, как еще можно отобразить текст в одну строку(inline-block)\n.baz div {\n  display: inline-block;\n}\nтак же спросили отличие div от span\n\nЗадача 3.\nспрашивали за каждую строчку и просили оценить алгоритмическую сложность блока \n    for (let i = 0; i < normalized.length; i++) {\n        if (normalized.indexOf(normalized[i]) === normalized.lastIndexOf(normalized[i])) {\n            return strings[i];\n        }\n    }\nи всей функции\n\nЗадача 4.\nзадача не рассчитана на то, чтобы решить. Сказали, что хотели посмотреть, как работаю с кодом, который никогда не видел\nтк решил ее, просили объяснить, что код вообще делает и как рефакторил\n\nУспех собеса: ❌"
      },
      {
        "timestamp": "2025-05-08 07:56:03",
        "content": "2025-05-08 07:56:03\n Андрей -> 2071074234:\nКомпания Pyrus\nhttps://hh.ru/vacancy/118186405?hhtmFrom=negotiation_list\nЗП 250 тыс. руб.\nЗадачи:\n1) Что выведет:\nvar x = 3; \nvar obj = { \n x: 2, \n foo: { \n   x: 1, \n   bar: function () { \n     console.log(this.x); \n   }, \n   baz: function () { \n     setTimeout(function () { \n       console.log(this.x); \n     }); \n   } \n } \n}; \n\nobj.foo.bar(); // 1\nvar func = obj.foo.bar; // undefined (в нестрогом режиме 3) \nfunc(); \nobj.foo.baz(); // undefined (в нестр...",
        "full_content": "2025-05-08 07:56:03\n Андрей -> 2071074234:\nКомпания Pyrus\nhttps://hh.ru/vacancy/118186405?hhtmFrom=negotiation_list\nЗП 250 тыс. руб.\nЗадачи:\n1) Что выведет:\nvar x = 3; \nvar obj = { \n x: 2, \n foo: { \n   x: 1, \n   bar: function () { \n     console.log(this.x); \n   }, \n   baz: function () { \n     setTimeout(function () { \n       console.log(this.x); \n     }); \n   } \n } \n}; \n\nobj.foo.bar(); // 1\nvar func = obj.foo.bar; // undefined (в нестрогом режиме 3) \nfunc(); \nobj.foo.baz(); // undefined (в нестрогом режиме 4)\nx = 4;\n2) Написать стили для элементов, чтобы первая и третья фразы были жирными. Также спросит как расположить элементы внутри div.baz в одну строку:\n<div class=\"foo\">Some text</div>\n<span class=\"foo\">Some text</span>\n<div id=\"bar\">Some text</div>\n<div class=\"baz\">\n   <div>Some</div>\n   <div>text</div>\n</div>\ndiv.foo {\n  font-weight: bold;\n}\n\n#bar {\n  font-weight: bold;\n}\n3) Дан массив строк (не меньше 3 элементов), в котором одна из строк отличается по составу входящих в нее букв. Порядок, количество, регистр букв и пробелы не имеют значения. Вернуть отличающуюся по составу строку:\nconsole.assert(findUniq(['a', 'a Aa', 'ab a', 'AA a']) === 'ab a');\nconsole.assert(findUniq(['ab', 'a Aa', 'ab a', 'bAA a']) === 'a Aa');\nconsole.assert(findUniq(['aBca', 'fO o', 'ac b', 'bac', 'bca', 'cabaccBA', ' Ccba']) === 'fO o');\n\nfunction findUniq(arr) {\n  const compress = (str) => {\n    return Array.from(new Set(str\n      .split('')\n      .filter(el => (el.toLowerCase() !== el.toUpperCase()))\n      .map(el => el.toLowerCase())\n      .sort())).join('')\n      \n  }\n  \n  const compressedMap = arr.map(el => ({\n    original: el,\n    compressed: compress(el)\n  }))\n  \n  const count = {};\n  \n  for (let wordObj of compressedMap) {\n    if (!(wordObj.compressed in count)) count[wordObj.compressed] = 0;\n    count[wordObj.compressed] += 1;\n  }\n  \n  console.log(compressedMap)\n  \n  return compressedMap.find(wordObj => count[wordObj.compressed] === 1).original;\n}\nТакже по этой задаче попросит написать регулярку для поиска и удаления пробелов методом replace.\n\n4) Отрефакторить код на JQuery:\n// исходный\nfor (var i = 0; i < 10; i++)\n    $('#container').find('#item' + i)\n        .click(function () {\n            $(this).css('background-color', 'red');\n            $(this).css('width', $(this).css('width') + 10);\n            alert('First click on item ' + i);\n            $(this).click(function () {\n                $(this).css('background-color', '');\n                $(this).css('width', $(this).css('width') - 10);\n                alert('Second click on item ' + i);\n                $(this).off('click');\n            })\n        })\n\n// отрефакторенный\nfor (let i = 0; i < 10; i++) {\n    $('#container').find('#item' + i).click(function () {\n        const $this = $(this);\n        const originalWidth = parseInt($this.css('width'), 10);\n\n        if ($this.data('clicked')) {\n            $this.css('background-color', '');\n            $this.css('width', originalWidth - 10);\n            alert('Second click on item ' + i);\n            $this.data('clicked', false);\n        } else {\n            $this.css('background-color', 'red');\n            $this.css('width', originalWidth + 10);\n            alert('First click on item ' + i);\n            $this.data('clicked', true);\n        }\n    });\n}\nВопросы:\n1) Что такое JWT\n2) Где хранится JWT\n3) Зачем два токена, почему нельзя обойтись одним\n4) Почему access токен не храним в cookie\n5) Оценить сложность алгоритма задачи номер 3\nВ целом, очень глубоко копает в JWT, просит рассказывать особенности реализации на бэкенде. Также очень глубоко копает в алгоритмы, сложность алгоритмов\n\nВ основном собес проводит бэкендер, фронтовых вопросов вообще практически не было)\n\nУспех собеса: ✅"
      },
      {
        "timestamp": "2024-12-30 18:47:39",
        "content": "2024-12-30 18:47:39\n Damir -> 2071074234:\nКомпания: Pyrus\nВакансия: https://pyrus.com/ru/jobs/crm-frontend-performance-developer\nЗП: 250k\n\nСобес проводил лид бэка почему-то, вопросы странные как по мне, как-будто и не хотели кого-то брать.\n\nВопросы:\n- расскажи о себе, о компании (прогуглит компанию в сбисе)\n- самая интересная задача\n- сколько онлайна\n- сколько сотрудников\n- про команду вопросы\n\nТех вопросы: \n1) Есть отдельные приложения для десктопа и для мобилки, как отображать в зависимости от...",
        "full_content": "2024-12-30 18:47:39\n Damir -> 2071074234:\nКомпания: Pyrus\nВакансия: https://pyrus.com/ru/jobs/crm-frontend-performance-developer\nЗП: 250k\n\nСобес проводил лид бэка почему-то, вопросы странные как по мне, как-будто и не хотели кого-то брать.\n\nВопросы:\n- расскажи о себе, о компании (прогуглит компанию в сбисе)\n- самая интересная задача\n- сколько онлайна\n- сколько сотрудников\n- про команду вопросы\n\nТех вопросы: \n1) Есть отдельные приложения для десктопа и для мобилки, как отображать в зависимости от устройства пользователя? Зачем так вообще делать, если можно сделать адаптив? \n2) Что такое jwt токен? Из чего состоит? \n3) Где подпись jwt токена хранится? \n4) Зачем два токена (access, refresh), почему не 1?\n5) Про xss было, способы защиты. - хочет услышать про санитайзеры - dom purify\n6) Как выкинуть со всех остальных устройств, если пользователь зашел с другого устройства? \n7) Как отобразить в реальном времени кол-во пользователей онлайн?  \n8 ) Как посчитать максимальное кол-во онлайна в каком-то определенном промежутке времени? У юзеров есть 2 поля время логина, и время логаута. По входным данным и по остальному никакой инфы он не говорил."
      },
      {
        "timestamp": "2024-11-24 11:28:16",
        "content": "2024-11-24 11:28:16\n George Nizamutdinow -> 2071074234:\nКомпания: Pyrus\nВакания: https://hh.ru/vacancy/109729138\nЗП: не указана (озвучил от 240000р на руки)\n\nВопросы(hr-скрининг): \n1) Что такое алгоритмическая сложность?\n2) Какая сложность у быстрой сортировки?\n3) Почему сравнение объектов с одинаковым содержимым вернет false?\n4) Чем отличаются микротоки и макротаски?\n5) Что такое хеши и зачем они нужны? Можно ли по хешу вернуть значение из которого он был сделан\n6) Виды авторизации? Расскажи пр...",
        "full_content": "2024-11-24 11:28:16\n George Nizamutdinow -> 2071074234:\nКомпания: Pyrus\nВакания: https://hh.ru/vacancy/109729138\nЗП: не указана (озвучил от 240000р на руки)\n\nВопросы(hr-скрининг): \n1) Что такое алгоритмическая сложность?\n2) Какая сложность у быстрой сортировки?\n3) Почему сравнение объектов с одинаковым содержимым вернет false?\n4) Чем отличаются микротоки и макротаски?\n5) Что такое хеши и зачем они нужны? Можно ли по хешу вернуть значение из которого он был сделан\n6) Виды авторизации? Расскажи про JWT\n7) Как реализовать методы жизненного цикла на функциональных компонентах?\n8) Логическая задача: есть 8 монет, 1 фальшивая. Есть весы, которые дают понять равенство или неравенство в весе. Сколько минимум взвешиваний надо, чтоб вычислить фальшивую?"
      },
      {
        "timestamp": "2024-07-24 04:49:05",
        "content": "2024-07-24 04:49:05\n Ярослав Мудрый -> 2071074234:\n- Pyrus\n- ссылка: https://kazan.hh.ru/vacancy/102753364\n- зп: 250+\n- вопросы:\n\n1)Что делать, если бразуер не поддерживает методы которые ты используешь? (использовать полифилы)\n2)Где хранить данные, если нужно передавать инфу о товарах в корзине между вкладками? (localStorage, eventListener(’storage’)\n3)Как работает авторизация через внешние сервисы\n4)Куда хочешь развиваться?\n5)Всплытие/опускание событий, делигирование событий",
        "full_content": "2024-07-24 04:49:05\n Ярослав Мудрый -> 2071074234:\n- Pyrus\n- ссылка: https://kazan.hh.ru/vacancy/102753364\n- зп: 250+\n- вопросы:\n\n1)Что делать, если бразуер не поддерживает методы которые ты используешь? (использовать полифилы)\n2)Где хранить данные, если нужно передавать инфу о товарах в корзине между вкладками? (localStorage, eventListener(’storage’)\n3)Как работает авторизация через внешние сервисы\n4)Куда хочешь развиваться?\n5)Всплытие/опускание событий, делигирование событий"
      },
      {
        "timestamp": "2024-07-08 10:11:36",
        "content": "2024-07-08 10:11:36\n Ramis Mubarakov -> 2071074234:\n— Компания: Pyrus, hr-скрининг\n— Ссылка на вакансию: https://kazan.hh.ru/vacancy/102753364?hhtmFrom=chat\n— Озвученная мной ЗП: 250k+\n— Вопросы:\n1) Что такое алгоритмическая сложность?\n2) Какая сложность у быстрой сортировки?\n3) Почему сравнение объектов с одинаковым содержимым дает false?\n4) Чем отличаются микротаски и макротаски?\n5) Что такое хеши и  зачем они нужны?\n6) Виды авторизации? Расскажи про JWT\n7) Как реализовать методы жизненного ци...",
        "full_content": "2024-07-08 10:11:36\n Ramis Mubarakov -> 2071074234:\n— Компания: Pyrus, hr-скрининг\n— Ссылка на вакансию: https://kazan.hh.ru/vacancy/102753364?hhtmFrom=chat\n— Озвученная мной ЗП: 250k+\n— Вопросы:\n1) Что такое алгоритмическая сложность?\n2) Какая сложность у быстрой сортировки?\n3) Почему сравнение объектов с одинаковым содержимым дает false?\n4) Чем отличаются микротаски и макротаски?\n5) Что такое хеши и  зачем они нужны?\n6) Виды авторизации? Расскажи про JWT\n7) Как реализовать методы жизненного цикла в функциональном компоненте?\n8) Логическая задача на подумать: есть 8 монет, 1 фальшивая. Есть весы, которые дают понять равенство или неравенство в весе. Сколько минимум взвешиваний надо, чтоб вычислить фальшивую?"
      }
    ]
  },
  {
    "company": "Газпромбанк",
    "count": 7,
    "records": [
      {
        "timestamp": "2024-11-14 08:21:40",
        "content": "2024-11-14 08:21:40\n аыеъа -> 2071074234:\nIT_One -> Газпромбанк\nЗП: 250к+\nВакансия: https://www.it-one.ru/vacancies/8537527ed0e913887e186041477b5ce8/\nВопросы:\nСпросили только рассказать о себе\nconsole.log(typeof f1);\nconsole.log(typeof f2);\nconsole.log(typeof f3);\n\nfunction f1 () {}\nvar f2 = function () {};\nlet f3 = function () {};\n\n// undefined\n// undefined\n// error\n\nvar o= {};\nvar i = 0;\n\n(function () {\n            o.a = 'a';\n            i++;\n})();\nconsole.log(o, i);\n\n(function (o, i) {\n      ...",
        "full_content": "2024-11-14 08:21:40\n аыеъа -> 2071074234:\nIT_One -> Газпромбанк\nЗП: 250к+\nВакансия: https://www.it-one.ru/vacancies/8537527ed0e913887e186041477b5ce8/\nВопросы:\nСпросили только рассказать о себе\nconsole.log(typeof f1);\nconsole.log(typeof f2);\nconsole.log(typeof f3);\n\nfunction f1 () {}\nvar f2 = function () {};\nlet f3 = function () {};\n\n// undefined\n// undefined\n// error\n\nvar o= {};\nvar i = 0;\n\n(function () {\n            o.a = 'a';\n            i++;\n})();\nconsole.log(o, i);\n\n(function (o, i) {\n            o.b = 'b';\n            i++;\n})(o, i);\nconsole.log(o, i);\n\n// {}, 0 -> { a: 'a' }, 1\n// { b: 'b' }, 1 -> { a: 'a', b: 'b' }, 2 | {a: 'a', b: 'b' }, 1\n\nlet o = {};\nlet i = 0;\n\nconst f1 = () => {\n            o.a = 'a';\n            i++;\n}\nf1();\nconsole.log(o, i);\n\nconst f2 = (o, i) => {\n            o.b = 'b';\n            i++;\n}\nf2(o, i);\nconsole.log(o, i);\n// { a: 'a' }, 1\n// { a: 'a', b: 'b' }, 2 | { a: 'a', b: 'b' }, 1\n\nconst f1 = function () { console.log(this) }\nconst f2 = () => { console.log(this) }\n\nf1()\nf2()\n// window\n// window\n\nvar o = {}\nvar a = []\n\nconsole.warn(o == a)\nconsole.warn(o === a)\nconsole.warn(typeof o == typeof a)\nconsole.warn(typeof o === typeof a)\n\n// false\n// false\n// true\n// true\n\nfetch('http://www.speedtest.net')\n            .then(function(response) {\n                        console.log(response);\n            })\n            .catch(function (error) {\n                        console.error(error);\n            })\n            ;\nwhile ( true ) console.log(1);\n\nIIFE\nconst f1 = () => { f1() }\n(() => {})()"
      },
      {
        "timestamp": "2024-11-07 12:22:23",
        "content": "2024-11-07 12:22:23\n аыеъа -> 2071074234:\nIT_One -> Газпромбанк\nЗП: 250к\nВакансия: https://www.it-one.ru/vacancies/3ecb9c7e26d84d0a9820b9e8ce108395/\nВидео:",
        "full_content": "2024-11-07 12:22:23\n аыеъа -> 2071074234:\nIT_One -> Газпромбанк\nЗП: 250к\nВакансия: https://www.it-one.ru/vacancies/3ecb9c7e26d84d0a9820b9e8ce108395/\nВидео:"
      },
      {
        "timestamp": "2024-09-24 16:36:34",
        "content": "2024-09-24 16:36:34\n Александр -> 2071074234:\nКомпания: Газпромбанк\nВакансия: HR сама написала \nЗП: 250к\nЗадачи и вопросы были один в один как у Тимофея https://t.me/c/2071074234/489/52491",
        "full_content": "2024-09-24 16:36:34\n Александр -> 2071074234:\nКомпания: Газпромбанк\nВакансия: HR сама написала \nЗП: 250к\nЗадачи и вопросы были один в один как у Тимофея https://t.me/c/2071074234/489/52491"
      },
      {
        "timestamp": "2024-08-21 06:48:07",
        "content": "2024-08-21 06:48:07\n Timofei Syromiatnikov -> 2071074234:\n— Название компании: Газпромбанк (проект с контрактами)\n— Ссылка: написала hr\n— ЗП: 280+\n— Вопросы:\n1) Чем бы тебе хотелось заниматься во фронтовой части?\n2) Что можете рассказать о понятиях repaint, reflow? Какие рекомендации в написании производительно кода можете дать, отталкиваясь от этих понятий?\n3) В чём техническая и визуальная разница между {visibility: hidden}, {display: none} и {opacity: 0} при скрытии элемента?\n\n— Задачи:\n1) Ка...",
        "full_content": "2024-08-21 06:48:07\n Timofei Syromiatnikov -> 2071074234:\n— Название компании: Газпромбанк (проект с контрактами)\n— Ссылка: написала hr\n— ЗП: 280+\n— Вопросы:\n1) Чем бы тебе хотелось заниматься во фронтовой части?\n2) Что можете рассказать о понятиях repaint, reflow? Какие рекомендации в написании производительно кода можете дать, отталкиваясь от этих понятий?\n3) В чём техническая и визуальная разница между {visibility: hidden}, {display: none} и {opacity: 0} при скрытии элемента?\n\n— Задачи:\n1) Как распределяются приоритеты CSS селекторов? Какого размера будет текст?\n<div id=“test” class=“hello” style=“font-size: 8px;”>text here</div>\n\n#test {\n  font-size: 20px;\n}\n\n.hello {\n  font-size: 10px;\n}\n2) Представьте, что вам надо записать в переменную \"arr\" массив из 50 элементов, со значениями элементов от 1 до 50, соответственно, как вы это сделаете? (Через Array.fill, или for () {})\n3) Напишите функцию sum, которая принимает произвольное количество аргументов и возвращает их сумму или конкатенирует их по правилам js.\nconsole.log(sum(1, 2, 3)); // 6\nconsole.log(sum(1, 2, '3')); // '33'\nconsole.log(sum('1', 2, 3)); // '123'\n4) В каком порядке выведутся консоль логи?\n// setTimeout(() => console.log(1));\n\n// Promise.reject(2).catch(console.log);\n\n// Promise.resolve().then(() => setTimeout(() => console.log(3)));\n\n// new Promise((resolve) => setTimeout(resolve)).then(() => console.log(4));\n\n// Promise.resolve(5).then(console.log);\n\n// setTimeout(() => console.log(6));\n\n// console.log(7);\n\n// 7 2 5 1 6 3 4\n5) Реши проблему. Сейчас каждую секунду в консоль лог выводится значение каунта. Но есть проблема, при клике на кнопку increment, в консоль лог выводятся сразу несколько значений в секунду (старое, новое). А должно выводится только новое.\nimport { useState } from \"react\";\nimport \"./styles.css\";\n\nconst TestCounter = () => {\n  const [counter, setCounter] = useState(0);\n  setInterval(() => console.log(counter), 1000);\n  const hadleClick = () => setCounter(counter + 1);\n\n  return (\n    <div className=\"App\">\n      <span>current counter: {counter}</span>\n      <button onClick={hadleClick}>increment</button>\n    </div>\n  );\n};\n\nexport default function App() {\n  return <TestCounter />;\n}"
      },
      {
        "timestamp": "2024-08-20 07:49:44",
        "content": "2024-08-20 07:49:44\n Timofei Syromiatnikov -> 2071074234:\nа, а ты не собесился конкретно в газпромбанк?",
        "full_content": "2024-08-20 07:49:44\n Timofei Syromiatnikov -> 2071074234:\nа, а ты не собесился конкретно в газпромбанк?"
      },
      {
        "timestamp": "2024-07-04 06:45:52",
        "content": "2024-07-04 06:45:52\n Artur -> 2071074234:\nГазпромбанк Автолизинг\n\nсозвон с руководителем веб разработки\n\n— Вакансия: нашел в тг\n— ЗП: говорил 200к+\n— Итог: ✅ сделали пре-оффер на 250к на руки, по году на руки 270к\n\nВопросы:\n— расскажи о себе, упор на сложности и достижения\n— как мультиязычность личного кабинета реализовывал\n— почему для работы с картами использовали react-google-maps, а не например яндексовые карты\n— pixel perfect верстка, как ты это реализовывал, что для тебя означает pixel per...",
        "full_content": "2024-07-04 06:45:52\n Artur -> 2071074234:\nГазпромбанк Автолизинг\n\nсозвон с руководителем веб разработки\n\n— Вакансия: нашел в тг\n— ЗП: говорил 200к+\n— Итог: ✅ сделали пре-оффер на 250к на руки, по году на руки 270к\n\nВопросы:\n— расскажи о себе, упор на сложности и достижения\n— как мультиязычность личного кабинета реализовывал\n— почему для работы с картами использовали react-google-maps, а не например яндексовые карты\n— pixel perfect верстка, как ты это реализовывал, что для тебя означает pixel perfect\n— насколько ты готов отстаивать свое мнение\n— как авторизацию реализовывал, токены\n— резюме за один раз писал или дополнял моменты\n— что ты вкладываешь в фразу \"работал с командой\" в своем резюме\n— кем ты себя считаешь, изолированный ты или душа компании\n— любишь ли ты критиковать\n— логирование запросов, как было реализовано, где их хранил\n— коллеги сказали, что у тебя два оффера, как ты определяешь их ценность помимо зп и стека технологий\n— что для тебя важно в команде\n— ты закончил работу в 18:00, что ты будешь делать, какие хобби\n— были ли выгорания, если да, то как справлялся"
      },
      {
        "timestamp": "2024-07-02 09:59:20",
        "content": "2024-07-02 09:59:20\n Artur -> 2071074234:\nГазпромбанк автолизинг\nВакансия: нашел в тг\nЗП: говорил 200к+\n\nЗадача:\nреализовать отображение списка элементов, сделать пагинацию\n\nитог: не успел доделать, но он сказал, что логика правильная, оставалось только отрефакторить\n\n\nчто успел написать:\nimport React, { useState, useEffect } from 'react';\n\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts'\n\nexport default function Component() {\n  const [posts, setPosts] = useState([])\n  const [curre...",
        "full_content": "2024-07-02 09:59:20\n Artur -> 2071074234:\nГазпромбанк автолизинг\nВакансия: нашел в тг\nЗП: говорил 200к+\n\nЗадача:\nреализовать отображение списка элементов, сделать пагинацию\n\nитог: не успел доделать, но он сказал, что логика правильная, оставалось только отрефакторить\n\n\nчто успел написать:\nimport React, { useState, useEffect } from 'react';\n\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts'\n\nexport default function Component() {\n  const [posts, setPosts] = useState([])\n  const [currentPage, setCurrentPage] = useState(1)\n  const totalPosts = posts.length\n  const totalPages = Math.ceil(totalPosts / 10)\n  const startIndex = (currentPage - 1)*10\n  const selectedPosts = posts.slice(startIndex, startIndex + 10)\n    \n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(POSTS_URL)\n        const postsData = await res.json()\n        setPosts(postsData)\n      } catch(err) {\n        console.error(err)\n      }\n    })()\n  }, [])\n  \n  const handlePageChange = (page) => {\n    setCurrentPage(page)\n  }\n\n    return (\n    <div>\n        <ul>\n        {posts.map((item) => {\n        return <li key={item.id}>{item.title}</li>\n      })}\n        </ul>\n\n    <div className='pagination'>\n          {Array.from({length: totalPages}, (_, index) => (\n        <button key={index + 1} onClick={() => handlePageChange(index + 1)}>\n          {index + 1}\n         </button>\n        ))}\n      </div>\n    </div>\n    );\n}"
      }
    ]
  },
  {
    "company": "Точка Банк",
    "count": 7,
    "records": [
      {
        "timestamp": "2025-06-08 07:16:22",
        "content": "2025-06-08 07:16:22\n Kirichelli -> 2071074234:\nКомпания: Точка банк\nВакансия: https://tochka.com/hr/it/frontend/\n\nЗадачи:\n\nfunction wtf(s) {\n  for (var i = s.length - 1, o = ''; i >= 0; o += s[i--]) {} return o;\n}\n\nconsole.log(wtfNew([1,2,3])) /// '321'\n\n\n\nfunction wtfNew(arr) {\n    return [...arr].reverse().join('');\n}\n\nfunstion reverseString()\n\nString.prototype.reverse = function(){\n    return this.split('').reverse().join('')\n}\n\n\n// контексты \n\nclass Cat {\n    sound = 'meow';\n    say = () => ...",
        "full_content": "2025-06-08 07:16:22\n Kirichelli -> 2071074234:\nКомпания: Точка банк\nВакансия: https://tochka.com/hr/it/frontend/\n\nЗадачи:\n\nfunction wtf(s) {\n  for (var i = s.length - 1, o = ''; i >= 0; o += s[i--]) {} return o;\n}\n\nconsole.log(wtfNew([1,2,3])) /// '321'\n\n\n\nfunction wtfNew(arr) {\n    return [...arr].reverse().join('');\n}\n\nfunstion reverseString()\n\nString.prototype.reverse = function(){\n    return this.split('').reverse().join('')\n}\n\n\n// контексты \n\nclass Cat {\n    sound = 'meow';\n    say = () => {\n        console.log(this.sound);\n    };\n    say2() {\n        console.log(this.sound);\n    };\n};\n\nfunction Cat(){\n    this.sound = 'meow';\n    this.say = () => {\n        console.log(this.sound)\n    }\n    this.say2 = function() {\n        console.log(this.sound)\n    }\n}\n\nObject.defineProperty(Cat.prototype, 'say2', {\n    value: function() {\n        console.log(this.sound)\n    }\n})\n\nconst myCat = {\n    sound: 'meow',\n    say: () => {\n        console.log(this.sound);\n    },\n    say2: function () {\n        console.log(this.sound);\n    }\n}\n\nconst cat = new Cat();\n\ncat.say(); // meow \ncat.say2(); // meow\nmyCat.say(); // undefined\nmyCat.say2(); // meow\n\n\n\nconsole.log(1);\n\nsetTimeout(() => console.log(2));\n\nPromise.reject(3).catch(console.log);\n\nnew Promise((resolve) => setTimeout(resolve)).then(() => console.log(4));\n\nrequestAnimaionFrame(() => console.log(7))\n\nPromise.resolve(5).then(console.log);\n\nconsole.log(6);\n\nP.S. RequestAnimationFrame не обязательно может быть в этой последовательности, можно сказать что выполняется после всех микро тасок\n// 1 6 3 5 7 2 4\n\n\nfunction func1() {\n    console.log(1);\n    return setTimeout(func1);\n}\n\nfunction func2() {\n    console.log(2);\n    return Promise.resolve().then(func2);\n}\n\nfunc1();\nfunc2();\n\n\n\n// any unknown never void enum \n\n\nlet first: any = 1;\nlet second: unknown = \"2\";\n\nlet firstString: string = first; // 1\nlet secondString: string = second; // \n\n\ntype Type1 = {\n    foo: string;\n    bar: string;\n}\n\ntype Type2 = {\n    state: string;\n    bar: string;\n}\n\nType1 | Type2 // foo bar state\nType1 & Type2 // bar\n\n\nfunction isType1(data: Type1 | Type2): data is Type1 {\n    return 'foo' in data\n}\n\n/// Дан пример, необходимо написать type guard функцию\n\ninterface User {\n    id: number;\n    login: string;\n}\n\nfetch('/api/user')\n    .then((r) => r.json())\n    .then((data: unknown) => {\n        if (isUser(user)) {\n          saveUserToStore(data);\n        }\n    });\n\nfunction saveUserToStore(user: User) {\n    \n}\n\n\nfunction isUser(data: unknown): data is User {\n    return (\n        data !== null &&\n        typeof data === 'object' &&\n        'id' in data &&\n        'login' in data && typeof data.id === 'number' &&\n        typeof data.login === 'string'\n    )\n}\n\n\n// Utillity types\n// Record, Omit, Pick, Partial, Required\n\n// Написать 2 Utillity types\n\ntype PartialType<K> = {\n    [key in keyof K]?: K[key];\n}\n\ntype PickType<T, keys extends keyof T> = {\n    [key in keys]: T[key];\n}\n\n//// React\n\n\nfunction AwesomeMenu({IsValid}) {\n    return <div className=\"container\">\n     {IsValid && <ValidControls/>}\n      <CoolComponent>123</CoolComponent>\n    </div>;\n\n}\n\n/// Мемоизация\n\n\nfunction Menu() {\n  const handleClick = useCallback(() => {\n    console.log('123');\n  },[])\n\n  return <MenuItem handleClick={handleClick}>123</MenuItem>\n}\n\nconst MenuItem = memo((props) => {\n  return <div onClick={props.handleClick}>123</div>\n});\n\n// Переписать на функциональный компонент\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n    setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Привет, мир!</h1>\n        <h2>Сейчас {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}"
      },
      {
        "timestamp": "2024-06-27 11:56:38",
        "content": "2024-06-27 11:56:38\n Vladislav Ershov -> 2071074234:\nКомпания: Точка банк\nНа созвоне с hr были тех. вопросы\n\n- Что такое мемоизация\n- Что такое реконсилейшн\n- Дескрипторы объектов\n- Тип данных Symbol. Приходилось ли использовать? Как использовал?\n- По каким правилам работает TS?\n- Во что компилируется TS?",
        "full_content": "2024-06-27 11:56:38\n Vladislav Ershov -> 2071074234:\nКомпания: Точка банк\nНа созвоне с hr были тех. вопросы\n\n- Что такое мемоизация\n- Что такое реконсилейшн\n- Дескрипторы объектов\n- Тип данных Symbol. Приходилось ли использовать? Как использовал?\n- По каким правилам работает TS?\n- Во что компилируется TS?"
      },
      {
        "timestamp": "2024-06-18 12:59:01",
        "content": "2024-06-18 12:59:01\n 110100001001101011010001100000101101000010111110 -> 2071074234:\n- Точка банк\n- Вакансия https://tochka.com/hr/it/frontend\n- зп 250. Максимум 380\n- уровень Middle\nУспех собеса: ожидаю ответа от hr\n\nВопросы на скрининге:\n- почему ушел с работы?\n- самая сложная задача?\n- что ищешь?\n- event loop про последовательность выполнения\n- жизненный цикл компонентов\n- что такое мемоизация?\n- что такое реконсиляция?",
        "full_content": "2024-06-18 12:59:01\n 110100001001101011010001100000101101000010111110 -> 2071074234:\n- Точка банк\n- Вакансия https://tochka.com/hr/it/frontend\n- зп 250. Максимум 380\n- уровень Middle\nУспех собеса: ожидаю ответа от hr\n\nВопросы на скрининге:\n- почему ушел с работы?\n- самая сложная задача?\n- что ищешь?\n- event loop про последовательность выполнения\n- жизненный цикл компонентов\n- что такое мемоизация?\n- что такое реконсиляция?"
      },
      {
        "timestamp": "2024-06-14 14:03:28",
        "content": "2024-06-14 14:03:28\n Евгений Лямин -> 2071074234:\n— Точка Банк\n— Вакансия https://tochka.com/hr/it/frontend/\n— ЗП: 280\n— Запись собеседования https://youtu.be/Ba-1NAqQSR4\n— ❌\n— Фидбек:\nпо JS:\nПочитать про spread-оператор, про контекст исполнения, про классы и в частности про прототипы\n\nпо TS:\nПочитать про дженерики, объединение и пересечение типов\n\nпо React:\nПочитать про хуки",
        "full_content": "2024-06-14 14:03:28\n Евгений Лямин -> 2071074234:\n— Точка Банк\n— Вакансия https://tochka.com/hr/it/frontend/\n— ЗП: 280\n— Запись собеседования https://youtu.be/Ba-1NAqQSR4\n— ❌\n— Фидбек:\nпо JS:\nПочитать про spread-оператор, про контекст исполнения, про классы и в частности про прототипы\n\nпо TS:\nПочитать про дженерики, объединение и пересечение типов\n\nпо React:\nПочитать про хуки"
      },
      {
        "timestamp": "2024-06-08 08:12:15",
        "content": "2024-06-08 08:12:15\n Artur -> 2071074234:\nКомпания: Точка банк\nСсылка: https://tochka.com/hr/it/frontend/\nСсылка на собес: https://disk.yandex.ru/d/iWtO9vO3riodsg\nЗП: сказал 200к+\nУровень: Middle\nУспех собеса: ?\n\nЗадачи: \n\n////////////\n\nfunction wtf(s) {\n    \n  for (let i = s.length - 1, o = ''; i >= 0; o += s[i--]) {\n      \n  } \n  \n  return o;\n}\n\nfunction wtf2(s) {\n  if (typeof s === 'string' || Array.isArray(s)) {\n    return [...s].reverse().join('')\n  }\n\n  return ''\n}\n\nconsole.log(wtf('abc'))...",
        "full_content": "2024-06-08 08:12:15\n Artur -> 2071074234:\nКомпания: Точка банк\nСсылка: https://tochka.com/hr/it/frontend/\nСсылка на собес: https://disk.yandex.ru/d/iWtO9vO3riodsg\nЗП: сказал 200к+\nУровень: Middle\nУспех собеса: ?\n\nЗадачи: \n\n////////////\n\nfunction wtf(s) {\n    \n  for (let i = s.length - 1, o = ''; i >= 0; o += s[i--]) {\n      \n  } \n  \n  return o;\n}\n\nfunction wtf2(s) {\n  if (typeof s === 'string' || Array.isArray(s)) {\n    return [...s].reverse().join('')\n  }\n\n  return ''\n}\n\nconsole.log(wtf('abc')); // cba\nconsole.log(wtf(['a', 'b', 'c'])); // cba\nconsole.log(wtf({ a: 'b' }));\n\n\nlet str = 'abc';\nlet str2 = 'ctr';\n\nString.prototype.reverse = function reverse2() {\n    return Array.from(this).reverse().join('')\n}\n\nstr = str.reverse()\nsr2 = str2.reverse()\n\n\n////////////\n\nconsole.log(1);\n\nsetTimeout(() => {\n    console.log(2);\n}, 0);\n\nconsole.log(3);\n\nPromise.resolve().then(() => {\n    console.log(4);\n}).then(() => {\n    console.log(8);\n})\n\nPromise.reject().catch(() => {\n    console.log(9);\n})\n\nconsole.log(5);\n\nwhile('') {\n    console.log(6);\n}\n\nconsole.log(7);\n\n// 1, 3, 5, 7, 4, 9, 8, 2\n\n\nfunction func2() {\n  console.log(2);\n  return Promise.resolve().then(func2);\n}\n\nfunc2();\n\nfunction func1() {\n  console.log(1);\n  return setTimeout(func1);\n}\n\nfunc1();\n\n\n////////////\n\nclass Cat {\n    sound = 'meow';\n    say = () => {\n        console.log(this.sound);\n    };\n    say2 () {\n        console.log(this.sound);\n    };\n};\n\nconst myCat = {\n    sound: 'meow meow',\n    say: () => {\n        console.log(this.sound);\n    },\n    say2: function () {\n        console.log(this.sound);\n    }\n}\n\nconst cat = new Cat();\ncat.say(); // 'meow'\ncat.say2(); // error / meow\nmyCat.say(); // 'meow' / undefined\nmyCat.say2(); // 'meow'\n\n\nconst outSay = cat.say.bind(myCat)\nconst outSay2 = cat.say2.bind(cat)\nconst outSay3 = outSay2.say2.call(myCat)\n\noutSay(); // 'meow'\noutSay2(); // 'meow'\n\n\n////////////\n//  TS\n\nlet first: any = 1;\nlet second: unknown = 2 / 'str' / [1,2,3];\n\n\nlet firstString: string = first;\nlet secondString: string = second; // 'error'\n\nfunction isString(value: unknown): value is string {\n    return typeof value === \"string\"\n}\n\nif (isString(second)) {\n    let secondString: string = second\n}\n\n////////////\n\nfunction func<T>(value: unknown): value is T {\n    return value\n}\n\ntype T0 = {\n    field1?: number;\n    field2: string;\n    field3: boolean | undefined;\n}\n\ntype MyType = Required<T0>;\n\n//{\n//     field1: number;\n//     field2: string;\n//     field3: boolean | undefined;\n//}\n\ntype Required<T extends object> = {\n    [P in keyof T]-?: T[P]\n}\n\n\nenum Status {\n    Success = 'success',\n    Error = 'error',\n    Pending = 'pending'\n}\n\ntype Status = 'success' | 'error'\n\nconst statuses = {\n    Success = 'success',\n    Error = 'error',\n    Pending = 'pending'\n}\n\nfunction getData(data: unknown, status: Status): any {}\n\n////////////\n// react\n\n\nfunction Component() {\n  const [counter, setCounter] = useState(0);\n\n  const handleClick = useCallback(() => {\n    setCounter(s => s + 1);\n  }, []);\n\n  //if (counter % 2 === 0) {\n   // return <>\n   //   <Button handleClick={handleClick} key={'button'} />\n   // </>\n // }\n  \n  return <>\n    {(counter % 2 === 0) && <div>{counter}</div>}\n    <Button handleClick={handleClick} key={'button'} />\n  </>\n}\n\nfunction MyButton({ handleClick }) {\n    useEffect( () => {\n        console.log('mount')\n        return () => console.log('unmount')\n    }, [])\n    \n    console.log('render');\n  return <button onClick={handleClick}>\n    +\n  </button>\n}\n\nconst Button = memo(MyButton)"
      },
      {
        "timestamp": "2024-05-14 15:12:52",
        "content": "2024-05-14 15:12:52\n Руслан -> 2071074234:\n— Название компании: Точка банк\n— Вакансия: https://tochka.com/hr/it/frontend/\n— Успех: ❓\n— ЗП: 280 тыс. на руки\n— Вопросы от hr: \n1. Как работает мемоизация компонентов\n2. Что такое реконсиляция\n3. Приходилось ли работать с дескрипторами объектов",
        "full_content": "2024-05-14 15:12:52\n Руслан -> 2071074234:\n— Название компании: Точка банк\n— Вакансия: https://tochka.com/hr/it/frontend/\n— Успех: ❓\n— ЗП: 280 тыс. на руки\n— Вопросы от hr: \n1. Как работает мемоизация компонентов\n2. Что такое реконсиляция\n3. Приходилось ли работать с дескрипторами объектов"
      },
      {
        "timestamp": "2024-05-13 20:28:54",
        "content": "2024-05-13 20:28:54\n Aleksandr -> 2071074234:\nНазвание компании - Точка банк\nВакансия: https://tochka.com/hr/it/frontend/\nЗП: от 300 net запросил\nЗадачи: Немного теории, лайвкодинг \n// JS\nfunction wtf(s) {\n  for (var i = s.length - 1, o = ''; i >= 0; o += s[i--]) {} return o;\n}\n\nfunction convertToStrAndReverse(s: string | unknown[]): string {\n    if (!(Symbol.iterator in s.__proto__)) {\n        return ''\n    }\n\n    return Array.from(s).reverse().join('')\n}\n\nwtf('123') // '321'\nwtf([1, 2, 3]) // ...",
        "full_content": "2024-05-13 20:28:54\n Aleksandr -> 2071074234:\nНазвание компании - Точка банк\nВакансия: https://tochka.com/hr/it/frontend/\nЗП: от 300 net запросил\nЗадачи: Немного теории, лайвкодинг \n// JS\nfunction wtf(s) {\n  for (var i = s.length - 1, o = ''; i >= 0; o += s[i--]) {} return o;\n}\n\nfunction convertToStrAndReverse(s: string | unknown[]): string {\n    if (!(Symbol.iterator in s.__proto__)) {\n        return ''\n    }\n\n    return Array.from(s).reverse().join('')\n}\n\nwtf('123') // '321'\nwtf([1, 2, 3]) // '321'\n// @ts-ignore\nwtf({ length: 5 }) // Error <> ''\n\n'123'.convertToStrAndReverse();\n\nString.prototype.convertToStrAndReverse = function convertToStrAndReverse(): string {\n    return Array.from(this).reverse().join('');\n}\n\n// __proto__ vs prototype\n\n\n/////\n\n\nconst emitter = new Emitter();\n\nconst handlerTest = () => console.log('Ho-ho-ho!');\nemitter.on('foo', handlerTest);\nemitter.on('foo', (...data) => console.log('foo', ...data));\nemitter.on('bar', (data) => console.log('bar', data));\n\nemitter.emit('foo', 'Hello', 'World!');\n// Ho-ho-ho!\n// foo Hello World!\nemitter.emit('bar', 'Hello', 'World!');\n// bar Hello\n\nemitter.off('foo', handlerTest);\n\nemitter.emit('foo', 'Test');\n// foo Test\nemitter.emit('bar');\n// bar undefined\n\n\nclass Emitter {\n    const switchedEvents = {}\n    on(event: string, handler: (data: unknown[]) => void) {\n        this.switchedEvents[event] = [...this.switchedEvents[event], handler]\n    }\n    \n    emit(event: string, ...rest: unknown[]) {\n        this.switchedEvents[event].forEach((handler) => {\n            handler(...rest)\n        })\n    }\n    \n    off(event: string, handler: (data: unknown[]) => void) {\n        this.switchedEvents[event] = this.switchedEvents[event].filter((fn) => fn !== handler)\n    }\n}\n\n/////\n\ntypeof 5 // 'number'\ntypeof {} // 'object'\ntypeof new Promise((r) => r()) // 'object'\n\nPromise.resolve(5).then(data => {\n    console.log(typeof data); // number\n    return { foo: 1 };\n}).then(data => {\n    console.log(typeof data); // object\n    return Promise.reject(5);\n}).catch(data => {\n    console.log(typeof data); // number\n})\n\n/////\n\n// TS\n// any never void unknown\n\ntype TFrog = { quack: () => void, color: string };\nobj: { quack: () => void } & { color: string };\n\nconst a: unknown = { quack: () => {}, color: 'green' };\n\nfunction isFrog(obj: unknown): obj is TFrog {\n    if (quack in obj) {\n        return true;\n    }\n    return false;\n}\n\nif (isFrog(a)) {\n    a.quack();\n}\n\ntype TRet<T> = T extends () => infer T ? T : never;\n\n// () => number\n\n\n\n\n\n// React\n// Кликнули 3 раза, ушли со страницы\nfunction Component() {\n  // const [counter, setCounter] = useState(0);\n  const flagRef = useRef(0);\n\n  const handleClick = () => {\n    // setCounter(s => s + 1);\n    flagRef.current++;\n  };\n  \n  useEffect(() => {\n    // хотим слать аналитику только с последним значением счетчика\n        return () => sendAnalytics(flagRef.current);\n  }, []);\n\n  return <MyButton handleClick={handleClick} />;\n}\n\nconst MyButton = ({ handleClick }) => {\n  return <button onClick={handleClick}>\n    +\n  </button>;\n}\nЗапись: https://www.youtube.com/watch?v=Q7lsNwzKxhM&ab_channel=%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%A0%D1%8F%D0%B1%D0%BE%D0%B2\nУспех: ❌\nФидбек: Рекомендации от ребят: \n\nОтличие Prototype и proto\nКак проверить наличие итератора в прототипе?\n\nЧто происходит с type и interface в рантайме? И в целом во что компилируется TS\nПочему сделать typeof value === TMyType не получится?\nУглубиться в тайпгарды. Оператор is\nПочитать про infer\nКонфигурирование typescript\nconst enum vs enum\n\nКак работает useEffect со списком зависимостей\nuseRef для хранения переменных в функциональных компонентах\nповторить классовые компоненты \n\nКнижка YouDont Known JS - всю базу повторить\nКнижка \"Эффективный TypeScript 62 способа улучшить код\"\n\nКомментарий от себя: Не видно зум, а так ребята максимально кайфовые на собесе, остался в приятном впечатлении после собеса. Потупил везде где-то чуток, а где-то не чуток)"
      }
    ]
  },
  {
    "company": "Согаз",
    "count": 6,
    "records": [
      {
        "timestamp": "2025-07-09 18:37:48",
        "content": "2025-07-09 18:37:48\n Fetisov Artem -> 2071074234:\nКомпания: Согаз\nЗп 250\n\nБыла только теория и вопросы по опыту: \n\n1. Рассказ про себя и свой опыт, затем несколько вопросов по задачам из резюме. \n2. Http и https(из чего состоит, отличия). Про версии http. \n3. Про dependencies и devDependencies(что для чего)\n4. Cors, preflight запрос, заголовки cors. \n5. Говорили про авторизацию, аутентификацию, работу с интерцепторами. Особое внимание заострял на 401 и 403 ошибках, в каких случаях прилетят. \n6. ...",
        "full_content": "2025-07-09 18:37:48\n Fetisov Artem -> 2071074234:\nКомпания: Согаз\nЗп 250\n\nБыла только теория и вопросы по опыту: \n\n1. Рассказ про себя и свой опыт, затем несколько вопросов по задачам из резюме. \n2. Http и https(из чего состоит, отличия). Про версии http. \n3. Про dependencies и devDependencies(что для чего)\n4. Cors, preflight запрос, заголовки cors. \n5. Говорили про авторизацию, аутентификацию, работу с интерцепторами. Особое внимание заострял на 401 и 403 ошибках, в каких случаях прилетят. \n6. Cookies. Откуда прилетают, кто их устанавливает, что они хранят( больше про refresh token), заголовки secure, http only, sameSite. \n7. С какими сборщиками работал и зачем они нужны. Отличия лоадеров и плагинов. Сколько лоадеров нужно чтобы подключить scss. Что такое билд. \n8. Можно ли упасть с ошибкой CORS в Postman\n9. Говорили про fsd и как бы я организовал структуру папок одной фичи  следуя fsd. \n10. React, его минусы и плюсы. \n11. Typescript, его минусы и плюсы. \n12. Отличия type и interface. \n13. Отличия unknown, never, void\n14. Какими utility types пользуешься чаще всего. \n15. Declare modules, интересовала именно типизация сторонних библиотек для которых нет типов. \n16. Паттерн MVC в парадигме redux. В подробностях."
      },
      {
        "timestamp": "2025-07-04 17:58:11",
        "content": "2025-07-04 17:58:11\n Sentry -> 2071074234:\nКомпания: Согаз\nЗп: 260\n\nЗадач не было.\n\nДолго копались в опыте, пояснял людям за технологии. \n\nВопросы\nЧто такое каскад в css?\nСпецифичность селектора в css?\nЗачем нужен БЭМ?\nКак работают корсы?\nЗаголовки HTTP Запроса?\nКак мы должны устанавливать ноду в проекте чтобы именно промежуток нод использовался?\nПрототипное наследование в js. \nЧто является прототипом в функции?\nEventLoop?",
        "full_content": "2025-07-04 17:58:11\n Sentry -> 2071074234:\nКомпания: Согаз\nЗп: 260\n\nЗадач не было.\n\nДолго копались в опыте, пояснял людям за технологии. \n\nВопросы\nЧто такое каскад в css?\nСпецифичность селектора в css?\nЗачем нужен БЭМ?\nКак работают корсы?\nЗаголовки HTTP Запроса?\nКак мы должны устанавливать ноду в проекте чтобы именно промежуток нод использовался?\nПрототипное наследование в js. \nЧто является прототипом в функции?\nEventLoop?"
      },
      {
        "timestamp": "2025-06-30 14:09:46",
        "content": "2025-06-30 14:09:46\n Евгений -> 2071074234:\nКомпания: Согаз\nПроект: Страхование грузов\nВстреча с РО и аналитиком , рассказали про то как у них устроено, амбиции\nспрашивали по опыту и софтам \n\nВопросы: \nПочему стал разрабом\nПочему именно в страховую компанию\nКак ты будешь действовать если прилетела задача которая не нравится\nКак будешь действовать если вы с другим разрабом делаете один компонет\nПочему ушел с прошлой работы\nЧто мотивирует\nЧто нужно чтобы тобой управлять\nКак поведешь себя в конфлик...",
        "full_content": "2025-06-30 14:09:46\n Евгений -> 2071074234:\nКомпания: Согаз\nПроект: Страхование грузов\nВстреча с РО и аналитиком , рассказали про то как у них устроено, амбиции\nспрашивали по опыту и софтам \n\nВопросы: \nПочему стал разрабом\nПочему именно в страховую компанию\nКак ты будешь действовать если прилетела задача которая не нравится\nКак будешь действовать если вы с другим разрабом делаете один компонет\nПочему ушел с прошлой работы\nЧто мотивирует\nЧто нужно чтобы тобой управлять\nКак поведешь себя в конфликте"
      },
      {
        "timestamp": "2025-06-26 13:54:21",
        "content": "2025-06-26 13:54:21\n Евгений -> 2071074234:\nКомпания Согаз\nЗП: от 230\nГибрид\n\nОбщались с продукт овнером, нужен 1 фронт на проект,но вроде в дальнейшем будут набирать еще,  амбиций куча вроде как на все деньги есть, хотя бы раз в неделю приезжать в офис. \nПо теории не гоняли, чуть спросил про опыт что делал, какие хобби.",
        "full_content": "2025-06-26 13:54:21\n Евгений -> 2071074234:\nКомпания Согаз\nЗП: от 230\nГибрид\n\nОбщались с продукт овнером, нужен 1 фронт на проект,но вроде в дальнейшем будут набирать еще,  амбиций куча вроде как на все деньги есть, хотя бы раз в неделю приезжать в офис. \nПо теории не гоняли, чуть спросил про опыт что делал, какие хобби."
      },
      {
        "timestamp": "2025-06-18 15:33:57",
        "content": "2025-06-18 15:33:57\n Евгений -> 2071074234:\nСОГАЗ \nзп от 230 \nТолько теория, задач не было (хотя обещали полтора часа лайвкодинга)\nВопросы: \n1. С какими сборщиками работал\n2. Разница между dev зависимостей и нет\n3. Что такое npm \n4. Из чего состоит запрос\n5. Обязательно ли метод DELETE гарантировано что-то удалит\n6. Можно ли упасть с ошибкой CORS в postman \n7. FSD рассказать принцип , базовые правила\n8. Что такое SPA \n9. Как бы ты делал приватные страницы \n10. Как проверить авторизованный ли пол...",
        "full_content": "2025-06-18 15:33:57\n Евгений -> 2071074234:\nСОГАЗ \nзп от 230 \nТолько теория, задач не было (хотя обещали полтора часа лайвкодинга)\nВопросы: \n1. С какими сборщиками работал\n2. Разница между dev зависимостей и нет\n3. Что такое npm \n4. Из чего состоит запрос\n5. Обязательно ли метод DELETE гарантировано что-то удалит\n6. Можно ли упасть с ошибкой CORS в postman \n7. FSD рассказать принцип , базовые правила\n8. Что такое SPA \n9. Как бы ты делал приватные страницы \n10. Как проверить авторизованный ли пользователь\n11. Как бы ты делал авторизацию (как построил логику)"
      },
      {
        "timestamp": "2024-12-06 07:17:33",
        "content": "2024-12-06 07:17:33\n Mikhail Sorokin -> 2071074234:\nКомпания Согаз\n- как устроена архитектура fsd \n- как работают лоадеры, могу ли написать свой(только спросили, писать не предлагали)\n- секция external в webpack\n- как браузер понимает, что нужно обращаться к ближайшему серверу CDN\n- CSRF что такое \n- как собирать бандл и как это влияет на скорость приложения\n- как настроить webpack на несколько точек входа\n- как можно кешировать изображения, рассказать про механизм кеширования как устроен, как з...",
        "full_content": "2024-12-06 07:17:33\n Mikhail Sorokin -> 2071074234:\nКомпания Согаз\n- как устроена архитектура fsd \n- как работают лоадеры, могу ли написать свой(только спросили, писать не предлагали)\n- секция external в webpack\n- как браузер понимает, что нужно обращаться к ближайшему серверу CDN\n- CSRF что такое \n- как собирать бандл и как это влияет на скорость приложения\n- как настроить webpack на несколько точек входа\n- как можно кешировать изображения, рассказать про механизм кеширования как устроен, как заставить браузер использовать кеш конкретного ресурса\n- как установить время хранения в кеше\n- оптимизация скорости загрузки на фронте\n- lighthouse как работает\n- в дев режиме, когда бандл собирается, реакт дергает наши компоненты дважды, зачем?\n- в какой момент срабатывает useEffect\n- commit в реакте что это\n- почему нельзя передавать асинхронную функцию в useEffect\n- чего не может быть в useEffect\n- можно ли менять state в useEffect\n- как работает Context\n- как работает eventLoop\n- как устроено наследование в js\n- какой прототип у функции\n- функция конструктор что такое\n- как в packaje.json указать версию node и пакетного менеджера?\n- поле type в package.json что это\n- зачем нужен package-lock.json"
      }
    ]
  },
  {
    "company": "Бюро 1440",
    "count": 6,
    "records": [
      {
        "timestamp": "2025-06-18 12:20:14",
        "content": "2025-06-18 12:20:14\n Egor -> 2071074234:\nБюро 1440 (финал команда платформы)\nЗп - от 350\nВакансия - закрыли вакансию\nЗапись - https://youtu.be/4E0LYLwx-34",
        "full_content": "2025-06-18 12:20:14\n Egor -> 2071074234:\nБюро 1440 (финал команда платформы)\nЗп - от 350\nВакансия - закрыли вакансию\nЗапись - https://youtu.be/4E0LYLwx-34"
      },
      {
        "timestamp": "2025-06-11 14:33:38",
        "content": "2025-06-11 14:33:38\n Egor -> 2071074234:\nБюро 1440\nВакансия: hr написала\nЗп: от 350\nЗадачи: \n```\nconst str = 'value1.value2.value3.value4.value5';\n// RESULT\n/*\n{\n  value1: {\n    value2: {\n      value3: {\n        value4: {\n          value5:{}\n        }\n      }\n    }\n  }\n}\n*/\n\nconst toObject = (str) => {\n     const arr = str.split('.')\n     const result = {}\n    \n    const result = arr.reduceRight((acc, cur) => {\n        return {[curr]: acc}\n    },{})\n}\n\n\n==========\n\n// дан массив точек для график...",
        "full_content": "2025-06-11 14:33:38\n Egor -> 2071074234:\nБюро 1440\nВакансия: hr написала\nЗп: от 350\nЗадачи: \n```\nconst str = 'value1.value2.value3.value4.value5';\n// RESULT\n/*\n{\n  value1: {\n    value2: {\n      value3: {\n        value4: {\n          value5:{}\n        }\n      }\n    }\n  }\n}\n*/\n\nconst toObject = (str) => {\n     const arr = str.split('.')\n     const result = {}\n    \n    const result = arr.reduceRight((acc, cur) => {\n        return {[curr]: acc}\n    },{})\n}\n\n\n==========\n\n// дан массив точек для графика\nconst data = [\n    { time: 0, value: 1 },\n    { time: 1, value: 2 },\n    { time: 2, value: 2 },\n    { time: 3, value: 2 },\n    { time: 4, value: 2 },\n    { time: 5, value: 3 },\n    { time: 6, value: 3 },\n    { time: 7, value: 4 },\n    { time: 8, value: 4 },\n    { time: 9, value: 4 },\n    { time: 10, value: 5 },\n    { time: 11, value: 2 },\n];\n\nconst shortenArr = (arr) => {\n    if (!arr.length) {\n        return []\n    }\n    \n    const result = [arr[0]]\n    \n    for (let i = 1; i < arr.length; i++) {\n        const cur = arr[i]\n        const prev = arr[i - 1]\n        const next = arr[i + 1]\n        \n        if (cur.value !== prev.value  cur.value !== next?.value) {\n            result.push(cur)\n        }\n    }\n    \n    return result\n}\n \n// часто значение по оси Y одно и тоже на протяжении долгого времени\n// чтобы не рисовать тысячи лишних точек нужно определить только точки имеющие значение\n// в серии одинаковых точек значение имеют только первая и последняя\n// таки образом на выходе алгоритма должно получится\n \nconst result = [\n    { time: 0, value: 1 },\n    { time: 1, value: 2 },\n    { time: 4, value: 2 },\n    { time: 5, value: 3 },\n    { time: 6, value: 3 },\n    { time: 7, value: 4 },\n    { time: 9, value: 4 },\n    { time: 10, value: 5 },\n    { time: 11, value: 5 },\n];\n\n\n========\n\n\n// указать на проблемные места, объяснить почему\n \ninterface CommentEditorProps {\n  isShow: boolean;\n  index?: number;\n  initialComment?: string;\n  handleAddComment: (comment: string) => void;\n  handleChangeComment: (index: number, comment: string) => void;\n  onClose: () => void;\n}\nconst CommentEditor = ({\n  isShow,\n  index,\n  initialComment,\n  handleAddComment,\n  handleChangeComment,\n  onClose,\n}: CommentEditorProps) => {\n  const [value, setValue] = useState(initialComment  '');\n  const handleClick = () => {\n    if (index) {\n      handleChangeComment(index, value);\n    } else {\n      handleAddComment(value);\n    }\n  };\n  if (!isShow) {\n    return null;\n  }\n  return (\n    <div>\n      <input value={value} onChange={(e) => setValue(e.target.value)} />\n      <button onClick={handleClick}>{index ? 'Изменить' : 'Добавить'}</button>\n      <button onClick={onClose}>Отмена</button>\n    </div>\n  );\n};\n \n \n// example ['comment1', 'comment2', 'comment3']\ninterface Props {\n    initialComments: string[]\n}\nexport const Comments = ({initialComments}: Props) => {\n  const [showForm, setShowForm] = useState(false);\n  const [index, setIndex] = useState<number>();\n  const [comments, setComments] = useState(initialComments);\n  const handleAddComment = (comment: string) => {\n    setComments([...comments, comment]);\n  };\n  const handleChangeComment = (index: number, comment: string) => {\n    const newComments = [...comments];\n    newComments[index] = comment;\n    setComments(newComments);\n  };\n  return (\n    <div>\n      {comments.map((comment, index) => (\n        <div\n          key={index}\n          onClick={() => {\n            setIndex(index);\n            setShowForm(true);\n          }}\n        >\n          <p>{comment}</p>\n        </div>\n      ))}\n      <button onClick={() => setShowForm(true)}>Добавить комментарий</button>\n      <CommentEditor\n        isShow={showForm}\n        handleAddComment={handleAddComment}\n        handleChangeComment={handleChangeComment}\n        onClose={() => setShowForm(false)}\n        index={index}\n        initialComment={index ? comments[index] : undefined}\n      />\n    </div>\n  );\n}\n```"
      },
      {
        "timestamp": "2025-06-06 15:01:26",
        "content": "2025-06-06 15:01:26\n Антон -> 2071074234:\nБюро 1440  1 этап софтовый собес с тимлидом\n\nСпрашивал за опыт, почему ухожу. В целом просто говорили за опыт.\n\nВ конце была задача на подумать: как организовать отображение большой таблицы. Нужно перечислить, что у нас есть пагинация, бесконечный скролл, виртуализация, кеширование. Как это всё можно примерно сделать и какими либами",
        "full_content": "2025-06-06 15:01:26\n Антон -> 2071074234:\nБюро 1440  1 этап софтовый собес с тимлидом\n\nСпрашивал за опыт, почему ухожу. В целом просто говорили за опыт.\n\nВ конце была задача на подумать: как организовать отображение большой таблицы. Нужно перечислить, что у нас есть пагинация, бесконечный скролл, виртуализация, кеширование. Как это всё можно примерно сделать и какими либами"
      },
      {
        "timestamp": "2025-03-13 17:32:39",
        "content": "2025-03-13 17:32:39\n Лёша -> 2071074234:\nКомпания: БЮРО 1440 (техсобес)\nВакансия: hr написал\nЗп: запросил 300\n\nЗадачи:\n//что выведется\nfunction push(a: Number[]){\na.push(4)\nconsole.log(a.push(5))\nconsole.log(a)\n}\nconst a = [1,2,3]\npush(a)\nОтвет: \n5\n[1 2 3 4 5]\n\n\n//что выведется\nconst obj1 = {a: 1, b: 2}\nconst obj2 = {b: 3, c: 4}\nconst obj3 = {...obj1, ...obj2}\nconsole.log(obj3)\nОтвет: {a: 1, b: 3, c: 4}\n\n\n//что выведется\nconst person = {\n    name: 'Alyce',\n    adress: {\n        zip: 123456,\n    ...",
        "full_content": "2025-03-13 17:32:39\n Лёша -> 2071074234:\nКомпания: БЮРО 1440 (техсобес)\nВакансия: hr написал\nЗп: запросил 300\n\nЗадачи:\n//что выведется\nfunction push(a: Number[]){\na.push(4)\nconsole.log(a.push(5))\nconsole.log(a)\n}\nconst a = [1,2,3]\npush(a)\nОтвет: \n5\n[1 2 3 4 5]\n\n\n//что выведется\nconst obj1 = {a: 1, b: 2}\nconst obj2 = {b: 3, c: 4}\nconst obj3 = {...obj1, ...obj2}\nconsole.log(obj3)\nОтвет: {a: 1, b: 3, c: 4}\n\n\n//что выведется\nconst person = {\n    name: 'Alyce',\n    adress: {\n        zip: 123456,\n        city: 'Wonderland'\n    }\n};\nconst { name, adress: { city, zip } } = person;\nconsole.log(name, city, adress);\nОтвет: Alyce Wonderland Error\n\n\n// какой в итоге будет стейт\nconst [count, setCount] = useState(0)\nsetCount(count + 1)\nsetCount(count + 1)\nsetCount(count + 1)\nОтвет: 1\n\nЧто вызывает ререндер компонента?\nКак работает useMemo(), и что он делает?\n\nСделать интерфейс для кнопки из фигмы.(макет слишком большой для поста)\n\nКакие утилитарные типы знаешь (partial, required)?\n\n2 часть \n\n//Что выведется\nfor(var i = 0; i<5; i++){\n    setTimeout(()=>{\n        console.log(i)\n    }, 1000)\n}\n\nfor(let i = 0; i<5; i++){\n    setTimeout(()=>{\n        console.log(i)\n    }, 1000)\n}\nОтвет: \n55555 (через 1 сек)\n01234 (через 1 сек)\n\nВ чем разница между setTimeout() и window.setTimeout()\nЧем forEach отличается от for?\nЧто такое useLayoutEffect и его минус?\nКак работает обновление стейта, если мы несколько раз делаем setState(3)?\nКак работает обновление стейта, если мы несколько раз делаем setState({c: 3})?\n//Как работает\nconst count = useRef(null)\nuseEffect(() => {\n    console.log(\"click\", count.current);\n  }, [count.current]);\n\n//По клику на кнопку\ncount.current++\n\n\nЛайвкодинг:\n\nsandbox с решением: https://codesandbox.io/p/devbox/keen-dew-k9l535?workspaceId=ws_9DWHfci4iswbKHfzahnfEo\n\nНужно написать функцию, которая будет применять условие из комента для всего массива.\n\n// To draw a line across the 180th meridian,\n// if the longitude of the second point minus\n// the longitude of original (or previous) point is >= 180,\n// subtract 360 from the longitude of the second point.\n// If it is less than 180, add 360 to the second point.\n\n// if (doesCrossAntimeridian) {\n//   const startLng = geometry.coordinates[0][0];\n//   const endLng = geometry.coordinates[1][0];\n\n//   if (endLng - startLng >= 180) {\n//     geometry.coordinates[1][0] -= 360;\n//   } else if (endLng - startLng < 180) {\n//     geometry.coordinates[1][0] += 360;\n//   }\n// }\n\n\nconst line = [\n  [150.498, -60.086],\n  [151.749, -57.223],\n  [152.789, -54.344],\n  [153.666, -51.451],\n  [154.414, -48.549],\n...\n  [155.058, -45.637]]\n\nПравильного решения я не написал, но это вроде верное:\n\nfunction adjustForAntimeridian(line) {\n  const adjustedLine = [...line];\n\n  for (let i = 1; i < adjustedLine.length; i++) {\n    const startLng = adjustedLine[i - 1][0];\n    const endLng = adjustedLine[i][0];\n\n    if (endLng - startLng >= 180) {\n      adjustedLine[i][0] -= 360;\n    } else if (endLng - startLng < -180) {\n      adjustedLine[i][0] += 360;\n    }\n  }\n\n  return adjustedLine;\n}"
      },
      {
        "timestamp": "2025-03-12 18:51:20",
        "content": "2025-03-12 18:51:20\n Лёша -> 2071074234:\nКомпания: БЮРО 1440 2 этап (общение с тимлидом)\nзп: просил 300 net (для себя сделал пометку, что можно и больше просить)\nгибрид Москва (2 дня)\nвакансия: hr написал\nфидбек: позвали на техсобес\n\nВопросы:\nЧем занимался?\nРасскажи почему в поиске новой работы?\n...Куча вопросов конкретно по легенде...\nКакую ролевую модель у себя использовали?\nОтличия Rudux от Mobx.\nКак ты работал с таблицами (пагинация)?\nReact-dnd, что это такое и как ты это использовал?\nКак ты...",
        "full_content": "2025-03-12 18:51:20\n Лёша -> 2071074234:\nКомпания: БЮРО 1440 2 этап (общение с тимлидом)\nзп: просил 300 net (для себя сделал пометку, что можно и больше просить)\nгибрид Москва (2 дня)\nвакансия: hr написал\nфидбек: позвали на техсобес\n\nВопросы:\nЧем занимался?\nРасскажи почему в поиске новой работы?\n...Куча вопросов конкретно по легенде...\nКакую ролевую модель у себя использовали?\nОтличия Rudux от Mobx.\nКак ты работал с таблицами (пагинация)?\nReact-dnd, что это такое и как ты это использовал?\nКак ты работал с графиками?\nКак отрисовать график (svg, canvas)?\nКак лучше работать с графиком (svg, canvas)?\n\n99% времени мы общались по моему опыту и навыкам указанных в резюме."
      },
      {
        "timestamp": "2024-11-25 13:18:22",
        "content": "2024-11-25 13:18:22\n Qimm -> 2071074234:\nКомпания: Бюро 1440\nЗп: 180-210(вроде вилка такая, очень давно с ними на связи)\nВакансия: затерялась, по причине выше\n\nВопросов не было, только задачки:\n1) что выведет консоль, задачка с debounce, \n2) задача на замену значения ключей в объекте, те же консоли \n3) задачи по реакту( счетчик), несколько вариаций. Как сделать так, чтобы счеьчик запоминал предыдущие значение? (Дописать, додиктовать)\n4) задача как передать от дочернего компонента в родительский ...",
        "full_content": "2024-11-25 13:18:22\n Qimm -> 2071074234:\nКомпания: Бюро 1440\nЗп: 180-210(вроде вилка такая, очень давно с ними на связи)\nВакансия: затерялась, по причине выше\n\nВопросов не было, только задачки:\n1) что выведет консоль, задачка с debounce, \n2) задача на замену значения ключей в объекте, те же консоли \n3) задачи по реакту( счетчик), несколько вариаций. Как сделать так, чтобы счеьчик запоминал предыдущие значение? (Дописать, додиктовать)\n4) задача как передать от дочернего компонента в родительский значение\n5) типизировать кнопки по фигме(написать интерфейс), задать значения по умолчанию \n6) задача на цикл for , с сеттаймаутом и вариациями var и let\n7) еще задачи со счетчиком и условиями, что выведет и почему\nВо второй задаче в счетчике объект и каждый раз будет происходить ререндер, но значение не изменится\n8) задачка со счетчиком и useRef \nexport const Parent = ({ value }) => {\n  const [currentValue, setCurrentValue] = useState(value);\nconst [memoizedValue, setMemoizedValue] = useState(value);\n  useEffect(() => {\n    setCurrentValue(value);\n  }, [value]); // Выполняется каждый раз, когда value изменяется\n\n  return (\n    <div>\n      <div>Value: {value}</div>\n      <div>CurrentValue: {currentValue}</div>\n    </div>\n  );\n};\nexport const Parent = ({ value }) => {\n  const [currentValue, setCurrentValue] = useState(value);\n\n  // Функция для обработки данных от ребёнка\n  const handleChildData = (data) => {\n    console.log('Данные от ребёнка:', data);\n    setCurrentValue(data); // Пример: обновляем state родителя\n  };\n\n  return (\n    <div>\n      <div>Value: {value}</div>\n      <div>CurrentValue: {currentValue}</div>\n      <Child onSendData={handleChildData} /> {/* Передаём функцию в Child */}\n    </div>\n  );\n};\nexport const Child = ({ onEvent }) => {\n  const sendDataToParent = () => {\n    const data = 'Привет от ребёнка!'; // Данные, которые отправляются родителю\n    onEvent(data); // Вызов функции, переданной из родителя\n  };\n\n  return (\n    <button onClick={sendDataToParent}>\n      Отправить данные родителю\n    </button>\n  );\n};\nexport const Child = ({ onEvent }) => {\n  const sendDataToParent = () => {\n    const data = 'Привет от ребёнка!'; // Данные, которые отправляются родителю\n    onEvent(data); // Вызов функции, переданной из родителя\n  };\n\n  return (\n    <button onClick={sendDataToParent}>\n      Отправить данные родителю\n    </button>\n  );\n};"
      }
    ]
  },
  {
    "company": "Совкомбанк",
    "count": 6,
    "records": [
      {
        "timestamp": "2025-06-20 09:37:12",
        "content": "2025-06-20 09:37:12\n Egor -> 2071074234:\nСовкомбанк (какой то проект связанный с инвестициями в облигации для физ. лиц)\nВакансия https://spb.hh.ru/vacancy/108664443\nЗП: от 330\nВопросы: \nСпросил про интересную задачу\n+ - функционального программирования\n+ - ООП\n\nПосле того как узнал, что я не фанат ООП и никогда с ним не работал, остановил собеседование",
        "full_content": "2025-06-20 09:37:12\n Egor -> 2071074234:\nСовкомбанк (какой то проект связанный с инвестициями в облигации для физ. лиц)\nВакансия https://spb.hh.ru/vacancy/108664443\nЗП: от 330\nВопросы: \nСпросил про интересную задачу\n+ - функционального программирования\n+ - ООП\n\nПосле того как узнал, что я не фанат ООП и никогда с ним не работал, остановил собеседование"
      },
      {
        "timestamp": "2025-02-07 14:50:41",
        "content": "2025-02-07 14:50:41\n Артем -> 2071074234:\nКомпания: Совкомбанк\nВопросы\nКак сверстать кнопку\nСемантическая вертска\nasync defer in HTML\nprepend vs append vs inserBefor\nрендеринг страицы в браузер\nдекораторы в JS",
        "full_content": "2025-02-07 14:50:41\n Артем -> 2071074234:\nКомпания: Совкомбанк\nВопросы\nКак сверстать кнопку\nСемантическая вертска\nasync defer in HTML\nprepend vs append vs inserBefor\nрендеринг страицы в браузер\nдекораторы в JS"
      },
      {
        "timestamp": "2025-01-18 14:43:16",
        "content": "2025-01-18 14:43:16\n Ильдус Гизетдинов -> 2071074234:\nСовкомбанк(Казань)\nСсылка на вакансию: Hr написала\nЗп: не обсуждалось\nВопросы:\nКратко про опыт\nЧто такое симантика\nЗачем скрипты вставляем снизу а стили сверху\nReset и Normalaze.css\nbox-sizing:border-box\nВспышка не стилизованного контента\nCritical css\npreload, prefetch, preconnect\n??\n?.\n&&\n||=\n&&=\n...\nsort() toSorted()\nfunction Person(){}\nvoid function Person(){}()\nconst person = new Person()\nclass vs new\nКак сделать истиное константу для объ...",
        "full_content": "2025-01-18 14:43:16\n Ильдус Гизетдинов -> 2071074234:\nСовкомбанк(Казань)\nСсылка на вакансию: Hr написала\nЗп: не обсуждалось\nВопросы:\nКратко про опыт\nЧто такое симантика\nЗачем скрипты вставляем снизу а стили сверху\nReset и Normalaze.css\nbox-sizing:border-box\nВспышка не стилизованного контента\nCritical css\npreload, prefetch, preconnect\n??\n?.\n&&\n||=\n&&=\n...\nsort() toSorted()\nfunction Person(){}\nvoid function Person(){}()\nconst person = new Person()\nclass vs new\nКак сделать истиное константу для объект\nДискрипторы\nАтрибуты дискрипторов get set\nкак сделать константу объекта в объекте obj.a.c\npromis vs await\nслушатели событий\nкак отписаться от событий addEventListener и onClick\nReact Fiber\nBatching\nОтключение Batching (flushSync)\nЧто вызывает перендер\nfunction Test({ isAuth }) {\n  const data = useVerySlowHook();\n\n  // Компонент мемоизируется, чтобы избежать лишних ререндеров\n  const MemoizedComponent = useMemo(\n    () => <Component data={data} />,\n    [data]\n  );\n  if(!isAuth){\n   return <Auth /> \n  }\n  return (\n    <>\n      {MemoizedComponent}\n    </>\n  );\n}\n\ninterface vs type vs абстрактные классы"
      },
      {
        "timestamp": "2025-01-16 16:53:31",
        "content": "2025-01-16 16:53:31\n Ivan -> 2071074234:\nКомпания Совкомбанк\nЗП 230\nВопросы :\nКратко про опыт \nИнтересные задачи \nРаботал ли микрофронтами\nЧто такое семантика? Для чего нужна ?\nReset и normalize css\nВендерный префикс\nDefer async \ntoSorted\n??\n?.\n||=\n&&=\n…\nКакие бывают функции и в чем разница ?\nThis\nДелегирование событий\nEventloop\nКак можно повесить слушатель событий в нативном js?\nВсплытие событий\nReact , virtual dom, react fiber, react recosilation\nВо что компилируется jsx \nType interface абстра...",
        "full_content": "2025-01-16 16:53:31\n Ivan -> 2071074234:\nКомпания Совкомбанк\nЗП 230\nВопросы :\nКратко про опыт \nИнтересные задачи \nРаботал ли микрофронтами\nЧто такое семантика? Для чего нужна ?\nReset и normalize css\nВендерный префикс\nDefer async \ntoSorted\n??\n?.\n||=\n&&=\n…\nКакие бывают функции и в чем разница ?\nThis\nДелегирование событий\nEventloop\nКак можно повесить слушатель событий в нативном js?\nВсплытие событий\nReact , virtual dom, react fiber, react recosilation\nВо что компилируется jsx \nType interface абстрактный класс\nНаследование в класс"
      },
      {
        "timestamp": "2024-11-19 19:51:45",
        "content": "2024-11-19 19:51:45\n Гладких Александр -> 2071074234:\nКомпания Совкомбанк\nВакансия hr написала\nЗП: не обсуждали\nВопросы\n- Расскажи о своем опыте \n- Причины ухода\n- Назови 3 своих положительных качества и три отрицательных\n(На этот вопрос много времени ушло) \n- Расскажи о процессах которые идут после того как задача\nпришла от бизнеса\n- Вопросы про команду, про стек, про взаимодействие в команде\n- Работал ли с Next-ом и готов ли работать\n- Какаие либы использовали для форм и графиков\n\nЗадача\n\n- Бы...",
        "full_content": "2024-11-19 19:51:45\n Гладких Александр -> 2071074234:\nКомпания Совкомбанк\nВакансия hr написала\nЗП: не обсуждали\nВопросы\n- Расскажи о своем опыте \n- Причины ухода\n- Назови 3 своих положительных качества и три отрицательных\n(На этот вопрос много времени ушло) \n- Расскажи о процессах которые идут после того как задача\nпришла от бизнеса\n- Вопросы про команду, про стек, про взаимодействие в команде\n- Работал ли с Next-ом и готов ли работать\n- Какаие либы использовали для форм и графиков\n\nЗадача\n\n- Был один компонент и собеседующий по очередно \nдавал задачи и нужно было их реализовывать\n\n- создать кастомный инпут\n- реализовать возможность менять цвет инпута один оранжевый\nдругой черный например\n- тоже самое с placeholder  - ом\n- задезеблить 2 инпут\n- нужно исключить возможность разработчика который использует \nкастомный инпут поменять type\n- реализовать возможность у первого инпута чтобы была подсказка\n- реализовать отображение значения введенного в инпут \n- затем добавить button по нажатии добавлять в конец 1\n- реализовать отображение длины символов введых в инпуты\n\n\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport classNames from \"classnames\";\n\nimport \"./styles.css\";\n\ntype CustomInputProps = Omit<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  \"type\"\n> & {\n  hint?: React.ReactNode;\n};\n\nconst CustomInput = ({\n  placeholder,\n  className,\n  hint,\n  value: externalValue,\n  ...props\n}: CustomInputProps) => {\n  const [inputValue, setInputValue] = React.useState(externalValue || \"\");\n\n  const handleInputChange = (event) => {\n    const newValue = event.target.value;\n    setInputValue(newValue);\n  };\n\n  return (\n    <>\n      <input\n        className={`custom-input ${className}`}\n        placeholder={placeholder}\n        value={inputValue}\n        onChange={handleInputChange}\n        {...props}\n      />\n      {hint && <>{hint}</>}\n      <div>{inputValue.length}</div>\n    </>\n  );\n};\n\nfunction App() {\n  const [step, setStep] = React.useState(\"1\");\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setStep(e.target.value);\n  };\n\n  const handleAddOne = () => {\n    setStep((prev) => prev + \"1\");\n  };\n\n  return (\n    <div className=\"app\">\n      <div>{step}</div>\n\n      <button onClick={handleAddOne}>Увеличить шаг</button>\n\n      <CustomInput\n        value={step}\n        onChange={handleChange}\n        hint={<div>Введите размер шага</div>}\n      />\n\n      <CustomInput placeholder=\"Введите имя\" className=\"border-orange \" />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);"
      },
      {
        "timestamp": "2024-06-05 10:49:50",
        "content": "2024-06-05 10:49:50\n Санжар -> 2071074234:\nКомпания: Совкомбанк [1 этап]\nСсылка на вакансию: https://ufa.hh.ru/vacancy/98934348\nЗП: 350к-380к\nУспех: ✅\nФидбек: говорили про опыт (какие задачи решал, как и почему выбирал такие решения), иногда просили подробнее рассказать про некоторые технологии, были несколько простых лайвкод задач\n\nВопросы:\n- Что такое tree shaking\n- Что такое Virtual DOM\n- Как можно напрямую взаимодействовать с Virtual DOM во vue\n- Жизненый цикл компонента, разница хуков creat...",
        "full_content": "2024-06-05 10:49:50\n Санжар -> 2071074234:\nКомпания: Совкомбанк [1 этап]\nСсылка на вакансию: https://ufa.hh.ru/vacancy/98934348\nЗП: 350к-380к\nУспех: ✅\nФидбек: говорили про опыт (какие задачи решал, как и почему выбирал такие решения), иногда просили подробнее рассказать про некоторые технологии, были несколько простых лайвкод задач\n\nВопросы:\n- Что такое tree shaking\n- Что такое Virtual DOM\n- Как можно напрямую взаимодействовать с Virtual DOM во vue\n- Жизненый цикл компонента, разница хуков created и mounted, в каком из этих хуков дергал бы данные из апи, почему\n- Преимущества vite перед webpack\n\nЗадачи:\n1) Есть функция f, она должна строго принимать в качестве параметров a:string, b:string или a:number, b:number. Нужно типизировать ее в соответствии с требованиями\nfunction f(a, b) {}\n2) Написать тело функции pause которая будет откладывать выполнение функции some\nasync function f() {\n  await pause();\n  some();\n}\n\nfunction pause() {}\n3) Дописать код, который в результате последовательно выведет в логах a, b, c. Функции a, b, c нельзя переписывать\nfunction a(callback) {\n  setTimeout(() => {\n    callback(\"a\");\n  }, Math.random() * 10);\n}\n\nfunction b() {\n  setTimeout(() => {\n    callback(\"b\");\n  }, Math.random() * 10);\n}\n\nfunction c() {\n  setTimeout(() => {\n    callback(\"c\");\n  }, Math.random() * 10);\n}"
      }
    ]
  },
  {
    "company": "Финуслуги",
    "count": 5,
    "records": [
      {
        "timestamp": "2025-07-10 18:10:55",
        "content": "2025-07-10 18:10:55\n Даниил -> 2071074234:\nФинуслуги Финал\n1. Что предпочитаешь работать в команде или в одного?\n2. Как ты будешь доносить тимлиду, что он не прав?\n3. Как ты относишься к критике?\n4. Какие задачи ты делаешь в первую очередь?\n5. Бывало ли такое что переключался между несколькими контекстами?\n6. Что делаешь если прилетает срочная задача в 17:59?\n7. Что делаешь чтобы не выгореть?\n8. Как планируешь свой день?\n9. Было ли такое что просыпаешься и не хочешь работать?",
        "full_content": "2025-07-10 18:10:55\n Даниил -> 2071074234:\nФинуслуги Финал\n1. Что предпочитаешь работать в команде или в одного?\n2. Как ты будешь доносить тимлиду, что он не прав?\n3. Как ты относишься к критике?\n4. Какие задачи ты делаешь в первую очередь?\n5. Бывало ли такое что переключался между несколькими контекстами?\n6. Что делаешь если прилетает срочная задача в 17:59?\n7. Что делаешь чтобы не выгореть?\n8. Как планируешь свой день?\n9. Было ли такое что просыпаешься и не хочешь работать?"
      },
      {
        "timestamp": "2025-07-10 18:09:47",
        "content": "2025-07-10 18:09:47\n Даниил -> 2071074234:\nФинуслуги Техничка\n1. Какие семантические теги знаешь?\n2. Можно ли в section объявить header? // да можно в спеке не запрещается\n3. Напиши свой кастомный чекбокс без использования JS\n<label class=\"checkbox-container\">\n  <input name=\"checkbox\" type=\"checkbox\" class=\"checkbox\" />\n  <span class=\"custom-checkbox\"></span>\n  <span>соглашение</span>\n</label>\n.checkbox-container {\n  display: flex;\n  align-items: center;\n  column-gap: 8px;\n  position: relative;\n...",
        "full_content": "2025-07-10 18:09:47\n Даниил -> 2071074234:\nФинуслуги Техничка\n1. Какие семантические теги знаешь?\n2. Можно ли в section объявить header? // да можно в спеке не запрещается\n3. Напиши свой кастомный чекбокс без использования JS\n<label class=\"checkbox-container\">\n  <input name=\"checkbox\" type=\"checkbox\" class=\"checkbox\" />\n  <span class=\"custom-checkbox\"></span>\n  <span>соглашение</span>\n</label>\n.checkbox-container {\n  display: flex;\n  align-items: center;\n  column-gap: 8px;\n  position: relative;\n}\n\n.checkbox {\n  height: 0;\n  width: 0;\n  opacity: 0;\n  position: absolute;\n}\n\n.custom-checkbox {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 12px;\n  height: 12px;\n  border: 2px solid #ccc;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.checkbox:checked + .custom-checkbox {\n  background: url('https://img.icons8.com/?size=12&id=sz8cPVwzLrMP&format=png&color=000000');\n}\n\n\n5. Как расположить элемент по центру?\n6. Оптимизировал ли картинки для ретины и как? // использовать srcset с разными изображениями под разрешения (1x, 2x) и одно дефолтное.\n7. Занимался ли доступностью на странице?\n8. задача на вывод ошибок (было выше)\n9. какие типы в ts знаешь?\n10. отличие any от unknown\n11. какие утилитные типы знаешь\n12. реализуй partial свой  \ntype MyPartial<T> = {  \n  [K in keyof T]?: T[K]  \n}\n13. реализуй omit свой   \ntype MyOmit<T, K> = Pick<T, Exclude<keyof T, K>>\n14. Какие минусы классовых компонентов\n15. для чего нужен key\n16. задача на оптимизацию (была выше)\n17. Вопрос про метрики lighthouse какие знаешь и как оптимизировать\n18. Разница между ssr, ssg, spa\n19. Для чего используются scss модули"
      },
      {
        "timestamp": "2025-07-06 21:03:38",
        "content": "2025-07-06 21:03:38\n Mark Nikonorov ⚛ -> 2071074234:\nФинуслуги (техничка)\nзп 350\n1. Пользовался ли zustand? \n2. Какие семантические теги знаешь?\n3. Можно ли в section объявить header? // да можно в спеке не запрещается\n4. напиши кастомный чекбокс без использования js\n<label class=\"checkbox\">\n        <input type=\"checkbox\" class=\"checkbox__hidden\">\n        <span class=\"checkmark\"></span>\n        click me\n    </label>\n.checkbox {\n            position: relative;\n            display: flex;\n         ...",
        "full_content": "2025-07-06 21:03:38\n Mark Nikonorov ⚛ -> 2071074234:\nФинуслуги (техничка)\nзп 350\n1. Пользовался ли zustand? \n2. Какие семантические теги знаешь?\n3. Можно ли в section объявить header? // да можно в спеке не запрещается\n4. напиши кастомный чекбокс без использования js\n<label class=\"checkbox\">\n        <input type=\"checkbox\" class=\"checkbox__hidden\">\n        <span class=\"checkmark\"></span>\n        click me\n    </label>\n.checkbox {\n            position: relative;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n        }\n\n        .checkbox__hidden {\n            height: 0;\n            width: 0;\n            position: absolute;\n            top: 0;\n            left: 0;\n            opacity: 0;\n        }\n\n        .checkmark {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 2px;\n            width: 10px;\n            height: 10px;\n            background: none;\n            transition: background-color .3s ease-in-out;\n        }\n\n        .checkbox:has(.checkbox__hidden:checked)>.checkmark {\n            background: red;\n        }\n5. Как расположить элемент по центру? \n6. Оптимизировал ли картинки для ретины и как? // использовать srcset с разными изображениями под разрешения (1x, 2x) и одно дефолтное.\n7. Занимался ли доступностью на странице?\n8. задача на вывод ошибок (было выше)\n9. какие типы в ts знаешь?\n10. отличия any от unknown\n11. Какие утилитные типы знаешь \n12. реализуй partial свой\ntype MyPartial<T> = {\n  [K in keyof T]?: T[K]\n}\n13. реализуй omit свой\ntype MyOmit<T, K> = Pick<T, Exclude<keyof T, K>>\n14. Какие минусы классовых компонентов\n15. для чего нужен key\n16. задача на оптимизацию (была выше)\n17. Вопрос про метрики lighthouse какие знаешь и как оптимизировать\n19. Разница между ssr, ssg, spa\n20. Для чего используются scss модули"
      },
      {
        "timestamp": "2025-07-06 19:39:49",
        "content": "2025-07-06 19:39:49\n Mark Nikonorov ⚛ -> 2071074234:\nФинуслуги (финал)\nзп макс 350\n1. Что предпочитаешь работать в команде или в одного?\n2. Как ты будешь доносить тимлид, что он не прав?\n3. Как ты относишься к критике?\n4. Какие задачи ты делаешь в первую очередь?\n5. Бывало ли такое что переключался между несколькими контекстами?\n6. Что делаешь если прилетает срочная задача в 17:59?\n7. Что делаешь чтобы не выгореть?\n8. Как планируешь свой день?\n9. Было ли такое что просыпаешься и не хочешь работа...",
        "full_content": "2025-07-06 19:39:49\n Mark Nikonorov ⚛ -> 2071074234:\nФинуслуги (финал)\nзп макс 350\n1. Что предпочитаешь работать в команде или в одного?\n2. Как ты будешь доносить тимлид, что он не прав?\n3. Как ты относишься к критике?\n4. Какие задачи ты делаешь в первую очередь?\n5. Бывало ли такое что переключался между несколькими контекстами?\n6. Что делаешь если прилетает срочная задача в 17:59?\n7. Что делаешь чтобы не выгореть?\n8. Как планируешь свой день?\n9. Было ли такое что просыпаешься и не хочешь работать?"
      },
      {
        "timestamp": "2025-06-16 22:58:16",
        "content": "2025-06-16 22:58:16\n Эмир -> 2071074234:\nФинуслуги\nзп 250к\n\nТеория:\n1. Какие семантические теги ты знаешь?\nОтвет:\nNav figcaption aside section header. Footer. \n2. Как расположить объект в центре. \nDisplay flex. \nJustify content center. \nAlign items center. \n\n3. Сверстай кастомный чекбокс\n<label >\n<input type=\"checkbox-item\">\n‹span class=\"custom-checkbox\"></span>\n</label>\n\nCSS\n/*background-color: red;\nbackground-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0...",
        "full_content": "2025-06-16 22:58:16\n Эмир -> 2071074234:\nФинуслуги\nзп 250к\n\nТеория:\n1. Какие семантические теги ты знаешь?\nОтвет:\nNav figcaption aside section header. Footer. \n2. Как расположить объект в центре. \nDisplay flex. \nJustify content center. \nAlign items center. \n\n3. Сверстай кастомный чекбокс\n<label >\n<input type=\"checkbox-item\">\n‹span class=\"custom-checkbox\"></span>\n</label>\n\nCSS\n/*background-color: red;\nbackground-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3e%3c/svg%3e\")*/\n\n.checkbox-item {\n  position:absolute;\n  opacity: 0;\n  height: 0;\n  width: 0;\n}\n\n.custom-checkbox {\n  width:10px;\n  height: 20px;\n  border: 1px solid #ccc;\n  display: block;\n}\n\n.custom-checkbox:after {\n  content: \"\";\n  position: absolute;\n  display: none;\n}\n\n.checkbox-item:checked + .custom-checkbox {\n  background-color: #000\n}\n\n.checkbox-item:checked + .custom-checkbox:after {\n  width: 5px;\n  height: 10px;\n  display: block;\n}\n\n4. Что такое область видимости переменной \nОбласть видимости (scope) — это контекст, в котором переменная доступна (видна) в коде.\n\n5. Типы ts\nenum, object, array, unknown, any, void, never\n6.оптимизировать инпут (на каждую кнопку подавал запрос на сервер)\nimport * as React from \"https://cdn.skypack.dev/react@17.0.1\";\nimport * as ReactDOM from \"https://cdn.skypack.dev/react-dom@17.0.1\";\n\nconst App = () => {\n  const [text, setText] = React.useState(\"\");\n  \n  const ref = React.useRef('');\n  \n  const sendMessage = React.useCallback(() => {\n    console.log(\"SEND MESSAGE!\", ref.current);\n  }, []);\n  \n\n  return (\n    <div>\n      <div>Текст: {text}</div>\n      <input\n        type=\"text\"\n        name=\"message\"\n        value={text}\n        onChange={e => {\n          const value = e.target.value\n          ref.current = value;\n          setText(value)\n        }}\n      />\n\n      <Button handlerClick={sendMessage} />\n    </div>\n  );\n};\n\nconst Button =React.memo(({ handlerClick }) => {\n  console.log(\"Render Button\");\n  return <button onClick={handlerClick}>Click me!</button>;\n});\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n7. Kiss dry yagni \nKISS – Keep It Simple, Stupid пиши код проще\nDRY – Don't Repeat Yourself не повторяйся\nYAGNI – You Aren’t Gonna Need It не пиши лишний код\n8. Solid \n5 принципов объектно-ориентированного проектирования, которые помогают создавать гибкий, поддерживаемый и расширяемый код.\n9. что выведется в консоли\n// setTimeout(function timeout() {\n//     console.log('1');\n// }, 0);\n\n// let p = new Promise(function(resolve, reject) {\n//     console.log('2');\n//     resolve();\n// });\n\n// p.then(function(){\n//     console.log('3');\n// });\n\n// console.log('4');"
      }
    ]
  },
  {
    "company": "Редсофт",
    "count": 4,
    "records": [
      {
        "timestamp": "2024-12-09 16:06:21",
        "content": "2024-12-09 16:06:21\n Aleksandr -> 2071074234:\nКомпания: РедСофт (Live coding)\nВакансия: https://hh.ru/vacancy/110876283?hhtmFrom=chat\nЗп: не обсуждалась\ncod:\n/**\n * Задача 1:\n * Создать массив состоящий из уникальных значений исходного и \n * вывести его значение в консоль\n */\n\n// const fruits = [\"kiwi\", \"apple\", \"kiwi\", \"orange\", \"kiwi\", \"apple\"];\n// const uniqueFruits = [... new Set(fruits)];\n\n// console.log(uniqueFruits); // [\"kiwi\", \"apple\", \"orrange\"]\n\n/**\n* Задача 2:\n* Необходимо расширить ...",
        "full_content": "2024-12-09 16:06:21\n Aleksandr -> 2071074234:\nКомпания: РедСофт (Live coding)\nВакансия: https://hh.ru/vacancy/110876283?hhtmFrom=chat\nЗп: не обсуждалась\ncod:\n/**\n * Задача 1:\n * Создать массив состоящий из уникальных значений исходного и \n * вывести его значение в консоль\n */\n\n// const fruits = [\"kiwi\", \"apple\", \"kiwi\", \"orange\", \"kiwi\", \"apple\"];\n// const uniqueFruits = [... new Set(fruits)];\n\n// console.log(uniqueFruits); // [\"kiwi\", \"apple\", \"orrange\"]\n\n/**\n* Задача 2:\n* Необходимо расширить функционал класса Array, написав функцию, \n* которая приводит массив к 1 уровню вложенности\n* ([1, 2, [1, 2, [1, 2]], [1, 2]]) => [1, 2, 1, 2, 1, 2, 1, 2]\n*/\n\nArray.prototype.flatten = function () {\n    for(let i = 0; i < this.length; i++) {\n        if(Array.isArray(this[i])) {\n            this.splice(i, 1, ...this[i].flatten())\n        }\n        \n    }\n    return this\n}\n\n// const myArray = [1, 2, [[1, 2], [1, 2]], [1, 2]]\n// console.log(myArray.flatten()); // [1, 2, 1, 2, 1, 2, 1, 2]\n// console.log(myArray);           // [1, 2, 1, 2, 1, 2, 1, 2]\n\n/**\n * Задача 3:\n * Необходимо написать функцию, которая принимает в аргумент функцию (fn) \n * и возвращает мемоизированную версию этой функции\n * Мемоизированная функция никогда не вызывается дважды с теме же аргументами, а возвращает закэшированное значение.\n */\n\nconst memoize = (fn) => {\n    const cache = new Map()\n    \n    return function (...args) {\n        const key = JSON.stringify(args)\n        if(cache.has(key)) {\n            return cache.get(key)\n        }\n        const result = fn(...args)\n        \n        cache.set(key, result)\n        \n        return result\n    }\n}\n\n// let callCount = 0;\n// const memoizedFn = memoize((a, b) => {\n//   callCount += 1;\n//   return a + b;\n// });\n\n// console.log(memoizedFn(1, 2)); // 3\n// console.log(memoizedFn(1, 2)); // 3\n// console.log(\"callCount\", callCount); // 1\n// console.log(memoizedFn(1, 3)); // 4\n// console.log(\"callCount\", callCount); // 2\n\n/**\n * Задача 4:\n * Необходимо написать функцию, которая принимает в аргумент функцию \n * (fn) и возвращает карированную версию этой функции.\n * Каррирование – это трансформация функций таким образом, \n * чтобы они принимали аргументы не как f(a, b, c), а как f(a)(b)(c), f(a, b)(c), f(a)(b, c).\n */\nconst curry = (fn) => {\n    return function runCurry(...args) {\n        if(args.length >= fn.length) {\n            return fn(...args)\n        } else {\n            return function (...nextArgs) {\n                return runCurry(...args, ...nextArgs)\n            }\n        } \n        \n    }\n}\n\n\nconst curriedFn = curry((a, b, c, d) => {\n  return a + b + c + d;\n});\n\n// console.log(curriedFn(1, 2, 3)(4)); // 10\n// console.log(curriedFn(1)(2)(3)(4)); // 10\n\n\n/**\n * Задача 5:\n * Необходимо написать функцию определяющую возможность сортировки \n * массива из цифр по группам,\n * каждая из которых - массив длинной groupSize, и состоит из \n * уникальных последовательных элементов\n * ([1,2,3,6,2,3,4,7,8], 3) => [1,2,3],[2,3,4],[6,7,8]\n * ([1,2,3,4,5], 4) Функция вернёт false\n */\n \n//  [1, 2, 3, 3, 4, 6, 7, 8], 2 => [1, 2], [3, 4], [3, 6], [7, 8]\nconst canSplit = (arr, groupSize) => {\n    if(arr.length % groupSize !== 0) return false\n    \n    const unique = {}\n    \n    arr.sort((a, b) => a - b)\n    \n    for(let i = 0; i < arr.length; i += 1) {\n        if (arr[i] > 0) {\n            let next = arr[i] + 1;\n            arr[i] = -1;\n            let currentGroupSize = 1;\n            let j = i + 1;\n            while (j < arr.length && currentGroupSize < groupSize) {\n                if (arr[j] === next) {\n                    next = arr[j] + 1;\n                    arr[j] = -1;\n                    currentGroupSize += 1;\n                }\n                j += 1;\n            }\n                    \n            if (currentGroupSize !== groupSize) return false\n        }\n    }\n    return true\n}\n\nconsole.log(canSplit([1, 2, 3, 6, 2, 3, 4, 7, 8], 3)); // true\nconsole.log(canSplit([1, 2, 3, 4, 5], 4)); // false"
      },
      {
        "timestamp": "2024-12-09 15:56:32",
        "content": "2024-12-09 15:56:32\n Aleksandr -> 2071074234:\nКомпания: РедСофт\nВакансия: https://hh.ru/vacancy/110876283?hhtmFrom=chat\nЗп: не обсуждалась\nВопросы:\n 1) Что такое виртуализация\n 2) Рассказать о PWA\n 3) Web Workers\n 4) JWT\n 5) WebSocet\n 6) Как распространяются события в js (очень подробно)\n 7) Все ли события всплывают\n 8) С какии колекциями ты работал в js\n 9) Как работает EventLoop\n 10) В контексте EventLoop где будет отрабатывать requestAnimationFrame()\n 11) Что такое Debounce\n 12) С каким utili...",
        "full_content": "2024-12-09 15:56:32\n Aleksandr -> 2071074234:\nКомпания: РедСофт\nВакансия: https://hh.ru/vacancy/110876283?hhtmFrom=chat\nЗп: не обсуждалась\nВопросы:\n 1) Что такое виртуализация\n 2) Рассказать о PWA\n 3) Web Workers\n 4) JWT\n 5) WebSocet\n 6) Как распространяются события в js (очень подробно)\n 7) Все ли события всплывают\n 8) С какии колекциями ты работал в js\n 9) Как работает EventLoop\n 10) В контексте EventLoop где будет отрабатывать requestAnimationFrame()\n 11) Что такое Debounce\n 12) С каким utility types в ts ты работал (про парочку из них расспросит)\n 13) В чем разница между any от unknow (как пользоваться unknow)\n 14) Разница между interface & type (в каких случаях применять interface | type)\n 15) Отличия событий в React и js\n 16) Как работает portal в React и как пользоваться\n 17) Будут ли всплывть события в portal и почему\n 18) Мини задачка, есть два состояния count и строка надо изменять count при изменении сртоки. Решение обьеденить состояния и  вынести в отдельный хук."
      },
      {
        "timestamp": "2024-12-06 16:40:05",
        "content": "2024-12-06 16:40:05\n Maksim -> 2071074234:\nКомпания: РедСофт(2 этап LiveCode)                                                                                                                                                                                    Задачи(было несколько вариантов решений):\n/*\n * Создать массив с уникальными значениями из исходного массива.\n * Для этого используем метод filter или объект Set.\n */\n\nconst fruits = [\"kiwi\", \"apple\", \"kiwi\", \"orange\", \"kiwi\", \"apple\"];\n\n// Ис...",
        "full_content": "2024-12-06 16:40:05\n Maksim -> 2071074234:\nКомпания: РедСофт(2 этап LiveCode)                                                                                                                                                                                    Задачи(было несколько вариантов решений):\n/*\n * Создать массив с уникальными значениями из исходного массива.\n * Для этого используем метод filter или объект Set.\n */\n\nconst fruits = [\"kiwi\", \"apple\", \"kiwi\", \"orange\", \"kiwi\", \"apple\"];\n\n// Используем объект Set для получения уникальных значений.\n// Set автоматически удаляет дублирующиеся значения.\nconst uniqueFruits = Array.from(new Set(fruits));\n\n// Выводим уникальные значения в консоль.\nconsole.log(uniqueFruits); // [\"kiwi\", \"apple\", \"orange\"]\n/*\n * Функция для приведения массива к 1 уровню вложенности\n */\nfunction flatten(array) {\n    const result = [];\n\n    // Рекурсивная функция для обработки элементов массива\n    const flattenHelper = (arr) => {\n        for (const item of arr) {\n            if (Array.isArray(item)) {\n                flattenHelper(item); // Если элемент массив — развернуть его\n            } else {\n                result.push(item); // Если не массив — добавить в результат\n            }\n        }\n    };\n\n    flattenHelper(array); // Запускаем обработку входного массива\n    return result;\n}\n\n// Пример использования\nconst nestedArray = [1, 2, [1, 2, [1, 2]], [1, 2]];\nconsole.log(flatten(nestedArray)); // [1, 2, 1, 2, 1, 2, 1, 2]\n// Расширяем прототип Array новым методом flatten\nArray.prototype.flatten = function() {\n    const result = [];\n\n    // Рекурсивная функция для разворачивания вложенных массивов\n    const flattenHelper = (arr) => {\n        for (const item of arr) {\n            if (Array.isArray(item)) {\n                flattenHelper(item); // Если элемент массив — развернуть его\n            } else {\n                result.push(item); // Если не массив — добавить в результат\n            }\n        }\n    };\n\n    flattenHelper(this); // Разворачиваем текущий массив\n\n    // Очищаем исходный массив и заполняем результатом\n    this.splice(0, this.length, ...result);\n\n    // Возвращаем изменённый массив для удобства\n    return this;\n};\n\n// Пример использования\nconst nestedArray = [1, 2, [1, 2, [1, 2]], [1, 2]];\nnestedArray.flatten(); // Изменяет исходный массив\nconsole.log(nestedArray); // [1, 2, 1, 2, 1, 2, 1, 2]\n* Задача 2:\n* Необходимо расширить функционал класса Array, написав функцию, которая приводит массив \n к 1 уровню вложенности\n* ([1, 2, [1, 2, [1, 2]], [1, 2]]) => [1, 2, 1, 2, 1, 2, 1, 2]\n*/\n\nArray.prototype.flatten = function(){\n        for (let i = 0; i < this.length; i ++){\n            if(Array.isArray(this[i])){\n                    this.splice(i, 1, ...this[i].flatten())\n            }\n        }\n    return this\n}\nfunction memoize(fn) {\n    const cache = {};\n\n    return function(...args) {\n        const key = JSON.stringify(args);\n\n        if (cache[key]) {\n            return cache[key];\n        } else {\n            const result = fn(...args);\n            cache[key] = result;\n            return result;\n        }\n    };\n}\n/**\n * Задача 4:\n * Необходимо написать функцию, которая принимает в аргумент функцию (fn) и возвращает карированную \n версию этой функции.\n * Каррирование – это трансформация функций таким образом, чтобы они принимали аргументы \n  не как f(a, b, c), а как f(a)(b)(c), f(a, b)(c), f(a)(b, c)\n */\n \n function curry(fn){\n     return function curried(...args){\n         if (args.length !== fn.length) {\n            return fn.bind(null, ...args);\n         } \n         return fn(...args);\n         \n         \n         \n        //  if(args.length >= fn.length){\n        //      return fn(...args)\n        //  }else{\n        //      return (...nextArgs) => curried(...args,...nextArgs)\n     }\n }\n\nconst curriedFn = curry((a, b, c, d) => {\n  return a + b + c + d;\n});\n\nconsole.log(curriedFn(1, 2, 3)(4)); // 10\nconsole.log(curriedFn(1)(2)(3)(4)); // 10"
      },
      {
        "timestamp": "2024-12-02 16:30:28",
        "content": "2024-12-02 16:30:28\n Maksim -> 2071074234:\nКомпания: РедСофт                                                                                                                                                                                                                                    Вакансия: https://hh.ru/vacancy/110876283?hhtmFrom=favorite_vacancy_list                                                                                                                                            ...",
        "full_content": "2024-12-02 16:30:28\n Maksim -> 2071074234:\nКомпания: РедСофт                                                                                                                                                                                                                                    Вакансия: https://hh.ru/vacancy/110876283?hhtmFrom=favorite_vacancy_list                                                                                                                                                                                                                                                     Зп: не обсуждали                                                                                                                                                                                                                                                 Вопросы:                                                                                                                                                                                                                                   1)Расскажи кратко о последнем месте работы                                                                                                                                                                            2) Знаешь что такое монорепозиторий!?                                                                                                                                                                        3)Работал со Storybook ,какой версией и знаешь ли чем отличается 7 от 8 версии)                                                                                     4)Расскажи про FSD ,где хранили APi                                                                                                                                                                                      5)Что слышал про SSO                                                                                                                                                                                                                   6) Расскажи про JWT                                                                                                                                                                                                               7)Работал с виртуализацией списка и для чего это                                                                                                                                               8)Расскажи про CORS                                                                                                                                                                                                                    9)Что знаешь про PWA                                                                                                                                                                                                                    10) Расскажи про всплытие и погружение,как это преостановить                                                                                                                               11)Про React поговорили(Fiber,recanseleishen,vdom)                                                                                                                                               12)Какие знаешь колекции(new Map ,"
      }
    ]
  },
  {
    "company": "Smart",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-05-12 16:26:04",
        "content": "2025-05-12 16:26:04\n Василий -> 2071074234:\nКомпания: Яндекс кинопоиск Smart TV\nПросил: 230\n\n1 задача\n\nfunction runOnce(fn) {\n  let called = false;\n  return function (...args) {\n    if (!called) {\n      called = true;\n      return fn(...args);\n    }\n    return undefined;\n  };\n}\n\n2 задача\n\nЧто выйдет в консоль. (добавил в прикрепленные картинки)\n\n3 задача \n\nArray.prototype.groupBy = function (fn) {\n  const result = {};\n\n  for (const item of this) {\n    const key = fn(item); // вычисляем ключ\n    ...",
        "full_content": "2025-05-12 16:26:04\n Василий -> 2071074234:\nКомпания: Яндекс кинопоиск Smart TV\nПросил: 230\n\n1 задача\n\nfunction runOnce(fn) {\n  let called = false;\n  return function (...args) {\n    if (!called) {\n      called = true;\n      return fn(...args);\n    }\n    return undefined;\n  };\n}\n\n2 задача\n\nЧто выйдет в консоль. (добавил в прикрепленные картинки)\n\n3 задача \n\nArray.prototype.groupBy = function (fn) {\n  const result = {};\n\n  for (const item of this) {\n    const key = fn(item); // вычисляем ключ\n    if (!result[key]) {\n      result[key] = []; // если ключа нет, создаём массив\n    }\n    result[key].push(item); // добавляем элемент в соответствующий массив\n  }\n\n  return result;\n};\n\n// Пример 1\nconst array1 = [\n  { id: 1 },\n  { id: 1 },\n  { id: 2 }\n];\nconst fn = (item) => item.id;\nconsole.log(array1.groupBy(fn));\n// { \"1\": [{ id: 1 }, { id: 1 }], \"2\": [{ id: 2 }] }\n\n// Пример 2\nconst array2 = [1, 2, 3];\nconsole.log(array2.groupBy(String));\n// { \"1\": [1], \"2\": [2], \"3\": [3] }"
      },
      {
        "timestamp": "2025-02-23 19:36:21",
        "content": "2025-02-23 19:36:21\n Дмитрий Петров -> 2071074234:\nКомпания: Международный институт Smart  \nЗП: 200-250  \nВакансия: https://spb.hh.ru/vacancy/116517740?hhtmFromLabel=suitable_employer_vacancies&hhtmFrom=vacancy  \nСтартап, идет набор в команду, есть возможность писать приложение с последними фреймворками, аналитик, макет и бизнес модель есть, задачи не горят, тимлид с опытом 12лет, вкатуны хз, а люди с опытом могут стать участниками интересного продукта LMS.\n\nБыли вопросы про опыт работы, по теор...",
        "full_content": "2025-02-23 19:36:21\n Дмитрий Петров -> 2071074234:\nКомпания: Международный институт Smart  \nЗП: 200-250  \nВакансия: https://spb.hh.ru/vacancy/116517740?hhtmFromLabel=suitable_employer_vacancies&hhtmFrom=vacancy  \nСтартап, идет набор в команду, есть возможность писать приложение с последними фреймворками, аналитик, макет и бизнес модель есть, задачи не горят, тимлид с опытом 12лет, вкатуны хз, а люди с опытом могут стать участниками интересного продукта LMS.\n\nБыли вопросы про опыт работы, по теории не было\n\n1 задача: Написать компонент счетчика. Видео ниже\n2 задача:\n\nfunction sum(a, b) {\n    console.log(\"sum called\")\n    return a + b\n}\n\nconst memoizeOne = (fn) => {\n    let lastArgs = null;\n    let lastResult = null;\n\n    return (...args) => {\n        if (lastArgs && args.length === lastArgs.length && args.every((arg, index) => arg === lastArgs[index])) {\n            return lastResult;\n        }\n\n        lastArgs = args;\n        lastResult = fn(...args);\n        return lastResult;\n    };\n}\n\nconst memoSum = memoizeOne(sum);\n\nconsole.log(memoSum(1, 2)) // sum called 3\nconsole.log(memoSum(1, 2)) // 3\nconsole.log(memoSum(2, 3)) // sum called 5\nconsole.log(memoSum(1, 2)) // sum called 3\n\n\nВнимание! Интервьюер просит расширить экран и ведет запись собеса."
      },
      {
        "timestamp": "2025-02-05 06:59:42",
        "content": "2025-02-05 06:59:42\n Сергей -> 2071074234:\nКомпания: Онлайн институт Smart\nВакансия: https://ekaterinburg.hh.ru/vacancy/116517740\nВопросы:\n- 20 минутный разговор об опыте и чем занимался(devops, технологии, Стейты, кибербезопасность, как было устроено тыстирование, нужно ли оно, и тд)\n- Задача на создание обычного Counter компонента с двумя кнопками(+ и -) с нуля, избавиться от лишних рендеров, почему в strictMode 2 рендера\n- Что будет если мы сделаем в стейте prev++\n- Что такое мемоизация, как ...",
        "full_content": "2025-02-05 06:59:42\n Сергей -> 2071074234:\nКомпания: Онлайн институт Smart\nВакансия: https://ekaterinburg.hh.ru/vacancy/116517740\nВопросы:\n- 20 минутный разговор об опыте и чем занимался(devops, технологии, Стейты, кибербезопасность, как было устроено тыстирование, нужно ли оно, и тд)\n- Задача на создание обычного Counter компонента с двумя кнопками(+ и -) с нуля, избавиться от лишних рендеров, почему в strictMode 2 рендера\n- Что будет если мы сделаем в стейте prev++\n- Что такое мемоизация, как она работает\n- Кэш vs Мемоизация\n- Задача на мемоизацию(Это не оптимальное решение, избыточное хранение в cache других значение, а не последнего)\n\nfunction sum(a,b) {\n  console.log('sum called')\n  return a + b;\n}\n\nconst memoizeOne = (func) => {\n  let cache = {};\n  return (...args) => {\n    const key = JSON.stringify(args);\n    if (cache[key]) {\n      return cache[key]\n    } else {\n      const cache = {}\n    }\n    const res = func(...args);\n    cache[key] = res;\n    return res\n  }\n}\n\nconst memoSum = memoizeOne(sum);\nconsole.log(memoSum(1,2)); // sum called 3\nconsole.log(memoSum(1,2)); // 3\nconsole.log(memoSum(2,3)); // sum called 5\nconsole.log(memoSum(1,2)); // sum called 3"
      },
      {
        "timestamp": "2025-01-30 07:27:27",
        "content": "2025-01-30 07:27:27\n Сергей -> 2071074234:\nКомпания: онлайн институт Smart (2 этап знакомство с командой)\nВакансия: https://ekaterinburg.hh.ru/vacancy/116517740\nВопросы:\nпросто разговор по душам по сути\n- Расскажи еще раз о себе кратко\n- Чем увлекаешься помимо работы\n- Лыжи или сноуборд)\n- Какие плюсы и минусы работы в команде/в одиночку\n- Кем видишь себя через год",
        "full_content": "2025-01-30 07:27:27\n Сергей -> 2071074234:\nКомпания: онлайн институт Smart (2 этап знакомство с командой)\nВакансия: https://ekaterinburg.hh.ru/vacancy/116517740\nВопросы:\nпросто разговор по душам по сути\n- Расскажи еще раз о себе кратко\n- Чем увлекаешься помимо работы\n- Лыжи или сноуборд)\n- Какие плюсы и минусы работы в команде/в одиночку\n- Кем видишь себя через год"
      }
    ]
  },
  {
    "company": "Алабуга",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-05-13 12:27:01",
        "content": "2025-05-13 12:27:01\n Ильдус Гизетдинов -> 2071074234:\nАлабуга\nЗп:250к\nВопросы:\n1)Рассказать про опыт\n2)Что такое dom\n3)Элемент div как будет представлен\n4)Перечисли селекторы по весу убыванию\n5)Какие свойства есть у position\n6)Раскажи про css функции\n7)Псевдоклассы и псевдоэлементы\n8)transition timing function\n9) Как выровнять изображение по центру без потери качества\n10)Как по БЭМ сделать footer с 3 вариациями и как бы их назвал\n11)Преимущество SCSS\n12)фреймворки для css\n13)Преимущество boostra...",
        "full_content": "2025-05-13 12:27:01\n Ильдус Гизетдинов -> 2071074234:\nАлабуга\nЗп:250к\nВопросы:\n1)Рассказать про опыт\n2)Что такое dom\n3)Элемент div как будет представлен\n4)Перечисли селекторы по весу убыванию\n5)Какие свойства есть у position\n6)Раскажи про css функции\n7)Псевдоклассы и псевдоэлементы\n8)transition timing function\n9) Как выровнять изображение по центру без потери качества\n10)Как по БЭМ сделать footer с 3 вариациями и как бы их назвал\n11)Преимущество SCSS\n12)фреймворки для css\n13)Преимущество boostrap\n14)Типы данных\n15)Разница между null и underfund \n16)typeOf null\n17)Замыкание\n18)This\n19)Что выведется\n20)promise\n21)Что выведется\n22)Как закрыть вебсокет соединение и какие принимает аргументы\n23)Какие события у вебсокет соединения можно отследить\n24)прото и прототайп\n25)object case\n26)Что происходит при создании экземпляра класса \n27)Куда девается конструктор при создании экземпляра класса\n28)Дженерик\n29)Вопросы про УтилитиTypes"
      },
      {
        "timestamp": "2024-10-20 10:50:12",
        "content": "2024-10-20 10:50:12\n аыеъа -> 2071074234:\nАлабуга\nВакансия: https://yelabuga.hh.ru/vacancy/107337122?hhtmFrom=resume\nЗп: 250к\nВопросы:\nРассказать про опыт\nСтандартные вопросы по js (var, let, const ; this и т.п.)\nРассказать про вебворкеры\nРаботал ли с web sockets\nОтличие useEffect и useLayoutEffect\nОтличие any от unknown\nБатчинг\nReconciliation в реакт\nЧто такое дженерики в TS и зачем они нужны\nРеализация своей виртуализации без использования сторонних библиотек\n\nfunction find(object, path) {\n  c...",
        "full_content": "2024-10-20 10:50:12\n аыеъа -> 2071074234:\nАлабуга\nВакансия: https://yelabuga.hh.ru/vacancy/107337122?hhtmFrom=resume\nЗп: 250к\nВопросы:\nРассказать про опыт\nСтандартные вопросы по js (var, let, const ; this и т.п.)\nРассказать про вебворкеры\nРаботал ли с web sockets\nОтличие useEffect и useLayoutEffect\nОтличие any от unknown\nБатчинг\nReconciliation в реакт\nЧто такое дженерики в TS и зачем они нужны\nРеализация своей виртуализации без использования сторонних библиотек\n\nfunction find(object, path) {\n  const keys = path.split('.')\n  for (let key of keys) {\n    if (key in object) object = object[key]\n    else return 'Invalid keys'\n  }\n  return object\n}"
      },
      {
        "timestamp": "2024-09-13 13:13:58",
        "content": "2024-09-13 13:13:58\n Timofei Syromiatnikov -> 2071074234:\n— Название: Алабуга\n— Вакансия: https://yelabuga.hh.ru/vacancy/105906496?hhtmFrom=resume\n— ЗП: сказал 280-300к\n— Вопросы:\n1) Расскажи про себя, про свой опыт.\n2) Что такое промис, какие методы у него есть?\n3) Что такое Web workers?\n4) Работал ли с websockets?\n5) Какие хуки использовал?\n6) Отличие useEffect и useLayoutEffect?\n7) Когда используем useMemo и useCallback?\n8) Можем ли написать функцию дебаунс с помощью useRef?\n9) Зачем использу...",
        "full_content": "2024-09-13 13:13:58\n Timofei Syromiatnikov -> 2071074234:\n— Название: Алабуга\n— Вакансия: https://yelabuga.hh.ru/vacancy/105906496?hhtmFrom=resume\n— ЗП: сказал 280-300к\n— Вопросы:\n1) Расскажи про себя, про свой опыт.\n2) Что такое промис, какие методы у него есть?\n3) Что такое Web workers?\n4) Работал ли с websockets?\n5) Какие хуки использовал?\n6) Отличие useEffect и useLayoutEffect?\n7) Когда используем useMemo и useCallback?\n8) Можем ли написать функцию дебаунс с помощью useRef?\n9) Зачем используем useRef?\n10) Что такое Unit types в TS (то есть Null, Undefined, Void, Never, Unknown)?\n12) Что такое батчинг в Реакте?\n13) Что такое деженерики в TS твоими словами? В чем отличие использование дженериков или просто задать везде any?\n14) Различие any от unknown?\n15) Работал ли с виртуализациец? Как ее реализуешь сам?\n16)  У нас есть таймер на странице, который мы сделали с помощью setTimeout. Когда пользователь сварачивает браузер, что будет с таймером? (Он остановится) И как пофиксить это? (С помощью web воркера). Ответить нужно устно\n\n— Задачи:"
      },
      {
        "timestamp": "2024-05-24 16:28:21",
        "content": "2024-05-24 16:28:21\n Daniil Max -> 2071074234:\n— Название компании: Алабуга\n— Ссылка на вакансию: ссылки нет, на hh спамил отклики \n— ЗП: 250К.\n— Задачи: теория\n\n1. Как реализуешь свою виртуализацию\n2. Rest и спред операторы \n3. useMemo, useCallback\n4. Способы клонирования объект \n5. React согласование, vdom\n\nОстальные вопросы не помню. Были базовые вопросы по теоритическим \"платиновым\" вопросом, которые можно найти в топике \"полезное\" \n\n— Успех собеса: ✅️\n— Фитбек о собесе: оффер, я самый лучши...",
        "full_content": "2024-05-24 16:28:21\n Daniil Max -> 2071074234:\n— Название компании: Алабуга\n— Ссылка на вакансию: ссылки нет, на hh спамил отклики \n— ЗП: 250К.\n— Задачи: теория\n\n1. Как реализуешь свою виртуализацию\n2. Rest и спред операторы \n3. useMemo, useCallback\n4. Способы клонирования объект \n5. React согласование, vdom\n\nОстальные вопросы не помню. Были базовые вопросы по теоритическим \"платиновым\" вопросом, которые можно найти в топике \"полезное\" \n\n— Успех собеса: ✅️\n— Фитбек о собесе: оффер, я самый лучший по словам руководителя за последние 3 месяца собесов \n— Комментарий:🥇ШОУ-ВКАТУН Александр Волков! 😎"
      }
    ]
  },
  {
    "company": "Интерфакс",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-07-06 20:44:57",
        "content": "2025-07-06 20:44:57\n Mark Nikonorov ⚛ -> 2071074234:\nИнтерфакс (финал)\n\n1. По каким процессам работаете?\n2. Откуда приходит задача?\n3. Бывало ли такое что задача приходит в формате название и все?\n4. Расскажи про сложные задачи\n5. Какие конфликтные ситуации возникали?\n6. Что мотивирует?",
        "full_content": "2025-07-06 20:44:57\n Mark Nikonorov ⚛ -> 2071074234:\nИнтерфакс (финал)\n\n1. По каким процессам работаете?\n2. Откуда приходит задача?\n3. Бывало ли такое что задача приходит в формате название и все?\n4. Расскажи про сложные задачи\n5. Какие конфликтные ситуации возникали?\n6. Что мотивирует?"
      },
      {
        "timestamp": "2025-07-06 20:27:46",
        "content": "2025-07-06 20:27:46\n Mark Nikonorov ⚛ -> 2071074234:\nИнтерфакс (техничка)\nзп 350к\n\n1. Написать функцию sleep (было выше)\n2. Написать debounce (было выше)\n3. Написать curry (было выше)\n4. Как развернуть массив с хаотичной вложенностью? (функция flattenArray)\nfunction flattenArray(arr) {\n    const stack = [...arr]; // Копируем массив в стек\n    const result = [];\n\n    while (stack.length) {\n        const next = stack.pop(); // Берем последний элемент\n\n        if (Array.isArray(next)) {\n           ...",
        "full_content": "2025-07-06 20:27:46\n Mark Nikonorov ⚛ -> 2071074234:\nИнтерфакс (техничка)\nзп 350к\n\n1. Написать функцию sleep (было выше)\n2. Написать debounce (было выше)\n3. Написать curry (было выше)\n4. Как развернуть массив с хаотичной вложенностью? (функция flattenArray)\nfunction flattenArray(arr) {\n    const stack = [...arr]; // Копируем массив в стек\n    const result = [];\n\n    while (stack.length) {\n        const next = stack.pop(); // Берем последний элемент\n\n        if (Array.isArray(next)) {\n            stack.push(...next); // Если элемент — массив, раскладываем его в стек\n        } else {\n            result.unshift(next); // Иначе добавляем в начало результата\n        }\n    }\n\n    return result;\n}\n5. Напиши функцию getCash(bills, amount), которая разменивает сумму amount на купюры из списка bills, используя минимальное количество купюр. Функция должна возвращать массив купюр в порядке убывания номиналов.\nconst getCash = (bills, total) => {\n    const sortedBills = [...bills].sort((a, b) => b - a); // Копируем и сортируем по убыванию\n    const result = [];\n    \n    for (const bill of sortedBills) {\n        while (total >= bill) {\n            result.push(bill);\n            total -= bill;\n        }\n    }\n    \n    return result;\n};\n6. расскажи про event loop\n7. методы промиса\n8. расскажи про call, apply, bind\n9. Для чего использовался bind в классовых компонентах?\n10. в чем плюсы ts\n11. для чего нужен unkown\n12. в чем разница между | и & в ts\n13. почему реакт популярный? расскажи как работает все что знаешь\n14. В каких случаях реакт компонент обновляется?\n15. Минусы контекста в react\n16. В чем плюсы стейт менеджеров? Какие использовал?\n17. Как оптимизировать фронтенд?\n18. Использовал ли next js и в чем его плюсы? Делал ли кастомные api routes?\n19. Какие минусы api routes?\n\nДалее поведенческие вопросы\n20. Был ли случай когда ты был не прав?\n21. Что делаешь чтобы не повторять прошлых ошибок?\n22. Как развиваешься лично?\n23. Как поддерживаешь мотивацию?\n24. Вот ты говоришь что быть заряженным важно, что нужно делать что бы поддерживать заряженный дух в команде?\n25. Как развиваешься во фронте?\n26. Как относишься к большим/сложным задачам?\n27. Что делаешь если не успеваешь в срок?\n28. Был ли опыт менторинга?\n29. На какой грейд себя оцениваешь? Кто такой синьер для тебя?\n30. Что делать если разрабочик синьер, но дальше расти не хочет?\n31. Как не выгореть?\n32. К чему стремишься в течении 5 лет?\n33. Что важно для тебя в команде? Как дать рости другим членам команды?\n34. Что мотивирует по жизни и в работе?\n35. Что демотивирует?"
      },
      {
        "timestamp": "2025-07-04 09:57:36",
        "content": "2025-07-04 09:57:36\n Евгений -> 2071074234:\nКомпания: Интерфакс\nЗП: 250\n\nРассказать про опыт, потом задачи\nЗадача 1: \nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\nЗадача 2: \nonst debounce = (cb, time) => {\n  let timerID; // создаем переменную для хранения id таймера\n\n  return (...args) => {\n    if (timerID) clearTimeout(timerID); // если таймер уже есть — сбрасываем его\n    timerID = setTimeout(() => cb(...args), time); // запускаем новый таймер с задержкой\n...",
        "full_content": "2025-07-04 09:57:36\n Евгений -> 2071074234:\nКомпания: Интерфакс\nЗП: 250\n\nРассказать про опыт, потом задачи\nЗадача 1: \nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\nЗадача 2: \nonst debounce = (cb, time) => {\n  let timerID; // создаем переменную для хранения id таймера\n\n  return (...args) => {\n    if (timerID) clearTimeout(timerID); // если таймер уже есть — сбрасываем его\n    timerID = setTimeout(() => cb(...args), time); // запускаем новый таймер с задержкой\n  };\n}\nпопросили решить еще старым способом \nfunction debounce(cb, time) {\n  let timerID; // создаем переменную для хранения id таймера\n\n  return function() {\n\n    if (timerID) clearTimeout(timerID); // сбрасываем предыдущий таймер, если есть\n\n    timerID = setTimeout(function() {\n      cb.apply(this, arguments); // вызываем cb с теми же аргументами и контекстом\n    }, time);\n  };\n}\n\nзадача 3: \nfunction curry(func) {\n  return function curr(...args) {\n      if(args.length >= func.length) {\n           return func(...args)\n      } else {\n      return function(...args2) {\n          return curr(...args, ...args2)\n      }\n  } \n  \n  }\n}\nconst sum = (a, b, c) => a + b + c;\nconst curriedSum = curry(sum);\nconsole.log(curriedSum(1)(2)(3)); // 6\nconsole.log(curriedSum(1, 2)(3)); // 6"
      },
      {
        "timestamp": "2025-06-25 15:15:45",
        "content": "2025-06-25 15:15:45\n Alexander K -> 2071074234:\nИнтерфакс \nзп 270+ \n\n1 Задача sleep функция \n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n2 Задача debounce функция \n\nconst debounce = (cb, time) => {\n  let timerID;\n  \n  return (...args) => {\n    if (timerID) clearTimeout(timerID);\n    \n    timerID = setTimeout(() => cb(...args), time);\n  }\n}\n\n3 Задача функция коррирования\n\nfunction curry(func) {\n  return function curried(...args) {\n    if (args.length >= fu...",
        "full_content": "2025-06-25 15:15:45\n Alexander K -> 2071074234:\nИнтерфакс \nзп 270+ \n\n1 Задача sleep функция \n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n2 Задача debounce функция \n\nconst debounce = (cb, time) => {\n  let timerID;\n  \n  return (...args) => {\n    if (timerID) clearTimeout(timerID);\n    \n    timerID = setTimeout(() => cb(...args), time);\n  }\n}\n\n3 Задача функция коррирования\n\nfunction curry(func) {\n  return function curried(...args) {\n    if (args.length >= func.length) {\n      // Если передано достаточно аргументов, выполнить функцию\n      return func(...args);\n    } else {\n      // Иначе вернуть новую функцию, ожидающую дополнительные аргументы\n      return function(...nextArgs) {\n        return curried(...args, ...nextArgs);\n      };\n    }\n  };\n}"
      }
    ]
  },
  {
    "company": "BI.Zone",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-02-10 15:57:48",
        "content": "2025-02-10 15:57:48\n Александр Богданов -> 2071074234:\nКомпания BI.ZONE\nВилка: 250-300к\nФинальный собес после технички(ОС будет в среду-четверг):\n- с чем нравится больше работать а с чем нет(какие задачи напрягают,сказал что важно не молчать если что не ясно,общаться,спрашивать..)\n- как планируешь расти в разработке или в тимлида\n- расскажи о последних интересных и трудных задачах которые тебе запомнились(рассказал про вебпак, FSD,таску  с яндекс-картами)\n- сам побольше накидывал-чтобы собес рас...",
        "full_content": "2025-02-10 15:57:48\n Александр Богданов -> 2071074234:\nКомпания BI.ZONE\nВилка: 250-300к\nФинальный собес после технички(ОС будет в среду-четверг):\n- с чем нравится больше работать а с чем нет(какие задачи напрягают,сказал что важно не молчать если что не ясно,общаться,спрашивать..)\n- как планируешь расти в разработке или в тимлида\n- расскажи о последних интересных и трудных задачах которые тебе запомнились(рассказал про вебпак, FSD,таску  с яндекс-картами)\n- сам побольше накидывал-чтобы собес растянуть\n- много сам рассказывал про проект,про планы"
      },
      {
        "timestamp": "2025-02-08 09:54:42",
        "content": "2025-02-08 09:54:42\n Александр Богданов -> 2071074234:\n-компания BI.ZONE – тех.собес 05.02.2025\n-ссылка на вакансию: https://voronezh.hh.ru/vacancy/115993216\n- ЗП: 250-300к\n-успех собеса: ✅переход на собес по софт-скиллам(финалка будет)\n  Вопросы:\n- событийный цикл\n- IntersectionObserver для чего\n- SOLID\n- отличие реакт vs вью vs Ангуляр\n- key зачем\n- способы копирования объектов\n- отличие http1/1 vs http2\n- отличие батчинг Реакт17 от 18 версии\n- псевдоклассы назови и псевдоэлементы, чем focus о...",
        "full_content": "2025-02-08 09:54:42\n Александр Богданов -> 2071074234:\n-компания BI.ZONE – тех.собес 05.02.2025\n-ссылка на вакансию: https://voronezh.hh.ru/vacancy/115993216\n- ЗП: 250-300к\n-успех собеса: ✅переход на собес по софт-скиллам(финалка будет)\n  Вопросы:\n- событийный цикл\n- IntersectionObserver для чего\n- SOLID\n- отличие реакт vs вью vs Ангуляр\n- key зачем\n- способы копирования объектов\n- отличие http1/1 vs http2\n- отличие батчинг Реакт17 от 18 версии\n- псевдоклассы назови и псевдоэлементы, чем focus отличается от focus-visible, что такое\n  focus-with-in\n- зачем псевдоэлементы\n- лаив-кодинг на js задача + 3 на реакте"
      },
      {
        "timestamp": "2024-12-11 18:55:06",
        "content": "2024-12-11 18:55:06\n Артем -> 2071074234:\nКомпания Bi.Zone\nВопросы\nбайдинг\nwebpack\nплагины\neslint\nparsel\nvite\ntsc\nmutationObserver\nxss\nлямбда функия vs стрелочная\nSOLID\nмикрофронтенд\ncompenentdidcatch\nangular vs vue vs react\nлогирование\nОтрефакторить код\nimport React, { useEffect, useState, useMemo } from 'react'; // Хуки React\nimport { useDispatch, useSelector } from 'react-redux'; // Хуки для работы с Redux\nimport { fetchPosts, fetchOffers } from './api'; // Функции для API-запросов\nimport { S...",
        "full_content": "2024-12-11 18:55:06\n Артем -> 2071074234:\nКомпания Bi.Zone\nВопросы\nбайдинг\nwebpack\nплагины\neslint\nparsel\nvite\ntsc\nmutationObserver\nxss\nлямбда функия vs стрелочная\nSOLID\nмикрофронтенд\ncompenentdidcatch\nangular vs vue vs react\nлогирование\nОтрефакторить код\nimport React, { useEffect, useState, useMemo } from 'react'; // Хуки React\nimport { useDispatch, useSelector } from 'react-redux'; // Хуки для работы с Redux\nimport { fetchPosts, fetchOffers } from './api'; // Функции для API-запросов\nimport { Select } from './components'; // Компонент для выбора (селект)\nimport { rowNumberOptions } from './config'; // Конфигурация для вариантов пагинации\nimport { enrichmentPost } from './utils'; // Функция для обработки постов\n\n/** \n * Компонент для отображения списка постов \n * \n * @param {Function} onChangePagination - Коллбек для изменения количества элементов на странице\n */\nconst Posts = ({ onChangePagination }) => {\n  const dispatch = useDispatch(); // Получаем метод для отправки экшенов\n\n  // Извлекаем данные из глобального Redux-хранилища\n  const { posts, offer, isLoading } = useSelector((state) => ({\n    posts: state.userPosts.data, // Список постов\n    offer: state.offer.data, // Объект с рекламным предложением\n    isLoading: state.userPosts.isLoading, // Флаг загрузки данных\n  }));\n\n  // Загружаем данные с сервера при первом рендере компонента\n  useEffect(() => {\n    // Отправляем запрос на загрузку постов\n    dispatch(fetchPosts());\n    // Отправляем запрос на загрузку рекламного предложения\n    dispatch(fetchOffers());\n  }, [dispatch]); // Зависимостью является только `dispatch`\n\n  /**\n   * Генерация опций для селекта пагинации.\n   * Используем useMemo, чтобы избежать ненужных пересчётов на каждом рендере.\n   */\n  const paginationOptions = useMemo(\n    () =>\n      rowNumberOptions.map((option) => ({\n        label: option.name, // Отображаемое название\n        value: option.id, // Значение\n      })),\n    [] // Зависимостей нет, так как rowNumberOptions статичен\n  );\n\n  /**\n   * Подготовка списка постов для отображения.\n   * Добавляем рекламное предложение после каждого 10-го поста\n   * и обогащаем посты дополнительной информацией.\n   */\n  const postsToRender = useMemo(() => {\n    // Если постов нет (загрузка завершилась с пустым результатом)\n    if (!posts) return [];\n\n    // Обработка постов: добавляем рекламу и обогащаем данные\n    return posts.flatMap((post, idx) => {\n      const enrichedPost = enrichmentPost(post); // Добавляем данные в пост\n      return idx % 10 === 0 // Если индекс кратен 10\n        ? [offer, enrichedPost] // Добавляем рекламу и пост\n        : [enrichedPost]; // Только пост\n    });\n  }, [posts, offer]); // Зависимости: массив постов и реклама\n\n  // Если данные всё ещё загружаются, показываем компонент Skeleton\n  if (isLoading) {\n    return <Skeleton />; // Заглушка для отображения во время загрузки\n  }\n\n  /**\n   * Основной рендер компонента.\n   * Отображаем список постов и компонент выбора пагинации.\n   */\n  return (\n    <div>\n      {/* Список постов */}\n      <ul>\n        {postsToRender.map((post, idx) => (\n          <li key={idx}>\n            {post.title} - {post.date} {/* Название поста и дата */}\n          </li>\n        ))}\n      </ul>\n\n      {/* Компонент выбора количества постов на странице */}\n      <Select\n        options={paginationOptions} // Опции для выбора\n        onSelect={onChangePagination} // Коллбек при изменении выбора\n      />\n    </div>\n  );\n};\n\nexport default Posts;"
      },
      {
        "timestamp": "2024-05-26 18:41:51",
        "content": "2024-05-26 18:41:51\n Roman -> 2071074234:\nНазвание компании: BI.ZONE\n- зп: просил от 300к\n- вакансия: hr сама написала, https://hh.ru/vacancy/95596534\n- успех собеса: по итогам технического интервью позвали на знакомство с руководителем проекта\n\nЛюбят, когда много вопросов задаешь!\n\nВопросы от собеседующего:\n- про опыт\n- как пришла идея сторибука, почему, зачем?\n- где тебе понадобился виртуальный список, что это такое, почему?\n- как делал подгрузку пачками в списке? Пагинацией или как?\n- что луч...",
        "full_content": "2024-05-26 18:41:51\n Roman -> 2071074234:\nНазвание компании: BI.ZONE\n- зп: просил от 300к\n- вакансия: hr сама написала, https://hh.ru/vacancy/95596534\n- успех собеса: по итогам технического интервью позвали на знакомство с руководителем проекта\n\nЛюбят, когда много вопросов задаешь!\n\nВопросы от собеседующего:\n- про опыт\n- как пришла идея сторибука, почему, зачем?\n- где тебе понадобился виртуальный список, что это такое, почему?\n- как делал подгрузку пачками в списке? Пагинацией или как?\n- что лучше написать свое решение или использовать готовую либу? Когда использовать свое, а когда готовую либу?\n- как бы ты делал аутентификацию, если бы тебе сказали делать на новом продукте?\n- куда бы клал токены - в хедеры или куки?\n- сталкивался ли или думал ли о xss атаках? что делал? в каком случае возникало?\n- будет ли xss атака, если в инпут ввести какой-то скрипт? (ответ собеседующего: не будет, этот скрипт на странице отобразится просто как текст, это благодаря реакту) \n- расскажи про CSP, как работает?\n- микрофронтенды приходилось делать, понравилось?\n- вышел на работу, вот продукт, дали тебе репозиторий, что будешь делать?\n- как ты декомпозируешь задачу, до какого уровня? Вот к тебе пришли, и сказали, у нас будет новая страница, там будет отображаться, например список атак. Вот сам себе сделай нужное количество задач , мы тебе дадим аналитику на эту фичу, ссылки на макеты. Вот ты бы как сделал, одну задачу или несколько, если несколько, то до какого уровня их пилил?\n- есть ли у тебя какие-то активности для обучения и развития, что ты предпринимаешь для этого, что ты смотришь, слушаешь?\n- что ты делаешь для души, когда устаешь кодить, или ты не устаешь кодить?\n\nКурсы, которые проходил/проходит собеседующий:\nhttps://advancedreact.com/\nhttps://courses.joshwcomeau.com/css-for-js\nhttps://www.totaltypescript.com/\nhttps://typescript-exercises.github.io/\nhttps://typehero.dev/"
      }
    ]
  },
  {
    "company": "AmoCRM",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-07-16 11:23:01",
        "content": "2025-07-16 11:23:01\n Али -> 2071074234:\nКомпания: amoCRM\nЗП: от 170к\nВакансия: https://hh.ru/vacancy/121891630\nВопросы про опыт: \n  1. как пришел в IT\n  2. чем хочешь заниматься сейчас\n  3. какое для себя видишь развитие\n  4. почему меняешь работу\n  5. предметные вопросы про опыт\n\nУстные задачи:\n  1. у тебя есть бандл, твоя задача его оптимизировать(только js). сборка приложения происходит на webpack.\n   2. у тебя есть проект, у него есть более 10 разделов с разной бизнес логикой. у проекта нету...",
        "full_content": "2025-07-16 11:23:01\n Али -> 2071074234:\nКомпания: amoCRM\nЗП: от 170к\nВакансия: https://hh.ru/vacancy/121891630\nВопросы про опыт: \n  1. как пришел в IT\n  2. чем хочешь заниматься сейчас\n  3. какое для себя видишь развитие\n  4. почему меняешь работу\n  5. предметные вопросы про опыт\n\nУстные задачи:\n  1. у тебя есть бандл, твоя задача его оптимизировать(только js). сборка приложения происходит на webpack.\n   2. у тебя есть проект, у него есть более 10 разделов с разной бизнес логикой. у проекта нету автоматического тестирования. что ты будешь делать, чтобы исправить это\nлайвкод\nЗадача 1 \n//Напишите функцию, которая генерирует случайный цвет в формате HEX (#ffffff)\n\nconst generateRandomHexColor = () => {};\n\nconsole.log(generateRandomHexColor) //#ffffff\nconsole.log(generateRandomHexColor) //#abcdef\nconsole.log(generateRandomHexColor) //#1abc24\nОтвет:\nconst generateRandomHexColor = () => {\nconst letters = '0123456789abcdef';\nlet color = '#';\n\nfor (let i = 0; i < 6; i++) {\ncolor += letters[Math.floor(Math.random() * 16)];\n}\n\nreturn color;\n}\n // После этого просит решение в 1 строку\n\nconst generateRandomHexColor = () =>\n  `#${Math.random().toString(16).slice(2, 8)}`;\n\n\nЗадача 2\njs \n// Напишите метод, который генерирует случайный 4-х значный код от 0000 до 9999.\n// Каждый вызов метода должен возвращать новый, неповторяющийся код.\n// После того как все коды будут использованы, метод должен обнулить свой счетчик.\n\n// getCode() // 0000\n// getCode() // 2214\n// getCode() // 0200\n\nconst createRandomCode = () =>{}\n\nОтвет:\njs \nconst max = 9999;\nlet stack = [];\n\nconst createRandomCode = () => {\n  if (stack.length === 0) {\n    for (let i = 0; i < max; i++) {\n      stack.push(i);\n    }\n    stack.sort((a, b) => Math.random() - 0.5);\n  }\n  return stack.pop().toString().padStart(4, \"0\");\n};\nconsole.log(getCode())\nтак же спрашивает про другие возможные решения задачи"
      },
      {
        "timestamp": "2025-07-07 06:58:51",
        "content": "2025-07-07 06:58:51\n Антон -> 2071074234:\namoCRM\nЗп: 250\n\n0) Вопросы про опыт\n1) Сколько нужно было апрувов для пуша в фичи в ветку\n2) Какие линтеры и форматировщики использвали\n3) Отсматриваете свои фичи и как кто смотрит\n4) useEffect синхронный или асинхронный?\n5) Какие реализует жизненные циклы\n6) Для чего нужна cleanup функция useEffect\n7) Для чего используется key в react\n8) Что используешь для key\n9) Расскажи про flux всё, что знаешь\n10) Расскажи про event loop всё, что знаешь\n11) Написать...",
        "full_content": "2025-07-07 06:58:51\n Антон -> 2071074234:\namoCRM\nЗп: 250\n\n0) Вопросы про опыт\n1) Сколько нужно было апрувов для пуша в фичи в ветку\n2) Какие линтеры и форматировщики использвали\n3) Отсматриваете свои фичи и как кто смотрит\n4) useEffect синхронный или асинхронный?\n5) Какие реализует жизненные циклы\n6) Для чего нужна cleanup функция useEffect\n7) Для чего используется key в react\n8) Что используешь для key\n9) Расскажи про flux всё, что знаешь\n10) Расскажи про event loop всё, что знаешь\n11) Написать функцию генерации рандомного hex цвета:\n\nconst generateRandomHexColor = () => {\nconst letters = '0123456789abcdef';\nlet color = '#';\n\nfor (let i = 0; i < 6; i++) {\ncolor += letters[Math.floor(Math.random() * 16)];\n}\n\nreturn color;\n}\n\n12) Решить вторую задачу\n\n```js\nconst groupDataBySkill = (data) => {\nreturn data.reduce((acc, item) => {\nif (!acc[item.skill] {\nacc[item.skill] = []\n}\nacc[item.skill].push(item);\nreturn acc;\n, {}}\n}"
      },
      {
        "timestamp": "2025-06-17 09:21:01",
        "content": "2025-06-17 09:21:01\n Артем Покатилов -> 2071074234:\nКомпания: amoCRM\nЗП: до 200 тысяч (в вакансии)\nВакансия: https://hh.ru/vacancy/118361880\nВопросы про опыт:\n1. В целом отдаешь предпочтение готовым решениям или сам изобретаешь велосипед?\n2. На перфоманс проверяете, когда затаскиваете новую библиотеку?\n3. Как проводили код ревью? На что обращали внимание?\n4. Сколько по времени тратили на просмотр кода на ревью?\n\nПро React:\n1. Почему выбирают React, а не нативный JavaScript? Какие преимущество да...",
        "full_content": "2025-06-17 09:21:01\n Артем Покатилов -> 2071074234:\nКомпания: amoCRM\nЗП: до 200 тысяч (в вакансии)\nВакансия: https://hh.ru/vacancy/118361880\nВопросы про опыт:\n1. В целом отдаешь предпочтение готовым решениям или сам изобретаешь велосипед?\n2. На перфоманс проверяете, когда затаскиваете новую библиотеку?\n3. Как проводили код ревью? На что обращали внимание?\n4. Сколько по времени тратили на просмотр кода на ревью?\n\nПро React:\n1. Почему выбирают React, а не нативный JavaScript? Какие преимущество дает эта библиотека? И что ты знаешь о методах оптимизации в React.\n2. Хук useEffect. В какой момент он срабатывает? Для чего используется? Можем ли мы подписываться на какие то события в браузере? \n3. Как клин ап функция в useEffect реализована?\n4. Для чего могут использоваться keys? Как их правильно задавать?\n5. В чем недостаток через Math.random() делать keys?\n6. С какими стейт менеджерами работал?\n7. Расскажи что такое flux архитектура? Как работает цикл внутри flux\n\nПро TypeScript:\n1. Сталкивался ли с Дженериками? Что это и для чего использовать?\n2. Какие utility types знаешь? С какими сталкивался в работе? Что они делают?\n\nПро JavaScript:\n1. Расскажи про EventLoop\n\nЗадачи:\n1. Условие\n//Напишите функцию, которая генерирует случайный цвет в формате HEX (#ffffff)\n\nconst generateRandomHexColor = () => {};\n\nconsole.log(generateRandomHexColor) //#ffffff\nconsole.log(generateRandomHexColor) //#abcdef\nconsole.log(generateRandomHexColor) //#1abc24\nОтвет:\nconst generateRandomHexColor = () => {\n  return '#' + (Math.random().toString(16).slice(2, 8));\n};\n2. Условие\n//Напишите функцию, которая генерирует случайный цвет в формате HEX (#ffffff)\n\nconst generateRandomHexColor = () => {};\n\nconsole.log(generateRandomHexColor) //#ffffff\nconsole.log(generateRandomHexColor) //#abcdef\nconsole.log(generateRandomHexColor) //#1abc24\nОтвет:\nconst createRandomCode = () => {\n    const stack = []\n  \n  function fill(){\n      for (let i = 0; i<= 9999; i++){\n        stack.push(i.toString().padStart(4, '0'))\n      }\n      stack.sort((a, b) => Math.random() - 0.5)\n  }\n  \n  function generator(){\n      if(stack.length === 0){\n      fill()\n      }\n      return stack.pop()\n  }\n  \n  return generator\n}\n\nconst getCode = createRandomCode()\nconsole.log(getCode())\n3.\nconsole.log(1);\n\nsetTimeout(() => {\n    console.log(2);\n  \n    setTimeout(() => {\n    console.log(3);\n    }, 100);\n}, 0);\n\nsetTimeout(() => {\n    console.log(4);\n  \n    new Promise((resolve) => {\n    console.log(5);\n  \n    resolve(6);\n}).then((number) => {\n    setTimeout(() => {\n    console.log(7);\n    }, 0);\n  \n    return number * number / 2;\n}).then(console.log);\n}, 50);\n//Ответ: 1 2 4 5 18 7 3"
      },
      {
        "timestamp": "2025-06-03 12:22:12",
        "content": "2025-06-03 12:22:12\n Никита -> 2071074234:\namoCRM\nЗП: от 180\n\nПо итогу дали оффер\n\nЗАДАЧА 1\nconst hexString = '0123456789abcdef'\n\nconst generateRandomHexColor = () => {\n    let result = '#'\n    for (let i = 0; i < 6; i++){\n    const randomIndex = Math.floor(Math.random() * hexString.length)\n    result += hexString[randomIndex]\n    }\n    return result\n};\n\nconsole.log(generateRandomHexColor());\n// #fffffff;\nconsole.log(generateRandomHexColor());\n// #abcdef;\nconsole.log(generateRandomHexColor());\n/...",
        "full_content": "2025-06-03 12:22:12\n Никита -> 2071074234:\namoCRM\nЗП: от 180\n\nПо итогу дали оффер\n\nЗАДАЧА 1\nconst hexString = '0123456789abcdef'\n\nconst generateRandomHexColor = () => {\n    let result = '#'\n    for (let i = 0; i < 6; i++){\n    const randomIndex = Math.floor(Math.random() * hexString.length)\n    result += hexString[randomIndex]\n    }\n    return result\n};\n\nconsole.log(generateRandomHexColor());\n// #fffffff;\nconsole.log(generateRandomHexColor());\n// #abcdef;\nconsole.log(generateRandomHexColor());\n// #lbodif;\n\nЗАДАЧА 2\njs \n// Напишите метод, который генерирует случайный 4-х значный код от 0000 до 9999.\n// Каждый вызов метода должен возвращать новый, неповторяющийся код.\n// После того как все коды будут использованы, метод должен обнулить свой счетчик.\n\n// getCode() // 0000\n// getCode() // 2214\n// getCode() // 0200\n\nconst createRandomCode = () =>{\n    const end = 9999\n    let stack = []\n}\n\nfunction fillStack(){\n    for (let i = 0; i<= end; i++){\n    stack.push(i.toString().padStart(4, '0'))[\n    }\n    stack.sort((a, b) => {\n    return Math.random() - 0.5\n    });\n}\n\nfunction generator(){\n    if(stack.length === 0){\n    fillStack()\n    }\n    return stack.pop()\n}\n\nreturn generator\n}\n\nconst getCode = createRandomCode()\nconsole.log(getCode())\n\nЗАДАЧА 3\nconsole.log(1);\n\nsetTimeout(() => {\n    console.log(2);\n\n    setTimeout(() => {\n    console.log(3);\n    }, 100);\n}, 0);\n\nsetTimeout(() => {\n    console.log(4);\n\n    new Promise((resolve) => {\n    console.log(5);\n\n    resolve(6);\n}).then((number) => {\n    setTimeout(() => {\n    console.log(7);\n    }, 0);\n\n    return number * number / 2;\n}).then(console.log);\n}, 50); [\n\n// 1 2 4 5 18 7 3\n\nЗАДАЧА 4\nКак можно улучшить код?\nconst fetchData = () => {\n    return Promise.resolve([\n        {\n            name: \"John\",    ]\n            age: 30,\n            skill: \"JS\"\n        },\n        {\n            name: \"Mary\",\n            age: 15,\n            skill: \"PHP\"\n        },\n        {\n            name: \"Peter\",\n            age: 25,\n            skill: \"GO\"\n        },\n        {\n            name: \"Jorge\",\n            age: 10,\n            skill: \"GO\"\n        }\n    ]);\n});\n\nconst groupDataBySkill = (data) => {\n    return data.reduce((total, item) => {\n        total[item.skill] = total[item.skill] ??= [];\n        total[item.skill] = [...total[item.skill], item];\n    }\n    return total;\n}, {});\n};\n\nconst main = async () => {\n    const data = await fetchData();\n    const mappedData = groupDataBySkill(data);\n    console.log(mappedData);\n};\n\nmain();\n\nОТВЕТ\nconst groupDataBySkill = (data) => {\n    return data.reduce((total, item) => {\n\n        if (!total[item.skill]){\n            total[item.skill] = []\n        }\n        total[item.skill].push(item)\n\n        total[item.skill] = total[item.skill] ??= [];\n        total[item.skill] = [...total[item.skill], item];\n\n        return total;\n    }, {});\n};\n\nconst main = async () => {\n    try {\n        const data = await fetchData();\n        const mappedData = groupDataBySkill(data);\n        console.log(mappedData);\n    } catch(err) {\n        console.error('Error: ', err)\n    }\n};\nmain();"
      }
    ]
  },
  {
    "company": "RecruitTech",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-04-24 13:10:47",
        "content": "2025-04-24 13:10:47\n Daniil Max -> 2071074234:\nНазвание компании: RecruitTech\n— Ссылка на вакансию: потеряна\n— ЗП: 250К~300K\n— Задачи: теория, лайвкодинг \nЗапись на ютуб: https://www.youtube.com/watch?v=IuXeSM0H1-k\n— Успех собеса: нет\n— Фидбек от HR: не общались больше после собеса\n\nP.s. На собесе собеседующий позволял себе насмешки и вёл себя с явным высокомерием. Когда я спокойно сказал, что чувствую давление и токсичную атмосферу, он просто встал и ушел.",
        "full_content": "2025-04-24 13:10:47\n Daniil Max -> 2071074234:\nНазвание компании: RecruitTech\n— Ссылка на вакансию: потеряна\n— ЗП: 250К~300K\n— Задачи: теория, лайвкодинг \nЗапись на ютуб: https://www.youtube.com/watch?v=IuXeSM0H1-k\n— Успех собеса: нет\n— Фидбек от HR: не общались больше после собеса\n\nP.s. На собесе собеседующий позволял себе насмешки и вёл себя с явным высокомерием. Когда я спокойно сказал, что чувствую давление и токсичную атмосферу, он просто встал и ушел."
      },
      {
        "timestamp": "2025-03-13 15:33:50",
        "content": "2025-03-13 15:33:50\n Timofei Syromiatnikov -> 2071074234:\nКомпания: RecruitTech\nВакансия: https://hh.ru/vacancy/117741116\nЗП: 250-300к\nЗадачи:\n1)  \n// Необходимо реализовать функцию sleep, которая при вызове приостанавливает выполнение кода на указанное количество миллисекунд\n// Ожидается, что sleep будет работать как промис и корректно поддерживать await\n\nfunction sleep(delay) {\n}\n\nsleep(3000).then()\n\nasync function foo() {\nawait sleep(5000);\n}\n\n2) \n// Напиши функцию filterObjectByKeys. А потом...",
        "full_content": "2025-03-13 15:33:50\n Timofei Syromiatnikov -> 2071074234:\nКомпания: RecruitTech\nВакансия: https://hh.ru/vacancy/117741116\nЗП: 250-300к\nЗадачи:\n1)  \n// Необходимо реализовать функцию sleep, которая при вызове приостанавливает выполнение кода на указанное количество миллисекунд\n// Ожидается, что sleep будет работать как промис и корректно поддерживать await\n\nfunction sleep(delay) {\n}\n\nsleep(3000).then()\n\nasync function foo() {\nawait sleep(5000);\n}\n\n2) \n// Напиши функцию filterObjectByKeys. А потом протипизируй её (дженериком)\nconst obj = { a: 1, b: 2, c: 3, d: 4 };\n\n\nfunction filterObjectByKeys(obj) {\n}\n\nconst filtered1 = filterObjectByKeys(obj, [\"a\", \"c\"]); \n// { a: 1, c: 3 }\n\nconst filtered2 = filterObjectByKeys(obj, [\"b\", \"d\"]); \n// { b: 2, d: 4 }\n\nconst filtered3 = filterObjectByKeys(obj, []); \n// {}\n\nconsole.log(filtered1, filtered2, filtered3);\n\n3) \nimport { useSyncExternalStore } from 'react';\n\n// много подписчиков (где-то хранить) -> каждый подписчик (слушатель) должен быть уникальным (не должно быть дублей)\n// cards changed -> notify listeners\n// короче написать для стора все методы и организовать функционал оповещения всех слушателей при добавлении, удалении карточек\nexport const cardStore = {\n    cards: [],\n    listeners: new Set(),\n    \n    subscribe() {},\n    getState() {},\n    addCard() {},\n    removeCard() {}\n};\n\n// экстра задание, надо решить проблему утечки памяти при использовании subscribe функции (надо добавить unsubscribe функцию и возвращать ее в subscribe).\nconst unsubFn = cardStore.subscribe(() => {\n    console.log('reaction')\n})\nunsubFn()\n\nexport const CardList = () => {\n    const cards = useSyncExternalStore(cardStore.subscribe, cardStore.getState); // тут еще проблема с контекстом будет у методов объекта, надо контекст приписать, например с помощию bind cardStore.subscribe.bind(cardStore)\n    \n    return (\n        <>\n            <button onClick={() => cardStore.addCard('New Card')}>Add card</button>\n            <hr />\n            <ul>\n                {cards.map(card => (\n                    <li key={card.id}>\n                        {card.text} \n                        <button onClick={() => cardStore.removeCard(card.id)}>Remove</button>\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n}"
      },
      {
        "timestamp": "2025-01-28 09:59:51",
        "content": "2025-01-28 09:59:51\n Кирилл -> 2071074234:\nНазвание компании: RecruitTech\nСсылка на вакансию: https://hh.ru/vacancy/115270437\nЗП: 120-150 тыс., формат работы только офис\n\nДолжен был быть тех собес, но за пару часов поменяли на софт собес, который длился 10 минут)\n\nВопросы: \n1. Расскажи о себе\n2. Расскажи про проект\n3. 5 достижений и 5 факапов\n\nУспех собеса: ❌\nФидбек о собсесе от HR: в пользу другого кандидата был выбор сделан",
        "full_content": "2025-01-28 09:59:51\n Кирилл -> 2071074234:\nНазвание компании: RecruitTech\nСсылка на вакансию: https://hh.ru/vacancy/115270437\nЗП: 120-150 тыс., формат работы только офис\n\nДолжен был быть тех собес, но за пару часов поменяли на софт собес, который длился 10 минут)\n\nВопросы: \n1. Расскажи о себе\n2. Расскажи про проект\n3. 5 достижений и 5 факапов\n\nУспех собеса: ❌\nФидбек о собсесе от HR: в пользу другого кандидата был выбор сделан"
      },
      {
        "timestamp": "2024-10-25 20:06:43",
        "content": "2024-10-25 20:06:43\n Mike -> 2071074234:\nКомпания: RecruitTech\nЗП:до 150к\nВакансия:https://hh.ru/vacancy/108637623?hhtmFrom=employer_vacancies\n0.Много вопросов по легенде \n1.сильные/слабые стороны \n2.useMemo \n3.Глубокая копия объекта \n4.Set \n5.Методы массива, которые не мутируют массив \n6.useEffect/useLayoutEffect \n7.event/currentTarget \n8.Задача 1 - развернуть строку \n1. str.split('') — разбивает строку на массив символов. \n2. reverse() — переворачивает массив. \n3. join('') — соединяет массив о...",
        "full_content": "2024-10-25 20:06:43\n Mike -> 2071074234:\nКомпания: RecruitTech\nЗП:до 150к\nВакансия:https://hh.ru/vacancy/108637623?hhtmFrom=employer_vacancies\n0.Много вопросов по легенде \n1.сильные/слабые стороны \n2.useMemo \n3.Глубокая копия объекта \n4.Set \n5.Методы массива, которые не мутируют массив \n6.useEffect/useLayoutEffect \n7.event/currentTarget \n8.Задача 1 - развернуть строку \n1. str.split('') — разбивает строку на массив символов. \n2. reverse() — переворачивает массив. \n3. join('') — соединяет массив обратно в строку. \n9.Задача 2"
      }
    ]
  },
  {
    "company": "Nedra Digital",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-05-26 18:51:25",
        "content": "2025-05-26 18:51:25\n Ivan -> 2071074234:\n- Nedra digital\n- мидл\n- зп от 200\n\n- Вопрос по резюме - Подробно рассказать про построение графиков, какими способами, по какой технологии, с пом какой библиотеки делал.\n- Спросил про канвас, пиксель, хотя в резюме у меня о нем ничего не было\n\nЗадача 1.1 (как пояснили - экспериментальная): нужно сделать чтобы конфетки разлетались не по сторонам, а с гравитацией, после взрыва чтобы падали вниз\n\napp.stage.on(\"pointerdown\", (e) => {\n  createExplosion(e.glob...",
        "full_content": "2025-05-26 18:51:25\n Ivan -> 2071074234:\n- Nedra digital\n- мидл\n- зп от 200\n\n- Вопрос по резюме - Подробно рассказать про построение графиков, какими способами, по какой технологии, с пом какой библиотеки делал.\n- Спросил про канвас, пиксель, хотя в резюме у меня о нем ничего не было\n\nЗадача 1.1 (как пояснили - экспериментальная): нужно сделать чтобы конфетки разлетались не по сторонам, а с гравитацией, после взрыва чтобы падали вниз\n\napp.stage.on(\"pointerdown\", (e) => {\n  createExplosion(e.global.x, e.global.y);\n});\n\n// Создание взрыва частиц\nfunction createExplosion(x, y) {\n  const particleCount = 50;\n  for (let i = 0; i < particleCount; i++) {\n    const particle = new PIXI.Graphics();\n    particle.beginFill(0xffffff * Math.random());\n    particle.drawCircle(0, 0, 2 + Math.random() * 4);\n    particle.endFill();\n\n    particle.x = x;\n    particle.y = y;\n\n    // Случайное направление и скорость\n    const speed = 2 + Math.random() * 5;\n    const angle = Math.random() * Math.PI * 2;\n    particle.vx = Math.cos(angle) * speed;\n    particle.vy = Math.sin(angle) * speed;\n\n    // Время жизни частицы\n    particle.life = 60 + Math.random() * 60;\n\n    app.stage.addChild(particle);\n    particles.push(particle);\n  }\n}\n\n// Игровой цикл\napp.ticker.add(() => {\n  for (let i = particles.length - 1; i >= 0; i--) {\n    const particle = particles[i];\n    particle.x += particle.vx;\n    particle.y += particle.vy;\n    particle.life--;\n\n    // Удаление \"мёртвых\" частиц\n    if (particle.life <= 0) {\n      app.stage.removeChild(particle);\n      particles.splice(i, 1);\n    }\n  }\n});\n\n\n- Отличие GET от POST запроса.\n- Что делает команда git rebase?\n- Что такое CORS Аббревиатура?\n- Что такое JWT-токен и зачем используется?\n- Как браузер делает рендер страницы?\n- Допустим, тебе нужно написать функцию на JavaScript, которая принимает какое-то число, делает внутри какой-то сложный расчет и отдает число. Сделать именно таким образом, чтобы для одного и того же аргумента вот этот расчет уже не производиться два раза, а давался предыдущий результат. Как бы ты это сделал?\n- Допустим, есть массив. Функция, которая принимает массив. В этом массиве 100 урлов лежит. Функция должна все их опросить и вернуть массив ответов в том же порядке, в котором они лежали. Как бы ты это делал? Что бы использовал чтобы получив ошибку, вернуть результат?\n- Допустим, у нас в приложении есть большая коллекция данных. Есть контакты на 100 тысяч человек. То есть у сервера мы указываем, в каком виде данных мы будем это хранить. Выбираем между массивом и объектом.\n\nЗадача 2.1\n\nPromise.resolve().then(() => console.log(1));\nsetTimeout(() => console.log(2));\nPromise.resolve().then(() => console.log(3));\nconsole.log(4);\n\n\nЗадача 2.2\n\nfunction failedJob() {\n  return new Promise(function (resolve, reject) {\n    reject();\n  });\n}\n\nconst promise = failedJob();\n\npromise\n  .then(function () {\n    console.log(\"Success 1\");\n  })\n  .then(function () {\n    console.log(\"Success 2\");\n  })\n  .then(function () {\n    console.log(\"Success 3\");\n  })\n  .catch(function () {\n    console.log(\"Error 1\");\n  })\n  .then(function () {\n    console.log(\"Success 4\");\n  });\n\n\nЗадача 2.3\n\nasync function foo() {\n  await Promise.resolve(1);\n  console.log(2);\n}\n\nconsole.log(3);\nfoo();\nconsole.log(4);\n\n\nЗадача 2.4\n\nasync function foo() {\n  const result = await new Promise(resolve => {\n    setTimeout(() => resolve('Done'), 1000);\n  });\n  console.log(result);\n  return 'Finished';\n}\n\nfoo().then(console.log);\nconsole.log('Start');\n\n\n- У нас есть приложение на реакте написанное. Оно очень большое, тяжелое, грузится долго, как-то браузер тормозит. Тебе надо это все ускорить. Как бы ты к этой проблеме подходил?\n- Что такое утечка памяти в реалиях фронта?\n- Как понять, что у нас утечка памяти в приложении? А если без реакт фич?\n- При планировании архитектуры и приложения есть принцип инверсии записимостей, что это? (последний паттерн из SOLID)"
      },
      {
        "timestamp": "2024-12-11 14:32:44",
        "content": "2024-12-11 14:32:44\n Mikhail Sorokin -> 2071074234:\nNedra digital\nВакансия —  https://hh.ru/vacancy/108676471\nЗп - на тот момент не обсуждали, я называл сумму от 300 000 на руки",
        "full_content": "2024-12-11 14:32:44\n Mikhail Sorokin -> 2071074234:\nNedra digital\nВакансия —  https://hh.ru/vacancy/108676471\nЗп - на тот момент не обсуждали, я называл сумму от 300 000 на руки"
      },
      {
        "timestamp": "2024-11-14 08:27:22",
        "content": "2024-11-14 08:27:22\n аыеъа -> 2071074234:\nNedra Digital Финал\nЗП: 250к\nВакансия: написала hr\nВидео:",
        "full_content": "2024-11-14 08:27:22\n аыеъа -> 2071074234:\nNedra Digital Финал\nЗП: 250к\nВакансия: написала hr\nВидео:"
      },
      {
        "timestamp": "2024-11-05 09:01:30",
        "content": "2024-11-05 09:01:30\n аыеъа -> 2071074234:\nNedra Digital\nЗП: 250к\nВакансия: написала hr\nВопросы:\nСпособы копирования объекта\nПреимущества и  недостатки объектов и массивов при работе с большими данными\nБыл ли опыт с canvas и хочешь ли его изучать?\nКакие проблемы и методы их решения есть при лагах на странице?\n\nДали 20 минут на задачку\n//  По клику кнопка должна:\n//  1. Дизейблиться на 5 секунд\n//  2. Показывать обратный отсчёт\n\n\n// Решение\nimport React, { useState, useEffect } from \"react\";\nimpor...",
        "full_content": "2024-11-05 09:01:30\n аыеъа -> 2071074234:\nNedra Digital\nЗП: 250к\nВакансия: написала hr\nВопросы:\nСпособы копирования объекта\nПреимущества и  недостатки объектов и массивов при работе с большими данными\nБыл ли опыт с canvas и хочешь ли его изучать?\nКакие проблемы и методы их решения есть при лагах на странице?\n\nДали 20 минут на задачку\n//  По клику кнопка должна:\n//  1. Дизейблиться на 5 секунд\n//  2. Показывать обратный отсчёт\n\n\n// Решение\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Container } from \"./style\";\n\nconst App = () => {\n  const [isDisabled, setIsDisabled] = useState(false);\n  const [count, setCount] = useState(0);\n\n  let timer;\n\n  const onResentEmail = () => {\n    setIsDisabled(true);\n    setCount(5);\n    timer = setInterval(() => {\n      setCount((prev) => prev - 1);\n    }, 1000);\n    console.log(\"resend email\");\n  };\n\n  useEffect(() => {\n    if (count <= 0) {\n      setIsDisabled(false);\n      clearInterval(timer);\n    }\n  }, [timer, count]);\n\n  return (\n    <Container>\n      <Button onClick={onResentEmail} disabled={isDisabled}>\n        Resend Email\n      </Button>\n      {isDisabled && <div>{count}</div>}\n    </Container>\n  );\n};\n\nexport default App;"
      }
    ]
  },
  {
    "company": "R-Vision",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-06-11 23:04:11",
        "content": "2025-06-11 23:04:11\n Артём -> 2071074234:\nКомпания: R-vision (Р-вижн)\nЗп: от 300\n\n1) Расскажи о себе, о своём опыте\n2) Что для тебя сложная форма\n3) Как себя оцениваешь, на какую позицию\n4) Event loop\n5) Что будет в консоли\nfunction fn() {\n    console.log(this)\n}\n\nconst newObj = {\n    somefn() {\n        return this\n    }\n}\n\nconsole.log(newObj.somefn())\n\nconst example1 = new fn()\nconsole.log(example1)\n6) Что будет с приложением при таком написании функций:\nfunction fn() {\n    return new Promise((...",
        "full_content": "2025-06-11 23:04:11\n Артём -> 2071074234:\nКомпания: R-vision (Р-вижн)\nЗп: от 300\n\n1) Расскажи о себе, о своём опыте\n2) Что для тебя сложная форма\n3) Как себя оцениваешь, на какую позицию\n4) Event loop\n5) Что будет в консоли\nfunction fn() {\n    console.log(this)\n}\n\nconst newObj = {\n    somefn() {\n        return this\n    }\n}\n\nconsole.log(newObj.somefn())\n\nconst example1 = new fn()\nconsole.log(example1)\n6) Что будет с приложением при таком написании функций:\nfunction fn() {\n    return new Promise((res, rej) => {\n        return fn()\n    })\n}\nfn()\n\nfunction fn2() {\n    return fn()\n}\nfn2()\n7) CSS, с какими библиотеками работал, что больше нравится\n8) Какие компоненты стоит оборачивать в Storybook\n9) Задача на рефакторинг компонента, с его трансляции на экрана,\nпоправить только стили\n10) Чтобы верстал на grid, а что на flex. Приведи примеры из опыта\n11) Почему в некоторых ситуациях reduce будет не оптимально работать если в качестве аккумулятора будет объект или массив\n12) Что может триггерить ререндер в React\n13) Как мемо сравнивает пропсы под капотом, что мы можем передать туда вторым аргументом\n14) Если в списке мы явно не укажем key, что react поставит в качестве ключей\n15) useEffect\n16) useLayoutEffect\n17) Для чего нам нужен стор, какие использовал, с какими знаком\n18) useContext, какие минусы\n19) Подробно про React Hook Form\n20) Какой тип реализован ниже (Omit)\ntype customOmit<T, K extends keyof T> = {\n  [P in keyof T as P extends K ? never : P]: T[P];\n}\n21) Реализовать игру пятнашки, решения нет, вот ссылка на игру\nhttps://puzzlelove.ru/pyatnashki-online-free\nВ конце должно быть пусто (0)\nМассив должен быть отсортирован"
      },
      {
        "timestamp": "2024-12-06 22:29:26",
        "content": "2024-12-06 22:29:26\n Maksim -> 2071074234:\nКомпания: R-Vision(2 этап(душный лид))                                                                                                                                                        Вопросы + Задачи:                                                                                                                                                                                             Подробно про опыт,Как ставили задачи ,кто ставил задачи ,как ...",
        "full_content": "2024-12-06 22:29:26\n Maksim -> 2071074234:\nКомпания: R-Vision(2 этап(душный лид))                                                                                                                                                        Вопросы + Задачи:                                                                                                                                                                                             Подробно про опыт,Как ставили задачи ,кто ставил задачи ,как заимодествовал с бекендом,все очень подробно,про запоминающие задачи которыми гордишься(очень подробно распрашивал (Софт)                                                             Задачи:\nArray.prototype.reduce = function(callback, initialValue) {\n\n    // Начальное значение аккумулятора\n    let accumulator = initialValue;\n\n    // Итерация по массиву\n    for (let i = 0; i < this.length; i++) {\n        // Если начальное значение не задано, устанавливаем первый элемент как начальное\n        if (accumulator === undefined && i === 0) {\n            accumulator = this[i];\n        } else {\n            // Применение функции-колбэка\n            accumulator = callback(accumulator, this[i], i, this);\n        }\n    }\n\n    // Возврат итогового аккумулятора\n    return accumulator;\n};\n// Реализовать полифиил Array.reduce\n\n        Array.prototype.reduce = function<T,U>(this:T[],callback:(accumulator:U,currentValue:T,index:number,\n        array:T[]) => U,initialValue?:U):U {\n\n        let accumulator = initialValue as U\n\n    for (let i = 0; i < this.length; i++){\n\n    //     if( accumulator  === undefined && i === 0){\n\n    //     accumulator = this[i]\n\n    // }  else {\n            accumulator = callback(accumulator,this[i] , i ,this)\n        // }\n\n    }\n        return accumulator\n\n        }\n\n\n[1,2,3].reduce((result, item, index, array) => {\n    return result + item + index + array.length;\n},0);"
      },
      {
        "timestamp": "2024-11-27 12:57:13",
        "content": "2024-11-27 12:57:13\n Стас Тихомиров -> 2071074234:\nКомпания:R-Vision (Р-Вижн)\nВакансия: https://yoshkar-ola.hh.ru/vacancy/108733983?from=employer&hhtmFrom=employer\nЗП: не обсуждали\n\nЗадачи:\nчто будет в массиве если\nconst arr = [1,2,3]\narr['5'] = 'test'\nеще\narr['xyz'] = 'test'\n\nВопросы: \n- Расскажи про опыт\n- Как зафризить объект\n- Что такое this\n- Хуки\n- React.memo\n- FSD\n- Про webworker\n- Способы оптимизации приложения\n- REST vs GraphQL\n- Методы REST\n- JWT\n- Про разные архитектуры какие еще есть...",
        "full_content": "2024-11-27 12:57:13\n Стас Тихомиров -> 2071074234:\nКомпания:R-Vision (Р-Вижн)\nВакансия: https://yoshkar-ola.hh.ru/vacancy/108733983?from=employer&hhtmFrom=employer\nЗП: не обсуждали\n\nЗадачи:\nчто будет в массиве если\nconst arr = [1,2,3]\narr['5'] = 'test'\nеще\narr['xyz'] = 'test'\n\nВопросы: \n- Расскажи про опыт\n- Как зафризить объект\n- Что такое this\n- Хуки\n- React.memo\n- FSD\n- Про webworker\n- Способы оптимизации приложения\n- REST vs GraphQL\n- Методы REST\n- JWT\n- Про разные архитектуры какие еще есть\n- Паттерны проектирования\n- SOLID\n- interface vs type\n- any vs unknown\n- never\n- Generic\n- Utility Types\n- Специфичность css\n- position (какие есть, подробно) что по умолчанию\n- display (какие есть, подробно )\n- flex vs grid подробно\n- TDD"
      },
      {
        "timestamp": "2024-11-26 11:06:41",
        "content": "2024-11-26 11:06:41\n Maksim -> 2071074234:\nКомпания: R-Vision                                                                                                                                                                                                            Ваканси: https://hh.ru/vacancy/108733983                                                                                                                                                                                                   ...",
        "full_content": "2024-11-26 11:06:41\n Maksim -> 2071074234:\nКомпания: R-Vision                                                                                                                                                                                                            Ваканси: https://hh.ru/vacancy/108733983                                                                                                                                                                                                                                                Зп: не обсуждали                                                                                                                                                                                                                   Вопросы: 1)Расскажи про опыт 2)Делал ли динамаческие формы 3)Разница graphQL от Reast Api 4)Плюсы и минусы FSD 5)Какие способы оптимизации знаешь 6)Расскажи про Promise 7)Работал ли с генераторами и для чего они 8)Какие сборки знаешь и какими сабирал проекты 9)В кого в будущем развиваться хотел бы 10)Про Proxy 11)Какими способами можем заблочить страницу(while(true) и т.д) 12)Расскажи про EventLoop + задача ниже прикреплю 13)Если нам нужен метод filter,а его нету как нам реализовать (записать в прототип)) 13)Работал ли с Ts ,на сколько себя оцениваешь 13)Про джинерики расскажи 14)Про утилити type 15)Отличие any от uncknow 16)Работал с infer?  17)когда вводим в браузерную строку Enter что происходит 18)Про SSE , websocket 19)Перед тем как устанавливать npm что бы ты делал 20) Про Lcp Fid Cls 21)Про jwt  22) На проекте зависла страница твои действия Задача:// 1  \nconst doSomething = () => {  \n    Promise.resolve().then(() => {  \n        doSomething();  \n    });  \n};  \n\ndoSomething();  \n\n// 2  \nconst doSomething2 = () => {  \n    doSomething2();  \n};  \n\ndoSomething2();  \n\n// 3  \nconst first = new Promise((resolve, reject) => {  \n    setTimeout(resolve, 500, \"one\");  \n});  \n\nconst second = new Promise((resolve, reject) => {  \n    setTimeout(resolve, 1000, \"two\");  \n});  \n\nPromise.race([first, second]).then(res => console.log(res));"
      }
    ]
  },
  {
    "company": "Финам",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-01-28 09:33:37",
        "content": "2025-01-28 09:33:37\n Ilya -> 2071074234:\nКомпания: Финам \nВакансия: hr написала \nЗП: 250+\n\nЗадача:\n\nНаписать с нуля приложение с SSR. Отрендерить список с https://rickandmortyapi.com/, сделать верстку как на сайте, сделать по клику на сущность переход на новую страницу с подгрузкой данных.\n\nШарить весь экран, можно гуглить",
        "full_content": "2025-01-28 09:33:37\n Ilya -> 2071074234:\nКомпания: Финам \nВакансия: hr написала \nЗП: 250+\n\nЗадача:\n\nНаписать с нуля приложение с SSR. Отрендерить список с https://rickandmortyapi.com/, сделать верстку как на сайте, сделать по клику на сущность переход на новую страницу с подгрузкой данных.\n\nШарить весь экран, можно гуглить"
      },
      {
        "timestamp": "2024-11-01 14:03:55",
        "content": "2024-11-01 14:03:55\n аыеъа -> 2071074234:\nФинам\nЗП: 250к\nВакансия: https://hh.ru/vacancy/109079560\nВопросы:\nБыли поведенческие вопросы, что ты сделаешь в той или иной ситуации\nЧто происходит после нажатия enter в браузере\nКакие порты существуют (80 http, 443 https)\nЧто такое SSL, какие есть типы шифрования (симметричные и асимметричные)\nКакие unit тесты можно написать для задачки ниже\nЗадачка:\nСоздать хук с запросом к постам и вывести их\nПри нажатии на пост открывать и закрывать комменты к посту...",
        "full_content": "2024-11-01 14:03:55\n аыеъа -> 2071074234:\nФинам\nЗП: 250к\nВакансия: https://hh.ru/vacancy/109079560\nВопросы:\nБыли поведенческие вопросы, что ты сделаешь в той или иной ситуации\nЧто происходит после нажатия enter в браузере\nКакие порты существуют (80 http, 443 https)\nЧто такое SSL, какие есть типы шифрования (симметричные и асимметричные)\nКакие unit тесты можно написать для задачки ниже\nЗадачка:\nСоздать хук с запросом к постам и вывести их\nПри нажатии на пост открывать и закрывать комменты к посту\nimport React from 'react';\nimport './style.css';\n\nconst POSTS_ENDPOINT = 'https://jsonplaceholder.typicode.com/posts';\n// Post Comments: 'https://jsonplaceholder.typicode.com/posts/{id}/comments';\n\ninterface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\ninterface Comment {\n  postId: number;\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Hello StackBlitz!</h1>\n      <p>Start editing to see some magic happen :)</p>\n    </div>\n  );\n}"
      },
      {
        "timestamp": "2024-07-25 13:11:02",
        "content": "2024-07-25 13:11:02\n Ilya -> 2071074234:\n25.07 Финам\n-зп: 250-270\n- вопросы: \n1) this\n2) как работает реакт\n3) способы оптимизации(useCallback, useMemo, memo)\n4) Стадии события\n5) расскажи про наследования\n6) расскажи про _proto_, prototype \n7) всегда ли стоит использовать мемоизацию\n8) области видимости в js \n- задачи:\nнаписать хук, который делает запрос и возвращает data, loading, erro и написать функцию которая берет два массива и отдает один с элементами, которые есть и в первым и во втором\n...",
        "full_content": "2024-07-25 13:11:02\n Ilya -> 2071074234:\n25.07 Финам\n-зп: 250-270\n- вопросы: \n1) this\n2) как работает реакт\n3) способы оптимизации(useCallback, useMemo, memo)\n4) Стадии события\n5) расскажи про наследования\n6) расскажи про _proto_, prototype \n7) всегда ли стоит использовать мемоизацию\n8) области видимости в js \n- задачи:\nнаписать хук, который делает запрос и возвращает data, loading, erro и написать функцию которая берет два массива и отдает один с элементами, которые есть и в первым и во втором\n\n\nimport { useState, useEffect } from 'react';\n\n// Имитация функции загрузки профиля пользователя\nconst loadUserProfile = (userid) => {\n    return Promise.resolve({ id: userid, name: \"User1\" });\n};\n\nconst useUserProfile = (userid) => {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        // Сбрасываем состояние при изменении userid\n        setLoading(true);\n        setError(null);\n        \n        // Загружаем профиль пользователя\n        loadUserProfile(userid)\n            .then((userData) => {\n                setData(userData);\n            })\n            .catch((err) => {\n                setError(err);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, [userid]); // Зависимость от userid\n\n    return { data, loading, error };\n};\n\nexport default useUserProfile;\n\n\nfunction intersectArrays(array1, array2) {\n    // Создаем множество из второго массива для быстрого поиска\n    const set2 = new Set(array2);\n    \n    // Фильтруем первый массив, оставляя только те элементы, которые есть во втором массиве\n    const intersection = array1.filter(item => set2.has(item));\n    \n    return intersection;\n}\n\n// Пример использования:\nconst array1 = [1, 2, 3, 4, 5];\nconst array2 = [4, 5, 6, 7, 8];\nconst result = intersectArrays(array1, array2);\n\nconsole.log(result); // [4, 5]"
      },
      {
        "timestamp": "2024-06-10 17:57:05",
        "content": "2024-06-10 17:57:05\n Tonidevs -> 2071074234:\nФинам техскрин\nвакансия: hr написал\nЗП: 200-250к\nУспех: фидбек положительный, но без оффера\n\nвопросы\n- как в Nextjs реализован SSR\n- накидай сценарий реализации большой задачи\n- каким требованиям должен отвечать HTML - чтобы называться хорошим? - про seo, семантику и доступность, альтернативный текст\n- теоретический кейс про доступность: как решить доступность кнопки в кнопке? - про атрибут role=\"button\"\n- механизмы перерисовки реакта\n- критерии выбор...",
        "full_content": "2024-06-10 17:57:05\n Tonidevs -> 2071074234:\nФинам техскрин\nвакансия: hr написал\nЗП: 200-250к\nУспех: фидбек положительный, но без оффера\n\nвопросы\n- как в Nextjs реализован SSR\n- накидай сценарий реализации большой задачи\n- каким требованиям должен отвечать HTML - чтобы называться хорошим? - про seo, семантику и доступность, альтернативный текст\n- теоретический кейс про доступность: как решить доступность кнопки в кнопке? - про атрибут role=\"button\"\n- механизмы перерисовки реакта\n- критерии выбора хранения данных в стейт менеджере\n- способы получения данных с бекенда\n- сужение типов в TypeScript\n- разница type от interface\n\nзадачи\n- первая задача на семантику, надо раскидать было страницу и подвох был с формой\n<form>\n  <fieldset>\n    <legend>Contact Information</legend>\n    <div>\n      <label for=\"name\">Name:</label>\n      <input type=\"text\" id=\"name\" name=\"name\">\n    </div>\n    <div>\n      <label for=\"email\">Email:</label>\n      <input type=\"email\" id=\"email\" name=\"email\">\n    </div>\n  </fieldset>\n  <button type=\"submit\">Send</button>\n</form>\n\n\n- на верстку покрасить абзацы\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>HTML + CSS</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>This is a simple HTML + CSS template!</h1>\n    <!-- 1. Покрасить каждый второй абзац списка c id=a в красный .\n   2. Нужно все h2 с классом bbb из элемента с классом fff покрасить в синий. -->\n    <div id=\"a\">\n      <p>first</p>\n      <p>second</p>\n      <p>third</p>\n      <p>fourth</p>\n      <p>fifth</p>\n    </div>\n\n    <div class=\"fff\">\n      <h2 class=\"bbb\">+++</h2>\n      <p>---</p>\n\n      <h2 class=\"bbb\">+++</h2>\n      <p>---</p>\n      <p class=\"bbb\">---</p>\n    </div>\n\n    <h2 class=\"bbb\">---</h2>\n    <p class=\"bbb\">---</p>\n    <p class=\"fff\">---</p>\n  </body>\n</html>\n\n- на понимания области видимости переменных в асинхронных контекстах\nfor(var i = 0; i < 4; i++){\n  setTimeout(() => console.log(i), 0);\n}\n\n- на замыкание \n/**\n * Нужно написать функцию, которая принимает число N и возвращает функцию,\n * вызов которой первые N раз возвращает 'yes', а потом – 'no'.\n */\n\nfunction canGetCount(n) {\n  let count = 0;\n\n  return function () {\n    count++;\n    if (count <= n) {\n      return \"yes\";\n    } else {\n      return \"no\";\n    }\n  };\n}\n\nconst getOne = canGetCount(2);\n\nconsole.log(getOne(), 1); // yes 1\nconsole.log(getOne(), 2); // yes 2\nconsole.log(getOne(), 3); // no 3\nconsole.log(getOne(), 4); // no 4\n\n- сделать каунтер на реакт\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\n\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount((prev) => prev + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n\nexport { Counter };"
      }
    ]
  },
  {
    "company": "Datagile",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-04-23 01:07:34",
        "content": "2025-04-23 01:07:34\n Ber -> 2071074234:\nКомпания: datagile\nВакансия: https://spb.hh.ru/vacancy/108806806?hhtmFrom=employer_vacancies\nЗП: не обговаривали - сказали можем вернуться к вопросу после тех собеса\n\nТеория:\n1. Какой у тебя опыт? Какой проект разрабатываешь?\n2. Был ли у тебя опыт менторства?\n3. Как именно проходило у тебя ментроство? Что включало?\n4. Был ли опыт лидить команду?\n\nЗадачи: точно как здесь https://t.me/c/2071074234/489/119370\n\nМои вопросы:\n1. Ты спрашивала про менторство - эт...",
        "full_content": "2025-04-23 01:07:34\n Ber -> 2071074234:\nКомпания: datagile\nВакансия: https://spb.hh.ru/vacancy/108806806?hhtmFrom=employer_vacancies\nЗП: не обговаривали - сказали можем вернуться к вопросу после тех собеса\n\nТеория:\n1. Какой у тебя опыт? Какой проект разрабатываешь?\n2. Был ли у тебя опыт менторства?\n3. Как именно проходило у тебя ментроство? Что включало?\n4. Был ли опыт лидить команду?\n\nЗадачи: точно как здесь https://t.me/c/2071074234/489/119370\n\nМои вопросы:\n1. Ты спрашивала про менторство - это важно для вас? То есть много студентов или в каком ключе?\nОтвет: да, бывают случаи, когда есть стажеры и хорошо, когда есть человек, который может взять менторство\n2. Какой у вас флоу? Кто следит за гитом? Есть ли отвественные люди за merge в ветку main?\nОтвет: сперва было только две ветки main и dev, но сейчас ввели feat\n3. А как именно у вас расставляются задачи? От лида и продакта?\nОтвет: да, примерно так. При этом есть бизнес-аналитик, который конкретизирует задачи\n4. Вы используется докер для фронтенд проекта? Как думаешь нужен он вообще?\nОтвет: (несколько неуверенно) нет, не используем.\n5. То есть у вас есть девопсы, которые качественно следят за деплоем? Не случаются конфликты при CI, например?\nОтвет: да, есть девопсы - они всё настраивают как должно быть\n6. Есть ли у вас тестировщики? Как они работают?\nОтвет: да, есть, но в основном ручные\n\n7. Вопрос к HR: какая дальше последовательность найма?\nОтвет: сперва надо нам оценить твой грейд, потом будет ясно и до конца недели ответим"
      },
      {
        "timestamp": "2025-04-18 12:35:22",
        "content": "2025-04-18 12:35:22\n Ivan Kulyaev -> 2071074234:\nКомпания: datagile\nВакансия: https://spb.hh.ru/vacancy/108806806?hhtmFrom=employer_vacancies\nЗп: 230 - 270к на руки (сказали, что это типикал мидл зп)\n\nИз теории только вопросы по опыту\n\nЗадачи:\n\n\n// 1\n\nimport React, { useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nfunction A() {\n  console.log('A');\n  return <B />;\n}\n\nfunction B() {\n  console.log('B');\n  return <C />;\n}\n\nfunction C() {\n  console.log('C');\n  ret...",
        "full_content": "2025-04-18 12:35:22\n Ivan Kulyaev -> 2071074234:\nКомпания: datagile\nВакансия: https://spb.hh.ru/vacancy/108806806?hhtmFrom=employer_vacancies\nЗп: 230 - 270к на руки (сказали, что это типикал мидл зп)\n\nИз теории только вопросы по опыту\n\nЗадачи:\n\n\n// 1\n\nimport React, { useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nfunction A() {\n  console.log('A');\n  return <B />;\n}\n\nfunction B() {\n  console.log('B');\n  return <C />;\n}\n\nfunction C() {\n  console.log('C');\n  return null;\n}\n\nfunction D() {\n  console.log('D');\n  return null;\n}\n\nfunction App() {\n  const [state, setState] = useState(0);\n\n  useEffect(() => {\n    setState((state) => state + 1);\n  }, []);\n\n  console.log('App');\n\n  return (\n    <div>\n      <A state={state} />\n      <D />\n    </div>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n\n\n// 2\n\n\nimport React, { useState } from 'react';\nimport { screen } from '@testing-library/dom';\nimport userEvent from '@testing-library/user-event';\nimport { createRoot } from 'react-dom/client';\n\nfunction App() {\n  const [state, setState] = useState(0);\n  console.log(\"App \" + state);\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          setState(count => count + 1);\n          setState(count => count * 2);\n        }}\n      >\n        click me\n      </button>\n    </div>\n  );\n}\n\n(async () => {\n  const root = createRoot(document.getElementById('root'));\n  root.render(<App />);\n\n  userEvent.click(await screen.findByText('click me'));\n})();\n\n\n// 3\n\n\nimport { useState, useEffect } from \"react\";\n\nexport default function App() {\n  const [counter, setCounter] = useState(0);\n\n  console.log(\"render\", counter);\n\n  useEffect(() => {\n    console.log(\"effect\", counter);\n\n    return () => {\n      console.log(\"cleanup\", counter);\n    };\n  }, [counter]);\n\n  useEffect(() => {\n    setCounter((prev) => prev + 1);\n  }, []);\n\n  return null;\n}\n\n\n// 4 \n\n\nimport React from \"react\";\n\nconst Inner = () => {\n  console.log(\"render inner\");\n  return null;\n};\n\nconst App = () => {\n  const [counter, setCounter] = React.useState(0);\n\n  console.log(\"render-1\", counter);\n\n  React.useEffect(() => {\n    setCounter(1);\n    console.log(\"effect-1\", counter);\n  }, [counter]);\n\n  React.useEffect(() => {\n    console.log(\"effect-2\", counter);\n    setCounter(2);\n  }, [counter]);\n\n  console.log(\"render-2\", counter);\n\n  return <Inner />;\n};\n\nexport default App;\n\n\n// 5\n\nЛастовая задача в виде тз, которое надо было делать поэтапно\n\n1. Получение данных\n Запросить список задач методом GET с API:\nhttps://jsonplaceholder.typicode.com/todos\n\n Вывести список задач с текстом задачи (title)\n\n2. Загрузка\n Пока идёт загрузка, отображать 'loading...'\n\n3. Счётчик задач\n Отобразить количество всех задач в списке\n\n4. Расширенное отображение\n Для каждой задачи дополнительно вывести:\n\nuserId\n\nсостояние завершённости (completed)\n\n5. Фильтрация\n Добавить фильтр, который:\n\nоставляет только незавершённые задачи (completed: false)\n\n6. Сортировка\n Отсортировать список задач по userId в порядке убывания\n\n7. Группировка\n Добавить возможность группировать задачи по пользователям (userId)"
      },
      {
        "timestamp": "2024-12-11 14:08:23",
        "content": "2024-12-11 14:08:23\n Mikhail Sorokin -> 2071074234:\nDatagile\nВакансия — https://hh.ru/vacancy/108806806\nЗп — не обсуждали, но я указывал сумму от 300 000 на руки\n\n- что делает браузер после того, как мы ввели адрес в адресной строке\n- отличие http от https\n- что такое CORS\n- способы оптимизации скорости приложения\n- как происходит кеширование\n\nдве задачи на event loop  в реакте, где нужно было сказать, в каком порядке выведутся логи\nК сожалению, произошел какой-то глюк с OBS, собес не записался,...",
        "full_content": "2024-12-11 14:08:23\n Mikhail Sorokin -> 2071074234:\nDatagile\nВакансия — https://hh.ru/vacancy/108806806\nЗп — не обсуждали, но я указывал сумму от 300 000 на руки\n\n- что делает браузер после того, как мы ввели адрес в адресной строке\n- отличие http от https\n- что такое CORS\n- способы оптимизации скорости приложения\n- как происходит кеширование\n\nдве задачи на event loop  в реакте, где нужно было сказать, в каком порядке выведутся логи\nК сожалению, произошел какой-то глюк с OBS, собес не записался, и задачи сохранить не получилось. Пример похожей задачи\n\nexport function Logs3() {\n  console.log(1);\n\n  useEffect(() => {\n    console.log(2);\n  }, []);\n\n  return <Child />;\n}\n\nfunction Child() {\n  console.log(3);\n\n  useEffect(() => {\n    console.log(4);\n  }, []);\n\n  return \"Logs3\";\n}\n\nЕще была задача в реакте - дан url, с него надо получить список todo, у которых есть название, состояние (выполнен или нет) и пользователь,к которому привязан todo. Необходимо получить список todo, показать процесс загрузки, сделать обработку ошибок, отобразить состояние каждой задачи(выполнена/ не выполнена), сделать чекбокс, при нажатии на который отображаются только сделанные задачи, а также чекбокс, который группирует задачи по userId"
      },
      {
        "timestamp": "2024-11-01 06:20:11",
        "content": "2024-11-01 06:20:11\n Сергей -> 2071074234:\nКомпания: Datagile\nЗП: 250k+\nВакансия: https://hh.ru/vacancy/108806806?hhtmFrom=employer_vacancies\nВопросы:\n- Расскажи про опыт, какая интересная задача была\n- Event loop\n- Omit/Pick\n- В основном лайвкодинг был:\n/// Что выведет? Как исправить?\nconst funcs = [];\n\nfor (var i = 0; i < 5; i++) {\n    funcs.push(function() {\n        console.log(i);\n    });\n}\n\n// Вызов функций\nfuncs.forEach(fn => fn());\n\n\n// объеденить массив, чтобы элементы не повторялись\n\nco...",
        "full_content": "2024-11-01 06:20:11\n Сергей -> 2071074234:\nКомпания: Datagile\nЗП: 250k+\nВакансия: https://hh.ru/vacancy/108806806?hhtmFrom=employer_vacancies\nВопросы:\n- Расскажи про опыт, какая интересная задача была\n- Event loop\n- Omit/Pick\n- В основном лайвкодинг был:\n/// Что выведет? Как исправить?\nconst funcs = [];\n\nfor (var i = 0; i < 5; i++) {\n    funcs.push(function() {\n        console.log(i);\n    });\n}\n\n// Вызов функций\nfuncs.forEach(fn => fn());\n\n\n// объеденить массив, чтобы элементы не повторялись\n\nconst a = [1, 2, 3, 4, 5];\nconst b = [3, 4, 5, 6, 7];\n\nconst mergedArray = [...new Set([...a, ...b])]\n\n\n// объеденить массив, чтобы id не повторялись\n\nconst a = [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }];\nconst b = [{ id: 3 }, { id: 4 }, { id: 5 }, { id: 6 }, { id: 7 }];\n\nconst mergedArray = mergedArr(a,b)\n\nfunction mergedArr(a,b) {\n  return [...a, ...b].filter((item, index, arr) => \n    index === arr.findIndex(obj => obj.id === item.id)\n )\n}\n\nconsole.log(mergedArray)\n\n\nconst a = [\n  {id: 1, name: 'React'},\n  {id: 2, name: 'JS'}\n]\n\ninterface IObj {\n  [key: string]: number\n}\n\nconst res = a.reduce((acc, obj) => {\n  acc[obj.name] = obj.id;\n  return acc;\n}, {} as IObj)\n\n// {React: 1, JS: 2}\n\nconst array = [\n  { id: 3, name: 'Object 3' },\n  { id: 1, name: 'Object 1' },\n  { id: 2, name: 'Object 2' },\n];\narray.sort((a, b) => a.id - b.id);\nconsole.log(array);\n\n\nconst [counter, setCounter] = useState(0);\n\nconsole.log('counter', counter)\n\nuseEffect(() => {\n    console.log(\"Effect\", counter);\n\n    return () => {\n        console.log(\"Cleanup\", counter);\n    };\n}, [counter]);\n\nuseEffect(() => {\n    setCounter(prev => prev + 1)\n    console.log('mount')\n}, []);\n\n\n// counter 0\n// mount\n// counter 1\n// cleaunup 0\n// effect 1\n\n\n// End должно вывести через 2 секунды, как реализовать?\n\nfunction delay() {\n\n}\n\nconsole.log('start')\ndelay(2000)\nconsole.log('end')\n\n\n/*\n * 1. Типизировать орг. структуру\n * 2. Вывести список пользователей\n */\nexport default function Test() {\n  interface IOrgStruct {\n    key: string;\n    name: string;\n    type: 'department' | 'group' | 'user';\n    children?: IOrgStruct[] \n  }\n  const orgStruct: IOrgStruct[] = [\n    {\n      key: '1',\n      name: 'department1',\n      type: 'department',\n      children: [\n        {\n          key: '1.1',\n          name: 'group1',\n          type: 'group',\n          children: [\n            {\n              key: '1.1.1',\n              name: 'user1',\n              type: 'user',\n            },\n            {\n              key: '1.1.2',\n              name: 'user2',\n              type: 'user',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      key: '2',\n      name: 'department2',\n      type: 'department',\n      children: [\n        {\n          key: '2.1',\n          name: 'group2',\n          type: 'group',\n          children: [\n            {\n              key: '2.1.1',\n              name: 'user3',\n              type: 'user',\n            },\n            {\n              key: '2.1.2',\n              name: 'user4',\n              type: 'user',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const getNodeNames = (list: IOrgStruct[], type: any) => {\n    const names: string[] = [];\n    list.forEach(obj => {\n      if (obj.type === 'user') {\n        names.push(obj.name)\n      } else if (obj.children) {\n        names.push(...getNodeNames(obj.children, type))\n      }\n    })\n    // TODO: обойти дерево list и собрать список имен узлов\n    // names.push('user1');\n    return names;\n    \n  };\n\n  const names = getNodeNames(orgStruct, 'user');\n\n  return <>{JSON.stringify(names)}</>; // => [\"user1\"]\n}"
      }
    ]
  },
  {
    "company": "Prooftech IT",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-03-05 10:52:39",
        "content": "2025-03-05 10:52:39\n RdK -> 2071074234:\nProoftech IT 2 этап\nНаписала  hr\nЗП: 270\n\nВопросы:\n1. Расскажи про себя\n2. Итересная задача которую делал\n3. Почему ищешь работу\n4. Типы данных\n5. == vs === \n6. Что выведет в консоли Number(' 12 3 ')\n7. Let var const разница\n8. С вызовом функций  были вопросы не записал\n9. С созданием массива 4 разных варианта, есть только ответ\n10. [].push(1,2).unshift.length ( будет ошибка)\n11. '22' && [] && 1 && null && undefined  что будет\n12. Пару задач на промисы тож...",
        "full_content": "2025-03-05 10:52:39\n RdK -> 2071074234:\nProoftech IT 2 этап\nНаписала  hr\nЗП: 270\n\nВопросы:\n1. Расскажи про себя\n2. Итересная задача которую делал\n3. Почему ищешь работу\n4. Типы данных\n5. == vs === \n6. Что выведет в консоли Number(' 12 3 ')\n7. Let var const разница\n8. С вызовом функций  были вопросы не записал\n9. С созданием массива 4 разных варианта, есть только ответ\n10. [].push(1,2).unshift.length ( будет ошибка)\n11. '22' && [] && 1 && null && undefined  что будет\n12. Пару задач на промисы тоже не записал  что выведет в консоль (не записал)\n13. расскажи про ЕвентЛуп\n\nЗадачи\n\nconst palindrom = (str) => {\n  return str === str.split('').reverse().join('');\n};\n\nconst pasteArray = (arr1, arr2, startIndex) => {\n  return arr1.map((val, index) => \n    index >= startIndex && index < startIndex + arr2.length ? arr2[index - startIndex] : val\n  );\n};\nconst promiseAll = (proms) => { \n  const result = []; \n  let count = 0; \n \n  return new Promise((resolve, reject) => { \n    proms.forEach((pr, idx) => { \n      pr.then((res) => { \n        result[idx] = res; \n        count += 1; \n        if (count === proms.length) resolve(result); \n      }).catch(reject); \n    }); \n  }); \n};"
      },
      {
        "timestamp": "2025-03-03 18:50:51",
        "content": "2025-03-03 18:50:51\n Nikolai -> 2071074234:\nProoftech IT 1 этап\nhttps://prooftechit.com/hr/?vacancy_id=276\nЗП: 270\n\nВопросы:\n1. Какие селекторы знаешь? \n2. Приоритет селекторов в числовых значениях.\n3. Что такое медиазапросы и для чего применяются?\n4. Какие использовал препроцессоры?\n5. Как можно выровнять элемент по центру (с абстрактной задачкой)? Какие способы знаешь?\n6. Для чего использовал переменные в CSS? Для каких-нибудь хитрых применений?\n7. Работал ли с анимацией?\n8. Различия между пос...",
        "full_content": "2025-03-03 18:50:51\n Nikolai -> 2071074234:\nProoftech IT 1 этап\nhttps://prooftechit.com/hr/?vacancy_id=276\nЗП: 270\n\nВопросы:\n1. Какие селекторы знаешь? \n2. Приоритет селекторов в числовых значениях.\n3. Что такое медиазапросы и для чего применяются?\n4. Какие использовал препроцессоры?\n5. Как можно выровнять элемент по центру (с абстрактной задачкой)? Какие способы знаешь?\n6. Для чего использовал переменные в CSS? Для каких-нибудь хитрых применений?\n7. Работал ли с анимацией?\n8. Различия между последним стандартом HTML и предыдущими?\n9. Типы данных в JS какие есть?\n10. Отличие стрелочной от обычной?\n11. var let const отличия?\n12. Как работает event loop?\n13. Как можно запланировать микрозадачу?\n14. Если есть постоянный процесс который генерит микрозадачи заблочит ли он event loop?\n15. Что такое Promise, какие есть методы?\n16. Какие методы применения Promise? Какой используешь? (async await)\n17. Применял ли генераторы?\n18. Применял ли на практике Map Set? В чем отличие Map Set? \n19. Что происходит после того как вбил в строку браузера URL?\n20. В каком месте event loop используется requestAnimationFrame?\n21. Чем тип отличается от интерфейса?\n22. И & от ИЛИ | чем отличается?\n23. Что такое generics?\n24. Как можно типизировать json внутри которого есть вложенное свойство json (рекурсивная вложенность)? \n25. Как сделать интрефейс чтобы часть полей была опциональной, а часть опустить? \n\"26. Дан интерфейс в него вложен еще один интерфейс, а в нем поля со значениями string или number, можно\nли сделать так чтобы вместо этих значний была функция возвращающая string или number?\"\n27. Что такое Virtual DOM, как устроен и работает? Эвристический алгоритм\n28. Что такое хуки и какие использовал в работе?\n29. Расскажи про Context где использовал? Какой минус у Context?\n30. Какие есть методы оптимизации работы приложений?\n31. С какими системами CI/CD работал? \n32. Какие методы работы с ветками встречал? \n33. Какой был gitflow?\n34. Чем отличается merge от rebase?\n35. Есть несколько коммитов и попросили в один объеденить - как это сделать? (засквошить)\n\nСсылка: https://youtu.be/sZ6PZg2vGaw\nУспех собеса: пока неизвестно\nФибек: добавлю позже как станет известен результат"
      },
      {
        "timestamp": "2025-02-26 07:28:23",
        "content": "2025-02-26 07:28:23\n RdK -> 2071074234:\n1. Prooftech IT 1 этап\n2. Написал hr\n3. Зп от 270\n4. Вопросы\n5. Что выводит в консоль\n6. Что такое прототипы и как происходит наследованные\n7. Как сделать неизменяемые поля объекта (Object.freeze)\n8. Как проверить два объекта что они равны или нет \n(через JSON.stringify(value) он захотел. Нужен цикл как на скрине все это устно \n9. Какие есть типы в js\n10. Чем отличается map от reduce  \n11. Что такое промисы\n12. Отличия promise All promise allSetteled\n13. К...",
        "full_content": "2025-02-26 07:28:23\n RdK -> 2071074234:\n1. Prooftech IT 1 этап\n2. Написал hr\n3. Зп от 270\n4. Вопросы\n5. Что выводит в консоль\n6. Что такое прототипы и как происходит наследованные\n7. Как сделать неизменяемые поля объекта (Object.freeze)\n8. Как проверить два объекта что они равны или нет \n(через JSON.stringify(value) он захотел. Нужен цикл как на скрине все это устно \n9. Какие есть типы в js\n10. Чем отличается map от reduce  \n11. Что такое промисы\n12. Отличия promise All promise allSetteled\n13. Как еще можно асинхронно выполнить код  (webworkers и serwerworkers)\n14. Отличия webworkers от serwerworkers (что делают)\n15. Отличие динамической типизации от статической\n16. Что такое declare TS\n17.  Что такое Type guards\n18. Отличие interface type\n19. Методы жизненного цикла в UseEffect\n20. Оптимизация в реакте (memo useMemo useCallback)\n21. Отличие useLayutEfffect\n22. useRef и forwardRef"
      },
      {
        "timestamp": "2024-11-01 14:08:11",
        "content": "2024-11-01 14:08:11\n андрей -> 2071074234:\n1.Prooftech IT в Газпром\n2.ЗП 200к\nВопросы\n1. Сколько тегов Header, footer, main может быть на странице. Если есть section, и там есть эти теги\n2. Специфичность селекторов\n3. Откуда у примитивов методы\n4. Как будет отсортирован массив чисел с помощью sort() \n5. Отличие Arrow function от declaration\n6. \nconsole.log(1);\nsetTimeout(() => console.log(2), 0);\nnew Promise((resolve, reject) => {\n  console.log(3);\n  reject();\n})\n  .then(() => console.log(4))\n  ...",
        "full_content": "2024-11-01 14:08:11\n андрей -> 2071074234:\n1.Prooftech IT в Газпром\n2.ЗП 200к\nВопросы\n1. Сколько тегов Header, footer, main может быть на странице. Если есть section, и там есть эти теги\n2. Специфичность селекторов\n3. Откуда у примитивов методы\n4. Как будет отсортирован массив чисел с помощью sort() \n5. Отличие Arrow function от declaration\n6. \nconsole.log(1);\nsetTimeout(() => console.log(2), 0);\nnew Promise((resolve, reject) => {\n  console.log(3);\n  reject();\n})\n  .then(() => console.log(4))\n  .catch(() => console.log(5));\nconsole.log(6);\n7.\n// какой будет тип\nconst point = {\n  x: 10,\n  y: 20,\n};\ntype T1 = typeof point;\ntype T2 = keyof T1;\n8. \n// какой будет тип test\nlet test\ntest = 123\n9. В каких ситуация можно сталкнуться с типом never\n10. \n// это валидный код?\nlet test: 'hello' = 'hello'\n11.\n// какой будет тип name\nconst name = 'ivan'\n12. Эмитация componentDidMount() используя хуки\n13. Как реализовать бесконечный скролинг карточек на странице\n14. Виртуализация списка\n15. \n\nНапишите функцию removeDuplicates, которая принимает массив и возвращает новый массив без дубликатов.\n*/\nconst removeDuplicates = () => {};\nconsole.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5]));\n// [1, 2, 3, 4, 5]\n16. \n// Напишите функцию, которая возвращает\n//плоскую версию массива (глубина вложенности неизвестна) */\nconst flat = () => {};\n\nconsole.log(flat([[0, [1, [2]]], [3, [4, 5, 6], 7], [8], 9, [10]]));\n// [0,1,2,3,4,5,6,7,8,9,10]"
      }
    ]
  },
  {
    "company": "Автомакон",
    "count": 4,
    "records": [
      {
        "timestamp": "2024-11-11 06:02:05",
        "content": "2024-11-11 06:02:05\n Сергей -> 2071074234:\nКомпания: Автомакон\nЗП: 200+\nВопросы:\n- Про опыт поговорили\n- задача на SetCount(count+1) vs setCount(prev => prev+1), что если из этих вариантов подряд в одном действии вызывать\n- EventLoop\n- Как можно добавить потоки в JS\n- Подробно про redux, какая последовательность действий\n- Задача на промисы\n- Про asnyc и defer\n- про Event Bus\n- Подробно про авторизацию, access token, refresh где хранятся\n- Session/localStorage/indexDB\n- cdn",
        "full_content": "2024-11-11 06:02:05\n Сергей -> 2071074234:\nКомпания: Автомакон\nЗП: 200+\nВопросы:\n- Про опыт поговорили\n- задача на SetCount(count+1) vs setCount(prev => prev+1), что если из этих вариантов подряд в одном действии вызывать\n- EventLoop\n- Как можно добавить потоки в JS\n- Подробно про redux, какая последовательность действий\n- Задача на промисы\n- Про asnyc и defer\n- про Event Bus\n- Подробно про авторизацию, access token, refresh где хранятся\n- Session/localStorage/indexDB\n- cdn"
      },
      {
        "timestamp": "2024-10-30 10:36:43",
        "content": "2024-10-30 10:36:43\n memphis -> 2071074234:\n«Автомакон»\n- зп: 250\n- запись: https://www.youtube.com/watch?v=Ehq04o9eHKY\n- вакансия: https://job.automacon.ru/web_dev\nстатус: ⌛️",
        "full_content": "2024-10-30 10:36:43\n memphis -> 2071074234:\n«Автомакон»\n- зп: 250\n- запись: https://www.youtube.com/watch?v=Ehq04o9eHKY\n- вакансия: https://job.automacon.ru/web_dev\nстатус: ⌛️"
      },
      {
        "timestamp": "2024-09-23 18:00:12",
        "content": "2024-09-23 18:00:12\n Никита -> 2071074234:\n— Название Автомакон\n— Вакансия https://simferopol.hh.ru/vacancy/104393975?hhtmFrom=employer_vacancies\n— зп: 270net назвал\n— видео:",
        "full_content": "2024-09-23 18:00:12\n Никита -> 2071074234:\n— Название Автомакон\n— Вакансия https://simferopol.hh.ru/vacancy/104393975?hhtmFrom=employer_vacancies\n— зп: 270net назвал\n— видео:"
      },
      {
        "timestamp": "2024-07-07 12:26:26",
        "content": "2024-07-07 12:26:26\n dm . -> 2071074234:\n- Автомакон\n- https://simferopol.hh.ru/vacancy/102196928?hhtmFrom=employer_vacancies\n- ЗП: 200-250 gross\n- Задачи:\n1) Типизировать объект comments:\n ts\ninterface Comment<T> {\n    id: T;\n    text: string;\n    children?: Comment<T>[]; \n}\n- Вопросы:\n1) Какая разница между типом и интерфейсом?\n2) В реакт отрисовать комментарии так, что можно было по кнопке \"+\" открывать и скрывать вложенные комментарии.\n \nconst comments: Comment<number>[] = [\n  {\n    id: 1,\n ...",
        "full_content": "2024-07-07 12:26:26\n dm . -> 2071074234:\n- Автомакон\n- https://simferopol.hh.ru/vacancy/102196928?hhtmFrom=employer_vacancies\n- ЗП: 200-250 gross\n- Задачи:\n1) Типизировать объект comments:\n ts\ninterface Comment<T> {\n    id: T;\n    text: string;\n    children?: Comment<T>[]; \n}\n- Вопросы:\n1) Какая разница между типом и интерфейсом?\n2) В реакт отрисовать комментарии так, что можно было по кнопке \"+\" открывать и скрывать вложенные комментарии.\n \nconst comments: Comment<number>[] = [\n  {\n    id: 1,\n    text: \"message 1\",\n    children: [\n  {\n    id: 2,\n    text: \"message 2\"\n  }\n]\n  }\n]\n3) Имитировать подгрузку новых комментариев и на 2 секунды показывать лоадер перед показом вложенных комментариев."
      }
    ]
  },
  {
    "company": "Промсвязьбанк",
    "count": 4,
    "records": [
      {
        "timestamp": "2024-12-11 12:56:02",
        "content": "2024-12-11 12:56:02\n Mikhail Sorokin -> 2071074234:\nПромсвязьбанк\nВакансия — https://hh.ru/vacancy/106962131\nЗп — на тот момент не обсуждалось, я называл желаемую сумму от 300 000 на руки",
        "full_content": "2024-12-11 12:56:02\n Mikhail Sorokin -> 2071074234:\nПромсвязьбанк\nВакансия — https://hh.ru/vacancy/106962131\nЗп — на тот момент не обсуждалось, я называл желаемую сумму от 300 000 на руки"
      },
      {
        "timestamp": "2024-08-29 18:30:19",
        "content": "2024-08-29 18:30:19\n Kirill Anikeev -> 2071074234:\nПСБ (Промсвязьбанк)\nссылка: https://hh.ru/vacancy/88892284\nзп: 300\nВопросы:\nрассказать про опыт (долго общались)\nметоды у примитивов\nхранение информации в браузере\nкоманды git\nмного вопросов про классы\nподробно про solid (применение каждого пункта)\nевент луп\nwhile(true) зависнет ли ?\nзадача на реализацию стека и очереди\nclass Queue{\n    constructor(){\n        this.stack1 = new Stack();\n        this.stack2 = new Stack();\n    }\n    enqueue(){\n    ...",
        "full_content": "2024-08-29 18:30:19\n Kirill Anikeev -> 2071074234:\nПСБ (Промсвязьбанк)\nссылка: https://hh.ru/vacancy/88892284\nзп: 300\nВопросы:\nрассказать про опыт (долго общались)\nметоды у примитивов\nхранение информации в браузере\nкоманды git\nмного вопросов про классы\nподробно про solid (применение каждого пункта)\nевент луп\nwhile(true) зависнет ли ?\nзадача на реализацию стека и очереди\nclass Queue{\n    constructor(){\n        this.stack1 = new Stack();\n        this.stack2 = new Stack();\n    }\n    enqueue(){\n        //put implementation here\n    }\n    dequeue(){\n        //put implementation here\n    }\n}"
      },
      {
        "timestamp": "2024-08-29 11:28:55",
        "content": "2024-08-29 11:28:55\n аыеъа -> 2071074234:\nНазвание: ПСБ (Промсвязьбанк)  \nЗП: не обсуждали\n  \nВопросы: те же вопросы что и выше, (поиск по сообщениям \"ПСБ\" и \"Промсвязьбанк\") но есть дополнение:\n\nЗадача на нахождение числа в середине из 2 массивов, интервьюер ожидает решение без слияния массивов, тоесть за O(1) по памяти\n\nЗадача на что выведется в консоль, кода не осталось, но есть ответ - 6 7 1 3 4 5 \n\nwhile (true) будет ли переполнение стека? Ответ — нет, чтобы произошло переполнение, нужна ре...",
        "full_content": "2024-08-29 11:28:55\n аыеъа -> 2071074234:\nНазвание: ПСБ (Промсвязьбанк)  \nЗП: не обсуждали\n  \nВопросы: те же вопросы что и выше, (поиск по сообщениям \"ПСБ\" и \"Промсвязьбанк\") но есть дополнение:\n\nЗадача на нахождение числа в середине из 2 массивов, интервьюер ожидает решение без слияния массивов, тоесть за O(1) по памяти\n\nЗадача на что выведется в консоль, кода не осталось, но есть ответ - 6 7 1 3 4 5 \n\nwhile (true) будет ли переполнение стека? Ответ — нет, чтобы произошло переполнение, нужна рекурсия\n \n<section> \n<div>A</div>\n<div>B</div> \n</section>\nПеречислить все способы поставить A и B в одну строку\n\nКак выглядит интерфейс из TS в JS'е? Ответ — Никак, типы из TS не видны при транспиляции в JS\n \nЗадача с литкода, просто объяснил решение устно и интервьюера это устроило. https://leetcode.com/problems/valid-anagram/description/"
      },
      {
        "timestamp": "2024-07-14 02:55:01",
        "content": "2024-07-14 02:55:01\n Евгений Лямин -> 2071074234:\n— Промсвязьбанк\n— вакансия: https://spb.hh.ru/vacancy/88892284?hhtmFrom=employer_vacancies\n— зп: сказал 250-280\n— Вопросы:\n1. Про опыт, больше про задачи которыми гордишься\n2. Чем бы хотелось заниматься, какой проект ищешь?\n4. Как развиваешься?\n5. Расскажи про Event Loop\n6. Можем ли мы запланировать много requestanimationfraim?  как они будут выполнятся\n7. установилось соеднинение с сервером какой метод http запроса отправляется после этого на се...",
        "full_content": "2024-07-14 02:55:01\n Евгений Лямин -> 2071074234:\n— Промсвязьбанк\n— вакансия: https://spb.hh.ru/vacancy/88892284?hhtmFrom=employer_vacancies\n— зп: сказал 250-280\n— Вопросы:\n1. Про опыт, больше про задачи которыми гордишься\n2. Чем бы хотелось заниматься, какой проект ищешь?\n4. Как развиваешься?\n5. Расскажи про Event Loop\n6. Можем ли мы запланировать много requestanimationfraim?  как они будут выполнятся\n7. установилось соеднинение с сервером какой метод http запроса отправляется после этого на сервер\n8. как браузер понимает что нам пришла html и ее надо как то обработать\n9. Как будет себя вести браузер, как отобразит, если у нас а head link на стили размером 5 мб а в body один тег H1\n10. Расскажи про атрибуты  тега  script. Про asynс  и defer\n11. Какие занешь браузерный апи и вобще способы что бы сохранять информацию\n12. Отличие SessionStorage и LocalStorage\n13. Что таккое cookie? Какие особенности? Какие настройки cookie?\n14. Какие есть способы интеграции с бекэндом?\n15. Расскажи про Rest api\n16. Какие паттерны шаблоны проектирования есть\n16. Расскажи про ООП\n17. Раскажи что такое SOLID\n\n— Задачи\n1.\nclass Queue {\n    constructor() {\n        this.stack1 = new Stack();\n        this.stack2 = new Stack();\n    }\n\n    // Добавить в очередь\n    enqueue(data) {\n        this.stack1.push(data);\n    }\n\n    // Вернуть следующий в очереди\n    dequeue() {\n        if (this.stack2.size() === 0) {\n            while (this.stack1.size() > 0) {\n                this.stack2.push(this.stack1.pop());\n            }\n        }\n        return this.stack2.pop();\n    }\n\n    // Сколько в очереди\n    count() {\n        return this.stack1.size() + this.stack2.size();\n    }\n}\n2.  Сделать оптимальный вариант, это O(k), брать последние элементы масива сравнивать и записывать пока не наберем k елементов, смысла пов сему массива проходить нету\n// Есть два сервиса которые возвращают список активных заявок на кредит\n// отсортированных по возрастанию id,\n// id - сквозное для обоих сервисов,\n// необходимо получить список из k последних заявок на кредит:\nconst getDecisions1 = [\n  { id: 1, result: 'approved' },\n  { id: 3, result: 'waiting' },\n  { id: 15, result: 'approved' },\n  { id: 20, result: 'approved' },\n  { id: 26, result: 'waiting' },\n  { id: 30, result: 'approved' },\n];\n\nconst getDecisions2 = [\n  { id: 2, result: 'approved' },\n  { id: 4, result: 'waiting' },\n  { id: 14, result: 'approved' },\n  { id: 16, result: 'waiting' },\n  { id: 23, result: 'waiting' },\n  { id: 31, result: 'approved' },\n  { id: 32, result: 'approved' },\n];\n\nconst getLastDecisions = (decision1, decision2, k) => {}\n\nconsole.log(getLastDecisions(getDecisions1, getDecisions2, 6));\n3.  Что бцудет выведено в консоль? как вывести все буквы?\nPromise.reject(\"a\")\n  .catch((p) => p + \"b\")\n  .catch((p) => p + \"c\")\n  .then((p) => p + \"d\")\n  .then((p) => console.log(p));\n\nconsole.log(\"f\");"
      }
    ]
  },
  {
    "company": "Спортс",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-07-18 14:50:14",
        "content": "2025-07-18 14:50:14\n Игорь -> 2071074234:\nСпортс Финал\nВакансия: написал сам hr\nЗП: 300+\n\n1) Как пришел в разработку\n2) Почему именно фронтенд\n3) Расскажи про первое место работы\n4) Почему принимал решения уйти с прошлых мест работы\n5) Расскажи про интересные задачи\n6) Что ищешь / Что хотел бы видеть?\n7) С чем бы не хотел столкнуться?\n8) Что по деньгам?",
        "full_content": "2025-07-18 14:50:14\n Игорь -> 2071074234:\nСпортс Финал\nВакансия: написал сам hr\nЗП: 300+\n\n1) Как пришел в разработку\n2) Почему именно фронтенд\n3) Расскажи про первое место работы\n4) Почему принимал решения уйти с прошлых мест работы\n5) Расскажи про интересные задачи\n6) Что ищешь / Что хотел бы видеть?\n7) С чем бы не хотел столкнуться?\n8) Что по деньгам?"
      },
      {
        "timestamp": "2025-07-08 15:00:35",
        "content": "2025-07-08 15:00:35\n Игорь -> 2071074234:\nКомпания: Спортс (Sports.ru) \nСсылка на ваку: сам написал hr\nВилка: хз (назвал 250-300, сказали в вилке все норм)\n\n1. вопросы по опыту\n2. грейд разработчиков в команде?\n3. как код ревью проходит?\n4. если уйдешь с проекта как думаешь что станет работать хуже?\n5. представь что есть три открытые вкладки (потом вкладка на пк и тф) перечисли способы общения между ними?\n6. как разделяли зону ответственности на проектах?\n7. как по загруженности на проектах?\n8. ...",
        "full_content": "2025-07-08 15:00:35\n Игорь -> 2071074234:\nКомпания: Спортс (Sports.ru) \nСсылка на ваку: сам написал hr\nВилка: хз (назвал 250-300, сказали в вилке все норм)\n\n1. вопросы по опыту\n2. грейд разработчиков в команде?\n3. как код ревью проходит?\n4. если уйдешь с проекта как думаешь что станет работать хуже?\n5. представь что есть три открытые вкладки (потом вкладка на пк и тф) перечисли способы общения между ними?\n6. как разделяли зону ответственности на проектах?\n7. как по загруженности на проектах?\n8. с чем бы не хотел работать?\n9. что хотел бы поднатоскать/изучить?\n10. мы пишем на Vue тебе норм, как к такому относишься?\n\nЗадачи как здесь - https://t.me/c/2071074234/489/138602"
      },
      {
        "timestamp": "2025-06-19 07:57:21",
        "content": "2025-06-19 07:57:21\n Артём -> 2071074234:\nКомпания: Спортс (Sports.ru)\nЗп: от 300\nФинал\n\n1) Как пришел в разработку\n2) Почему именно фронтенд\n3) Расскажи про все места работы где был, по порядку\n4) Почему принимал решения уйти с прошлых мест работы\n5) Расскажи про интересные задачи\n6) Чем гордишься на проекте (рассказать про что-то чего нет в резюме)\n7) Что не нравится в текущей команде, что хотелось бы улучшить\n8) Что нравится в команде, что хотел бы \"перенести\" на новую команду\n9) Как подходиш...",
        "full_content": "2025-06-19 07:57:21\n Артём -> 2071074234:\nКомпания: Спортс (Sports.ru)\nЗп: от 300\nФинал\n\n1) Как пришел в разработку\n2) Почему именно фронтенд\n3) Расскажи про все места работы где был, по порядку\n4) Почему принимал решения уйти с прошлых мест работы\n5) Расскажи про интересные задачи\n6) Чем гордишься на проекте (рассказать про что-то чего нет в резюме)\n7) Что не нравится в текущей команде, что хотелось бы улучшить\n8) Что нравится в команде, что хотел бы \"перенести\" на новую команду\n9) Как подходишь к оптимизации приложения"
      },
      {
        "timestamp": "2025-06-19 07:41:57",
        "content": "2025-06-19 07:41:57\n Артём -> 2071074234:\nКомпания: Спортс (Sports.ru)\nЗп: от 300\n\n1) вопросы по опыту\n2) какой грейд в команде у остальных разработчиков из фронтов\n3) как действуешь когда приходит задача без тз\n4) как код ревью проходит\n5) как развиваешься? что изучаешь/читаешь\n6) писали тесты на проекте? на чем и какие\n7) если уйдешь с проекта, как думаешь, что станет работать хуже или какой функционал на проекте 'висит' на тебе?\n8) Кому передашь этот функционал как уйдешь\n9) Представь что ест...",
        "full_content": "2025-06-19 07:41:57\n Артём -> 2071074234:\nКомпания: Спортс (Sports.ru)\nЗп: от 300\n\n1) вопросы по опыту\n2) какой грейд в команде у остальных разработчиков из фронтов\n3) как действуешь когда приходит задача без тз\n4) как код ревью проходит\n5) как развиваешься? что изучаешь/читаешь\n6) писали тесты на проекте? на чем и какие\n7) если уйдешь с проекта, как думаешь, что станет работать хуже или какой функционал на проекте 'висит' на тебе?\n8) Кому передашь этот функционал как уйдешь\n9) Представь что есть 3 открытые вкладки с одного домена, перечисли все способы общения между ними\n10) Представь что есть страница которая долго грузится/лагает. Как бы ты оптимизировал её и с чего бы начинал\n\n11) задача на Event Loop\nconst promise1 = new Promise((res, rej) => {\n    setTimeout(() => {\n        res(1)\n    }, 300)\n})\n\npromise1.then((res) => console.log(res))\n    .then((res1) => console.log(res1))\n    .then((res3) => {\n        res3++\n        console.log(res3)\n        console.log(res1)\n    }).catch((e) => console.error(e))\n12) Реализвать LoggerService\nclass LoggerService {\n    static instance\n\n    constructor() {\n        if (LoggerService.instance) {\n           throw new Error(\"Use LoggerService.getInstance() instead of new.\");\n        }\n        LoggerService.instance = this\n    }\n\n    static getInstance() {\n        if (!LoggerService.instance) {\n            LoggerService.instance = new LoggerService()\n        }\n        return LoggerService.instance\n    }\n\n    log(message) {\n        console.log(`[SPORTS:LOG]${message}`)\n    }\n\n    error(message) {\n        console.error(`[SPORTS:LOG]${message}`)\n    }\n}\n13) Смержить массивы\nconst sites = [\n    {id: 1, name: 'site 1'},\n    {id: 2, name: 'site 2'},\n\n]\n\nconst pages = [\n    {id: 1121, title: 'page 1', site_id: 1},\n    {id: 2234, title: 'page 2', site_id: 2},\n    {id: 3321, title: 'page 3', site_id: 1},\n\n]\n\n\nconst joinSitesToPages = (sites, pages) => {\n    const siteIdToSite = sites.reduce((acc, site) => {\n        acc[site.id] = site\n        return acc\n    }, {})\n\n    return pages.map((page) => ({\n        id: page.id,\n        title: page.title,\n        site: siteIdToSite[page.site_id]\n    }))\n\n}"
      }
    ]
  },
  {
    "company": "Ай-Теко",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-07-10 18:16:31",
        "content": "2025-07-10 18:16:31\n . Salamov -> 2071074234:\nНазвание компании: Ай-Теко\nВакансия : https://hh.ru/vacancy/122037424?from=share_ios\n\nВопросы: \n1) Расскажи о последнем проекте, чем занимался\n2) На чем был написан Бэк\n\n3) в чем разница между type u interface\n4) Расскажи про TypeGuard \n5) после выхода релиза в проекте и обновляется приложение, расскажи подробно пошагово как ты получаешь код от редактора. (Как у тебя в репозиторий попадает код)\n\n6) Что такое коммит хуки\n7) Кто настраивал линтеры \n8) ...",
        "full_content": "2025-07-10 18:16:31\n . Salamov -> 2071074234:\nНазвание компании: Ай-Теко\nВакансия : https://hh.ru/vacancy/122037424?from=share_ios\n\nВопросы: \n1) Расскажи о последнем проекте, чем занимался\n2) На чем был написан Бэк\n\n3) в чем разница между type u interface\n4) Расскажи про TypeGuard \n5) после выхода релиза в проекте и обновляется приложение, расскажи подробно пошагово как ты получаешь код от редактора. (Как у тебя в репозиторий попадает код)\n\n6) Что такое коммит хуки\n7) Кто настраивал линтеры \n8) Как работает Хаски\n9) Расскажи про сборку бандла\n10) Какие бывают уровни оптимизации помимо тришэкинга\n11) Какая структура была в проекте (микрофонты, монорепо и т.п.)\n12) Принципы микрофонтов\n\n\nЗадачи: \n\n```ts\n\n//1) Напиши типизацию: \nfunction getUserInfo(firstName, lastName, birthYear, country) {\n  return ${firstName} ${lastName}, born in ${birthYear}, lives in ${country};\n}\n```\n\n\n//2) сделай рефакторинг кода : \nAsync Function fetchReq(q) {\n  const response = fetch(‘https://some?{q}’\n  return response.json()\n}\n\n\ndocument.querySelertol(“#input”).addEventListener(“keyup”, async e => {\n   const query = e.target.value\n   await fetchReq(query)\n })\n\n\n//3) Сделать рефакторинг: \n\nInterface Vanya {\n  name: string\n  surname: string\n  number: string\n}\n\ninterface Masha {\n   name: string\n   surname: string\n   number: number\n}\n\ninterface Volodya {\n  name: string\n  surname: string\n  phone: {\n     ex: 134\n     re: 873\n  }\n}"
      },
      {
        "timestamp": "2025-04-07 13:53:02",
        "content": "2025-04-07 13:53:02\n Максим Соломыкин -> 2071074234:\nКомпания - ИЦ Ай-теко (в МКБ)\nЗП - 180к\nВакансия - https://hh.ru/vacancy/119217606?from=applicant_recommended&hhtmFrom=main\n\nВопросы \n- вендорные преф\n- satisfies ts\n- Proxy и Reflect\n- Event loop\n- тег picture\n- can i use\n- web vitails(подробно)\n- intersection observer\n- как оптимизировал приложения(gzip, React.lazy, code chancks, кэширование, useMemo, useCallback)\n- useEffect useLayoutEffect\n- rem em\n- уязвимости \n- type и interface\n\nЗадача:...",
        "full_content": "2025-04-07 13:53:02\n Максим Соломыкин -> 2071074234:\nКомпания - ИЦ Ай-теко (в МКБ)\nЗП - 180к\nВакансия - https://hh.ru/vacancy/119217606?from=applicant_recommended&hhtmFrom=main\n\nВопросы \n- вендорные преф\n- satisfies ts\n- Proxy и Reflect\n- Event loop\n- тег picture\n- can i use\n- web vitails(подробно)\n- intersection observer\n- как оптимизировал приложения(gzip, React.lazy, code chancks, кэширование, useMemo, useCallback)\n- useEffect useLayoutEffect\n- rem em\n- уязвимости \n- type и interface\n\nЗадача: Реализовать метод scramble, изначально это просто функция с параметрами, написать полностью реализацию внутри функции"
      },
      {
        "timestamp": "2024-12-05 16:57:30",
        "content": "2024-12-05 16:57:30\n Сергей -> 2071074234:\nКомпания: ай-теко\nВакансия: hr написала сама\nВопросы:\n- Довольно подробный разговор про опыт, поведенческое интервью от части. Большую часть времени занял\n- Самая интересная задача, в чем ее сложность\n- С чем хотел бы работать\n- Какие у тебя сильные и слабые стороны\n- Способы оптимизации\n- Props\n- Context\n- Событийный цикл\n- Задача сделать тудулист, с добавлением и удалением элементов",
        "full_content": "2024-12-05 16:57:30\n Сергей -> 2071074234:\nКомпания: ай-теко\nВакансия: hr написала сама\nВопросы:\n- Довольно подробный разговор про опыт, поведенческое интервью от части. Большую часть времени занял\n- Самая интересная задача, в чем ее сложность\n- С чем хотел бы работать\n- Какие у тебя сильные и слабые стороны\n- Способы оптимизации\n- Props\n- Context\n- Событийный цикл\n- Задача сделать тудулист, с добавлением и удалением элементов"
      },
      {
        "timestamp": "2024-10-15 11:59:58",
        "content": "2024-10-15 11:59:58\n Katerina -> 2071074234:\nКомпания: ай теко\nВакансия: https://spb.hh.ru/vacancy/106341557?from=employer&hhtmFrom=employer\nЗП: 250к\nВопросы: один в один - https://t.me/c/2071074234/489/67643\n\nПроект в сбер! вопросы от проекта к проекту меняются, т.к. собесят чуваки с проекта непосредственно )",
        "full_content": "2024-10-15 11:59:58\n Katerina -> 2071074234:\nКомпания: ай теко\nВакансия: https://spb.hh.ru/vacancy/106341557?from=employer&hhtmFrom=employer\nЗП: 250к\nВопросы: один в один - https://t.me/c/2071074234/489/67643\n\nПроект в сбер! вопросы от проекта к проекту меняются, т.к. собесят чуваки с проекта непосредственно )"
      }
    ]
  },
  {
    "company": "Код Безопасности",
    "count": 4,
    "records": [
      {
        "timestamp": "2024-11-15 07:42:24",
        "content": "2024-11-15 07:42:24\n Sergey F -> 2071074234:\nКомпания: Код безопасности\nВакашка: HR сама написала\nЗП: указала 240-270\n\nВопросы:\nОчень подробно расспросили про свой опыт работы, с чего начался мой путь программиста. Какие где технологии юзал, почему такие, кто выбирал стек, как учил новые вещи. После моего рассказа, примерно 20 минут, лид сказал, что он услышал, что хотел и хочет пропустить техническую часть интервью и сразу перешел к проекту и задачам. Спросили, когда смогу приступить. Первый со...",
        "full_content": "2024-11-15 07:42:24\n Sergey F -> 2071074234:\nКомпания: Код безопасности\nВакашка: HR сама написала\nЗП: указала 240-270\n\nВопросы:\nОчень подробно расспросили про свой опыт работы, с чего начался мой путь программиста. Какие где технологии юзал, почему такие, кто выбирал стек, как учил новые вещи. После моего рассказа, примерно 20 минут, лид сказал, что он услышал, что хотел и хочет пропустить техническую часть интервью и сразу перешел к проекту и задачам. Спросили, когда смогу приступить. Первый собес, где я прошел чисто на софтах. Беседа прошла в дружеской обстановке, по сути сидели хихикали и половину времени говорили о всяких жизненных забавных штуках.\n\nКлассическая техническая секция лидом была скипнута, ни одного технического вопроса по базовым вещам, как это принято, меня не спросили. Ни одной строчки кода не попросили написать."
      },
      {
        "timestamp": "2024-10-16 17:31:30",
        "content": "2024-10-16 17:31:30\n Artyom Sozykin -> 2071074234:\nКод Безопасности\nhttps://hh.ru/vacancy/107617818?hhtmFrom=employer_vacancies\nЗП: 250к\n\nЛайфкодинга нет, были только вопросы по теории, рассуждения о реализации",
        "full_content": "2024-10-16 17:31:30\n Artyom Sozykin -> 2071074234:\nКод Безопасности\nhttps://hh.ru/vacancy/107617818?hhtmFrom=employer_vacancies\nЗП: 250к\n\nЛайфкодинга нет, были только вопросы по теории, рассуждения о реализации"
      },
      {
        "timestamp": "2024-10-11 18:12:19",
        "content": "2024-10-11 18:12:19\n Mike -> 2071074234:\nКомпания: Код Безопасности\nВакансия: https://hh.ru/vacancy/107617818?hhtmFrom=employer_vacancies\nЗП: не озвучили\nВопросы:\n1. много про легенду + переспрашивали по резюме\n2.Погружение/всплытие\n3.Замыкание\n4.Статические методы\n5.Как обмениваться данными в реакте без редакса\n6.Пропс дриллинг\n7.паттерн синглтон\n8.управляемые/неправляемые компоненты\n9.НОС\n10.Функциональном компоненте как размонтирование отследить\n11. type vs interface\n12. type guards\n13. any v...",
        "full_content": "2024-10-11 18:12:19\n Mike -> 2071074234:\nКомпания: Код Безопасности\nВакансия: https://hh.ru/vacancy/107617818?hhtmFrom=employer_vacancies\nЗП: не озвучили\nВопросы:\n1. много про легенду + переспрашивали по резюме\n2.Погружение/всплытие\n3.Замыкание\n4.Статические методы\n5.Как обмениваться данными в реакте без редакса\n6.Пропс дриллинг\n7.паттерн синглтон\n8.управляемые/неправляемые компоненты\n9.НОС\n10.Функциональном компоненте как размонтирование отследить\n11. type vs interface\n12. type guards\n13. any vs uknown"
      },
      {
        "timestamp": "2024-09-26 12:16:00",
        "content": "2024-09-26 12:16:00\n Stepan Ch. -> 2071074234:\n- Код безопасности \n- 200к \n- Вакансия: https://hh.ru/vacancy/107617818\n\nВопросы: \nМноно про легенду (опыт)\nОбычные вопросы с платины:\n1. Статические методы классов\n2. This\n3. Замыкание\n4. Context React\n5. Редакс\n6. React portal\n7. Type vs Interface\n8. TypeGuards\n9. React классы\n10. useEffect, монтирование",
        "full_content": "2024-09-26 12:16:00\n Stepan Ch. -> 2071074234:\n- Код безопасности \n- 200к \n- Вакансия: https://hh.ru/vacancy/107617818\n\nВопросы: \nМноно про легенду (опыт)\nОбычные вопросы с платины:\n1. Статические методы классов\n2. This\n3. Замыкание\n4. Context React\n5. Редакс\n6. React portal\n7. Type vs Interface\n8. TypeGuards\n9. React классы\n10. useEffect, монтирование"
      }
    ]
  },
  {
    "company": "Altenar",
    "count": 4,
    "records": [
      {
        "timestamp": "2025-07-11 14:32:33",
        "content": "2025-07-11 14:32:33\n Артем Покатилов -> 2071074234:\nAltenar\nзп: от 260к просил\nhr сам написал\n\nВопросы:\nРассказать про задачи какие делал\nКакие стейтменеджеры использовал?\nЧто такое Context в React?\nЕсть два стора в Redux как их объединить?\nЗачем нужен тип never? В чем отличие от void?\nЧто такое оптимистический ответ на фронте?\n\nЗадачи:\nТакие же как тут (https://t.me/c/2071074234/489/153144) и тут (https://t.me/c/2071074234/489/145263)",
        "full_content": "2025-07-11 14:32:33\n Артем Покатилов -> 2071074234:\nAltenar\nзп: от 260к просил\nhr сам написал\n\nВопросы:\nРассказать про задачи какие делал\nКакие стейтменеджеры использовал?\nЧто такое Context в React?\nЕсть два стора в Redux как их объединить?\nЗачем нужен тип never? В чем отличие от void?\nЧто такое оптимистический ответ на фронте?\n\nЗадачи:\nТакие же как тут (https://t.me/c/2071074234/489/153144) и тут (https://t.me/c/2071074234/489/145263)"
      },
      {
        "timestamp": "2025-07-08 11:49:16",
        "content": "2025-07-08 11:49:16\n Никита -> 2071074234:\nAltenar финал\nЗП: от 240\n\nГде сейчас проживаете?\nКакие хобби?\nКак будете выбирать оффер из нескольких?\nПредставьте что условия в оффере одинаковые, компании одинаковые, собес прошёл везде отлично. Как будете выбирать?\nСобираетесь ли переезжать?\nКак относитесь к посещению офиса 2 раза в неделю?\nКак вы оцените свой уровень как разработчика? Почему не сеньор?\nКак развиваетесь в свободное время?",
        "full_content": "2025-07-08 11:49:16\n Никита -> 2071074234:\nAltenar финал\nЗП: от 240\n\nГде сейчас проживаете?\nКакие хобби?\nКак будете выбирать оффер из нескольких?\nПредставьте что условия в оффере одинаковые, компании одинаковые, собес прошёл везде отлично. Как будете выбирать?\nСобираетесь ли переезжать?\nКак относитесь к посещению офиса 2 раза в неделю?\nКак вы оцените свой уровень как разработчика? Почему не сеньор?\nКак развиваетесь в свободное время?"
      },
      {
        "timestamp": "2025-07-08 11:15:20",
        "content": "2025-07-08 11:15:20\n Никита -> 2071074234:\nAltenar встреча с лидом\nЗП: от 230\n\nВопросы\nКак для тебя выглядит налаженный процесс постановки задачи?\nКак была построена работа с аналитиками и дизайнерами?\nБывало такое что что-то шло не так в коммуникации, что-то не учли где-то?\nРаботал с zustand или valtio?\nСпрашивал про конкретные библиотеки из резюме, почему именно их выбрал при решении задачи\nРасскажи как у вас был построен процесс внедрения новых библиотек, кто принимал решение за их внедрение?...",
        "full_content": "2025-07-08 11:15:20\n Никита -> 2071074234:\nAltenar встреча с лидом\nЗП: от 230\n\nВопросы\nКак для тебя выглядит налаженный процесс постановки задачи?\nКак была построена работа с аналитиками и дизайнерами?\nБывало такое что что-то шло не так в коммуникации, что-то не учли где-то?\nРаботал с zustand или valtio?\nСпрашивал про конкретные библиотеки из резюме, почему именно их выбрал при решении задачи\nРасскажи как у вас был построен процесс внедрения новых библиотек, кто принимал решение за их внедрение?\nРасскажи про свой самый болшой факап на работе?\nЧто в свободное время делаешь?\nКак относишься к мату?\nКакой лучший мем по твоему мнению на данный момент?"
      },
      {
        "timestamp": "2025-06-28 18:41:24",
        "content": "2025-06-28 18:41:24\n Никита -> 2071074234:\nAltenar\nЗП: от 200\n\nКак распределялись задачи на спринт?\nКак внутри команды договаривались о внедрении новой технологии/библиотеки?\nБыли ли моменты когда твоё решение или решение команды не нравилось (про внедрение технологий), как решали?\nКакой у тебя был уровень в команде?\n\nКакие есть подходы управления состоянием в реакте, в каких случаях лучше использовать?\nЧем отличается концепция Redux и MobX?\nКак бы ты организовывал работу с большим стором?(слайс...",
        "full_content": "2025-06-28 18:41:24\n Никита -> 2071074234:\nAltenar\nЗП: от 200\n\nКак распределялись задачи на спринт?\nКак внутри команды договаривались о внедрении новой технологии/библиотеки?\nБыли ли моменты когда твоё решение или решение команды не нравилось (про внедрение технологий), как решали?\nКакой у тебя был уровень в команде?\n\nКакие есть подходы управления состоянием в реакте, в каких случаях лучше использовать?\nЧем отличается концепция Redux и MobX?\nКак бы ты организовывал работу с большим стором?(слайсы)\nКак работают слайсы, могут ли они общаться друг с другом?\nМожем ли мы как-то передать информацию между слайсами?\nКак создать несколько инстансов одного стора, чтобы изолировать? (засунуть в контекст)\n\nЗадачи были по typescript и рефактор react-приложения:\nhttps://clck.ru/3MqWt2\nhttps://clck.ru/3MqWtt"
      }
    ]
  },
  {
    "company": "Datsteam",
    "count": 3,
    "records": [
      {
        "timestamp": "2024-12-11 12:33:26",
        "content": "2024-12-11 12:33:26\n Mikhail Sorokin -> 2071074234:\nDatsTeam\nВакансия — https://hh.ru/vacancy/109563730\nЗп — на тот момент не обсуждалось, я называл желаемую сумму от 300 000 на руки\n\n - реакт приложение, отрефакторить его (\n   проблемы, которые нашел:\n      - неправильный нейминг переменных\n      - лишний useCallback(не было потомков, которые бы ререндерились)\n      - if стоял перед useEffect\n      - в useEffect передавалась функция с async\n      - у useEffect отсутствовал массив зависимостей\n ...",
        "full_content": "2024-12-11 12:33:26\n Mikhail Sorokin -> 2071074234:\nDatsTeam\nВакансия — https://hh.ru/vacancy/109563730\nЗп — на тот момент не обсуждалось, я называл желаемую сумму от 300 000 на руки\n\n - реакт приложение, отрефакторить его (\n   проблемы, которые нашел:\n      - неправильный нейминг переменных\n      - лишний useCallback(не было потомков, которые бы ререндерились)\n      - if стоял перед useEffect\n      - в useEffect передавалась функция с async\n      - у useEffect отсутствовал массив зависимостей\n      - логика работы с данными и их отображение находились в одном компоненте\n      - отсутствовало отображение загрузки\n      - отсутствовало отображение ошибок\n      - отсутствовал атрибут key  \n      - не вынесены константы                    \n)\n - \n\n- что буду делать, если  разработчик выполняет задачи слишком долго\n- какая главная задача у лида"
      },
      {
        "timestamp": "2024-11-14 10:50:36",
        "content": "2024-11-14 10:50:36\n аыеъа -> 2071074234:\nDatsTeam Техсобес\nЗП: 250к\nВакансия: https://hh.ru/vacancy/109607942?\nВопросы:\nЧем image отличается от контейнера в docker\nСпособы хранения памяти на фронте и их различия\nСпособы оптимизации фронта\n// Рефактор компоненты (уже сделанный)\n\nimport {useEffect, useState, useCallback} from \"react\";\n\nexport default function PokemonsNamesList({limit = 10}) {\n    const url = `https://pokeapi.co/api/v2/pokemon?limit=${limit}&offset=0`;\n    const [activePokemonName...",
        "full_content": "2024-11-14 10:50:36\n аыеъа -> 2071074234:\nDatsTeam Техсобес\nЗП: 250к\nВакансия: https://hh.ru/vacancy/109607942?\nВопросы:\nЧем image отличается от контейнера в docker\nСпособы хранения памяти на фронте и их различия\nСпособы оптимизации фронта\n// Рефактор компоненты (уже сделанный)\n\nimport {useEffect, useState, useCallback} from \"react\";\n\nexport default function PokemonsNamesList({limit = 10}) {\n    const url = `https://pokeapi.co/api/v2/pokemon?limit=${limit}&offset=0`;\n    const [activePokemonName, setActivePokemonName] = useState('')\n    const [pokemonsNames, setPokemonsNames] = useState([]);\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    \n    const fetchPokemons = async () => {\n        try {\n            setErrorMessage(null)\n            const res = await fetch(url)\n            const data = await res.json()\n            setPokemonsNames(data.results)\n            \n            if (!res.ok) {\n                throw new Error('Ошибка')\n            }\n            \n        } catch (e) {\n            setErrorMessage(e.message)\n        }\n        \n    }\n\n    useEffect(() => {\n        fetchPokemons()\n    }, [limit]);\n    \n\n    return (\n        <ul>\n            {pokemonsNames.map((pokemon) => {\n            const {name} = pokemon\n                return (\n                    <li\n                        key={name}\n                        onClick={() => setActivePokemonName(name)}\n                        className={activePokemonName === name ? 'item--active' : 'item'}\n                    >\n                        {name}\n                    </li>\n                )\n            })}\n        </ul>\n    );\n}"
      },
      {
        "timestamp": "2024-07-13 08:48:32",
        "content": "2024-07-13 08:48:32\n Ярослав Мудрый -> 2071074234:\nDatsTeam\n-вакансия: https://hh.ru/vacancy/102430785\n-зп: 300k\n\nзадачи:\nпосчитать сумму в массиве, если встречается символ, то далее элементы конкатинируем как к строке\n\nfunction sum(…args) {\nif (args.every(arg => typeof arg === ‘number’)) {\nreturn args.reduce((acc, curr) => acc + curr, 0);\n} else {\nreturn args.join(‘’);\n}\n}\n\nconsole.log(sum(1,2,3)) // 6\nconsole.log(sum(1,2,’3’)) // ’33’\nconsole.log(sum(‘1’, 2, 3)) // ‘123’\n\nнайти первые индексы ...",
        "full_content": "2024-07-13 08:48:32\n Ярослав Мудрый -> 2071074234:\nDatsTeam\n-вакансия: https://hh.ru/vacancy/102430785\n-зп: 300k\n\nзадачи:\nпосчитать сумму в массиве, если встречается символ, то далее элементы конкатинируем как к строке\n\nfunction sum(…args) {\nif (args.every(arg => typeof arg === ‘number’)) {\nreturn args.reduce((acc, curr) => acc + curr, 0);\n} else {\nreturn args.join(‘’);\n}\n}\n\nconsole.log(sum(1,2,3)) // 6\nconsole.log(sum(1,2,’3’)) // ’33’\nconsole.log(sum(‘1’, 2, 3)) // ‘123’\n\nнайти первые индексы элементов массива, которые в сумме дают заданное число\n\nconst nums = [5, 3, 2, 8, 4, 1];\nconst target = 9;\n\nfunction getResult(nums, target) {\n    const numIndices = {};\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numIndices.hasOwnProperty(complement)) {\n            return [numIndices[complement], i];\n        }\n        numIndices[nums[i]] = i;\n    }\n    return [];\n}\n\nconsole.log(getResult(nums, target)); // [0, 3]\n\n\nнаписать функцию, которая делает заданное количество попыток загрузить данные\n\nfunction get(url, limit) {\n    let counter = 0;\n    const attempt = () => {\n        fetch(url).then((response) => {\n            if (!response.ok) {\n                throw new Error(\"Request failed with status \" + response.status);\n            }\n            return response.json();\n        })\n        .catch((err) => {\n            if (counter < limit) {\n                counter++;\n                attempt();\n            } else {\n                return new Error(err);\n            }\n        });\n    }\n    return attempt(limit);\n}\n// Пример использования\nget(\"https://example.com/data\", 5)\n.then((res) => console.log(res))\n.catch((err) => console.error(err));"
      }
    ]
  },
  {
    "company": "ЭД-Айти",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-01-15 11:39:26",
        "content": "2025-01-15 11:39:26\n Ильдус Гизетдинов -> 2071074234:\nКомпания Эд-Айти\nдо 220к\nhttps://kazan.hh.ru/vacancy/113777606?hhtmFrom=negotiation_list\nОчень чуть чуть про опыт, потом только задачи\n// Преварительная задача, в решении учитывать что объектов может быть \n// условно миллиард, а типов миллион, исходить из необходимости максимально снизить затраты по времени и ресурсам\n// Написать функцию вывода строкой через запятую названий (name) объектов\n// Брать только объекты связанные с типами у которых...",
        "full_content": "2025-01-15 11:39:26\n Ильдус Гизетдинов -> 2071074234:\nКомпания Эд-Айти\nдо 220к\nhttps://kazan.hh.ru/vacancy/113777606?hhtmFrom=negotiation_list\nОчень чуть чуть про опыт, потом только задачи\n// Преварительная задача, в решении учитывать что объектов может быть \n// условно миллиард, а типов миллион, исходить из необходимости максимально снизить затраты по времени и ресурсам\n// Написать функцию вывода строкой через запятую названий (name) объектов\n// Брать только объекты связанные с типами у которых class=\"Устройства\"\n\nОбъекты\n const objects = [\n   { id: 1, name: \"Test 1\", object_type: 1 },\n   { id: 2, name: \"Test 2\", object_type: 1 },\n   { id: 3, name: \"Test 3\", object_type: 2 },\n   { id: 4, name: \"Test 4\", object_type: 3 },\n ]\n\n   //Типы\n   const object_types = [\n     { id: 1, class: \"Устройства\" },\n     { id: 2, class: \"Устройства\" },\n     { id: 3, class: \"Порты\" },\n     { id: 4, class: \"Кабели\" }\n   ]\n\n function getNames(objects, object_types){\n   const getIds = new Set();\n\n   for(let types of object_types){\n     if(types.class === \"Устройства\"){\n       getIds.add(types.id)\n     }\n   }\n     const res = []\n   for(let obj of objects){\n     if(getIds.has(obj.object_type)){\n       res.push(obj.name)\n     }\n   }\n\n\n }\n\n\n/* 1. Отложенный вызов\nНеобходимо реализовать текстовый поиск с участием бэкенда (только эмуляция)\nРеагируем на каждую набранную букву, но вызываем функцию поиска на бэк (callApi) \nтолько если пауза в наборе составила 1 секунду\n- Использовать готовые библиотеки нельзя, делаем на голом js\n- HTML форму реализовывать не надо, только реакцию на условный onChange(value)\n- React окружение не использовать\n*/\n const callApi = (value:string) => console.log(value)\n function debounse(fn,delay=1000){\n   let timeout\n   return function(...arg){\n     clearTimeout(timeout);\n     timeout = setTimeout(()=>{fn(...arg)},delay)\n   }\n }\n\n\n/*\n2. Получить объект с отчётом из массива\n  Я хочу получить функцию которая примет этот массив на вход и вернёт объект, \n  который скажет сколько у меня субъектов в регионе 1 и сколько в регионе 2\n  Дополнительные объявления переменны-массивов использовать нельзя, нужен return {какое то действие создающее объект из массива}\n  Логику реализовать внутри этой функции getResult\n*/\n\n\nconst Task2 = () => {\n  interface ISubjectRegion {name:string, region:number}\n  interface IResult {[key:ISubjectRegion['region']]: number}\n\n  const sourceData:ISubjectRegion[] = [\n    {name: \"Субъект 1\", region: 1},\n    {name: \"Субъект 2\", region: 2},\n    {name: \"Субъект 3\", region: 2},\n    {name: \"Субъект 4\", region: 2},\n    {name: \"Субъект 5\", region: 4}\n  ]\n\n  const expectedResult:IResult = {\n    1: 1, //1 субъект в регионе 1\n    2: 3 //3 субъекта в регионе 2\n  }\n\n  //!!! Логику реализовать внутри этой функции !!!\n  const getResult = (data: ISubjectRegion[]):IResult => {\n    return data.reduce((acc, item)=>{\n      if(item.region === 1 || item.region === 2){\n        acc[item.region] = (acc[item.region] || 0 ) + 1\n      }\n      return acc\n    },{} as IResult)\n  }\n  //Это выведет результат её работы справа\n  return {expectedResult: expectedResult, result: getResult(sourceData) }\n}\n//Это выведет результат её работы справа\nshowTaskResult(2, Task2())\n\n/* 3. TS\nНаписать типизацию подходящую для двух объектов, не потерять типизацию \"за\" ключами в endpoints, то есть key:string и Record<string не подходят\nПринять что сами ключи endpoints нам известны на этапе типизации каждого объекта: \n\"getVtemplates\" и \"postVtemplates\" для vtemplateObject\n\"getReports\" и \"putReports\" для reportObject\n*/\n\ntype TObj<K extends string> = {\n  entity: string,\n  endpoints: Record<K,TEndpoint>\n}\n\n\ntype TEndpoint = {\n  method: string,\n  url: string,\n}\n\n//---\n\nconst vtemplateObject:TObj<'getVtemplates' | 'postVtemplates'> = {\n  entity: \"vtemplate\",\n  endpoints: {\n    getVtemplates: {\n      method: \"GET\",\n      url: \"vtemplate\"\n    },\n    postVtemplates: {\n      method: \"POST\",\n      url: \"vtemplate\"\n    }\n  }\n};"
      },
      {
        "timestamp": "2024-11-11 10:13:42",
        "content": "2024-11-11 10:13:42\n Ivan -> 2071074234:\nКомпания: Эд-Айти\nЗП: 200\nФинальное собеседование:\nОбщение с генеральным директором\nСпрашивал про опыт \nКак построено взаимодействие в команде \nПро интересные задачи \nРассказывал про проект",
        "full_content": "2024-11-11 10:13:42\n Ivan -> 2071074234:\nКомпания: Эд-Айти\nЗП: 200\nФинальное собеседование:\nОбщение с генеральным директором\nСпрашивал про опыт \nКак построено взаимодействие в команде \nПро интересные задачи \nРассказывал про проект"
      },
      {
        "timestamp": "2024-10-11 18:23:27",
        "content": "2024-10-11 18:23:27\n Mike -> 2071074234:\nКомпания:Эд-Айти\nВакансия:https://hh.ru/vacancy/108075422?hhtmFrom=employer_vacancies\nзп:200к\nБез вопросов, решали задачи\nhttps://app.coderpad.io/KZZC3J3M",
        "full_content": "2024-10-11 18:23:27\n Mike -> 2071074234:\nКомпания:Эд-Айти\nВакансия:https://hh.ru/vacancy/108075422?hhtmFrom=employer_vacancies\nзп:200к\nБез вопросов, решали задачи\nhttps://app.coderpad.io/KZZC3J3M"
      }
    ]
  },
  {
    "company": "Учи.ру",
    "count": 3,
    "records": [
      {
        "timestamp": "2024-08-29 07:55:49",
        "content": "2024-08-29 07:55:49\n Руслан -> 2071074234:\nУчи.ру\n— зп: от 260к\n— вакансия: https://hh.ru/vacancy/103991244\n— Вопросы: \n1. Про опыт и интересные задачи\n2. Процессы в команде\n3. Идеальное место работы, ред флаги.\n4. Что происходит после ввода адреса в браузере до момента отрисовки в браузере, максимально подробно\n4. http vs https\n5. про mvc, mvvm \n6. на что обращаешь внимание при ревью кода, что в твоем понимании хорошо написанный код\n7. grid vs flex\n— задачи:\n— повторяются отсюда https://t.me/c/...",
        "full_content": "2024-08-29 07:55:49\n Руслан -> 2071074234:\nУчи.ру\n— зп: от 260к\n— вакансия: https://hh.ru/vacancy/103991244\n— Вопросы: \n1. Про опыт и интересные задачи\n2. Процессы в команде\n3. Идеальное место работы, ред флаги.\n4. Что происходит после ввода адреса в браузере до момента отрисовки в браузере, максимально подробно\n4. http vs https\n5. про mvc, mvvm \n6. на что обращаешь внимание при ревью кода, что в твоем понимании хорошо написанный код\n7. grid vs flex\n— задачи:\n— повторяются отсюда https://t.me/c/2071074234/489/56010, были еще, не сохранились."
      },
      {
        "timestamp": "2024-08-27 09:34:21",
        "content": "2024-08-27 09:34:21\n Serj Shalygin -> 2071074234:\nНазвание: Учи ру\nЗП: 300+\nВакансия: отклик на хх\n\nВопросы\nrebase или merge и почему?\nкакой командой отменить запушеный в мастер код?\nкак найти кнопку которую невозможно найти?\nкакие паттерны проектирования есть?\nзачем нужен Redux? почему бы не юзать Context?\nкак оценить сложность алгоритма?\nкакие критерии оценки когда мы будем использовать при ревью?\nкогда использовать grid а когда flex?\nчто произойдет при вводе в строку браузера адреса и нажатия...",
        "full_content": "2024-08-27 09:34:21\n Serj Shalygin -> 2071074234:\nНазвание: Учи ру\nЗП: 300+\nВакансия: отклик на хх\n\nВопросы\nrebase или merge и почему?\nкакой командой отменить запушеный в мастер код?\nкак найти кнопку которую невозможно найти?\nкакие паттерны проектирования есть?\nзачем нужен Redux? почему бы не юзать Context?\nкак оценить сложность алгоритма?\nкакие критерии оценки когда мы будем использовать при ревью?\nкогда использовать grid а когда flex?\nчто произойдет при вводе в строку браузера адреса и нажатия Enter?\nчто важно чтобы было в команде и чего небыло?\n\nвидео 1 = https://youtu.be/wL_n4DiKEbU\nвидео 2 - https://youtu.be/ctwKpZGXol0\n\nОБС не записала 3 часть видео кончилось место на жестком😢"
      },
      {
        "timestamp": "2024-03-31 12:19:49",
        "content": "2024-03-31 12:19:49\n Roman -> 2071074234:\n- Название компании: Учи.ру\n- Ссылка на вакансию: отликался и собесился осенью, уже нет ссылки\n- ЗП: У миддлов 3 грейда. От 180к до 260-270к. Но могут и выше поднять оффер, если очень хорош\n- Задача: https://codesandbox.io/p/sandbox/4duxj\n\nЗадача такая: Дана таблица, в её ячейки можно вбить формулу суммы или среднего прмиерно так =SUM(1,2)\nПри нажатии enter формула вычисляется и в ячейку подставляется результат.\n\nЗадача в том, чтобы при клике на ячейку, ...",
        "full_content": "2024-03-31 12:19:49\n Roman -> 2071074234:\n- Название компании: Учи.ру\n- Ссылка на вакансию: отликался и собесился осенью, уже нет ссылки\n- ЗП: У миддлов 3 грейда. От 180к до 260-270к. Но могут и выше поднять оффер, если очень хорош\n- Задача: https://codesandbox.io/p/sandbox/4duxj\n\nЗадача такая: Дана таблица, в её ячейки можно вбить формулу суммы или среднего прмиерно так =SUM(1,2)\nПри нажатии enter формула вычисляется и в ячейку подставляется результат.\n\nЗадача в том, чтобы при клике на ячейку, в которой уже посчитался результат - в ней появлялась прежняя формула.\n\nТо есть: в ячейке 1 значение 5, в ячейке два значени 7. Если мы вбиваем в ячейку 3 формулу =SUM(1,2) и жмём enter, то там появляется 12. Если мы снова кликаем по этой ячейке, то вместо 12 снова появляется =SUM(1,2)\n- Успех: ❌\n- Фидбэк: Задача не была решена, зоны роста: рефакторинг и реакт"
      }
    ]
  },
  {
    "company": "Farzoom",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-03-14 16:32:01",
        "content": "2025-03-14 16:32:01\n Ильдус Гизетдинов -> 2071074234:\nFarZoom(2 этап)\nЗадачи:\n1) \nconst groupByCity = (peopleArray) => {\n // Создаю пустой объект для результата группировки\n const result = {};\n \n // Итерируюсь по каждому человеку в массиве\n peopleArray.forEach(person => {\n   // Получаю город и имя из текущего объекта\n   const { city, name } = person;\n   \n   // Проверяю, существует ли уже этот город в результирующем объекте\n   if (result[city]) {\n     // Если город уже есть в результате, добавляю...",
        "full_content": "2025-03-14 16:32:01\n Ильдус Гизетдинов -> 2071074234:\nFarZoom(2 этап)\nЗадачи:\n1) \nconst groupByCity = (peopleArray) => {\n // Создаю пустой объект для результата группировки\n const result = {};\n \n // Итерируюсь по каждому человеку в массиве\n peopleArray.forEach(person => {\n   // Получаю город и имя из текущего объекта\n   const { city, name } = person;\n   \n   // Проверяю, существует ли уже этот город в результирующем объекте\n   if (result[city]) {\n     // Если город уже есть в результате, добавляю имя в существующий массив\n     result[city].push(name);\n   } else {\n     // Если город встречается впервые, создаю новый массив с именем\n     // Для городов с одним человеком можно было бы сразу присвоить строку,\n     // но так код будет проще и единообразнее\n     result[city] = [name];\n   }\n });\n \n // Теперь проверяю, есть ли в каждом городе только один человек\n // Если да, то заменяю массив на строку (согласно формату expectedResult)\n for (const city in result) {\n   if (result[city].length === 1) {\n     // Если в городе только один человек, заменяю массив на строку\n     result[city] = result[city][0];\n   }\n }\n \n // Возвращаю сгруппированный результат\n return result;\n}\n2)Там 2 компонента  и нужно что бы при нажатии на кнопку обновлялся id в главном компоненте добавить key={name}\n3) Нужно сделать свой join\nfunction fnJoin(mass, separator=','){\n // Инициализирую пустую строку для результата\n let str = '';\n \n // Использую цикл по всем элементам массива\n for(let i = 0; i < mass.length; i++){\n   // Добавляю текущий элемент\n   str += mass[i];\n   \n   // Добавляю разделитель после всех элементов кроме последнего\n   // Используя условный (тернарный) оператор вместо if-else\n   str += i < mass.length - 1 ? separator : '';\n }\n \n return str;\n}"
      },
      {
        "timestamp": "2025-02-17 12:14:10",
        "content": "2025-02-17 12:14:10\n Ilya -> 2071074234:\nКомпания: FarZoom (скрининг)\nЗП: undefined\nВакансия: написала hr\n\nВопросы:\n1) Где хранить токен\n2) Структура http запроса\n3) Как отправляются куки\n4) Как устанавливаются куки со стороны сервера\n5) Отличие get от post\n6) Что быстрее выполнится промис или таймаут\n7) Как бразуер понимает, что нужно закешировать запрос",
        "full_content": "2025-02-17 12:14:10\n Ilya -> 2071074234:\nКомпания: FarZoom (скрининг)\nЗП: undefined\nВакансия: написала hr\n\nВопросы:\n1) Где хранить токен\n2) Структура http запроса\n3) Как отправляются куки\n4) Как устанавливаются куки со стороны сервера\n5) Отличие get от post\n6) Что быстрее выполнится промис или таймаут\n7) Как бразуер понимает, что нужно закешировать запрос"
      },
      {
        "timestamp": "2024-10-23 10:52:11",
        "content": "2024-10-23 10:52:11\n аыеъа -> 2071074234:\nFarZoom\nЗП: не обсуждали\nВакансия: Написала hr\nБыли только устные вопросы\nВидео:",
        "full_content": "2024-10-23 10:52:11\n аыеъа -> 2071074234:\nFarZoom\nЗП: не обсуждали\nВакансия: Написала hr\nБыли только устные вопросы\nВидео:"
      }
    ]
  },
  {
    "company": "Ооо Айти Фаундейшн",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-02-07 04:56:17",
        "content": "2025-02-07 04:56:17\n Klimenty Karavaev -> 2071074234:\nКомпания: АйТи фаундейшн (2 этап, общение с командой)\nВакансия: https://hh.ru/vacancy/115758717\nВопросы: задавал я, а не они. про продукт, про код, про тех долг, они подробно рассказывали. показали код также, по нему прошлись немного.\nЗадачи: не было",
        "full_content": "2025-02-07 04:56:17\n Klimenty Karavaev -> 2071074234:\nКомпания: АйТи фаундейшн (2 этап, общение с командой)\nВакансия: https://hh.ru/vacancy/115758717\nВопросы: задавал я, а не они. про продукт, про код, про тех долг, они подробно рассказывали. показали код также, по нему прошлись немного.\nЗадачи: не было"
      },
      {
        "timestamp": "2025-02-03 16:01:00",
        "content": "2025-02-03 16:01:00\n Nikita -> 2071074234:\nНазвание компании: айти фаундейшн\nСсылка на вакансию: https://hh.ru/vacancy/115758717?hhtmFrom=chat\nЗП: от 250000\nЗапись:",
        "full_content": "2025-02-03 16:01:00\n Nikita -> 2071074234:\nНазвание компании: айти фаундейшн\nСсылка на вакансию: https://hh.ru/vacancy/115758717?hhtmFrom=chat\nЗП: от 250000\nЗапись:"
      },
      {
        "timestamp": "2025-01-31 15:49:47",
        "content": "2025-01-31 15:49:47\n Лёша -> 2071074234:\nКомпания -  ООО АйТи Фаундейшн / ERP \"Стройка\"\nВакансия -  https://hh.ru/vacancy/115758717\nЗП -  300\n\n- Задачи: не было\n- Вопросы:\n1. Расскажи о себе\n2. Свои главные достижения\n3. React.lazy и бандлы в webpack\n4. Какие хуки приходилось использовать\n5. Что такое sse и как реализовывал (почему выбрал тот или иной подход)(websockets)\n6. Что такое FSD\n7. Что такое Virtual DOM (layout, painting, reflow)\n8. Процессы на твоем текущем месте работы и их преимущест...",
        "full_content": "2025-01-31 15:49:47\n Лёша -> 2071074234:\nКомпания -  ООО АйТи Фаундейшн / ERP \"Стройка\"\nВакансия -  https://hh.ru/vacancy/115758717\nЗП -  300\n\n- Задачи: не было\n- Вопросы:\n1. Расскажи о себе\n2. Свои главные достижения\n3. React.lazy и бандлы в webpack\n4. Какие хуки приходилось использовать\n5. Что такое sse и как реализовывал (почему выбрал тот или иной подход)(websockets)\n6. Что такое FSD\n7. Что такое Virtual DOM (layout, painting, reflow)\n8. Процессы на твоем текущем месте работы и их преимущества/недостатки\n\n- Ссылка на запись - не делал\n- Успех собеса ✅\n- Фитбек о собесе от HR: позвали на финальное знакомство с командой.\n\n- От себя: У меня в резюме указаны задачи, которые очень сильно перекликаются с их запросами (Об этом они и спрашивали) + реальный опыт в организации из которой у них пол отдела (может и не пол отдела😁, но 50% собеса мы обсуждали этот опыт)."
      }
    ]
  },
  {
    "company": "Kaspersky",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-07-03 19:45:33",
        "content": "2025-07-03 19:45:33\n Ivan -> 2071074234:\nКасперский (финальное интервью)\n\n1. Рассказал свою легенду.\n2. Рассказал про интресные задачи (технологии, трудности и тд).\n3. Был ли опыт с бекендом и есть ли желание? (у них надо ноду и bff).\n4. Про сокеты.\n5. Обработка ошибок (ерор баундари, СЕНТРИ, логеры)\n6. Еще интересную задачу рассказать\n7. Работа с девтулз (лайтхаус перформанс)\n8. Про утечки памяти (клинапы, замыкания, обнулять ссылки на дом ноды и тд)\n9. TS vs JS (ок ли тебе без TS?)\n10. Как к л...",
        "full_content": "2025-07-03 19:45:33\n Ivan -> 2071074234:\nКасперский (финальное интервью)\n\n1. Рассказал свою легенду.\n2. Рассказал про интресные задачи (технологии, трудности и тд).\n3. Был ли опыт с бекендом и есть ли желание? (у них надо ноду и bff).\n4. Про сокеты.\n5. Обработка ошибок (ерор баундари, СЕНТРИ, логеры)\n6. Еще интересную задачу рассказать\n7. Работа с девтулз (лайтхаус перформанс)\n8. Про утечки памяти (клинапы, замыкания, обнулять ссылки на дом ноды и тд)\n9. TS vs JS (ок ли тебе без TS?)\n10. Как к легаси относишься? Что для тебя легаси?\n11. Про техдолг.\n12. Почему уходишь с прошлого места работы?\n13. Чего не хочется видеть в новой команде?\n14. Какие планы на будущее?\n15.Секция вопросов к команде."
      },
      {
        "timestamp": "2025-06-30 19:23:42",
        "content": "2025-06-30 19:23:42\n Ivan -> 2071074234:\nКомпания: Касперский\nТолько задачи, на решение 2 часа\n\n1. Задача на стилизацию.  Работая в файле css расположить блоки как на образце. (flex/grid) \ndiv.container\n   div.gray\n   div.blue\n   div.red\n2. На той же разметке реализовать js чтоб при клике на блок логировать его цвет\nquerySelector('.container') > addEventListener('click') > event.target.classList[0]\n3. \nfunction query(data, fields, order) {\n  if (\n    !Array.isArray(fields) ||\n    typeof order !=...",
        "full_content": "2025-06-30 19:23:42\n Ivan -> 2071074234:\nКомпания: Касперский\nТолько задачи, на решение 2 часа\n\n1. Задача на стилизацию.  Работая в файле css расположить блоки как на образце. (flex/grid) \ndiv.container\n   div.gray\n   div.blue\n   div.red\n2. На той же разметке реализовать js чтоб при клике на блок логировать его цвет\nquerySelector('.container') > addEventListener('click') > event.target.classList[0]\n3. \nfunction query(data, fields, order) {\n  if (\n    !Array.isArray(fields) ||\n    typeof order !== 'function' ||\n    data.some(item => !fields.every(f => f in item))\n  ) {\n    throw new Error('Incorrect params');\n  }\n\n  // Копия массива и сортировка\n  const sorted = [...data].sort(order);\n\n  // Возвращаем только нужные поля\n  return sorted.map(item => {\n    const filtered = {};\n    fields.forEach(f => {\n      filtered[f] = item[f];\n    });\n    return filtered;\n  });\n}\n4. Рефакторинг react\n- deps useEffect\n- убрать async в useEffect, then().catch()\n- добавить ключи в список\n- поправить семантику ul li\n- завести стейт под ошибку\n- useState([]) (положить пустой массив как дефолтное значение)\n5. Задача написать следующий функционал. Кнопка которая создает под собой элементы с уникальными числами. При клике по этим элементы они удаляются.\nconst [uniqNums, setUniqNums] = useState([])\n\nconst add = () => {\nsetUniqNums(prev => [...prev, Date.now()])\n}\nconst remove = () => {\nsetUniqNums(prev => prev.filter(item => item !== num) )\n}\n//в разметке добавить открисовку списка из uniqNums\n6. flattenMap\nfunction flattenMap(obj) {\n  return Object.entries(obj).reduce((acc, [key, value]) => {\n    if(value === null) {\n      return acc\n    }\n    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n      const nested = flattenMap(value);\n\n      Object.entries(nested).forEach(([nestedKey, nestedValue]) => {\n        acc[`${key}/${nestedKey}`] = nestedValue;\n      });\n    } else {\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n}\n7. getMaxSum\nfunction getMaxSum(nums) {\nlet maxSum = nums[0]\nlet currentSum = nums[0]\nfor(let i = 1;i < nums.length;i++) {\ncurrentSum = Math.max(nums[i], currentSum + nums[i])\nmaxSum = Math.max(maxSum, currentSum)\n}\nreturn maxSum\n}\n8. \nasync function asyncFilter(arr, fn) {\nconst results = await Promise.all(arr.map(fn))\nreturn arr.filter((_, i) => results[i])\n}"
      },
      {
        "timestamp": "2024-05-29 20:20:59",
        "content": "2024-05-29 20:20:59\n Andrei Chirkov -> 2071074234:\n29.05\nНазвание: Лаборатория Касперского\nВакансия: https://spb.hh.ru/vacancy/98952318\nЗП: 250 - 300\nСсылка на видео: https://www.youtube.com/watch?v=P3zwG82NgjM\nУспех: ✅ , зовут на второй этап\nЗадачи, скорее всего у вас будут те же: \n\n// Задача 1 алгос\n/* eslint-disable */\n// Нужно написать функцию isEqual, которая сравнивает объекты\n// tip: пример объектов, функция должа обрабатывать объекты любой структуры\n// tip: точно известно, что порядок сл...",
        "full_content": "2024-05-29 20:20:59\n Andrei Chirkov -> 2071074234:\n29.05\nНазвание: Лаборатория Касперского\nВакансия: https://spb.hh.ru/vacancy/98952318\nЗП: 250 - 300\nСсылка на видео: https://www.youtube.com/watch?v=P3zwG82NgjM\nУспех: ✅ , зовут на второй этап\nЗадачи, скорее всего у вас будут те же: \n\n// Задача 1 алгос\n/* eslint-disable */\n// Нужно написать функцию isEqual, которая сравнивает объекты\n// tip: пример объектов, функция должа обрабатывать объекты любой структуры\n// tip: точно известно, что порядок следования свойств не будет меняться\n// tip: объект может содержать примитивы, объекты, массивы\n\n// Не решил ее \nconst redCar = {\n  wheels: 4,\n  brake: 4,\n  speed: 180,\n  options: [\n    { optionKey: \"123-234-345\", optionName: \"color\" },\n    { optionKey: \"234-345-987\", optionName: \"warranty\" }\n  ]\n}; // reference\n\nconst yellowCar = {\n  wheels: 3,\n  brake: 2,\n  speed: 70,\n  options: [\n    { optionKey: \"665-232-345\", optionName: \"isBroken\" },\n    { optionKey: \"234-345-987\", optionName: \"warranty\" }\n  ]\n}; // false\n\nconst blueCar = {\n  wheels: 4,\n  brake: 4,\n  speed: 180,\n  options: [\n    { optionKey: \"123-234-345\", optionName: \"isBroken\" },\n    { optionKey: \"234-345-987\", optionName: \"warranty\" }\n  ]\n}; // false\n  \n// Задача 2 алгос\n// Отсортируйте нечетные числа так, чтобы четные числа остались на своих местах:\n\n// const input = [5, 4, 1, 6, 3, 8];\n// const output = [1, 4, 3, 6, 5, 8];\n\n// Задача 3 промис\n// провести review кода + переписать на ES6\n// Вот результат:\n\nimport fs from 'fs'\n\nasync function getFile(path) {\nreturn new Promise((res, rej) => {\n  fs.readFile(path, function (err, data) {\n    if (err) {\n        rej(err)\n    } else {\n        res(JSON.parse(data))\n    }\n  })\n})\n\n\n// Задача 4 промис\n// провести review кода\n// Как последовательно вызвать асинхронные ф друг за другом\n// Ответ: через   for await цикл\n\nconst updater = async (storage, data) => { /* ... */ }\n\nconst list = [\n    updater1,\n    updater2,\n    ...,\n    updaterN\n]\n\nasync function doStorageUpdate(storage, data) {\n    for await (updater of list) {\n      updater(storage, data)\n    }\n    // list.forEach(updater => updater(storage, data));\n}\n\n\n// Задача 5 \n// Напишите код, с помощью которого при клике на\n// прямоугольник будет выведен его цвет\n\n// Вот так:\nconst container = document.querySelector('.container');\n\ncontainer.addEventListener('click', (event) => {\nconsole.log(event.target.className)\n\n// Задача 6: нарисовать флаг (я сделал на гридах)\n\n// Задача 7 массивы\n// Написать функцию add, которая принимает число\n// и может вызываться бесконечное число раз,\n// пока не будет вызвана без аргументов - тогда возвращается сумма переданных\n// ранее чисел:\n\nfunction add(num) {\n  let sum = num || 0\n\n  function inner(num2) {\n    if (num2 === undefined) {\n      return sum\n    } else {\n      sum += num2\n      return inner\n    }\n  }\n\n  return num === undefined ? 0 : inner\n}\nconsole.log(add());\nconsole.log(add(9)())\nconsole.log(add(9)(10)())\nconsole.log(add(9)(10)(11)())\n\n// Задача 8 \n// // Как генерировать исключение + как его обработать/перехватить?\n// Тут поговорить про вызов ошишибок и проброс их везде\n\n\n// Задача 9: // При каждом клике на кнопку Add должна появляться\n// новая кнопка со случайным текстом (например цифровым id).\n// При клике на появившуюся кнопку она должна удаляться.\nimport '../main'\nimport React, { useCallback, useState } from \"react\";\n\nfunction App() {\n  const [index, setIndex] = useState(0)\n  const [buttonList, setButtonList] = useState([])\n\n  const add = useCallback(() => {\n    setButtonList(prevButtons => [...prevButtons, index])\n    setIndex(prev => prev + 1)\n  }, [index])\n\n  const remove = (b) => {\n    setButtonList(buttonList.filter(button => b !== button))\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <button onClick={add}>Add</button>\n      <div className=\"box-wrapper\">\n        {buttonList.map(b => (\n          <button onClick={() => remove(b)} key={b}>{b}</button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App"
      }
    ]
  },
  {
    "company": "BetBoom",
    "count": 3,
    "records": [
      {
        "timestamp": "2024-10-08 08:41:41",
        "content": "2024-10-08 08:41:41\n Никита -> 2071074234:\nКомпания: BetBoom\nВакансия: https://hh.ru/vacancy/106763579\nЗП: не обсуждали\nВопросы:\n- Как работают эвенты в DOM\n- Event loop\n- Этапы построения отрисовки страницы в браузере\n- Семантическая верстка\n- В чем отличие Grid от Flexbox\n- Связь классов и прототипов в JS\n- Как без классов реализовать constructor\n- Как сымитировать класс на обычной функции\n- Какие хуки в реакте знаю и использую\n- Когда использовать хуки useCallback или useMemo\n- useRef для чег...",
        "full_content": "2024-10-08 08:41:41\n Никита -> 2071074234:\nКомпания: BetBoom\nВакансия: https://hh.ru/vacancy/106763579\nЗП: не обсуждали\nВопросы:\n- Как работают эвенты в DOM\n- Event loop\n- Этапы построения отрисовки страницы в браузере\n- Семантическая верстка\n- В чем отличие Grid от Flexbox\n- Связь классов и прототипов в JS\n- Как без классов реализовать constructor\n- Как сымитировать класс на обычной функции\n- Какие хуки в реакте знаю и использую\n- Когда использовать хуки useCallback или useMemo\n- useRef для чего нужен\n- Чем отличается useLayoutEffect от useEffect\n- Что такое рендеринг в реакте\n- Что такое виртуальный DOM\n- Можно ли в теории обойтись без использования виртуального DOM\n- Что такое Enum и почему его не любят\n- Какие анимации делал\n- Как следить за производительностью приложений\n- Из-за чего может тормозить страница\nЗадачи:\n\n// 1. Получить значения всех ключей объекта\nconst user = { name: 'John', email: 'John@gmail.com', city:\n// type Valueof =\n// 'John' | 'John@gmail.com' | 'NY'\n// type UserProperties = ValueOf"
      },
      {
        "timestamp": "2024-09-24 19:27:42",
        "content": "2024-09-24 19:27:42\n Бахтияр -> 2071074234:\nКомпания: BetBoom\nВакансия: https://t.me/c/2071074234/616/64730\nЗП: 300K\nОС: 27 или 30 ответ \nВопросы:\n1. Расскажи о себе.\n2. Что ищешь?\n3. Где у вас было SEO (метаданные)?\n4. Как ты начал свой путь в программировании?\n5. Был ли опыт работы с PHP?\n6. Что такое CORS и для чего он нужен?\n7. Что такое куки? Как они появляются, как передаются, где они могут добавляться?\n8. Что означает Security Policy?\n9. Все про прототипы.\n10. В чем разница между prototyp...",
        "full_content": "2024-09-24 19:27:42\n Бахтияр -> 2071074234:\nКомпания: BetBoom\nВакансия: https://t.me/c/2071074234/616/64730\nЗП: 300K\nОС: 27 или 30 ответ \nВопросы:\n1. Расскажи о себе.\n2. Что ищешь?\n3. Где у вас было SEO (метаданные)?\n4. Как ты начал свой путь в программировании?\n5. Был ли опыт работы с PHP?\n6. Что такое CORS и для чего он нужен?\n7. Что такое куки? Как они появляются, как передаются, где они могут добавляться?\n8. Что означает Security Policy?\n9. Все про прототипы.\n10. В чем разница между prototype и proto?\n11. Map, Set.\n12. Promise.\n13. Делаем запрос через await, что возвращает await?\n14. Микро- и макрозадачи.\n15. Замыкание в JS: для чего нужно?\n16. Virtual DOM.\n17. Utility Types: какие знаешь, какие использовал?\n18. Enum: что по умолчанию возвращает при обращении к ключу? Какие типы у Enum?\n19. Как компилируются const в TS?\n20. Как заморозить объект?\n21. Способы изоляции стилей.\n22. Каскад в CSS.\n23. Специфичность в CSS.\n24. event.stopPropagation(): для чего нужен?\n25. Что будет, если кликнуть на потомка через родителя?\n26. На одном уровне два HTML-элемента: чем обернуть\nЗадача 1:\n\n/*\n\nКак вызвать функцию, чтобы на выходе сумма аргументов была со значением 18, при этом второй параметр должен отработать по умолчанию и использовать дефолтное значение.\n\n*/\n\nconst foo = (a, b = 4, c = 5) => {\n    return a + b + c;\n}\n\nЗадача 2:\n\nvar type = 'Single';\n\n// Объект bet с методом getBetType\nvar bet = {\n    type: 'Express', \n    getBetType: function () {\n        console.log(this.type); \n    }\n};\n\nbet.getBetType(); \n\n\nvar getType = bet.getBetType;\n\ngetType(); // Выведет 'Single', так как this теперь ссылается на глобальный объект (window), где определена переменная type"
      },
      {
        "timestamp": "2024-04-03 16:01:53",
        "content": "2024-04-03 16:01:53\n Vitalya Bedik -> 2071074234:\n— Название компании: BetBoom (единственный этап - знакомство + тех собес)\n— Ссылка на вакансию: https://hh.ru/vacancy/95455483?hhtmFrom=chat\n— ЗП: не обсуждали\n— Задачи: Теория + про опыт + сам проект + задача\n— Записи на ютуб: https://www.youtube.com/watch?v=quqFk19ai-U\n— Успех собеса:  ❓\n— Фидбек о собесе: до конца этой недели должен быть фидбек",
        "full_content": "2024-04-03 16:01:53\n Vitalya Bedik -> 2071074234:\n— Название компании: BetBoom (единственный этап - знакомство + тех собес)\n— Ссылка на вакансию: https://hh.ru/vacancy/95455483?hhtmFrom=chat\n— ЗП: не обсуждали\n— Задачи: Теория + про опыт + сам проект + задача\n— Записи на ютуб: https://www.youtube.com/watch?v=quqFk19ai-U\n— Успех собеса:  ❓\n— Фидбек о собесе: до конца этой недели должен быть фидбек"
      }
    ]
  },
  {
    "company": "Легкорем",
    "count": 3,
    "records": [
      {
        "timestamp": "2024-09-23 18:42:49",
        "content": "2024-09-23 18:42:49\n Ada500 -> 2071074234:\nЛегкорем\n-ЗП: от 180 до 250 тыс.\n- Вакансия: https://hh.ru/vacancy/106238024\nВопросы: лид говорит, что в течении 15 лет использовал данные вопросы и мало кто отвечал, подозрительно что смогли ответить)\nЧто будет в консоле? \nconst res = parseInt('3*9', 10); \nconsole.log(res); \n\nЧто выведит консоль? \nconst f=function g(){ return 23 } \n console.log(typeof g()) \n\nЧто здесь происходит? \n(function f() { \n   function f() { return 1 } \n   return f() \n   functio...",
        "full_content": "2024-09-23 18:42:49\n Ada500 -> 2071074234:\nЛегкорем\n-ЗП: от 180 до 250 тыс.\n- Вакансия: https://hh.ru/vacancy/106238024\nВопросы: лид говорит, что в течении 15 лет использовал данные вопросы и мало кто отвечал, подозрительно что смогли ответить)\nЧто будет в консоле? \nconst res = parseInt('3*9', 10); \nconsole.log(res); \n\nЧто выведит консоль? \nconst f=function g(){ return 23 } \n console.log(typeof g()) \n\nЧто здесь происходит? \n(function f() { \n   function f() { return 1 } \n   return f() \n   function f() { return 2 } \n})() \n\n// Правда ли что a = b? \nconst a =[1,2,3] \nconst b =[1,2,3] \n\n//Какова длина a.length массива a \nlet a =[] \na[1]=5 \na[3]=53 \ndelete a[3] \nconsole.log(a.length) \n\n//Что такое реквизиты в React?\n\n//Для чего используется useMemo? \n\n//Как очистить ресурсы в функциональном компоненте? \n\n//Как реализовать асинхроную(ленивую загрузку) redux редьюсеров? \n\n//что такое 302 при ответе http\n// Какие знаю мутабельные методы массива?  \n\n Спрашивал также что такое atomic design и сортировать указанный массив имён по убыванию."
      },
      {
        "timestamp": "2024-09-17 12:46:04",
        "content": "2024-09-17 12:46:04\n Анжелика -> 2071074234:\nЛегкорем\n- зп: 220\n- вакансия \n- успех ✅\nhttps://hh.ru/vacancy/106238024",
        "full_content": "2024-09-17 12:46:04\n Анжелика -> 2071074234:\nЛегкорем\n- зп: 220\n- вакансия \n- успех ✅\nhttps://hh.ru/vacancy/106238024"
      },
      {
        "timestamp": "2024-08-30 07:40:23",
        "content": "2024-08-30 07:40:23\n Max -> 2071074234:\nНазвание: Легкорем\nЗП: 230\nВопросы:\nЗадача: \nчто выведет консоль\nconst result = parseInt(\"3*9», 10)\n\nconsole.log(result); //3\n\nЗадача:\nconst f = function g () { return 23}\nconsole.log(  g () )\nЧто будет в консоли?/ g is not defined\n\nВывести oldestUser из массива пользователей :\n\nconst oldestUser = users.reduce((max, user) => user.age > max.age ? user : max, users[0]);\n\nПодсчитать средний возраст \n\n/ Функция для расчёта среднего возраста\nfunction calculateA...",
        "full_content": "2024-08-30 07:40:23\n Max -> 2071074234:\nНазвание: Легкорем\nЗП: 230\nВопросы:\nЗадача: \nчто выведет консоль\nconst result = parseInt(\"3*9», 10)\n\nconsole.log(result); //3\n\nЗадача:\nconst f = function g () { return 23}\nconsole.log(  g () )\nЧто будет в консоли?/ g is not defined\n\nВывести oldestUser из массива пользователей :\n\nconst oldestUser = users.reduce((max, user) => user.age > max.age ? user : max, users[0]);\n\nПодсчитать средний возраст \n\n/ Функция для расчёта среднего возраста\nfunction calculateAverageAge(array) {\n  // Суммируем все возраста\n  const totalAge = array.reduce((sum, person) => sum + person.age, 0);\n\n  // Вычисляем средний возраст\n  const averageAge = totalAge / array.length;\n\n  return averageAge;\n}\n\nЧто будет в типе с использованием omit и pick?\n\nКак очистить компонент при разминировании ?\n\nКак настроить асинхронную подгрузку (ленивую подгрузку) редьюсеров в редаксе?\n\nКак автогенерировать типы ts для данных с бэка?"
      }
    ]
  },
  {
    "company": "Egar Technology",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-01-29 22:50:40",
        "content": "2025-01-29 22:50:40\n Михаил Барыкин -> 2071074234:\nКомпания: EGAR Technology\nСсылка на вакансию: Написала HR\nЗП: Просил от 250к\nЗадачи: все задачи совпадают с -> https://t.me/c/2071074234/489/36888 (но последнюю задачу - хук - \nпопросят типизировать:\nimport { useState, useEffect } from 'react'; \n \ninterface UseOperationQueryResult<T> { \n  data: T | null; \n  isLoading: boolean; \n  isError: boolean; \n  error: string | null; \n} \n \nconst useOperationQuery = <T>(params: any): UseOperationQueryResult<...",
        "full_content": "2025-01-29 22:50:40\n Михаил Барыкин -> 2071074234:\nКомпания: EGAR Technology\nСсылка на вакансию: Написала HR\nЗП: Просил от 250к\nЗадачи: все задачи совпадают с -> https://t.me/c/2071074234/489/36888 (но последнюю задачу - хук - \nпопросят типизировать:\nimport { useState, useEffect } from 'react'; \n \ninterface UseOperationQueryResult<T> { \n  data: T | null; \n  isLoading: boolean; \n  isError: boolean; \n  error: string | null; \n} \n \nconst useOperationQuery = <T>(params: any): UseOperationQueryResult<T> => { \n  const [data, setData] = useState<T | null>(null); \n  const [isLoading, setIsLoading] = useState<boolean>(false); \n  const [isError, setIsError] = useState<boolean>(false); \n  const [error, setError] = useState<string | null>(null); \n \n  useEffect(() => { \n    const fetchData = async () => { \n      setIsLoading(true); \n      setIsError(false); \n      setError(null); \n \n      try { \n        const response = await fetch('/test', { \n          method: 'POST', \n          headers: { \n            'Content-Type': 'application/json', \n          }, \n          body: JSON.stringify(params), \n        }); \n \n        if (!response.ok) { \n          throw new Error('Network response was not ok'); \n        } \n \n        const result: T = await response.json(); \n        setData(result); \n      } catch (error) { \n        setIsError(true); \n        setData(null)\n        setError((error as Error).message); \n      } finally { \n        setIsLoading(false); \n      } \n    }; \n \n    fetchData(); \n  }, [params]); \n \n  return { data, isLoading, isError, error }; \n}; \n \nexport default useOperationQuery;\n\n)\n\nВопросы:\n  - Селекторы в CSS\n  - * {} - для чего звездочка\n  - Event loop\n  - this\n  - call, bind, apply\n  - React.Fragment - для чего и какие пропсы принимает\n  - useEffect vs useLayoutEffect\n  - управляемый vs неуправляемый компонент в React\n  - какие тесты бывают(unit, интеграционные, e2e)\n  - Cypress, Playwright - что это\n  - где хранить авторизационные токены - в куках(и почему)\n  - виды атак(XSS, csrf и т.д)\n  - CORS"
      },
      {
        "timestamp": "2024-07-08 20:02:25",
        "content": "2024-07-08 20:02:25\n Руслан -> 2071074234:\nEgar technology\n— Ссылка: hr сама написала\n— Зп: условились на 280, попытались пробить на 250 - реджектнул\n— Задачи:\nПросто выводить числа в зависимости от условий \nfor (let i = 1; i <= 100; i++) {\n  if (i % 3 === 0 && i % 5 === 0) {\n    console.log(\"FizzBuzz\");\n  } else if (i % 3 === 0) {\n    console.log(\"Fizz\");\n  } else if (i % 5 === 0) {\n    console.log(\"Buzz\");\n  } else {\n    console.log(i);\n  }\n}\nfunction bookingCalculate(nights, startDate = new D...",
        "full_content": "2024-07-08 20:02:25\n Руслан -> 2071074234:\nEgar technology\n— Ссылка: hr сама написала\n— Зп: условились на 280, попытались пробить на 250 - реджектнул\n— Задачи:\nПросто выводить числа в зависимости от условий \nfor (let i = 1; i <= 100; i++) {\n  if (i % 3 === 0 && i % 5 === 0) {\n    console.log(\"FizzBuzz\");\n  } else if (i % 3 === 0) {\n    console.log(\"Fizz\");\n  } else if (i % 5 === 0) {\n    console.log(\"Buzz\");\n  } else {\n    console.log(i);\n  }\n}\nfunction bookingCalculate(nights, startDate = new Date()) {\n  const weekdayRate = 1500;\n  const weekendRate = 2200;\n  let totalCost = 0;\n\n  for (let i = 0; i < nights; i++) {\n    const currentDate = new Date(startDate);\n    currentDate.setDate(currentDate.getDate() + i); // сдвиг даты заселения на i дней вперёд\n\n    const day = currentDate.getDay();\n    if (day === 0 || day === 6) { // 0 - воскресенье, 6 - суббота\n      totalCost += weekendRate;\n    } else {\n      totalCost += weekdayRate;\n    }\n  }\n\n  return totalCost;\n}\n// написать кастомный хук запроса данных с возможностью обрыва предыдущего запроса\nimport { useState, useEffect, useCallback } from 'react';\n\nconst useOperationQuery = (initialParams) => {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchData = useCallback(async (controller) => {\n    setIsLoading(true);\n    setIsError(false);\n    setError(null);\n\n    try {\n      const response = await fetch('/test', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(initialParams),\n        signal: controller.signal,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      setData(result);\n    } catch (err) {\n      if (err.name === 'AbortError') {\n        console.log('Fetch aborted');\n      } else {\n        setIsError(true);\n        setError(err);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [initialParams]);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetchData(controller);\n\n    return () => {\n      controller.abort();\n    };\n  }, [fetchData]);\n\n  return { data, isError, isLoading, error };\n};"
      },
      {
        "timestamp": "2024-01-16 14:56:53",
        "content": "2024-01-16 14:56:53\n Michael Yakovlev -> 2071074234:\nПобывал на треш-собеседовании в компанию EGAR TECHNOLOGY)\nПервым делом мне сообщили, что это первый этап собеседования. Чисто по JavaScript. Потом будет второе по React, TypeScript и DevOps, что для меня стало неожиданностью. Про этапы мне не сообщали.\n\n- Компания: EGAR TECHNOLOGY\n- Важность: тренировка\n⁃ Ссылка на вакансию: hr сама написала, на один из проектов Честный знак или Мосбиржа\nhttps://krasnoyarsk.hh.ru/vacancy/90732529?hhtmFrom=empl...",
        "full_content": "2024-01-16 14:56:53\n Michael Yakovlev -> 2071074234:\nПобывал на треш-собеседовании в компанию EGAR TECHNOLOGY)\nПервым делом мне сообщили, что это первый этап собеседования. Чисто по JavaScript. Потом будет второе по React, TypeScript и DevOps, что для меня стало неожиданностью. Про этапы мне не сообщали.\n\n- Компания: EGAR TECHNOLOGY\n- Важность: тренировка\n⁃ Ссылка на вакансию: hr сама написала, на один из проектов Честный знак или Мосбиржа\nhttps://krasnoyarsk.hh.ru/vacancy/90732529?hhtmFrom=employer_vacancies\n⁃ middle, от 200к\n\nВопросы:\n\n⁃ Что такое замыкание\n⁃ Какая функция не имеет замыкания\n⁃ Через какое скрытое свойство работает замыкание\n⁃ Что возвращает typeof Alert()\n⁃ Приведение типов в JavaScript\n⁃ Наследование в JavaScript\n⁃ proto и prototype\n⁃ У каких функций есть prototype\n⁃ Какие типы данных можно присвоить prototype\n⁃ Ограничения прототипного наследования в JavaScript\n⁃ Какие виды данных есть в JavaScript\n⁃ Что выведется:\nconsole.log(undefined > 0);\nconsole.log(undefined < 0);\nconsole.log(undefined == 0);\n\n\nРезультат: После того как я спросил, будут ли все вопросы такими душными, а потом попросил привести пример из бизнеса где может пригодиться typeof Alert(), собеседующая девушка отключила конференцию.\n\nСобеседование продлилось 8 минут)\n\n#EGAR #EGARTechnology"
      }
    ]
  },
  {
    "company": "Glowbyte",
    "count": 3,
    "records": [
      {
        "timestamp": "2024-10-21 05:29:28",
        "content": "2024-10-21 05:29:28\n Сергей -> 2071074234:\n- GlowByte\n- Тех собес\nВакансия: https://hh.ru/vacancy/99620797?hhtmFrom=employer_vacancies\nВопросы: \n- расскажи про свой опыт\n- какая команда\n- Какая у вас была архитектура\n- Как апи с бэками обсуждали\n- приходит задача, что в ней описано?\n- как разделяли задачи, кто оценивал их?\n- RTK Query плюсы\n- Какие другие фреймворки изучал\n- Плюсы Yup?\n- MobX State Tree vs Redux Toolkit\n- Infer в TS\n- Какие есть способы изоляции стилей(Styled Component, CSS Modu...",
        "full_content": "2024-10-21 05:29:28\n Сергей -> 2071074234:\n- GlowByte\n- Тех собес\nВакансия: https://hh.ru/vacancy/99620797?hhtmFrom=employer_vacancies\nВопросы: \n- расскажи про свой опыт\n- какая команда\n- Какая у вас была архитектура\n- Как апи с бэками обсуждали\n- приходит задача, что в ней описано?\n- как разделяли задачи, кто оценивал их?\n- RTK Query плюсы\n- Какие другие фреймворки изучал\n- Плюсы Yup?\n- MobX State Tree vs Redux Toolkit\n- Infer в TS\n- Какие есть способы изоляции стилей(Styled Component, CSS Modules), В чем их преимущество\n- Vite vs Webpack. Какой опыт работы с webpack\n- для чего нужен UseState?\n- Когда перерендер происходит\n- Как оптимизировать перерендер\n- Useeffect vs useLayoutEffect?\n- Как авторизация происходит у вас?\n- Флаги в куках\n- Cors\n\nfunction main() {\n    for (let i = 0; i < 10; i++) {\n        setTimeout(() => {\n            console.log(i);\n        }, 0);\n    }\n}\n/// 0 - 9\n\nfunction main() {\n    for (var i = 0; i < 10; i++) {\n        setTimeout(() => {\n            console.log(i);\n        }, 0);\n    }\n}\n\n// 9(x10)\n\n\nconst refArray = [\n    {block_id: 12243, name: 'current'},\n    {block_id: 148434, name: 'old'},\n    {block_id: 18681, name: 'new'},\n    {block_id: 38311, name: 'backUp'},\n]\n\nconst dataArray = [\n    {conf_id: 4843, resName: 'r1', block_id: 122434},\n    {conf_id: 8768, resName: 'r2', block_id: 14834},\n    {conf_id: 45364, resName: 'r3', block_id: 18681},\n    {conf_id: 948, resName: 'r4', block_id: 38311},\n]\n\nconst resultArray = dataArray.map(dataItem => {\n    const block = refArray.find(refItem => refItem.block_id === dataItem.block_id);\n    return {...dataItem, blockName: block?.name}\n})\n\n////// еще решить сложность O(n)"
      },
      {
        "timestamp": "2024-07-10 19:28:34",
        "content": "2024-07-10 19:28:34\n Artur -> 2071074234:\nGlowByte, созвон с лидом\n\n— Вакансия: https://hh.ru/vacancy/99620797?query=glowbyte&hhtmFrom=vacancy_search_list\n— ЗП: сказал 150к+, комфорт 180к, готовы вроде обсуждать (вилка была до 150к на руки)\n\nВопросы:\n— расскажи про опыт\n— как разработка велась\n— как проверка размеров прикрепленных файлов была устроена\n— как проектировали апи\n— что ждешь от работы\n— как ты работал с авторизацией\n— работал ли с ролями\n— как бы отображал большое количество инфы\n— к...",
        "full_content": "2024-07-10 19:28:34\n Artur -> 2071074234:\nGlowByte, созвон с лидом\n\n— Вакансия: https://hh.ru/vacancy/99620797?query=glowbyte&hhtmFrom=vacancy_search_list\n— ЗП: сказал 150к+, комфорт 180к, готовы вроде обсуждать (вилка была до 150к на руки)\n\nВопросы:\n— расскажи про опыт\n— как разработка велась\n— как проверка размеров прикрепленных файлов была устроена\n— как проектировали апи\n— что ждешь от работы\n— как ты работал с авторизацией\n— работал ли с ролями\n— как бы отображал большое количество инфы\n— как передать параметры фильтрации на бэк\n— а если параметры динамичные, то как, как передать массивы\n— есть два берега, между ними мост, есть 4 человека, наша задача перенести этих людей на другой берег, но есть ограничение, на мосту не больше 2 людей, все это происходит ночью, есть фонарик, но он один, также у каждого человека свой темп ходьбы, один человек за 1 минуту может перейти мост, второй за 2, третий за 5 и последний за 10. нужно назвать последовательность, при которой мост будет пройден за наименьшее количество времени \n\nЗадача:\n\nнаписать метод, который проверит, является ли строка S корректной с точки зрения математической записи\n\nS = ())((())()([]]]{}(}...\n\n()[]        - true\n[(())]      - true\n)(          - false\n([)]        - false\n\nfunction isValid(S) {\n    if (S.length === 0) return true\n\n    let stack = []\n\n    let map = {\n        '(': ')',\n        '[': ']',\n        '{': '}',\n    }\n\n    for (let char of S) {\n        if (map[char]) {\n            stack.psuh(char)\n        } else {\n            if (stack.length === 0) return false\n            \n            let topElement = stack.pop()\n            \n            if (map[topElement] !== char) return false\n        }\n    }\n\n    return stack.length === 0\n\n}"
      },
      {
        "timestamp": "2024-07-03 10:19:12",
        "content": "2024-07-03 10:19:12\n Artur -> 2071074234:\nGlowByte\n\n— ЗП: у них вилка до 150к на руки, я сказал, что рассматриваю 150К+ и комфортно 180к, вроде были готовы обсудить\n— Ссылка на вакансию: https://hh.ru/vacancy/99620797?hhtmFrom=employer_vacancies\n\nВопросы:\n— какие сборщики знаешь, что они делают, зачем нужны\n— почему vite быстрее работает чем webpack\n— что такое rest\n— методы http\n— что такое cors, как настраивается, кто контролирует ограничений\n— методы написания стилей\n— модульные стили что это...",
        "full_content": "2024-07-03 10:19:12\n Artur -> 2071074234:\nGlowByte\n\n— ЗП: у них вилка до 150к на руки, я сказал, что рассматриваю 150К+ и комфортно 180к, вроде были готовы обсудить\n— Ссылка на вакансию: https://hh.ru/vacancy/99620797?hhtmFrom=employer_vacancies\n\nВопросы:\n— какие сборщики знаешь, что они делают, зачем нужны\n— почему vite быстрее работает чем webpack\n— что такое rest\n— методы http\n— что такое cors, как настраивается, кто контролирует ограничений\n— методы написания стилей\n— модульные стили что это\n— как браузер понимает scss/sass файлы, кто компилирует их\n— локализацию кабинета как настраивал\n— типы данных в js\n— как работает копирование по ссылке\n— == и === разница\n— области видимости переменных\n— замыкание\n— IIFE\n— стрелочная функция\n— наследование в js как реализовано\n— proto и prototype разница\n— как проверить есть ли свойство у объекта, игнорируя цепочку прототипов\n— this\n— какие циклы знаешь, for in и for of для чего\n— методы массивов\n— как работает map, reduce\n— event loop, что это, как работает\n— промисы, что это, как с ними работает, какие статические методы есть, all и allSettled разница\n— async await что это, как обработка ошибок происходит\n— spread и rest операторы, разница\n— Set и Map\n— Symbol для чего нужно\n— DOM \n— евенты и евентбаблинг что это, как предотвратить\n— интерфейсы и типы в тс, что это, разница\n— джейнерики\n— keyof и typeof\n— утилитарные типы, что делает каждый\n— Virtual DOM\n— useEffect и useLayoutEffect, разница\n— useEffect как работает, возвращение коллбека\n— причины перерендера компонента\n— context зачем\n— useRef что это, форвардреф зачем нужен\n— storybook зачем нужен\n— почему мы чаще используем стейтменеджеры, разница между контекстом\n— какие использовал, какие еще знаешь\n— clonedElement в react как работает\n— children это\n— какие ui киты использовал\n— mui и antd в чем разница"
      }
    ]
  },
  {
    "company": "ATI.su",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-02-17 13:53:25",
        "content": "2025-02-17 13:53:25\n Матвей Захаров -> 2071074234:\nКомпания: ATI.su\nВакансия: https://spb.hh.ru/vacancy/115783811\nЗапись: https://youtu.be/SbbGsCEAN3E\n\nТолько теория, без лайфкодинга\n\nВопросы:\n- Много про то, как был организован процесс работы, какие мероприятия проводились, кто ставил задачи для выполнения\n- var/let/const \n- что ещё хостится в js и почему (function declaration) \n- Прототипное наследование\n- Для чего нужны классы\n- Про асинронхронность, как работает RequestAnimationCallback, про...",
        "full_content": "2025-02-17 13:53:25\n Матвей Захаров -> 2071074234:\nКомпания: ATI.su\nВакансия: https://spb.hh.ru/vacancy/115783811\nЗапись: https://youtu.be/SbbGsCEAN3E\n\nТолько теория, без лайфкодинга\n\nВопросы:\n- Много про то, как был организован процесс работы, какие мероприятия проводились, кто ставил задачи для выполнения\n- var/let/const \n- что ещё хостится в js и почему (function declaration) \n- Прототипное наследование\n- Для чего нужны классы\n- Про асинронхронность, как работает RequestAnimationCallback, про промисы\n- как бразурер парсит страничку \n- что самое дешёвое для анимации (transform), как часто RequestAnimationCallback будет запускаться в браузере\n- Зачем нужен TS, React, в чём их преимущества \n- Контекст в реакте \n- Стоит ли выносить статический список за пределы компонента/ в отдельный компонент\n- как работает Redux tlk, в чём его отличие от других стейт-менеджеров\n- Микрофронты, как они работают \n- Вопросы про работе webpack\n- XSS, Cors, CSRF  - какие виды уязвимостей знаешь, как бы их исправлял\n- Как и какие тесты писал\n\nСофты:\n- Что для тебя редфлаг\n- Были ли кофликты на предыдущем месте работы\n- Расскажи про фейлы\n- Что ждёшь от новой компании"
      },
      {
        "timestamp": "2024-12-04 04:56:48",
        "content": "2024-12-04 04:56:48\n Ivan -> 2071074234:\nКомпания : ATI.SU\nЗП:220\nВопросы : такие же что были в этом посту https://t.me/c/2071074234/489/84173",
        "full_content": "2024-12-04 04:56:48\n Ivan -> 2071074234:\nКомпания : ATI.SU\nЗП:220\nВопросы : такие же что были в этом посту https://t.me/c/2071074234/489/84173"
      },
      {
        "timestamp": "2024-11-08 13:26:08",
        "content": "2024-11-08 13:26:08\n Katerina -> 2071074234:\nКомпания: ATI.SU гибрид спб\nЗП: 200k - 250k\nВакансия: https://spb.hh.ru/vacancy/109048150?from=employer&hhtmFrom=employer\n\nСобеседование больше разговорное из темы в тему переходящее, без конкретных вопросов 'а что это'.\n\nВопросы:\n- Про опыт в резюме и прошлись по нему\n- fsd -  в чем заключается, что куда положить\n\nПо софтам:\n- что может заставить сотрудника уволится одним днем\n- если будет идея по оптимизации процессов, что ты с ней сделаешь\n\nЗадачи:...",
        "full_content": "2024-11-08 13:26:08\n Katerina -> 2071074234:\nКомпания: ATI.SU гибрид спб\nЗП: 200k - 250k\nВакансия: https://spb.hh.ru/vacancy/109048150?from=employer&hhtmFrom=employer\n\nСобеседование больше разговорное из темы в тему переходящее, без конкретных вопросов 'а что это'.\n\nВопросы:\n- Про опыт в резюме и прошлись по нему\n- fsd -  в чем заключается, что куда положить\n\nПо софтам:\n- что может заставить сотрудника уволится одним днем\n- если будет идея по оптимизации процессов, что ты с ней сделаешь\n\nЗадачи:\nЯ забыла заскринить(\n\n1. Ревью реакт кода\nПростейшая реализация, вопросы про оптимизации написания кода:\nПочему эта запись const {2:errorFun} = useError;\nбудет лучше чем эта const [ , , errorFun] = useError;\nТут же вопросы про useMemo, в нем был статический список. Ок или не ок (выносим список за компонент)\nТакже функция, нужен ли ей useCallback\n\n2. Оптимизировать редьюс\nconst arr = [1,2,3].reduce((acc, x) =>{\n  return [...acc, {value: x, name: x}]\n}, [])\nЗдесь создается массив на каждой итерации, нужно оптимизировать\nПервый способ через push, второй через index достав его из reduce"
      }
    ]
  },
  {
    "company": "Diasoft",
    "count": 3,
    "records": [
      {
        "timestamp": "2024-11-15 11:37:44",
        "content": "2024-11-15 11:37:44\n Гладких Александр -> 2071074234:\nКомпания Diasoft\nВакансия https://hh.ru/vacancy/107194276\nЗП: от 200\nВопросы\n1) Почему сменили профиль и пошли в разработку\n2) По резюме идем последнее место работы причина ухода\n3) С каким продуктом работали подробности\n4) Про основной функционал который вы делали\n4) Самая интересная и сложная задачка\n5) Про команду с кем работаете с кем строиться взаимодействие\n6) Готовы изучить Angular\n7) С какими графическими редакторами работал\n8) С нуля...",
        "full_content": "2024-11-15 11:37:44\n Гладких Александр -> 2071074234:\nКомпания Diasoft\nВакансия https://hh.ru/vacancy/107194276\nЗП: от 200\nВопросы\n1) Почему сменили профиль и пошли в разработку\n2) По резюме идем последнее место работы причина ухода\n3) С каким продуктом работали подробности\n4) Про основной функционал который вы делали\n4) Самая интересная и сложная задачка\n5) Про команду с кем работаете с кем строиться взаимодействие\n6) Готовы изучить Angular\n7) С какими графическими редакторами работал\n8) С нуля приходилось что либо верстать или по макетам что то делали\n9) Дизайн систему какую использовали\n10) По процессу разработки как шло взаимодействие с git git flow\n11) Принимал ли участие в выборе стека на проекте\n\nЗадачи \n\n1) Написать функцию которая принимает на вход строку и печатает в консоль\n  ее в перевернутом виде\n  fn(str) => 'Hello World'\nfunction reverseStr(str) {\n    return str\n        .split(' ')\n        .map((el) => el.split('').reverse().join(''))\n        .join(' ');\n}\n\n2)  Определить повторяющиеся символы в строке и вывести их в массиве\n \nconst str = 'hello world'\nfunction dubbleChar(string) {\n  const set = new Set()\n  const resultSet = new Set()\n  for(let i = 0; i < string.length; i++) {\n    if(set.has(string[i])) {\n      resultSet.add(string[i])\n    } else {\n      set.add(string[i])\n    }\n  }\n  console.log([...resultSet])\n}\ndubbleChar(str)\n\n\n3)   написать функцию для вычисления суммы многомерного массива с \n  любой вложенностью\n\nfunction sumArray(arr) {\n  return arr.flat(Infinity).reduce((acc, element) => acc += element, 0)\n}\n\n4) Задача на баланс скобок\n\nfunction isBalance(string) {\n  let stack = []\n  const brackets = {\n    \"}\": \"{\",\n    \")\": \"(\",\n    \"]\": \"[\",\n  }\n  for(let char of string) {\n    if([\"{\", \"[\", \"(\"].includes(char)) {\n      stack.push(char)\n    } else if([\"}\", \"]\", \")\"].includes(char)) {\n      if(stack.pop() !== brackets[char]) return false\n    }\n  }\n  return stack.length === 0;\n}"
      },
      {
        "timestamp": "2024-09-26 11:52:51",
        "content": "2024-09-26 11:52:51\n Михаил -> 2071074234:\n- Diasoft\n- 200к\n- вакансия: hh.ru/vacancy/104146623\n- смотреть с 8 минуты",
        "full_content": "2024-09-26 11:52:51\n Михаил -> 2071074234:\n- Diasoft\n- 200к\n- вакансия: hh.ru/vacancy/104146623\n- смотреть с 8 минуты"
      },
      {
        "timestamp": "2024-07-13 08:35:43",
        "content": "2024-07-13 08:35:43\n Руслан -> 2071074234:\nDiasoft\n— вакансия: https://hh.ru/vacancy/102766907?hhtmFrom=vacancy_duplicate\n— зп: 300к\n— Вопросы:\n1. Что такое реакт, почему его выбрал\n2. Методы жизненного цикла компонента\n3. Какие хуки в реакт есть\n4. useCallback useMemo отличия\n5. Что такое замыкания\n6. Event loop что такое\n7. Преимущества redux toolkit перед redux\n8. Саги или санки, что больше нравилось\n9. Оптимизации, делал ли, какие способы оптимизации знаешь",
        "full_content": "2024-07-13 08:35:43\n Руслан -> 2071074234:\nDiasoft\n— вакансия: https://hh.ru/vacancy/102766907?hhtmFrom=vacancy_duplicate\n— зп: 300к\n— Вопросы:\n1. Что такое реакт, почему его выбрал\n2. Методы жизненного цикла компонента\n3. Какие хуки в реакт есть\n4. useCallback useMemo отличия\n5. Что такое замыкания\n6. Event loop что такое\n7. Преимущества redux toolkit перед redux\n8. Саги или санки, что больше нравилось\n9. Оптимизации, делал ли, какие способы оптимизации знаешь"
      }
    ]
  },
  {
    "company": "Petshop",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-05-12 20:19:55",
        "content": "2025-05-12 20:19:55\n Захар -> 2071074234:\n06.05 Petshop.ru Тех собес\nЗП: Не обсуждалась\nВопросы (были теоретические вопросы на отдельном сайте, ниже приложу скрины)\n1) Вопросы про опыт\nДалее идут вопросы с сайта\n1) Дизайнеры предоставили макет...\nОтвет: теги <a>, <button> \n2) Как можно сверстать данный список?\nОтвет: Grid, Flex, Float\n3) Что произойдет при выполнении кода?\nОтвет: Внутри функции будет \"hello world\", снаружи \"hello undefined\"\n4) Что будет выведено на экране при выполнении кода?\nОт...",
        "full_content": "2025-05-12 20:19:55\n Захар -> 2071074234:\n06.05 Petshop.ru Тех собес\nЗП: Не обсуждалась\nВопросы (были теоретические вопросы на отдельном сайте, ниже приложу скрины)\n1) Вопросы про опыт\nДалее идут вопросы с сайта\n1) Дизайнеры предоставили макет...\nОтвет: теги <a>, <button> \n2) Как можно сверстать данный список?\nОтвет: Grid, Flex, Float\n3) Что произойдет при выполнении кода?\nОтвет: Внутри функции будет \"hello world\", снаружи \"hello undefined\"\n4) Что будет выведено на экране при выполнении кода?\nОтвет: выведет 5\n5) Event loop задача\nОтвет: Petshop Petproduct Kideria Ibody\n6) Что произойдет при выполнении кода?\nОтвет: в 1 console.log будет undefined, во втором John Doe\n7) Есть следующий JSX код\nОтвет: 2\n8) Компонент с состоянием\nОтвет: 2 и 4\n9) Какого цвета будет ссылка?\nОтвет: Зеленая \n10) Вычислить количество пикселей\nОтвет: 240 пикселей\n\nЗадача: Написать компонент \"Корзина\" на React\nimport { useEffect, useState } from 'react';\n\ntype Card = {\n  id: string;\n  title: string;\n  description: string;\n};\n\nexport function useGetCard() {\n  const [cards, setCards] = useState<Card[] | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        setIsLoading(true);\n        // 🔁 Здесь ты можешь заменить на fetch('/api/cards')\n        await new Promise(resolve => setTimeout(resolve, 1000)); // симуляция запроса\n\n        const data: Card[] = [\n          { id: '1', title: 'Card 1', description: 'First card' },\n          { id: '2', title: 'Card 2', description: 'Second card' },\n        ];\n\n        setCards(data);\n      } catch (err) {\n        setError(err as Error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCards();\n  }, []);\n\n  return { cards, isLoading, error };\n}"
      },
      {
        "timestamp": "2024-03-05 21:11:06",
        "content": "2024-03-05 21:11:06\n Daniil Max -> 2071074234:\n— Название компании: Petshop [знакомство с командой, последний этап)\n— Ссылка на вакансию: потеряна \n— ЗП: 180К\n— Задачи: софтскиллы \n— Запись на ютуб: https://youtu.be/_o352Y0fw2o\n— Успех собеса: ✅️\n— Фитбек о собесе от HR: оффер\n— Комментарий: на этот раз знакомство с командой. Знакомлюсь и задаю много вопросов\n\n#middle #petshop",
        "full_content": "2024-03-05 21:11:06\n Daniil Max -> 2071074234:\n— Название компании: Petshop [знакомство с командой, последний этап)\n— Ссылка на вакансию: потеряна \n— ЗП: 180К\n— Задачи: софтскиллы \n— Запись на ютуб: https://youtu.be/_o352Y0fw2o\n— Успех собеса: ✅️\n— Фитбек о собесе от HR: оффер\n— Комментарий: на этот раз знакомство с командой. Знакомлюсь и задаю много вопросов\n\n#middle #petshop"
      },
      {
        "timestamp": "2024-01-10 08:59:13",
        "content": "2024-01-10 08:59:13\n Daniil Max -> 2071074234:\n— Название компании: Petshop\n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Задачи: теория \n— Запись на ютуб: https://youtu.be/O11zPzIOTAc?si=AGcJuEZ2ZsRluhRr\n— Успех собеса: ✅\n— Фитбек о собесе от HR: огонь\n\n#middle",
        "full_content": "2024-01-10 08:59:13\n Daniil Max -> 2071074234:\n— Название компании: Petshop\n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Задачи: теория \n— Запись на ютуб: https://youtu.be/O11zPzIOTAc?si=AGcJuEZ2ZsRluhRr\n— Успех собеса: ✅\n— Фитбек о собесе от HR: огонь\n\n#middle"
      }
    ]
  },
  {
    "company": "Сигнал",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-03-18 06:21:48",
        "content": "2025-03-18 06:21:48\n Сергей -> 2071074234:\nКомпания: СИгнал(зп 300к+)\nрезультат: реджект\n\nЗадачи:\n1)\n\n//Написать функцию, которая запускает параллельно несколько промиосв, до указанного лимита\nexport function runWithLimit<RequestData, Response>({\n  callback,\n  data,\n  limit,\n}: Props<RequestData, Response>): Promise<Response[]> {\n  // Массив для хранения результатов выполнения callback\n  const result: Response[] = [];\n\n  // Очередь для хранения индексов выполняемых задач\n  const queue: Promise<v...",
        "full_content": "2025-03-18 06:21:48\n Сергей -> 2071074234:\nКомпания: СИгнал(зп 300к+)\nрезультат: реджект\n\nЗадачи:\n1)\n\n//Написать функцию, которая запускает параллельно несколько промиосв, до указанного лимита\nexport function runWithLimit<RequestData, Response>({\n  callback,\n  data,\n  limit,\n}: Props<RequestData, Response>): Promise<Response[]> {\n  // Массив для хранения результатов выполнения callback\n  const result: Response[] = [];\n\n  // Очередь для хранения индексов выполняемых задач\n  const queue: Promise<void>[] = [];\n\n  // Текущий индекс обрабатываемых данных\n  let currentIndex = 0;\n\n  // Функция для выполнения задач с учетом лимита\n  const worker = (): Promise<void> => {\n    // Если все задачи обработаны, завершаем выполнение\n    if (currentIndex >= data.length) {\n      return Promise.resolve();\n    }\n\n    // Берем индекс текущей задачи\n    const index = currentIndex;\n    currentIndex++;\n\n    // Выполняем callback и сохраняем результат\n    const task = callback(data[index])\n      .then((response) => {\n        result[index] = response; // Сохраняем результат на правильную позицию\n      })\n      .catch((error) => {\n        console.error(`Ошибка при выполнении запроса: ${error}`);\n      });\n\n    // Добавляем текущую задачу в очередь\n    const taskPromise = task.then(() => {\n      // После завершения задачи запускаем новую (рекурсивный вызов)\n      return worker();\n    });\n\n    queue.push(taskPromise);\n\n    return taskPromise;\n  };\n\n  // Запускаем выполнение первых `limit` задач\n  const initialWorkers = Array.from({ length: Math.min(limit, data.length) }, () =>\n    worker()\n  );\n\n  // Дожидаемся завершения всех задач и возвращаем результат\n  return Promise.all(initialWorkers).then(() => result);\n}\n\n\n2)\n\n//Написать рекурсивную функцию, которая обходит дерево и возвращает все ноды, где есть дочерние ноды\nexport function nodeCleaner(rootNode: NodeItem | null): NodeItem | null {\n  // Если корневой узел отсутствует, возвращаем null\n  if (!rootNode) return null;\n\n  // Фильтруем дочерние узлы, оставляя только те, которые должны остаться в дереве\n  rootNode.children = rootNode.children\n    .map(child => nodeCleaner(child)) // Рекурсивно очищаем каждый дочерний узел\n    .filter(child => child !== null); // Удаляем узлы, которые стали null\n\n  // Проверяем, должен ли сам узел остаться в дереве\n  if (!rootNode.alive && rootNode.children.length === 0) {\n    return null; // Если узел сам \"мертв\" и у него нет живых детей, он удаляется\n  }\n\n  return rootNode; // Возвращаем очищенное дерево\n}\n\nФидбек: очень душные и неприятные ребята, говорили , что деревья обходить это база и им нахуй не надо проверять знания тс и реатка и всего прочего, т к если ты умеешь решать задачи с деревьями, ты со всем разберешься)))🤡"
      },
      {
        "timestamp": "2025-03-15 17:47:26",
        "content": "2025-03-15 17:47:26\n Эмир -> 2071074234:\nКомпания Сигнал\nhttps://hh.ru/vacancy/117579944?hhtmFrom=main\nЗП: 250к\nВопросы:\nПочему ищешь работу\nКак вас учили в колледже 😂\nЗадачи:\nДля заданного набора двумерных точек вычислите площадь ограничивающего треугольника\ntype Points = Array<[number, number]>;\n\nconst getBoundingBoxArea = (points: Points): number => {\n    if (points.length === 0) return 0;\n\n    let minX = points[0][0];\n    let maxX = points[0][0];\n    let minY = points[0][1];\n    let maxY = p...",
        "full_content": "2025-03-15 17:47:26\n Эмир -> 2071074234:\nКомпания Сигнал\nhttps://hh.ru/vacancy/117579944?hhtmFrom=main\nЗП: 250к\nВопросы:\nПочему ищешь работу\nКак вас учили в колледже 😂\nЗадачи:\nДля заданного набора двумерных точек вычислите площадь ограничивающего треугольника\ntype Points = Array<[number, number]>;\n\nconst getBoundingBoxArea = (points: Points): number => {\n    if (points.length === 0) return 0;\n\n    let minX = points[0][0];\n    let maxX = points[0][0];\n    let minY = points[0][1];\n    let maxY = points[0][1];\n\n    for (const [x, y] of points) {\n        if (x < minX) minX = x;\n        if (x > maxX) maxX = x;\n        if (y < minY) minY = y;\n        if (y > maxY) maxY = y;\n    }\n\n    return (maxX - minX) * (maxY - minY);\n};\n\nconst points: Points = [\n    [1, 1],\n    [2, 3],\n    [5, 5]\n];\n\nconst points2: Points = [\n    [-18, -18],\n    [23, 13],\n    [22, 33],\n    [2, 3],\n    [30, 50]\n];\n\nconsole.log(getBoundingBoxArea(points)); // Должно вывести 16\nconsole.log(getBoundingBoxArea(points2)); // Должно вывести 3600\n\n2. Написать компонент который будет получать данные пользователя по {{userId}} и выводить основные данные \nДля запроса использовать fetchUser\n\nimport React, { useEffect, useState } from 'react';\n\n// Пример функции fetchUser, которая делает запрос к API\nconst fetchUser = async (userId) => {\n  const response = await fetch(`https://api.example.com/users/${userId}`);\n  if (!response.ok) {\n    throw new Error('Пользователь не найден');\n  }\n  return response.json();\n};\n\nconst UserProfile = ({ userId }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getUser = async () => {\n      try {\n        const userData = await fetchUser(userId);\n        setUser(userData);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getUser();\n  }, [userId]);\n\n  if (loading) {\n    return <div>Загрузка...</div>;\n  }\n\n  if (error) {\n    return <div>Ошибка: {error}</div>;\n  }\n\n  if (!user) {\n    return <div>Пользователь не найден</div>;\n  }\n\n  return (\n    <div>\n      <h1>Профиль пользователя</h1>\n      <p><strong>Имя:</strong> {user.name}</p>\n      <p><strong>Email:</strong> {user.email}</p>\n      <p><strong>Телефон:</strong> {user.phone}</p>\n      <p><strong>Адрес:</strong> {user.address.city}, {user.address.street}</p>\n    </div>\n  );\n};\n\nexport default UserProfile;"
      },
      {
        "timestamp": "2025-03-11 14:12:33",
        "content": "2025-03-11 14:12:33\n Эмир -> 2071074234:\nКомпания: Сигнал\nВакансия: https://hh.ru/vacancy/117579944?hhtmFrom=main\nЗп: 250к\nВопросы: \nпочему ищешь работу\nкак вас учили в колледже 😂\nзадачи:\n1. Для заданного набора двумерных точек вычислите площадь ограничивающего прямоугольника.\n2. Написать компонент который будет получать пользователя по {{userId}} и выводить основные данные\n   Для запроса использовать fetchUser",
        "full_content": "2025-03-11 14:12:33\n Эмир -> 2071074234:\nКомпания: Сигнал\nВакансия: https://hh.ru/vacancy/117579944?hhtmFrom=main\nЗп: 250к\nВопросы: \nпочему ищешь работу\nкак вас учили в колледже 😂\nзадачи:\n1. Для заданного набора двумерных точек вычислите площадь ограничивающего прямоугольника.\n2. Написать компонент который будет получать пользователя по {{userId}} и выводить основные данные\n   Для запроса использовать fetchUser"
      }
    ]
  },
  {
    "company": "LegalTech",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-06-27 19:39:08",
        "content": "2025-06-27 19:39:08\n No Name -> 2071074234:\nLegalTech\nЗП не обсуждали\nВакансия: https://hh.ru/vacancy/120924464\nВопросы: очень кратко по опыту\nЗадача 1\n \"aaabc\" -> \"a\" вернуть букву которая больше всего повторяется\nдоп условие:\n\"bac\" -> \"a\" нужно, чтобы выводилась буква, которая наиболее близка к началу алфавита\nдоп задача:\nоценить сложность алгоритма\nРешение после всех доп условий:\n function letterCounter (str) { // O(nLogn)\n  const hash = {}\n  let letter = ''\n  let maxNumber = 0\n  const keys =...",
        "full_content": "2025-06-27 19:39:08\n No Name -> 2071074234:\nLegalTech\nЗП не обсуждали\nВакансия: https://hh.ru/vacancy/120924464\nВопросы: очень кратко по опыту\nЗадача 1\n \"aaabc\" -> \"a\" вернуть букву которая больше всего повторяется\nдоп условие:\n\"bac\" -> \"a\" нужно, чтобы выводилась буква, которая наиболее близка к началу алфавита\nдоп задача:\nоценить сложность алгоритма\nРешение после всех доп условий:\n function letterCounter (str) { // O(nLogn)\n  const hash = {}\n  let letter = ''\n  let maxNumber = 0\n  const keys = Object.keys(hash).sort() // O(nLogn)\n  for (const el of str) { // O(n)\n    hash[el] ? hash[el] += 1 : hash[el] = 1\n    if (hash[el] === maxNumber) {\n      letter = keys[0]\n    }\n\n    if (hash[el] > maxNumber ) {\n      maxNumber = hash[el]\n      letter = el\n    }\n  }\n  return letter\n}\nЗадача 2\n // Нам нужно реализовать некий буфер, который будет хранить данные до отправки на сервер,\n// но также он должен ограничивать потребление памяти параметром max_size. У этого буфера должны быть следующие методы:\n// write - добавляет новый элемент в буфер. Если количество элементов в буфере больше чем max_size, то он должен переписать наиболее старый элемент\n// read - удаляет и возвращает наиболее старый элемент из буфера\n\nclass Buffer {\n  constructor (max_size) {\n    this.max_size = max_size\n    this.buffer = new Array(max_size)\n    this.oldest_el = 0\n  }\n\n  write (item) {\n    if (this.max_size === this.buffer.length) {\n      this.buffer[this.oldest_el] = item\n      if (this.oldest_el === this.buffer.length) {\n        this.oldest_el = 0\n        return\n      }\n      this.oldest_el = this.oldest_el + 1\n    } else {\n      this.buffer.push(item)\n    }\n  }\n\n  read () {\n    const item = this.buffer[this.oldest_el]\n    this.buffer.delete(item)\n    this.buffer = this.buffer.filter((el) => Boolean(el))\n    return item\n  }\n}\nP.s моя реализация буфера имеет небольшой баг + не оптимальна по сложности"
      },
      {
        "timestamp": "2025-06-12 14:12:55",
        "content": "2025-06-12 14:12:55\n Sodnom Tyksheev -> 2071074234:\nКомпания - LegalTech 2 этап\nВакансия - https://hh.ru/vacancy/120924464?hhtmFrom=negotiation_list\nВопросы: \n1.Вначале рассказать про свой опыт\n2.Скажи про свойство position\n3.Расказать про Promise.all\n4.Как работает EventLoop\n5.Что такое WebWorker\n6.Как бы ты оптимизировал приложение если у нас нет пагинации(Ответил юзал бы виртуализацию)\n7.Тебе нужно реализовать форму для логина, что бы ты использовал(Ответ:использовал бы готовые UI решения  + ...",
        "full_content": "2025-06-12 14:12:55\n Sodnom Tyksheev -> 2071074234:\nКомпания - LegalTech 2 этап\nВакансия - https://hh.ru/vacancy/120924464?hhtmFrom=negotiation_list\nВопросы: \n1.Вначале рассказать про свой опыт\n2.Скажи про свойство position\n3.Расказать про Promise.all\n4.Как работает EventLoop\n5.Что такое WebWorker\n6.Как бы ты оптимизировал приложение если у нас нет пагинации(Ответил юзал бы виртуализацию)\n7.Тебе нужно реализовать форму для логина, что бы ты использовал(Ответ:использовал бы готовые UI решения  + react-hook-form + zod для валидации)\n8.Расскажи про SOLID принципы\n9.Какая у вас была архитектура на проекте(ответил FSD) и тут как раз она спросила расскажи про плюсы и минусы FSD, почему она стала такой популярной\n10.Ну и в конце рефакторинг этого кода:\n\nfunction TodoApp({ initialTodos }) {\n\n\n    const [todos, setTodos] = useState(initialTodos);\n    let name = 'My Todo App'\n    function handleAddTodo() {\n        e.preventDefault();\n        const newTodo = e.target.todoInput.value\n        setTodos(todos.push(newTodo))\n        e.target.todoInput.value = \"\"\n    }\n\n \n    useEffect(() => {\n        console.log('Todos updated:', todos);\n    }, [todos, handleAddTodo]);\n\n    return (\n        <div>\n            <h1>{name}</h1>\n            <form onSubmit={(e) => handleAddTodo(e)}>\n                <input name=\"todoInput\" type=\"text\" />\n                <button type=\"submit\">Add Todo</button>\n            </form>\n            <ul>\n            \n                {todos.map((todo,idx) => (\n                    function handleDelete() {\n                        const updated = todos.filter((_,i) => i !== idx);\n                        setTodos(updated);\n                    \n                    <li>\n                        {todo}\n                        <button onClick={() => handleDelete()}>Delete</button>\n                    </li>\n                );\n        )}\n            </ul>\n        </div>\n    );\n}\n\nReactDOM.render(<TodoApp initialTodos={[\"firstTask\"]} />, document.getElementById('container'));\n\n\nПосле основных изменений попросила еще добавить типизацию. Как я сделал по итогу:\n\ninterface Todo {\n    id: number;\n    text: string;\n    completed: boolean\n}\n\n\ninterface TodosProps {\n    initialTodo: Todo[]\n}\n\n\n\nconst TodoApp: React.FC<TodoProps> = ({ initialTodos }) => {\n\n\n    const [todos, setTodos] = useState < Todo[] > (initialTodos);\n    const [value, setValue] = useState < string > ('');\n\n    function handleAddTodo(e: FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        const newTodo = {\n            id: Date.now(),\n            text: value,\n            completed: false\n        }\n        setTodos([...todos, newTodo]);\n        setValue('')\n    }\n\n    function handleDelete(id: number) {\n        const updated = todos.filter((todo) => todo.id !== id);\n        setTodos(updated);\n    }\n\n    useEffect(() => {\n        console.log('Todos updated:', todos);\n    }, [todos, handleAddTodo]);\n\n    return (\n        <div>\n            <h1>{'My Todo App'}</h1>\n            <form onSubmit={(e) => handleAddTodo(e)}>\n                <input value={value} onChange={() => setValue(e.target.value)} name=\"todoInput\" type=\"text\" />\n                <button type=\"submit\">Add Todo</button>\n            </form>\n            <ul>\n                {todos?.map((todo) => (\n                    <li key={todo.id}>\n                        {todo.text}\n                        <button onClick={() => handleDelete(id)}>Delete</button>\n                    </li>\n                );\n        )}\n            </ul>\n        </div>\n    );\n}\n\nReactDOM.render(<TodoApp initialTodos={[{ id: 0, text: 'firstTodo', completed: false }] />, document.getElementById('container'));"
      },
      {
        "timestamp": "2025-06-05 13:15:33",
        "content": "2025-06-05 13:15:33\n Sodnom Tyksheev -> 2071074234:\nКомпания - LegalTech \nВакансия - https://hh.ru/vacancy/120924464?hhtmFrom=negotiation_list\nВопросы: только про опыт \n1 этап 2 алгоритмические задачи\n\n1 задача:\nНаписать функциюm, которая принимает строку и возвращает из нее наиболее повторяющийся символ\n \nМое решение:\n    const charCount = {}\n    let maxCount = 0;\n    let maxChar = '';\n\n    for (const char of str) {\n        charCount[char] = (charCount[char] || 0) + 1;\n\n        if (charCount[ch...",
        "full_content": "2025-06-05 13:15:33\n Sodnom Tyksheev -> 2071074234:\nКомпания - LegalTech \nВакансия - https://hh.ru/vacancy/120924464?hhtmFrom=negotiation_list\nВопросы: только про опыт \n1 этап 2 алгоритмические задачи\n\n1 задача:\nНаписать функциюm, которая принимает строку и возвращает из нее наиболее повторяющийся символ\n \nМое решение:\n    const charCount = {}\n    let maxCount = 0;\n    let maxChar = '';\n\n    for (const char of str) {\n        charCount[char] = (charCount[char] || 0) + 1;\n\n        if (charCount[char] > maxCount) {\n            maxCount = charCount[char]\n            maxChar = char;\n        }\n    }\n    return maxCount > 1 ? maxChar : \"\";\n}\n\n\n2 задача:\nМое решение:\nЗадача: реализовать циклический буфер фиксированного размера.\nУсловия:\nКласс Buffer принимает максимальный размер буфера.\nМетод write(item) добавляет элемент в буфер:\nЕсли буфер не полон, элемент просто добавляется.\nЕсли буфер полон, происходит перезапись самого старого элемента.\nМетод read() читает и удаляет старейший элемент.\nМетод getSize() возвращает текущее количество элементов в буфере.\n\n\nclass Buffer {\n  constructor(max_size) {\n    this.max_size = max_size;\n    this.buffer = new Array(max_size)\n    this.head = 0; \n    this.tail = 0; \n    this.size = 0; \n  }\n\n  write(item) {\n    if (this.size < this.max_size) {\n      this.size++;\n    } else {\n\n      this.head = (this.head + 1) % this.max_size;\n    }\n\n    this.buffer[this.tail] = item;\n    this.tail = (this.tail + 1) % this.max_size;\n  }\n\n  read() {\n    if (this.size === 0) return null; \n\n    const item = this.buffer[this.head];\n    this.head = (this.head + 1) % this.max_size;\n    this.size--;\n    return item;\n  }\n\n  getSize() {\n    return this.size;\n  }\n}"
      }
    ]
  },
  {
    "company": "Evapps",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-02-14 14:53:59",
        "content": "2025-02-14 14:53:59\n Александр Богданов -> 2071074234:\nКомпания EvApps,сам написал на почту компании, в раздел вакансии, задачи один в один как https://t.me/c/2071074234/489/99756 плюс что такое solid и как на погружение обработать обработчик клика, что такое клинап функция когда отрабатывает + что такое git stash",
        "full_content": "2025-02-14 14:53:59\n Александр Богданов -> 2071074234:\nКомпания EvApps,сам написал на почту компании, в раздел вакансии, задачи один в один как https://t.me/c/2071074234/489/99756 плюс что такое solid и как на погружение обработать обработчик клика, что такое клинап функция когда отрабатывает + что такое git stash"
      },
      {
        "timestamp": "2025-02-05 16:06:19",
        "content": "2025-02-05 16:06:19\n Александр Богданов -> 2071074234:\nкомпания EvApps(написал им на саит сам: https://evapps.ru/vacancy/front-end-react-razrabotcik )\nВопросы:\n- почему ушел спрошлого места\n- что ищешь на что внимание обращаешь\n- как ЗП повышали или не повышали\n- как развиваешься\n- что такое Set and Map\n- отличие useCallback vs useMemo\n- раскажи про useEffect()",
        "full_content": "2025-02-05 16:06:19\n Александр Богданов -> 2071074234:\nкомпания EvApps(написал им на саит сам: https://evapps.ru/vacancy/front-end-react-razrabotcik )\nВопросы:\n- почему ушел спрошлого места\n- что ищешь на что внимание обращаешь\n- как ЗП повышали или не повышали\n- как развиваешься\n- что такое Set and Map\n- отличие useCallback vs useMemo\n- раскажи про useEffect()"
      },
      {
        "timestamp": "2025-01-28 13:35:05",
        "content": "2025-01-28 13:35:05\n It L -> 2071074234:\nКомпания: Evapps\nВакансия: на hh нет вакансии, но у них на сайте висит https://evapps.ru/vacancy/front-end-react-razrabotcik\nЗП: 180-200\nЗадачи:\nЧто выведет в консоли:\nconst person = {\n    name: \"John\",\n    age: 30,\n    adress: {\n        street: \"123 Main St\",\n        city: \"Anytown\",\n        state: \"CA\"\n    }\n};\nconst newPerson = Object.assign({}, person);\nnewPerson.adress.city = \"Newtown\";\nconsole.log(person.adress.city);\nconst obj = { a: 1, b: 2 };\ncon...",
        "full_content": "2025-01-28 13:35:05\n It L -> 2071074234:\nКомпания: Evapps\nВакансия: на hh нет вакансии, но у них на сайте висит https://evapps.ru/vacancy/front-end-react-razrabotcik\nЗП: 180-200\nЗадачи:\nЧто выведет в консоли:\nconst person = {\n    name: \"John\",\n    age: 30,\n    adress: {\n        street: \"123 Main St\",\n        city: \"Anytown\",\n        state: \"CA\"\n    }\n};\nconst newPerson = Object.assign({}, person);\nnewPerson.adress.city = \"Newtown\";\nconsole.log(person.adress.city);\nconst obj = { a: 1, b: 2 };\nconst arr = [3, 4, 5];\nconst { a, b } = obj;\nconst [c, ...d] = arr;\nconsole.log(a, b, c, d);\nlet x = 1;\nfunction foo() {\n    console.log(x);\n    let x = 2;\n}\nfoo();\nfunction outer() {\n    let a = 1;\n    return function inner() {\n        a++;\n        console.log(a);\n    }\n}\nlet fun1 = outer();\nfun1();\nfun1();\nfun1();\nlet fun2 = outer();\nfun2();\nsetTimeout(() => console.log('STM 1'), 0\n);\nPromise.resolve().then(() => console.log('STM 2')\n)\nPromise.resolve().then(() => setTimeout(() => console.log('STM 3'),0));\nsetTimeout(() => console.log('STM 4'),0);\nconsole.log('STM 5');\nнаписать функцию:\n//С сервера пришел большой объект,\n// a = { x: 1, y: 'boo', p: 2,...}\n// Пришел второй объект\n// b = { x: true, y: false, p: true }\n// который объясняет какими свойствами из объекта a{...}\n// надо заполнить новый объект c{}\n// const c=createC(a,b)\n// Напишите функцию createC\n// Пример:\nconst a = { f: 1, k: 2, j: 5, o: 8, d: [3, 4, 5] }\nconst b = { f: true, k: false, j: true }\nconst c = createC(a, b) //c={f: 1, j: 5}\n//В объекте b нет \"лишних\" ключей (которые отсутствуют в a)\n\nfunction createC(a, b) {\n\n}\nвопросы что такое замыкание, eventloop\n//Есть базовый компонент, инициализируй в нем state-компонент с дефолтным значением\nconst App = () => {\n    return null;\n}"
      }
    ]
  },
  {
    "company": "Дом.Рф",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-07-17 16:18:14",
        "content": "2025-07-17 16:18:14\n Ivan -> 2071074234:\nКомпания: дом.рф\nЗП: 320\n\n1. Про опыт\n2. Про задачи\n3. Был ли опыт с микрофронтами\n4. Как микрофронты между собой общались (шина событий, контекст в хосте)\n5. Готов ли развиваться и исследовать?\n6. хойстинг var let const function declaration\n7. замыкания\n8. Set Map\n9. Жизненный цикл компонентов Реакт\n10. render Props\n11. оптимизация списков в Реакт. И в целом про оптимизации в Реакт.\nЗадача 1\n\nФункция принимает строку и возвращает длину наибольшей возможн...",
        "full_content": "2025-07-17 16:18:14\n Ivan -> 2071074234:\nКомпания: дом.рф\nЗП: 320\n\n1. Про опыт\n2. Про задачи\n3. Был ли опыт с микрофронтами\n4. Как микрофронты между собой общались (шина событий, контекст в хосте)\n5. Готов ли развиваться и исследовать?\n6. хойстинг var let const function declaration\n7. замыкания\n8. Set Map\n9. Жизненный цикл компонентов Реакт\n10. render Props\n11. оптимизация списков в Реакт. И в целом про оптимизации в Реакт.\nЗадача 1\n\nФункция принимает строку и возвращает длину наибольшей возможной подстроки с уникальными символами\n\n  \nfunction lengthOfLongestSubstring(s) {\n    let maxValue = 0;\n\n    for (let i = 0; i < s.length; i++) {\n        const set = new Set();\n\n        for (let j = i; j < s.length; j++) {\n            if (set.has(s[j])) {\n               break;\n             }\n\n            set.add(s[j]);\n            maxValue = Math.max(maxValue, j - i + 1);\n        }\n    }\n\n    return maxValue;\n}\n\n\n\nЗадача 2\n\n// Я постарался воспроизвести по памяти что именно было в задаче.\n\nconsole.log('1')\n\nsetTimeout(function timeout() {  \n console.log('2');  \n}, 10);\n\nsetTimeout(function timeout() {\n Promise.resolve(3).then(console.log)  \n console.log('4');  \n}, 0);\n\nsetTimeout(function timeout() {  \n console.log('5');  \n}, 0);\n\nconsole.log('6')\n\nlet p = new Promise(function(resolve, reject) {  \n console.log('7');  \n reject(8);\n console.log('9')\n}).then(() => console.log('10'))\n .catch(() => console.log('11'))\n .then(() => console.log('12'))\n .catch(() => console.log('13'))\n .then(() => console.log('14'))\n .catch(() => console.log('15'))\n .finally(() => console.log('16'))\n\nconsole.log('17')\n\nЗадача 3\n\nНе помню формулировку. Но нужно было написать хук useFetch который инкапсулирует в себе логику с отправкой запросов и хранит состояние.\nconst useFetch = (query) => {\n  const [data, setData] = useState([]);\n  const [isLoad, setIsLoad] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    let loading = true;\n\n    async function fetchData() {\n      try {\n        setData([]);\n        setIsLoad(true);\n        const response = await fetch(\n          \"https://jsonplaceholder.typicode.com/todos\"\n        );\n        if (!response.ok) throw new Error(\"Ошибка сети\");\n        const data_ = await response.json();\n        setData(data_);\n      } catch {\n        setError(\"Что-то пошло не так...\");\n      } finally {\n        setIsLoad(false);\n      }\n    }\n\n    fetchData();\n\n    return () => {\n      loading = true;\n    };\n  }, [query]);\n\n  return { data, isLoad, error };\n};\n\nexport default function App() {\n  const [query, setQuery] = useState(\"\");\n\n  const { data, isLoad, error } = useFetch(query);\n\n  return <div>Не помню что в разметке, но там ничего не нужно менять</div>;\n}\n\n\nЗадача 4\n\nНа CSS. Блок родитель и несколько вложенных. Нужно чтоб они растягивались на всю длину и сжимались до 100пх, если не входят то переносятся.\nconst style = {\n display: 'grid',\n gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))',\n gap: 'grid',\n}"
      },
      {
        "timestamp": "2024-11-17 16:26:26",
        "content": "2024-11-17 16:26:26\n аыеъа -> 2071074234:\nДОМ.РФ техсобес\nЗП: 250к\nВаканасия: https://hh.ru/vacancy/108532548\nВопросы:\nПро этапы рендеринга браузера и в каких очередях исполняется requestAnimationFrame и requestIdleCallback\nРассказать про прототипы и как их получить\nЧто будет если вызвать метод которого не существует (ошибка is not a function)\nКаким способом на можно на обновление значения внутри объекта выводить его в консоль (геттеры и сеттеры, прокси)\nРассказать про промис\n\n\nЗадачки:\nНаписать...",
        "full_content": "2024-11-17 16:26:26\n аыеъа -> 2071074234:\nДОМ.РФ техсобес\nЗП: 250к\nВаканасия: https://hh.ru/vacancy/108532548\nВопросы:\nПро этапы рендеринга браузера и в каких очередях исполняется requestAnimationFrame и requestIdleCallback\nРассказать про прототипы и как их получить\nЧто будет если вызвать метод которого не существует (ошибка is not a function)\nКаким способом на можно на обновление значения внутри объекта выводить его в консоль (геттеры и сеттеры, прокси)\nРассказать про промис\n\n\nЗадачки:\nНаписать свой delay\n\nfunction delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Пример использования:\nasync function example() {\n    console.log('Начало');\n    await delay(2000); // Приостановить выполнение на 2 секунды\n    console.log('Прошло 2 секунды');\n}\n\nfunction twoSum(nums, target) {\n    const numMap = new Map();\n\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return null; // Если не найдено пары, возвращаем null\n}\n// Типизировать map\nconst map = <T, U>(arr: T[], cb: (value: T, index: number, array: T[]) => U): U[] => {}\nfunction promiseAll(promises) {\n    return new Promise((resolve, reject) => {\n        const results = [];\n        let completedCount = 0;\n\n        promises.forEach((promise, index) => {\n            Promise.resolve(promise)\n                .then(result => {\n                    results[index] = result;\n                    completedCount++;\n\n                    if (completedCount === promises.length) {\n                        resolve(results);\n                    }\n                })\n                .catch(error => {\n                    reject(error);\n                });\n        });\n\n        if (promises.length === 0) {\n            resolve(results);\n        }\n    });\n}\n\n// Пример использования:\nconst promise1 = Promise.resolve(1);\nconst promise2 = new Promise((resolve) => setTimeout(() => resolve(2), 1000\n// 1. Реализовать компоненет MainPage\n\n// 2. Добавить input со стейтом и вывести span значение\n\n// 3. Заиспользовать компонент UsersList\n\n// После решения этих 3х пунктов спросил какие я вижу проблемы в коде, я сказал что нужно декомпозировать и вынести локигу Input, он попросил реализовать useInput\n\nexport const useInput = (initialValue = '') => {\n    const [value, setValue] = useState(initialValue)\n    \n    const handleInput = (e) => {\n        setInputValue(e.target.value)\n    }\n    \n    return {\n        value,\n        onChange: handleInput\n    }\n}\n\nconst MainPage = () => {\n    const inputProps = useInput()\n    \n    return <div> \n        <input {...inputProps} type='text'/>\n        <span> {inputProps.value} </span>\n        <UsersList />\n    </div>\n}\n\nconst UsersList = memo (() => {\n  ...\n  return (\n    ....\n  )\n})"
      },
      {
        "timestamp": "2024-09-06 07:23:06",
        "content": "2024-09-06 07:23:06\n Данил Володин -> 2071074234:\nHR - банк ДОМ.РФ\n- Сколько с реактом работаете\n- Был ли опыт с ангуляром\n- Как себя оценишь по грейду\n- Почему решили смотреть новое место работы\n- Почему ушли с предпоследнего места раоты (5 месяцев там отработал)\n- Сколько денег хочешь\n- Где проживаете\n- На руках ли военник\n\nРассказала про следующие этапы:\nЛАйвкодинг + вопросы\nЗнакомство\n\nЕсть ли вопросы не спросили, в целом собес был очень сухой стандартный\n\nПопросил 370к с обратной связью не ...",
        "full_content": "2024-09-06 07:23:06\n Данил Володин -> 2071074234:\nHR - банк ДОМ.РФ\n- Сколько с реактом работаете\n- Был ли опыт с ангуляром\n- Как себя оценишь по грейду\n- Почему решили смотреть новое место работы\n- Почему ушли с предпоследнего места раоты (5 месяцев там отработал)\n- Сколько денег хочешь\n- Где проживаете\n- На руках ли военник\n\nРассказала про следующие этапы:\nЛАйвкодинг + вопросы\nЗнакомство\n\nЕсть ли вопросы не спросили, в целом собес был очень сухой стандартный\n\nПопросил 370к с обратной связью не вернулись)"
      }
    ]
  },
  {
    "company": "Сравни",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-07-16 13:17:39",
        "content": "2025-07-16 13:17:39\n Vitalii -> 2071074234:\nКлауд Ком\nЗП: 250к\n\nРасскажи про свой опыт и проекты\nКак работает EventLoop?\nЧто такое промис, для чего нужен, также расскажи про async/await?\nЧто такое контекст, когда он теряется?\nВ чем отличие function declaration от стрелочных функций?\nТайпскрипт, расскажи про ютилити тайпы какие знаешь?\nЧто нам дает Реакт?\nПочему Реакт это библиотека, а Ангуляр и Вью фреймворки?\nЧто такое Virtual DOM, для чего нужен?\nЧто такое хуки, какие у них правила есть?\nЧем u...",
        "full_content": "2025-07-16 13:17:39\n Vitalii -> 2071074234:\nКлауд Ком\nЗП: 250к\n\nРасскажи про свой опыт и проекты\nКак работает EventLoop?\nЧто такое промис, для чего нужен, также расскажи про async/await?\nЧто такое контекст, когда он теряется?\nВ чем отличие function declaration от стрелочных функций?\nТайпскрипт, расскажи про ютилити тайпы какие знаешь?\nЧто нам дает Реакт?\nПочему Реакт это библиотека, а Ангуляр и Вью фреймворки?\nЧто такое Virtual DOM, для чего нужен?\nЧто такое хуки, какие у них правила есть?\nЧем useEffect отличается от useLayoutEffect?\nКакими хуками пользовался?\nКакие кастомные хуки писал?\nКакими UI библиотеками пользовался?\nС какими стейт-менеджарми работал?\nЗнаком ли с Ангуляром?\nЧто такое RxJs и что он нам позволяет делать?\nСравни RxJs с промисами"
      },
      {
        "timestamp": "2024-07-16 16:35:48",
        "content": "2024-07-16 16:35:48\n Ramis Mubarakov -> 2071074234:\n— Компания: Сравни, HR-скрининг\n— Ссылка на вакансию: сами написали, https://hh.ru/vacancy/97044312\n— Озвученная мной ЗП: 250k\n— Вопросы:\n1) git pull vs git push\n2) git merge vs git rebase\n3) FSD\n4) Какие ограничения есть у get-запроса?\n5) Generic в Typescript\n6) Какие utility-types знаешь?\n7) Как проверить переменную на NaN?\n8) Как из строки \"1.1a\" достать число?\n9) Зачем нужен useEffect?",
        "full_content": "2024-07-16 16:35:48\n Ramis Mubarakov -> 2071074234:\n— Компания: Сравни, HR-скрининг\n— Ссылка на вакансию: сами написали, https://hh.ru/vacancy/97044312\n— Озвученная мной ЗП: 250k\n— Вопросы:\n1) git pull vs git push\n2) git merge vs git rebase\n3) FSD\n4) Какие ограничения есть у get-запроса?\n5) Generic в Typescript\n6) Какие utility-types знаешь?\n7) Как проверить переменную на NaN?\n8) Как из строки \"1.1a\" достать число?\n9) Зачем нужен useEffect?"
      },
      {
        "timestamp": "2024-05-27 07:15:24",
        "content": "2024-05-27 07:15:24\n Александр Птицын -> 2071074234:\n24.05 (пятница) тех. собес в #сравни\n- время: 16:00\n- вакансия: https://spb.hh.ru/vacancy/97981116?hhtmFrom=employer_vacancies\n- важность: важно\n- ЗП: сказал рассматриваю от 350к на руки\n- стек: React\n- успех собеса: ✅ пригласили на 2й этап\n\nссылка на задачи: https://trycode.pw/c/TXV15\n\nзапись созвона - https://youtu.be/BTUMYE9TJZE",
        "full_content": "2024-05-27 07:15:24\n Александр Птицын -> 2071074234:\n24.05 (пятница) тех. собес в #сравни\n- время: 16:00\n- вакансия: https://spb.hh.ru/vacancy/97981116?hhtmFrom=employer_vacancies\n- важность: важно\n- ЗП: сказал рассматриваю от 350к на руки\n- стек: React\n- успех собеса: ✅ пригласили на 2й этап\n\nссылка на задачи: https://trycode.pw/c/TXV15\n\nзапись созвона - https://youtu.be/BTUMYE9TJZE"
      }
    ]
  },
  {
    "company": "Radium Finance",
    "count": 3,
    "records": [
      {
        "timestamp": "2024-12-17 16:38:15",
        "content": "2024-12-17 16:38:15\n Egor -> 2071074234:\nКомпания: Radium Finance\nСсылка на вакансию: https://hh.ru/vacancy/112467011?hhtmFrom=employer_vacancies\nЗп: от 330\nЗапись: https://youtu.be/Qo-xzuw6_7Y",
        "full_content": "2024-12-17 16:38:15\n Egor -> 2071074234:\nКомпания: Radium Finance\nСсылка на вакансию: https://hh.ru/vacancy/112467011?hhtmFrom=employer_vacancies\nЗп: от 330\nЗапись: https://youtu.be/Qo-xzuw6_7Y"
      },
      {
        "timestamp": "2024-09-06 11:45:21",
        "content": "2024-09-06 11:45:21\n Александр Птицын -> 2071074234:\nRadium Finance\n- вакансия: https://t.me/c/2071074234/616/60648\n- зп: не обсуждали\n- вопросы и задачи в видео",
        "full_content": "2024-09-06 11:45:21\n Александр Птицын -> 2071074234:\nRadium Finance\n- вакансия: https://t.me/c/2071074234/616/60648\n- зп: не обсуждали\n- вопросы и задачи в видео"
      },
      {
        "timestamp": "2024-08-11 17:23:38",
        "content": "2024-08-11 17:23:38\n Руслан -> 2071074234:\nRadium Finance\n— зп: от 250к\n— вакансия: https://hh.ru/vacancy/104770233\n— задачи:\n1\nfor (var i = []; i.length < 3; i.push(2)) {\n  setTimeout(() => {\n    console.log(i);\n  }, i.length * 1000);\n}\n// сделать так, чтобы выводилось [], [2], [2, 2]\n2. На реакт компонент, в котором задается обработчик события на ресайз окна. Там необходимо было написать отписку от события.\n3. на удаление dangerouslySetInnerHTML- xss атаки\n4. на удаление из функции строк кода,...",
        "full_content": "2024-08-11 17:23:38\n Руслан -> 2071074234:\nRadium Finance\n— зп: от 250к\n— вакансия: https://hh.ru/vacancy/104770233\n— задачи:\n1\nfor (var i = []; i.length < 3; i.push(2)) {\n  setTimeout(() => {\n    console.log(i);\n  }, i.length * 1000);\n}\n// сделать так, чтобы выводилось [], [2], [2, 2]\n2. На реакт компонент, в котором задается обработчик события на ресайз окна. Там необходимо было написать отписку от события.\n3. на удаление dangerouslySetInnerHTML- xss атаки\n4. на удаление из функции строк кода, которые делают ее не чистой\n5. На то, как будешь себя вести когда прийдет задача реализовать компонент со скриншота и на какой срок выполнения ее оценишь и почему. На нем список чатов как  в телеге.\nВопросы:\n1. про плюсы и минусы fsd"
      }
    ]
  },
  {
    "company": "Домклик",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-07-04 15:44:56",
        "content": "2025-07-04 15:44:56\n Антон -> 2071074234:\nДОМКЛИК\nЗП 250\n\nИдёт строго по резюме и спрашивает все вопросы по нему\n\n1) SSE vs websocket\n2) lazy, bundle analyzer, svg, woff2, оптимизация\n3) vite vs webpack. \n4) Работает ли vite в старых браузерах\n5) babel vs tsloader, зачем использовал ts-fork-checker\n6) eslint vs prettier\n7) Как проверяли pixel perfect\n8) Ощущение от tailwind\n9) С какими препроцессами работал?\n10) Расскажи про css modules, их особенности и в чём их преимущество\n11) Какие плюсы у t...",
        "full_content": "2025-07-04 15:44:56\n Антон -> 2071074234:\nДОМКЛИК\nЗП 250\n\nИдёт строго по резюме и спрашивает все вопросы по нему\n\n1) SSE vs websocket\n2) lazy, bundle analyzer, svg, woff2, оптимизация\n3) vite vs webpack. \n4) Работает ли vite в старых браузерах\n5) babel vs tsloader, зачем использовал ts-fork-checker\n6) eslint vs prettier\n7) Как проверяли pixel perfect\n8) Ощущение от tailwind\n9) С какими препроцессами работал?\n10) Расскажи про css modules, их особенности и в чём их преимущество\n11) Какие плюсы у tailwind\n12) Как выглядит tailwind после сборки, его оптимизации\n13) Какие тесты писал?\n14) Если нужно написать быстро большой тест за полчаса, как поступишь?\n15) E2E тесты\n16) Какую версию node.js использовали на проекте\n17) Отличие npm i от npm ci\n18) Как найти уязвимости в пакетах и устаревшие пакеты(npm audit, npm outdated)\n19) Для чего нужна дедупликация зависимостей\n20) Как сделать дедупликацию зависимостей\n21) Что такое nginx, как работает, какие есть настройки\n22) Можно ли делать вложенные if и по условиям отдавать статику в nginx\n23) Для чего нужен location в nginx\n24)  Для чего нужна мультистейдж сборка\n25) Как проверить размер образа сборки"
      },
      {
        "timestamp": "2024-07-27 18:30:05",
        "content": "2024-07-27 18:30:05\n Руслан -> 2071074234:\nДомклик\n— зп: 280к\n— вакансия: https://orenburg.hh.ru/vacancy/104071094\n— Вопросы: \n1. как работает метод map, мутирует ли исходный массив\n2. как работает метод filter, мутирует ли исходный массив\n3. Фазы события подробно про всплытие, погружение\n4. отличие currentTarget от target\n5. async await для чего, что возвращает async функция\n6.  что за флаги i, g в регулярках\n7. что такое /d в регулярках\n8. методы test, match отличия\n9. метод replace подробно\n1...",
        "full_content": "2024-07-27 18:30:05\n Руслан -> 2071074234:\nДомклик\n— зп: 280к\n— вакансия: https://orenburg.hh.ru/vacancy/104071094\n— Вопросы: \n1. как работает метод map, мутирует ли исходный массив\n2. как работает метод filter, мутирует ли исходный массив\n3. Фазы события подробно про всплытие, погружение\n4. отличие currentTarget от target\n5. async await для чего, что возвращает async функция\n6.  что за флаги i, g в регулярках\n7. что такое /d в регулярках\n8. методы test, match отличия\n9. метод replace подробно\n10. что такое блочная модель\n11. про особенности box-sizing^ border-box\n12. вес селекторов\n13. про свойство position и его значения\n14. про псевдоэлементы\n15. псевдоклассы поробно\n16. через какие свойства работаем с маркерами списков\n17. как поменять цвет маркера списка\n18. свойство transition и из чего состоит его значение\n19. как делать анимации через keyframes и как их применять их к элементам\n20. Чем плох transition: all\n21. свойство will-change подробно, что будет если добавить его для всех элементов\n22. grid-template-columns \n23. repeat в гридах\n24. как задать промежутки между колонками или строками\n25. grid-template-areas\n26. как отловить прогрузку html, отличие domcontentloaded от load\n27. как понять, что страница все еще грузится(document.readystate)\n28. localstorage vs cookie\n29. спросил про preload атрибуты\n30. про prefetch? preconnect\n31. дефолтные скрипты vs async vs defer vs module\n32. фрагменты в реакт, можно ли им проставить атрибут key\n33. что будет, если задать списку один и тот же key\n34. что такое useRef, useMemo, memo\n35. react lazy для чего\n36. что такое redux, single source of true в его контексте\nЗадачи:\n1. Функция на вход принимает число нужно из цифр этого числа создать новое число с максимально возможным значением\nfunction descendingOrder(n) {\n    return parseInt(String(n).split('').sort((a, b) => b - a).join(''), 10);\n}\n2. \n/*\nПреобразуйте массив таким образом, чтобы на выходе получилась строка с диапазоном чисел.\nДиапазон начинается с трех и более идущих подряд чисел, все остальные числа выводятся отдельно.\n*/\n \nfunction rangeExtraction(list) {\n  // твой код здесь\n}\n \nconst range = [-10, -9, -8, -7, -3, -2, -1, 0, 1, 3, 4, 5, 14, 15, 17, 18, 19, 20];\n \nconsole.info(rangeExtraction(range) === \"-10--7,-3-1,3-5,14,15,17-20\");\n\nмое решение\nfunction rangeExtraction(list) {\n  let start = list[0];\n  let end = start;\n  let result = [];\n  let itemsArr = [start];\n  for (let i = 1; i < list.length; i++) {\n    const currentNum = list[i];\n    if (Math.abs(Math.abs(end) - Math.abs(currentNum)) === 1) {\n      itemsArr.push(currentNum);\n      end = currentNum;\n    } else {\n      if (itemsArr.length >= 3) {\n        result.push(`${itemsArr[0]}-${itemsArr.at(-1)}`);\n      } else {\n        result.push(itemsArr);\n      }\n      start = currentNum;\n      end = start;\n      itemsArr = [currentNum];\n    }\n  }\n  if (itemsArr.length >= 3) {\n    result.push(`${itemsArr[0]}-${itemsArr.at(-1)}`);\n  } else {\n    result.push(itemsArr);\n  }\n  return result.flat().join();\n}"
      },
      {
        "timestamp": "2024-03-20 18:05:14",
        "content": "2024-03-20 18:05:14\n Данил -> 2071074234:\n- Название компании: ДомКлик\n- ссылка: hr сам написал\n- зп: просил 250-280\n- задачи: теория и задача\n- вакансия: https://hh.ru/vacancy/91538070\n\nвопросы и задача:\n1. Расскажи про map\n2. Расскажи про reduce\n3. В чем разница между == и ===\n4. В чем различие между let и const\n5. Если я объявлюсь массив через const смогу ли я что-то изменить в нем ? \n6. Рассказать про стрелочные функции\n7. Как можно имитировать поведение arguments в стрелочных фукнциях ?\n8. ...",
        "full_content": "2024-03-20 18:05:14\n Данил -> 2071074234:\n- Название компании: ДомКлик\n- ссылка: hr сам написал\n- зп: просил 250-280\n- задачи: теория и задача\n- вакансия: https://hh.ru/vacancy/91538070\n\nвопросы и задача:\n1. Расскажи про map\n2. Расскажи про reduce\n3. В чем разница между == и ===\n4. В чем различие между let и const\n5. Если я объявлюсь массив через const смогу ли я что-то изменить в нем ? \n6. Рассказать про стрелочные функции\n7. Как можно имитировать поведение arguments в стрелочных фукнциях ?\n8. Что будет, если попробовать использовать стрелочную функцию как конструктор ? \n9. Что такок куки и что с их помощью можно делать ? Приведи пример использования, если работал с ними. Какие есть опции в куках, кроме httpOnly\n10. Расскажи что знаешь про localStorage\n11. Расскажи как работает всплытие события в браузере\n12. Всегда ли при погружении срабатывают обработчики ? \n13. Устно решить задачку. Представь, что есть страница и она занимает 5 вьюпортов. В центре страницы есть нужный нам элемент. В какой-то момент нам нужно понять, что мы доскролили до этого элемента. Как это можно сделать ? \n14. Что такое intersection observer ?\n15. Расскажи что знаешь о сервис воркерах\n16. Расскажи как ты понимаешь что такое interface ? typescript\n17. Что будет, если объявить два интерфейса с одним и тем же именем ? \n18. Какие базовые типы в ts ты знаешь ? \n19. В чем разница между unknown и any ?\n20. Что такое тип never ?\n21. В чем разница между enum и const enum ?\n22. Что такое CEO ?\n23. Какие приемы по оптимизации CEO ты знаешь ? \n24. В чем разница между display: block, inline-block и inline ?\n25. Назови парочку семантичных строчных и блочных тэгов, кроме div и span\n26. В чем разница между position absolute и fixed ?\n27. Расскажи про position sticky \n28. Расскажи что знаешь про flexbox\n29. Что такое препроцессоры и для чего они нужны \n30. Расскажи что ты знаешь про анимации в css\n31. Расскажи про порядок загрузки и выполнения скриптов: как грузится просто script, как с атрибутом async и defer\n32. Есть несколько идущих подряд скриптов с атрибутом async. Порядок их загрузки и выполнения будет соблюден ? А с defer\n33. Что такое регулярные выражения ? Примеры использования ?\n34. Что такое kiss и dry ? \n35. С редаксом используются библиотеки для работы с сайд эффектами. Какую ответственность они на себя берут ? \n36. Расскажи про useState. В функцию меняющую состояние можно передать callback. Для чего это нужно ?\n37. Для чего нужен и как работает useEffect \n38. Расскажи про useMemo и useCallback\n39. Когда стоит использовать useCallback, а когда нет ? \n40. Зачем нужен ключ в реакте и как он должен формироваться ? \n41. Как можно минимизировать кол-во merge конфликтов ? git\n42. Расскажи про git хуки \n43. Расскажи что знаешь про методологии git flow и github flow\n44. Перечисли http коды и что они обозначают. Можно по группам\n45. В чем разница между http и https ?\n46. В чем отличия http 1.1 и 2 ?\n47. Что такое cors ? Приведи пример. Что можно запрещать с помощью cors ?\n48. Зачем нужно код-ревью и нужно ли оно вообще ?\n49. Что такое ci pipeline ?\n50. В чем разница между выполнением кода на сервере и на клиенте ? \n51. Как будет выглядеть проверка на window на клиенте ? \n52. Замечал ли ты как выглядит утечка памяти на графиках ?\n53. Расскажи про xss\n54. В чем разница между npm i и npm ci ?\n55. Зачем нужна команда npm i ?\n56. Зачем нужна команда npm ddp ?\n57. В чем разница между dependencies и dev dependencies ?\n58. Для чего нужно поле main в package.json ?\n59. Для чего нужно поле side effects в package.json ?\n60. Зачем нужно минифицировать статические файлы ?\n61. Что такое chunk ?\n62. Зачем разбивать на chunk'и ?\n63. Что такое terser ? webpack\n64. Что такое транспайлинг и для чего он нужен ? \n65. Базовые подходы по ускорению сборки"
      }
    ]
  },
  {
    "company": "Лемма",
    "count": 3,
    "records": [
      {
        "timestamp": "2024-09-29 21:39:23",
        "content": "2024-09-29 21:39:23\n Бахтияр -> 2071074234:\nКомпания: Лемма  \nЗП: от 300К  \nВакансия: сам написал в ТГ https://t.me/c/2071074234/616/66962\nВопросы:\n1. Расскажи о себе и о своем опыте.\n2. Что такое npm? Какие аналоги знаешь?\n3. В чем отличие npm ci и npm i?\n4. Для чего нужен Webpack? Какие аналоги знаешь?\n5. Какая у вас архитектура общения с бэкендом на проекте?\n6. Как у вас на проекте была реализована авторизация?\n7. Что такое куки?\n8. Что такое JWT?\n9. Для чего нужен React?\n10. Что такое Virtua...",
        "full_content": "2024-09-29 21:39:23\n Бахтияр -> 2071074234:\nКомпания: Лемма  \nЗП: от 300К  \nВакансия: сам написал в ТГ https://t.me/c/2071074234/616/66962\nВопросы:\n1. Расскажи о себе и о своем опыте.\n2. Что такое npm? Какие аналоги знаешь?\n3. В чем отличие npm ci и npm i?\n4. Для чего нужен Webpack? Какие аналоги знаешь?\n5. Какая у вас архитектура общения с бэкендом на проекте?\n6. Как у вас на проекте была реализована авторизация?\n7. Что такое куки?\n8. Что такое JWT?\n9. Для чего нужен React?\n10. Что такое Virtual DOM?\n11. Зачем нужны state-менеджеры?\n12. Расскажи про Redux.\n13. Основные сущности Redux.\n14. В чем разница между классовыми и функциональными компонентами?\n15. Как работает useEffect?\n16. В чем плюсы иммутабельности Redux?\n17. Какой паттерн реализует Redux?\n18. Задача :\n\nconst data = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]; \n\n// Идем с конца, чтобы удаление не нарушало индексы\nconst filteredData = data.filter((item, index) => index % 2 === 1);\n\nconsole.log(filteredData); // [\"B\", \"D\", \"F\", \"H\", \"J\"]"
      },
      {
        "timestamp": "2024-03-27 17:05:29",
        "content": "2024-03-27 17:05:29\n Vitalya Bedik -> 2071074234:\n— Название компании: Лемма\n— Ссылка на вакансию: https://t.me/fordev/46992\n— ЗП: попросил от 305к на руки\n— Задачи: Немного теории + про опыт + сам проект + задачи\n— Записи на ютуб: https://youtu.be/1JJHiovjYD0?si=05T0gZja9k8vA8-z\n— Успех собеса:  ❓Pending\n— Фидбек о собесе: до 3 апреля должен быть фидбек\n\n/**\n * 1. Дано положительное число millis, напишите асинхонную функцию, \n * которая засыпает на millis миллисекунд. Эта функция должна вернуть...",
        "full_content": "2024-03-27 17:05:29\n Vitalya Bedik -> 2071074234:\n— Название компании: Лемма\n— Ссылка на вакансию: https://t.me/fordev/46992\n— ЗП: попросил от 305к на руки\n— Задачи: Немного теории + про опыт + сам проект + задачи\n— Записи на ютуб: https://youtu.be/1JJHiovjYD0?si=05T0gZja9k8vA8-z\n— Успех собеса:  ❓Pending\n— Фидбек о собесе: до 3 апреля должен быть фидбек\n\n/**\n * 1. Дано положительное число millis, напишите асинхонную функцию, \n * которая засыпает на millis миллисекунд. Эта функция должна вернуть количество миллисекунд, на которое заснула\n */\n/**\n * @param {number} millis\n * @return {Promise}\n */\n async function sleep(millis) {\n \n }\n\n// 2. \nconst data = [\"A\", \"B\", \"C \", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]; \n\n// //удалить из массива все чётные элементы по индексу (без создания нового) - мутируя существующий\n\n\nconsole.log(data)\n\n/**\n * 3. Дан массив целых чисел nums и целое число target, верните индексы этих двух чисел так, чтобы их сумма равнялась target.\nСчитаем, что в массиве только одна пара чисел, которые в сумме дают target\nВы можете возвращать ответы в любом порядке.\nconst nums = [0,1,2,5,3]; 4\n[1, 4] - индексы\n\nГраничные значения:\n2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nТолько один правильный ответ существует.\n\n */\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\n\n\nconst nums = [0,1,8,5,3]; \nconst target = 4;\n\nvar twoSum = function(nums, target) {\n\n};\n\nconst res = twoSum(nums, target)\n\nconsole.log(res);"
      },
      {
        "timestamp": "2024-03-27 16:44:57",
        "content": "2024-03-27 16:44:57\n Kirill N -> 2071074234:\nДополнение с 11.03 - 27.03\nКомпания: Minevrasoft 11.03 \nhttps://youtu.be/c2TDgGjVxcQ \n \nКомпания: про Айти ресурс от 12.03 \nhttps://youtu.be/tBrVrALlflE \n \nКомпания: КиберЛаб 12.03 \nhttps://youtu.be/Ayov7AAZ9zA \nКомпания: 16.03 \nhttps://youtu.be/g8awopYcbh4   \n \nКомпания: IT ONE 18 03 \nhttps://youtu.be/opoqwpzVRVo \n \nКомпания: Эвотека 19 03 \nhttps://youtu.be/pq64Y2e0-CQ \n \nКомпания: BAUM от 20 03 \nhttps://youtu.be/YR2G2tRzgJo \n \nКомпания: Сбер Техноло...",
        "full_content": "2024-03-27 16:44:57\n Kirill N -> 2071074234:\nДополнение с 11.03 - 27.03\nКомпания: Minevrasoft 11.03 \nhttps://youtu.be/c2TDgGjVxcQ \n \nКомпания: про Айти ресурс от 12.03 \nhttps://youtu.be/tBrVrALlflE \n \nКомпания: КиберЛаб 12.03 \nhttps://youtu.be/Ayov7AAZ9zA \nКомпания: 16.03 \nhttps://youtu.be/g8awopYcbh4   \n \nКомпания: IT ONE 18 03 \nhttps://youtu.be/opoqwpzVRVo \n \nКомпания: Эвотека 19 03 \nhttps://youtu.be/pq64Y2e0-CQ \n \nКомпания: BAUM от 20 03 \nhttps://youtu.be/YR2G2tRzgJo \n \nКомпания: Сбер Технологии 22 03 \nhttps://youtu.be/dm34hydCIIA \n \nКомпания: KTS 22 03 \nhttps://youtu.be/Nt177GK9LAE \n \nКомпания: KTS 27 03 \nhttps://youtu.be/QDi0AkDwwgw \n \nКомпания: Лемма 27 03 \nhttps://youtu.be/grfpac_XgvA"
      }
    ]
  },
  {
    "company": "Райффайзен",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-04-03 11:57:23",
        "content": "2025-04-03 11:57:23\n Максим Соломыкин -> 2071074234:\nКомпания - Райффайзен\nВакансия - https://career.raiffeisen.ru/vacancy/26628\nЗП - от 250\n\nВопросы:\n- семантика?\n- как браузер рисует страницу ?\n- архитектура?\n- reset vs normalize?\n- что такое реакт?\n- useEffect vs useLayoutEffect?\n- redux, концепции?\n- редьюсер?\n- экшн в редакс, асинх. экшны?\n- мидлвары?\n- useCallback и useMemo?\n- HOC memo\n- useRef\n\nЗадачи:\n1. Плюс добавить типизацию\nconsole.clear()\n\nclass PaginationHelper {\n  constructor(coll...",
        "full_content": "2025-04-03 11:57:23\n Максим Соломыкин -> 2071074234:\nКомпания - Райффайзен\nВакансия - https://career.raiffeisen.ru/vacancy/26628\nЗП - от 250\n\nВопросы:\n- семантика?\n- как браузер рисует страницу ?\n- архитектура?\n- reset vs normalize?\n- что такое реакт?\n- useEffect vs useLayoutEffect?\n- redux, концепции?\n- редьюсер?\n- экшн в редакс, асинх. экшны?\n- мидлвары?\n- useCallback и useMemo?\n- HOC memo\n- useRef\n\nЗадачи:\n1. Плюс добавить типизацию\nconsole.clear()\n\nclass PaginationHelper {\n  constructor(collection, itemsPerPage) {\n    // The constructor takes in an array of items and a integer indicating how many\n    // items fit within a single page\n  }\n\n  itemCount() {\n    // returns the number of items within the entire collection\n  }\n\n  pageCount() {\n    // returns the number of pages\n  }\n\n  pageItemCount(pageIndex) {\n    // returns the number of items on the current page. page_index is zero based.\n    // this method should return -1 for pageIndex values that are out of range\n  }\n\n  pageIndex(itemIndex) {\n    // determines what page an item is on. Zero based indexes\n    // this method should return -1 for itemIndex values that are out of range\n  }\n}\n\nconst collection = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\nconst helper = new PaginationHelper(collection, 10)\n\n// console.log(helper.itemCount() --- 24)\n// console.log(helper.pageCount() = 3)\n// console.log(helper.pageItemCount(1) --- 10)\n// console.log(helper.pageItemCount(2) === 4)\n// console.log(helper.pageItemCount(3) === -1)\n\n2.\ninterface User {\n}\n\ninterface Admin {\n}\n\nexport type Person\n\nexport const persons = [\n    {\n        name: 'Max Mustermann',\n        age: 25,\n        occupation: 'Chimney sweep'\n    },\n    {\n        name: 'Jane Doe',\n        age: 32,\n        role: 'Administrator'\n    },\n    {\n        name: 'Kate Müller',\n        age: 23,\n        occupation: 'Astronaut'\n    },\n    {\n        name: 'Bruce Willis',\n        age: 64,\n        role: 'World saver'\n    }\n];\n\nexport function logPerson(person) {\n    let additionalInformation;\n    if (person.role) {\n        additionalInformation = person.role;\n    } else {\n        additionalInformation = person.occupation;\n    }\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\nНужно типизировать \n}\n\n\n3. Переписать с классов на функциональные компоненты\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst list = [1, 2, 3, 4, 5]\n\nclass Clock extends React.Component {\n        this.state = {\n            date: new Date(),\n\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n            this.state.date = new Date()\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Hello, world!</h1>\n                <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n            </div>\n        );\n    }\n}\n\nclass ListRender extends React.Component {\n    render() {\n        return (\n            <ol>\n                {list.map(item => (<li>{item}</li>))}\n            </ol>\n        )\n    }\n}\n\nconst App = () => <Clock /><ListRender />;\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n\n4. Стилизовать\n/* - Выбрать id header */\n/* - Выбрать все p с классом first */\n/* - Выбрать элемент с текстом \"p2\" */\n/* - Выбрать последний h2 в блоке с классом main? */\n\n<div>\n    <h1 id=\"header\">CSS</h1>\n    <h2>Selectors</h2>\n    <p>Description</p>\n    <div class=\"main\">\n        <h2>h2_1</h2>\n        <p class=\"first\">p1</p>\n        <p class=\"first second\">p2</p>\n        <p class=\"first third\">p3</p>\n        <h2>h2_2</h2>\n        <p class=\"second fourth\">p4</p>\n    </div>\n</div>"
      },
      {
        "timestamp": "2024-10-10 14:54:17",
        "content": "2024-10-10 14:54:17\n Dispersioned -> 2071074234:\nКомпания: Райффайзен банк\nВакансия: по рефералке\nЗП: >320net\nУспех: позвали на финалку ✅\nВопросы: \nПо опыты работы по последнему место\nКак дедуплицировать повторяющиеся библиотеки в бандле в микрофронтах  \nРаботал ли с styled components\nПочему не стал бы тащить redux в проект? (видимо какая-то боль в компании, стек valtio, rxjs)\nEvent Loop, как взаимодействует с WebApi, как заблочить поток микро/макротасками\nCookies, как работают, как получить и у...",
        "full_content": "2024-10-10 14:54:17\n Dispersioned -> 2071074234:\nКомпания: Райффайзен банк\nВакансия: по рефералке\nЗП: >320net\nУспех: позвали на финалку ✅\nВопросы: \nПо опыты работы по последнему место\nКак дедуплицировать повторяющиеся библиотеки в бандле в микрофронтах  \nРаботал ли с styled components\nПочему не стал бы тащить redux в проект? (видимо какая-то боль в компании, стек valtio, rxjs)\nEvent Loop, как взаимодействует с WebApi, как заблочить поток микро/макротасками\nCookies, как работают, как получить и установить, httpOnly, secure\nСтруктура http, подробно про шифрование данных, get и post, как get кэшируется?\nКак клонировать объект, чем плох json.parse(json.stringify)\nuseMemo, useCallback, memo. Подробно про внутренности\nПолучение данных в реальном времени: websocket, SSE\ntypescript: когда стоит тащить в проект, расскажи всё что знаешь про generics, почему нельзя заменить дженерики юнионами, type vs interface"
      },
      {
        "timestamp": "2024-05-07 08:38:59",
        "content": "2024-05-07 08:38:59\n Aleksandr -> 2071074234:\nНазвание компании - Райффайзен Банк\nВакансия: https://hh.ru/vacancy/96446150?hhtmFrom=employer_vacancies\nЗП: от 300 net запросил\nЗадачи: Теория, лайвкодинг (в своем редакторе кода написать логику банкомата и сделать несложный интерфейс для взаимодействия на реакте)\n// RUB: [50, 100, 200, 500, 1000, 2000, 5000],\n// USD: [1, 2, 5, 10, 20, 50, 100],\n// EUR: [5, 10, 20, 50, 100, 200, 500]\n// 2000х1, 500x1\n// 14350\nexport type Currency = \"rub\" | \"usd\" | \"...",
        "full_content": "2024-05-07 08:38:59\n Aleksandr -> 2071074234:\nНазвание компании - Райффайзен Банк\nВакансия: https://hh.ru/vacancy/96446150?hhtmFrom=employer_vacancies\nЗП: от 300 net запросил\nЗадачи: Теория, лайвкодинг (в своем редакторе кода написать логику банкомата и сделать несложный интерфейс для взаимодействия на реакте)\n// RUB: [50, 100, 200, 500, 1000, 2000, 5000],\n// USD: [1, 2, 5, 10, 20, 50, 100],\n// EUR: [5, 10, 20, 50, 100, 200, 500]\n// 2000х1, 500x1\n// 14350\nexport type Currency = \"rub\" | \"usd\" | \"eur\";\nexport const objCurrency = {\n  rub: [50, 100, 200, 500, 1000, 2000, 5000],\n  usd: [1, 2, 5, 10, 20, 50, 100],\n  eur: [5, 10, 20, 50, 100, 200, 500],\n};\n\nconst terminal = (amount: number, currency: Currency): string[] => {\n  const res: string[] = [];\n  const selectedCurrency = objCurrency[currency];\n  selectedCurrency.sort((a, b) => b - a);\n  for (const sum of selectedCurrency) {\n    let count = 0;\n    while (amount - sum >= 0) {\n      count++;\n      amount -= sum;\n    }\n    if (count) {\n      res.push(`${sum}x${count}`);\n    }\n    count = 0;\n  }\n  console.log(res);\n  return res;\n};\n\nexport default terminal;\nЗапись: https://www.youtube.com/watch?v=wGiTk4flH-s&ab_channel=%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%A0%D1%8F%D0%B1%D0%BE%D0%B2\nУспех: ❌\nФидбек: Саша, привет! \nЯ к тебе с фидбэком. Техническое интервью, в целом прошло неплохо. \nОднако, немного не хватило того объёма знаний наличие, которых предполагает данная вакансия. \nЗоны роста, которые му субъективно могли бы выделить: \nОсвежить знания о базовом JS (обработчики событий, контекст, всплытия-погружения, области видимости), почитать про разные стейт менеджеры, возможно попробовать что-то новое на пет проекте. Обязательно изучить разные подходы к архитектуре приложений (FSD, atomic design, nested components итд). Попрактиковать побольше ts, писать больше сложных типов. Порешать алгоритмы на leetcode. И собрать проект с нуля, настроить там сборку, окружение.\nСпасибо тебе огромное за уделенное время и давай оставаться на связи, на случай, если у нас будут более подходящие вакансии для тебя и ты будешь открыт к новым предложениям о работе вновь) Хорошо?\n\nКомментарий от себя: Проблема с записью, когда перешел в свой редактор, абсолютно не видно, что там происходит, плюс собес разделился на 2 части, но я решил вторую не выкладывать, так как ничего не видно. Не успел реализовать логику обработки ошибок, ну и чуть в теории с всплытием и погружением поплавал.\nА так по фидбеку у них не прям под меня подобран он будто бы, так как были моменты, которые мы даже не обсуждали, а они решили посоветовать освежить их )\nСуммарно собес около 2 часов"
      }
    ]
  },
  {
    "company": "Поле.рф",
    "count": 3,
    "records": [
      {
        "timestamp": "2024-09-16 19:00:49",
        "content": "2024-09-16 19:00:49\n Бахтияр -> 2071074234:\nКомпания: ПОЛЕ.РФ\n- ЗП: от 300К\n- Вакансия: https://t.me/c/2071074234/616/62485\n- Вопросы:\nРасскажи о себе (опыт и что делал руками) \nNext и SSR что использовал что знаешь ?\nЧто происходит при нажатии кнопки enter в адресной строке ?\nВ каком порядке будут загружаться несколько файлов со стилями и почему?\nЧто блокирует скрипт ?\nAsync defer + для чего используются в работе ?\nПамять в браузере какая бывает, чем отличается, взаимодействие между вкладками ч...",
        "full_content": "2024-09-16 19:00:49\n Бахтияр -> 2071074234:\nКомпания: ПОЛЕ.РФ\n- ЗП: от 300К\n- Вакансия: https://t.me/c/2071074234/616/62485\n- Вопросы:\nРасскажи о себе (опыт и что делал руками) \nNext и SSR что использовал что знаешь ?\nЧто происходит при нажатии кнопки enter в адресной строке ?\nВ каком порядке будут загружаться несколько файлов со стилями и почему?\nЧто блокирует скрипт ?\nAsync defer + для чего используются в работе ?\nПамять в браузере какая бывает, чем отличается, взаимодействие между вкладками через память?\nJS однопоточный ?\nJS асинхронный ?\nКак достигается асихронность в JS?\nEvent loop?\nКакие ограничения  у web workera или на каких задачах нельзя использовать ?\nструктуры данных в js ?\nприходит больщой список данных грузит 10 сек, как оптимизировать  ?\nMap Set WeakMap WeakSet + для чего используют ?\nЕсли ограничение по размеру переменной в JS и сколько ?\nПереполнение стека была у тебя, с чем связана ?\nНа сколько глубоко он может провалится ?\nString является ли объектом ?\nчто под  капотом у async await?\nГенераторы ?\n\n- Задача на реакт TS (пустой проект):\n1. отобразить шахматную доску \n2. сверстать стили \n\n- Задача debounce:\n\nconst fetchUrl = (url) = {\nconsole. log('Fetching ${url}...')\nfunction debounce) {\n}\nconst fetching = debounce(fetchUrl, 300)\nfetching(1)\nfetching(2)\nfetching(3)\nfetching(4)\nfetching(5) // в итоге только 5"
      },
      {
        "timestamp": "2024-09-15 17:15:36",
        "content": "2024-09-15 17:15:36\n Руслан -> 2071074234:\nПОЛЕ.РФ\n— зп: 300к\n— вакансия: https://hh.ru/vacancy/106353373\n— вопросы: \n1. critical rendering path\n2. как выбираешь либы\n3. есть ли опыт разработки open source либ\n4. async defer\n5. где хранить jwt token лучше\n6. как с помощью localstorage общаться между вкладками\n7. луп\n8. web vs service workers\n9. если внутри промиса вызвать сначала реджект потом ресолв, что будет\n10. map vs object\n11. weak set and map\n12. tdz\n13. реконсиляция\n14. fiber для чего\n15...",
        "full_content": "2024-09-15 17:15:36\n Руслан -> 2071074234:\nПОЛЕ.РФ\n— зп: 300к\n— вакансия: https://hh.ru/vacancy/106353373\n— вопросы: \n1. critical rendering path\n2. как выбираешь либы\n3. есть ли опыт разработки open source либ\n4. async defer\n5. где хранить jwt token лучше\n6. как с помощью localstorage общаться между вкладками\n7. луп\n8. web vs service workers\n9. если внутри промиса вызвать сначала реджект потом ресолв, что будет\n10. map vs object\n11. weak set and map\n12. tdz\n13. реконсиляция\n14. fiber для чего\n15. атрибут key\n16. сохраняется ли состояние компонента при ремаунте\n17. 10й https://t.me/c/2071074234/489/58761\n18. 19й https://t.me/c/2071074234/489/58761\n19. 20й https://t.me/c/2071074234/489/58761\n— задачи:\nfunction parallel(funcArray, doneAll) {\n  // написать реализацию\n}\n\n// пример использования\n\n\nconst a = (done) => {\n  setTimeout(() => {\n    done(\"result a\");\n  }, 300);\n};\n\nconst b = (done) => {\n  setTimeout(() => {\n    done(\"result b\");\n  }, 200);\n};\n\nparallel([a, b], (results) => {\n  console.log(results); // ['result a', 'result b']\n});"
      },
      {
        "timestamp": "2024-09-02 15:26:29",
        "content": "2024-09-02 15:26:29\n Timofei Syromiatnikov -> 2071074234:\n— Название: Поле.рф\n— Вакансия: https://hh.ru/vacancy/106353373\n— ЗП: 300к\n— Вопросы:\n1) Как сделать адаптивную верстку без использования @media запросов в css и без использовани js? Например, адаптивный текст, в зависимости мобилка или декстоп это шрифт автоматом будет уменьшаться или увеличиваться\n2) В чем разница между reset и normalize css? С чем работал из этого\n3) У нас есть див с паддингом и бордером. Что войдет в размеры этого див...",
        "full_content": "2024-09-02 15:26:29\n Timofei Syromiatnikov -> 2071074234:\n— Название: Поле.рф\n— Вакансия: https://hh.ru/vacancy/106353373\n— ЗП: 300к\n— Вопросы:\n1) Как сделать адаптивную верстку без использования @media запросов в css и без использовани js? Например, адаптивный текст, в зависимости мобилка или декстоп это шрифт автоматом будет уменьшаться или увеличиваться\n2) В чем разница между reset и normalize css? С чем работал из этого\n3) У нас есть див с паддингом и бордером. Что войдет в размеры этого дива (ширину, высоту)?\n4) Расскажи про погружение/всплытие в DOM\n5) Расскажи про промисы, какие методы у него есть и обработчики событий.\n6) В чем разница между async/await и .then() у промиса?\n7) Различие между операторами \"??\" и \"| |\" (ИЛИ). Что выведет в коносль: \nnull ?? 1\nnull  ||  1\n\nfalse ?? 1\nfalse || 1\n8) React memo HOC, расскажи какие пропсы в себя принимает.\n9) Как работает механика мемоизации?\n10) Как мы можем предотврать ререндер компонента, который обернут в memo HOC, по конкретному пропсу. Т.е например у нас есть компонент Test, который обернут в memo. И в него передается 3 пропса а, б, с. Как нам сделать так чтобы при изменинии а, б компонент перерендеривался, а при измении пропса \"с\" — не делал этого.\n11) Различие между localStorage, sessionStorage, Cookie. Что такое httpOnly\n12) Зачем нужен React, чем он полезен.\n13) Что такое keyof в TS. \n14) Что такое дженерик в TS\n15) Какой утили тайп использовать чтобы сделать все ключи необязательными/обязательным.\n16) Какой утили тайп используется для исключения конкретного ключа из интерфейса. И наоборот какой достает только нужный ключ\n17) Что такое Record в ts\n18) Как можно оптимизировать вывод тысячи элементов на страницу. Работал ли с виртуализацией?\n19) Как работает и для чего используется useRef. Что в нем можно хранить. Будет ли он тригерить ререндер компонента. Будет ли он тригерить вызов useEffect'a если в зависимость передать ref.current\n20) Различие между useEffect и useLayoutEffect. Кто из них будет блокировать рендер а кто нет.\n21) Использовал ли библиотеки lodash и похожие, и для чего?\n22) Какие есть способы оптимизации React приложения?\n23) Какие знаешь псевдоклассы и псевдоэлементы?\n24) Как можно при анмаунте компонента отписаться от каких-то событий?"
      }
    ]
  },
  {
    "company": "Купибилет",
    "count": 3,
    "records": [
      {
        "timestamp": "2024-04-24 16:10:30",
        "content": "2024-04-24 16:10:30\n Daniil Max -> 2071074234:\n— Название компании: Купибилет\n— Ссылка на вакансию: hr сама написал\n— ЗП: 240-270К. Макс. вилка 240К\n— Задачи: лайвкодинг + теория\n— Запись на ютуб: https://youtu.be/FJ4xT837nq0?si=A1D2vv95yo7dhOp-\n— Комментарий: получилось классное шоу, где я иногда угарал)\n– Успех собеса: ❌\n– Фитбек от HR:\nДаниил, привет! Как и обещал, возвращаюсь к тебе с обратной связью. Обсудили с тимлидом все, у тебя интересный опыт, отличные навыки и знания, кажется что на н...",
        "full_content": "2024-04-24 16:10:30\n Daniil Max -> 2071074234:\n— Название компании: Купибилет\n— Ссылка на вакансию: hr сама написал\n— ЗП: 240-270К. Макс. вилка 240К\n— Задачи: лайвкодинг + теория\n— Запись на ютуб: https://youtu.be/FJ4xT837nq0?si=A1D2vv95yo7dhOp-\n— Комментарий: получилось классное шоу, где я иногда угарал)\n– Успех собеса: ❌\n– Фитбек от HR:\nДаниил, привет! Как и обещал, возвращаюсь к тебе с обратной связью. Обсудили с тимлидом все, у тебя интересный опыт, отличные навыки и знания, кажется что на нашей открытой позиции у нас не найдется достаточно интересных задач для тебя, поэтому с нашей стороны решили отказать. Вне зависимости от решения, от ребят только положительная обратная связь, с тобой было очень приятно общаться! Со своей стороны желаю тебе найти классных коллег и интересную работу!😇"
      },
      {
        "timestamp": "2024-04-11 10:09:25",
        "content": "2024-04-11 10:09:25\n Artem -> 2071074234:\n- Название компании Купибилет\n- Ссылка на вакансию: hr писала в тг\n- ЗП: просил 200к (вилка 180 - 230)\n- Ссылка на собес: https://www.youtube.com/watch?v=dqIXkGff8Jk\n- Успех: Долго думали, но решили отказать, так как показалось, что не хватит моих навыков на этот проект.",
        "full_content": "2024-04-11 10:09:25\n Artem -> 2071074234:\n- Название компании Купибилет\n- Ссылка на вакансию: hr писала в тг\n- ЗП: просил 200к (вилка 180 - 230)\n- Ссылка на собес: https://www.youtube.com/watch?v=dqIXkGff8Jk\n- Успех: Долго думали, но решили отказать, так как показалось, что не хватит моих навыков на этот проект."
      },
      {
        "timestamp": "2024-03-27 10:45:41",
        "content": "2024-03-27 10:45:41\n 5429820319 -> 2071074234:\nНазвание компании: Купибилет\nСсылка на вакансию: hr сама написала\nЗП: 160К \nЗадачи: дали написать свой fetch с ограничение на количество вызовов (в чате такая уже встречалась), несколько задач на консоль логи (не успел сохранить), вопросы про куки, корс, csp, замыкание и контекст. Сказали если все ок будет еще один этап \nУспех собеса: ❌ (фидбэк не дали)\n\nСобес был 18 марта, ходил ради практики",
        "full_content": "2024-03-27 10:45:41\n 5429820319 -> 2071074234:\nНазвание компании: Купибилет\nСсылка на вакансию: hr сама написала\nЗП: 160К \nЗадачи: дали написать свой fetch с ограничение на количество вызовов (в чате такая уже встречалась), несколько задач на консоль логи (не успел сохранить), вопросы про куки, корс, csp, замыкание и контекст. Сказали если все ок будет еще один этап \nУспех собеса: ❌ (фидбэк не дали)\n\nСобес был 18 марта, ходил ради практики"
      }
    ]
  },
  {
    "company": "Технологии Доверия",
    "count": 3,
    "records": [
      {
        "timestamp": "2024-06-07 15:19:19",
        "content": "2024-06-07 15:19:19\n stil -> 2071074234:\nНазвание компании: Технологии доверия\nСсылка на вакансию: https://spb.hh.ru/vacancy/95436192\nЗп: 250к\n\nВопросы:\n- авторизация, ее виды, jwt, доменная аутентификация \n- про вебсокеты, библиотека socket io\n- решение проблемы автокомплита с несколькими запросами на сервер \n- что использовать для типизации объекта, интерфейсы или типы\n- дженерики\n- можно ли типизировать объекты тайпом \n- может ли быть тип дженериком \n- порталы, всплытие в порталах\n- есть тайм...",
        "full_content": "2024-06-07 15:19:19\n stil -> 2071074234:\nНазвание компании: Технологии доверия\nСсылка на вакансию: https://spb.hh.ru/vacancy/95436192\nЗп: 250к\n\nВопросы:\n- авторизация, ее виды, jwt, доменная аутентификация \n- про вебсокеты, библиотека socket io\n- решение проблемы автокомплита с несколькими запросами на сервер \n- что использовать для типизации объекта, интерфейсы или типы\n- дженерики\n- можно ли типизировать объекты тайпом \n- может ли быть тип дженериком \n- порталы, всплытие в порталах\n- есть таймер в реакте, где хранить значения чтобы не было перерисовок\n\nЗадачи:\n Определить, есть ли ошибка\ntype A<T> = {...}\n\n///\ninterface A {\n    foo: string\n}\ninterface A {\n   bar: string\n}\n\n/// \ninterface A {\n   bar: string\n}\ninterface A {\n   bar: number\n}\n\n/// \ntype A = {\n   bar: string\n}\ntype B = A & {\n   bar: number\n}"
      },
      {
        "timestamp": "2024-05-14 12:36:47",
        "content": "2024-05-14 12:36:47\n Aleksandr -> 2071074234:\nНазвание компании - Технологии доверия\nВакансия: https://spb.hh.ru/vacancy/95436192\nЗП: от 300 net запросил\nЗадачи: Только лайвкодинг \nЗапись: https://www.youtube.com/watch?v=UizR8ERkMzQ&ab_channel=%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%A0%D1%8F%D0%B1%D0%BE%D0%B2\n/*\n  Ваш продакт менеджер попросил вас написать приложение по поиску\n  испорченных релизов.\n  Релизы - это упорядоченная коллекция выпущенных релизов.\n  Если один из релиз...",
        "full_content": "2024-05-14 12:36:47\n Aleksandr -> 2071074234:\nНазвание компании - Технологии доверия\nВакансия: https://spb.hh.ru/vacancy/95436192\nЗП: от 300 net запросил\nЗадачи: Только лайвкодинг \nЗапись: https://www.youtube.com/watch?v=UizR8ERkMzQ&ab_channel=%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%A0%D1%8F%D0%B1%D0%BE%D0%B2\n/*\n  Ваш продакт менеджер попросил вас написать приложение по поиску\n  испорченных релизов.\n  Релизы - это упорядоченная коллекция выпущенных релизов.\n  Если один из релизов испорчен, все последующие тоже испорчены.\n  Программа должна найти самый ранний испорченный релиз из коллекции.\n\n  На вход подается:\n  n - размер (длинна) коллекции с номерами релизов.\n  индексация начинается с 0;\n  функция isBadVersion :: k: Int => boolean\n  Функция проверяет, является ли версия под переданным положением k в коллекции сломанной.\n  Функция принимает индекс массива версий k и возвращает ответ, испорчена ли версия. Функцию реализовывать не надо.\n\n  На выход:\n  Функция должна вернуть индекс самой ранней испорченной версии из списка или -1 если испорченных нет.\n  Необходимо минимизировать количество вызовов функции isBadVersion - наихудшая вычислительная сложность O(n).\n*/\n\n\n\nfunction solution(n: number, isBadVersion: (idx: number) => boolean): number {\n    let pointer1 = 0\n    let pointer2 = n - 1\n    let averagePointer = -1\n        while (pointer1 <= pointer2) {\n        let middle = Number.floor((pointer2 + pointer1) / 2)\n        \n        if (isBadVersion(middle)) {\n            // в левой половине искать\n            pointer2 = middle\n            averagePointer = middle\n        } else {\n            pointer1 = middle\n        }    \n    }\n  return averagePointer\n}\n\n\n\nconst testArr = [true, true, true, false, false];\nconst expect = 3;\nconst ibv = createIsBadVersion(testArr);\n\n\nconst answer = solution(testArr.length, ibv);\nconsole.assert(answer === expect, Bad answer ${answer});\n\nconst testArr2 = new Array(9999999).fill(true);\ntestArr2.push(false)\nconst expect2 = 9999999;\nconst ibv2 = createIsBadVersion(testArr2);\n\n\nconst answer2 = solution(testArr2.length, ibv2);\nconsole.assert(answer2 === expect2, Bad answer ${answer2});\n\nfunction createIsBadVersion(arr: boolean[]) {\n  return function isBadVersion(idx: number) {\n    return !arr[idx];\n  }\n}\nУспех: ✅ (2 из 3 этапов)\nФидбек: Эйчар вернулась со звонком почти сразу же и сказала, что оценили меня на грейд старшего консультанта (сеньора), но это 250 net, а на менеджерский грейд (300 net) я не дотянул, а менеджерский грейд это тот кто можно сказать тим лид, в итоге я слился, решил дальше не идти на 3 этап с руководителем (там короткое интервью), ну и для себя вывод сделал, что денег у них немного \nКомментарий от себя: Был тот же интервьюер, на коннекте уже с ним были ) В целом достаточно простые задачи"
      },
      {
        "timestamp": "2024-05-14 12:30:54",
        "content": "2024-05-14 12:30:54\n Aleksandr -> 2071074234:\nНазвание компании - Технологии доверия\nВакансия: https://spb.hh.ru/vacancy/95436192\nЗП: от 300 net запросил\nЗадачи: Только теория \nЗапись: https://www.youtube.com/watch?v=TrXpi0U2Hq8&ab_channel=%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%A0%D1%8F%D0%B1%D0%BE%D0%B2\nУспех: ✅ (1 из 3 этапов)\nКомментарий от себя: Интересный собес, про реакт чуть глубже поговорили, начало чуть скипнулось, но там ничего не было важного, представляли тупо комп...",
        "full_content": "2024-05-14 12:30:54\n Aleksandr -> 2071074234:\nНазвание компании - Технологии доверия\nВакансия: https://spb.hh.ru/vacancy/95436192\nЗП: от 300 net запросил\nЗадачи: Только теория \nЗапись: https://www.youtube.com/watch?v=TrXpi0U2Hq8&ab_channel=%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%A0%D1%8F%D0%B1%D0%BE%D0%B2\nУспех: ✅ (1 из 3 этапов)\nКомментарий от себя: Интересный собес, про реакт чуть глубже поговорили, начало чуть скипнулось, но там ничего не было важного, представляли тупо компанию"
      }
    ]
  },
  {
    "company": "Мегафон",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-02-25 15:15:52",
        "content": "2025-02-25 15:15:52\n Nodar -> 2071074234:\nКомпания: Мегафон(1 этап)\nЗп: от 250\nВакансия: написала hr\nВопросы от hr:\n1.На каких проектах работал\n2.Расскажи про стэк технологий, который использовал\n3.Был ли опыт наставничества(спрашивали, потому что позиция подразумевает техлидовские обязанности )\n4. Почему ушел с последнего места работы\n5. По каким критериям ищешь новую работу\n6. Как развиваешься в свободное время\n\nТех. Вопросы:\nФормат разговорный, не спрашивали про теорию.\n1.Что бы выбрал для но...",
        "full_content": "2025-02-25 15:15:52\n Nodar -> 2071074234:\nКомпания: Мегафон(1 этап)\nЗп: от 250\nВакансия: написала hr\nВопросы от hr:\n1.На каких проектах работал\n2.Расскажи про стэк технологий, который использовал\n3.Был ли опыт наставничества(спрашивали, потому что позиция подразумевает техлидовские обязанности )\n4. Почему ушел с последнего места работы\n5. По каким критериям ищешь новую работу\n6. Как развиваешься в свободное время\n\nТех. Вопросы:\nФормат разговорный, не спрашивали про теорию.\n1.Что бы выбрал для нового проекта: next или реакт и почему\n2. Как бы оптимизировал проект, какие средства в реакте есть для оптимизации\n3. По какой архитектуре бы начал делать проект(спрашивали про fsd)\n\n\n2 задачи:\n1. Дан массив объектов, вернуть новый массив с группировкой по категориям\nfunction groupByCategory(items) {\n    return items.reduce((acc, item) => {\n        // Если категория уже есть в аккумуляторе, добавляем элемент в массив\n        if (acc[item.category]) {\n            acc[item.category].push(item);\n        } else {\n            // Если категории нет, создаем новый массив с этим элементом\n            acc[item.category] = [item];\n        }\n        return acc;\n    }, {});\n}\n\n// Пример использования\nconst items = [\n    { id: 1, category: \"food\" },\n    { id: 2, category: \"drink\" },\n    { id: 3, category: \"food\" },\n];\n\nconsole.log(groupByCategory(items));\n2.Нужно написать функцию buildQueryString, которая принимает объект с параметрами и возвращает строку query - параметров в формате, подходящем для URL(например, ?key1 = value1 & key2=value2`). Пустые значения (`null, undefined, пустая строка) исключаются из результата.\nfunction buildQueryString(params) {\n  // Фильтруем пустые значения и кодируем ключи и значения\n  const queryParams = Object.entries(params)\n    .filter(([key, value]) => value != null && value !== \"\") // Исключаем пустые значения\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`) // Кодируем\n    .join(\"&\"); // Объединяем в строку\n\n  // Возвращаем строку с префиксом \"?\", если есть параметры\n  return queryParams ? `?${queryParams}` : \"\";"
      },
      {
        "timestamp": "2024-09-02 20:40:56",
        "content": "2024-09-02 20:40:56\n Евгений Лямин -> 2071074234:\n— Мегафон 2 этап TC\n— https://getmatch.ru/vacancies/20645-frontend-razrabotchik?s=my-applications-v\n— 250-280 просил\n— Вопросы:\n\n- Расскажи про опыт\n- Что такое TypeScript  и зачем он нужен.\n- Какие способы взаимодействия клиента и сервера ты знаешь\n- Работал ли с Websocket\n- С какими форматами передачи работал\n- Работал ли с Protobuf\n- Читал ли ты спецификацию JS\n- Js однопоточный или многопоточный\n- Как работают Web Worker\n- Event loop\n- Почему...",
        "full_content": "2024-09-02 20:40:56\n Евгений Лямин -> 2071074234:\n— Мегафон 2 этап TC\n— https://getmatch.ru/vacancies/20645-frontend-razrabotchik?s=my-applications-v\n— 250-280 просил\n— Вопросы:\n\n- Расскажи про опыт\n- Что такое TypeScript  и зачем он нужен.\n- Какие способы взаимодействия клиента и сервера ты знаешь\n- Работал ли с Websocket\n- С какими форматами передачи работал\n- Работал ли с Protobuf\n- Читал ли ты спецификацию JS\n- Js однопоточный или многопоточный\n- Как работают Web Worker\n- Event loop\n- Почему блокируется работа с интерфейсом если выgолняется какой-то цикл на 10 миллионов итераций\n- Каким способом можно исправить эту проблему, что бы не блокировался интерфейс у пользователя\n- Расскажи про requestAnimationFrame\n- Расскажи про сборщик мусора\n- Типы данных в JS\n- Почему null это объект\n- Какие есть способы создания переменных. Какие особенности\n- Опыт работ с библиотеками для работы с графиками\n- Получаешь огромный массив объектов, нужно его обработать и положить в другой массив. Какими методами способами мы можем это сделать не блокируя работу интерфейса\n- Как бы ты реализовал обработку событий, то есть поиск  места куда ты нажал, а у тебя еще не все объекты обработаны, не отрисовались. Какие данные ты бы искал, как отлавливал события?\n- Число с плавающей запятой, нужно округлить это число до 6 знака после запятой, средствами js"
      },
      {
        "timestamp": "2024-05-31 07:31:01",
        "content": "2024-05-31 07:31:01\n Artur -> 2071074234:\nКомпания: Мегафон\nСсылка на вакансию: отсутствует\nСсылка на собес: https://disk.yandex.ru/d/e9K7eYSIQs5NAw\nЗП: неизвестно\nУровень: Middle\nУспех собеса: ❌\n\nВопросы:\n— ООП, примеры, для чего нужен\n— SOLID, примеры, для чего нужен\n— TCP и UDP, разница\n— Что происходит после отправки запроса\n— Методы HTTP, разница между GET и POST, что безопаснее\n— CORS, что это, как работает\n— Чистая функция, примеры\n— Функция высшего порядка\n— Глубокое и поверхностное копи...",
        "full_content": "2024-05-31 07:31:01\n Artur -> 2071074234:\nКомпания: Мегафон\nСсылка на вакансию: отсутствует\nСсылка на собес: https://disk.yandex.ru/d/e9K7eYSIQs5NAw\nЗП: неизвестно\nУровень: Middle\nУспех собеса: ❌\n\nВопросы:\n— ООП, примеры, для чего нужен\n— SOLID, примеры, для чего нужен\n— TCP и UDP, разница\n— Что происходит после отправки запроса\n— Методы HTTP, разница между GET и POST, что безопаснее\n— CORS, что это, как работает\n— Чистая функция, примеры\n— Функция высшего порядка\n— Глубокое и поверхностное копирование, в чем разница\n\nЗадачи: \n1) что выведет, почему, как поправить\nconst person = {\n    name: 'Vasya',\n    age: 22,\n    hobby: { play: () => {} },\n};\n\nconst position = { title: 'Software Engineer' };\n\nperson.position = position;\nperson.position.salary = 120;\n\nconsole.log(person.position); // что выведется\nconsole.log(position);  // что выведется\n\n2) что выведет, как получить длину массива, как поправить\nconst doSomething = () => {\n    console.log('Привет');\n}\n\nconst someArray = [];\n\nsomeArray.doSomething(); // что выведется\n\n3) каррирование, реализовать функцию\nadd(5)(4)\n\n4) что выведет, почему, как поправить\nfunction Person(age) {\n    this.age = age;\n\n    setInterval(function() {\n        this.age++;\n    }, 1000);\n}\n\nconst vasya = new Person(13);\nsetTimeout(() => {\n    console.log(vasya.age); // что выведется\n}, 5000);\n\n5) что выведет, почему, как поправить\nconst button = document.getElementById('button');\n\nfor (var i = 0; i < 3; i++) {\n    button.addEventListener('click', function (e) {\n        console.log(i);\n    });\n}\n\nbutton.dispatchEvent(new Event(\"click\"));\n// что выведет, почему"
      }
    ]
  },
  {
    "company": "Честный Знак",
    "count": 3,
    "records": [
      {
        "timestamp": "2025-07-15 09:35:52",
        "content": "2025-07-15 09:35:52\n Ivan -> 2071074234:\nКомпания: Честный знак 1 этап\nЗП: 250-300+\n\n1. Рассказ про опыт\n\nСразу перешли к задаче. Пока решал задавал дополнительные вопросы.\n\n2. Про виртуализацию списков в реакт, как реализовать без библиотек. С фиксированной высотой элементов и с динамической.\n3. Что использовать в качестве ключа если нет id?\n4. Какие минусы использования Date.now в качестве ключа?\nconst a = new Date().getTime()\nconst b = new Date().getTime()\na===b// true\nconst a = new Promise((...",
        "full_content": "2025-07-15 09:35:52\n Ivan -> 2071074234:\nКомпания: Честный знак 1 этап\nЗП: 250-300+\n\n1. Рассказ про опыт\n\nСразу перешли к задаче. Пока решал задавал дополнительные вопросы.\n\n2. Про виртуализацию списков в реакт, как реализовать без библиотек. С фиксированной высотой элементов и с динамической.\n3. Что использовать в качестве ключа если нет id?\n4. Какие минусы использования Date.now в качестве ключа?\nconst a = new Date().getTime()\nconst b = new Date().getTime()\na===b// true\nconst a = new Promise((resolve) => resolve(new Date().getTime()));\nconst b = new Promise((resolve) => resolve(new Date().getTime()));\na===b// false\n5. Про клинап функции в эффектах.\n\nЗадача 1\nНебольшое приложение с редактирование .har структуры.\nДописать/поправить следующие части\n- addNewEntry// описать логику добавления entry\n- handleInputChange// описать логику редактирования entry\n-useEffect// лог при изменении\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport \"./styles.css\";\n\nconst entry = {\n  request: { url: \"https://example.com\", method: \"GET\" },\n  response: { status: 200, statusText: \"OK\" },\n};\n\nconst harItem = {\n  log: {\n    version: \"1.2\",\n    creator: { name: \"React HAR Editor\", version: \"1.0\" },\n    entries: [\n      {\n        request: { url: \"https://example.com\", method: \"GET\" },\n        response: { status: 200, statusText: \"OK\" },\n      },\n    ],\n  },\n};\n\nexport default function App() {\n  const [harData, setHarData] = useState(harItem);\n\n  const [error, setError] = useState(null);\n  //const saveTimeout = useRef(null);\n\n  const addNewEntry = useCallback(() => {\n    setHarData((prev) => ({\n      ...prev,\n      log: { entries: [...prev.log.entries, entry] },\n    }));\n  }, []);\n\n  const handleInputChange = (index, field, value) => {\n    //harData.log.entries[index].request[field] = value;\n    setHarData((prev) => ({\n      ...prev,\n      log: {\n        entries: prev.log.entries.map((item, idx) => {\n          return idx === index\n            ? { ...item, request: { ...item.request, [field]: value } }\n            : item;\n        }),\n      },\n    }));\n  };\n\n  const downloadHarFile = () => {\n    const blob = new Blob([JSON.stringify(harData, null, 2)], {\n      type: \"application/json\",\n    });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"edited.har\";\n    link.click();\n  };\n\n  useEffect(() => {\n    const timerID = setTimeout(() => {\n      console.log(\"Autosave triggered\");\n    }, 1000);\n\n    return () => {\n      clearTimeout(timerID);\n    };\n    /*if (saveTimeout.current) {\n      clearTimeout(saveTimeout.current);\n    }\n\n    saveTimeout.current = window.setTimeout(() => {\n      console.log(\"Autosave triggered\");\n    }, 1000);*/\n  }, [harData]);\n\n  return (\n    <div style={{ padding: \"20px\", maxWidth: \"800px\", margin: \"0 auto\" }}>\n      <h1>HAR File Editor</h1>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}"
      },
      {
        "timestamp": "2025-06-11 22:54:15",
        "content": "2025-06-11 22:54:15\n Артём -> 2071074234:\nЧестный знак 2-й этап\nЗп от 300\n\nнемного про опыт и сразу даёт задачу на рефакторинг\n\nОтрефакторить и исправить ошибки\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [harData, setHarData] = useState({\n    log: {\n      version: \"1.2\",\n      creator: { name: \"React HAR Editor\", version: \"1.0\" },\n      entries: [\n        {\n          request: { url: \"https://example.com\", meth...",
        "full_content": "2025-06-11 22:54:15\n Артём -> 2071074234:\nЧестный знак 2-й этап\nЗп от 300\n\nнемного про опыт и сразу даёт задачу на рефакторинг\n\nОтрефакторить и исправить ошибки\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [harData, setHarData] = useState({\n    log: {\n      version: \"1.2\",\n      creator: { name: \"React HAR Editor\", version: \"1.0\" },\n      entries: [\n        {\n          request: { url: \"https://example.com\", method: \"GET\" },\n          response: { status: 200, statusText: \"OK\" },\n        },\n      ],\n    },\n  });\n\n  const [error, setError] = useState(null);\n  const [value, setValue] = useState(\"\");\n  const saveTimeout = useRef(null);\n\n  const addNewEntry = useCallback(() => {}, []);\n\n  const handleInputChange = (index, field, value) => {\n    harData.log.entries[index].request[field] = value;\n\n    setHarData(value);\n  };\n\n  const downloadHarFile = () => {\n    const blob = new Blob([JSON.stringify(harData, null, 2)], {\n      type: \"application/json\",\n    });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"edited.har\";\n    link.click();\n  };\n\n  useEffect(() => {\n    if (saveTimeout.current) {\n      clearTimeout(saveTimeout.current);\n    }\n\n    saveTimeout.current = window.setTimeout(() => {\n      console.log(\"Autosave triggered\");\n    }, 1000);\n  }, []);\n\n  return (\n    <div style={{ padding: \"20px\", maxWidth: \"800px\", margin: \"0 auto\" }}>\n      <h1>HAR File Editor</h1>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n\n      <h2>Entries</h2>\n      <ul style={{ maxHeight: \"300px\", overflowY: \"scroll\", padding: \"0\" }}>\n        {harData.log.entries.map((entry) => (\n          <li\n            style={{\n              marginBottom: \"15px\",\n              padding: \"10px\",\n              border: \"1px solid #ddd\",\n              borderRadius: \"5px\",\n              listStyle: \"none\",\n            }}\n          >\n            <label>\n              URL:\n              <input\n                type=\"text\"\n                value={entry.request.url || \"\"}\n                onChange={(e) =>\n                  handleInputChange(index, \"url\", e.target.value)\n                }\n                style={{\n                  width: \"100%\",\n                  padding: \"5px\",\n                  marginBottom: \"10px\",\n                  border: \"1px solid #ccc\",\n                }}\n              />\n            </label>\n            <label>\n              Method:\n              <select\n                value={entry.request.method || \"GET\"}\n                onChange={(e) =>\n                  handleInputChange(index, \"method\", e.target.value)\n                }\n                style={{\n                  width: \"100%\",\n                  padding: \"5px\",\n                  marginBottom: \"10px\",\n                  border: \"1px solid #ccc\",\n                }}\n              >\n                <option value=\"GET\">GET</option>\n                <option value=\"POST\">POST</option>\n                <option value=\"PUT\">PUT</option>\n                <option value=\"DELETE\">DELETE</option>\n              </select>\n            </label>\n          </li>\n        ))}\n      </ul>\n      <button\n        onClick={addNewEntry}\n        style={{\n          marginTop: \"10px\",\n          padding: \"10px 15px\",\n          backgroundColor: \"green\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"5px\",\n          cursor: \"pointer\",\n        }}\n      >\n        Add New Entry\n      </button>\n      <button\n        onClick={downloadHarFile}\n        style={{\n          marginTop: \"10px\",\n          marginLeft: \"10px\",\n          padding: \"10px 15px\",\n          backgroundColor: \"blue\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"5px\",\n          cursor: \"pointer\",\n        }}\n      >\n        Download HAR\n      </button>\n    </div>\n  );\n}"
      },
      {
        "timestamp": "2025-06-01 22:48:47",
        "content": "2025-06-01 22:48:47\n Артём -> 2071074234:\nЧестный знак\nзп: 300\nРассказ про себя и далее сразу к задаче\nЕсть небольшое приложение, исправить ошибки + отрефакторить\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [harData, setHarData] = useState({\n    log: {\n      version: \"1.2\",\n      creator: { name: \"React HAR Editor\", version: \"1.0\" },\n      entries: [\n        {\n          request: { url: \"https://example.com\", me...",
        "full_content": "2025-06-01 22:48:47\n Артём -> 2071074234:\nЧестный знак\nзп: 300\nРассказ про себя и далее сразу к задаче\nЕсть небольшое приложение, исправить ошибки + отрефакторить\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [harData, setHarData] = useState({\n    log: {\n      version: \"1.2\",\n      creator: { name: \"React HAR Editor\", version: \"1.0\" },\n      entries: [\n        {\n          request: { url: \"https://example.com\", method: \"GET\" },\n          response: { status: 200, statusText: \"OK\" },\n        },\n      ],\n    },\n  });\n\n  const [error, setError] = useState(null);\n  const [value, setValue] = useState(\"\");\n  const saveTimeout = useRef(null);\n\n  const addNewEntry = useCallback(() => {}, []);\n\n  const handleInputChange = (index, field, value) => {\n    harData.log.entries[index].request[field] = value;\n\n    setHarData(value);\n  };\n\n  const downloadHarFile = () => {\n    const blob = new Blob([JSON.stringify(harData, null, 2)], {\n      type: \"application/json\",\n    });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"edited.har\";\n    link.click();\n  };\n\n  useEffect(() => {\n    if (saveTimeout.current) {\n      clearTimeout(saveTimeout.current);\n    }\n\n    saveTimeout.current = window.setTimeout(() => {\n      console.log(\"Autosave triggered\");\n    }, 1000);\n  }, []);\n\n  return (\n    <div style={{ padding: \"20px\", maxWidth: \"800px\", margin: \"0 auto\" }}>\n      <h1>HAR File Editor</h1>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n\n      <h2>Entries</h2>\n      <ul style={{ maxHeight: \"300px\", overflowY: \"scroll\", padding: \"0\" }}>\n        {harData.log.entries.map((entry) => (\n          <li\n            style={{\n              marginBottom: \"15px\",\n              padding: \"10px\",\n              border: \"1px solid #ddd\",\n              borderRadius: \"5px\",\n              listStyle: \"none\",\n            }}\n          >\n            <label>\n              URL:\n              <input\n                type=\"text\"\n                value={entry.request.url || \"\"}\n                onChange={(e) =>\n                  handleInputChange(index, \"url\", e.target.value)\n                }\n                style={{\n                  width: \"100%\",\n                  padding: \"5px\",\n                  marginBottom: \"10px\",\n                  border: \"1px solid #ccc\",\n                }}\n              />\n            </label>\n            <label>\n              Method:\n              <select\n                value={entry.request.method || \"GET\"}\n                onChange={(e) =>\n                  handleInputChange(index, \"method\", e.target.value)\n                }\n                style={{\n                  width: \"100%\",\n                  padding: \"5px\",\n                  marginBottom: \"10px\",\n                  border: \"1px solid #ccc\",\n                }}\n              >\n                <option value=\"GET\">GET</option>\n                <option value=\"POST\">POST</option>\n                <option value=\"PUT\">PUT</option>\n                <option value=\"DELETE\">DELETE</option>\n              </select>\n            </label>\n          </li>\n        ))}\n      </ul>\n      <button\n        onClick={addNewEntry}\n        style={{\n          marginTop: \"10px\",\n          padding: \"10px 15px\",\n          backgroundColor: \"green\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"5px\",\n          cursor: \"pointer\",\n        }}\n      >\n        Add New Entry\n      </button>\n      <button\n        onClick={downloadHarFile}\n        style={{\n          marginTop: \"10px\",\n          marginLeft: \"10px\",\n          padding: \"10px 15px\",\n          backgroundColor: \"blue\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"5px\",\n          cursor: \"pointer\",\n        }}\n      >\n        Download HAR\n      </button>\n    </div>\n  );\n}"
      }
    ]
  },
  {
    "company": "Cosysoft",
    "count": 3,
    "records": [
      {
        "timestamp": "2024-06-07 10:12:36",
        "content": "2024-06-07 10:12:36\n dm . -> 2071074234:\n- CosySoft\n- https://hh.ru/vacancy/94831324\n- Зп: от 200\n- Задачи:\n1) Написать type If\n2) Написать свой type MyReturnType\n3) Написать функцию каррирования sum(a)(b)\n4) Написать класс или конструктор калькулятор с методами sum, sub, result\n5) Сделать рефакторинг компоненты: учесть семантику и доп. ререндеры\n- Вопросы:\n1)  reconciliation\n2) хуки реакт\n3) паттерны из ООП\n4) weakmap, weakset\n5) что такое рекурсия\n6) shadow dom\n7) критический путь рендеринга\n8...",
        "full_content": "2024-06-07 10:12:36\n dm . -> 2071074234:\n- CosySoft\n- https://hh.ru/vacancy/94831324\n- Зп: от 200\n- Задачи:\n1) Написать type If\n2) Написать свой type MyReturnType\n3) Написать функцию каррирования sum(a)(b)\n4) Написать класс или конструктор калькулятор с методами sum, sub, result\n5) Сделать рефакторинг компоненты: учесть семантику и доп. ререндеры\n- Вопросы:\n1)  reconciliation\n2) хуки реакт\n3) паттерны из ООП\n4) weakmap, weakset\n5) что такое рекурсия\n6) shadow dom\n7) критический путь рендеринга\n8) event loop\n9) http, sse, websocket\n10) graphQL\n11) webpack, nginx, docker\n12) git rebase\n13) типы тестирования, инструменты\n- Успех собеса: ?"
      },
      {
        "timestamp": "2024-06-03 18:55:50",
        "content": "2024-06-03 18:55:50\n Andrei Chirkov -> 2071074234:\nCosySoft, Тех. собес\n- Вакансия: https://spb.hh.ru/vacancy/94831324\n- ЗП: 250+\n- Успех собеса: ?\nЗадачи отсюда:\nhttps://codesandbox.io/p/devbox/refactor-forked-vtq2d8?file=%2Fsrc%2FNumbers%2Findex.tsx%3A21%2C18&workspaceId=7937235b-aab2-4b34-9ce8-a75e52eb5e12\n\nhttps://codesandbox.io/p/sandbox/interview-forked-5mvjzn?file=%2Fsrc%2FMyPick.ts\n\n- Видео: https://www.youtube.com/watch?v=iM8V4oArgs8",
        "full_content": "2024-06-03 18:55:50\n Andrei Chirkov -> 2071074234:\nCosySoft, Тех. собес\n- Вакансия: https://spb.hh.ru/vacancy/94831324\n- ЗП: 250+\n- Успех собеса: ?\nЗадачи отсюда:\nhttps://codesandbox.io/p/devbox/refactor-forked-vtq2d8?file=%2Fsrc%2FNumbers%2Findex.tsx%3A21%2C18&workspaceId=7937235b-aab2-4b34-9ce8-a75e52eb5e12\n\nhttps://codesandbox.io/p/sandbox/interview-forked-5mvjzn?file=%2Fsrc%2FMyPick.ts\n\n- Видео: https://www.youtube.com/watch?v=iM8V4oArgs8"
      },
      {
        "timestamp": "2024-05-29 13:49:04",
        "content": "2024-05-29 13:49:04\n dm . -> 2071074234:\nНазвание компании: CosySoft, \"техскриннинговые вопросы\"\n- Вакансия https://hh.ru/vacancy/94831324\n- ЗП: от 200\nВопросы: \n1) useEffect, \n2) триггерится ли useEffect от изменения useRef\n3) type guard\n4) event loop\n5) css in js.\n- Успех: ✅, далее полноценный техсобес.",
        "full_content": "2024-05-29 13:49:04\n dm . -> 2071074234:\nНазвание компании: CosySoft, \"техскриннинговые вопросы\"\n- Вакансия https://hh.ru/vacancy/94831324\n- ЗП: от 200\nВопросы: \n1) useEffect, \n2) триггерится ли useEffect от изменения useRef\n3) type guard\n4) event loop\n5) css in js.\n- Успех: ✅, далее полноценный техсобес."
      }
    ]
  },
  {
    "company": "Цб Рф",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-04-10 16:22:05",
        "content": "2025-04-10 16:22:05\n Max -> 2071074234:\nИЦ Ай-Теко(на проект сбера)\nЗП от 170 т.р.\nВакансия  https://serpuhov.hh.ru/vacancy/117408550?hhtmFrom=vacancy_restore\nВопросы: \n- про опыт\n- как задача доходила до тебя\n- расскажи интересную задачу\nТеории не было\nЗадача 1:\nconsole.log(\"script start\");\n\nsetTimeout(() => {\n  console.log(\"setTimeout\");\n}, 0);\n\nPromise.resolve()\n  .then(() => {\n    console.log(1);\n  })\n  .then(() => {\n    console.log(2);\n  })\n  .then(() => {\n    console.log(3);\n  })\n\nconsole....",
        "full_content": "2025-04-10 16:22:05\n Max -> 2071074234:\nИЦ Ай-Теко(на проект сбера)\nЗП от 170 т.р.\nВакансия  https://serpuhov.hh.ru/vacancy/117408550?hhtmFrom=vacancy_restore\nВопросы: \n- про опыт\n- как задача доходила до тебя\n- расскажи интересную задачу\nТеории не было\nЗадача 1:\nconsole.log(\"script start\");\n\nsetTimeout(() => {\n  console.log(\"setTimeout\");\n}, 0);\n\nPromise.resolve()\n  .then(() => {\n    console.log(1);\n  })\n  .then(() => {\n    console.log(2);\n  })\n  .then(() => {\n    console.log(3);\n  })\n\nconsole.log(\"script end\");\nОтвет:\nscript start  \nscript end  \n1  \n2  \n3  \nsetTimeout \nЗадача 2:\nconsole.log(\"script start\");\n\nPromise.resolve()\n  .then(() => {\n    console.log(1);\n    throw new Error(\"err\");\n  })\n  .then(() => {\n    console.log(2); \n  })\n  .catch((err) => {\n    console.log(err); \n  })\n  .then(() => {\n    console.log(3); \n  });\n\nconsole.log(\"script end\");\nОтвет:\nscript start\nscript end\n1\nError: err\n3\n3 Задача:\nhttps://github.com/dgrishkin/exchange-rates/tree/master \nСкачать репозиторий, и в своей ide реализовать запрос и отображение данных в виде таблицы(просят расшарить весь экран)\nУспел сделать только запрос\nОтвет:\nimport React, { useState, useEffect, FC } from 'react';\nimport styles from './styles.module.css';\n\n// Определение типов для данных о валютах\ninterface Currency {\n  ID: string;\n  NumCode: string;\n  CharCode: string;\n  Nominal: number;\n  Name: string;\n  Value: number;\n  Previous: number;\n}\n\n// Тип для всего ответа от API\ninterface CurrencyResponse {\n  Date: string;\n  PreviousDate: string;\n  PreviousURL: string;\n  Timestamp: string;\n  Valute: {\n    [key: string]: Currency;\n  };\n}\n\nexport const RootPage: FC = () => {\n  // Состояния для хранения данных, индикации загрузки и ошибок\n  const [currencies, setCurrencies] = useState<Currency[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Загрузка данных при монтировании компонента\n  useEffect(() => {\n    const fetchCurrencies = async () => {\n      try {\n        const response = await fetch('https://www.cbr-xml-daily.ru/daily_json.js');\n        const data: CurrencyResponse = await response.json();\n        \n        // Преобразование объекта валют в массив\n        const currencyValues = Object.values(data.Valute);\n        setCurrencies(currencyValues);\n        setLoading(false);\n      } catch (err) {\n        setError('Ошибка при загрузке данных');\n        setLoading(false);\n        console.error('Ошибка при загрузке данных:', err);\n      }\n    };\n\n    fetchCurrencies();\n  }, []);\n\n  return (\n    <div className={styles.container}>\n      <h1>Разработать таблицу отображающую курсы валют</h1>\n      <p>Используя сервис ЦБ РФ <a href=\"https://www.cbr-xml-daily.ru/daily_json.js\" target=\"_blank\">https://www.cbr-xml-daily.ru/daily_json.js</a> вывести таблицу курсов валют:</p>\n      <ul>\n        <li>Цифровой код валюты <b>(NumCode)</b></li>\n        <li>Символьный код валюты <b>(CharCode)</b></li>\n        <li>Наименование валюты <b>(Name)</b></li>\n        <li>Курс <b>(Value)</b></li>\n      </ul>\n      \n      {loading ? (\n        <p>Загрузка данных...</p>\n      ) : error ? (\n        <p className={styles.error}>{error}</p>\n      ) : (\n        <table className={styles.currencyTable}>\n          <thead>\n            <tr>\n              <th>Цифровой код (NumCode)</th>\n              <th>Символьный код (CharCode)</th>\n              <th>Наименование валюты (Name)</th>\n              <th>Курс (Value)</th>\n            </tr>\n          </thead>\n          <tbody>\n            {currencies.map((currency) => (\n              <tr key={currency.ID}>\n                <td>{currency.NumCode}</td>\n                <td>{currency.CharCode}</td>\n                <td>{currency.Name}</td>\n                <td>{currency.Value.toFixed(4)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default RootPage;"
      },
      {
        "timestamp": "2024-11-20 14:15:30",
        "content": "2024-11-20 14:15:30\n Егор -> 2071074234:\nКомпания: ЦБ РФ\nВакансия: https://hh.ru/vacancy/81901106\nЗП: от 200к\n\nВопросы:\n- Расскажи про опыт\n- Как происходила оценка задача\n- Процессы в команде\n- state\n- key\n- хуки и расскажи про них\n- как скопировать объект\n- псевдоклассы в css\n- redux flux\n- JWT\n- ssr рендеринг\n- map, filter, reduce, forEach\n- promise\n- cors, хедеры\n- xml, json\n\nfunction getInitials(fullName) {\n  const words = fullName.split(' ');\n  const initials = words.map(word => word.charA...",
        "full_content": "2024-11-20 14:15:30\n Егор -> 2071074234:\nКомпания: ЦБ РФ\nВакансия: https://hh.ru/vacancy/81901106\nЗП: от 200к\n\nВопросы:\n- Расскажи про опыт\n- Как происходила оценка задача\n- Процессы в команде\n- state\n- key\n- хуки и расскажи про них\n- как скопировать объект\n- псевдоклассы в css\n- redux flux\n- JWT\n- ssr рендеринг\n- map, filter, reduce, forEach\n- promise\n- cors, хедеры\n- xml, json\n\nfunction getInitials(fullName) {\n  const words = fullName.split(' ');\n  const initials = words.map(word => word.charAt(0).toUpperCase() + '.');\n  return initials.join('');\n}\nconsole.log(getInitials('Петров Игорь')); // П.И.\nconsole.log(getInitials('Иванов Иван Иванович')); // И.И.И.\n\nfunction toCamelCase(str) {\n  // Заменяем все подчеркивания на дефисы\n  str = str.replace(/_/g, '-');\n\n  // Разделяем строку на части по дефисам\n  const parts = str.split('-');\n\n  // Оставляем первую часть в исходном регистре\n  const firstPart = parts[0];\n\n  // Преобразуем каждую последующую часть, сделав первую букву заглавной и остальные строчными\n  const restParts = parts.slice(1).map(part => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase());\n\n  // Объединяем все части в одну строку\n  return firstPart + restParts.join('');\n}\n\n// Примеры использования\nconsole.log(toCamelCase('Min-Size-Circle')); // MinSizeCircle\nconsole.log(toCamelCase('min_size-circle')); // minSizeCircle\nconsole.log(toCamelCase('Min-size-Circle')); // MinSizeCircle\n\njs\nconst getFirstName = (name: string): string => {\n  const firstName = name.trim();\n  console.log('getFirstName');\n  return firstName;\n};\n\nconsole.log(getFirstName(' Ivan')); // Выведет getFirstName, затем undefined\n\nЗадача на реакт. Там просто надо указать что неправильно: \n1. Нужно создать state для хранение.\n2. Использовать setState"
      }
    ]
  },
  {
    "company": "Петрович-Тех",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-04-03 14:24:51",
        "content": "2025-04-03 14:24:51\n Матвей Захаров -> 2071074234:\nКомпания: Петрович-тех\nВакансия: https://spb.hh.ru/vacancy/118876730?hhtmFrom=resume\n\nВопросы: \n- виды переменных в js\n- call, bind, apply\n- event loop\n- виды функций в js\n- как работать с асинхронным кодом (Promise)\n- Дженерики\n- local storage, session storage\n- оптимизация в react\n- контекст в react\n\nИ задача на отрисовку данных:\n\n`\n './App.css';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\n\nconst API = 'https://json...",
        "full_content": "2025-04-03 14:24:51\n Матвей Захаров -> 2071074234:\nКомпания: Петрович-тех\nВакансия: https://spb.hh.ru/vacancy/118876730?hhtmFrom=resume\n\nВопросы: \n- виды переменных в js\n- call, bind, apply\n- event loop\n- виды функций в js\n- как работать с асинхронным кодом (Promise)\n- Дженерики\n- local storage, session storage\n- оптимизация в react\n- контекст в react\n\nИ задача на отрисовку данных:\n\n`\n './App.css';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\n\nconst API = 'https://jsonplaceholder.typicode.com/users/1';\n\nconst UserProfile = () => {\n  const [user, setUsers] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    setIsLoading(true);\n    axios\n      .get(API)\n      .then((response) => {\n        setUsers(response.data);\n      })\n      .catch((err) => {\n        setError(err);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  if (isLoading) return <h1>Loading.....</h1>;\n  if (error) return <h1>{error}</h1>;\n\n  return (\n    <div>\n      <h1>Data</h1>\n      <p>User : {user?.name}</p>\n      <p>Email : {user?.email}</p>\n      <p>Adress: {user?.address}</p>\n    </div>\n  );\n};\n\nexport default UserProfile;"
      },
      {
        "timestamp": "2024-10-25 14:29:19",
        "content": "2024-10-25 14:29:19\n Artyom Sozykin -> 2071074234:\nКомпания: Петрович-тех\nЗП: 250к\nВакансия: hr сама написала\nЗадач не было\n\nВопросы:\n 1. Чем отличается 17 React от 18?\n 2. Как реализовать батчинг в 18 react\n 3. Как бы ты реализовал страницу с фильтрами, которую можно передать ссылкой другому человеку и у него будут сохранятся твои фильтры и при перезагрузки, также будут сохранятся?\n 4. Как была реализована авторизация на refresh и access token?\n 5. Как обновляется access token?\n 6. Что такое To...",
        "full_content": "2024-10-25 14:29:19\n Artyom Sozykin -> 2071074234:\nКомпания: Петрович-тех\nЗП: 250к\nВакансия: hr сама написала\nЗадач не было\n\nВопросы:\n 1. Чем отличается 17 React от 18?\n 2. Как реализовать батчинг в 18 react\n 3. Как бы ты реализовал страницу с фильтрами, которую можно передать ссылкой другому человеку и у него будут сохранятся твои фильтры и при перезагрузки, также будут сохранятся?\n 4. Как была реализована авторизация на refresh и access token?\n 5. Как обновляется access token?\n 6. Что такое Token revocation \n 7. Что будет если у тебя отправляются 6 запросов одновременно и например в 5 из них устаревает access token (Вопрос про interceptor) \n 8. Как обновить контент в соседней открытой вкладке, какими способами это можно сделать, например, есть корзина товаров и нужно чтобы в первой вкладке пополнить корзину, а во второй вкладке это изменение отобразилось? (postMessage)\n 9. Как осуществлять верстку pixel perfect\n 10. Чем отличаются flex от grid\n 11. Как во flex сделать, так чтобы блоки не съезжали на новую строку (nowrap)\n 12. Что делает reset в css?\n 13. Что делает normalize в css?\n 14. Что такое will-change?\n 15. Как сделать подключение к websocket по протоколу ws, без secure (с помощью new WebSocket)"
      }
    ]
  },
  {
    "company": "Kotelov",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-06-30 11:44:36",
        "content": "2024-06-30 11:44:36\n Alehandro¯\\_(ツ)_/¯ -> 2071074234:\n- KOTELOV\n- Вакансия: https://rostov.hh.ru/vacancy/100703339?from=share_android\n- 200-220к\n- Вопросов не было, была задача которая была ранее написать хук useQuery",
        "full_content": "2024-06-30 11:44:36\n Alehandro¯\\_(ツ)_/¯ -> 2071074234:\n- KOTELOV\n- Вакансия: https://rostov.hh.ru/vacancy/100703339?from=share_android\n- 200-220к\n- Вопросов не было, была задача которая была ранее написать хук useQuery"
      },
      {
        "timestamp": "2024-01-17 14:08:35",
        "content": "2024-01-17 14:08:35\n Mr 🐈 -> 2071074234:\nСобес в компанию Kotelov #kotelov на мидл+ 200к\nНорм компания, норм интервьюер, без душноты и токсичности\nУспех: ❌ (не смог написать хук)\n\nВопросы: Написать Кастомный-ХУК для получения данных и обработки их + затипизировать все Тайпскриптом\n\n\nРешение:\n\n/ / . . .\n\ninterface QueryResult<T> {\ndata: T | null; loading: boolean;\nerror: Error | null;\n}\n\nconst useQuery = <>(options: {url: string; method?: string 3): QueryResult<>\n=> {\nconst Idata, setDatal = useS...",
        "full_content": "2024-01-17 14:08:35\n Mr 🐈 -> 2071074234:\nСобес в компанию Kotelov #kotelov на мидл+ 200к\nНорм компания, норм интервьюер, без душноты и токсичности\nУспех: ❌ (не смог написать хук)\n\nВопросы: Написать Кастомный-ХУК для получения данных и обработки их + затипизировать все Тайпскриптом\n\n\nРешение:\n\n/ / . . .\n\ninterface QueryResult<T> {\ndata: T | null; loading: boolean;\nerror: Error | null;\n}\n\nconst useQuery = <>(options: {url: string; method?: string 3): QueryResult<>\n=> {\nconst Idata, setDatal = useState<T | null>(null);\n\nconst [loading, setLoading]\n= useState (true);\n\nconst lerror, setError] = useState<Error | null>(null);\n\nuseEffect (() => {\nconst fetchData = async () => {\ntry {\nconst response = await fetch(options.url, { method: options.method 3);\nconst result = await response.json();\nsetData (result);}\n\ncatch (error) {\nsetError(error);\n｝ finally {\nsetLoading (false);\n}\n\nfetchData();},  [options.url, options.method]);\nreturn { data, loading, error };\n\n/ / . . ."
      }
    ]
  },
  {
    "company": "Платформа",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-03-12 20:03:31",
        "content": "2025-03-12 20:03:31\n Лёша -> 2071074234:\nКомпания: Платформа\nВакансия: https://rostov.hh.ru/vacancy/115356070\nЗп: просил 330 net\nГибрид 1 раз в несколько недель\n\nВопросы:\nОчень много вопросов по опыту и резюме.\nКак были устроены процессы.\nБольше вопросов не было, сразу перешли к лайвкодингу.\n\nЛайвкодинг:\nНаписать свою форму регистрации с инпутами:\nинпут email\nинпут password\nинпут password again\n\nнаписать проверку на совподение проверок.\n\nРешение:\nimport React, { useState } from 'react';\n\nexport ...",
        "full_content": "2025-03-12 20:03:31\n Лёша -> 2071074234:\nКомпания: Платформа\nВакансия: https://rostov.hh.ru/vacancy/115356070\nЗп: просил 330 net\nГибрид 1 раз в несколько недель\n\nВопросы:\nОчень много вопросов по опыту и резюме.\nКак были устроены процессы.\nБольше вопросов не было, сразу перешли к лайвкодингу.\n\nЛайвкодинг:\nНаписать свою форму регистрации с инпутами:\nинпут email\nинпут password\nинпут password again\n\nнаписать проверку на совподение проверок.\n\nРешение:\nimport React, { useState } from 'react';\n\nexport function App() {\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState(null);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (password !== confirmPassword) {\n      setError('Пароли не совпадают');\n    } else {\n      // Отправка данных на сервер\n      console.log('Данные отправлены:', { username, email, password });\n      setError(null);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Регистрация</h2>\n      <label>\n        Имя пользователя:\n        <input type=\"text\" value={username} onChange={(event) => setUsername(event.target.value)} />\n      </label>\n      <br />\n      <label>\n        Email:\n        <input type=\"email\" value={email} onChange={(event) => setEmail(event.target.value)} />\n      </label>\n      <br />\n      <label>\n        Пароль:\n        <input type=\"password\" value={password} onChange={(event) => setPassword(event.target.value)} />\n      </label>\n      <br />\n      <label>\n        Подтверждение пароля:\n        <input type=\"password\" value={confirmPassword} onChange={(event) => setConfirmPassword(event.target.value)} />\n      </label>\n      <br />\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n      <button type=\"submit\">Зарегистрироваться</button>\n    </form>\n  );\n}"
      },
      {
        "timestamp": "2024-05-17 08:05:09",
        "content": "2024-05-17 08:05:09\n Roman -> 2071074234:\nНазвание компании: #Иннотех стрим платформа Baas\nвакансия: откликался на https://nn.hh.ru/vacancy/98236457, потом мне написал hr\nважность: хочется пройти собес, важно\nЗП: хочу от 300к на руки, не помню обсуждали с hr зп или нет\nУспеx: ?\n\n// console.clear(); \n \n// 1 ---------------------------------------------------- \n// let value = 8; \n \n// function showValue() { \n//   console.log(`showValue ${value}`); \n// } \n// function wrapper() { \n//   console.log(`...",
        "full_content": "2024-05-17 08:05:09\n Roman -> 2071074234:\nНазвание компании: #Иннотех стрим платформа Baas\nвакансия: откликался на https://nn.hh.ru/vacancy/98236457, потом мне написал hr\nважность: хочется пройти собес, важно\nЗП: хочу от 300к на руки, не помню обсуждали с hr зп или нет\nУспеx: ?\n\n// console.clear(); \n \n// 1 ---------------------------------------------------- \n// let value = 8; \n \n// function showValue() { \n//   console.log(`showValue ${value}`); \n// } \n// function wrapper() { \n//   console.log(`wrapper ${value}`); \n//   var value = 9; \n//   showValue(); \n// } \n \n// Что будет выведено в консоль и почему? \n// wrapper(); \n \n// 2 ----------------------------------------------------- \n// for (var i = 0; i < 3; i++) { \n//   setTimeout(() => console.log(i), 1); \n// } \n \n// for (let i = 0; i < 3; i++) { \n//   setTimeout(() => console.log(i), 1); \n// } \n \n// // Что будет выведено в консоль и почему? \n \n// 3 ----------------------------------------------------- \n// const result = [ \n//   [0, 1], \n//   [2, 3], \n// ].reduce( \n//   (acc, cur) => { \n//     return acc.concat(cur); \n//   }, \n//   [1, 2] \n// ); \n \n// Что будет выведено в консоль? \n// console.log(result); \n \n// 4 ------------------------------------------------------ \n// const firstPromise = new Promise((res, rej) => { \n//   setTimeout(res, 500, \"one\"); \n// }); \n \n// const secondPromise = new Promise((res, rej) => { \n//   setTimeout(res, 100, \"two\"); \n// }); \n \n// Что будет выведено в консоль? \n// Promise.race([firstPromise, secondPromise]).then((res) => console.log(res)); \n \n// 5 ------------------------------------------------------ \n// const set = new Set([1, 1, 2, 3, 3, 3, 4, 5]); \n \n// Что будет выведено в консоль? \n// console.log(set); \n \n// 6 ----------------------------------------------------- \n// async function getData() { \n//   return await Promise.resolve(\"Я сделал это!\"); \n// } \n \n// const data = getData(); \n// Что будет выведено в консоль? \n// console.log(data); \n \n// 7 ----------------------------------------------------- \n// const myPromise = () => Promise.resolve(\"I have resolved!\"); \n \n// function firstFunction() { \n//   myPromise().then((res) => console.log(\"first promise\", res)); \n//   console.log(\"first\"); \n// } \n \n// async function secondFunction() { \n//   console.log(\"second promise\", await myPromise()); \n//   console.log(\"second\"); \n// } \n \n// Что будет выведено в консоль? \n// firstFunction(); \n// secondFunction(); \n \n// 8 ----------------------------------------------------- \n// const value = { number: 10 }; \n// let count = 0; \n \n// const multiply = (x = { ...value }) => { \n//   count += 1; \n//   console.log(count, (x.number *= 2)); \n// }; \n \n// Какой будет результат после вызова функции? \n// multiply(); \n// multiply(); \n// multiply(value); \n// multiply(value); \n \n// 9 ----------------------------------------------------- \n// Напишите функцию, которая принимает строку и возвращает ее в обратном порядке \n \n// console.log(reverseString(\"hello\")); // 'olleh' \n// console.log(reverseString(\"world\")); // 'dlrow' \n \n// 10 ----------------------------------------------------- \n// Напиши функцию для определения количества вхождений каждого элемента в массив \n \n// console.log(getOccurCount([\"a\", \"b\", \"c\", \"b\", \"b\", \"a\"])); \n// { a: 2, b: 3, c: 1 } \n \n// 11 ----------------------------------------------------- \n// Переместить все 0 элементы в конец, сохраняя относительный порядок ненулевых элементов. \n// Нельзя копировать массив \n \n// console.log(moveZeroes([0, 1, 0, 3, 12])); //  [1,3,12,0,0]"
      }
    ]
  },
  {
    "company": "Аэроклуб",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-06-25 16:34:28",
        "content": "2025-06-25 16:34:28\n Роман -> 2071074234:\nКомпания: Аэроклуб \nВакансия: https://hh.ru/vacancy/121779849?hhtmFrom=employer_vacancies\nВопросы: \nОпыт:\n-Расскажи о своем опыте\n-Сколько человек было в команде\n-Как происходило взаимодействие с бэком\n-Проводили ли код-ревью и как оно было устроено\nWeb:\n-Что происходит в браузере, когда вводим адрес сайта?\n-Какой этап отрисовки тяжелее Reflow или Repaint?\n-Есть ли инструменты, которые позволяют избежать Reflow?(свойства transform, opacity, will-change)?...",
        "full_content": "2025-06-25 16:34:28\n Роман -> 2071074234:\nКомпания: Аэроклуб \nВакансия: https://hh.ru/vacancy/121779849?hhtmFrom=employer_vacancies\nВопросы: \nОпыт:\n-Расскажи о своем опыте\n-Сколько человек было в команде\n-Как происходило взаимодействие с бэком\n-Проводили ли код-ревью и как оно было устроено\nWeb:\n-Что происходит в браузере, когда вводим адрес сайта?\n-Какой этап отрисовки тяжелее Reflow или Repaint?\n-Есть ли инструменты, которые позволяют избежать Reflow?(свойства transform, opacity, will-change)?\n-Как управлять процессом загрузки скриптов(async, defer)?\n-Какие протоколы взаимодействия клиент-серверных знаешь?\n-Чем отличаются сокеты от HTTP/HTTPS ?\n-В чем отличие методов GET/POST, можем ли получить данные постом/передать body в get?\n-Какие браузерные хранилища знаешь и чем они отличаются?\nCSS: \n-Много ли задач было по верстке, много ли верстать приходилось?\n-Специфичность селекторов\nJS: \n-Что такое eventloop? Как работает? Для чего нужен?\n-Какие методы промисов ты знаешь? Назови их отличия\nReact: \n-Расскажи про принцип Reconcilation, что это такое. Когда вызывается render()(При изменении state, props ...)?\n-Как избежать лишних ререндеров при изменении пропсов?\n-Какие параметры принимает React.memo(). Рассказать про второй параметр.\n-Рассказать про батчинг.\n-Рассказать про оптимизацию приложения, какие реакт предоставляет инструменты для оптимизации.\n-Знаешь ли про ReactCompiler(В React 19 для автоматической мемоизации)\n-Инструменты для оптимизации сборки.\n\n\nЗадачи: \n//Напиши селектор, чтобы выбрать последний элемент, который будет внутри блока с классом menu и у него не будет атрибута [target=\"_blank\"]\n\n<div class=\"menu\">\n    <a href=\"home.html\">Home</a>\n    <a href=\"contact.html\">Contact</a>\n    <a href=\"profile.html\" target=\"_blank\">\n    Profile\n    </a>\n</div>;\n//Засчитал этот вариант: \n\n<style>\n    .menu > a:last-child:not[target= \"_blank\"] {...}\n</style>\n\n//Валидный вариант: \n\n<style>\n    .menu > a:not([target=\"_blank\"]):not(:has(~ a:not([target=\"_blank\"])))  {...}\n</style>\n//Порядок вывода в консоль\n\n\nconsole.log(1);\n\nsetTimeout(() => console.log(2));\n\nPromise.reject(3).catch(console.log);\n\nnew Promise(resolve => setTimeout(resolve)).then(() => console.log(4));\n\nPromise.resolve(5).then(console.log);\n\nconsole.log(6);\n\nsetTimeout(() => console.log(7),0);\n\n//1635247\n//Что выведет? Сопутствующий вопрос - Как остановить рекурсию? \nsetTimeout(() => console.log('setTimeout'), 0);\n\nfunction someFunc(number = 0) {\n    console.log(number);\n    return Promise.resolve(number + 1).then(someFunc);\n}\n\nsomeFunc();\n\n//Из-за бесконечной рекурсии промисов вывод 'setTimeout' не произойдет. Вывод: 0,1,2,3,4,5... Пока не закончится память\nfunction someFunc(number = 0) {\n    console.log(number);\n    if (number >= 5) return; // Остановка рекурсии\n    return Promise.resolve(number + 1).then(someFunc);\n}\n//Напиши функцию fetchAll, которая вернет массив ответов. Обрабатывать ошибки не нужно\n\nconst urls = [\n    'https://jsonplaceholder.typicode.com/posts/1',\n    'https://jsonplaceholder.typicode.com/posts/2',\n    'https://jsonplaceholder.typicode.com/posts/3'\n];\n\n//Валидный ответ:\nasync function fetchAll(urls) {\n    const response = await Promise.all(\n        urls.map(url => fetch(url).then(response => response.json())\n    );\n    return response;\n}\n\n//СОПУТСТВУЮЩИЙ ВОПРОС! В чем отличие предоставленного тобой ответа выше, от следующего: \nasync function fetchAll(urls) {\n    const results = []\n    urls.forEach(url => (\n        const result = await fetch(url);\n        results.push(result)\n    })\n    return results;\n}\n\n//Ответ: Отличие в оптимизации. Promise.all параллелит запросы, а здесь они будут выполняться поочередно.\n//Напиши тип IsArray, который будет проверять, является ли переданный тип массивом, и возвращает true или false.\ntype IsArray<T> = ...\ntype Test1 = IsArray<string>;      // false\ntype Test2 = IsArray<number[]>;    // true\n\n// Ответ: \ntype IsArray<T> = T extends Array<any> ? true : false;"
      },
      {
        "timestamp": "2024-11-02 05:20:49",
        "content": "2024-11-02 05:20:49\n Сергей -> 2071074234:\nАэроклуб\nЗП: 250к+\nВакансия: hr\nВопросы:\n- расскажи про себя, про твой опыт, стек, интересные задачи\n- эквивалент stopPropagination(pointer-events)\n- специфичность селекторов\n- Что появилось в ES6\n- Особенности стрелочных, let const var, промисов, области видимости, методы промисов\n- Батчинг\n- Virtual Dom, реконсилейшин, fiber\n- Расскажи про виртуализацию\n- Tree Shaking\n- Portal\n- Redux vs Context\n- Задачи \n\n// Реализовать fetchAll(urls). массив urls ст...",
        "full_content": "2024-11-02 05:20:49\n Сергей -> 2071074234:\nАэроклуб\nЗП: 250к+\nВакансия: hr\nВопросы:\n- расскажи про себя, про твой опыт, стек, интересные задачи\n- эквивалент stopPropagination(pointer-events)\n- специфичность селекторов\n- Что появилось в ES6\n- Особенности стрелочных, let const var, промисов, области видимости, методы промисов\n- Батчинг\n- Virtual Dom, реконсилейшин, fiber\n- Расскажи про виртуализацию\n- Tree Shaking\n- Portal\n- Redux vs Context\n- Задачи \n\n// Реализовать fetchAll(urls). массив urls строки, реализовать чтобы они в том же порядке вернули результат(можно через promise.all и циклом)\nconst requests = urls.map(url => fetch(url));\nconst responses = await Promise.all(requests);     \nconst data = await Promise.all(responses.map(response => response.json()));\nreturn data;\n\ndiv p span {color: red}\ndiv, p, span {color: red}\ndiv > p > span {color: red}\nв чем разница?\n\n\nimport React, { useState, useEffect } from 'react';\n\n// имитация запроса к серверу. просто получаем число асинхронно\n// Что можно улучшить/какой функционал добавить?(дебаунс)\n// нужно найти 5 ошибок\nconst fetchRandomNumber = () => Promise.resolve(Math.random());\n\nconst NumberAndScroll = () => {\n  const [number, setNumber] = useState();\n  const [scroll, setScroll] = useState();\n  \n  useEffect(async () => {\n     await setNumber(fetchRandomNumber)\n    \n    window.addEventListener('scroll', () => setScroll(window.scrollY));\n\n    return () => window.removeEventListener('scroll', () => setScroll(window.scrollY));\n  });\n  \n  return (\n    <div>\n      <div> Number: { number } </div>\n      <div> Scroll: { scroll } </div>\n    </div>  \n  )\n}"
      }
    ]
  },
  {
    "company": "EnjoyPro",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-05-22 14:15:17",
        "content": "2025-05-22 14:15:17\n Ivan Kulyaev -> 2071074234:\nenjoypro\nВакансия — https://hh.ru/vacancy/120643320?query=frontend+developer&hhtmFrom=vacancy_search_list\nЗП — 250 000 ₽\n\nВопросы\n\n- Много про опыт коммерческой разработки\n- Какие компоненты и фичи делал сам от и до\n- Как оптимизировать работу браузера (в т.ч. reflow/repaint)\n- Как работает Virtual DOM, reconciliation\n- Разница event.stopPropagation vs event.preventDefault\n- Что происходит при перерендере React-компонента\n- Как работает useMemo, u...",
        "full_content": "2025-05-22 14:15:17\n Ivan Kulyaev -> 2071074234:\nenjoypro\nВакансия — https://hh.ru/vacancy/120643320?query=frontend+developer&hhtmFrom=vacancy_search_list\nЗП — 250 000 ₽\n\nВопросы\n\n- Много про опыт коммерческой разработки\n- Какие компоненты и фичи делал сам от и до\n- Как оптимизировать работу браузера (в т.ч. reflow/repaint)\n- Как работает Virtual DOM, reconciliation\n- Разница event.stopPropagation vs event.preventDefault\n- Что происходит при перерендере React-компонента\n- Как работает useMemo, useCallback — примеры реальных кейсов\n- Когда useLayoutEffect опасен\n- Принципы SOLID, как соблюдаются в React (SRP, DIP, LSP)\n- Как устроен Event Loop, разница между micro/macro tasks\n- Как работают замыкания в JS, зачем нужны useRef и колбэки\n- Какие архитектурные подходы используешь (FSD, атомарный дизайн)\n- Как устроены формы и валидации (Formik, Zod, React Hook Form)\n- Как реализовать сохранение драфта формы с автосейвом\n- Как писал тесты на хуки и логику (Jest, RTL)\n- Проблемы с SSR и как дебажил\n- Что знаешь про Web Vitals, как следил за метриками\n- Чем отличаются == и === и почему это важно\n- Как работает this, где он теряется\n- Что делает Object.create(null)\n- Как бы сделал drag'n'drop без библиотек\n- Как рефакторишь легаси-компоненты\n- Как организовать фичи и слои в FSD-подходе\n- Как разбиваешь логику между slice и thunk\n- Что может пойти не так при deep clone объекта\n- Как бы реализовал очередь на отправку запросов\n\nЗадачи\n\n\n// ----- 1\n// console.log(0.1 + 0.2 === 0.3);\n\n// ----- 2\n// console.log(typeof NaN);\n\n// ----- 3\n// console.log([] + 1);\n// console.log([1] + 1);\n\n// ----- 4\n// for (var i = 0; i < 3; i++) {\n//   setTimeout(() => console.log(i), 0);\n// }\n\n// ----- 5\nfunction Person() {\n  this.age = 30;\n  return 42;\n}\n// const p = new Person();\n// console.log(typeof p);\n\n// ----- 6\nconst arr = [4, 5, 6];\narr[10] = 99;\n// console.log(arr.length);\n// console.log(arr);\n\n// ----- 7\nfunction foo() {\n  'use strict';\n  console.log(this);\n}\n// foo();\n\n// ----- 8\nconst obj = {\n  message: \"Hello\",\n  getMessage() {\n    return this.message;\n  },\n};\nconst get = obj.getMessage;\n// console.log(get());"
      },
      {
        "timestamp": "2024-06-28 14:43:30",
        "content": "2024-06-28 14:43:30\n 156271493 -> 2071074234:\n- Enjoypro \n- https://hh.ru/vacancy/100323713?hhtmFrom=employer_vacancies\n- зп: 180-250к\n\nЗадачи: \n\n1) \n\nfunction changeStuff(a, b) {\n a = a * 10\n b.item = 'changed'\n}\n\nlet num = 10\nlet obj1 = { item: 'unchanged' }\n\nchangeStuff(num, obj1)\n\nconsole.log(num)\nconsole.log(obj1.item)\n\n\n2)\n \nconst shape = {\n radius: 10,\n diameter() {\n  return this.radius * 2\n },\n perimeter: () => 2 * this.radius,\n}\n\nconsole.log(shape.diameter())\nconsole.log(shape.perimeter...",
        "full_content": "2024-06-28 14:43:30\n 156271493 -> 2071074234:\n- Enjoypro \n- https://hh.ru/vacancy/100323713?hhtmFrom=employer_vacancies\n- зп: 180-250к\n\nЗадачи: \n\n1) \n\nfunction changeStuff(a, b) {\n a = a * 10\n b.item = 'changed'\n}\n\nlet num = 10\nlet obj1 = { item: 'unchanged' }\n\nchangeStuff(num, obj1)\n\nconsole.log(num)\nconsole.log(obj1.item)\n\n\n2)\n \nconst shape = {\n radius: 10,\n diameter() {\n  return this.radius * 2\n },\n perimeter: () => 2 * this.radius,\n}\n\nconsole.log(shape.diameter())\nconsole.log(shape.perimeter())\n\n\n3) \n\nfunction* generator(i) {\n yield i\n yield i * 2\n}\n\nconst gen = generator(10)\nconsole.log(gen.next().value)\nconsole.log(gen.next().value)\n\n\nУспех собес:❌"
      }
    ]
  },
  {
    "company": "ITQ Group",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-11-15 18:20:58",
        "content": "2024-11-15 18:20:58\n Sergey F -> 2071074234:\nкомпания: ITQ Group\nвакансия: hr сама написала, проект МКБ\nзп: до 260к\n\n\nбольшую часть времени писали и параллельно были вопросы:\n- Что такое замыкания\n- Какие хуки знаешь в реакте\n- Как работает хук useEffect\n- Отличия от useLayoutEffect\n- Жизненный цикл\n\n// Написать хук useOperationQuery, соответствующий логики RTK Query (частично React Query).\n// Логика работы:\n// по умолчанию: {data: null,isLoading: false,isError: false,error: null}\n// во время за...",
        "full_content": "2024-11-15 18:20:58\n Sergey F -> 2071074234:\nкомпания: ITQ Group\nвакансия: hr сама написала, проект МКБ\nзп: до 260к\n\n\nбольшую часть времени писали и параллельно были вопросы:\n- Что такое замыкания\n- Какие хуки знаешь в реакте\n- Как работает хук useEffect\n- Отличия от useLayoutEffect\n- Жизненный цикл\n\n// Написать хук useOperationQuery, соответствующий логики RTK Query (частично React Query).\n// Логика работы:\n// по умолчанию: {data: null,isLoading: false,isError: false,error: null}\n// во время запроса {data: null,isLoading: true,isError: false,error: null}\n// Успешный запрос {data: {},isLoading: false,isError: false,error: null}\n// Ошибка запрос {data: null,isLoading: false,isError: true,error: {}}\n// POST /get body: params\n// отмена запроса\n// При изменении зависимости, делать перезапрос\n\nimport { useState, useEffect, useCallback } from 'react';\n\nfunction useOperationQuery(queryParams) {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchData = useCallback(async (params, abortSignal) => {\n    setIsError(false);\n    setError(null);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/get', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(params),\n        signal: abortSignal,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      setData(result);\n    } catch (e) {\n      if (e.name !== 'AbortError') { // Игнорируем ошибки отмены\n        setIsError(true);\n        setError(e);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    fetchData(queryParams, abortController.signal);\n\n    return () => {\n      abortController.abort();\n    };\n  }, [queryParams, fetchData]);\n\n  return { data, isLoading, isError, error };\n}\n\n// Использование\nconst { data, isLoading, isError, error } = useOperationQuery({ params: 1 });\n\n\nесли кратно 3 и 5, писать FizzBuzz, если 3 - писать Fizz, если 5, писать Buzz, иначе просто число.\n\nconst fizzBuzz = (number) => {\n  for (let i = 0; i <= number; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      console.log(\"FizzBuzz\");\n    } else if (i % 3 === 0) {\n      console.log(\"Fizz\");\n    } else if (i % 5 === 0) {\n      console.log(\"Buzz\");\n    } else {\n      console.log(i);\n    }\n  }\n};\n\nрассчитать сумму за количество проведенных ночей.\n\nfunction bookingCalculate(nights, firstNight = new Date()) {\n   let result = 0\n   const nightsCounter = new Date(firstNight)\n\n   for (let i = 0; i < nights; i++){\n      const day = nightsCounter.getDay()\n\n      if (!day || day === 6){\n         result += 2200\n      } else {\n         result += 1500\n      }\n\n      nightsCounter.setDate(nightsCounter.getDate() + 1)\n      console.log(nightsCounter);\n      \n   }\n\n   return result\n}\n\nconsole.log(bookingCalculate(7));\nconsole.log(bookingCalculate(3, new Date(\"2023-11-10\")));"
      },
      {
        "timestamp": "2024-05-21 03:50:43",
        "content": "2024-05-21 03:50:43\n Alibek Zhulmurzin -> 2071074234:\nНазвание компании: ITQ Group (проект МКБ)\nСсылка на вакансию: HR сама написала\nЗП: от 250к на руки\nУспех собеса: ✅\nФидбек: HR сказала что всё клёво, я попросил оформление по ИП, дали оффер на 1959р/час\nСсылка на запись: https://youtu.be/K7VW4YK8PUc\nЗадачи:\n// Оплата за проживание в отеле\n// Необходимо написать функцию расчёта стоимости проживания посетителя в отеле\n// Функция может принимать 2 аргумента\n// 1. Количество ночей проживания в оте...",
        "full_content": "2024-05-21 03:50:43\n Alibek Zhulmurzin -> 2071074234:\nНазвание компании: ITQ Group (проект МКБ)\nСсылка на вакансию: HR сама написала\nЗП: от 250к на руки\nУспех собеса: ✅\nФидбек: HR сказала что всё клёво, я попросил оформление по ИП, дали оффер на 1959р/час\nСсылка на запись: https://youtu.be/K7VW4YK8PUc\nЗадачи:\n// Оплата за проживание в отеле\n// Необходимо написать функцию расчёта стоимости проживания посетителя в отеле\n// Функция может принимать 2 аргумента\n// 1. Количество ночей проживания в отеле (обязательный параметр)\n// 2. Дата заселения (необязательный параметр). Если параметр не указан, то\n// отсчёт идёт от текущего дня\n// стоимость проижвания в будни (с понедельника по пятницу) - 1500 руб\n// стоимость проижвания в выходные - 2200 руб\n\nfunction bookingCalculate(nights, startDate = new Date()) {\n  let totalCost = 0;\n  let currentDate = new Date(startDate);\n\n  for (let i = 0; i < nights; i++) {\n    const dayOfWeek = currentDate.getDay();\n    if (!dayOfWeek || dayOfWeek === 6) {\n      totalCost += 2200;\n    } else {\n      totalCost += 1500;\n    }\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n\n  return totalCost;\n}\n\nconsole.log(bookingCalculate(7)); // 11900\nconsole.log(bookingCalculate(3, new Date('2023-11-10'))); //5900"
      }
    ]
  },
  {
    "company": "Купер",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-09-15 16:31:56",
        "content": "2024-09-15 16:31:56\n Руслан -> 2071074234:\nКупер\n— зп: до 270к\n— вакансия: https://hh.ru/vacancy/106590224\n— вопросы: \n1. critical rendering path\n2. cors\n— задачи:\nзадача на реакт копия этой https://t.me/c/2071074234/489/42521",
        "full_content": "2024-09-15 16:31:56\n Руслан -> 2071074234:\nКупер\n— зп: до 270к\n— вакансия: https://hh.ru/vacancy/106590224\n— вопросы: \n1. critical rendering path\n2. cors\n— задачи:\nзадача на реакт копия этой https://t.me/c/2071074234/489/42521"
      },
      {
        "timestamp": "2024-07-17 10:51:32",
        "content": "2024-07-17 10:51:32\n Alehandro¯\\_(ツ)_/¯ -> 2071074234:\nКомпания: СберМаркет(Купер)\n- зп: 200-220к\n- вакансия: hr написала сама\n- вопросы: по вопросам много вопросов по CSS, стилям, по анимациям и как лучше делать анимации.\n- фидбек: ❌ отказ, hr написала что ищут спеца более знающего в их стеке, зачем-то перкомендовали больше про JS узнать, серию книг \"Ты не знаешь JavaScript\" и про очередь макро, микро тасок, хотя вопросы были больше по CSS",
        "full_content": "2024-07-17 10:51:32\n Alehandro¯\\_(ツ)_/¯ -> 2071074234:\nКомпания: СберМаркет(Купер)\n- зп: 200-220к\n- вакансия: hr написала сама\n- вопросы: по вопросам много вопросов по CSS, стилям, по анимациям и как лучше делать анимации.\n- фидбек: ❌ отказ, hr написала что ищут спеца более знающего в их стеке, зачем-то перкомендовали больше про JS узнать, серию книг \"Ты не знаешь JavaScript\" и про очередь макро, микро тасок, хотя вопросы были больше по CSS"
      }
    ]
  },
  {
    "company": "Ростелеком Ит",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-07-18 14:03:28",
        "content": "2025-07-18 14:03:28\n Alexandro 4 -> 2071074234:\nРостелеком ИТ  \nВакансия: https://hh.ru/vacancy/122109330\nЗП 270к (можно просить больше)\n\nВопросы:\n1. Расскажи про свой опыт и какие крутые задачи реализовал? (Спрашивают по резюме)  \n2. Доводилось ли оптимизировать приложение и как оптимизировал?  \n3. Что можно посмотреть во вкладках Chrome Dev Tools и React Dev Tools? Нужно привести пример успешного использования для поиска проблем.  \n4. К тебе пришел менеджер и говорит: \"Страница на сайте лагает...",
        "full_content": "2025-07-18 14:03:28\n Alexandro 4 -> 2071074234:\nРостелеком ИТ  \nВакансия: https://hh.ru/vacancy/122109330\nЗП 270к (можно просить больше)\n\nВопросы:\n1. Расскажи про свой опыт и какие крутые задачи реализовал? (Спрашивают по резюме)  \n2. Доводилось ли оптимизировать приложение и как оптимизировал?  \n3. Что можно посмотреть во вкладках Chrome Dev Tools и React Dev Tools? Нужно привести пример успешного использования для поиска проблем.  \n4. К тебе пришел менеджер и говорит: \"Страница на сайте лагает!\". Что будешь делать?  \n5. Какие, кроме WebSocket’а, есть варианты взаимодействия с сервером? Расскажи подробно о каждом. Почему на проекте использовали именно WebSocket?  \n6. Когда надо использовать useMemo и useCallback?  \n7. Какие недостатки есть у React Context и может ли он полностью заменить Redux?  \n8. Что можешь сказать про аналоги Redux? В чем их проблемы?  \n9. Какая архитектура приложения использовалась у вас на проекте?  \n10. Какие минусы есть у FSD?  \n11. Какие паттерны проектирования знаешь? Назови виды.  \n12. Расскажи про SOLID и как он применяется в React.  \n13. Нужно реализовать undo/redo механизм — как будешь делать? (Использовать паттерн \"Команда\")  \n14. Какие есть паттерны, специфические для React?  \n15. Есть два компонента: аватарка пользователя и комментарий. Нужно разместить аватарку внутри комментария. Как это сделать без использования компонента-обертки? (Использовать паттерн \"slot\".)"
      },
      {
        "timestamp": "2025-06-13 07:54:40",
        "content": "2025-06-13 07:54:40\n Никита -> 2071074234:\nРостелеком ИТ\nЗП: от 250 говорил\nВакансия\n\nВ основном спрашивали про опыт и задавали вопросы по нему\n\nКакие есть способы взаимодействия с сервером помимо веб сокетов? Преимущества/недостатки? В каких ситуациях лучше всего применять каждый способ?\nЧто происходит при вводе адреса сайта и нажатия ентер?\nКак браузер понимает jsx и tsx?\nКак найти причины лагов страницы?(Perfomance, react profiler etc...)\nСпрашивал подробно как работает вкладка perfomance и p...",
        "full_content": "2025-06-13 07:54:40\n Никита -> 2071074234:\nРостелеком ИТ\nЗП: от 250 говорил\nВакансия\n\nВ основном спрашивали про опыт и задавали вопросы по нему\n\nКакие есть способы взаимодействия с сервером помимо веб сокетов? Преимущества/недостатки? В каких ситуациях лучше всего применять каждый способ?\nЧто происходит при вводе адреса сайта и нажатия ентер?\nКак браузер понимает jsx и tsx?\nКак найти причины лагов страницы?(Perfomance, react profiler etc...)\nСпрашивал подробно как работает вкладка perfomance и profiler\nЧто такое виртуализация?\nС какими проблемами столкнёшься при работе с Intersection Observer? (хотели услышать про размер элементов)"
      }
    ]
  },
  {
    "company": "Урбантех",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-07-23 12:50:30",
        "content": "2024-07-23 12:50:30\n Руслан -> 2071074234:\nУрбантех\n— зп: 260к\n— вакансия: https://hh.ru/vacancy/101876086\n— задачи:\nПроревьюить и внести правки \nimport React,{ useEffect, useState } from \"https://esm.sh/react\";\nimport ReactDOM from \"https://esm.sh/react-dom\";\n\n\ninterface Post {\n  id: number;\n  userId: number;\n  body: string;\n  title: string;\n}\n\ninterface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n}\n\ninterface Store {\n  posts: Post[];\n  users: User[];\n  count: numb...",
        "full_content": "2024-07-23 12:50:30\n Руслан -> 2071074234:\nУрбантех\n— зп: 260к\n— вакансия: https://hh.ru/vacancy/101876086\n— задачи:\nПроревьюить и внести правки \nimport React,{ useEffect, useState } from \"https://esm.sh/react\";\nimport ReactDOM from \"https://esm.sh/react-dom\";\n\n\ninterface Post {\n  id: number;\n  userId: number;\n  body: string;\n  title: string;\n}\n\ninterface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n}\n\ninterface Store {\n  posts: Post[];\n  users: User[];\n  count: number;\n}\n\nlet isStarted = false;\n\nfunction App() {\n  const [store, setStore] = useState<Store>({\n    posts: [],\n    count: 0,\n    users: []\n  });\n  const [time, setTime] = useState(0);\n\n  // Запрашиваем данные с сервера\n  useEffect(() => {\n    const fetchData = async () => {\n      const resPosts = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n      store.posts = await resPosts.json();\n\n      const resUsers = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      store.users = await resUsers.json();\n      setStore(store);\n    };\n    fetchData();\n  }, []);\n\n  // Инициализация счетчика времени\n  useEffect(() => {\n    if (!isStarted) {\n      isStarted = true;\n\n      setInterval(() => {\n        setTime((prev) => prev + 1);\n      }, 1000);\n    }\n  });\n\n  // Клик по кнопкам + и -\n  const clickAdd = (isPlus) => {\n    if (isPlus) {\n      store.count++;\n    } else {\n      store.count--;\n    }\n    if (store.count < 0) {\n      alert(\"Рейтинг не может быть ниже 0\");\n      return;\n    }\n\n    if (store.count > 5) {\n      alert(\"Рейтинг не может быть выше 5\");\n      return;\n    }\n    setStore(store);\n  };\n\n  const findUserById = (id) => {\n    return store.users.find((val) => val.id === id)?.name;\n  };\n\n  // Рендер списка\n  const renderItem = (item) => {\n    return (\n      <div class=\"post\">\n        <div class=\"title\">{item.title}</div>\n        <div class=\"user\">Автор: {findUserById(item.userId)}</div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"info\">Вы смотрите эту страницу: {time} секунд</div>\n      <div className=\"raiting\">\n        <button onClick={clickAdd.bind(this, false)}>-</button>\n        Оцените подборку постов (от 0 до 5): <b>{store.count}</b>\n        <button onClick={clickAdd}>+</button>\n      </div>\n      <h1>Посты</h1>\n      <ul>{store.posts.map((post) => renderItem(post))}</ul>\n    </div>\n  );\n}\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"
      },
      {
        "timestamp": "2024-07-13 08:33:46",
        "content": "2024-07-13 08:33:46\n Ярослав Мудрый -> 2071074234:\nУрбантех\n- вакансия: сами написали\n- зп: 250к+\n\nВопросы:\n- Расскажи про eventloop\n- Какие хуки в реакт использовал\n- Что может вызвать перерисовку узла виртуального dom\n\nЗадача: исправить код react компонента, не работает функция addClick (изначально мутировался объект в стейте, потом устанавливался в стейт, то есть ссылка на объект оставалась той же), исправленная функция:\n\nconst clickAdd = (isPlus) => {\n  let newCount = store.count;\n\n  if (isP...",
        "full_content": "2024-07-13 08:33:46\n Ярослав Мудрый -> 2071074234:\nУрбантех\n- вакансия: сами написали\n- зп: 250к+\n\nВопросы:\n- Расскажи про eventloop\n- Какие хуки в реакт использовал\n- Что может вызвать перерисовку узла виртуального dom\n\nЗадача: исправить код react компонента, не работает функция addClick (изначально мутировался объект в стейте, потом устанавливался в стейт, то есть ссылка на объект оставалась той же), исправленная функция:\n\nconst clickAdd = (isPlus) => {\n  let newCount = store.count;\n\n  if (isPlus) {\n    newCount++;\n  } else {\n    newCount--;\n  }\n\n  if (newCount < 0) {\n    alert(\"Рейтинг не может быть ниже 0\");\n    return;\n  }\n\n  if (newCount > 5) {\n    alert(\"Рейтинг не может быть выше 5\");\n    return;\n  }\n\n  setStore({ ...store, count: newCount });\n};"
      }
    ]
  },
  {
    "company": "Avito",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-11-01 17:26:23",
        "content": "2024-11-01 17:26:23\n RdK -> 2071074234:\n1) Avito 2 этап платформа\n2) Рефералка\n3) от 270\n/*\nМы хотим проверять режим логгера, чтобы не выводить лишние сообщения в консоль.\nМы ожидаем, что в каждой (отмеченной точке) будет 'This is Dev mode'.\nВсё ли работает верно?\n*/\nconst logger = {\n  mode: 'Dev',\n  check() {\n      console.log(`This is ${this.mode} mode`);\n  }\n};\n\nlogger.check(); // => ? (1) dev\n\nconst loggerCheck = logger.check;\nloggerCheck.call(logger); // => ? (2) undefined\n\nfunction execute...",
        "full_content": "2024-11-01 17:26:23\n RdK -> 2071074234:\n1) Avito 2 этап платформа\n2) Рефералка\n3) от 270\n/*\nМы хотим проверять режим логгера, чтобы не выводить лишние сообщения в консоль.\nМы ожидаем, что в каждой (отмеченной точке) будет 'This is Dev mode'.\nВсё ли работает верно?\n*/\nconst logger = {\n  mode: 'Dev',\n  check() {\n      console.log(`This is ${this.mode} mode`);\n  }\n};\n\nlogger.check(); // => ? (1) dev\n\nconst loggerCheck = logger.check;\nloggerCheck.call(logger); // => ? (2) undefined\n\nfunction execute(fn) {\n  return fn();\n}\nexecute(logger.check.bind(logger)); // => ? (3) undefined\n\n///\n\n/*\nВы расследуете работу функцию логирования. Определите какие значения будут у переменных count и value в момент логирования в консоль браузера, как показано ниже\n*/\nlet count = 0;\nlet value = { message: 'app initialized', isLogged: false };\n\nfunction makeScopedLogger(count, value) {\n\n    function logMessage() {\n        console.log(count, value); // (2) ?  1 { message: 'app initialized', isLogged: true  }\n    }\n\n    count += 1;\n    console.log(count, value); // (1) ? 1  { message: 'app initialized', isLogged: false }\n\n    value.isLogged = true;\n\n    return logMessage;\n}\n\nconst logMessage = makeScopedLogger(count, value);\n\nvalue = { message: 'app run' };\n\nlogMessage();\n\nconsole.log(count, value); // (3) ? 0 { message: 'app run' }\n\n///\n\n/**\n    Мы разрабатываем приложение через Console Driven Development.\n    К сожалению, у нас потерялась часть кода, но остался последний вывод.\n    Расставьте тексты для console.\n*/\nfunction checkOrder() {\n    console.log('1');\n\n    async function asyncFn() {\n        console.log('2');\n        await Promise.resolve(null);\n        console.log('4');34\n    }\n\n    asyncFn();\n\n    new Promise((resolve) => {\n        setTimeout(() => {\n             resolve();\n             console.log('5')\n        }, 0);\n    }).then(() => {\n        console.log('6');\n    });\n\n    console.log('3');43\n}\n\ncheckOrder();\n\n///\n\n/* Дана разметка\n<main>\n    <input type=\"text\" id=\"search-input\" placeholder=\"Поиск по объявлениям\" />\n    <div id=\"suggests-container\"></div>\n</main>\nПо мере ввода текста в поле нужно выполнять следующее:\n\n1. Запрашивать список саджестов по api-ручке /suggests. Ручка на вход принимает term. Например:\n { term: \"квартира\" }. Ответ приходит в таком виде: { suggests: [{ title: string }, ...] }.\n2. Под полем отображать список полученных саджестов.\n3. При повторном запросе старый список заменяется на новый.\n4. В случае ошибки запроса список саджестов не показывается.\n5. Если в поле ввода ничего не введено, список саджестов не показывается и не запрашивается.\n6. В случае отсутствия результатов по api-ручке в качестве саджеста отображается введенное значение.\n\n*/\n// <script>\n    const fetchSuggests = async term => {\n        const response = await fetch('/suggests', {\n            method: 'POST',\n            body: { term },\n        });\n\n        if (!response.ok) {\n            throw response;\n        } \n\n        return response.json();\n    }\n\n    const searchInput = document.getElementById('search-input');\n    const suggestsContainer=document.getElementById(\"suggests-container\")\n\n    searchInput.addEventListener('input', async event => {\n            const term =event.target.value.trim()  \n\n            if(term===''){\n                suggestsContainer.innerHTML=''\n                return\n            }\n            try{\n\n                const suggestList=await fetchSuggests(term)\n\n                 suggestsContainer.innerHTML= suggestList.length > 0 \n                            ? suggestList.map(s=>`<div class=\"suggests\">${s}</div>`.join(''))\n                            : `<div class=\"suggests\">${term}</div>`\n            }catch(e){\n                suggestsContainer.innerHTML=''\n                console.log(e)\n            }\n    });\n// </script>"
      },
      {
        "timestamp": "2024-05-13 11:37:06",
        "content": "2024-05-13 11:37:06\n Санжар -> 2071074234:\nНазвание компании: Авито [второй этап \"Программирование\"]\nВакансия: https://career.avito.com/vacancies/razrabotka/2731/\nЗП: запросил 330к-380к\nУспех: ✅\nФидбек: Должно было быть две задачи на написание кода, я успел решить только одну. Затем были вопросы на оценку сложности (Big O) написанного алгоритма и других различных операций типа чтения или записи в разные структуры данных (linked list, map, array). \n\nЗадача:\nРеализовать математическое суммирование...",
        "full_content": "2024-05-13 11:37:06\n Санжар -> 2071074234:\nНазвание компании: Авито [второй этап \"Программирование\"]\nВакансия: https://career.avito.com/vacancies/razrabotka/2731/\nЗП: запросил 330к-380к\nУспех: ✅\nФидбек: Должно было быть две задачи на написание кода, я успел решить только одну. Затем были вопросы на оценку сложности (Big O) написанного алгоритма и других различных операций типа чтения или записи в разные структуры данных (linked list, map, array). \n\nЗадача:\nРеализовать математическое суммирование двух чисел, где число - это массив элементов со значением от 1 до 9\n[1,2,3] + [2,2,3] = [3,4,6]  (123+223 = 346)\n[1,2,3] + [2,2,9] = [3,5,2] (123+229 = 352)\n[9,9,9] + [1] = [1,0,0,0] (999+1 = 1000)"
      }
    ]
  },
  {
    "company": "Росгосстрах",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-12-11 13:28:46",
        "content": "2024-12-11 13:28:46\n Mikhail Sorokin -> 2071074234:\nРосгосстрах\nВакансия — ссылки нет, HR написала в тг\nЗп — конкретную сумму на тот момент не обсуждали, я назвал сумму от 300 000 на руки",
        "full_content": "2024-12-11 13:28:46\n Mikhail Sorokin -> 2071074234:\nРосгосстрах\nВакансия — ссылки нет, HR написала в тг\nЗп — конкретную сумму на тот момент не обсуждали, я назвал сумму от 300 000 на руки"
      },
      {
        "timestamp": "2024-05-24 06:07:47",
        "content": "2024-05-24 06:07:47\n stil -> 2071074234:\nНазвание компании: росгосстрах\n- зп: 250к\n- вакансия: https://omsk.hh.ru/vacancy/98813167\n- успех собеса:  ❌ (выбрали другого кандидата)\n\nВопросы:\n- про опыт (в т.ч. с ui kit)\n- микрофронты, лерна\n- хойстинг и замыкания\n- про jsdoc \n- что такое дженерик в ts\n- варианты авторизации\n- специфичность селекторов css\n- обработка аналитики через redux (middleware)\n- отличия git pull от git fetch\n\nЗадачи:\n// определите значение this\nconst getSomethisng = () => {\n...",
        "full_content": "2024-05-24 06:07:47\n stil -> 2071074234:\nНазвание компании: росгосстрах\n- зп: 250к\n- вакансия: https://omsk.hh.ru/vacancy/98813167\n- успех собеса:  ❌ (выбрали другого кандидата)\n\nВопросы:\n- про опыт (в т.ч. с ui kit)\n- микрофронты, лерна\n- хойстинг и замыкания\n- про jsdoc \n- что такое дженерик в ts\n- варианты авторизации\n- специфичность селекторов css\n- обработка аналитики через redux (middleware)\n- отличия git pull от git fetch\n\nЗадачи:\n// определите значение this\nconst getSomethisng = () => {\n  console.log(this)\n}\n\nfunction getSomethisng2() {\n  console.log(this)\n} \n /// Определите средний вес всех лемонов (среднее арифметическое по ключу weight)\nconst array = [{\n 'fruit': 'lemon',\n  weight: 10\n},\n{\n 'fruit': 'apple',\n  weight: 10\n},\n{\n 'fruit': 'lemon',\n  weight: 10\n},\n{\n 'fruit': 'lemon',\n  weight: 40\n}]"
      }
    ]
  },
  {
    "company": "Копания: Sapiens Solutions",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-03-05 17:33:11",
        "content": "2025-03-05 17:33:11\n Матвей Захаров -> 2071074234:\nКопания: Sapiens Solutions, 3 этап, общение с Product Owner\nВакансия: https://hh.ru/vacancy/115506799?hhtmFrom=employer_vacancies \n\nВ начале длительный рассказ о проекте, после soft вопросы:\n\n- Что ждёшь от нового места работы\n- В каком направлении хочешь развиваться\n- Что точно не хотел бы видеть на новом проекте, в который иду, если сравнивать с текущим местом работы + наоборот, что точно бы хотел видеть\n- Как отношусь к work-life balance, соб...",
        "full_content": "2025-03-05 17:33:11\n Матвей Захаров -> 2071074234:\nКопания: Sapiens Solutions, 3 этап, общение с Product Owner\nВакансия: https://hh.ru/vacancy/115506799?hhtmFrom=employer_vacancies \n\nВ начале длительный рассказ о проекте, после soft вопросы:\n\n- Что ждёшь от нового места работы\n- В каком направлении хочешь развиваться\n- Что точно не хотел бы видеть на новом проекте, в который иду, если сравнивать с текущим местом работы + наоборот, что точно бы хотел видеть\n- Как отношусь к work-life balance, соблюдаю ли\n- Доступен ли в нерабочее время\n- Как отношусь к переработкам"
      },
      {
        "timestamp": "2025-02-28 10:59:34",
        "content": "2025-02-28 10:59:34\n Матвей Захаров -> 2071074234:\nКопания: Sapiens Solutions\nВакансия: https://hh.ru/vacancy/115506799?hhtmFrom=employer_vacancies \nЗапись прерывалась на середине, здесь первая часть и финал: https://youtu.be/gWY3ZSNEC4s \n\nВопросы сходятся с собесом в iFellow: https://t.me/c/2071074234/489/108386\n\n- каким css пользовались на работе (SCCS/LESS)\n- как вертикально отцентровать элемент\n- что такое контекст наложения\n- что такое z-index\n- способы копирования объекта + как при написан...",
        "full_content": "2025-02-28 10:59:34\n Матвей Захаров -> 2071074234:\nКопания: Sapiens Solutions\nВакансия: https://hh.ru/vacancy/115506799?hhtmFrom=employer_vacancies \nЗапись прерывалась на середине, здесь первая часть и финал: https://youtu.be/gWY3ZSNEC4s \n\nВопросы сходятся с собесом в iFellow: https://t.me/c/2071074234/489/108386\n\n- каким css пользовались на работе (SCCS/LESS)\n- как вертикально отцентровать элемент\n- что такое контекст наложения\n- что такое z-index\n- способы копирования объекта + как при написании рекурсивной функции скопировать функцию, являющуюся методом\n- как работает асихронность в js (хочет и про webworker, service worker услышать)\n- отличие any от unknown\n- отличие типов от интерфейсов \n- отличие merge от rebase + что лучше \n- мемоизация в react\n- зачем key в react\n\n-  показывает на экране картинку, как бы сверстал (есть в записи)\n\n(function() {\n    var a = b = 3;\n})();\n\nconsole.log(typeof a);\nconsole.log(typeof b);\n\n\nsetTimeout(() => console.log(\"timeout\"));\n\nPromise.resolve().then(() => console.log(\"promise\"));\n\nwindow.requestAnimationFrame(() => console.log(\"requestAnimationFrame\"));\n\nconsole.log(\"code\");\n\n\n'use strict';\nvar obj = {\n    i: 10,\n    b: () => console.log(this.i, this),\n    c: function() {\n        console.log(this.i, this);\n    }\n}\n\nobj.b();\nobj.c();\n\n\nvar test = (function() {\n    var value = 1;\n    function setValue(newValue) {\n        value = newValue;\n    }\n\n    return {\n        value: value,\n        setValue: setValue\n    };\n})();\n\ntest.setValue(2);\nconsole.log(test.value);\n\n\nНа лайвкодинг - описывает словами задачу на число фибоначчи\n\nfunction fibonacci(n) {\n    if (n <= 1) return n;\n    let a = 0, b = 1;\n    for (let i = 2; i <= n; i++) {\n        let temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}\n\nconsole.log(fibonacci(5));  // 5\nconsole.log(fibonacci(10)); // 55\nconsole.log(fibonacci(15)); // 610"
      }
    ]
  },
  {
    "company": "Маквес",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-06-26 16:00:43",
        "content": "2025-06-26 16:00:43\n Aintripin -> 2071074234:\nКомпания: Маквес (26.06.2025)\n\nВакансия: HTML-верстальщик (гибрид); https://mytishchi.hh.ru/vacancy/121396515?hhtmFrom=employer_vacancies\n\nЗП: 150,000, если я не нагаллюцинировал. Сейчас на сайте нет вилки.\n\nСпрашивали преимущественно по CSS и по опыту.\n\nВопросы по CSS:\n\n1. Виды позиционирования SCSS (static, relative, absolute, fixed, sticky)\n2. Какие есть единицы измерения, какие лучше использовать (px, em, rm, %, vw, vh)\n3. Различия между em и rem...",
        "full_content": "2025-06-26 16:00:43\n Aintripin -> 2071074234:\nКомпания: Маквес (26.06.2025)\n\nВакансия: HTML-верстальщик (гибрид); https://mytishchi.hh.ru/vacancy/121396515?hhtmFrom=employer_vacancies\n\nЗП: 150,000, если я не нагаллюцинировал. Сейчас на сайте нет вилки.\n\nСпрашивали преимущественно по CSS и по опыту.\n\nВопросы по CSS:\n\n1. Виды позиционирования SCSS (static, relative, absolute, fixed, sticky)\n2. Какие есть единицы измерения, какие лучше использовать (px, em, rm, %, vw, vh)\n3. Различия между em и rem (rem — \"r\" for \"root\", т.е. он привязан к корневому html font-size, а em идёт относительно родителя)\n4. псевдо-классы, какие есть и для чего (:hover, :active, :focus, :visited, :link, :disabled, :enabled)\n5. псевдо-элементы (::before, ::after)\n6. как работает Z-index и какие есть нюансы, если элементов с Z-index много на странице, если есть вложенные\n7. Такая ситуация: есть два <div>'а, они оба контейнеры. У div'а A Z-index равен 2, а у B равен 3. Внутри A есть C с Z-index 5, а внутри B есть D с Z-index равным 4. \nВопрос: какой из div'ов C или D будет \"выше\" и почему?\nОтвет: выше будет div D с z-index 4, потому что оба упираются в их родителей, а у родителя D (div'а B Z-index равен 3, что больше 2)\n8. media запросы, что это и зачем (адаптация на мобилки и планшеты, помимо десктопа; светлая/тёмная тема; prefers-reduced-motion (предпочтение пользователя без анимации))\n9. prefers-reduced-motion все анимации отключает или как?\nсам он ничего не делает, это просто media запрос, который мы сами пишем, внутри которого уже пишется логика. Т.е. мы сами говорим, реагировать надо на это или нет\n\nВопросы по опыту:\n1. чем занимался на последнем месте работы\n2. приходилось ли работать со styled components\n3. styled components vs SCSS modules, предпочтения\n4. про UI Kit на проекте рассказал\n5. React Grid Layout, рассказать что это и для чего\n6. Таблицы на чём писали? (самописные)"
      },
      {
        "timestamp": "2025-06-26 16:00:13",
        "content": "2025-06-26 16:00:13\n Aintripin -> 2071074234:\nКомпания: Маквес (26.06.2025)\n\nВакансия: HTML-верстальщик (гибрид); https://mytishchi.hh.ru/vacancy/121396515?hhtmFrom=employer_vacancies\n\nЗП: 150,000, если я не нагаллюцинировал. Сейчас на сайте нет вилки.\n\nСпрашивали преимущественно по CSS и по опыту.\n\nВопросы по CSS:\n\n1. Виды позиционирования SCSS (static, relative, absolute, fixed, sticky)\n2. Какие есть единицы измерения, какие лучше использовать (px, em, rm, %, vw, vh)\n3. Различия между em и rem...",
        "full_content": "2025-06-26 16:00:13\n Aintripin -> 2071074234:\nКомпания: Маквес (26.06.2025)\n\nВакансия: HTML-верстальщик (гибрид); https://mytishchi.hh.ru/vacancy/121396515?hhtmFrom=employer_vacancies\n\nЗП: 150,000, если я не нагаллюцинировал. Сейчас на сайте нет вилки.\n\nСпрашивали преимущественно по CSS и по опыту.\n\nВопросы по CSS:\n\n1. Виды позиционирования SCSS (static, relative, absolute, fixed, sticky)\n2. Какие есть единицы измерения, какие лучше использовать (px, em, rm, %, vw, vh)\n3. Различия между em и rem (rem — \"r\" for \"root\", т.е. он привязан к корневому html font-size, а em идёт относительно родителя)\n4. псевдо-классы, какие есть и для чего (:hover, :active, :focus, :visited, :link, :disabled, :enabled)\n5. псевдо-элементы (::before, ::after)\n6. как работает Z-index и какие есть нюансы, если элементов с Z-index много на странице, если есть вложенные\n7. Такая ситуация: есть два <div>'а, они оба контейнеры. У div'а A Z-index равен 2, а у B равен 3. Внутри A есть C с Z-index 5, а внутри B есть D с Z-index равным 4. \nВопрос: какой из div'ов C или D будет \"выше\" и почему?\nОтвет: выше будет div D с z-index 4, потому что оба упираются в их родителей, а у родителя D (div'а B Z-index равен 3, что больше 2)\n8. media запросы, что это и зачем (адаптация на мобилки и планшеты, помимо десктопа; светлая/тёмная тема; prefers-reduced-motion (предпочтение пользователя без анимации))\n9. prefers-reduced-motion все анимации отключает или как?\nсам он ничего не делает, это просто media запрос, который мы сами пишем, внутри которого уже пишется логика. Т.е. мы сами говорим, реагировать надо на это или нет\n\nВопросы по опыту:\n1. чем занимался на последнем месте работы\n2. приходилось ли работать со styled components\n3. styled components vs SCSS modules, предпочтения\n4. про UI Kit на проекте рассказал\n5. React Grid Layout, рассказать что это и для чего\n6. Таблицы на чём писали? (самописные)"
      }
    ]
  },
  {
    "company": "Right Line",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-07-01 18:02:02",
        "content": "2024-07-01 18:02:02\n Евгений Лямин -> 2071074234:\n- Right Line\n- Вакансия: hr написала\n- зп: до 250 вилка у них\nВопросы:\n- Как обрабатывается веб-страница браузером / Критический путь рендеринга CRP\n- Как работает Event Loop\n- Рассказать про редакс\n- Жизненый цикл useState\n- Какой жизненый цикл у редакса, когда мы потеряем из негно данные\n- Какие еще есть возможности относительно перманентного хранения на фронте, по мимо стора нашего стейт менеджера. Про localStorage SessionStorage Cookie \n- Воп...",
        "full_content": "2024-07-01 18:02:02\n Евгений Лямин -> 2071074234:\n- Right Line\n- Вакансия: hr написала\n- зп: до 250 вилка у них\nВопросы:\n- Как обрабатывается веб-страница браузером / Критический путь рендеринга CRP\n- Как работает Event Loop\n- Рассказать про редакс\n- Жизненый цикл useState\n- Какой жизненый цикл у редакса, когда мы потеряем из негно данные\n- Какие еще есть возможности относительно перманентного хранения на фронте, по мимо стора нашего стейт менеджера. Про localStorage SessionStorage Cookie \n- Вопрос по СSS, препроцессоры и различные подходы, Css in JS. C чем работал, плюсы минусы\nЗадачи: \n//  что выведет в консоль\n\nconst [name, setName] = useState('name')\n\nsetName('abc')\n\nconsole.log(name)\n\n\n// написать функцию которая принимает массив объектов со странами городами и населением этих городов и вернуть топ три города по населению каждой страны\n\nfunction getTopCitiesByPopulation(data) {\n    // Группировка городов по странам\n    const groupedByCountry = data.reduce((acc, item) => {\n        if (!acc[item.country]) {\n            acc[item.country] = [];\n        }\n        acc[item.country].push(item);\n        return acc;\n    }, {});\n\n    // Получение топ-3 городов по населению для каждой страны\n    const topCitiesByCountry = {};\n\n    for (const country in groupedByCountry) {\n        topCitiesByCountry[country] = groupedByCountry[country]\n            .sort((a, b) => b.population - a.population)\n            .slice(0, 3);\n    }\n\n    return topCitiesByCountry;\n}"
      },
      {
        "timestamp": "2024-06-28 16:37:01",
        "content": "2024-06-28 16:37:01\n Tonidevs -> 2071074234:\nRIGHT LINE\nпроект цифровой рубль\nЗП: до 250к\nкомментарии: работать в соло пилить SDK на vanila JS\n\nВОПРОСЫ\n- что такое css препроцессоры и зачем нужны, привести юзкейс с переменными\n- что такое селекторы, расскажи про специфичность\n- что такое селектор по атрибуту\n- назови псевдоклассы и псевдо-селекторы\n- что такое Z-INDEX и контекст наложения\n- расскажи как работает Event Loop, если в очередь макрозадач попадет тяжеловесная задача, что будет? Если б...",
        "full_content": "2024-06-28 16:37:01\n Tonidevs -> 2071074234:\nRIGHT LINE\nпроект цифровой рубль\nЗП: до 250к\nкомментарии: работать в соло пилить SDK на vanila JS\n\nВОПРОСЫ\n- что такое css препроцессоры и зачем нужны, привести юзкейс с переменными\n- что такое селекторы, расскажи про специфичность\n- что такое селектор по атрибуту\n- назови псевдоклассы и псевдо-селекторы\n- что такое Z-INDEX и контекст наложения\n- расскажи как работает Event Loop, если в очередь макрозадач попадет тяжеловесная задача, что будет? Если будет тяжелый расчет в макрозадаче, как не блокировать поток? (про вебворкеры)\n- как отправить задачу в очередь макрозадач? (про queMicrotask())\n- типы данных в JS в чем разница примитивов и объектов\n- как работает прототипное наследование (автобоксинг)\n- как работает сборка мусора в JS (Garbaje Collector)\n- что такое замыкание и как можно его использовать\n- пример как можно использовать прототипы в разработке\n- какие методы оптимизации знаешь (копает в опыт на знание применения практик оптимизации - типо а давай всё в useCallback завернем - круто будет?)\n- как отследить до билда оптимизацию удаления лишнего кода\n- для чего нужны стейт-менеджеры\n- расскажи про плюсы и минусы FSD\n- что такое prop KEY и для чего нужен (если сделать рандомный ключ что будет)\n- если на каждом ререндере создавать уникальный KEY - это хорошо?\n- жизненный цикл компонента в реакте\n- в чем разница между обновлением и размонтированием (какие особенности с точки зрения перформанса)\n- что такое Виртуал ДОМ и как он помогает нам\n- расскажи про Utility Types (какие знаешь что они делают)\n- расскажи про Дженерики (extends)\n- any и unknow отличия\nЗАДАЧИ\n- рефактор реакта\nimport React, { useState } from \"https://esm.sh/react@18\";\nimport ReactDOM from \"https://esm.sh/react-dom@18\";\n\nfunction App() {\n  const getEmployees = () => {\n    return Array.from({ length: 50 }, (element, index) => ({\n      id: index,\n      name: 'Employee ' + index,\n      salary: 1000 + (Math.random() * 50).toFixed(0),\n    }));\n  };\n\n  const [employees] = useState(getEmployees());\n\n  const handleRemove = (index) => {\n    employees.splice(index, 1);\n  };\n\n  const RemoveButton = (props) => {\n    let { onClick } = props;\n\n    return <div onClick={onClick}>Remove</div>;\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <h1> Current employees:</h1>\n\n      {employees.map((value, index) => (\n        <div className=\"card\" key={value.salary}>\n          <div>\n            <div>name: {value.name} </div>\n            <div>salary: {value.salary}</div>\n          </div>\n\n          <RemoveButton onClick={() => handleRemove(index)} />\n        </div>\n      ))}\n    </div>\n  );\n}\nReactDOM.render(<App />,\ndocument.getElementById(\"root\"))\n\n-  вот результат\nimport React, { useState } from \"https://esm.sh/react@18\";\nimport ReactDOM from \"https://esm.sh/react-dom@18\";\n\nfunction App() {\n  const getEmployees = () => {\n    return Array.from({ length: 50 }, (element, index) => ({\n      id: index,\n      name: 'Employee ' + index,\n      salary: 1000 + (Math.random() * 50).toFixed(0),\n    }));\n  };\n\n  const [employees, setEmployees] = useState(() => getEmployees());\n\n  const handleRemove = (index) => {\n    setEmployees(employees.filter(item => item.id !== index))\n  };\n\n  const RemoveButton = ({onClick}) => {\n    return <button onClick={onClick}>Remove</button>;\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <h1> Current employees:</h1>\n\n      {employees.map((value, index) => (\n        <div className=\"card\" key={value.id}>\n          <div>\n            <div>name: {value.name} </div>\n            <div>salary: {value.salary}</div>\n          </div>\n\n          <RemoveButton onClick={() => handleRemove(value.id)} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nReactDOM.render(<App />,\ndocument.getElementById(\"root\"))"
      }
    ]
  },
  {
    "company": "Softnetix",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-02-19 17:18:30",
        "content": "2024-02-19 17:18:30\n Vitalya Bedik -> 2071074234:\n— Название компании: Softnetix (Софтнетикс) [2ой-этап - тех собес с разрабом, тимлидом и CTO]\n— Что было: лайфкодинг + немного теории\n— Успех собеса: ❌ (очень душный собес и ребята, молятся на каррирование и частичное применение)\n— Фидбек: предложили закончить собес, т.к. если не гуру каррирования, дальше не имеет смысла идти\n\n— Что было на собесе:\n- Что такое bind и какая у него сигнатура? Хотели слышать именно кейсы с частичным его применением....",
        "full_content": "2024-02-19 17:18:30\n Vitalya Bedik -> 2071074234:\n— Название компании: Softnetix (Софтнетикс) [2ой-этап - тех собес с разрабом, тимлидом и CTO]\n— Что было: лайфкодинг + немного теории\n— Успех собеса: ❌ (очень душный собес и ребята, молятся на каррирование и частичное применение)\n— Фидбек: предложили закончить собес, т.к. если не гуру каррирования, дальше не имеет смысла идти\n\n— Что было на собесе:\n- Что такое bind и какая у него сигнатура? Хотели слышать именно кейсы с частичным его применением.\n- Маленькая задача на частичное применение функции через bind\n- Что такое каррирование и частичное применение?\n- Напиши базовый пример каррирования?\n- В чем практическая польза каррирования и чем это полезно в проекте (нужно было реальные кейсы назвать)\n\nДалее пошел лайфкодинг где скинули полотно кода и начали просить дописать функционал на расширение существующего кода по SOLID с помощью каррирования,\nПостепенно усложняя задачи.\nСамое забавное что если не решаешь эту задачу с каррированием, то не проходишь даже на джуна👹"
      },
      {
        "timestamp": "2024-02-19 17:11:04",
        "content": "2024-02-19 17:11:04\n Vitalya Bedik -> 2071074234:\n— Название компании: Softnetix (Софтнетикс) [1ый-этап - скрининг с разрабом]\n— Ссылка на вакансию: https://rabota.by/vacancy/93225645?from=employer&hhtmFrom=employer\n— ЗП: 1400$+\n— Что было: теория + задачи (представь то-то, что будет)\n— Успех собеса: ✅\n\n— Теория:\n\n JS\n- отличие метода массива forEach от map\n- что делает метод reduce, какая сигнатура и что должен вернуть. что будет если не задать начальное значение. Что будет если не указать акку...",
        "full_content": "2024-02-19 17:11:04\n Vitalya Bedik -> 2071074234:\n— Название компании: Softnetix (Софтнетикс) [1ый-этап - скрининг с разрабом]\n— Ссылка на вакансию: https://rabota.by/vacancy/93225645?from=employer&hhtmFrom=employer\n— ЗП: 1400$+\n— Что было: теория + задачи (представь то-то, что будет)\n— Успех собеса: ✅\n\n— Теория:\n\n JS\n- отличие метода массива forEach от map\n- что делает метод reduce, какая сигнатура и что должен вернуть. что будет если не задать начальное значение. Что будет если не указать аккумулятор?\n- назови мутирующие методы массива\n- назови статические методы промисов\n- что такое статический метод класса в JS\n- можем ли вызвать у интанса класса этот статический метод, от которого он был создан\n- какая сигнатура у конструктора класса промис\n- Если мы там напишем resolve и ничего не будем возвращать, сможем ли мы потом достать эти данные (то, что в resolve передали)\n- Какие методы есть у экземпляра класса промис\n- Если поместить в переменную несколько then.then.then, в последний then поместить число и потом взять typeof от этой переменной, то какой тип данных будет?\n- Назови 1 любой принцип SOLID и расскажи подробно в контексте JS/React\n- для чего нужен метод bind? Что принимает?\n- Можем ли мы частично забиндить аргумент. Есть функция из 3ех аргументов нужно забиндить на 2, которые мы сразу знаем, как это сделать?\n\n React\n- зачем нужны ключи\n- в каких случаях можно использовать индекс у элементов массива, а в каких нельзя\n- можем ли мы в компонент который рендерится вне списка пробросить какой-то ключ (в любой реакт компонент можем ли пробросить)\n- что будет с компонентом если мы поменяли ключ, при этом ключ это наш локальный стейт, который мы меняем (increase) при нажатии на кнопку, т.е. он меняется на каждое нажатие кнопки\n- какие у реакта есть инструменты из коробки для оптимизации?\n- расскажи про useMemo и useCallback?\n- Вызывается ли функция, если мы обернем в useCallback? а в useMemo?\n- Есть компонент, который принимает N-ое число пропсов, в этом компоненте объявлена функция, которая не зависит от скоупа пропсов и других переменных. Она просто выводит в консоль true. И эта функция как handler пробрасывается на 5  компонентов вглубь, все дерево ререндерится при ререндере родителя. Как решить проблему без прибегания к возможностям реакта\n- Как работает React.memo? Как он сравнивает эти пропсы? Можем ли мы написать свой алгоритм сравнения?\n- Для чего нужен React.lazy? Какая у него сигнатура?\n- Какую метрику (параметр) React.lazy улучшает?\n- Каким образом webpack понимает, что ему какую-то часть кода нужно вынести в отдельную чанку?\n\nRedux\n- Какая сигнатура у редьюсера и что он возвращает?\n- Как мы изменяем state внутри reducer?\n- Мы мутируем стейт или каждый раз возвращаем новую ссылку на стейт?\n- Делаем shallow copy или глубокую? Что будет если сделать глубокую копию и какие проблемы есть у такого подхода?\n- Как можно работать с мемоизацией селекторов? И как это работает? Что мемоизируется?"
      }
    ]
  },
  {
    "company": "Funbox",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-06-18 19:16:28",
        "content": "2024-06-18 19:16:28\n Tonidevs -> 2071074234:\nFunBox\n— вакансия: hr написала\n— ЗП: вилка не указана, по рез-ту буду просить 260+\n— важность: важно\n— успех: было душно, жду фидбек - скорее нет.\n\nВопросы: \n1. Как попал в разработку \n2. что такое BEM, как понял для себя опиши своими словами\n3. jwt авторизация\n4. как работает кеширование в Nextjs (4 метода)\n5. eventLoop что такое\n6. в какой момент выполнится код из коллбека если в сетТаймаут у нас 0\n7. есть SPA приложение на фронте по URL a.com она х...",
        "full_content": "2024-06-18 19:16:28\n Tonidevs -> 2071074234:\nFunBox\n— вакансия: hr написала\n— ЗП: вилка не указана, по рез-ту буду просить 260+\n— важность: важно\n— успех: было душно, жду фидбек - скорее нет.\n\nВопросы: \n1. Как попал в разработку \n2. что такое BEM, как понял для себя опиши своими словами\n3. jwt авторизация\n4. как работает кеширование в Nextjs (4 метода)\n5. eventLoop что такое\n6. в какой момент выполнится код из коллбека если в сетТаймаут у нас 0\n7. есть SPA приложение на фронте по URL a.com она ходит в бек на URL b.com какие тут есть сложности(углубляемся и представляем что доступа к CORS - нет нам надо слать запросы, тут идет в помощь прокси сервер)\n\nЗАДАЧИ\n- что будет в консоли\nconst car1 = {\n  brand: 'Toyota',\n  model: 'Land Cruiser Prado',\n  options: {\n    transmission: 'automatic',\n  },\n};\nconst car2 = { ...car1 };\ncar2.brand = 'Derways';\ncar2.model = 'Shuttle';\ncar2.options.transmission = 'manual';\n\nconsole.log(car1.brand, car1.model, car1.options.transmission);\n// Toyota Land Cruiser Prado automatic\n- напиши решение в одну строку чтобы избавиться от finally\nlet loading = true;\n\nfetchData()\n  .then(data => processData(data))\n  .catch(err => processError(err))\n  .finally(() => loading = false);\n- чему будет равно, как избавить от этого и почему так работает\n  console.log(0.1 + 0.2 === 0.3)\n- что будет в консоли, если это два разных блока\nconsole.log(a() || b());\n\n\nconst x = a();\nconst y = b();\nconsole.log(x || y);\n- что будет в консоли\nconst obj = {};\nconst a = { x: 1 };\nconst b = { y: 2 };\nobj[a] = 10;\nobj[b] = 20;\nconsole.log(obj[a]);\n- напиши каррирование\nfunction add(num) {\n  return (y) => {\n    if (y === undefined) {\n      return num;\n    }\n    return add(num + y);\n  }\n}\nconsole.log(add(1)(2)(3)()); // 6\nconsole.log(add(4)(0)(8)()); // 12\nconsole.log(add(-1)(0)(1)()); // 0\n- напиши реакт компонент \\\n/**\n * TODO\n * 1. Добавление любого количества инпутов по кнопке\n * 2. Во время ввода во всех инпутах проводить валидацию.\n * 3. Если input.value везде \"react\", то кнопка \"Сохранить\"\n *    должна стать disabled={false}\n */\nconst validate = (item: string) => item === \"react\";\nconst Form = () => {\n  return (\n    <form>\n      <input value=\"vue\" className=\"input\" />\n      <input value=\"angular\" className=\"input\" />\n      <div className=\"controls\">\n        <button className=\"button\" type=\"button\">\n          Добавить инпут\n        </button>\n        <button className=\"button\" type=\"button\" disabled={true}>\n          Сохранить\n        </button>\n      </div>\n    </form>\n  );\n};"
      },
      {
        "timestamp": "2024-06-14 08:07:05",
        "content": "2024-06-14 08:07:05\n Сергей -> 2071074234:\nFunBox\n- Вакансия https://zhukovsky.hh.ru/vacancy/97121069?hhtmFrom=employer_vacancy_responses\n- ЗП 250к+ назвал\n- Успех: ?\n\nЗадача была одна по сути\n1. Написать функцию, которая соберет города с одинаковыми буквами в один массив. Решение на скрине\n\nТакже была максимально простая задача на EventLoop, таких просытх я еще не видел\n\nВопросы:\n1. Как попал в разработку\n2. SOLID, расшифровка\n3. flex и grid их разницу, что и где использовал\n4. Специфичность се...",
        "full_content": "2024-06-14 08:07:05\n Сергей -> 2071074234:\nFunBox\n- Вакансия https://zhukovsky.hh.ru/vacancy/97121069?hhtmFrom=employer_vacancy_responses\n- ЗП 250к+ назвал\n- Успех: ?\n\nЗадача была одна по сути\n1. Написать функцию, которая соберет города с одинаковыми буквами в один массив. Решение на скрине\n\nТакже была максимально простая задача на EventLoop, таких просытх я еще не видел\n\nВопросы:\n1. Как попал в разработку\n2. SOLID, расшифровка\n3. flex и grid их разницу, что и где использовал\n4. Специфичность селекторов в CSS\n5. Тесты, какие писал, как к ним относишься (они пишут тесты)\n6. Отличия классовых компонентов от функциональных\n7. Что такое полиморфизм и инкапсуляция\n8. Что такое хук, какие знаешь, можно рассказать про правила хуков\n9. Что мы не можем написать на функциональных компонентах (Еррор баундари)\n10. Зачем нам нужны Стейтменеджеры, с какими знаком, когда бы не стал использовать стейтменеджер\n11. Какие преимущества и недостатки Redux знаешь\n12. Опционально спрашивали по резюме, как доставляли приложение до клиента и про CI/CD"
      }
    ]
  },
  {
    "company": "Вирту Системс",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-07-18 10:33:53",
        "content": "2024-07-18 10:33:53\n Alehandro¯\\_(ツ)_/¯ -> 2071074234:\n- компания: Вирту Системс\n- вакансия:  https://perm.hh.ru/vacancy/101425848\n- ЗП: не обсуждали\nВопросы: \n- где что и как работал, очень подробный спрос по работе, как взаимодействие с бэком проходило.\n- есть модалка, и нужно её через родителя закрывать, как этот процесс происходит, какие события под капотом, как в этом случае используется useEffect\n- есть компонент, со стейтом и приходит картинка с одним и тем же названием, как нам делать пе...",
        "full_content": "2024-07-18 10:33:53\n Alehandro¯\\_(ツ)_/¯ -> 2071074234:\n- компания: Вирту Системс\n- вакансия:  https://perm.hh.ru/vacancy/101425848\n- ЗП: не обсуждали\nВопросы: \n- где что и как работал, очень подробный спрос по работе, как взаимодействие с бэком проходило.\n- есть модалка, и нужно её через родителя закрывать, как этот процесс происходит, какие события под капотом, как в этом случае используется useEffect\n- есть компонент, со стейтом и приходит картинка с одним и тем же названием, как нам делать перерисовку (ререндера из стейта нет) \n\nКод такой же как и был на данном собесе: https://t.me/c/2071074234/489/42997\nТолько у меня ещё много вопросов по спреад операторам, когда их лучше использовать когда нет\nтакже если у нас есть \nconst a = [10, 3, 5, 5, 1];\nconst b = a.sort();\nперезапишется ли а и b, как написать так, чтобы не мутировалось"
      },
      {
        "timestamp": "2024-07-17 14:59:23",
        "content": "2024-07-17 14:59:23\n Илья -> 2071074234:\nВирту Системс\n- вакансия: https://perm.hh.ru/vacancy/101425848\n- зп 250k +\n\nВопросы: \n- Над какими проектами работал\n- Что использовали  для форм и что для валидации\n- Как в Zod валидироваить одно поле относительного другого (метод refine)\n- Все про useEffect со всеми тонкостями\n- Нужно было описать как бы я делал функционал модалки\n- Представь : у нас есть компонент со стейт и приходит картинка и как нам делать перерисовку,если у картинки одно и тоже наз...",
        "full_content": "2024-07-17 14:59:23\n Илья -> 2071074234:\nВирту Системс\n- вакансия: https://perm.hh.ru/vacancy/101425848\n- зп 250k +\n\nВопросы: \n- Над какими проектами работал\n- Что использовали  для форм и что для валидации\n- Как в Zod валидироваить одно поле относительного другого (метод refine)\n- Все про useEffect со всеми тонкостями\n- Нужно было описать как бы я делал функционал модалки\n- Представь : у нас есть компонент со стейт и приходит картинка и как нам делать перерисовку,если у картинки одно и тоже название(то есть ререндера из-за стейта не будет). Ответ: добавить query параметр в запрос либо написать кастомный forceUpdate\n- Представь: у нас два проекта банка и у них есть что-то общие( функционал и т.д),то чтобы ты делал. Ответ: вынес бы отдельно в npm пакет.\n- Был вопрос про npm link\n- Вопрос про паттерны : singleton и Наблюдатель \n\nЗадачи: \n1. Что будет в консоль логе\nimport styles from './header.module.css'\n\n<h1 className = {styles.h1}></h1>\n\nconsole.log(styles)\n2. Рассказать как бы делал методы в классе Store\n\nconst store = new Store()\n\nи  store должен иметь методы set,get,subscribe и unsubscribe \n\nclass Store {\n  constructor() {\n    this.state = {};\n    this.listeners = [];\n  }\n\n  set(newState) {\n    this.state = {...this.state, ...newState};\n    this.listeners.forEach(listener => listener());\n  }\n\n  get() {\n    return this.state;\n  }\n\n  subscribe(listener) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== listener);\n    }\n  }\n\n  unsubscribe(unsubscribeFunction) {\n    unsubscribeFunction();\n  }\n}"
      }
    ]
  },
  {
    "company": "Ооо Ртк",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-02-14 07:56:44",
        "content": "2025-02-14 07:56:44\n Aintripin -> 2071074234:\nКомпания: ООО РТК. 2 этап (от 13.02.2025)\nВакансия: frontend-разработчик; https://hh.ru/vacancy/116445187\nЗП: 150,000 на позицию сеньёра, \"200,000 с учётом KPI\". Я просил 560, потом 251,500\n\n📹 Ссылка на запись: https://www.youtube.com/watch?v=Kmz8e7bF4O8&ab_channel=StevenWalker\n\nСразу скажу, что записалась только первая часть этого второго интервью, после чего мне, из-за проблем со стримом, пришлось перезайти. По этой причине второй части нет. Первая...",
        "full_content": "2025-02-14 07:56:44\n Aintripin -> 2071074234:\nКомпания: ООО РТК. 2 этап (от 13.02.2025)\nВакансия: frontend-разработчик; https://hh.ru/vacancy/116445187\nЗП: 150,000 на позицию сеньёра, \"200,000 с учётом KPI\". Я просил 560, потом 251,500\n\n📹 Ссылка на запись: https://www.youtube.com/watch?v=Kmz8e7bF4O8&ab_channel=StevenWalker\n\nСразу скажу, что записалась только первая часть этого второго интервью, после чего мне, из-за проблем со стримом, пришлось перезайти. По этой причине второй части нет. Первая записалась тоже не очень, но всё, что есть\n\nПервый этап: https://t.me/c/2071074234/489/103719\n\nВкратце: второй этап заключался в шеринге окна браузера, в котором в одной вкладке у меня был их сайт, а во второй в VS Code-онлайн сам код. Проходились по сайту, преимущественно по модалке, где обговаривали моменты\n\n❓ Какие вопросы можно спросить:\n\n0. По поводу сервака: почему не ВПС (ВПС — кусок сервера тебе, ВДС — машина полностью)\n1. На каком протоколе VPN (WireGuard, OpenVPN, VLESS, ...)\n2. Если будет показывать ту самую модалку, в качестве своего экспертного мнения можно выдать, что на версии ПК оно непрактично тем, что кнопка инпута растянута на весь экран, разные стили input'ов. Плюс, излишние скроллы: по горизонтали точно, по вертикали тоже можно сказать\n3. В продолжение по странице с модалкой: полнейшее отсутствие адпатива: во-первых, нужно перезагружать сайт, чтобы оно подтянулось, что странно для меня. Второе — сам UI был свёрстан на мефедроне.JS\n4. Далее по этому input'у: можно там прикреплять медиа (картинки). В связи с этим вопрос: какие форматы (PNG, JPEG, GIF, ...) пропускает? Что будет, если закинуть .txt или word'овский файл? \n5. Есть ли ограничения по весу тех картинок?\n6. Всё по этой же форме: когда submit'тим, там как запрос проходит? \n7. Он ответит, что по post, отсюда вопрос: как построено вокруг этой post-системы всё? (Кстати, вот API: http://213.139.211.185:5071/blog/post)\n8. Как выглядит post-запрос отправки? Что в него должно входить? Какие заголовки? Что в body пишется? Как подписаны изображения?\n9. Т.к. представленное на экране — вещь интересная, вопрос: \"за какой промежуток времени было свёрстано это чудо?\"\n10. Когда придумывали всё это, почему сразу не разобрались в адаптиве и как он будет реализован?\n11. На форме есть отдел, где можно при создании формы, навешивать (хэш?)тэги (типо, выбирать их, там dropdown-меню); отсюда вопрос: мб можно было бы добавить кнопку или ещё чё для сброса этих тегов\n\n💻 По коду (код будет в конце, но тут моменты тоже опишу): \n0. Чем-то можно пользоваться? Можно ли пользоваться нейронкой? Мне разрешил, спросил у него, какая любимая. Потом рассказал, что у DeepSeek получилось выпытать рецепт метамфетамина и C4. Пропустил возможность предложить заколлабиться и уйти во все тяжкие\n1. В коде UI-кит; почему не свой?\n2. Почему у их модалки всё лепится в одном .tsx, а не разбито по кускам? (было бы удобнее)\n3. под конец собеса сделал коммент // нужно переписать всё в самом верху\n4. Сделать вот так:\nconst handleSelectTheme = (event:\nChangeEvent<HTMLSelectElement>)\nТипо, так проще будет\n5. const modules вынести за react-компонент\n6. \nconst selectedThemelds = selectedThemes.split(,). map(Number) <=\nвот тут можно просто Number передать, плюс не типизировать Item, как String (ts подтянет автоматом)\n7.\nconst selectedThemesSet = new Set(selectedThemeslds)\nconst filteredThemes = data?.data.filter(theme =>\nselectedThemesSet.has(theme.id)\nТут includes требует n кол-ва итераций, а щас будет O(1) сложность при фильтрации"
      },
      {
        "timestamp": "2025-02-07 06:20:18",
        "content": "2025-02-07 06:20:18\n Aintripin -> 2071074234:\nКомпания: ООО РТК. 1 этап\nВакансия: frontend-разработчик; https://hh.ru/vacancy/116445187\nЗП: 150,000 на позицию сеньёра, \"200,000 с учётом KPI\"\n\nВкратце: финансирование околонулевое, в написании проекта принимали участие такие же ебланы, в плане компетентности, как и я, поэтому их всех уволили и остался один чел (лид) на команде, который, видимо, спит по часу в неделю. Это был первый этап, где показывали сам проект и его проблемы, хотели услышать с ...",
        "full_content": "2025-02-07 06:20:18\n Aintripin -> 2071074234:\nКомпания: ООО РТК. 1 этап\nВакансия: frontend-разработчик; https://hh.ru/vacancy/116445187\nЗП: 150,000 на позицию сеньёра, \"200,000 с учётом KPI\"\n\nВкратце: финансирование околонулевое, в написании проекта принимали участие такие же ебланы, в плане компетентности, как и я, поэтому их всех уволили и остался один чел (лид) на команде, который, видимо, спит по часу в неделю. Это был первый этап, где показывали сам проект и его проблемы, хотели услышать с моей стороны оценку и т.д. И больше вопросов задавал я\n\nТем не менее, также спрашивали про:\n\n0. По опыту, компаниям, технологиям, которые там использовались (как и чё делали)\n1. какие UI-киты использовал\n2. Работал с сокетами? Чё использовал для работы с ними?\n3. Оптимизация на проекте: как смотрели (тут, скорее, не про lazy loading, а про такие вещи, как Sentry, LightHouse, WebPageTest и прочее)\n4. Сборщики использовал/нет? Настраивал?\n5. Чё такое FSD?\n6. С докером работал?\n7. CodeSpaces (от GitHub) — слышал чё это? (короче, есть докер для разворачивания проектов локально, а на CS — та же самая идея, но для коллаборации над проектом в облаке, типо докер в облаке)\n8. SWR — знаешь чё это?\n9. По чему взаимодействовал с бэком (REST)\n10. Про TCP и WS вопрос был\n11. Как относишься к CSS Nesting\n\nЕсли пойдёте (не стоит), вопросы можно задать от себя следующие:\n\n1. Какие сейчас стоят задачи на проекте?\n2. Что используете для создания форм (чел жаловался на формы на сайте, но у них сложных нет)\n3. Попросить открыть package.json, попросить глянуть библиотеки\n4. Есть ли мониторинг нагрузки?\n5. Что планируете выбрать для мониторинга нагрузки?\n6. Когда релизы? Когда демо?\n7. Размер команды, которую планируется набрать? Из кого она состоит?\n8. У них используется NextJS, отсюда вопрос: \"насколько мощные сервера для SSR?\", \"кто эти сервера выбирал?\"\n9. Как проходит обсуждение API фронта и бэка\n10. Есть ли аналитика? (По типу, клики пользователя, сколько последний проводит на странице и какие страницы чаще посещает)\n11. Откуда приходят фичи? Кто их инициатор?\n\nБонусные вопросы в их сторону:\n\n1. Как стать таким же опытным спецом, как он?\n2. Собираетесь ли вы играть по пятницам в настолки?\n3.Есть ли девушки в офисе?\n4. Хочет ли он создать свой стартап?\n5. Планируется ли нанятие девушек в офис для снижения нагрузки?\n6. Хочет ли он заколлабиться на стартапе со мной и перестать работать на дядю\n7. Смотрел ли ты форсаж? Как к нему относишься?\n8. Можно ли будет жить у них в офисе? Есть ли там душ?"
      }
    ]
  },
  {
    "company": "Теле2",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-06-12 08:53:23",
        "content": "2024-06-12 08:53:23\n Tonidevs -> 2071074234:\nТЕЛЕ2\nЗП: 150-200 точно не помню\nвопросы\n- назови плюсы и минусы микрофронтендов \n- способы загрузки singletone отличие от lazy\n- плюсы и минусы FSD\n- как работает браузер (какой есть механизм до DNS когда мы вбиваем адрес, что первое у нас подключается до DNS) про host \n- механизм соединения клиент-сервер\n- TLS TCP - что из себя представляет\n- отличия HTTP от HTTPS\n- как TLS подключается когда ты используешь HTTPS\n- что такое DOM и как работает(как с...",
        "full_content": "2024-06-12 08:53:23\n Tonidevs -> 2071074234:\nТЕЛЕ2\nЗП: 150-200 точно не помню\nвопросы\n- назови плюсы и минусы микрофронтендов \n- способы загрузки singletone отличие от lazy\n- плюсы и минусы FSD\n- как работает браузер (какой есть механизм до DNS когда мы вбиваем адрес, что первое у нас подключается до DNS) про host \n- механизм соединения клиент-сервер\n- TLS TCP - что из себя представляет\n- отличия HTTP от HTTPS\n- как TLS подключается когда ты используешь HTTPS\n- что такое DOM и как работает(как строится)\n- механизм до рендера страницы - название и как работает(механизм оптимизации)\n- js - это компиляция или интерпретация, в чем разница\n- JIT компиляция Just In Time\n- как JS работает с точки зрения компиляции\n- с точки зрения загрузки скриптов (что блокирует загрузку а что нет)\n- async и defer - отличия \n- когда ты написал код на TypeScript что происходит дальше\n- что такое контекст\n- что такое прототип и прототипное наследование\n- как работает декремент и инкремент\n- отличия реакта от вью (спросит если есть вью в резюме) \n- с точки зрения жизненного цикла отличия реакта от вью\n- расскажи про жизненный цикл в реакте\n- что такое Элемент и что такое Компонент (рассказать про отличия)\n- что такое JSX\n- с точки зрения потока данных отличия реакта(однопоточный) от вью(двунаправленный)\n- что такое Reconcilacion в реакт\n- что такое чистая функция\n- что такое useEffect\n- какие хуки ещё знаешь и когда использовал\n- когда использовать useMemo и useCallback\n- \nзадачи\n[ВСЕ ВОПРОСЫ на JS](https://codesandbox.io/p/sandbox/js-exam-forked-xxd3fh?file=%2Fsrc%2Findex.mjs%3A158%2C1-169%2C33)\n- что выведет в консоль\n// let a = 2;\n// let b = \"2\";\n// let c = 50;\n// let x = null;\n// let y = undefined;\n// let z = 0;\n// console.log(a == b); true\n// console.log(a + b); \"22\"\n// console.log(x === y); false\n// console.log(x == y); true\n// console.log(x == z); false\n// console.log(x === z); false\n// console.log(a + +(+c)); 52\n// console.log(++a + +c++); 53\n// console.log(a + ++c); 53\n// console.log(++a + c + +a); 56\n// console.log(x > 0); false\n// console.log(x == 0); false\n// console.log(x >= 0); true\n- прокомментируй что тут происходит\nfunction fun(val) {\n  console.log(val);\n  if (val == \"0\") { // сравнение со строкой, т.к сработает приведение типов\n    console.log(\"done\");\n    return;\n  }\n  val = val--; // как работает префикс, оставить просто декремент\n  fun(val);\n}\nlet val = 10;\nfun(val);\n\n// что будет если выпусть в прод? - перепелнение стека\n// какая будет ошибка при переполнение стека? - в Хроме будет: **Uncaught RangeError: Maximum call stack size exceeded**\n\n- что будет в консоли и почему \nconst obj = {\n  valueOf() {\n    return 1;\n  },\n  toString() {\n    return \"100\";\n  },\n};\nconsole.log(obj + 1); 2\nconsole.log(`${obj}`); 100\nconsole.log(Number(obj)); 1\nconsole.log(String(obj)); 100\n\n- на реакт напиши счетчик\nexport default function App() {\n  const [count, setCount] = useState(0);\n  const handleDec = () => {\n    if (count === 0) return;\n    setCount((prev) => prev - 1);\n  };\n  const handleInc = () => {\n    if (count > 9) return;\n    setCount((prev) => prev + 1);\n  };\n  return (\n    <div className=\"App\">\n      <h1>Hello from T2 Interview</h1>\n      {count}\n      <button onClick={handleInc}>+</button>\n      <button onClick={handleDec}>-</button>\n    </div>\n  );\n}\n\n- что будет в консоли\nimport { useEffect, useState } from \"react\";\nconst A = ({ children }) => {\n  console.log(\"A\");\n  const [state, useState] = useState(0);\n  useEffect(() => {\n    setState((state) => state + 1);\n  }, []);\n  return children;\n};\nconst B = () => {\n  console.log(\"B\");\n  return <C />;\n};\n\nconst C = () => {\n  console.log(\"C\");\n  return null;\n};\n\nconst D = () => {\n  console.log(\"D\");\n  return null;\n};\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello from T2 Interview</h1>\n      <A>\n        <B />\n      </A>\n      <D />\n    </div>\n  );\n}"
      },
      {
        "timestamp": "2024-02-12 16:14:51",
        "content": "2024-02-12 16:14:51\n Александр Молодов -> 2071074234:\nКомпания: теле2\nСсылка на вакансию: hr сама написала.\nЗарплата: от 250\nРезультат: Собеседующий сказал подготовится к алго секции и через месяц прийти снова)\n\nВначале были вопросы про опыт, команду и процессы и сразу эта задача\n/\n * Дан двумерный массив (матрица), необходимо\n * повернуть матрицу\n * \n * Вход: \n  [1,   2,  3,  4,  5]           \n  [6,   7,  8,  9, 10]    \n  [11, 12, 13, 14, 15]\n  [16, 17, 18, 19, 20]\n  [21, 22, 23, 24, 25]  \n  \n ...",
        "full_content": "2024-02-12 16:14:51\n Александр Молодов -> 2071074234:\nКомпания: теле2\nСсылка на вакансию: hr сама написала.\nЗарплата: от 250\nРезультат: Собеседующий сказал подготовится к алго секции и через месяц прийти снова)\n\nВначале были вопросы про опыт, команду и процессы и сразу эта задача\n/\n * Дан двумерный массив (матрица), необходимо\n * повернуть матрицу\n * \n * Вход: \n  [1,   2,  3,  4,  5]           \n  [6,   7,  8,  9, 10]    \n  [11, 12, 13, 14, 15]\n  [16, 17, 18, 19, 20]\n  [21, 22, 23, 24, 25]  \n  \n  Выход:\n  [21, 16, 11,  6,  1]           \n  [22, 17, 12,  7,  2]    \n  [23, 18, 13,  8,  3]\n  [24, 19, 14,  9,  4]\n  [25, 20, 15, 10,  5]  \n */\n\nconst matrix = [\n  [1, 2, 3, 4, 5],\n  [6, 7, 8, 9, 10],\n  [11, 12, 13, 14, 15],\n  [16, 17, 18, 19, 20],\n  [21, 22, 23, 24, 25],\n];\n\nconst getTransposedMatrix = (matrix) => {\n  const result = [];\n  / писать ниже этой строки*/\n\n  return result;\n};\n\nmatrix.forEach(console.log);\nconsole.log(\"============================\");\ngetTransposedMatrix(matrix).forEach(console.log);"
      }
    ]
  },
  {
    "company": "ООО Студия",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-10-29 13:16:55",
        "content": "2024-10-29 13:16:55\n Сергей -> 2071074234:\n- Компания: Студия Т_Г\n- ЗП: сказал от 250к\n- Вакансия: https://nn.hh.ru/vacancy/108868097?hhtmFrom=employer_vacancies\n- Вопросы : \nВ целом собес на этот похож https://t.me/c/2071074234/489/60430\n\nЗадача от туда тоже была\n\n- про опыт(почему MobX-State-Tree, а не редакс)\n- специфичность селекторов\n- псевдоклассы/псевдоэлементы\nЗадачки\nconst convertObj = (masObj) => {\n  const res = {};\n  masObj.forEach(obj => {\n    for (let key in obj) {\n      if (!res[ke...",
        "full_content": "2024-10-29 13:16:55\n Сергей -> 2071074234:\n- Компания: Студия Т_Г\n- ЗП: сказал от 250к\n- Вакансия: https://nn.hh.ru/vacancy/108868097?hhtmFrom=employer_vacancies\n- Вопросы : \nВ целом собес на этот похож https://t.me/c/2071074234/489/60430\n\nЗадача от туда тоже была\n\n- про опыт(почему MobX-State-Tree, а не редакс)\n- специфичность селекторов\n- псевдоклассы/псевдоэлементы\nЗадачки\nconst convertObj = (masObj) => {\n  const res = {};\n  masObj.forEach(obj => {\n    for (let key in obj) {\n      if (!res[key]) {\n        res[key] = obj[key]\n      }\n    }\n  })\n  return res\n}\n\nconst objects = [\n  { foo: 5, bar: 6 },\n  { foo: 13, baz: -1 } // foo - повторяющийся ключ\n]\nconsole.log(convertObj(objects))\n\n// Пример работы\n// const objects = [\n//   { foo: 5, bar: 6 },\n//   { foo: 13, baz: -1 } // foo - повторяющийся ключ\n// ];\n\n// zip(objects); // { foo: 5, bar: 6, baz: -1 }w"
      },
      {
        "timestamp": "2024-09-05 13:06:29",
        "content": "2024-09-05 13:06:29\n Timofei Syromiatnikov -> 2071074234:\n— Название: ООО Студия Т_Г\n— Вакансия: https://nn.hh.ru/vacancy/105745106\n— ЗП: озвучил 280к\n— Вопросы:\n1) Про процессы работы в команде\n2) Расскажи специфичность селекторов CSS\n3) Отличие Object.hasOwnProperty от for of, for in\n4) В чем отличие примитивных типов данных от ссылочных?\n\n— Задачи:\n1) Напиши функцию invert, которая будет принимать объект и менять его ключи на значения, а значения на ключи, и в конце возвращать этот объект\n// ...",
        "full_content": "2024-09-05 13:06:29\n Timofei Syromiatnikov -> 2071074234:\n— Название: ООО Студия Т_Г\n— Вакансия: https://nn.hh.ru/vacancy/105745106\n— ЗП: озвучил 280к\n— Вопросы:\n1) Про процессы работы в команде\n2) Расскажи специфичность селекторов CSS\n3) Отличие Object.hasOwnProperty от for of, for in\n4) В чем отличие примитивных типов данных от ссылочных?\n\n— Задачи:\n1) Напиши функцию invert, которая будет принимать объект и менять его ключи на значения, а значения на ключи, и в конце возвращать этот объект\n// Входные данные { 1: 'a' }\n// Ожидаем результат { 'a': 1 }\n\nСобес длился 30 минут, у собеседующих еще до лайв кодинга ко мне абсолютно никаких вопросов не было, ни софтовых, ни технических. Их эйчар по 30 раз переспрашивала, есть ли ко мне вопросы, они говорили нет... Как будто их заставляют собесить. Минут 10 только рассказывал про себя + спрашивал их. По проекту ничего не рассказали, ни по команде, ни по чему. Собеседующая просто в моменте сказала \"всё я думаю на этом достаточно\" и убежала. Спросил у эйчар, которая тоже сидела на звонке, что за суета?) Она ответила, они собесят впервые на сеньора, обычно они только джунов собесили"
      }
    ]
  },
  {
    "company": "Clevertec",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-07-15 12:48:08",
        "content": "2025-07-15 12:48:08\n Daniil Daniil -> 2071074234:\nКомпания: Clevertec (Аутсорс)\n\nВначале рассказываешь о себе\nВопросы:\n1. Что драйвит и нравится?\n2. Самые сложные задачи?\n3. Что наоборот не нравится в работе?\n4. Расскажи про факапы \nЗадачи:\nчто будет в консоли\n\n///////////////////////////////\n\nlet phrase = \"Hello\";\n\nif (true) {\n  let user = \"John\";\n  \n \n}\n\n function sayHi() {\n    console.log(`${phrase}, ${user}`);\n  }\n\nsayHi();\n\n///////////////////////////////\n\nlet foo = {\n  baz: () => {\n    con...",
        "full_content": "2025-07-15 12:48:08\n Daniil Daniil -> 2071074234:\nКомпания: Clevertec (Аутсорс)\n\nВначале рассказываешь о себе\nВопросы:\n1. Что драйвит и нравится?\n2. Самые сложные задачи?\n3. Что наоборот не нравится в работе?\n4. Расскажи про факапы \nЗадачи:\nчто будет в консоли\n\n///////////////////////////////\n\nlet phrase = \"Hello\";\n\nif (true) {\n  let user = \"John\";\n  \n \n}\n\n function sayHi() {\n    console.log(`${phrase}, ${user}`);\n  }\n\nsayHi();\n\n///////////////////////////////\n\nlet foo = {\n  baz: () => {\n    console.log(this);\n  }\n};\n\nfoo.baz();\n \nlet bar = foo.baz;\n\nbar()\n\n//////////////////////////;;////////\n\nconst a = { name: 'first object' };\nconst b = { name: 'second object' };\n\nfunction showThis() {\n  console.log(this);\n}\n\nconst bindMe = showThis.bind(a).bind(b);\n\nbindMe();\n\n///////////////////////////////////\n\nclass Customer {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nCustomer.prototype.pay = function() {\n  console.log(`Чек от месье ${this.name}`);\n};\n\nconst Ivan = new Customer(\"Ivan\");\n  \nIvan.pay();\n\ndelete Customer.prototype.pay;\n\nIvan.pay();\n\n////////////////////////////////////\n\nconsole.log(1);\n\nsetTimeout(() => console.log(2));\n\nPromise.resolve()\n  .then(() => console.log(3))\n  .then(() => console.log(4));\n\nsetTimeout(() => {\n  console.log(5)\n  Promise.resolve(6).then((item) => setTimeout(() => console.log(item)));\n}, 0);\n\nPromise.resolve().then(() => console.log(7));\n\nsetTimeout(() => {\n  Promise.resolve().then(() => console.log(8));\n  console.log(9);\n});\n\nconsole.log(10);\n\n//1, 10, 3, 7, 4, 2, 5, 9, 8, 6\n\nЗадача на рефакторинг:\nнадо будет еще сказать, что можно написать debounce, обернуть в try/catch, сделать loading(у меня обошлось без напсиания, просто устно сказал)\nУже отрефакторен\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport { fetchTasks } from './fetchTasks';\n\ntype ToDoListProps = {\n  items: Array<Record<string, string>>;\n};\n\nconst TODO_ITEMS = [\n  { id: '1', text: 'Полить цветы' },\n  { id: '2', text: 'Вынести мусор' },\n  { id: '3', text: 'Погулять с собакой' },\n]\n\nconst ToDoList = ({ items }: ToDoListProps) => {\n  return (\n      <ul>\n        {!!items.length &&\n          items.map(({id, text}) => <li key={id}>{text}</li>)}\n      </ul>\n  );\n};\n\nconst App = () => {\n  const [tasks, setTasks] = useState<ToDoListProps[]>([]);\n\n  const handleGetTasks = async (e: KeyboardEvent) => {\n    if (e.key === 'r') {\n      const tasks = await fetchTasks();\n      setTasks(tasks);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleGetTasks);\n\n    return () => document.removeEventListener('keydown', handleGetTasks)\n  },[]);\n\n  return (\n    <>\n      <h1>Ежедневный список дел:</h1>\n      <ToDoList\n        items={TODO_ITEMS}\n      />\n      <h2>Список дел на сегодня:</h2>\n      <ToDoList items={tasks} />\n    </>\n  );\n};\n\nexport default App;\n\nЗадача на JS:\n\n  Есть массив операций.\n  Необходимо операции отсортировать по дате и сгруппировать их по году, а в качестве \n  значений представить массивы c датами в формате MM-DD.\n  Пример результата:\n  result = {\n    \"2017\": [\n      \"07-31\",\n      \"08-22\"\n    ],\n    \"2018\": [\n      \"01-01\"\n      \"02-22\"\n    ]\n  }\n*/\n\nconst operations = [\n    { \"date\": \"2017-07-31\", \"amount\": \"5422\" },\n    { \"date\": \"2017-06-30\", \"amount\": \"5220\" },\n    { \"date\": \"2017-05-31\", \"amount\": \"5365\" },\n    { \"date\": \"2017-08-31\", \"amount\": \"5451\" },\n    { \"date\": \"2017-09-30\", \"amount\": \"5303\" },\n    { \"date\": \"2017-10-31\", \"amount\": \"5509\" },\n    { \"date\": \"2017-12-31\", \"amount\": \"5567\" },\n    { \"date\": \"2018-01-31\", \"amount\": \"5597\" },\n    { \"date\": \"2017-11-30\", \"amount\": \"5359\" },\n    { \"date\": \"2018-02-28\", \"amount\": \"5082\" },\n    { \"date\": \"2018-04-14\", \"amount\": \"2567\" }\n];\n\nfunction sortOperations(operations) {\n  const sortedItems =  operations.toSorted((a,b) => new Date(a.date) - new Date(b.date))\n\n  const result = {}\n  \n  for (const item of sortedItems) {\n    const [yr, mo, dy] = item.date.split('-')\n    \n    if(!result[yr]) {\n      result[yr] =[]\n    }\n    result[yr].push(`${mo}-${dy}`)\n  }\n  return result\n}\n\nsortOperations(operations)"
      },
      {
        "timestamp": "2025-06-16 12:02:16",
        "content": "2025-06-16 12:02:16\n Max -> 2071074234:\nClevertec\nhr написала\nЗп: от 200\nВопросы:\n\"Какие задачи тебе нравятся?\" \n\"Что для тебя в приоритете в команде?\"\n\"Какая интересная задача была?\"\n\"Расскажи про свой факап?\"\n\"какие редфлаги?\"\n\"какие хобби?\"\nfunction declaration  function expression стрелочные\nконтекст\nкак оптимизировать приложение ?\nкакими хуками пользуешься?\nEventloop\nTypeguard\ntype vs interface\nvirtual dom\nЗадачи:\n///////////////////////////////\n/ что выведет в консоль?\nlet phrase = \"Hello\"...",
        "full_content": "2025-06-16 12:02:16\n Max -> 2071074234:\nClevertec\nhr написала\nЗп: от 200\nВопросы:\n\"Какие задачи тебе нравятся?\" \n\"Что для тебя в приоритете в команде?\"\n\"Какая интересная задача была?\"\n\"Расскажи про свой факап?\"\n\"какие редфлаги?\"\n\"какие хобби?\"\nfunction declaration  function expression стрелочные\nконтекст\nкак оптимизировать приложение ?\nкакими хуками пользуешься?\nEventloop\nTypeguard\ntype vs interface\nvirtual dom\nЗадачи:\n///////////////////////////////\n/ что выведет в консоль?\nlet phrase = \"Hello\";\n\nif (false) {\n  var user = \"John\";\n}\n\n function sayHi() {\n    console.log(`${phrase}, ${user}`);\n  }\n  \nsayHi();\n// Hello, undefined\n\n///////////////////////////////\n\nlet foo = {\n  baz: function() {\n    console.log(this);\n  }\n};\n\nfoo.baz();\n \nlet bar = foo.baz;\n\nbar.bind(foo)();//undefined\n\n//////////////////////////////////\n\nconst a = { name: 'first object' };\nconst b = { name: 'second object' };\n\nfunction showThis() {\n  console.log(this);\n}\n\nconst bindMe = showThis.bind(a).bind(b);\n\nbindMe();// { name: 'first object' }\n\n///////////////////////////////////\n\nclass Customer {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nCustomer.prototype.pay = function() {\n  console.log(`Чек от месье ${this.name}`);\n};\n\nconst Ivan = new Customer(\"Ivan\");\n  \nIvan.pay();// Чек от месье Ivan\n\ndelete Customer.prototype.pay;\n\nIvan.pay(); // undefined\n\n////////////////////////////////////\n\nconsole.log(1);//\n\nsetTimeout(() => console.log(2));// ma1\n\nPromise.resolve()\n  .then(() => console.log(3))//mi 1\n  .then(() => console.log(4));//mi3\n\nsetTimeout(() => {\n  console.log(5)// ma2\n  Promise.resolve(6).then((item) => setTimeout(() => console.log(item)));\n}, 0);\n\nPromise.resolve().then(() => console.log(7));//mi2\n\nsetTimeout(() => {\n  Promise.resolve().then(() => console.log(8));\n  console.log(9);\n});\n\nconsole.log(10);\n// 1 10 3 7 4 2 5 9 8 6\n\n////////////////////////////////////\n/**\n  Есть массив операций.\n  Необходимо операции отсортировать по дате и сгруппировать их по году, а в качестве \n  значений представить массивы c датами в формате MM-DD.\n  Пример результата:\n  result = {\n    \"2017\": [\n      \"07-31\",\n      \"08-22\"\n    ],\n    \"2018\": [\n      \"01-01\"\n      \"02-22\"\n    ]\n  }\n*/\n// отрефакторить то, что написал \nconst operations = [\n    { \"date\": \"2017-07-31\", \"amount\": \"5422\" },\n    { \"date\": \"2017-06-30\", \"amount\": \"5220\" },\n    { \"date\": \"2017-05-31\", \"amount\": \"5365\" },\n    { \"date\": \"2017-08-31\", \"amount\": \"5451\" },\n    { \"date\": \"2017-09-30\", \"amount\": \"5303\" },\n    { \"date\": \"2018-03-31\", \"amount\": \"5654\" },\n    { \"date\": \"2017-10-31\", \"amount\": \"5509\" },\n    { \"date\": \"2017-12-31\", \"amount\": \"5567\" },\n    { \"date\": \"2018-01-31\", \"amount\": \"5597\" },\n    { \"date\": \"2017-11-30\", \"amount\": \"5359\" },\n    { \"date\": \"2018-02-28\", \"amount\": \"5082\" },\n    { \"date\": \"2018-04-14\", \"amount\": \"2567\" }\n];\n\nfunction sortOperations(operations) {\n  const sortedOper = operations.sort((a,b)=>{\n    return new Date(a.date) - new Date(b.date)\n  })\n  const result ={}\n  for(const operation of sortedOper ){\n    const dateP = operation.date.split('-')\n    const year = dateP[0]\n    const formDate = `${dateP[1]}-${dateP[2]}`\n    if(!result[year]){\n      result[year] = []\n    }\n    result[year].push(formDate)\n    \n  }\n  return result                       \n}\n\nsortOperations(operations)"
      }
    ]
  },
  {
    "company": "Киберлаб",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-08-16 11:21:53",
        "content": "2024-08-16 11:21:53\n twomadd -> 2071074234:\nКиберЛаб\n-вакансия: hr написала\n-зп 200к\nвопросы:\n1. Знаком ли с таким атрибутом contentEditable ? Для чего он нужен?\n2. Для чего нужны CSS переменные и приведи парочку примеров как использовать\n3. Чем отличается команда git merge от git rebase ?\n4. Какие доводилось писать тесты ? И какие библиотеки использовал\n5. В чем разница между null и undefiend ?\n6. Как можно проверить наличие свойства в объекте ?\n7. Что такое прототипы ?\n8. Какие знаешь самые ак...",
        "full_content": "2024-08-16 11:21:53\n twomadd -> 2071074234:\nКиберЛаб\n-вакансия: hr написала\n-зп 200к\nвопросы:\n1. Знаком ли с таким атрибутом contentEditable ? Для чего он нужен?\n2. Для чего нужны CSS переменные и приведи парочку примеров как использовать\n3. Чем отличается команда git merge от git rebase ?\n4. Какие доводилось писать тесты ? И какие библиотеки использовал\n5. В чем разница между null и undefiend ?\n6. Как можно проверить наличие свойства в объекте ?\n7. Что такое прототипы ?\n8. Какие знаешь самые актуальные методы массива ?\n9. Рассказать про reduce подробно\n10. Рассказать максимально подробно про useEffect\n\nЗадачи:\n\n// 1. Вернуть объект с ключами type из масива,\n// значение - массив элементов с таким type\n\n// 2. Вернуть объект с ключами type, а значение - объект\n// вида {count: количество, weight: суммарный вес}\n\n// eslint-disable-next-line no-unused-vars\nconst arr = [\n  { type: \"banana\", weight: 32 },\n  { type: \"apple\", weight: 24 },\n  { type: \"kiwi\", weight: 55 },\n  { type: \"banana\", weight: 44 },\n  { type: \"orange\", weight: 5 }\n];\n// {\n  const groupeBtType = (arr) =>{\n    return arr.reduce((acc,obj) =>{\n      const key = obj.type\n      return { ...acc, [key] : [...(acc[key] || []),obj]}\n      }\n     \n    },{})\n  }\n\n2.\n// Реализуйте функцию sum\n\nconst sum = () => {};\n\n// console.log(sum()); // Вернет 0\n// console.log(sum(1)()); // Вернет 1\n// console.log(sum(2)(3)()); // Вернет 5\n// console.log(sum(10)(7)(41)()); // Вернет 58\n\n3.\nsetTimeout(function timeout() {\n  console.log(\"Шаг 1\");\n}, 0);\n\nlet p = new Promise(function (resolve, reject) {\n  console.log(\"Шаг 2\");\n  resolve();\n});\n\np.then(function () {\n  console.log(\"Шаг 3\");\n});\n\nconsole.log(\"Шаг 4\");\n// 2 4 3 1\n\n4.\n\nimport { useEffect, useState, FC, PropsWithChildren } from \"react\";\n\n// Будет ли ререндериться компонент OtherFc?\nconst OtherFc = () => {\n  // console.log(\"render\");\n\n  return <div>2</div>;\n};\n\nconst MainFc: FC<PropsWithChildren> = ({ children }) => {\n  const [state, setState] = useState(0);\n  console.log(\"state\", state);\n\n  useEffect(() => {\n    setInterval(() => {\n      setState((prev) => prev + 1);\n    }, 1000);\n  }, []);\n\n  return <div>{children}</div>;\n};\n\nexport const App = () => (\n  <MainFc>\n    <OtherFc />\n  </MainFc>\n);\n\n5.\n\n// Что тут не так? Как оптимизировать этот код?\n\nimport { useEffect, useState, FC } from \"react\";\n\nconst data = {\n  name: \"54\",\n  age: 21,\n  info: 22\n};\n\nconst MainFc: FC<typeof data> = ({ name, ...rest }) => {\n  const [state, setState] = useState(0);\n\n  useEffect(() => {\n    setInterval(() => {\n      setState((prev) => prev + 1);\n    }, 1000);\n  }, []);\n\n  useEffect(() => {\n    // .... какие-то сложные вычисления\n  }, [rest]);\n\n  return <div>{state}</div>;\n};\n\nexport const App = () => <MainFc {...data} />;"
      },
      {
        "timestamp": "2024-03-27 16:44:57",
        "content": "2024-03-27 16:44:57\n Kirill N -> 2071074234:\nДополнение с 11.03 - 27.03\nКомпания: Minevrasoft 11.03 \nhttps://youtu.be/c2TDgGjVxcQ \n \nКомпания: про Айти ресурс от 12.03 \nhttps://youtu.be/tBrVrALlflE \n \nКомпания: КиберЛаб 12.03 \nhttps://youtu.be/Ayov7AAZ9zA \nКомпания: 16.03 \nhttps://youtu.be/g8awopYcbh4   \n \nКомпания: IT ONE 18 03 \nhttps://youtu.be/opoqwpzVRVo \n \nКомпания: Эвотека 19 03 \nhttps://youtu.be/pq64Y2e0-CQ \n \nКомпания: BAUM от 20 03 \nhttps://youtu.be/YR2G2tRzgJo \n \nКомпания: Сбер Техноло...",
        "full_content": "2024-03-27 16:44:57\n Kirill N -> 2071074234:\nДополнение с 11.03 - 27.03\nКомпания: Minevrasoft 11.03 \nhttps://youtu.be/c2TDgGjVxcQ \n \nКомпания: про Айти ресурс от 12.03 \nhttps://youtu.be/tBrVrALlflE \n \nКомпания: КиберЛаб 12.03 \nhttps://youtu.be/Ayov7AAZ9zA \nКомпания: 16.03 \nhttps://youtu.be/g8awopYcbh4   \n \nКомпания: IT ONE 18 03 \nhttps://youtu.be/opoqwpzVRVo \n \nКомпания: Эвотека 19 03 \nhttps://youtu.be/pq64Y2e0-CQ \n \nКомпания: BAUM от 20 03 \nhttps://youtu.be/YR2G2tRzgJo \n \nКомпания: Сбер Технологии 22 03 \nhttps://youtu.be/dm34hydCIIA \n \nКомпания: KTS 22 03 \nhttps://youtu.be/Nt177GK9LAE \n \nКомпания: KTS 27 03 \nhttps://youtu.be/QDi0AkDwwgw \n \nКомпания: Лемма 27 03 \nhttps://youtu.be/grfpac_XgvA"
      }
    ]
  },
  {
    "company": "CubeLab",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-07-13 09:07:57",
        "content": "2024-07-13 09:07:57\n Ярослав Мудрый -> 2071074234:\nCubeLab (тарологи)\n\n-вакансия: https://spb.hh.ru/vacancy/99741483\n-зп: 300k\n\nвопросы:\n-софтовые: почему меняешь работу, чего ждешь от команды, чего не хотел бы на новом месте.\n-как работает event loop\n-расскажи про ssr\n-расскажи как добавить разные теги для сео на разные страницы\n\nзадачи:\n\nстандартная задача на отображение счетчика на react, далее усложнение: показать количетво секунд проведенных на странице, не учитывая, то время, когда мы пере...",
        "full_content": "2024-07-13 09:07:57\n Ярослав Мудрый -> 2071074234:\nCubeLab (тарологи)\n\n-вакансия: https://spb.hh.ru/vacancy/99741483\n-зп: 300k\n\nвопросы:\n-софтовые: почему меняешь работу, чего ждешь от команды, чего не хотел бы на новом месте.\n-как работает event loop\n-расскажи про ssr\n-расскажи как добавить разные теги для сео на разные страницы\n\nзадачи:\n\nстандартная задача на отображение счетчика на react, далее усложнение: показать количетво секунд проведенных на странице, не учитывая, то время, когда мы переключимся на другой таб (если компонент-счетчик у нас на отдельном табе)\n\nimport React, { useState, useEffect } from 'react';\n\nconst TimeTracker = () => {\n  const [secondsSpent, setSecondsSpent] = useState(0);\n\n  useEffect(() => {\n    // Получаем время начала сессии или устанавливаем его, если оно ещё не задано\n    const startTime = localStorage.getItem('startTime') || Date.now();\n    localStorage.setItem('startTime', startTime);\n\n    // Интервал для обновления времени, проведённого на странице\n    const intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const timeElapsed = Math.floor((currentTime - startTime) / 1000);\n      setSecondsSpent(timeElapsed);\n    }, 1000);\n\n    return () => {\n      clearInterval(intervalId);\n      // Сохраняем текущее время, когда пользователь уходит со страницы\n      const endTime = Date.now();\n      const totalSpent = endTime - parseInt(startTime);\n      localStorage.setItem('totalTimeSpent', totalSpent);\n    };\n  }, []);\n\n  return (\n    <div>\n      <h1>Time You've Spent on This Page</h1>\n      <p>{secondsSpent} seconds</p>\n    </div>\n  );\n}\n\nexport default TimeTracker;\n \n\nзадача на проектирование: рассказать как спроектировал бы пошаговую систему бронирования и оплаты, как обработал бы ситуацию, когда несколько человек бронируют одно и то же время"
      },
      {
        "timestamp": "2024-07-10 00:49:11",
        "content": "2024-07-10 00:49:11\n Евгений Лямин -> 2071074234:\n— CubeLab\n— Вакансия: https://spb.hh.ru/vacancy/99741483\n— ЗП: сказал от 250\n— Проект:   lunaro.ru\n— Коментарий: зачем собес провводить, разложили бы свои таро на кандидата, у звезд спросили, духов вызвали)\n— Вопросы:\n1. По опыту, по процессам в команде, взаимодействие между командами, решение конфликтов\n2. Как определяешь нужен ли стейтменеджер проекту? если да то какой выберешь\n— Задачи:\n1. \n- реализовать страничку на которой отображается счетч...",
        "full_content": "2024-07-10 00:49:11\n Евгений Лямин -> 2071074234:\n— CubeLab\n— Вакансия: https://spb.hh.ru/vacancy/99741483\n— ЗП: сказал от 250\n— Проект:   lunaro.ru\n— Коментарий: зачем собес провводить, разложили бы свои таро на кандидата, у звезд спросили, духов вызвали)\n— Вопросы:\n1. По опыту, по процессам в команде, взаимодействие между командами, решение конфликтов\n2. Как определяешь нужен ли стейтменеджер проекту? если да то какой выберешь\n— Задачи:\n1. \n- реализовать страничку на которой отображается счетчик который показывает сколько времени вы находитесь на странице в секундах, коунтер который каждую секунду прибавляет 1.\n- продолжать счетчик если мы ушли со страницы и потом вернулись, тут порассуждать как мы можем сохранять накинуть вариантов \nimport React, { useState, useEffect } from 'react';\n\nfunction SecondCounter() {\n  const [counter, setCounter] = useState(0);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCounter(prevCounter => prevCounter + 1);\n    }, 1000);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  return (\n    <div>\n      <h1>Счетчик секунд</h1>\n      <p>Вы находитесь на этой странице: {counter} секунд</p>\n    </div>\n  );\n}\n\nexport default SecondCounter;"
      }
    ]
  },
  {
    "company": "Broad Apps",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-07-14 18:28:11",
        "content": "2025-07-14 18:28:11\n Ivan -> 2071074234:\nКомпания: Broad Apps Финал\nЗП: 250-300\n\nМинут на 20 созвон.\n\n1. Рассказали еще раз про проект.\n2. Какие ai решения используешь в работе?\n3. У нас есть функционал кторый нужно выкатить как можно скорее. Как оцениваешь по времени за сколько можно сделать?\n4. Почему интересен наш проект?\n5. Когда готов если будет оффер?",
        "full_content": "2025-07-14 18:28:11\n Ivan -> 2071074234:\nКомпания: Broad Apps Финал\nЗП: 250-300\n\nМинут на 20 созвон.\n\n1. Рассказали еще раз про проект.\n2. Какие ai решения используешь в работе?\n3. У нас есть функционал кторый нужно выкатить как можно скорее. Как оцениваешь по времени за сколько можно сделать?\n4. Почему интересен наш проект?\n5. Когда готов если будет оффер?"
      },
      {
        "timestamp": "2025-07-13 09:43:43",
        "content": "2025-07-13 09:43:43\n Ivan -> 2071074234:\nКомпания: Broad Apps\nЗП: 250-300\n\n1. Были опыт с Некстом и когда он нужен?\n2. Был ли опыт с 19 Реактом и что там использовал?\n3. Оптимизация фронтенд приложений.\n4. Про стейт менеджеры. Что бы выбрал сам?\n5. Про react query.\n6. Был ли опыт тимлидства?\n7. Всегда ли попадали в оценку? А если нет?\n8. Какие были инициативы от тебя?\n \nЗадача\n//что будет в консоли?\n// будет три вывода (сразу, через 1 секунду, через 2 секунды) в каждом случае [2,2,2]\nfor (let i ...",
        "full_content": "2025-07-13 09:43:43\n Ivan -> 2071074234:\nКомпания: Broad Apps\nЗП: 250-300\n\n1. Были опыт с Некстом и когда он нужен?\n2. Был ли опыт с 19 Реактом и что там использовал?\n3. Оптимизация фронтенд приложений.\n4. Про стейт менеджеры. Что бы выбрал сам?\n5. Про react query.\n6. Был ли опыт тимлидства?\n7. Всегда ли попадали в оценку? А если нет?\n8. Какие были инициативы от тебя?\n \nЗадача\n//что будет в консоли?\n// будет три вывода (сразу, через 1 секунду, через 2 секунды) в каждом случае [2,2,2]\nfor (let i = []; i.length < 3; i.push(2)) {\n setTimeout( () => {console.log(i)}, 1000 * i.length)\n}"
      }
    ]
  },
  {
    "company": "Bitronics Lab",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-02-26 18:58:45",
        "content": "2025-02-26 18:58:45\n Артем -> 2071074234:\nКомпания: BiTronics Lab\nЗП: до 200 К\n\nВопросы:\nКакие типы данных есть в JS\nnumber vs bigInt\nЗамыкание - приведи пример использования\nМеханизм сравнения VDOM с DOM какая сложность алгоритма\nPromise и его методы\nEvent Loop что это\nЗадача на Event Loop\nОтвет: \n'А' (синхронный код)\n'F' (синхронный код)\n'D' (Promise microtask)\n'E' (queueMicrotask)\n'B' (setTimeout - макрозадача)\n'С' (ответ от axios.get, если запрос выполнится успешно)\n\nКакие код ошибки знаешь ...",
        "full_content": "2025-02-26 18:58:45\n Артем -> 2071074234:\nКомпания: BiTronics Lab\nЗП: до 200 К\n\nВопросы:\nКакие типы данных есть в JS\nnumber vs bigInt\nЗамыкание - приведи пример использования\nМеханизм сравнения VDOM с DOM какая сложность алгоритма\nPromise и его методы\nEvent Loop что это\nЗадача на Event Loop\nОтвет: \n'А' (синхронный код)\n'F' (синхронный код)\n'D' (Promise microtask)\n'E' (queueMicrotask)\n'B' (setTimeout - макрозадача)\n'С' (ответ от axios.get, если запрос выполнится успешно)\n\nКакие код ошибки знаешь \nкак боришся с ними\nГде хранили JWT\nАунтификация vs Авторизация\nOauth что это\nЧто такое перегрузка функции в TS\nЧто делает keyof\nRedux vs Redux Toolkit\n\nЗадача:\nреализовать счетчик с кнопками стоп старт рестарт"
      },
      {
        "timestamp": "2025-02-25 18:39:06",
        "content": "2025-02-25 18:39:06\n Артем -> 2071074234:\nКомпания: BiTronics Lab (3 этап)\nЗП: до 200К\n\nСпросили как пообщался\nбыло комфортно или нет\nспросил про планы и чем хочешь заниматься",
        "full_content": "2025-02-25 18:39:06\n Артем -> 2071074234:\nКомпания: BiTronics Lab (3 этап)\nЗП: до 200К\n\nСпросили как пообщался\nбыло комфортно или нет\nспросил про планы и чем хочешь заниматься"
      }
    ]
  },
  {
    "company": "Unybrands",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-07-13 08:26:29",
        "content": "2024-07-13 08:26:29\n Ярослав Мудрый -> 2071074234:\nunyBrands финал\n- вакансия: https://hh.ru/vacancy/102276622\n- зп: 160к\n\nВопросы:\nКакие библиотеки использовал для работы с react?\nПользовался ли SSR?\nОтличия hook от hoc.\nМожет ли кастомный хук возвращать значение?\nЗадача: написать hoc для получения данных и вывода списка элементов, которые можно выделять по клику и снимать выделение по клику. Решение не сохранил.",
        "full_content": "2024-07-13 08:26:29\n Ярослав Мудрый -> 2071074234:\nunyBrands финал\n- вакансия: https://hh.ru/vacancy/102276622\n- зп: 160к\n\nВопросы:\nКакие библиотеки использовал для работы с react?\nПользовался ли SSR?\nОтличия hook от hoc.\nМожет ли кастомный хук возвращать значение?\nЗадача: написать hoc для получения данных и вывода списка элементов, которые можно выделять по клику и снимать выделение по клику. Решение не сохранил."
      },
      {
        "timestamp": "2024-07-11 10:01:31",
        "content": "2024-07-11 10:01:31\n Ярослав Мудрый -> 2071074234:\nUnyBrands, тех собес\n\n-Вакасния: https://hh.ru/vacancy/102276622\n-ЗП: 160k\n\nВопросы:\n- что происходит после вводе адреса в строку бразуера\n- как в js сравнивать дробные числа (пробелма с хранением чисел с плавающей запятой)\n- твоя идеальная команда\n- почему меняешь работу\n- какие интересне задачи делал\n\nЗадачи:\nпоиск индекса макс элемента\n\n    // Инициализация переменных для хранения максимального значения и его индекса\n    let maxIndex = 0;\n   ...",
        "full_content": "2024-07-11 10:01:31\n Ярослав Мудрый -> 2071074234:\nUnyBrands, тех собес\n\n-Вакасния: https://hh.ru/vacancy/102276622\n-ЗП: 160k\n\nВопросы:\n- что происходит после вводе адреса в строку бразуера\n- как в js сравнивать дробные числа (пробелма с хранением чисел с плавающей запятой)\n- твоя идеальная команда\n- почему меняешь работу\n- какие интересне задачи делал\n\nЗадачи:\nпоиск индекса макс элемента\n\n    // Инициализация переменных для хранения максимального значения и его индекса\n    let maxIndex = 0;\n    let maxValue = arr[0];\n\n    // Проход по массиву, начиная со второго элемента\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > maxValue) {\n            maxValue = arr[i];\n            maxIndex = i;\n        }\n    }\n\n    // Возврат индекса максимального элемента\n    return maxIndex;\n}\n\nупорядочить элементы в массиве объектов arr, по полю key в порядке order\n\nfunction strictOrder(arr, key, order) {\n    const result = [];\n    order.forEach(orderKey => {\n        const found = arr.find(elem => elem[key] === orderKey);\n        if (found) {\n            result.push(found);\n        }\n    });\n    return result;\n}\n\nразбить определенную сумму на 4 части\n\nfunction dividePayment(payment) {\n    const parts = 4; // количество частей\n    const basePart = Math.floor(payment / parts); // базовая часть\n    const remainder = payment % parts; // остаток\n\n    // Создаем массив с базовыми частями\n    const result = Array(parts).fill(basePart);\n\n    // Распределяем остаток по первым элементам массива\n    for (let i = 0; i < remainder; i++) {\n        result[i]++;\n    }\n\n    return result;\n}"
      }
    ]
  },
  {
    "company": "Афлт-Системс",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-09-26 14:57:57",
        "content": "2024-09-26 14:57:57\n Анжелика -> 2071074234:\n- АФЛТ-системс\n-зп: от 180\n- вопросы:\n  - по опыту,\n  - fsd,\n  - паттерны проектирования и как они применяются в fsd,\n  - как работала с ui kit,\n  - разница между версиями реакта,\n  - разница между версиями некста.\nзадачка ну и все остальное в записи.",
        "full_content": "2024-09-26 14:57:57\n Анжелика -> 2071074234:\n- АФЛТ-системс\n-зп: от 180\n- вопросы:\n  - по опыту,\n  - fsd,\n  - паттерны проектирования и как они применяются в fsd,\n  - как работала с ui kit,\n  - разница между версиями реакта,\n  - разница между версиями некста.\nзадачка ну и все остальное в записи."
      },
      {
        "timestamp": "2024-08-06 07:52:21",
        "content": "2024-08-06 07:52:21\n Руслан -> 2071074234:\n— АФЛТ-системс\n— вакансия: https://hh.ru/vacancy/103476415?hhtmFrom=employer_vacancies\n— зп: 260к\n— Вопросы:\n1. Где работал, какие задачи делал\n2. Копал про процессы\n3. Почему перешли на fsd\n4. Что добавилось в новых версиях реакта\n5. Про опыт замены сборщика\n6. Про архитектуру редакса\n7. Почему используют сторы а не реакт контекст\n8. Для чего использовали вебсокеты на проекте\n9. Отличие тестирования на cypress и jest\n10. git pull vs git merge\n11. про р...",
        "full_content": "2024-08-06 07:52:21\n Руслан -> 2071074234:\n— АФЛТ-системс\n— вакансия: https://hh.ru/vacancy/103476415?hhtmFrom=employer_vacancies\n— зп: 260к\n— Вопросы:\n1. Где работал, какие задачи делал\n2. Копал про процессы\n3. Почему перешли на fsd\n4. Что добавилось в новых версиях реакта\n5. Про опыт замены сборщика\n6. Про архитектуру редакса\n7. Почему используют сторы а не реакт контекст\n8. Для чего использовали вебсокеты на проекте\n9. Отличие тестирования на cypress и jest\n10. git pull vs git merge\n11. про ребейз\nЗадачи:\n1. на вывод имени в документе. Там нужно было добавить еще один then для операции res.json() и поправить зависимости в useEffect;\n2. На починку вывода списка по текущим фильтрам в селекте\nИзменения\n<select value={filter} onChange={handleFilterChange}>\n\n const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilter(event.target.value as 'all' | 'active' | 'inactive');\n  };\n\n const [filter, setFilter] = useState<'all' | 'active' | 'inactive'>('all');\nconst filteredUsers = users.filter(user => {\n    if (filter === 'all') return true;\n    return user.status === filter;\n  });\n\n....\n<ul>\n        {filteredUsers.map(user => (\n          <li key={user.id}>\n            {user.name} - {user.status}\n          </li>\n        ))}\n      </ul>"
      }
    ]
  },
  {
    "company": "Comagic",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-02-13 13:13:52",
        "content": "2024-02-13 13:13:52\n Evgeniy -> 2071074234:\nКомпания: Comagic [второй этап]\nСсылка на вакансию: hr написала сама\nЗП: 250+\nРезультат: ❓(но судя по тому, что собес длился час, вместо запланированных 1.5, результат не очень)\n\nСначала подробно беседовали про опыт, причем много спрашивали про опыт в первой компании.\nДалее задача + вопросы по js (event loop, call stack, алгоритмы, че-то еще)\nЗадачу сначала решил через рекурсию, потом попросили переписать через стек\n\n//из этого \nconst tree = {\n    a: {...",
        "full_content": "2024-02-13 13:13:52\n Evgeniy -> 2071074234:\nКомпания: Comagic [второй этап]\nСсылка на вакансию: hr написала сама\nЗП: 250+\nРезультат: ❓(но судя по тому, что собес длился час, вместо запланированных 1.5, результат не очень)\n\nСначала подробно беседовали про опыт, причем много спрашивали про опыт в первой компании.\nДалее задача + вопросы по js (event loop, call stack, алгоритмы, че-то еще)\nЗадачу сначала решил через рекурсию, потом попросили переписать через стек\n\n//из этого \nconst tree = {\n    a: {\n        b: {\n            c: 'one',\n            h: 'two',\n        },\n        d: {\n            f: 'three',\n        },\n        g: 'four',\n    },\n}\n\n//нужно получить это\n\n// {\n//   'a.b.c': 'one',\n//   'a.b.h': 'two',\n//   'a.d.f': 'three',\n//     'a.g': 'four'\n// }\n\nfunction getTreeValues(tree) {\n    const result = {};\n    const stack = [{ node: tree, prefix: '' }]\n\n    while (stack.length) {\n        const { node, prefix } = stack.pop();\n\n        Object.keys(node).forEach((key) => {\n            const value = node[key];\n            const currentPath = prefix ? `${prefix}${key}` : key\n\n            if (typeof value === 'object') {\n                stack.push({ node: value, prefix: currentPath })\n            } else {\n                result[currentPath] = value\n            }\n        })\n    }\n\n    return result;\n}"
      },
      {
        "timestamp": "2024-02-01 11:06:57",
        "content": "2024-02-01 11:06:57\n Evgeniy -> 2071074234:\nНазвание компании: Comagic [первый этап, техскрининг (?)]\nСсылка на вакансию: https://hh.ru/vacancy/84735591\nВилка: 200+\nБыли вопросы по опыту и задачи. Собес на час. \nРекрутер с техническим бекграундом, охотно отвечал на вопросы, респект.\n\n# 1. В каком порядке и что будет выведено в консоли?\n\nsetTimeout(() => console.log('setTimeout 1'), 0);\n\nnew Promise((resolve, reject) => {\n    console.log('Promise 1');\n    resolve();\n    console.log('Promise 2');\n...",
        "full_content": "2024-02-01 11:06:57\n Evgeniy -> 2071074234:\nНазвание компании: Comagic [первый этап, техскрининг (?)]\nСсылка на вакансию: https://hh.ru/vacancy/84735591\nВилка: 200+\nБыли вопросы по опыту и задачи. Собес на час. \nРекрутер с техническим бекграундом, охотно отвечал на вопросы, респект.\n\n# 1. В каком порядке и что будет выведено в консоли?\n\nsetTimeout(() => console.log('setTimeout 1'), 0);\n\nnew Promise((resolve, reject) => {\n    console.log('Promise 1');\n    resolve();\n    console.log('Promise 2');\n}).then(() => console.log('Promise 3'));\n\nPromise.resolve().then(() => setTimeout(() => console.log('setTimeout 2'), 0));\n\nPromise.resolve().then(() => console.log('Promise 4'));\n\nsetTimeout(() => console.log('setTimeout 3'), 0);\n\nconsole.log('final');\n// Promise 1\n// Promise 2\n// final\n// Promise 3\n// Promise 4\n// setTimeout 1\n// setTimeout 3\n// setTimeout 2\n\n# 2. Что будет в консоли?\n\n\nlet obj = {\n    name: 'David',\n    getName() {\n        console.log(`name is: ${this.name}`);\n    },\n};\n\nlet fn = obj.getName;\n\nfn();\n// name is: undefined\n\nlet obj = {\n    name: 'David',\n    getName() {\n        console.log(name is: ${this.name});\n    },\n};\n\nlet fn = obj.getName.bind(obj);\n\nfn();\n\n\n# 3. Реализовать декоратор-функцию дебаунса\nfunction debounce(fn, time) {\n    let timeoutId;\n\n    return function(...args) {\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n      timeoutId = setTimeout(() => {\n            fn.apply(this, args);\n        }, time);\n    }\n}\n\n-- Успех собеса:  ✅"
      }
    ]
  },
  {
    "company": "Мегаплан",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-02-25 13:03:28",
        "content": "2025-02-25 13:03:28\n It L -> 2071074234:\nКомпания: Мегаплан 1 этап без лайвкодинга\nСсылка: https://hh.ru/vacancy/116460571?hhtmFrom=employer_vacancy_responses\nЗП: от 200\n\n1. Расскажи, пожалуйста, про оптимизацию в React,\nкак оптимизируются компоненты, рендеры и так далее.\n2. Расскажи, поподробнее про use-мемо, use-callback,\nкогда их стоит использовать?\n3. Как React устроен, зачем он нужен?\nКак вообще он рисует компоненты, которые мы пишем в коде?\nКакие механизмы, он использует для этого?\n4.Как R...",
        "full_content": "2025-02-25 13:03:28\n It L -> 2071074234:\nКомпания: Мегаплан 1 этап без лайвкодинга\nСсылка: https://hh.ru/vacancy/116460571?hhtmFrom=employer_vacancy_responses\nЗП: от 200\n\n1. Расскажи, пожалуйста, про оптимизацию в React,\nкак оптимизируются компоненты, рендеры и так далее.\n2. Расскажи, поподробнее про use-мемо, use-callback,\nкогда их стоит использовать?\n3. Как React устроен, зачем он нужен?\nКак вообще он рисует компоненты, которые мы пишем в коде?\nКакие механизмы, он использует для этого?\n4.Как React взаимодействует с дом-деревом\nЗачем вообще React нужен?\n5 Расскажи про многопоточность в JavaScript.\n6 Расскажи про Web Worker \n7. Разница let, var и const"
      },
      {
        "timestamp": "2024-11-07 13:51:12",
        "content": "2024-11-07 13:51:12\n Katerina -> 2071074234:\nКомпания: Мегаплан\nВакансия: https://spb.hh.ru/vacancy/108582516?hhtmFrom=employer_vacancy_responses\nЗП: от 200к\nВопросы:\nПросто разговор за жизнь, по опыту\nКак принимала решения по выбору стека, почему именно его\n\nФинальный этап: выполнение тз по которому определят дать офер или нет",
        "full_content": "2024-11-07 13:51:12\n Katerina -> 2071074234:\nКомпания: Мегаплан\nВакансия: https://spb.hh.ru/vacancy/108582516?hhtmFrom=employer_vacancy_responses\nЗП: от 200к\nВопросы:\nПросто разговор за жизнь, по опыту\nКак принимала решения по выбору стека, почему именно его\n\nФинальный этап: выполнение тз по которому определят дать офер или нет"
      }
    ]
  },
  {
    "company": "Барсити",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-03-09 19:17:55",
        "content": "2025-03-09 19:17:55\n Артем -> 2071074234:\nКомпания: Барсити\nзп 150\n\nВопросы\nпрошлись по опыту из технички ничего не спршивал",
        "full_content": "2025-03-09 19:17:55\n Артем -> 2071074234:\nКомпания: Барсити\nзп 150\n\nВопросы\nпрошлись по опыту из технички ничего не спршивал"
      },
      {
        "timestamp": "2025-03-01 08:57:33",
        "content": "2025-03-01 08:57:33\n Артем -> 2071074234:\nБарсити\nВакансия: написала HR\n\nЗП: от 130к\nВопросы:\nРасскажи про опыт\nПодробные вопросы про опыт\nЧем занимаешься в свободное время\nПочему уходишь",
        "full_content": "2025-03-01 08:57:33\n Артем -> 2071074234:\nБарсити\nВакансия: написала HR\n\nЗП: от 130к\nВопросы:\nРасскажи про опыт\nПодробные вопросы про опыт\nЧем занимаешься в свободное время\nПочему уходишь"
      }
    ]
  },
  {
    "company": "Smena",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-07-07 07:38:18",
        "content": "2025-07-07 07:38:18\n Антон -> 2071074234:\nSMENA\nЗП 250\n\n0) Вопросы про опыт\n1) Отличие декларативного от императивного подхода\n2) Какие знаешь семантические теги + тег role для скринридеров\n3) Что происходит, когда мы ввели адрес сайта и нажали Enter\n4) Кеширование клиента и сервера, какие есть отличия\n5) SSE vs websocket\n6) Какие есть заголовки в headers\n7) Какие есть коды статуса ответа\n8) Расскажи всё что знаешь про http\n9) Какие есть http методы\n10) Можно ли использовать body в get\n11) Расск...",
        "full_content": "2025-07-07 07:38:18\n Антон -> 2071074234:\nSMENA\nЗП 250\n\n0) Вопросы про опыт\n1) Отличие декларативного от императивного подхода\n2) Какие знаешь семантические теги + тег role для скринридеров\n3) Что происходит, когда мы ввели адрес сайта и нажали Enter\n4) Кеширование клиента и сервера, какие есть отличия\n5) SSE vs websocket\n6) Какие есть заголовки в headers\n7) Какие есть коды статуса ответа\n8) Расскажи всё что знаешь про http\n9) Какие есть http методы\n10) Можно ли использовать body в get\n11) Расскажи про заголовок rabbitmq"
      },
      {
        "timestamp": "2025-06-25 17:07:23",
        "content": "2025-06-25 17:07:23\n Daniil Max -> 2071074234:\nКомпания SMENA(smena.space)\n\nСКРИННИНГ:\n\nЕсть вероятность большая, что записывают видео скриннинга и потом их смотрит тимлид, так как по ходу ответов HR ничего не записывала, а только кивала головой.\n\n1 часть - Рассказывает про компанию.\n\n2 часть - Вопросы по легенде:\n\n- Почему меняете работу?\n- Какой был состав команды был?\n- Что делали на последнем месте работе, какие фичи?\n- Какая архитектура по проекту?\n- Спрашивала за первый опыт! Почему ушли и...",
        "full_content": "2025-06-25 17:07:23\n Daniil Max -> 2071074234:\nКомпания SMENA(smena.space)\n\nСКРИННИНГ:\n\nЕсть вероятность большая, что записывают видео скриннинга и потом их смотрит тимлид, так как по ходу ответов HR ничего не записывала, а только кивала головой.\n\n1 часть - Рассказывает про компанию.\n\n2 часть - Вопросы по легенде:\n\n- Почему меняете работу?\n- Какой был состав команды был?\n- Что делали на последнем месте работе, какие фичи?\n- Какая архитектура по проекту?\n- Спрашивала за первый опыт! Почему ушли из предыдущих компаний?\n- Что ищете для себя, чего хочется, какую компанию выбираете и команда мечты?\n- Собеседуетесь ли, активно ли ищете, есть ли оффер, если да, то почему не приняли?\n-  Если будет стоять выбор перед несколькими офферами, какие критерии по выбору?\n- Как хотели бы оформиться по ТК РФ или по ИП?\n\n3  часть - Блок технических вопросов:\n\n* Все вопросы из головы для неё придумывал тимлид, который в целом завёрнут на нативном JS, браузере и в целом на общем понимании computer science.\nПоэтому есть шанс, что вопросы не совпадут.\n\nВажно!!! Если на тех вопросы какие-то не ответил и позовут на второй этап, обязательно их изучи, потому что тимлид спросит прочитал ли ты и вообще интересовался ли этими вопросами!\n\n(HR не душит, помогает чуть что с ответами и наводит на мысли !!! )\n\nИтак:\n\n1) События жизненного цикла html документа в контексте именно JS, не Реакта( вопрос про DOMContentLoaded и прочее)\n2) Отличия BOM от DOM\n3) Что такое reflow и repaint\n4) Вопрос со звёздочкой* Ничего страшного, если не ответишь.\nПо какой WebVital симметрике можно отследить дергание странички во время загрузки (мерцание) - ответ - \"CLS (Cumulative Layout Shift)\" - почитай про это, тимлид на следующем собесе спросит.\n5) Отличия обычного объекта vs Map vs WeakMap в JS\n6) Принципы чистой функции\n7) Назовите все известные способы инкапсуляции логики в Реакте \n8) Что такое diffing и reconcilation в Реакте? Как работает?\n9) При каких случаях Reconcilation может быть замедлен?\n10) С помощью чего можно реализовать code spliting в Реакте?\n11) Что такое HOC ? Приведи примеры HOC в Реакт?\n12)  Перечислите критические этапы рендеринга? (Это про 13) Что такое Дебаунсинг, Тротлинг и Каррирование?\n14) Какие есть правила ограничения в использовании Реакт хуков?\n15) Что такое делегирование событий?"
      }
    ]
  },
  {
    "company": "Highhelp",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-07-18 10:05:22",
        "content": "2025-07-18 10:05:22\n Daniil Daniil -> 2071074234:\nКомпания Highhelp Финальный этап\nВопросы:\n1. Как оптимизировал приложение?\n2. Топ 5 твоих достижений в компании(какую идею/фичу внедрил и как она помогла бизнесу)\n3. Топ 5 твоих достижений в жизни\n4. Как свободное время проводишь\n5. Чем увлекаешься\n6. Хобби\n7. Семейное положение\n8. Ожидания по зп(мин/макс/комфорт)\n9. Когда готов выходить\n10. Готов ли работать с 11 до 21",
        "full_content": "2025-07-18 10:05:22\n Daniil Daniil -> 2071074234:\nКомпания Highhelp Финальный этап\nВопросы:\n1. Как оптимизировал приложение?\n2. Топ 5 твоих достижений в компании(какую идею/фичу внедрил и как она помогла бизнесу)\n3. Топ 5 твоих достижений в жизни\n4. Как свободное время проводишь\n5. Чем увлекаешься\n6. Хобби\n7. Семейное положение\n8. Ожидания по зп(мин/макс/комфорт)\n9. Когда готов выходить\n10. Готов ли работать с 11 до 21"
      },
      {
        "timestamp": "2025-07-15 06:49:26",
        "content": "2025-07-15 06:49:26\n Daniil Daniil -> 2071074234:\nКомпания: Highhelp\nВопросы:\n1. Что такое event loop?\n2. promise и их методы\n3. Разница promise all/allsettled, race/any\n4. Что такое VDOM и как работает\n5. Reconsilation\n6. React.memo, useMemo, useCallback\n7. Расскажи про redux\n8. RTK Query\n9. Оптимистик запрос\nЗадача:\nнаписать debounce для компонента, чтоб инпут корректно работал\nРешение:\n\nimport React, { useState } from \"react\";\n\nconst useDebounce = (value, delay) => {\n  const [debounceValue, s...",
        "full_content": "2025-07-15 06:49:26\n Daniil Daniil -> 2071074234:\nКомпания: Highhelp\nВопросы:\n1. Что такое event loop?\n2. promise и их методы\n3. Разница promise all/allsettled, race/any\n4. Что такое VDOM и как работает\n5. Reconsilation\n6. React.memo, useMemo, useCallback\n7. Расскажи про redux\n8. RTK Query\n9. Оптимистик запрос\nЗадача:\nнаписать debounce для компонента, чтоб инпут корректно работал\nРешение:\n\nimport React, { useState } from \"react\";\n\nconst useDebounce = (value, delay) => {\n  const [debounceValue, setDebounceValue] = useState(value);\n  React.useEffect(() => {\n    const timer = setTimeout(() => setDebounceValue(value), delay);\n    return () => clearTimeout(timer);\n  }, [value]);\n\n  return debounceValue;\n};\n\nconst SearchInput = () => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const debounceInputValue = useDebounce(inputValue, 1000);\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    setInputValue(value);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n        placeholder=\"Введите текст...\"\n      />\n      <div>{debounceInputValue}</div>\n    </div>\n  );\n};\n\nexport default SearchInput;"
      }
    ]
  },
  {
    "company": "Xsolla",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-11-26 10:55:19",
        "content": "2024-11-26 10:55:19\n Артем -> 2071074234:\nКомпания: Xsolla(3 этап)\nВопросы: \nспросил про опыт\nРешаю ли задачки\nспросил про сколярное призведение векторов(Вектор столбец умножили на вектор строки что будет) \nОтвет Результатом будет число\nа если наоборот умножить то матрица",
        "full_content": "2024-11-26 10:55:19\n Артем -> 2071074234:\nКомпания: Xsolla(3 этап)\nВопросы: \nспросил про опыт\nРешаю ли задачки\nспросил про сколярное призведение векторов(Вектор столбец умножили на вектор строки что будет) \nОтвет Результатом будет число\nа если наоборот умножить то матрица"
      },
      {
        "timestamp": "2024-11-15 16:44:25",
        "content": "2024-11-15 16:44:25\n Артем -> 2071074234:\nКомпания: Xsolla\nВакансия: написала hr\nЗп: 4000$\nВопросы: уточнили про опыт\nСпросили куда хочешь расти \nДальше задача\nЗадача: на скрине\nрешение: \nconst someFunc = (input) => {\n  const notes = [5000, 1000, 500, 100];\n  const result = {};\n\n// Проходим по каждому номиналу\n  notes.forEach(note => {\n// Определяем количество банкнот текущего номинала\n    result[note] = Math.floor(input / note);\n// Определяем количество банкнот текущего номинала\n    input %= no...",
        "full_content": "2024-11-15 16:44:25\n Артем -> 2071074234:\nКомпания: Xsolla\nВакансия: написала hr\nЗп: 4000$\nВопросы: уточнили про опыт\nСпросили куда хочешь расти \nДальше задача\nЗадача: на скрине\nрешение: \nconst someFunc = (input) => {\n  const notes = [5000, 1000, 500, 100];\n  const result = {};\n\n// Проходим по каждому номиналу\n  notes.forEach(note => {\n// Определяем количество банкнот текущего номинала\n    result[note] = Math.floor(input / note);\n// Определяем количество банкнот текущего номинала\n    input %= note;\n  });\n\n  return result;\n}"
      }
    ]
  },
  {
    "company": "Р-Софт",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-03-25 12:26:09",
        "content": "2025-03-25 12:26:09\n Лёша -> 2071074234:\nКомпания: Р-софт\nЗп: 300\nВакансия: написал hr\n\nВопросы: \nРазрешает ли нам redux хранить несколько стейтов?\nНужно ли для сегковесных операций использовать reedux?\nКак оптимизировать работу с загрузкой больших объемов данных по api (таблица)?\nНужно ли мапить данные (изменять структуру), которые приходят с бекенда?\n\nТех часть:\nКод ревью.\n\nimport * as React from 'react';\nimport {ITennisGame, TennisGame} from \"./Interfaces/ITennisGame\";\nimport {useReducer} fro...",
        "full_content": "2025-03-25 12:26:09\n Лёша -> 2071074234:\nКомпания: Р-софт\nЗп: 300\nВакансия: написал hr\n\nВопросы: \nРазрешает ли нам redux хранить несколько стейтов?\nНужно ли для сегковесных операций использовать reedux?\nКак оптимизировать работу с загрузкой больших объемов данных по api (таблица)?\nНужно ли мапить данные (изменять структуру), которые приходят с бекенда?\n\nТех часть:\nКод ревью.\n\nimport * as React from 'react';\nimport {ITennisGame, TennisGame} from \"./Interfaces/ITennisGame\";\nimport {useReducer} from \"react\";\n\nexport interface ITennisGame\n{\n    wonPoint(string): void;\n    getScore(): string;\n}\n\nexport class TennisGame implements  ITennisGame{\n    private score1:number = 0;\n    private score2:number = 0;\n    private player1Name: string;\n    private player2Name: string;\n\n    constructor(player1Name: string, player2Name: string) {\n        this.player1Name = player1Name;\n        this.player2Name = player2Name;\n    }\n\n    getScore(): string {\n        var score: string;\n        var tempScore = 0;\n        if(this.score1 == this.score2){\n            switch (this.score1){\n                case 0:\n                    score = \"Love-All\";\n                    break;\n                case 1:\n                    score = \"Fifteen-All\";\n                    break;\n                case 2:\n                    score = \"Thirty-All\";\n                    break;\n                default:\n                    score = \"Deuce\";\n                    break;\n            }\n        }\n        else if (this.score1 >= 4 || this.score2 >= 4)\n        {\n            var minusResult = this.score1 - this.score2;\n            if (minusResult === 1) score = \"Advantage player1\";\n            else if (minusResult === -1) score = \"Advantage player2\";\n            else if (minusResult >= 2) score = \"Win for player1\";\n            else score = \"Win for player2\";\n        }\n    else\n        {        \n            for (var i = 1; i < 3; i++)\n            {\n                if (i == 1) {\n                    tempScore = this.score1;\n                } else { \n                    score += \"-\"; \n                    tempScore = this.score2; \n                }\n                switch (tempScore)\n                {\n                    case 0:\n                        score += \"Love\";\n                        break;\n                    case 1:\n                        score += \"Fifteen\";\n                        break;\n                    case 2:\n                        score += \"Thirty\";\n                        break;\n                    case 3:\n                        score += \"Forty\";\n                        break;\n                }\n            }\n            \n        }\n        return score;\n    }\n\n    wonPoint(playerName: string): void {\n        if(playerName == \"player1\")\n            this.score1+=1;\n        else\n            this.score2+=1;\n    }\n\n}\n\n\n\ninterface State{\n    game: ITennisGame;\n}\n\nvar tennisGame: ITennisGame\n    = new TennisGame(\"playerName1\", \"playerName2\");\n\nvar initialState: State = { game: tennisGame};\n\ntype CounterAction =\n    | { type: \"addPlayer1Point\" }\n    | { type: \"addPlayer2Point\"}\n    | { type: \"getScore\" }\n\nfunction stateReducer(state: State, action: CounterAction): State | Never {\n    switch (action.type) {\n        case \"addPlayer1Point\":\n            initialState.game.wonPoint(\"firstPlayer\");\n            return state;\n        case \"addPlayer2Point\":\n            initialState.game.wonPoint(\"secondPlayer\");\n            return state;\n        case \"getScore\":\n            return state;\n        default:\n            throw new Error(\"Unknown action\");\n    }\n}\n\nconst [state, dispatch] = useReducer(stateReducer, initialState);\n\nconst addFirstPlayerPoint = () => dispatch({ type: \"addPlayer1Point\" });\nconst addSecondPlayerPoint = () => dispatch({ type: \"addPlayer2Point\" });\nconst getScore = () => dispatch({ type: \"getScore\" });\n\nexport default function App() {\n    \n    return (\n        <div>\n\n            <h1>Welcome to tennis game</h1>"
      },
      {
        "timestamp": "2025-02-24 11:54:47",
        "content": "2025-02-24 11:54:47\n Адам -> 2071074234:\nКомпания: Р-Софт\nЗП: 260-300 на руки\nВакансия:https://hh.ru/vacancy/117085747?hhtmFrom=employer_vacancies\nБыла 1 задача и немного вопросов по redux и стейт менеджеры\n\nСделать ревью и рефактор кода\nimport * as React from 'react';\nimport { ITennisGame, TennisGame } from \"./Interfaces/ITennisGame\";\nimport { useReducer } from \"react\";\n\nexport interface ITennisGame {\n  wonPoint(string): void;\n  getScore(): string;\n}\n\nexport class TennisGame implements ITennisG...",
        "full_content": "2025-02-24 11:54:47\n Адам -> 2071074234:\nКомпания: Р-Софт\nЗП: 260-300 на руки\nВакансия:https://hh.ru/vacancy/117085747?hhtmFrom=employer_vacancies\nБыла 1 задача и немного вопросов по redux и стейт менеджеры\n\nСделать ревью и рефактор кода\nimport * as React from 'react';\nimport { ITennisGame, TennisGame } from \"./Interfaces/ITennisGame\";\nimport { useReducer } from \"react\";\n\nexport interface ITennisGame {\n  wonPoint(string): void;\n  getScore(): string;\n}\n\nexport class TennisGame implements ITennisGame {\n  private score1: number = 0;\n  private score2: number = 0;\n  private player1Name: string;\n  private player2Name: string;\n\n  constructor(player1Name: string, player2Name: string) {\n    this.player1Name = player1Name;\n    this.player2Name = player2Name;\n  }\n\n  getScore(): string {\n    var score: any;\n    let tempScore = 0;\n    if (this.score1 == this.score2) {\n      switch (this.score1) {\n        case 0:\n          score = \"Love-ALL\";\n          break;\n        case 1:\n          score = \"Fifteen-ALL\";\n          break;\n        case 2:\n          score = \"Thirty-ALL\";\n          break;\n        default:\n          score = \"Deuce\";\n          break;\n      }\n    } else if (this.score1 >= 4 || this.score2 >= 4) {\n      var minusResult = this.score1 - this.score2;\n      if (minusResult == 1) score = \"Advantage player1\";\n      else if (minusResult == -1) score = \"Advantage player2\";\n      else if (minusResult >= 2) score = \"Win for player1\";\n      else score = \"Win for player2\";\n    } else {\n      for (var i = 1; i < 3; i++) {\n        if (i == 1) {\n          tempScore = this.score1;\n        } else {\n          score += \"-\";\n          tempScore = this.score2;\n        }\n        switch (tempScore) {\n          case 0:\n            score += \"Love\";\n            break;\n          case 1:\n            score += \"Fifteen\";\n            break;\n          case 2:\n            score += \"Thirty\";\n            break;\n          case 3:\n            score += \"Forty\";\n            break;\n        }\n      }\n    }\n    return score;\n  }\n\n  wonPoint(playerName: string): void {\n    if (playerName == \"player1\") this.score1 += 1;\n    else this.score2 += 1;\n  }\n}\n\ninterface State {\n  game: ITennisGame;\n}\n\nlet tennisGame: ITennisGame = new TennisGame(\"playerName1\", \"playerName2\");\n\nconst initialState: State = { game: tennisGame };\n\ntype CounterAction =\n  | { type: \"addPlayer1Point\" }\n  | { type: \"addPlayer2Point\" }\n  | { type: \"getScore\" };\n\nfunction stateReducer(state: State, action: CounterAction): State | Never {\n  switch (action.type) {\n    case \"addPlayer1Point\":\n      state.game.wonPoint(\"firstPlayer\");\n      return state;\n    case \"addPlayer2Point\":\n      state.game.wonPoint(\"secondPlayer\");\n      return state;\n    case \"getScore\":\n      return state;\n    default:\n      throw new Error(\"Unknown action\");\n  }\n}\n\nconst [state, dispatch] = useReducer(stateReducer, initialState);\n\nconst addFirstPlayerPoint = () => dispatch({ type: \"addPlayer1Point\" });\nconst addSecondPlayerPoint = () => dispatch({ type: \"addPlayer2Point\" });\nconst getScore = () => dispatch({ type: \"getScore\" });\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Welcome to tennis game</h1>\n      <p>Count: {state.game.getScore()}</p>\n      <button onClick={addFirstPlayerPoint}>add first player point</button>\n      <button onClick={addSecondPlayerPoint}>add second player point</button>\n      <button onClick={getScore}>get score</button>\n    </div>\n  );\n}"
      }
    ]
  },
  {
    "company": "Uremont",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-09-25 11:30:46",
        "content": "2024-09-25 11:30:46\n Михаил -> 2071074234:\n- Uremont\n- 200к\n- вакансия: hh.ru/vacancy/106132026\n- по факту вместо знакомство с TL был еще один тех собес с командой, была только теория, но душная",
        "full_content": "2024-09-25 11:30:46\n Михаил -> 2071074234:\n- Uremont\n- 200к\n- вакансия: hh.ru/vacancy/106132026\n- по факту вместо знакомство с TL был еще один тех собес с командой, была только теория, но душная"
      },
      {
        "timestamp": "2024-09-24 09:05:45",
        "content": "2024-09-24 09:05:45\n Михаил -> 2071074234:\n- Uremont\n- 200к\n- вакансия: hh.ru/vacancy/106132026\n- смотреть с 21 минуты(!) - опоздали, собес с 21 начался",
        "full_content": "2024-09-24 09:05:45\n Михаил -> 2071074234:\n- Uremont\n- 200к\n- вакансия: hh.ru/vacancy/106132026\n- смотреть с 21 минуты(!) - опоздали, собес с 21 начался"
      }
    ]
  },
  {
    "company": "ED-IT",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-02-07 05:42:19",
        "content": "2025-02-07 05:42:19\n Klimenty Karavaev -> 2071074234:\nКомпания: ED-IT (техническое собеседование)\nЗапись: https://youtu.be/09sqQy7MDRk?si=sjMwjE7l1eNHzGA4\nЗП: до 220 \nВакансия: https://hh.ru/vacancy/116587352?hhtmFrom=vacancy_search_list\nЗадачи: такие же как здесь https://t.me/c/2071074234/489/103596",
        "full_content": "2025-02-07 05:42:19\n Klimenty Karavaev -> 2071074234:\nКомпания: ED-IT (техническое собеседование)\nЗапись: https://youtu.be/09sqQy7MDRk?si=sjMwjE7l1eNHzGA4\nЗП: до 220 \nВакансия: https://hh.ru/vacancy/116587352?hhtmFrom=vacancy_search_list\nЗадачи: такие же как здесь https://t.me/c/2071074234/489/103596"
      },
      {
        "timestamp": "2025-02-06 13:55:23",
        "content": "2025-02-06 13:55:23\n Nodar -> 2071074234:\nНазвание: ED-IT \nВакансия: https://hh.ru/vacancy/116587352?hhtmFrom=vacancy_search_list\nЗП: до 220 на руки\nТеория: краткий обзор по резюме и навыкам, что делал, кратко. Спросил про react hook form, chart js, fsd, ts, ,без подробностей и деталей.\nЗадачи:\n1./* Преварительная задача, в решении учитывать что объектов может быть\n условно миллиард, а типов миллион, исходить из необходимости максимально снизить затраты по времени и ресурсам\n Написать функцию вы...",
        "full_content": "2025-02-06 13:55:23\n Nodar -> 2071074234:\nНазвание: ED-IT \nВакансия: https://hh.ru/vacancy/116587352?hhtmFrom=vacancy_search_list\nЗП: до 220 на руки\nТеория: краткий обзор по резюме и навыкам, что делал, кратко. Спросил про react hook form, chart js, fsd, ts, ,без подробностей и деталей.\nЗадачи:\n1./* Преварительная задача, в решении учитывать что объектов может быть\n условно миллиард, а типов миллион, исходить из необходимости максимально снизить затраты по времени и ресурсам\n Написать функцию вывода строкой через запятую названий (name) объектов\n Брать только объекты связанные с типами у которых class=\"Устройства\" */\n\nОбъекты\nconst objects = [\n  { id: 1, name: \"Test 1\", object_type: 1 },\n  { id: 2, name: \"Test 2\", object_type: 1 },\n  { id: 3, name: \"Test 3\", object_type: 2 },\n  { id: 4, name: \"Test 4\", object_type: 3 },\n]\n\n  //Типы\n  const object_types = [\n    { id: 1, class: \"Устройства\" },\n    { id: 2, class: \"Устройства\" },\n    { id: 3, class: \"Порты\" },\n    { id: 4, class: \"Кабели\" }\n  ]\n\n  function outputNames(objects: any[],types:any[],classType='Устройства'){\n    const resultNames = []\n    const map: any={}\n\n    for(const obj of types){\n\n      map[obj.id] = obj\n    }\n\n    for(const {name,object_type} of objects){\n      const type = map[object_type]\n      if (type && type.class === classType) \n      resultNames.push(name)\n    }\n\n    return resultNames.join(', ')\n  }\n2. /* 1. Отложенный вызов\nНеобходимо реализовать текстовый поиск с участием бэкенда (только эмуляция)\nРеагируем на каждую набранную букву, но вызываем функцию поиска на бэк (callApi)\nтолько если пауза в наборе составила 1 секунду\n- Использовать готовые библиотеки нельзя, делаем на голом js\n- HTML форму реализовывать не надо, только реакцию на условный onChange(value)\n- React окружение не использовать\n*/\n\nconst callApi = (value:string) => console.log(value)\n\n\nfunction debounce(fn:(value:string):void,ms:number){\nlet timer =null\n  return (...args)=>{\n    clearTimeout(timer)\n    timer = setTimeout(()=>{\n      fn(...args)\n    },ms)\n\n  }\n}\n3. /* Получить объект с отчётом из массива\nЯ хочу получить функцию которая примет этот массив на вход и вернёт объект,\n  который скажет сколько у меня субъектов в регионе 1 и сколько в регионе 2\nДополнительные объявления переменны - массивов использовать нельзя, нужен return { какое то действие создающее объект из массива }\nЛогику реализовать внутри этой функции getResult\n  */\n\n\nconst Task2 = () => {\n  interface ISubjectRegion { name: string, region: number }\n  interface IResult { [key: ISubjectRegion['region']]: number }\n\n  const sourceData: ISubjectRegion[] = [\n    { name: \"Субъект 1\", region: 1 },\n    { name: \"Субъект 2\", region: 2 },\n    { name: \"Субъект 3\", region: 2 },\n    { name: \"Субъект 4\", region: 2 },\n    { name: \"Субъект 5\", region: 4 }\n  ]\n\n  const expectedResult: IResult = {\n    1: 1, //1 субъект в регионе 1\n    2: 3 //3 субъекта в регионе 2\n  }\n\n  //!!! Логику реализовать внутри этой функции !!!\n  const getResult = (data: ISubjectRegion[]): IResult => {\n    return data.reduce((acc, { region }) => {\n      if (region === 1 || region === 2) {\n        acc[region] = (acc[region] || 0) + 1\n        return acc\n      }\n      return acc\n    }, {} as IResult)\n  }\n  //Это выведет результат её работы справа\n  return { expectedResult: expectedResult, result: getResult(sourceData) }\n}\n//Это выведет результат её работы справа\nshowTaskResult(2, Task2())"
      }
    ]
  },
  {
    "company": "Sminex",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-07-04 13:48:52",
        "content": "2025-07-04 13:48:52\n Sodnom Tyksheev -> 2071074234:\nSminex \nзп: 230\n\n1.Отличия http от https2.Какой статус вернет успешный POST запрос?\n3.Что такое CORS? Кто является инициатором блокировки браузер или сервер?\n4.Как бы ты реализовал аккардион с помощью HTML/CSS\n5.Какая версия реакт была на последнем месте работы? Какие хуки из версии 18+ использовал? Кейс для чего именно\n6.Сколько будет перерендеров если будет несколько setState подряд, после какая асинхронная функция через asyn await и далее оп...",
        "full_content": "2025-07-04 13:48:52\n Sodnom Tyksheev -> 2071074234:\nSminex \nзп: 230\n\n1.Отличия http от https2.Какой статус вернет успешный POST запрос?\n3.Что такое CORS? Кто является инициатором блокировки браузер или сервер?\n4.Как бы ты реализовал аккардион с помощью HTML/CSS\n5.Какая версия реакт была на последнем месте работы? Какие хуки из версии 18+ использовал? Кейс для чего именно\n6.Сколько будет перерендеров если будет несколько setState подряд, после какая асинхронная функция через asyn await и далее опять несколько setState?(Чтоб понять сколько нужно у него спросить какая именно версия React)\n7.Что будет в консоли и какая сложность алгоритма\n\nfunction filterArrayByArray(first, second) {\n  const newArray = [];\n  for (let k = 0; k < second.length; k++) {\n    for (let i = 0; i < first.length; i++) {\n      if (first[i].code === second[k]) {\n        newArray.push(first[i]);\n        break; \n      }\n    }\n  }\n  return newArray;\n}\n\nconst a = [{ code: 0 }, { code: 1 }, { code: 2 }, { code: 3 }];\nconst b = [0, 3, 4];\n\nconst result = filterArrayByArray(a, b);\nconsole.log(result);"
      },
      {
        "timestamp": "2025-04-04 15:43:06",
        "content": "2025-04-04 15:43:06\n Равиль Васильев -> 2071074234:\nSminex \n\n📢 Вакансия - написала hr\n\n❓Вопросы: \n\n- Отличие http и https\n- CORS\n- Какие знаю хуки\n- Отличие react 17 18 19\n- Различие map и forEach\n- Что вызывает перерендер компонента\n- Как я бы реализовал хлебные крошки\n\n\n📌 Задачи:\n\n\n// Был скриншот с кодом, рассказать что делает этот код. Спрашивал зачем тут нужен break. \n\nconst filterArrayByArray = (first, second) => {\n    let newArray = [];\n    for (let k = 0; k < second.length; k++) {\n      ...",
        "full_content": "2025-04-04 15:43:06\n Равиль Васильев -> 2071074234:\nSminex \n\n📢 Вакансия - написала hr\n\n❓Вопросы: \n\n- Отличие http и https\n- CORS\n- Какие знаю хуки\n- Отличие react 17 18 19\n- Различие map и forEach\n- Что вызывает перерендер компонента\n- Как я бы реализовал хлебные крошки\n\n\n📌 Задачи:\n\n\n// Был скриншот с кодом, рассказать что делает этот код. Спрашивал зачем тут нужен break. \n\nconst filterArrayByArray = (first, second) => {\n    let newArray = [];\n    for (let k = 0; k < second.length; k++) {\n        for (let i = 0; i < first.length; i++) {\n            if (first[i].code === second[k]) {\n                newArray.push(first[i]);\n                break;\n            }\n        }\n    }\n    return newArray;\n};\n\nconst a = [{ code: 0 }, { code: 1 }, { code: 2 }, { code: 3 }, { code: 4 }];\nconst b = [0, 3, 4];\n\nconsole.log(filterArrayByArray(a, b));\n\n// Ответ типо для оптимизации не прокатывает. \n// Правильный ответ - чтоб вернуть первый найденный элемент. \n\n// Рассказать как улучшить компонент \n\nimport { ActiveStep, Step, StepperContainer } from './styles';\n\ntype StepperProps = {\n    length: number;\n    activeStep: number;\n};\n\nconst generateSteps = (length: number, activeStep: number) => {\n    const steps = [];\n    for (let i = 0; i < length; i += 1) {\n        if (i === activeStep) steps.push(<ActiveStep key={i} />);\n        else steps.push(<Step key={i} />);\n    }\n    return steps;\n};\n\nconst Stepper = ({ length, activeStep }: StepperProps) => {\n    return <StepperContainer>{generateSteps(length, activeStep)}</StepperContainer>;\n};\n\n// Ответ: использовать мемонизацию. Создать массив заполненный, только компонентом Steps и замемонизировать его.\n// И работать с этим мемонизированным списком. Подставлять куда нужно по индексу AtiveStep\n\n// Рассказать как я улучшил бы код\nimport { IconPlus } from '@shared/ui/icons/icon-plus';\nimport React, { useState } from 'react';\nimport styles from './styles.module.css'; // Предполагается использование CSS-модулей\n\nexport interface AccordionWithIconProps {\n    children?: React.ReactNode;\n    title: string;\n    hasBorder?: boolean;\n}\n\nexport const AccordionWithIcon: React.FC<AccordionWithIconProps> = ({ children, title, hasBorder = true }) => {\n    const [isExpanded, setIsExpanded] = useState(false);\n\n    const handleToggle = () => {\n        setIsExpanded(!isExpanded);\n    };\n\n    const rowContainerClass = hasBorder ? styles.rowContainer : styles.rowContainerNoBorder;\n\n    return (\n        <div className={styles.container}>\n            {isExpanded ? (\n                <div className={rowContainerClass}>\n                    <div className={styles.button} onClick={handleToggle}>\n                        <div className={styles.iconMinus}>\n                            <IconMinus />\n                        </div>\n                        <p className={styles.title}>{title}</p>\n                    </div>\n                    {children}\n                </div>\n            ) : (\n                <div className={styles.button} onClick={handleToggle}>\n                    <div className={styles.iconPlus}>\n                        <IconPlus />\n                    </div>\n                    <p className={styles.title}>{title}</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\n// Все cвелось к тому что этот код бесcмысленный.  стейт тут не нужно использовать и аккордион можно реализовать с помощью нативных <details>, <summary>"
      }
    ]
  },
  {
    "company": "Kedoo",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-07-04 19:35:02",
        "content": "2025-07-04 19:35:02\n Никита -> 2071074234:\nKEDOO (Zvonko digital)\nЗП: от 180\n\nВопросы:\n1. Спрашивал про опыт\n2. Работал с формами, графиками?\n3. Настраивал вебпак, разбираешься в конфиге?\n4. UI Kit использовали на проекте?\n5. Изучаешь спецификацию js, что нового выходит за последнее время?\n6. Как можем понять, что можем использовать ту или иную новую функцию?(поддержка в браузерах)\n7. Что делать если мы хотим использовать новый синтаксис js, но чтобы он поддерживался в старых браузерах?(полифил)...",
        "full_content": "2025-07-04 19:35:02\n Никита -> 2071074234:\nKEDOO (Zvonko digital)\nЗП: от 180\n\nВопросы:\n1. Спрашивал про опыт\n2. Работал с формами, графиками?\n3. Настраивал вебпак, разбираешься в конфиге?\n4. UI Kit использовали на проекте?\n5. Изучаешь спецификацию js, что нового выходит за последнее время?\n6. Как можем понять, что можем использовать ту или иную новую функцию?(поддержка в браузерах)\n7. Что делать если мы хотим использовать новый синтаксис js, но чтобы он поддерживался в старых браузерах?(полифил)\n8. Как оптимизировать загрузку тяжелого js файла\n9. Какие функции выполняет babel?\n10. Что такое вендорные префиксы?\n11. Что такое замыкание?\n\nЗадача 1\n\nconst products = [\n  { name: 'Laptop', price: 1200, instock: true },\n  { name: 'House', price: 20, instock: false },\n  { name: 'Monitor', price: 300, instock: true },\n  { name: 'Keyboard', price: 100, instock: true },\n  { name: 'Phone', price: 800, instock: true },\n  { name: 'Desk', price: 450, instock: false },\n  { name: 'Chair', price: 150, instock: true },\n  { name: 'Tablet', price: 350, instock: true },\n  { name: 'Webcam', price: 70, instock: true },\n  { name: 'Speaker', price: 130, instock: false },\n];\n\n// 1. Сгруппировать на 3 ценовые категории:\n// . cheap до 150 включительно\n// . medium от 151 до 500\n// . expensive от 501 и выше\n\nfunction group(products) {\n  const result = { cheap: [], medium: [], expensive: [] };\n  products.forEach((product) => {\n    const price = product.price;\n\n    if (price <= 150) {\n      result.cheap.push(product);\n    } else if (price <= 500) {\n      result.medium.push(product);\n    } else {\n      result.expensive.push(product);\n    }\n  });\n  return result;\n\n  // Переписать на reduce\n  return products.reduce((acc, item) => {\n    if (item.price <= 150) {\n        acc.cheap.push(item);\n  } else if (item.price >= 151 && item.price <= 500) {\n      acc.medium.push(item);\n  } else {\n      acc.expensive.push(item);\n  }\n  return acc;\n}, result);\n}\n\n// Переписать используя новый метод groupBy (даёт посмотреть доку)\n\nconst result = Object.groupBy(products, (product) => {\n    if (product.price <= 150) {\n        return \"cheap\";\n    } else if (product.price <= 500) {\n        return \"medium\";\n    } else {\n        return \"expensive\";\n    }\n});\n\n// 2. Задача:\n// взять из полученных групп дешевые товары и:\n// . Оставить только товары, которые есть в наличии (inStock)\n// . Отсортировать их по цене по убыванию\n// . Взять топ-2 самых дорогих\n// . Вернуть массив из их названий\n\nfunction newGroup(obj) {\n    return obj.cheap\n    .filter((item) => item.instock)\n    .sort((a, b) => b.price - a.price)\n    .slice(0, 2)\n    .map((item) => item.name);\n}\n\nЗадача 2\n\n// Для данной функции fn вернуть новую функцию,\n//которая идентична исходной функции,\n// за исключением того, что она гарантирует,\n//что fn будет вызвана не более одного раза.\n\n// При первом вызове возвращаемой функции она должна возвращать тот же результат, что и fn.\n// При каждом последующем вызове она должна возвращать undefined.\nfunction once(fn) {\n    let isCalled = false;\n\n    return (...args) => {\n        if (!isCalled) {\n            isCalled = true;\n            return fn(...args);\n        }\n    };\n}\n\nlet fn = (a, b, c) => a + b + c;\nlet oncefn = once(fn);\nconsole.log(oncefn(1, 2, 3)); // 6\nconsole.log(oncefn(2, 3, 6)); // возвращает undefined без вызова fn"
      },
      {
        "timestamp": "2025-05-23 14:27:58",
        "content": "2025-05-23 14:27:58\n Егор -> 2071074234:\nKEDOO Entertainment \nЗП: 200-220\n\n- Рассказ о последнем месте работы;\n- Использовал ли в своих проектах React-hook-form;\n- Работал ли с CI\\CD;\n- Практики создании общих компонентов;\n- Занимался ли обновлением пакетов внутри проекта;\n- Каждый год выходит новый ECMAScript , фичи, функции и т.д. Стоит их сразу использовать или нет;\n- Что происходит в браузере, когда пользователь вводит в url;\n- useEffect, useLayoutEffect, зачем нужны и их отличия;\n- Отличие ...",
        "full_content": "2025-05-23 14:27:58\n Егор -> 2071074234:\nKEDOO Entertainment \nЗП: 200-220\n\n- Рассказ о последнем месте работы;\n- Использовал ли в своих проектах React-hook-form;\n- Работал ли с CI\\CD;\n- Практики создании общих компонентов;\n- Занимался ли обновлением пакетов внутри проекта;\n- Каждый год выходит новый ECMAScript , фичи, функции и т.д. Стоит их сразу использовать или нет;\n- Что происходит в браузере, когда пользователь вводит в url;\n- useEffect, useLayoutEffect, зачем нужны и их отличия;\n- Отличие event.target от event.currentTarget;\n- Расскажи про события и фазы;\n- Зачем нужен метод stopPropagation;\n\n3 задачи по js:\nconst products = [\n  { name: \"Laptop\", price: 1200, inStock: true },\n  { name: \"Mouse\", price: 20, inStock: false },\n  { name: \"Monitor\", price: 300, inStock: true },\n  { name: \"Keyboard\", price: 100, inStock: true },\n  { name: \"Phone\", price: 800, inStock: true },\n  { name: \"Desk\", price: 450, inStock: false },\n  { name: \"Chair\", price: 150, inStock: true },\n  { name: \"Tablet\", price: 350, inStock: true },\n  { name: \"Webcam\", price: 70, inStock: true },\n  { name: \"Speaker\", price: 130, inStock: true },\n];\n\n// 1. Задача:\n// * Оставить только товары, которые есть в наличии (inStock = true)\n// * Отсортировать их по цене по убыванию\n// * Взять топ-3 самых дорогих\n// * Вернуть массив из их названий\n\n\n// Для данной функции fn вернуть новую функцию, которая идентична исходной функции,\n// за исключением того, что она гарантирует, что fn будет вызвана не более одного раза.\n// При первом вызове возвращаемой функции она должна возвращать тот же результат, что и fn.\n// При каждом последующем вызове она должна возвращать undefined.\n\nfunction once(fn) {}\n\nlet fn = (a, b, c) => a + b + c;\nlet onceFn = once(fn);\n\nconsole.log(onceFn(1, 2, 3)); // 6\nconsole.log(onceFn(2, 3, 6)); // undefined\n\n\n// Дана асинхронная функция cb и время t в миллисекундах,\n// вернуть новую версию входной функции с ограничением по времени.\n// cb принимает аргументы, предоставленные функции с ограничением по времени.\n// Функция с ограничением по времени должна следовать следующим правилам:\n// Если cb завершается в течение лимита времени t миллисекунд,\n// функция с ограничением по времени должна разрешиться с результатом.\n// Если выполнение cb превышает лимит времени,\n// функция с ограничением по времени должна отклониться со строкой «Превышен лимит времени».\n\nconst asyncLimit = (fn, limit) => {\n  return async (...args) => {\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject('Превышен лимит времени'), limit);\n    });\n    const resultPromise = fn(...args);\n    return Promise.race([timeoutPromise, resultPromise]);\n  };\n};\n\nconst fn = async (n) => {\n  await new Promise((res) => setTimeout(res, 100));\n  return n * n;\n};\n\nconst fn2 = async (a, b) => {\n  await new Promise((res) => setTimeout(res, 120));\n  return a + b;\n};\n\n(async () => {\n  try {\n    // const res1 = await asyncLimit(fn, 50)(5); // rejected: Превышен лимит времени исполнения\n    // const res2 = await asyncLimit(fn, 150)(5); // resolved: 25\n    // const res3 = await asyncLimit(fn2, 100)(1, 2); // rejected: Превышен лимит времени исполнения\n    // const res4 = await asyncLimit(fn2, 150)(1, 2); // resolved: 3\n    console.log(res1);\n  } catch (e) {\n    console.log(e);\n  }\n})();"
      }
    ]
  },
  {
    "company": "- Ту Софт",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-09-26 11:33:14",
        "content": "2024-09-26 11:33:14\n Katerina -> 2071074234:\nКомпания - ТУ СОФТ\nВакансия: https://spb.hh.ru/vacancy/106312435\nзп: 250\nРезультат: ❌\nВопросы:\n1) Замыкания\n2) Event loop\n3) Чистый код - SOLID, KISS, DRY, YAGNI\n5) Что такое React\n6) Виртуальный дом\n7) Хуки с чем работаешь\n8) Разговор про Big O\nЗадачи:\nНайти медиану двух отсортированных массивов. Через sort здорово, но по условию они уже сортированы, как-то по ним нужно пройтись... не знаю.....\nПорядок выполнения",
        "full_content": "2024-09-26 11:33:14\n Katerina -> 2071074234:\nКомпания - ТУ СОФТ\nВакансия: https://spb.hh.ru/vacancy/106312435\nзп: 250\nРезультат: ❌\nВопросы:\n1) Замыкания\n2) Event loop\n3) Чистый код - SOLID, KISS, DRY, YAGNI\n5) Что такое React\n6) Виртуальный дом\n7) Хуки с чем работаешь\n8) Разговор про Big O\nЗадачи:\nНайти медиану двух отсортированных массивов. Через sort здорово, но по условию они уже сортированы, как-то по ним нужно пройтись... не знаю.....\nПорядок выполнения"
      },
      {
        "timestamp": "2024-09-22 19:47:41",
        "content": "2024-09-22 19:47:41\n Никита -> 2071074234:\n— Название ТУ СОФТ\n— Вакансия https://hh.ru/vacancy/106312435?hhtmFrom=employer_vacancies\n— зп: 230 net (как понимаю потолок)\n— поговорили про опыт, про то как и в чем измерить время на выполнение задач: стори поинты, часы, майки, собаки и тп.\n— Лайв кодинг:\nнужно найти медиану двух отсортированных массивов(за O(n)):\nчерез concat и sort сделал, но это nlog(n)\nпопробовал через 2 указателя, не решил,\nпоговорили ещё 15 минут по стек, почему выбирали, почем...",
        "full_content": "2024-09-22 19:47:41\n Никита -> 2071074234:\n— Название ТУ СОФТ\n— Вакансия https://hh.ru/vacancy/106312435?hhtmFrom=employer_vacancies\n— зп: 230 net (как понимаю потолок)\n— поговорили про опыт, про то как и в чем измерить время на выполнение задач: стори поинты, часы, майки, собаки и тп.\n— Лайв кодинг:\nнужно найти медиану двух отсортированных массивов(за O(n)):\nчерез concat и sort сделал, но это nlog(n)\nпопробовал через 2 указателя, не решил,\nпоговорили ещё 15 минут по стек, почему выбирали, почему от next отказываются\n— итог: оффер 230net"
      }
    ]
  },
  {
    "company": "Армо-Системы",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-10-25 15:19:54",
        "content": "2024-10-25 15:19:54\n Artyom Sozykin -> 2071074234:\nКомпания: АРМО-СИСТЕМЫ\nЗП: 150к\n\nПоведенческое интервью:\n 1. Как выводил зп из крипты? (p2p binance заблокировали с начала года, валидный ответ через обменники, либо через ton)\n 2. Какой последний блокер был на дейли\n 3. Что делали на грумминге\n 4. Что делали на планирование\n 5. По какому принципу задачи попадали в спринт\n 6. Как происходила оценка задач\n 7. Как команда оценивала сколько задач можно загрузить в один спринт?\n 8. Как ты оцениваешь...",
        "full_content": "2024-10-25 15:19:54\n Artyom Sozykin -> 2071074234:\nКомпания: АРМО-СИСТЕМЫ\nЗП: 150к\n\nПоведенческое интервью:\n 1. Как выводил зп из крипты? (p2p binance заблокировали с начала года, валидный ответ через обменники, либо через ton)\n 2. Какой последний блокер был на дейли\n 3. Что делали на грумминге\n 4. Что делали на планирование\n 5. По какому принципу задачи попадали в спринт\n 6. Как происходила оценка задач\n 7. Как команда оценивала сколько задач можно загрузить в один спринт?\n 8. Как ты оцениваешь задачу? Как оцениваешь задачу, которую никогда раньше не делал?\n 9. Что делал, если возникла сложность по задаче?\n 10. Где трекали задачи, где хранили код?\n 11. Как принималось решение взять vite вместо webpack?\n 12. Были ли конфликты или споры по code review?\n 13. Опиши свой обычный рабочий день"
      },
      {
        "timestamp": "2024-10-25 13:56:00",
        "content": "2024-10-25 13:56:00\n Artyom Sozykin -> 2071074234:\nКомпания: АРМО-СИСТЕМЫ\nЗП: 150к\nВакансия: https://hh.ru/vacancy/107883266\n\nВопросы:\n1. Почему лучше стоит использовать Map, например на 1000 объектов\n2. Что такое замыкание? Как оно работает?\n3. Где может использоваться замыкание в React\n4. Какие области видимости бывают в js?\n5. Расскажи про специфичность в css?\n6. Почему не стоит использовать !important в css\n7. Какие виды position бывают\n8. Чем отличается flex от grid\n9. Разница между absolut...",
        "full_content": "2024-10-25 13:56:00\n Artyom Sozykin -> 2071074234:\nКомпания: АРМО-СИСТЕМЫ\nЗП: 150к\nВакансия: https://hh.ru/vacancy/107883266\n\nВопросы:\n1. Почему лучше стоит использовать Map, например на 1000 объектов\n2. Что такое замыкание? Как оно работает?\n3. Где может использоваться замыкание в React\n4. Какие области видимости бывают в js?\n5. Расскажи про специфичность в css?\n6. Почему не стоит использовать !important в css\n7. Какие виды position бывают\n8. Чем отличается flex от grid\n9. Разница между absolute, fixed и sticky\n10. Как позиционируется fixed, отностительно чего?\n11. Расскажи про жизненный цикл компонента\n12. Что провоцирует ререндер в React?\n13. Как можем хранить данные к компоненте?\n14. Расскажи про useReducer\n15. Расскажи про useContext\n\nЗадачи решались просто на словах\n\nЗадача 1:\nВывести массив уникальных значений из двух массивов: \nconst uniqueArr([1,1,2,4,8,8], [3,6,6,9])\n\nЗадача 2:\n/*Имеется массив интервалов.\nНеобходимо объединить интервалы так, чтобы пересекающие интервалы были объеденены, причем первым значением интервала будет наименьшее значение из имеющихся двух интервалов, а вторым - наибольшее.\nНепересекающиеся интервалы оставить как есть.\nПример 1:\nИсходное значение: [[1,3], [2,6],\n[8, 10], [15, 18]]\nРезультат: [[1,6], [8,10], [15,18]]\nПример 2:\nИсходное значение: [[1,4], [4,5]]\nРезультат: [[1,5]] */"
      }
    ]
  },
  {
    "company": "Мой Склад",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-11-19 21:09:11",
        "content": "2024-11-19 21:09:11\n Андрей -> 2071074234:\nКомпания: Мой склад\nВакансия: https://hh.ru/vacancy/110422163\nЗП: 200+\nВопросы за опыт, что такое JS, чем нравится react, почему хуки нельзя юзать в циклах и условиях, какие минусы реакта видишь, как работает useEffect.\nЗадачи на чистый JS:\n\nЧто будет выведено\n let obj = { \"a\": 1 };\n \n (function (obj) {\n   obj = { \"a\": 2 };\n })(obj);\n \n console.log(obj.a)  //\n\n let obj = { \"a\": 1 };\n \n (function (obj) {\n   obj.a = 2;\n })(obj);\n \nconsole.log(obj.a) //\n\n\n...",
        "full_content": "2024-11-19 21:09:11\n Андрей -> 2071074234:\nКомпания: Мой склад\nВакансия: https://hh.ru/vacancy/110422163\nЗП: 200+\nВопросы за опыт, что такое JS, чем нравится react, почему хуки нельзя юзать в циклах и условиях, какие минусы реакта видишь, как работает useEffect.\nЗадачи на чистый JS:\n\nЧто будет выведено\n let obj = { \"a\": 1 };\n \n (function (obj) {\n   obj = { \"a\": 2 };\n })(obj);\n \n console.log(obj.a)  //\n\n let obj = { \"a\": 1 };\n \n (function (obj) {\n   obj.a = 2;\n })(obj);\n \nconsole.log(obj.a) //\n\n\n let x = { \"a\": 1 };\nlet y = x;\n\n y = { \"a\": 2 };\n\n console.log(x.a) //\n\n\nНаписать ф-ю counter, которая будет возвращать кол-во вызовов самой себя\ncounter() // 1\ncounter() // 2\n...\ncounter() // n\n\n\nнаписать функцию memoize.\nconst sum = (a,b,c) => a + b + c;\nconst sumobjects = ({a,b,c}) => a + b + c;\n\nconst memoizeSum = memoize(sum);\nconst memoizeSumoObjects = memoize(sumobjects)\n\nmemoizeSumoObjects({a: 1, b: 2, c: 3}); // calc 6\nmemoizeSumoObjects({a: 1, c: 3, b: 2}); // from cache 6\nmemoizeSumoObjects({c: 3, b: 3}); // from cache 6 ???\n\nmemoizeSum(1,2,3) // 6 calc\nmemoizeSum(1,2,2) // 5 calc\nmemoizeSum(1,2,3) // 6 from cache\n\nmemoizeSum(-1,-2, 3) // \nmemoizeSum(-1,-2, 3) //\n\n\nЗадача на реакт: https://stackblitz.com/edit/vitejs-vite-zbxh9h?file=README.md"
      },
      {
        "timestamp": "2024-03-09 13:32:31",
        "content": "2024-03-09 13:32:31\n Kirill N -> 2071074234:\nЗаписи собеседований  \nКомпания: MOVAVI от 26.02 \nhttps://www.youtube.com/watch?v=X8BAWSHpr9g \n \nКомпания: Мой склад 26.02 \nhttps://www.youtube.com/watch?v=I5vdydjkmAE \n \nКомпания: Собес 27.02 \nhttps://www.youtube.com/watch?v=USFqJBmNrW4 \n \nКомпания: Озон 1.03 (1 этап) \nhttps://www.youtube.com/watch?v=-9CTCHiGLtg \n \nКомпания: Озон 05.03 (2 этап) \nhttps://youtu.be/SsOs-mTIiN8 \n \nКомпания: ГПБ 01.03 \nhttps://youtu.be/dn7HsjOcDfk \n \nКомпания: ВК 05.03 \nh...",
        "full_content": "2024-03-09 13:32:31\n Kirill N -> 2071074234:\nЗаписи собеседований  \nКомпания: MOVAVI от 26.02 \nhttps://www.youtube.com/watch?v=X8BAWSHpr9g \n \nКомпания: Мой склад 26.02 \nhttps://www.youtube.com/watch?v=I5vdydjkmAE \n \nКомпания: Собес 27.02 \nhttps://www.youtube.com/watch?v=USFqJBmNrW4 \n \nКомпания: Озон 1.03 (1 этап) \nhttps://www.youtube.com/watch?v=-9CTCHiGLtg \n \nКомпания: Озон 05.03 (2 этап) \nhttps://youtu.be/SsOs-mTIiN8 \n \nКомпания: ГПБ 01.03 \nhttps://youtu.be/dn7HsjOcDfk \n \nКомпания: ВК 05.03 \nhttps://youtu.be/X4T0G_n1jqo \n \nКомпания ВТБ 06.03  \nhttps://youtu.be/3wfKfjohkw0 \n \nКомпания: Сбер технологии 07.03 \nhttps://youtu.be/gt2RcGbzloQ \n \nКомпания: Иннотех 07.03 \nhttps://youtu.be/soujRRxtnC8 \nКомпания: IT ONE 07.03 \nhttps://youtu.be/RaZ-iZOJgDM"
      }
    ]
  },
  {
    "company": "Билайн",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-03-21 14:04:57",
        "content": "2025-03-21 14:04:57\n Манс -> 2071074234:\nКомпания Билайн\nЗп 250.     \nВопросы: \n1. про жизненные ситуации типа кем видишь себя через 5 лет, с какими качествами тебя ассоциируют твои знакомые, Каким достижением в жизни гордишься. \n2. Потом задачка на логику: 1,5 кролика съедают 1,5  морковки за 1,5  минут. Сколько морковок съедать 9 кроликов за 9 минут.\n3. Дальше уже вопросы про Rest, http, https, авторизацию, про ввод url в адресную строку.\n4. После стандартные вопросы JS, типы данных, методы ма...",
        "full_content": "2025-03-21 14:04:57\n Манс -> 2071074234:\nКомпания Билайн\nЗп 250.     \nВопросы: \n1. про жизненные ситуации типа кем видишь себя через 5 лет, с какими качествами тебя ассоциируют твои знакомые, Каким достижением в жизни гордишься. \n2. Потом задачка на логику: 1,5 кролика съедают 1,5  морковки за 1,5  минут. Сколько морковок съедать 9 кроликов за 9 минут.\n3. Дальше уже вопросы про Rest, http, https, авторизацию, про ввод url в адресную строку.\n4. После стандартные вопросы JS, типы данных, методы массивов, замыкание, сборщик мусора.\n5. Отличия type от interface, задачка написать тип который принимает только отрицательные числа и также только положительные числа.\n6. React плюсы и минусы, какие есть аналоги. Какие хуки знаешь? Есть 5 useEffect в компоненте в каком сделаешь очистку обработчика событий?"
      },
      {
        "timestamp": "2024-02-05 15:34:53",
        "content": "2024-02-05 15:34:53\n 6044883114 -> 2071074234:\nНазвание компании: Билайн\nВакансия: https://hh.ru/vacancy/91647770\nЗП: 250к - ок \nЗадачи: подробные вопросы об опыте и технологиях + реализовать функцию: \n\nconsole.log(\n  fuzzySearch(\"am\", [\n    \"fuzzy\",\n    \"maskva\",\n    \"mama\",\n    \"search\",\n    \"algorithm\",\n    \"utility\"\n  ])) // [\"mama\",  \"algorithm\" ]",
        "full_content": "2024-02-05 15:34:53\n 6044883114 -> 2071074234:\nНазвание компании: Билайн\nВакансия: https://hh.ru/vacancy/91647770\nЗП: 250к - ок \nЗадачи: подробные вопросы об опыте и технологиях + реализовать функцию: \n\nconsole.log(\n  fuzzySearch(\"am\", [\n    \"fuzzy\",\n    \"maskva\",\n    \"mama\",\n    \"search\",\n    \"algorithm\",\n    \"utility\"\n  ])) // [\"mama\",  \"algorithm\" ]"
      }
    ]
  },
  {
    "company": "Sarex",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-03-05 12:34:45",
        "content": "2025-03-05 12:34:45\n Евгений Гусев -> 2071074234:\nSarex \nНаписала  hr\nзп:  200-250\nСразу задача:\nlet books = [\n  {\"id\": 7, \"name\": \"Война и Мир\"},\n  {\"id\": 5, \"name\": \"Чистая архитектура\"},\n  {\"id\": 3, \"name\": \"Одиссея\"},\n  {\"id\": 9, \"name\": \"YDKJS\"},\n]\n\nlet reviews = [\n  {\"id\": 1001, \"book_id\": 7},\n  {\"id\": 1002, \"book_id\": 7},\n  {\"id\": 1003, \"book_id\": 3},\n  {\"id\": 1004, \"book_id\": 7},\n  {\"id\": 1005, \"book_id\": 5},\n]\nОтвет:\nconst resultArray = books.map(dataItem => {\n    const currentReviews =...",
        "full_content": "2025-03-05 12:34:45\n Евгений Гусев -> 2071074234:\nSarex \nНаписала  hr\nзп:  200-250\nСразу задача:\nlet books = [\n  {\"id\": 7, \"name\": \"Война и Мир\"},\n  {\"id\": 5, \"name\": \"Чистая архитектура\"},\n  {\"id\": 3, \"name\": \"Одиссея\"},\n  {\"id\": 9, \"name\": \"YDKJS\"},\n]\n\nlet reviews = [\n  {\"id\": 1001, \"book_id\": 7},\n  {\"id\": 1002, \"book_id\": 7},\n  {\"id\": 1003, \"book_id\": 3},\n  {\"id\": 1004, \"book_id\": 7},\n  {\"id\": 1005, \"book_id\": 5},\n]\nОтвет:\nconst resultArray = books.map(dataItem => {\n    const currentReviews = reviews.filter(elem => elem.id === dataItem.book_id )\n    return {...dataItem, reviews: currentReviews }\n    \n})"
      },
      {
        "timestamp": "2024-10-27 10:16:39",
        "content": "2024-10-27 10:16:39\n Сергей -> 2071074234:\nКомпания: Sarex\nЗП: вилка 190-230к\nhr сам написал\nВопросы: \n- Как дела, настроение чем занимаешься вне программирования)\n- Как пришел в it?\n- ErrorBoundary\n- была реализация функции дебаунс, нужно было понять по коду что это реализации дебаунса и переименовать функцию\n- var/let/cont, что будет если их вызвать до объявления\n- undefined vs null\n- задачка где в if объявлена функция и ниже вызывается, что выведет в консоль\n- с нейронками работал?\n- про TS(д...",
        "full_content": "2024-10-27 10:16:39\n Сергей -> 2071074234:\nКомпания: Sarex\nЗП: вилка 190-230к\nhr сам написал\nВопросы: \n- Как дела, настроение чем занимаешься вне программирования)\n- Как пришел в it?\n- ErrorBoundary\n- была реализация функции дебаунс, нужно было понять по коду что это реализации дебаунса и переименовать функцию\n- var/let/cont, что будет если их вызвать до объявления\n- undefined vs null\n- задачка где в if объявлена функция и ниже вызывается, что выведет в консоль\n- с нейронками работал?\n- про TS(дженерики, Interface vs type)\nЗадачи:\nподобная задача этой, только по block_id в refArray могли быть несколько одинаковых block_id, и добавить свойство, значнием которого был массив в dataArray\nconst refArray = [\n    {block_id: 12243, name: 'current'},\n    {block_id: 148434, name: 'old'},\n    {block_id: 18681, name: 'new'},\n    {block_id: 38311, name: 'backUp'},\n]\n\nconst dataArray = [\n    {conf_id: 4843, resName: 'r1', block_id: 122434},\n    {conf_id: 8768, resName: 'r2', block_id: 14834},\n    {conf_id: 45364, resName: 'r3', block_id: 18681},\n    {conf_id: 948, resName: 'r4', block_id: 38311},\n]\n\nconst resultArray = dataArray.map(dataItem => {\n    const block = refArray.find(refItem => refItem.block_id === dataItem.block_id);\n    return {...dataItem, blockName: block?.name}\n})\n\n////// еще решить сложность O(n)\n\n\nvar i = 10;\nvar array = [];\nwhile (i--){ \n    array.push(function() {\n         return i + i; }\n    );\n}\nconsole. log([ array[0](), array[1]()]) // что выведет, как исправить?\n\nЗадача на ревью кода React(useeffect, fetch, usecallback, usestate)"
      }
    ]
  },
  {
    "company": "Zero Agency",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-07-08 12:04:47",
        "content": "2025-07-08 12:04:47\n Daniil Daniil -> 2071074234:\nZero Agency(только офис пока, но потом мб будет гибрид или удаленка)\nЗп:320 на руки согласовали\nВначале он рассказывает о своих проектах, потом ты о своих\nПотом решение задачи:\n\nfunction getCurrentSeatLimit(currentHour) {\n// Настройки акции\nconst startHour = 12; // Акция начинается в 12:00\nconst endHour = 20; // Акция заканчивается в 20:00\nconst totalSeats = 100; // Общее количество мест\n// Акция еще не началась\nif (currentHour < startHour) {\nret...",
        "full_content": "2025-07-08 12:04:47\n Daniil Daniil -> 2071074234:\nZero Agency(только офис пока, но потом мб будет гибрид или удаленка)\nЗп:320 на руки согласовали\nВначале он рассказывает о своих проектах, потом ты о своих\nПотом решение задачи:\n\nfunction getCurrentSeatLimit(currentHour) {\n// Настройки акции\nconst startHour = 12; // Акция начинается в 12:00\nconst endHour = 20; // Акция заканчивается в 20:00\nconst totalSeats = 100; // Общее количество мест\n// Акция еще не началась\nif (currentHour < startHour) {\nreturn totalSeats;\n}\n// Акция уже закончилась\nif (currentHour >= endHour) {\nreturn 0;\n}\n\n// Прогресс акции от 0 (начало) до 1 (конец)\nconst currentPromotionProgress = (currentHour - startHour) / (endHour\n- startHour);\nreturn Math.floor(totalSeats * (1 - Math.pow(currentPromotionProgress,\n2)));\nТолько надо учесть, что в отвече ты получишь число проданных , тебе еще надо будет от всего вычесть это число\nПотом будут вопросы:\n1. Чем увлекаешься\n2. Комфорт зп\n3. как свободное время проводишь\n4. Сможешь ли ты перехать и когда готов"
      },
      {
        "timestamp": "2025-06-01 19:38:37",
        "content": "2025-06-01 19:38:37\n Никита -> 2071074234:\nZero Agency\nЗП: от 200 назвал, ванасия 150-250\nИщут сильного разраба\n\nВопросы:\nЧто происходит с момента ввода URL до получения первого пакета?\nСколько ip-адресов может быть у одного адреса сайте?(много)\nДля чего одному сайту много ip адресов?\nДля чего используется CDN?\nСталкивался с next.js, настройкой кеширования статики?\nКак синхронизировать смену темной/светлой темы при нескольких открытых вкладках сайта в браузере?\nРабота со storage синхронная или а...",
        "full_content": "2025-06-01 19:38:37\n Никита -> 2071074234:\nZero Agency\nЗП: от 200 назвал, ванасия 150-250\nИщут сильного разраба\n\nВопросы:\nЧто происходит с момента ввода URL до получения первого пакета?\nСколько ip-адресов может быть у одного адреса сайте?(много)\nДля чего одному сайту много ip адресов?\nДля чего используется CDN?\nСталкивался с next.js, настройкой кеширования статики?\nКак синхронизировать смену темной/светлой темы при нескольких открытых вкладках сайта в браузере?\nРабота со storage синхронная или асинхронная операция?\nЧто такое Service Worker?\nКак реализуется асинхронность в js?\nЧто такое изолированность потоков?\nСталкивался с вебсокетами? Какие плюсы минусы?\nКакие есть аналоги  вебсокета?(long polling)\nКак работает long polling?\nЧто будет происходить, если на клиенте таймаут опроса сервера 5 мин, а на клиенте 2 сек?\nЧто такое промисы и как с ними работать?\nPromise.any что такое и когда применяется? Практический пример (загрузка данных из нескольких источников)\n\nА вот тут начинается самая интересная часть собеса))))\nНужна ли фронтенд-программисту математика?\nКак давно решал квадратные уравнения?)\n\nЗАДАЧА 1\nРешить квадратное уравнение\n2x^2 - x = 0\n\nЗАДАЧА 2\nНаписать функцию в js для гиберболического графика https://imgur.com/a/WMvyzNe"
      }
    ]
  },
  {
    "company": "Платежное Решение",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-06-20 09:45:33",
        "content": "2025-06-20 09:45:33\n Alexander K -> 2071074234:\nПлатежное Решение (livecoding) \nзп:300+\n\n1.\nНеправильные регулярные выражения (неверное использование скобок)\nНеправильная логика определения сложности пароля(обратная последовательность)\n\nconst PasswordStrength = ({ value }) => {\n  const [complexity, setComplexity] = useState(0);\n\n  useEffect(() => {\n    // Исправленные регулярные выражения (без .test(value) внутри условий)\n    if (value.length === 0) {\n      setComplexity(0);\n    } else if (/\\d/....",
        "full_content": "2025-06-20 09:45:33\n Alexander K -> 2071074234:\nПлатежное Решение (livecoding) \nзп:300+\n\n1.\nНеправильные регулярные выражения (неверное использование скобок)\nНеправильная логика определения сложности пароля(обратная последовательность)\n\nconst PasswordStrength = ({ value }) => {\n  const [complexity, setComplexity] = useState(0);\n\n  useEffect(() => {\n    // Исправленные регулярные выражения (без .test(value) внутри условий)\n    if (value.length === 0) {\n      setComplexity(0);\n    } else if (/\\d/.test(value) && /[a-z]/.test(value)) {\n      setComplexity(1);\n    } else if (/\\d/.test(value) && /[a-zA-Z]/.test(value)) {\n      setComplexity(2);\n    } else if (/\\d/.test(value) && /[A-Z]/.test(value) && /\\W/.test(value)) {\n      setComplexity(3);\n    } else {\n      setComplexity(0);\n    }\n  }, [value]);\n\n  return (\n    <div className={`strong-item easy ${complexity > 0 ? \"active\" : \"\"}`}>\n      {complexity === 1 && \"Простой пароль\"}\n      {complexity === 2 && \"Средний пароль\"}\n      {complexity === 3 && \"Сложный пароль\"}\n      {complexity === 0 && \"Введите пароль\"}\n    </div>\n  );\n};\n\n2.\nНеоптимальная фильтрация пользователей\nОтсутствие обработки ошибок при загрузке данных\nОтсутствие loadingа в исходном варианте\n\n\nconst UserList = ({ filter }) => {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const API_URL = 'https://jsonplaceholder.typicode.com/users';\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(API_URL)\n      .then((response) => response.json())\n      .then((data) => {\n        setUsers(data);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.log('Error:', error);\n        setLoading(false);\n      });\n  }, []);\n\n  // Рефакторинг фильтрации для более чистого кода\n  const filteredUsers = users.filter((user) =>\n    !(filter || \"\").toLowerCase().trim() || \n    user.name.toLowerCase().includes((filter || \"\").toLowerCase().trim())\n  );\n\n  return (\n    <div>\n      {loading && <p>Loading...</p>}\n      <ul>\n        {filteredUsers.map((user) => (\n          <li key={user.id}>\n            {user.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};"
      },
      {
        "timestamp": "2025-06-16 14:27:29",
        "content": "2025-06-16 14:27:29\n Alexander K -> 2071074234:\nПлатежное решение \nзп: 300+ \n\n2. React и компоненты\nЖизненный цикл компонентов:\nshouldComponentUpdate\ncomponentDidUpdate\ncomponentDidMount\nwillUnmount\nmount,unmount,update\nuseEffect для монтирования\nuseEffect с возвратом анмаунт\nРабота с зависимостями (deps)\n\n3. Обработка ошибок\nError boundary\nComponent did catch\n\n4. Оптимизация и кэширование\nuseMemo для кэширования результатов вычислений\nКороткоживущий кэш\nRace condition и его решение( React Query...",
        "full_content": "2025-06-16 14:27:29\n Alexander K -> 2071074234:\nПлатежное решение \nзп: 300+ \n\n2. React и компоненты\nЖизненный цикл компонентов:\nshouldComponentUpdate\ncomponentDidUpdate\ncomponentDidMount\nwillUnmount\nmount,unmount,update\nuseEffect для монтирования\nuseEffect с возвратом анмаунт\nРабота с зависимостями (deps)\n\n3. Обработка ошибок\nError boundary\nComponent did catch\n\n4. Оптимизация и кэширование\nuseMemo для кэширования результатов вычислений\nКороткоживущий кэш\nRace condition и его решение( React Query)\n\n5. JavaScript основы\nПроверка значений: true, false, null, 0, 1, undefined\nОператоры сравнения (??, ||)\nЛогические операторы и их особенности\n6. Архитектура и оптимизация\nУменьшение зависимостей\nРефакторинг\nВнедрение FSD \n\n7. Оптимизация производительности\ngzip сжатие\nМинификация и углификация\nОптимизация SVG\n\n8. Состояния приложения\nДанные, загрузка, ошибки\nКэширование состояний\nИзолированный layout\nРазличие Pages Router vs App Router\n\n9. Серверная часть\nAction server\nСерверные компоненты\n\n10. Стилизация\nМодульные стили\nГотовые решения\nTailwindCSS\n\n11. Авторизация\nОпыт с JWT и SSO"
      }
    ]
  },
  {
    "company": "Росбанк",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-01-18 18:00:49",
        "content": "2024-01-18 18:00:49\n Michael Yakovlev -> 2071074234:\nРосбанк\n\nСобес был классный. 3 человека от команды. Приятно общались, очень вежливо, про опечатки на лайвкодинге подсказывали (лайвкодинг был в приложении без подсказок синтаксиса и ошибок). Ребята очень понравились.\n\nСобеседование делится на 4 части:\n1. Задачи\n2. Теория\n3. Вопросы на кругозор\n4. Софтскилы\n\nЗадачи:\n1. Всем известный палиндром\n2. Консольлоги на eventloop + объяснить свой ответ и рассказать про eventloop\n3. Рефакторинг React ком...",
        "full_content": "2024-01-18 18:00:49\n Michael Yakovlev -> 2071074234:\nРосбанк\n\nСобес был классный. 3 человека от команды. Приятно общались, очень вежливо, про опечатки на лайвкодинге подсказывали (лайвкодинг был в приложении без подсказок синтаксиса и ошибок). Ребята очень понравились.\n\nСобеседование делится на 4 части:\n1. Задачи\n2. Теория\n3. Вопросы на кругозор\n4. Софтскилы\n\nЗадачи:\n1. Всем известный палиндром\n2. Консольлоги на eventloop + объяснить свой ответ и рассказать про eventloop\n3. Рефакторинг React компонента (что вынести, как поделить, мемоизация и тд). Можно не кодить, а словами объяснить каждое действие.\n\nТеория:\n- Оценить сложность своего решения палиндрома.\n- Как оценить сложность алгоритма?\n- Map, Set, WeekMap и WeekSet и до кучи про сборку мусора.\n- Спросили про все хуки кроме useReducer \n- Как не блокировать рендер стилями при очень большом бандле стилей?\n- Как написать инлайном скрипт в header, в котором есть обращение к DOM, и чтобы он не вернул ошибку?\n- Было много вопросов про оптимизации в js и React\n- Redux\n- Архетектура Flux\n- Были ещё вопросы из теории. Не запомнил.\n\nКругозор:\n- Отличие протоколов HTTP разных версий \n- Cors (зачем, как работает фронт/бэк и тд)\n- Много вопросов про спеки http запросов\n- Про куки, localStorage и sessionStorage (зачем, где хранятся, как создаются и тд)\n- SSR\n\nСофт скилы:\n- Про жизнь, конфликты, отношение к работе, ворк-лайф баланс и тд\n- Чем гордишся в текушей компании (чего достиг)\n- Какие были факапы на работе\n- Как решаешь конфликты на примере код-ревью\n\nЗП: от 300к\n\n#Росбанк #senior"
      },
      {
        "timestamp": "2024-01-15 13:32:01",
        "content": "2024-01-15 13:32:01\n Aleksei -> 2071074234:\nНазвание компании - Росбанк\nСсылка на вакансию - hh.ru/vacancy/90277247\nЗп -  от 340к\nЗадачи\n1)\n<script>\n  const check = () => {\n    console.log(1)\n    const promise = new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(2)\n        }, 1000);\n    })\n    setTimeout(() => {\n        console.log(3)\n    }, 2000);\n    Promise.resolve(4).then(console.log);\n    promise.then(r => console.log(r))\n  }\n  \n  // ответ: \n</script>\n2)\n<script>\nvar ...",
        "full_content": "2024-01-15 13:32:01\n Aleksei -> 2071074234:\nНазвание компании - Росбанк\nСсылка на вакансию - hh.ru/vacancy/90277247\nЗп -  от 340к\nЗадачи\n1)\n<script>\n  const check = () => {\n    console.log(1)\n    const promise = new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(2)\n        }, 1000);\n    })\n    setTimeout(() => {\n        console.log(3)\n    }, 2000);\n    Promise.resolve(4).then(console.log);\n    promise.then(r => console.log(r))\n  }\n  \n  // ответ: \n</script>\n2)\n<script>\nvar test1 = 'aaaabb';\nvar test2 = 'доход';\nvar test3 = 'А роза упала на лапу Азора';\nvar test4 = '';\n\nfunction isPalindrome(testString) {\n    // решение\n}\n\nfunction test(value, callback, target) {\n    var res = callback(value) === target;\n    console.log(`value: ${value}; result: ${res ? '+' : '-'}`);\n}\n\ntest(test1, isPalindrome, false)\ntest(test2, isPalindrome, true)\ntest(test3, isPalindrome, true)\ntest(test4, isPalindrome, null)\n\n</script>\n+ нужно было оценить сложность\n3)\nнужно доделать работающий слайдер на чистом жс (нашел код только сделанного задания)\n<div class=\"wrap\">\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n  <div>4</div>\n  <div>5</div>\n  <div>6</div>\n  <div>7</div>\n  <div>8</div>\n  <div>9</div>\n  <div>10</div>\n</div>\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const wrap = document.querySelector('.wrap');\n  const items = document.querySelectorAll('.wrap > div');\n  const prevBtn = document.getElementById('prevBtn');\n  const nextBtn = document.getElementById('nextBtn');\n  let currentIndex = 0;\n\n  function showItem(index) {\n    items.forEach((item, i) => {\n      item.style.display = i === index ? 'block' : 'none';\n    });\n  }\n\n  function nextItem() {\n    currentIndex = (currentIndex + 1) % items.length;\n    showItem(currentIndex);\n  }\n\n  function prevItem() {\n    currentIndex = (currentIndex - 1 + items.length) % items.length;\n    showItem(currentIndex);\n  }\n\n  nextBtn.addEventListener('click', nextItem);\n  prevBtn.addEventListener('click', prevItem);\n\n  showItem(currentIndex); // Инициализация: показываем первый элемент\n});\n4)\nисправить код"
      }
    ]
  },
  {
    "company": "Signal",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-03-04 12:02:44",
        "content": "2025-03-04 12:02:44\n Timofei Syromiatnikov -> 2071074234:\n— Название компании: Signal (1 этап скрининг с лайвкодингом)\n— Ссылка на вакансию: https://hh.ru/vacancy/117579944\n— ЗП: 200-250к\n— Задачи:\n1) \n/*\n    Given a string s, \n    find the first non-repeating character in the entire string and return its index. \n    If it does not exist, return -1.\n    Examples:\n    firstUniqChar(\"wwoorks\") // 4\n    firstUniqChar(\"soundscool\") // 2\n    firstUniqChar(\"zzbb\") // -1\n*/\n\nfunction firstUniqChar(s: s...",
        "full_content": "2025-03-04 12:02:44\n Timofei Syromiatnikov -> 2071074234:\n— Название компании: Signal (1 этап скрининг с лайвкодингом)\n— Ссылка на вакансию: https://hh.ru/vacancy/117579944\n— ЗП: 200-250к\n— Задачи:\n1) \n/*\n    Given a string s, \n    find the first non-repeating character in the entire string and return its index. \n    If it does not exist, return -1.\n    Examples:\n    firstUniqChar(\"wwoorks\") // 4\n    firstUniqChar(\"soundscool\") // 2\n    firstUniqChar(\"zzbb\") // -1\n*/\n\nfunction firstUniqChar(s: string): number {\n  // throw new Error(\"not implemented\");\n\n// Моё решение\n  const repeatList = {}\n\n  for (let i = 0; i < s.length; i++) {\n    if (repeatList[s[i]]) {\n      repeatList[s[i]] += 1\n    } else {\n      repeatList[s[i]] = 1\n    }\n  }\n\n  for (const key in repeatList) {\n    if (repeatList[key] === 1) {\n      return s.indexOf(key)\n    }\n  }\n\n  return -1\n}\n\nconsole.log(firstUniqChar('wwoorks')); // 4\nconsole.log(firstUniqChar('soundscool')); // 2\nconsole.log(firstUniqChar('zzbb')); // -1\n\n2)\n/**\n * 1. Реализовать таймер. Должен отображать текущее значение в секундах.\n * Кнопка Toggle - останавливает и запускает отсчёт.\n * Кнопка Reset - сбрасывает значение.\n * 2. Избавиться от лишних ререндеров InnerComponent\n */\nconst Timer = () => {\n  return (\n    <div className=\"stack column\">\n      <h2>seconds: 0</h2>\n      <div className=\"stack\">\n        <button className=\"f-width\">Toggle</button>\n        <button className=\"f-width\">Reset</button>\n      </div>\n      <InnerComponent callback={() => console.log('Inner click')} />\n    </div>\n  );\n};\ntype Props = {\n  callback: () => void;\n};\n\nconst InnerComponent = ({ callback }: Props) => {\n  console.count('RenderInnerComponent');\n  return <button onClick={callback}>InnerComponent</button>;\n};\n\nexport default Timer;"
      },
      {
        "timestamp": "2024-04-05 18:09:35",
        "content": "2024-04-05 18:09:35\n Roman -> 2071074234:\n- Название компании: SIGNAL\n- Ссылка на вакансию: https://kazan.hh.ru/vacancy/95868250\n- ЗП: от 200 000 до 250 000 ₽ на руки\n- Задачи: Было 4 задачи. Сначала первые две дал hr, затем подключились разработчики с еще 2 задачами. Первые две задачи решил, нужно было за 30 минут, решил за 40 минут. На третьей задаче, не понял условие задачи и нормально не объяснили, выглядело сложно. Я ушел с собеса.\n- Успех собеса: ❌\nФидбэк о собесе: -\n\n\n1.\n/*\n    Given a st...",
        "full_content": "2024-04-05 18:09:35\n Roman -> 2071074234:\n- Название компании: SIGNAL\n- Ссылка на вакансию: https://kazan.hh.ru/vacancy/95868250\n- ЗП: от 200 000 до 250 000 ₽ на руки\n- Задачи: Было 4 задачи. Сначала первые две дал hr, затем подключились разработчики с еще 2 задачами. Первые две задачи решил, нужно было за 30 минут, решил за 40 минут. На третьей задаче, не понял условие задачи и нормально не объяснили, выглядело сложно. Я ушел с собеса.\n- Успех собеса: ❌\nФидбэк о собесе: -\n\n\n1.\n/*\n    Given a string s, \n    find the first non-repeating character in it and return its index. \n    If it does not exist, return -1.\n    Examples:\n    firstUniqChar(\"works\") // 0\n    firstUniqChar(\"soundscool\") // 2\n    firstUniqChar(\"zzbb\") // -1\n*/\n\nfunction firstUniqChar(s: string): number {\n  throw new Error(\"not implemented\");\n}\n\nconsole.log(firstUniqChar(\"works\")); // 0\nconsole.log(firstUniqChar(\"soundscool\")); // 2\nconsole.log(firstUniqChar(\"zzbb\")); // -1\n\n\n2. \n// Написать таймер, с кнопками Toggle - запускает и приостанавливает счетчик\n// Reset - сбрасывает счетчик. Если счетчик идет, то сбрасывает счетчик и запускает заново. Если счетчик приостановлен, то только сбрасывает счетчик\nimport * as React from \"react\";\n\nconst Timer = () => {\n  return (\n    <div>\n      <h2>seconds: 0</h2>\n      <button>Toggle</button>\n      <button>Reset</button>\n    </div>\n  );\n};\n\nexport default Timer;\n\n\n3.\n/**\n * Implement the function that will query the URLs and return an array of responses ['url1_answer', 'url2_answer', ...] in the shortest possible time.\n * At any given time, no more than [limit] requests can be executed.\n * Use the asyncFetch function as a replacement for fetch.\n */\n\ninterface ResponseDataType {\n  delay: number;\n  data: string;\n}\nconst asyncFetch = (url: string) =>\n  new Promise<ResponseDataType>((resolve) => {\n    const delay = Math.random() * 1000;\n    setTimeout(() => {\n      resolve({ delay, data: \"result\" + url });\n    }, delay);\n  });\n\nconst urlsToFetch = Array(30)\n  .fill((i: number) => `/${i}/aadt`)\n  .map((fn, index) => fn(index));\n\n/**               Решение задачи                */\nconst paralellUploading = (\n  urls: string[],\n  parallelLimit: number,\n): Promise<ResponseDataType[]> => {\n  /** START SOLUTION HERE */\n  return Promise.resolve([]);\n};\n\nparalellUploading(urlsToFetch, 3).then((x) =>\n  console.log(\"3_test-getUrls.ts\", x),\n);\n\n\n4.\n/*\n    The task is to remove from the object tree all nodes\n    where the Alive property is false. However, if a node\n    has an Alive property that is true, all of its parents\n    and children should remain in the tree.\n    \n    Extra:\n    Perform the task using recursive and iterative algorithms,\n    explain in which cases each one should be used, as well as\n    the advantages and disadvantages of each approach.\n*/\n\nimport { NodeItemWithUtils } from \"./tests\";\n\n/** SOLUTION */\nclass NodeItem extends NodeItemWithUtils {\n  constructor(\n    public id: number,\n    public alive: boolean,\n    public children: NodeItem[],\n    public parent?: NodeItem,\n  ) {\n    super(id, alive, children, parent);\n  }\n}\n\nexport function nodeCleaner(rootNode: NodeItem) {\n  /** START SOLUTION HERE  */\n}"
      }
    ]
  },
  {
    "company": "Девман",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-11-18 22:37:01",
        "content": "2024-11-18 22:37:01\n Артем -> 2071074234:\nКомпания: Девман\nЗП: 220\nВопросы:\nEventLoop\nПромисы\nReact плюсы\nreact минусы\nfiber reconsalation\nХуки\nuseLAoutotEffect\nвебворкеры\nкак работал с графиками\neffector\nЗадача: отобразить список предварительно отсортировать его\n\nlistenPosts((post) => {\n  if (post.id === findID) {\n    posts[findID] = post;\n    console.log(`Добавлен пост с ID ${post.id}`); // Логируем добавление поста\n    addPost(posts[findID]);\n    findID++;\n    \n    while (posts[findID]) {\n   ...",
        "full_content": "2024-11-18 22:37:01\n Артем -> 2071074234:\nКомпания: Девман\nЗП: 220\nВопросы:\nEventLoop\nПромисы\nReact плюсы\nreact минусы\nfiber reconsalation\nХуки\nuseLAoutotEffect\nвебворкеры\nкак работал с графиками\neffector\nЗадача: отобразить список предварительно отсортировать его\n\nlistenPosts((post) => {\n  if (post.id === findID) {\n    posts[findID] = post;\n    console.log(`Добавлен пост с ID ${post.id}`); // Логируем добавление поста\n    addPost(posts[findID]);\n    findID++;\n    \n    while (posts[findID]) {\n      console.log(`Добавлен пост с ID ${posts[findID].id}`); // Логируем добавление поста в цикле\n      addPost(posts[findID]);\n      findID++;\n    }\n  } else {\n    posts.push(post); // Просто добавляем в конец массива\n    console.log(`Пост с ID ${post.id} добавлен в конец массива`); // Логируем добавление в конец\n  }\n});\n\nэто не решение но близко к этому. решить не смог"
      },
      {
        "timestamp": "2024-11-15 11:51:56",
        "content": "2024-11-15 11:51:56\n Артем -> 2071074234:\nКомпания: Девман\nЗП: 220\nВопросы: \nЧувак просто все 40 минут спрашивал про опыт\nпро взаимодействие про задачи\nпро то как ревьюер как что делал\nчто проиходило там когда что то не получалось за спринт \nработал ли с графиками\nкак оптимизировал react\nкак работет useEffect",
        "full_content": "2024-11-15 11:51:56\n Артем -> 2071074234:\nКомпания: Девман\nЗП: 220\nВопросы: \nЧувак просто все 40 минут спрашивал про опыт\nпро взаимодействие про задачи\nпро то как ревьюер как что делал\nчто проиходило там когда что то не получалось за спринт \nработал ли с графиками\nкак оптимизировал react\nкак работет useEffect"
      }
    ]
  },
  {
    "company": "Goinvest",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-07-08 11:53:22",
        "content": "2024-07-08 11:53:22\n Ярослав Мудрый -> 2071074234:\n- компания: GoInvest финал\n- ссылка: сами написали \n- зп: 300к\n\nВопросы:\n1) Занимался ли инвестированием\n2) расскажи про последние проекты\n3) какую фичу реализовывал, как проходил анализ требований\n4) были ли проекты связанные с инвестициями\n5) какой состав команды\n6) какие задачи выполнял (проектирование, реализация, код ревью, менторинг)\n7) расскажи про задачу, в которой тебе потребовалась помощь\n8) почему уходишь с текущего места\n9) какую ком...",
        "full_content": "2024-07-08 11:53:22\n Ярослав Мудрый -> 2071074234:\n- компания: GoInvest финал\n- ссылка: сами написали \n- зп: 300к\n\nВопросы:\n1) Занимался ли инвестированием\n2) расскажи про последние проекты\n3) какую фичу реализовывал, как проходил анализ требований\n4) были ли проекты связанные с инвестициями\n5) какой состав команды\n6) какие задачи выполнял (проектирование, реализация, код ревью, менторинг)\n7) расскажи про задачу, в которой тебе потребовалась помощь\n8) почему уходишь с текущего места\n9) какую команду ищешь"
      },
      {
        "timestamp": "2024-07-03 14:31:09",
        "content": "2024-07-03 14:31:09\n Ярослав Мудрый -> 2071074234:\nGoInvest (livecoding)\n\n- ЗП: от 250к\n- Ссылка: hr сама написала\n- успех собеса: ✅ приглашен на финал\nЗадачи:\nНаписать функцию, принимающую как аргумент либо строку либо массив либо строки через запятую, содержащую ключи, на выходе должна быть строка из значений по этим ключам через пробел.\nРешение:\n\nconst obj = {\n  key1: \"value1\",\n  key2: \"value2\",\n  key3: \"value3\",\n  \n  getValues(...keys) {\n    if (keys.length === 1 && typeof keys[0] === 'strin...",
        "full_content": "2024-07-03 14:31:09\n Ярослав Мудрый -> 2071074234:\nGoInvest (livecoding)\n\n- ЗП: от 250к\n- Ссылка: hr сама написала\n- успех собеса: ✅ приглашен на финал\nЗадачи:\nНаписать функцию, принимающую как аргумент либо строку либо массив либо строки через запятую, содержащую ключи, на выходе должна быть строка из значений по этим ключам через пробел.\nРешение:\n\nconst obj = {\n  key1: \"value1\",\n  key2: \"value2\",\n  key3: \"value3\",\n  \n  getValues(...keys) {\n    if (keys.length === 1 && typeof keys[0] === 'string') {\n      keys = keys[0].split(' '); // Разбиваем строку по пробелам\n    } else if (keys.length === 1 && Array.isArray(keys[0])) {\n      keys = keys[0]; // Если аргумент - массив, используем его напрямую\n    }\n    \n    return keys.map(key => this[key]).join(' '); // Получаем значения и объединяем их в строку\n  }\n};\n\nНаписать функцию, которая строку вида AAABBCDDD приводит к A3B2CD3,\nрешение:\n\nfunction rle(input) {\n    let result = '';\n    let count = 1;\n\n    for (let i = 0; i < input.length; i++) {\n        if (input[i] === input[i + 1]) {\n            count++;\n        } else {\n            result += input[i];\n            if (count > 1) {\n                result += count;\n            }\n            count = 1;\n        }\n    }\n\n    return result;\n}\n\nусложнение: \nна входе строка вида 111223334, на выходе: 34274, пояснение: (1*3)(2*2)(3*3)(4*1)\n\nfunction rle(input) {\n    let result = '';\n    let count = 1;\n\n    for (let i = 0; i < input.length; i++) {\n        if (input[i] === input[i + 1]) {\n            count++;\n        } else {\n            let resSum = input[i];\n            if (count > 1) {\n                resSum = resSum * count;\n            }\n            result += resSum;\n            count = 1;\n        }\n    }\n\n    return result;\n}"
      }
    ]
  },
  {
    "company": "Нефтетранссервис",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-11-04 20:03:49",
        "content": "2024-11-04 20:03:49\n Никита -> 2071074234:\nНефтеТрансСервис\nза 260k net\nвакансия —\nстатус оффер",
        "full_content": "2024-11-04 20:03:49\n Никита -> 2071074234:\nНефтеТрансСервис\nза 260k net\nвакансия —\nстатус оффер"
      },
      {
        "timestamp": "2024-10-25 19:57:52",
        "content": "2024-10-25 19:57:52\n Mike -> 2071074234:\nКомпания: НефтеТрансСервис\nЗП:250к\nВопросы:\n1.Пользователь вводит адрес сайта и нажал ентер, флоу \n2.async/defer \n3.CORS(где он работает) \n4.WebSocket \n5.JWT \n6.EventLoop(что относится к макро/микротаскам) \n7.ServiceWorker/WebWorker \n8.React  \n9.VDOM \n10.Хуки  \n11.HOC \n12.Паттерны(рендер-пропс, событийный обработчик, состояние на уровне приложения) \n13.proto/prototype \n14.Webpack основные концепции",
        "full_content": "2024-10-25 19:57:52\n Mike -> 2071074234:\nКомпания: НефтеТрансСервис\nЗП:250к\nВопросы:\n1.Пользователь вводит адрес сайта и нажал ентер, флоу \n2.async/defer \n3.CORS(где он работает) \n4.WebSocket \n5.JWT \n6.EventLoop(что относится к макро/микротаскам) \n7.ServiceWorker/WebWorker \n8.React  \n9.VDOM \n10.Хуки  \n11.HOC \n12.Паттерны(рендер-пропс, событийный обработчик, состояние на уровне приложения) \n13.proto/prototype \n14.Webpack основные концепции"
      }
    ]
  },
  {
    "company": "Кловер Групп",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-11-05 07:38:31",
        "content": "2024-11-05 07:38:31\n Алмас -> 2071074234:\nКловер Групп\nзп от 300к\nвакансия: написала сама\nСобес начинается с того, что они рассказывают про себя, потом дают задачу и только после задачи тебе задают вопросы по твоему резюме.\nЗадача, такая же, что была на собесе у предыдушего соискателя из этой группы  в мае. \nСcылка на задачу: https://codesandbox.io/p/sandbox/tree-file-list-8xytfy?file=%2Fsrc%2FApp.tsx\n\n/**\n * В приведенной задаче рассматриваем компонент для отображения списка файлов и папок.\n *\n...",
        "full_content": "2024-11-05 07:38:31\n Алмас -> 2071074234:\nКловер Групп\nзп от 300к\nвакансия: написала сама\nСобес начинается с того, что они рассказывают про себя, потом дают задачу и только после задачи тебе задают вопросы по твоему резюме.\nЗадача, такая же, что была на собесе у предыдушего соискателя из этой группы  в мае. \nСcылка на задачу: https://codesandbox.io/p/sandbox/tree-file-list-8xytfy?file=%2Fsrc%2FApp.tsx\n\n/**\n * В приведенной задаче рассматриваем компонент для отображения списка файлов и папок.\n *\n * Вам необходимо\n * - Дополнить интерфейсы компонента Tree согласно приведенному примеру принимаемого типа данных data\n * - Избавиться от any там, где это возможно\n * - Написать реализацию отображения элементов списка с раскрывающимися дочерними элементами по клику на иконку папки.\n * - По умолчанию папка имеет иконку \"folder-close\", меняющуюся на \"folder-open\" после раскрытия элементов\n * - Написать функцию для отображения иконок файлов в зависимости от их расширения (.tsx, .js). Остальные файлы имеют иконку \"file\"\n * - Написать коллбеки onSelect и onExpand для обработки событий выбора элемента и раскрытия/закрытия папки\n *\n */\n\nУточнения по задаче: ты делаешь основные изменения в компоненте Tree. Компонент Icon нельзя модифицировать, если сильно хочется, то по согласованию. Гуглить можно, задавать уточняюще вопросы тоже.\nПосле задачи попросили в подробностях рассказать как я реализовал фичу, которую я указал в резюме."
      },
      {
        "timestamp": "2024-05-22 15:58:30",
        "content": "2024-05-22 15:58:30\n Roman -> 2071074234:\nНазвание компании: Кловер Групп\nВакансия:  https://hh.ru/vacancy/97105663\nЗп: просил от 300к на руки\nУспех собеса: ? (вероятно ❌)\nЗадача: https://codesandbox.io/p/sandbox/tree-file-list-8xytfy?file=%2Fsrc%2FApp.tsx%3A108%2C16",
        "full_content": "2024-05-22 15:58:30\n Roman -> 2071074234:\nНазвание компании: Кловер Групп\nВакансия:  https://hh.ru/vacancy/97105663\nЗп: просил от 300к на руки\nУспех собеса: ? (вероятно ❌)\nЗадача: https://codesandbox.io/p/sandbox/tree-file-list-8xytfy?file=%2Fsrc%2FApp.tsx%3A108%2C16"
      }
    ]
  },
  {
    "company": "Гиксорс",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-05-29 08:10:55",
        "content": "2025-05-29 08:10:55\n Max -> 2071074234:\nАнкор(проект HrFile через Гиксорс)\nHR написала\nЗП: назвал от 180\nЭтап знакомство с PM :\nВ основном просто общались, я задавал много вопросов\n- Расскажи интересную задачу\n- Как выстроены процессы\n- Твой факап\n- Как реализовывал фильтрацию, виртуализацию в таблице\n- Как оценивали задачи\n- Используешь ИИ в работе?\n- Сможешь быть Техлидом?",
        "full_content": "2025-05-29 08:10:55\n Max -> 2071074234:\nАнкор(проект HrFile через Гиксорс)\nHR написала\nЗП: назвал от 180\nЭтап знакомство с PM :\nВ основном просто общались, я задавал много вопросов\n- Расскажи интересную задачу\n- Как выстроены процессы\n- Твой факап\n- Как реализовывал фильтрацию, виртуализацию в таблице\n- Как оценивали задачи\n- Используешь ИИ в работе?\n- Сможешь быть Техлидом?"
      },
      {
        "timestamp": "2025-05-23 13:43:21",
        "content": "2025-05-23 13:43:21\n Max -> 2071074234:\nГиксорс\nHr написала\nзп: не обсуждали\nвопросы:\n- типы данных\n- замыкание\n- контекст \n- всплытие, погружение\n- стрелочная функция\n- var, let, const\n- props, context, statemanager\n- как оптимизировать приложение\n- генераторы\n- чем лучше пользоваться state или context\n- ООП и другие парадигмы\n// что выведет?\nvar a1 = 4;\nvar a2 = new Number(4);\nconsole.log(a1 == a2); // true\nconsole.log(a1 === a2); // false\n\nvar s1 = '';\nvar s2 = '';\nvar s3 = new String('');\nva...",
        "full_content": "2025-05-23 13:43:21\n Max -> 2071074234:\nГиксорс\nHr написала\nзп: не обсуждали\nвопросы:\n- типы данных\n- замыкание\n- контекст \n- всплытие, погружение\n- стрелочная функция\n- var, let, const\n- props, context, statemanager\n- как оптимизировать приложение\n- генераторы\n- чем лучше пользоваться state или context\n- ООП и другие парадигмы\n// что выведет?\nvar a1 = 4;\nvar a2 = new Number(4);\nconsole.log(a1 == a2); // true\nconsole.log(a1 === a2); // false\n\nvar s1 = '';\nvar s2 = '';\nvar s3 = new String('');\nvar s4 = new String('');\n\nconsole.log(s1 == s2); // true\nconsole.log(s1 === s2); // true\nconsole.log(s1 == s3); // true\nconsole.log(s1 === s3); // false\nconsole.log(s3 == s4); // true\nconsole.log(s3 === s4); // false\n\n/////////////////////////////////////////////\n//что выведет?\nvar a = {\n    b: function() { console.log(this); }\n}\n\na.b(); // {b: f}\nvar b = a.b;\nb(); // undefined\n\n/////////////////////////////////////////////\n// написать функцию sum\nsum(1)(2)(3)() // 6\n\nfunction sum(a){\n    let curr = a\n    function inner(b){\n        if(b === undefined) return curr\n        curr += b\n        return inner\n    }\n    return inner\n}\n\n/////////////////////////////////////////////\n// что выведет, как исправить?\nfor (var i = 0; i < 5; i++) {\n    (function(num){\n        setTimeout(function() { console.log(num); }, 0);\n    })(i);\n}\n///////////////////////////////////////////////////////////////////////\n// написать preventDefault для ссылки\nfunction addClickListener() {\n    const link = document.getElementById('mlink');\n    link.addEventListener('click', function(event) {\n        alert('link');\n        event.preventDefault();\n    });\n}\n\n<div id=\"div\">\n    <a id=\"mlink\" href=\"\">Click me!</a>\n</div>"
      }
    ]
  },
  {
    "company": "СЗ РЦАИ",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-02-28 13:53:25",
        "content": "2025-02-28 13:53:25\n Евгений Гусев -> 2071074234:\nКомпания: СЗ РЦАИ\nВакансия: https://hh.ru/vacancy/117172861?from=employer&hhtmFrom=employer\nЗП: 110-150\nВопросы: \n -Почему можно обратиться к примитивам вот так:\nКакая-то строка'.toUpperCase();\n(2).toString();\n Ответ: Автобоксинг - это процесс, при котором примитивный тип данных автоматически преобразуется в соответствующий объект-обёртку при попытке доступа к свойствам или методам, специфичным для объектов. Этот процесс позволяет примитивам врем...",
        "full_content": "2025-02-28 13:53:25\n Евгений Гусев -> 2071074234:\nКомпания: СЗ РЦАИ\nВакансия: https://hh.ru/vacancy/117172861?from=employer&hhtmFrom=employer\nЗП: 110-150\nВопросы: \n -Почему можно обратиться к примитивам вот так:\nКакая-то строка'.toUpperCase();\n(2).toString();\n Ответ: Автобоксинг - это процесс, при котором примитивный тип данных автоматически преобразуется в соответствующий объект-обёртку при попытке доступа к свойствам или методам, специфичным для объектов. Этот процесс позволяет примитивам временно вести себя как объекты. \n- Промисы:\nPromise.resolve(10)\n     .then(e => console.log(e))\n     .then(e => Promise.resolve(e))\n     .then(console.log)\n     .then(e => {\n         if (!e) {\n           throw 'Error';\n       }\n      })\n      .catch(e => {\n        console.log(e);\n        return new Error('New error');\n      })\n      .then(e => {\n        console.log(e.message);\n      })\n      .catch(e => {\n        console.log(e.message);\n      })\n Ответ: \nPromise.resolve(10)\n    .then(e => console.log(e))          // 1. Выведет `10`\n    .then(e => Promise.resolve(e))      // 2. Вернёт `undefined`, так как `console.log` ничего не возвращает\n    .then(console.log)                   // 3. Выведет `undefined`\n    .then(e => { \n        if (!e) { \n            throw 'Error';                // 4. Ошибка: `throw 'Error'`\n        } \n    })\n    .catch(e => { \n        console.log(e);                   // 5. Поймает `'Error'` и выведет его\n        return new Error('New error');    // 6. Возвращает `Error` объект\n    })\n    .then(e => { \n        console.log(e.message);           // 7. Выведет `'New error'`\n    })\n    .catch(e => { \n        console.log(e.message);           // 8. Этот `catch` уже не сработает\n    });\n\n\n-Event loop:  \nfunction test() {\n      setTimeout(() => {\n         console.log('1');\n      }, 0);\n      \n      setTimeout(() => {\n         console.log('2');\n      }, 1000);\n\n      const promise = new Promise((resolve, reject) => {\n         console.log('3');\n         resolve(4);\n      });\n\n      promise.then((result) => {\n         console.log(result);\n      })\n       \n      console.log('5');\n   }\n Ответ: Итоговый порядок вывода в консоли:\n\"3\" (синхронный код)\n\"5\" (синхронный код)\n\"4\" (микрозадача Promise.then)\n\"1\" (макрозадача setTimeout(0))\n\"2\" (макрозадача setTimeout(1000))\n- Что нужно сделать, что бы код заработал (2).plus(2).minus(3).plus(5);\nответ: Чтобы выражение (2).plus(2).minus(3).plus(5); работало, нужно расширить прототип Number, добавив методы plus и minus.\n- Задача на привязку контекста: \nfunction test() {\n     console.log(${ this.x });\n   }\n\nconst obj = {\n     x: 'SZRCAI'\n   };\nОтвет: использовать bind\n- Изменить объект \nconst obj = {\n      start: 1,\n      end: 10\n    }, const a = [ ...obj ];\n что бы получилось \n\n[1,2,3,4,5,6,7,8,9,10]\nОтвет: Добавляем Symbol.iterator в объект obj.\nИспользуем генератор function*, который по очереди отдает значения от start до end.\nТеперь при использовании [...] объект автоматически превращается в массив с нужными числами.\n-каррирование: \nfunction curry(fn) {\n    return function curried(...args) {\n        // Если количество переданных аргументов совпадает с ожидаемым количеством, вызываем основную функцию\n        if (args.length >= fn.length) {\n            return fn(...args);\n        }\n        // В противном случае возвращаем новую функцию, ожидающую оставшиеся аргументы\n        return function(...args2) {\n            return curried(...args, ...args2);\n        };\n    };\n}"
      },
      {
        "timestamp": "2024-11-26 13:57:50",
        "content": "2024-11-26 13:57:50\n Ivan -> 2071074234:\nКомпания: СЗ РЦАИ \nЗП: 150\nВопросы: \nСпрашивал за опыт , интересные задачи , какая была команда , как были устроены процессы в команде \nТипы данных в js\nЧем отличаются примитивы и ссылочный типы \nXMLHTTPrequest\nБыли вопросы про eventloop \nБыл небольшая задача: \n const obj = {start:1, end:10} \nConst a = […obj]\nЧто сделать чтобы получился массив : console.log(a) //[1,2,3,4,5,6,7,8,9,10]",
        "full_content": "2024-11-26 13:57:50\n Ivan -> 2071074234:\nКомпания: СЗ РЦАИ \nЗП: 150\nВопросы: \nСпрашивал за опыт , интересные задачи , какая была команда , как были устроены процессы в команде \nТипы данных в js\nЧем отличаются примитивы и ссылочный типы \nXMLHTTPrequest\nБыли вопросы про eventloop \nБыл небольшая задача: \n const obj = {start:1, end:10} \nConst a = […obj]\nЧто сделать чтобы получился массив : console.log(a) //[1,2,3,4,5,6,7,8,9,10]"
      }
    ]
  },
  {
    "company": "Digital Sector",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-05-28 15:01:18",
        "content": "2025-05-28 15:01:18\n Егор -> 2071074234:\nDigital sector\n140к-160к (кажется для них и это много) сейчас в вакансии стоит до 140к\nвакансия: https://krasnodar.hh.ru/vacancy/120465627 (только офис в Краснодаре)\n\n-кратко о себе\n-работал с формами, как работал? что использовал?\n-писал свои хуки?\n-flex vs grid\n-тег picture\n-как оцентровать див\n- box-sizing в CSS\n- стилизация чекбоксов\n-display: none, opacity, hidden (их отличия)\n-страница долго загружается, что будешь делать?\n-как применить ленивую заг...",
        "full_content": "2025-05-28 15:01:18\n Егор -> 2071074234:\nDigital sector\n140к-160к (кажется для них и это много) сейчас в вакансии стоит до 140к\nвакансия: https://krasnodar.hh.ru/vacancy/120465627 (только офис в Краснодаре)\n\n-кратко о себе\n-работал с формами, как работал? что использовал?\n-писал свои хуки?\n-flex vs grid\n-тег picture\n-как оцентровать див\n- box-sizing в CSS\n- стилизация чекбоксов\n-display: none, opacity, hidden (их отличия)\n-страница долго загружается, что будешь делать?\n-как применить ленивую загрузку к картинкам?\n-глубокое и неглубокое копирование объекта\n- Virtual Dom?\n- Portal в React\n- вопрос про cleanup в useEffect\n-localstorage, session, cookie\n-как избежать props drilling?\n- context и state manager\n\n1 задача\n\n// что выведет? (доп. как исправить? ответ: сделать копию объекта)\nconst a = {\n    name: \"Петя\"\n}\nconst b = a\nb.name = \"Вася\"\n\nconsole.log(b.name) // Вася\nconsole.log(a.name) // Вася\nЗадача 2\nfunction test() {\n    let num = 1;\n\n    return function () {\n        console.log(num);\n        num++;\n    };\n}\n\ntest()(); // что выведет console.log(num)? 1\ntest()(); // что выведет console.log(num)? 1\nЗадача 3\n// в какой последовательности?\nsetTimeout(() => {\n    console.log(1);\n});\n\nconst proml = new Promise((resolve, reject) => {\n    console.log(3);\n    return resolve(4);\n});\n\nconsole.log(2);\n\nproml.then((resp) => {\n    console.log(resp);\n});\n\n(function () {\n    console.log(5);\n})();\n// 3 2 5 4 1"
      },
      {
        "timestamp": "2025-05-22 09:38:04",
        "content": "2025-05-22 09:38:04\n Max -> 2071074234:\nDigital sector\n160к\nвакансия: https://krasnodar.hh.ru/vacancy/120465627 (только офис в Краснодаре)\nвопросы:\n- кратко о себе\n- работал с формами, как работал? что использовал?\n- писал свои хуки?\n- flex vs grid\n- тег picture\n- как оцентровать див\n- display: none, opacity?\n- страница долго загружается, что будешь делать?\n- как применить ленивую загрузку к картинкам?\n- intersectionObserver\n- load vs Domcontentload\n- глубокое и неглубокое копирование объекта\n- ...",
        "full_content": "2025-05-22 09:38:04\n Max -> 2071074234:\nDigital sector\n160к\nвакансия: https://krasnodar.hh.ru/vacancy/120465627 (только офис в Краснодаре)\nвопросы:\n- кратко о себе\n- работал с формами, как работал? что использовал?\n- писал свои хуки?\n- flex vs grid\n- тег picture\n- как оцентровать див\n- display: none, opacity?\n- страница долго загружается, что будешь делать?\n- как применить ленивую загрузку к картинкам?\n- intersectionObserver\n- load vs Domcontentload\n- глубокое и неглубокое копирование объекта\n- localstorage, session, cookie\n- как избежать props drilling?\n- + и - context и state manager\n- useRef\n1 Задача:\n// в какой последовательности?\nsetTimeout(() => {\n    console.log(1);\n});\n\nconst proml = new Promise((resolve, reject) => {\n    console.log(3);\n    return resolve(4);\n});\n\nconsole.log(2);\n\nproml.then((resp) => {\n    console.log(resp);\n});\n\n(function () {\n    console.log(5);\n})();\n// 3 2 5 4 1\n2 задача:\nfunction test() {\n    let num = 1;\n\n    return function () {\n        console.log(num);\n        num++;\n    };\n}\n\ntest()(); // что выведет console.log(num)? 1\ntest()(); // что выведет console.log(num)? 1\nЗадача 3:\n// что выведет? (доп. как исправить? ответ: сделать копию объекта)\nconst a = {\n    name: \"Петя\"\n}\nconst b = a\nb.name = \"Вася\"\n\nconsole.log(b.name) // Вася\nconsole.log(a.name) // Вася"
      }
    ]
  },
  {
    "company": "GhostBusters",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-07-18 10:32:02",
        "content": "2025-07-18 10:32:02\n Aintripin -> 2071074234:\nКомпания: GhostBusters (17.07.2025)\nВакансия: Frontend-разработчик (part time)\n\nЗП: от $10 до $15 в час\n\n2 этап:\n\n1. пытаемся отправить видос и аудио. не получается из-за инета. Как решить? Я предложил делать кеширование на стороне клиента в indexedDB. По размеру будет норм: в firefox там 2 гига лимит, chrome до 60% может использовать места диска. Если не хватит, попросим ещё. Предварительно смотреть через API сколько место есть и в зависимости от эт...",
        "full_content": "2025-07-18 10:32:02\n Aintripin -> 2071074234:\nКомпания: GhostBusters (17.07.2025)\nВакансия: Frontend-разработчик (part time)\n\nЗП: от $10 до $15 в час\n\n2 этап:\n\n1. пытаемся отправить видос и аудио. не получается из-за инета. Как решить? Я предложил делать кеширование на стороне клиента в indexedDB. По размеру будет норм: в firefox там 2 гига лимит, chrome до 60% может использовать места диска. Если не хватит, попросим ещё. Предварительно смотреть через API сколько место есть и в зависимости от этого менять битрейт/разрешение\n\n2. если у нас инет нестабильный и мы пытаемся его отправить, мы забиваем канал. В итоге ничё не отправляем, зависаем в этом кругу. А нам бы аудио отправить хотя бы. Как это сделать?\n\n3. Щас они собирают на бэке видосы в .webm формате. Самый ли это оптимальный способ?"
      },
      {
        "timestamp": "2025-07-18 10:31:16",
        "content": "2025-07-18 10:31:16\n Aintripin -> 2071074234:\nКомпания: GhostBusters (17.07.2025)\nВакансия: Frontend-разработчик (part time)\n\nЗП: от $10 до $15 в час\n\n1 этап:\n\nВопросы:\n1. Как вы объясните архитектуру webRTC и ключевые этапы установления соединения между двумя участниками? \n2. Какие API и стратегии вы бы использовали для адаптации media stream к изменяющимся условиям сети, например, для уменьшения задержек или улучшения качества при низкой пропускной способности?\n3. На сайте чат с AI, куда ты на...",
        "full_content": "2025-07-18 10:31:16\n Aintripin -> 2071074234:\nКомпания: GhostBusters (17.07.2025)\nВакансия: Frontend-разработчик (part time)\n\nЗП: от $10 до $15 в час\n\n1 этап:\n\nВопросы:\n1. Как вы объясните архитектуру webRTC и ключевые этапы установления соединения между двумя участниками? \n2. Какие API и стратегии вы бы использовали для адаптации media stream к изменяющимся условиям сети, например, для уменьшения задержек или улучшения качества при низкой пропускной способности?\n3. На сайте чат с AI, куда ты наговариваешь ответ, получается твой транскрипт и там кнопка \"редактировать\". Её убрать нужно. Вообще, оставить только вопросы от ИИ, чтобы юзер на своей стороне не видел свои ответы на вопросы. Раньше это делалось, когда было плохое распознавание.  \n4. При плохой скорости интернета у них может не записаться ответ. У меня в firefox вообще запись отказывалась писаться, в принципе. Говорили про то, как бы решал эти вопросы"
      }
    ]
  },
  {
    "company": "mos.ru",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-03-12 13:52:30",
        "content": "2025-03-12 13:52:30\n Nikolai -> 2071074234:\nИсходный код (mos.ru)\nЗП 220 на руки\nhttps://hh.ru/vacancy/117822377\n\n1. Отличия HTML5 от HTML предыдущих стандартов\n2. Какие атрибуты aria знаешь для поддержки доступности?\n3. Какой будет наверху квадрат, по середине, и внизу?\n\n.wrapper {\nposition: relative;\n}\n\n.red, .green, .blue {\nposition: absolute;\nwidth:120px;\nheight: 120px;\n}\n\n.green, .blue {\n top: 40px; \nleft: 40px;\n}\n\n.red {\nbackground-color: red; \nz-index: 2; \n}\n\n.green { \nbackground-color: \n...",
        "full_content": "2025-03-12 13:52:30\n Nikolai -> 2071074234:\nИсходный код (mos.ru)\nЗП 220 на руки\nhttps://hh.ru/vacancy/117822377\n\n1. Отличия HTML5 от HTML предыдущих стандартов\n2. Какие атрибуты aria знаешь для поддержки доступности?\n3. Какой будет наверху квадрат, по середине, и внизу?\n\n.wrapper {\nposition: relative;\n}\n\n.red, .green, .blue {\nposition: absolute;\nwidth:120px;\nheight: 120px;\n}\n\n.green, .blue {\n top: 40px; \nleft: 40px;\n}\n\n.red {\nbackground-color: red; \nz-index: 2; \n}\n\n.green { \nbackground-color: \ngreen; z-index: 1;\n}\n\nblue {\nbackground-color: blue; \nz-index: 3;\n}\n\n<div class=\"\"wrapper\"\">\n  <div class=\"\"red\"\">\n  <div class=\"\"green\"\">\n    <div class = \"\"blue\"\">\n\n4. Отличия var let ( всплытие, функциональная область видимости или глобальная, повторное объяление, \nсвойство объекта window в глобальной области)\n5. Что в консоли будет?\n\nvar a;\nconsole. log()?\na = 5;\nvar a = 10;\nconsole. log()?\nvar a;\nconsole. log()?\n\n6. Написать функцию счетчик (про замыкания вопрос) \n\nfunction a() {\n  let b = 0;\n  return function(){\n    return ++b;\n}\nconst c = a();\nc();\nc();\n\n7. Какие есть фазы у событий? \n8. Можно ли заменить срабатывание события со всплытия на погружение? (3 аргумент в addEventListener)\n9. Как перехватить событие отправки формы у родителя которое не отправилось( сделали event.preventDefault)? \nУ event есть логическое значение defaultPrevented - показывает были ли отмена по умполчанию тру или фолс.\"\n10. Как создать объект у которого нет прототипа? Object.create()\n11. Что в консоли будет и как исправить \n\ntry {\n    setTimeout(() => {\n        throw new Error('CustomError');\n    }, 1000);\n} catch (e) {\n    console.log(e);\n}\n\nОтвет:\n\ntry {\n    setTimeout(() => {\n        try {\n            throw new Error('CustomError');\n        } catch (e) {\n            console.log(e);\n        }\n    }, 1000);\n} catch (e) {\n    console.log(e);\n}\n\n12. Что значит статический анализ? Это анализ в процессе написания кода, то есть в процессе написания кода видим ошибки сразу.\n13. Что такое дженерики? \n14. Написать дженерик который будет возвращать все ключи типа которые в него передаем? \n(тут можно использовать object и Object)\n\n\ntype Student = {\n    age: number;\n    grade: string;\n}\n\n// type StudentKeys = ObjectKeys<Student>\n\ntype ObjectKeys<T extends Object> = keyof T\n\n15. Какой будет вывод и как поправить?\n\n\nconst [counter, setCounter] = useState(0);\n\nconst handleClick = () => {\n    setCounter(counter+1);\n    console.log({\n    };\n};\n\n<button onClick={handleClick}>increment</button>\n\n\n16. Как ререндер происходит? (Component => Snapshot => View)\n17. Загрузилась страница и нужно поставить фокус на заголовок после загрузки страницы\n\nconst headerRef = useRef();\n//\n<h1 ref={headerRef}>Заголовок</h1>\n\nответ:\nconst headerRef = useRef();\n\nuseEffect(() => {\n    headerRef.current.focus();\n}, []);\n//\n<h1 ref={headerRef} tabIndex=\"\"0\"\">Заголовок</h1>\n\n\nСсылка на запись: https://www.youtube.com/watch?v=sCGFt_nB8HU\nРезультат: фейл\nФидбек: До свидания братишка, подтянешь базу станешь мидлом)"
      },
      {
        "timestamp": "2024-10-31 08:46:55",
        "content": "2024-10-31 08:46:55\n Timofei Syromiatnikov -> 2071074234:\n— Компания: mos.ru\n— Вакансия: https://hh.ru/vacancy/108974710\n— ЗП: 250-280к\n— Вопросы:\n1) Расскажи что происходит после того как мы вбили ссылку на страницу и нажали enter (начиная с парсинга дома)\n2) Расскажи подробно все этапы, как происходит обновление данных в Redux\n3) Как принудительно обновить React компонент\n4) Как работает z-index и какие есть крайние случаи (был вопрос про случай где дочерний z-index был 3, а родительский 1, до...",
        "full_content": "2024-10-31 08:46:55\n Timofei Syromiatnikov -> 2071074234:\n— Компания: mos.ru\n— Вакансия: https://hh.ru/vacancy/108974710\n— ЗП: 250-280к\n— Вопросы:\n1) Расскажи что происходит после того как мы вбили ссылку на страницу и нажали enter (начиная с парсинга дома)\n2) Расскажи подробно все этапы, как происходит обновление данных в Redux\n3) Как принудительно обновить React компонент\n4) Как работает z-index и какие есть крайние случаи (был вопрос про случай где дочерний z-index был 3, а родительский 1, дочерний все равно унаследует родительский, т.е 1)\n5) Расскажи главные различия html4 от html5 (семантика и accessibility)\n6) Стоит ли нам оборачивать всё приложение в useMemo, useCallback, и почему?\n— Задачи:\n1) Напиши функцию, которая будет делить массив чисел на последовательные диапазоны\n[1,4,5,2,3,9,8,11,0] => \"0-5,8-9,11\"\n[1,4,3,2] => \"1-4\"\n[1,4] => \"1,4\"\n\nconst getRanges = (arr) => {}"
      }
    ]
  },
  {
    "company": "Cloud.Ru",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-08-29 18:38:23",
        "content": "2024-08-29 18:38:23\n Kirill Anikeev -> 2071074234:\ncloud.ru созвон с командой\nссылка: hr сама написала\nзп: 280-300\nВопросы:\nтехнических вопросов не было\nмного расспрашивали про опыт\nразличные софтовые вопросы. Типо сильные стороны, слабые стороны\nВ какой команде бы хотел работать?\nкак относишься к больному темпу разработки\nкак решал конфликтные вопросы?\nчто будешь делать, если начальник игнорирует твои идеи?\nчем отличается синьер от мидла?\nвопросы про общение с бизнесом?",
        "full_content": "2024-08-29 18:38:23\n Kirill Anikeev -> 2071074234:\ncloud.ru созвон с командой\nссылка: hr сама написала\nзп: 280-300\nВопросы:\nтехнических вопросов не было\nмного расспрашивали про опыт\nразличные софтовые вопросы. Типо сильные стороны, слабые стороны\nВ какой команде бы хотел работать?\nкак относишься к больному темпу разработки\nкак решал конфликтные вопросы?\nчто будешь делать, если начальник игнорирует твои идеи?\nчем отличается синьер от мидла?\nвопросы про общение с бизнесом?"
      },
      {
        "timestamp": "2024-08-22 18:43:03",
        "content": "2024-08-22 18:43:03\n Kirill Anikeev -> 2071074234:\n—Cloud.ru\nвакансия: hr сама написала\n-зп 300\nОчень позитивный интервьюер. Совсем не душный, много шутили, смеялись\nВопросы про опыт, про задачи\nвопросы про области видимости, разные мини задачки (к сожалению запись пришлось прервать так как комп не тянул, так что много задач потерялось)\nlet x = { a: 1, b: 2 };\nfunction fn(x) {\n  let c = x.a;\n  x.a = 5;\n  console.log(c); // 1\n}\nfn(x);\nconsole.log(x); // { a: 5, b: 2 }\nзадачки про промисы\nвопросы ...",
        "full_content": "2024-08-22 18:43:03\n Kirill Anikeev -> 2071074234:\n—Cloud.ru\nвакансия: hr сама написала\n-зп 300\nОчень позитивный интервьюер. Совсем не душный, много шутили, смеялись\nВопросы про опыт, про задачи\nвопросы про области видимости, разные мини задачки (к сожалению запись пришлось прервать так как комп не тянул, так что много задач потерялось)\nlet x = { a: 1, b: 2 };\nfunction fn(x) {\n  let c = x.a;\n  x.a = 5;\n  console.log(c); // 1\n}\nfn(x);\nconsole.log(x); // { a: 5, b: 2 }\nзадачки про промисы\nвопросы про ивент луп\nчто такое requestAnimationFrame и requestIdleCallback\nметоды массивов\nкак прервать запросы ( про AbortController и как это реализовать)\nчто такое declare в ts\nрассуждение в целом про ts\nunknown vs any\nинтерфейсы и типы, разница\nвопросы про реакт, почему библиотека\nминусы и плюсы реакта\nрассказать про рекансилейшен,\n этапы жизненного цикла компонента\nэтапы рендеринга \nподробно про useEffect, разница с useLayoutEffect\nпро HOC\nоптимизация в реакте и не только\nмемоизация (memo, useMemo, useCallback)\nзадача на рефакторинг \nimport React from 'react';\nimport { cn } from '@bem-react/classname';\nimport { Order } from './Order';\n\nconst ordersListClassName = cn('orders-list');\n\ninterface OrdersListProps {\n  orders: Order[];\n  onClick: (orderId: string) => void;\n  disabledIds?: string[];\n}\n\nconst OrdersList: React.FC<OrdersListProps> = ({\n  orders,\n  onClick,\n  disabledIds = [],\n}) => {\n  return (\n    <ul className={ordersListClassName()}>\n      {orders.map((order) => {\n        const orderClassName = cn('order', { disabled: disabledIds.includes(order.id) });\n\n        return (\n          <Order\n            key={order.id}\n            order={order}\n            className={orderClassName}\n            onClick={() => onClick(order.id)}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default OrdersList;\nпро асинхронные скрипты\nтришейкинг\nкодсплитинг\nprefetch, preload\nпсевдоклассы, псевдоэлементы, модно ли получить к ним доступ из js\nспособы центровки элемента в css"
      }
    ]
  },
  {
    "company": "Wanted",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-09-27 11:56:24",
        "content": "2024-09-27 11:56:24\n Stepan Ch. -> 2071074234:\nWanted\nссылка: https://hh.ru/vacancy/107558111\nзп: 200-230\nуспех:  ?\n\n1. Вопросы про опыт.\n2. Микрофронты были на проекте?\n3. Расскажиж про свой Ui Ki.\n4. Плюсы и минусы микрофронтов?\n5. Какой протокол использовали на проекте?\n6. Расскажи про EventLoop.\n7. Задачи на EventLoop: все из платины\n8. Задачи из платины\n9. Задача по реакту все в точности как на платине! И обработка запросов и всего.\n\nИтог: учим платину + легенду = лутаем оффер",
        "full_content": "2024-09-27 11:56:24\n Stepan Ch. -> 2071074234:\nWanted\nссылка: https://hh.ru/vacancy/107558111\nзп: 200-230\nуспех:  ?\n\n1. Вопросы про опыт.\n2. Микрофронты были на проекте?\n3. Расскажиж про свой Ui Ki.\n4. Плюсы и минусы микрофронтов?\n5. Какой протокол использовали на проекте?\n6. Расскажи про EventLoop.\n7. Задачи на EventLoop: все из платины\n8. Задачи из платины\n9. Задача по реакту все в точности как на платине! И обработка запросов и всего.\n\nИтог: учим платину + легенду = лутаем оффер"
      },
      {
        "timestamp": "2024-07-20 17:22:16",
        "content": "2024-07-20 17:22:16\n Руслан -> 2071074234:\nwanted\n— ссылка: https://hh.ru/vacancy/103318370\n— ЗП: до 300к\n— Вопросы:\nНужно разработать с нуля 3 лендинга с сео индексацией, + 2 страницы авторизации регистер и логин + 3 страницы личного кабинета с формами. Макеты и бэк готовы, как будешь реализовывать\n1. Какой сборщик возьмешь - webpack или vite\n2. Для серверного рендеринга что возьмешь\n3. Нам нужен ssr или ssg\n4. на webpack или vite настраивал ssr или ssg без next.js\n5. что будешь использовать дл...",
        "full_content": "2024-07-20 17:22:16\n Руслан -> 2071074234:\nwanted\n— ссылка: https://hh.ru/vacancy/103318370\n— ЗП: до 300к\n— Вопросы:\nНужно разработать с нуля 3 лендинга с сео индексацией, + 2 страницы авторизации регистер и логин + 3 страницы личного кабинета с формами. Макеты и бэк готовы, как будешь реализовывать\n1. Какой сборщик возьмешь - webpack или vite\n2. Для серверного рендеринга что возьмешь\n3. Нам нужен ssr или ssg\n4. на webpack или vite настраивал ssr или ssg без next.js\n5. что будешь использовать для стилизации\n6. Что такое семантическая верстка, для чего\n7. что такое accessibility\n8. float, flex, grid что возьмешь\n9. для чего нужна табличная верстка - для емейл писем\n10. в чем отличие между png, jpeg, webp, svg\n11. что использовал бы для создания форм и почему\n12. Верно ли что formik и react hook form используются только для управления состоянием формы, а для валидации формы используются другие библиотеки\n13. В нашем приложении нужно отправлять данные на бекенд с помощью каких инструментов будешь это делать\n14. Работал ли с react query, что лучше, fetch или react query  и почему\n15. Мы дошли до личного кабинета пользователя. Там у нас имеется большое количество форм, состояний, флагов, данных о пользователе. Где будешь хранить все эти флаги, состояния, данные. Сказал про zustand либо redux.\n16. В каком случае zustand, в каком redux\n17. Селекторы в редакс, подробно\n18. почему лучше использовать селекторы, а не обращаться  к стору напрямую\n19. Работал ли с редакс сагами, стал бы их сейчас использовать и для чего\n20. в приложение необходимо добавить интернализацию - английский и немецкий языки, как будешь это делать. приходилось ли работать с right-to-left"
      }
    ]
  },
  {
    "company": "Ittrain",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-04-15 02:39:21",
        "content": "2025-04-15 02:39:21\n Ber -> 2071074234:\n— Название компании: iTTrain (аутстафф), технический этап iTTrain, после скриннинга\n— Ссылка на вакансию: hr написала сама\n— ЗП: просил от 190 тр на руки\n— Вопросы:\n1)  Какая интересная задача была в работе?\nСейчас что делаешь и разрабатываешь?\nКак именно это сделано сейчас?\n2) С чем работал, кроме React? С Angular, Vue работал? В чем отличие, если работал?\nСовет: тут лучше понимать основные отличия\n3) Какие стэйт-менеджеры знаешь? В чем их отличие? Чтобы ...",
        "full_content": "2025-04-15 02:39:21\n Ber -> 2071074234:\n— Название компании: iTTrain (аутстафф), технический этап iTTrain, после скриннинга\n— Ссылка на вакансию: hr написала сама\n— ЗП: просил от 190 тр на руки\n— Вопросы:\n1)  Какая интересная задача была в работе?\nСейчас что делаешь и разрабатываешь?\nКак именно это сделано сейчас?\n2) С чем работал, кроме React? С Angular, Vue работал? В чем отличие, если работал?\nСовет: тут лучше понимать основные отличия\n3) Какие стэйт-менеджеры знаешь? В чем их отличие? Чтобы бы взял, если проект с нуля\nОтветил: что взял бы либо RTK, либо TanStack Query - собеседующий одобрил\n4) Какие у тебя есть красные флаги при код-ревью?\nОтветил: что обязательно просматриваю, что написаны тесты. Сам обязательно пишу тесты,\nа по стилю - у нас в целом настроены линтеры, так что с этим проблем не бывает,\nплюс, проверяю обязательно логику работы, поскольку зачастую тесты пишутся после разработки\nСобеседующий такой ответ поддержал\n5) Какие у тебя есть сильные и слабые стороны?\nОтветил: сперва пошутил: ты хочешь прямо в глубь человека пробраться?) Собеседущий чуть разрядился - тоже посмеялись,\nя ответил в итоге, что скуруплезность может быт как минус, когда лид просит быстрее сделать, но это и плюсом считаю\n6) Как работает EventLoop?\n7) Если понимаешь, что EventLoop это механизм среды выполнения кода JS, можешь другие среды описать? Node.js - Как там работает?\n8) Зачем вообще требуется разделение на макрозадачи и микрозадачи? Для чего это так устроено?\n9) А зачем вообще в целом асинхронность нужна в JS?\n10) Чем отличается type от interface?\n11) Что такое type guards? Можешь конкретный пример рассказать использования его на своей практике?\n12) \n// Расскажи подробно как работает этот код?\n// Что такое замыкание?\n// Куда попадают аргументы функции как локальные переменные?\n// Что будет, если arraySorted изменить на стрелочную функцию? Чем отличается ее поведение от ordinary function конкретно в данной задаче?\n\nconst arrUnSort = [1, 4, 26, 9, 2];\nconst arrSort = [];\n\nfunction arraySorted(arrUnSort, arrSort) {\n    arrSort = arrUnSort.sort();\n}\n\narraySorted(arrUnSort, arrSort);\n\nconsole.log(arrSort);\n13) Ответ: надо использоват Promise.allSettled\nfunction fetchData1() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('Data 1 fetched');\n            resolve('Data 1');\n        }, 2000);\n    })\n}\n\nfunction fetchData2() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('Data 2 fetched');\n            resolve('Data 2');\n        }, 1000);\n    })\n}\n\nfunction fetchData3() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('Data 3 fetched');\n            reject('Data 3');\n        }, 3000);\n    })\n}\n\nasync function fetchAllData() {\n\n}\n\n// Создать асинхронную функцию fetchAllData, которая параллельно запускает все три функции \n// fetchData1, fetchData2, fetchData3\n// Фукнция должна вернуть массив данных, если все вызова завершатся успешно\n// Либо вывести в консоль сообщение об ошибке и вернуть частичные данные, если хотя бы один неуспешный \n// Обеспечьте корректное завершение программы в случае ошибки и правильную обработку данных\nfetchAllData().then(data => console.log('Partial Data', data))\n\n// Доп вопросы: \n// В каком порядке будут выполнятся результаты функций fetchData1, fetchData2, fetchData3?\n// надо ли тут fetchAllData().then(data => console.log('Partial Data', data)) использовать finally?\n14) Реши эту задачу разными вариантами:\n1-й вариант: можешь использовать объекты - тут я использовать для first объект с полем count и в second сделал функцию обращения к полю count объект first через this\n2-й варинат: надо задействовать обе фукнции - тут не смог сделать - а сделал через одну функцию\nВерный ответ: надо было через каррирование сделать, задействуя обе переменные как функции"
      },
      {
        "timestamp": "2025-03-14 15:39:12",
        "content": "2025-03-14 15:39:12\n Nikolai -> 2071074234:\niTTrain \nЗП 240\n\nЗадачи:\n// Создать асинхронную функцию fetchAllData, которая параллельно запускает все три функции fetchData1, fetchData2 и fetchData3.\n// Функция должна вернуть массив данных, если все три вызова завершатся успешно, либо вывести в консоль сообщение об ошибке и вернуть частичные данные (если два из трех вызовов завершились успешно).\n// Обеспечьте корректное завершение программы в случае ошибки и правильную обработку данных.\n\nfunction f...",
        "full_content": "2025-03-14 15:39:12\n Nikolai -> 2071074234:\niTTrain \nЗП 240\n\nЗадачи:\n// Создать асинхронную функцию fetchAllData, которая параллельно запускает все три функции fetchData1, fetchData2 и fetchData3.\n// Функция должна вернуть массив данных, если все три вызова завершатся успешно, либо вывести в консоль сообщение об ошибке и вернуть частичные данные (если два из трех вызовов завершились успешно).\n// Обеспечьте корректное завершение программы в случае ошибки и правильную обработку данных.\n\nfunction fetchData1() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('Data 1 fetched');\n            resolve('Data 1');\n        }, 2000);\n    });\n}\n\nfunction fetchData2() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('Data 2 fetched');\n            resolve('Data 2');\n        }, 1000);\n    });\n}\n\nfunction fetchData3() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('Data 3 fetched');\n            resolve('Data 3');\n        }, 3000);\n    });\n}\n\nasync function fetchAllData() {\n}\n\nfetchAllData().then(data => console.log('Partial Data:', data));\n\n\n-----------------------------------------------------------------------------------------------------------------\n\n\nconst first = null;\nconst second = null;\n\n// необходимо с помощью только этих двух констант, не создавая других в глобальном контексте,\n// написать две функции, чтобы следующие строчки кода работали.\n\nconsole.log(second()); // 0\nconsole.log(second()); // 1\nconsole.log(second()); // 2\nconsole.log(second());\n\n-----------------------------------------------------------------------------------------------------------------\n\n//что будет в консоли и исправить ошибку\n\nconst arrUnSort = [1,4,28,9,2];\nfunction arraySorted(arrUnSort, arrSort) {\n    arrSort = arrUnSort.sort();\n}\n\narraySorted(arrUnSort, arrSort);\n\nconsole.log(arrSort);\n\n\nВопросы: \n1. Расскажи о себе\n2. Подробнее про сокеты как обрабатывали как работали с ними и какие либы использовали\n3. С чем работал кроме реакта?\n4. С чем успел поработать внутри реакта? С какими стейт менеджерами?\n5. Какую самую сложную-большую задачку решали?\n6. Какая самая большая ошибка была и как ее решил?\n7. Проводили ретро почему так получилось? \n8. Процессы внутри команды как задача доходила до прода с самого начала постановки задачи?\n9. Писали ли тесты? По какому процессу? (TDD)\n10. Работал ли с тайпскриптом, чем пользовался? \n11. Использовал ли какие-то кастомные библиотечки для типизации?\n12. Расскажи про красные флаги на код ревью? \n13. О своих сильных и слабых сторонах по 3 штуки наверно?\n14. Event loop \n15. Про микро и макро задачи зачем такое разделение и в чем основное отличие?\n16. Зачем нужна асинхронность в JS? Почему нельзя выполнять все в одном потоке? \n17. Расскажи все что знаешь о промисах? \n18. Отличие type от interface?\n19. Расскажи про дженерики в TS и Utility types\n20. Расскажи про тайпгварды что такое и зачем\n21. Как понимаешь работу стейт менеджера в реакте любого, что есть, чего нет, как под капотом работают?\n22. Чем отличается мутация от эффектов?\n\nуспех: неизвестен\nфидбек: пока не было"
      }
    ]
  },
  {
    "company": "Медиалогия",
    "count": 2,
    "records": [
      {
        "timestamp": "2024-11-17 08:33:16",
        "content": "2024-11-17 08:33:16\n Вадим -> 2071074234:\nКомпания: Медиалогия\nВакансия: https://hh.ru/vacancy/108523441?hhtmFrom=employer_vacancies\nЗП: 200-250\nВопросы: \nВсе вопросы из поведенческого интервью\n-Процессы от оценки задачи до ее мержа в ветку;\n-Много говорили про задачи мои, погружал в контекст, показывал свою экспертизу в глубь от боли заказчика до реализации фичи;\n-CI CD;\n-Самая сложная задача;\n-Участвовал ли в code rewiew, на что обращал внимание;\n-какие инструменты использовали для управления ...",
        "full_content": "2024-11-17 08:33:16\n Вадим -> 2071074234:\nКомпания: Медиалогия\nВакансия: https://hh.ru/vacancy/108523441?hhtmFrom=employer_vacancies\nЗП: 200-250\nВопросы: \nВсе вопросы из поведенческого интервью\n-Процессы от оценки задачи до ее мержа в ветку;\n-Много говорили про задачи мои, погружал в контекст, показывал свою экспертизу в глубь от боли заказчика до реализации фичи;\n-CI CD;\n-Самая сложная задача;\n-Участвовал ли в code rewiew, на что обращал внимание;\n-какие инструменты использовали для управления пакетами в монорепе(workspaces), про lerna так же."
      },
      {
        "timestamp": "2024-10-29 16:41:14",
        "content": "2024-10-29 16:41:14\n Вадим -> 2071074234:\nКомпания: Медиалогия \nЗП : от 200\nВакансия: https://hh.ru/vacancy/108523441?hhtmFrom=employer_vacancies\nВопросы: \nобщетеоретический блок.\n1) знает ли про книгу чистый код роберта мартина? каких принципов придерживается для поддержание чистоты кода?\n2) какие принципы программирования знает. знает ли что такое принцип открытости/закрытости, что такое принцип единственной ответственности, что такое зацепление, что такое связность?\n3) дебаггинг: как мыслит, ...",
        "full_content": "2024-10-29 16:41:14\n Вадим -> 2071074234:\nКомпания: Медиалогия \nЗП : от 200\nВакансия: https://hh.ru/vacancy/108523441?hhtmFrom=employer_vacancies\nВопросы: \nобщетеоретический блок.\n1) знает ли про книгу чистый код роберта мартина? каких принципов придерживается для поддержание чистоты кода?\n2) какие принципы программирования знает. знает ли что такое принцип открытости/закрытости, что такое принцип единственной ответственности, что такое зацепление, что такое связность?\n3) дебаггинг: как мыслит, какие логические шаги предпринимает, какие технические средства использует?\n4) знает ли какие-нибудь паттерны из программирования типа синглтона.\n5) что такое алгоритмическая сложность, какие виды у нее бывают и какими способами её можно минимизировать?\n\n\njs:\n1) замыкание\n2) как работают ссылки на данные в js, как работает сборщик мусора\n3) что такое this, как его привязать и зачем это нужно\n4) что такое event loop и как он работает\n5) рассказать про обработку событий (три стадии распространения, остановка распространения, кастомные события, обработка в event loop, использование в задачах не связанных напрямую с интерфейсом типа кликов мышью и тд)\n6) worker - что такое, для чего нужны\n7) promise-ы. реализация через Promise API и через async await.\n\nts:\n1) зачем придумали typescript если уже есть javascript?\n2) чем отличается interface от type alias?\n3) рассказать про generic\n4) что такое any и чем оно отличается от uknown?\n5) что такое enum и зачем они нужны? какие типы enum есть?\n6) как работает утилитарный тип данных Record?\n7) что такое вывод типов в type script и как он работает? вывод типов на английском еще переводится как type inference.\n8) что такое совместимость типов в type script и как она работает?\n9) если фронтенд описал с помощью typescript-а тип данных результата работы ручки или ендпойнта, как отреагирует typescript, если во время работы приложение бэк вернёт данные другого типа?\n\nreact:\n1) рассказать про жизненный цикл компонента\n2) рассказать про хуки\n3) DOM vs Virtual DOM\n4) рассказать про алглоритм согласование или как он еще называется \"reconciliation\""
      }
    ]
  },
  {
    "company": "Азиатско-Тихоокеанский Банк",
    "count": 2,
    "records": [
      {
        "timestamp": "2025-07-16 14:14:07",
        "content": "2025-07-16 14:14:07\n Ivan -> 2071074234:\nКомпания: Азиатско-тихоокеанский банк\nЗП: 250+\n\n1. Про опыт\n2. Про интересные задачи\n3. Почему уходишь\n4. websocket vs sse\n5. tcp vs udp\n6.  Отправляешь запрос на создание ресурса, но сервер не может его создать прямо сейчас и возвращает ссылку по которой будет создан ресурс. Какой статус код будет у такого ответа?\n7. Мы отправляем запрос на бэк, но ответ будет готов через пару часов. За это время пользователь может закрыть браузер. Как такое реализовать?...",
        "full_content": "2025-07-16 14:14:07\n Ivan -> 2071074234:\nКомпания: Азиатско-тихоокеанский банк\nЗП: 250+\n\n1. Про опыт\n2. Про интересные задачи\n3. Почему уходишь\n4. websocket vs sse\n5. tcp vs udp\n6.  Отправляешь запрос на создание ресурса, но сервер не может его создать прямо сейчас и возвращает ссылку по которой будет создан ресурс. Какой статус код будет у такого ответа?\n7. Мы отправляем запрос на бэк, но ответ будет готов через пару часов. За это время пользователь может закрыть браузер. Как такое реализовать?\n8. Есть ли пет проекты?\n\nЗадача 1\nНаписать myMap + типизация\nconst myMap = <T, U>(arr: T[], fn: (item: T, index: number, array: T[]) => U): U[] => {\nconst resultArr: U[] = []\n\nfor (let i = 0; i < arr.length; i++) {\n const itemResult = fn(arr[i], i, arr)\n resultArr.push(itemResult)\n}\nreturn resultArr\n}\n\nЗадача 2\nЕсть два апи. Одно возвращает ссылку на картинку, другое список пород собак. Нужно при клике по кнопке выводить картинку и список пород.\n\n\nimport \"./styles.css\";\nimport { useState, useEffect } from \"react\";\n\nconst RANDOM_DOG_API = \"https://dog.ceo/api/breeds/image/random\";\nconst DOG_BREEDS_API = \"https://dogapi.dog/api/v2/breeds\";\n\nexport default function App() {\n  const [dogImage, setDogImage] = useState(\"\");\n  const [dogBreeds, setDogBreeds] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const fetchImage = async () => {\n    try {\n      const response = await fetch(RANDOM_DOG_API);\n      if (!response.ok) throw new Error(`Ошибка: ${response.status}`);\n      const data = await response.json();\n      setDogImage(data.message);\n    } catch (err) {\n      console.error(err);\n      setError(\"Не удалось загрузить изображение собаки\");\n    }\n  };\n\n  const fetchBreeds = async () => {\n    try {\n      const response = await fetch(DOG_BREEDS_API);\n      if (!response.ok) throw new Error(`Ошибка: ${response.status}`);\n      const { data } = await response.json();\n      setDogBreeds(data);\n    } catch (err) {\n      console.error(err);\n      setError(\"Не удалось загрузить список пород\");\n    }\n  };\n\n  const load = async () => {\n    setLoading(true);\n    setError(\"\");\n    await Promise.all([fetchImage(), fetchBreeds()]);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <button onClick={load}>Загрузить заново</button>\n      {loading && <p>Загрузка...</p>}\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n      <div>\n        {dogImage ? (\n          <img src={dogImage} alt=\"Собака\" />\n        ) : (\n          <div>Изображение собаки пока не загружено...</div>\n        )}\n      </div>\n      <ul>\n        {dogBreeds.map((breed) => (\n          <li key={breed.id}>{breed.attributes.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}"
      },
      {
        "timestamp": "2025-02-26 13:24:16",
        "content": "2025-02-26 13:24:16\n Матвей Захаров -> 2071074234:\nКомпания: Азиатско-Тихоокеанский Банк\nВакансия: https://hh.ru/vacancy/117429513?hhtmFrom=employer_vacancies \nНе записалось\n\nВопросы:\n- HTTP (и http 1.0), Resp API +  много про неочевидные коды ошибок (409, 425)\n- Пропускная способность WebSocket\n- Все тонкости про react-hook-form и zod  (как устроены, синтаксис, как работают, и вопросы в формате: \"Схемы, определяющие структуру и валидацию данных в multi-step формах\"\n- Рассказать про HOC: useImpe...",
        "full_content": "2025-02-26 13:24:16\n Матвей Захаров -> 2071074234:\nКомпания: Азиатско-Тихоокеанский Банк\nВакансия: https://hh.ru/vacancy/117429513?hhtmFrom=employer_vacancies \nНе записалось\n\nВопросы:\n- HTTP (и http 1.0), Resp API +  много про неочевидные коды ошибок (409, 425)\n- Пропускная способность WebSocket\n- Все тонкости про react-hook-form и zod  (как устроены, синтаксис, как работают, и вопросы в формате: \"Схемы, определяющие структуру и валидацию данных в multi-step формах\"\n- Рассказать про HOC: useImperativeHandler, forwardRef, memo (+ что memo принимает вторым аргументом)\n- Что такое каррирование, что для него необходимо\n- Что вернёт typeof псевдомассива arguments у function declaration\n\nЗадача: \nhttps://catfact.ninja/#/Breeds/getBreeds В codesandbox в react отрисовать данные отсюда"
      }
    ]
  },
  {
    "company": "Mapsly",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-12-11 13:13:21",
        "content": "2024-12-11 13:13:21\n Igor -> 2071074234:\nНазвание компании - Mapsly\n\nВакансия - https://t.me/javascript_jobs/726718\n\nЗадачи - https://docs.google.com/document/d/1GL9fd7ISMofgVREH7eLLugZ9Ysq0JzLf9tWu3ZJ0Nus/edit?usp=sharing\n\nЗапись в YouTube - https://youtu.be/mu0MUhLEHdE?si=l1hRlgxMaEhMYrpB",
        "full_content": "2024-12-11 13:13:21\n Igor -> 2071074234:\nНазвание компании - Mapsly\n\nВакансия - https://t.me/javascript_jobs/726718\n\nЗадачи - https://docs.google.com/document/d/1GL9fd7ISMofgVREH7eLLugZ9Ysq0JzLf9tWu3ZJ0Nus/edit?usp=sharing\n\nЗапись в YouTube - https://youtu.be/mu0MUhLEHdE?si=l1hRlgxMaEhMYrpB"
      }
    ]
  },
  {
    "company": "Orionpro",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-29 17:00:00",
        "content": "2024-11-29 17:00:00\n Стас Тихомиров -> 2071074234:\nКомпания: OrionPro\nВакансия: написала hr\nЗП: не обсуждали\n\nПоказывали проект, почтовый клиент. Так же показывали storybook.\n\nЗадачи:\n-как бы ты делал создание, удаление почтового ящика, как ты будешь декомпозировать задачу\n-сколько бы ты делал коммитов при добавлении папки в почтовый клиент (условно, создать модалку, создать инпут для написания названия папки, создать выпадающий список с родительскими папками)-это решение\n- на сколько бы ты дела...",
        "full_content": "2024-11-29 17:00:00\n Стас Тихомиров -> 2071074234:\nКомпания: OrionPro\nВакансия: написала hr\nЗП: не обсуждали\n\nПоказывали проект, почтовый клиент. Так же показывали storybook.\n\nЗадачи:\n-как бы ты делал создание, удаление почтового ящика, как ты будешь декомпозировать задачу\n-сколько бы ты делал коммитов при добавлении папки в почтовый клиент (условно, создать модалку, создать инпут для написания названия папки, создать выпадающий список с родительскими папками)-это решение\n- на сколько бы ты делал самостоятельно, имеется ввиду вот задача, декомпозиция, обсудили с лидом. Дальше надо ли тебя контролировать и т.д.\n- как развиваешься\n- что делаешь помимо работы\n- обсуждали mvp проекта что должно быть, какой функционал"
      }
    ]
  },
  {
    "company": "Riverside",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-20 07:20:08",
        "content": "2024-11-20 07:20:08\n Rolls -> 2071074234:\nКомпания - riverside\nВакансия - hr написала \nЗП: 4000$\n\nВопросы: \n1. Жизненный цикл компоненты в классовом компоненте ? \n2. Что такое useCallBack, useMemo, memo, lazy loading, lazy import ? \n3. Отличие useEffect от useLayoutEffect ?\n4. Что такое батчинг ?\n5. Как работает виртуальный дом (virtual dom, как происходит сравнение и в целом механика работы) ? \n6. Копирование объекта (поверхносто и глубоко )\n7. Также вопросы про то как собирать проект с нуля ( ...",
        "full_content": "2024-11-20 07:20:08\n Rolls -> 2071074234:\nКомпания - riverside\nВакансия - hr написала \nЗП: 4000$\n\nВопросы: \n1. Жизненный цикл компоненты в классовом компоненте ? \n2. Что такое useCallBack, useMemo, memo, lazy loading, lazy import ? \n3. Отличие useEffect от useLayoutEffect ?\n4. Что такое батчинг ?\n5. Как работает виртуальный дом (virtual dom, как происходит сравнение и в целом механика работы) ? \n6. Копирование объекта (поверхносто и глубоко )\n7. Также вопросы про то как собирать проект с нуля ( выбор организации проекта, язык программирования, фрейворк, cтилизация , репа для тим разработки, cборщик, контейнеризация, транспиллеры, линтеры и форматтеры, структура проекта и арха, UI компоненты и дизайн системы, оптимизация производительности, загрузка и обработка состояний, обработка ошибок, доступность, безопасность (xss и запросы), интернализация, роутинг, управление состоянием (Стейт менеджер), тестирование, CI/CD, деплой на vps или платформу ( verсel к примеру , если нужно быстро развернуть приложение), логирование и мониторинг"
      }
    ]
  },
  {
    "company": "Снэп-Айти",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-19 11:59:09",
        "content": "2024-11-19 11:59:09\n Егор -> 2071074234:\nКомпания: Снэп-Айти (на проект сбера)\nВакансия: https://rostov.hh.ru/vacancy/110249981\nЗП: 200+\n\nПопросил скачать репу: https://github.com/dev-nes-ilya/test-tasks\nУстановить пакеты и запустить, дальше добавить функцию addTask и removeTask..\nСделать вывод элементов из массива.\nВторая задача: починить компонент Schedule",
        "full_content": "2024-11-19 11:59:09\n Егор -> 2071074234:\nКомпания: Снэп-Айти (на проект сбера)\nВакансия: https://rostov.hh.ru/vacancy/110249981\nЗП: 200+\n\nПопросил скачать репу: https://github.com/dev-nes-ilya/test-tasks\nУстановить пакеты и запустить, дальше добавить функцию addTask и removeTask..\nСделать вывод элементов из массива.\nВторая задача: починить компонент Schedule"
      }
    ]
  },
  {
    "company": "Рамблер",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-27 11:48:18",
        "content": "2024-11-27 11:48:18\n Егор -> 2071074234:\nКомпания: Рамблер (проект Сбера)\nВакансия: hr написала\nЗП: от 200к\n\nВопросы:\n- Расскажи про свой опыт\n- Плюсы и минусы использования Redux Toolkit и RTK Query\n- Как происходит работа с API в RTK\n- Как получить response в RTK и обработать его\n- REST\n- Методы REST (get, post...)\n- SSE, Polling, Long Polling\n- Websocket\n- Можно ли в get запросе указать body и что будет\n- Можно ли в query-params указать массив (да)\n- Reack Hook Form плюсы\n- CDN что такое и за...",
        "full_content": "2024-11-27 11:48:18\n Егор -> 2071074234:\nКомпания: Рамблер (проект Сбера)\nВакансия: hr написала\nЗП: от 200к\n\nВопросы:\n- Расскажи про свой опыт\n- Плюсы и минусы использования Redux Toolkit и RTK Query\n- Как происходит работа с API в RTK\n- Как получить response в RTK и обработать его\n- REST\n- Методы REST (get, post...)\n- SSE, Polling, Long Polling\n- Websocket\n- Можно ли в get запросе указать body и что будет\n- Можно ли в query-params указать массив (да)\n- Reack Hook Form плюсы\n- CDN что такое и зачем надо\n- На что обращаешь внимание при код ревью\n- Оценка сложности алгоритма\n- Как оптимизировать запросы к серверу, если у нас идет 15 запросов для отрисовки таблицы, то что сделать, чтобы страница не блочилась и пользователь мог дальше с ней взаимодействовать? Ответ: вынести на маленькие части и выполнять их. Подгружать только видимые части таблицы.\n- Как отменить запрос на сервер (AbortController)\n- Как скопировать код нужный тебе для решения и как бы ты его внедрял в свой проект. Ответ: работа с безопасностью, нужно защищать страницу от XSS атак. Использовать iframe и выносить этот функционал в песочницу, ограничить доступ к DOM.\n\nЗадач не было"
      }
    ]
  },
  {
    "company": "Bean Counter",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-09-24 10:59:16",
        "content": "2024-09-24 10:59:16\n Stepan Ch. -> 2071074234:\n- BEAN COUNTER\n- от 200к\n- вакансия: hh.ru/vacancy/107532599\n- Вопросы с платины",
        "full_content": "2024-09-24 10:59:16\n Stepan Ch. -> 2071074234:\n- BEAN COUNTER\n- от 200к\n- вакансия: hh.ru/vacancy/107532599\n- Вопросы с платины"
      }
    ]
  },
  {
    "company": "Рунити",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-27 11:12:07",
        "content": "2025-02-27 11:12:07\n Матвей Захаров -> 2071074234:\nКомпания: Рунити\nВакансия: https://hh.ru/vacancy/116762526\nЗапись: https://youtu.be/a0DFvzcS8NA\n\nВопросы:\n- Что такое event loop\n- Всплытие/Погружение, stopPropagation, stopImmidiatePropagation\n- Map, WerMap, Set, WeakSet\n- Promise.all, Promise.allSettled\n- Что происходит после ввода адреса в поисковик\n- Для чего нужны async defer ускриптов \n- Мемоизация в реакте\n- Классовые компоненты (жизненный цикл, методы)\n- useLayoutEffect, UseEffect, forwa...",
        "full_content": "2025-02-27 11:12:07\n Матвей Захаров -> 2071074234:\nКомпания: Рунити\nВакансия: https://hh.ru/vacancy/116762526\nЗапись: https://youtu.be/a0DFvzcS8NA\n\nВопросы:\n- Что такое event loop\n- Всплытие/Погружение, stopPropagation, stopImmidiatePropagation\n- Map, WerMap, Set, WeakSet\n- Promise.all, Promise.allSettled\n- Что происходит после ввода адреса в поисковик\n- Для чего нужны async defer ускриптов \n- Мемоизация в реакте\n- Классовые компоненты (жизненный цикл, методы)\n- useLayoutEffect, UseEffect, forwardRef\n- Рассказать про reconsilation\n\nЗадачи: \nНа реакт:\n\nimport \"./styles.css\";\n\n/*\n  Реализуй компонент TaskList, который отображает список задач\n  с возможностью фильтрации по статусу и поиск по названию.\n  Разметка и стили уже заданы, требуется добавить логику\n  работы компонента (фильтрация и поиск).\n  P.S. Для выполненной задачи нужно задать класс 'completed'.\n*/\n\nconst tasks = [\n  { id: 1, title: \"Сделать дизайн макета\", completed: true },\n  { id: 2, title: \"Реализовать авторизацию\", completed: false },\n  { id: 3, title: \"Сверстать новый экран\", completed: false },\n  { id: 4, title: \"Написать тест для компонента A\", completed: false },\n  { id: 5, title: \"Написать тест для компонента B\", completed: false },\n  { id: 6, title: \"Написать тест для компонента C\", completed: false },\n  { id: 7, title: \"Написать тест для компонента D\", completed: false },\n  { id: 8, title: \"Реализовать валидацию\", completed: false },\n  { id: 9, title: \"Реализовать отправку данных\", completed: false },\n];\n\nconst TaskList = () => {\n  return (\n    <div className=\"task-list-container\">\n      <div className=\"filter-buttons\">\n        <button>Все</button>\n        <button>Выполненные</button>\n        <button>Не выполненные</button>\n      </div>\n      <div className=\"search-input\">\n        <input type=\"text\" placeholder=\"Поиск задач...\" />\n      </div>\n      {/* Место для списка задач */}\n    </div>\n  );\n};\n\nexport default TaskList;\n\n`\nна js\n\nСобрать все примитивы\nconst result = getAllPrimitives({\n  a: {\n    l: { u: 8 },\n    b: 1,\n  },\n  c: {\n    d: 2,\n    e: { f: 7 },\n    g: {\n      m: {\n        p: {\n          o: 10,\n        },\n      },\n    },\n  },\n  j: 4,\n});\n\nresult(\"lalala\");\n// [8, 1, 2, 7, 10, 4]\n\nfunction getAllPrimitives(obj) {\n  // Your implementation\n}\n\n`\nна консоль\nlet fullname = \"NAME_111\";\nlet obj = {\n  fullname: \"NAME_222\",\n  prop: {\n    fullname: \"NAME_333\",\n    getFullname: function () {\n      return this.fullname;\n    },\n  },\n};\n\nlet simpleObject = {\n  full_name: \"NAME_444\",\n};\n\nconsole.log(obj.prop.getFullname()); //#1\nlet test = obj.prop.getFullname;\nconsole.log(test()); //#2\nconsole.log(obj.prop.getFullname.call(simpleObject)); //#3\nconsole.log(obj.prop.getFullname.bind({ fullname: \"NAME_555\" })); //#4\n\nconsole.log(\"1\");\n\nsetTimeout(() => {\n  console.log(\"2\");\n\n  Promise.resolve(\"3\").then(console.log);\n}, 0);\n\nlet p = new Promise(function (resolve, reject) {\n  console.log(\"4\");\n  resolve();\n});\n\np.then(function () {\n  console.log(\"5\");\n});\n\nsetTimeout(() => {\n  console.log(\"6\");\n\n  Promise.resolve().then(() => {\n    console.log(\"7\");\n  });\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log(\"8\");\n});\n\nconsole.log(\"9\");\n\n\nimport React from \"react\";\nimport \"./styles.css\";\n\n// КНОПОЧКУ НЕ ТЫКАТЬ!\n// В каком порядке отработают console.log при нажатии на кнопку?\n// Доп. вопрос - какой будет state в console.log?\nexport default function App() {\n  const [state, setState] = React.useState(0);\n\n  React.useEffect(() => {\n    console.log(\"effect\", state);\n\n    return () => {\n      console.log(\"clean-up function\", state);\n    };\n  }, [state]);\n\n  const handleChange = () => {\n    setState(state + 1);\n  };\n\n  return (\n    <>\n      <button onClick={handleChange}>+1</button>&nbsp;\n      {state}\n    </>\n  );\n}"
      }
    ]
  },
  {
    "company": "Корпорация Элар",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-06 15:08:57",
        "content": "2024-07-06 15:08:57\n Artur -> 2071074234:\nКорпорация Элар\n\n— Вакансия: https://hh.ru/vacancy/101436992?hhtmFrom=employer_vacancies\n— ЗП: говорил 200к+\n\nВопросы:\n— что такое jsx\n— какие хуки знаешь, что они делают\n— что такое редьюсер в редаксе\n— есть ли опыт использования ssr\n— какие архитектурные подходы знаешь\n— что скажешь про FSD\n— для валидации форм что используешь\n— как pixel perfect делаешь\n— sass/scss\n— работал ли node.js\n— с redis работал ли",
        "full_content": "2024-07-06 15:08:57\n Artur -> 2071074234:\nКорпорация Элар\n\n— Вакансия: https://hh.ru/vacancy/101436992?hhtmFrom=employer_vacancies\n— ЗП: говорил 200к+\n\nВопросы:\n— что такое jsx\n— какие хуки знаешь, что они делают\n— что такое редьюсер в редаксе\n— есть ли опыт использования ssr\n— какие архитектурные подходы знаешь\n— что скажешь про FSD\n— для валидации форм что используешь\n— как pixel perfect делаешь\n— sass/scss\n— работал ли node.js\n— с redis работал ли"
      }
    ]
  },
  {
    "company": "Название Компании Beget",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-04-06 09:07:21",
        "content": "2024-04-06 09:07:21\n Санжар -> 2071074234:\n- Название компании Beget\n- Ссылка на вакансию https://spb.hh.ru/vacancy/94771093?hhtmFrom=employer_vacancy_responses\n- ЗП: запросил 250 минимум, комфорт 350\n- Задачи: теория (много по ООП), без лайвкодинга\n- Успех: ❌\n- Фидбек: интервью было комфортным, сам интервьюер был адекватным,  дал ок на финал, договорились о дате финала, но через 4 часа написал hr: \"Извини, обсудили с руководителем твои результаты, но все-таки тема ООП для нас критически важна, ...",
        "full_content": "2024-04-06 09:07:21\n Санжар -> 2071074234:\n- Название компании Beget\n- Ссылка на вакансию https://spb.hh.ru/vacancy/94771093?hhtmFrom=employer_vacancy_responses\n- ЗП: запросил 250 минимум, комфорт 350\n- Задачи: теория (много по ООП), без лайвкодинга\n- Успех: ❌\n- Фидбек: интервью было комфортным, сам интервьюер был адекватным,  дал ок на финал, договорились о дате финала, но через 4 часа написал hr: \"Извини, обсудили с руководителем твои результаты, но все-таки тема ООП для нас критически важна, к сожалению не сможем продолжить. Просим прощения.\" В проекте у них ООП, хотят отходить от этого в composition api + pinia\n\nВопросы:\n- расскажи про этапы обработки события в js\n- способы завести реактивную переменную во vue composition api, их особенности\n- какие есть модификаторы доступа атрибутов у класса (private, public, protect), в чем их отличия. Какой есть модификатор доступа в typescript (readonly)\n- что такое инъекция в ООП\n- что такое наследование в ООП\n- что такое статические атрибуты класса\n- что такое абстрактный класс, чем отличается от обычного\n- расскажи про SOLID принципы\n- что происходит при вводе адреса сайта в браузер\n- как работает поиск ip адреса в dns сервере\n- какие знаешь гит команды, опиши последовательность их применений в работе над задачей\n- перечисли структуры данных в typescript\n- как можно указать тип массива в typescript\n- что такое бандл, чем он отличается от чанков\n- может ли бандл состоять из одного файла\n- какие типы хэшей знаешь в вебпаке\n- можно ли включить изображения в бандл, т.е. не выгружать их из сервера, как этого добиться\n\nчто будет выведено в консоль?\ntry { \n    var a = 25\n    console.log(a)\n    throw new Error()\n} catch (error) {\n    console.log(a)\n}\nconsole.log(a)\nбудет ли вывод в консоли? как можно перехватить ошибку колбэка setTimeout, не затрагивая его колбэк?\ntry {\n    setTimeout(() => {\n        throw new Error()\n    })\n} catch (error) {\n   console.log(error) \n}\nкак можно перехватить ошибку промиса в setTimeout, не затрагивая его колбэк?\ntry {\n    setTimeout(() => {\n        promise.reject(new Error())\n    })\n} catch (error) {\n   console.log(error) \n}\n\nчто будет выведено в консоль?\nconst a = [1,2,3,4]\nconst b = [5,6,7,8]\na.concat(b)\nconsole.log(a)"
      }
    ]
  },
  {
    "company": "X5",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-21 05:56:19",
        "content": "2024-11-21 05:56:19\n Alexander Morozov -> 2071074234:\n- Компания: X5 Retail group\n- Вакансия: https://hh.ru/vacancy/102827724\n- ЗП: 250к\n- Вопросы: Базовые вопросы про опыт, команду и процессы. \n1) Способы позиционирования элемента по центру, с подробным объяснениям как и почему выбираешь тот или иной способ.\nАльгоритмическая секция: \n1) Провести код ревью компонента, код реализовывал хлебные крошки. Уменьшение сложности, упрощение и повышение читаемости кода. \n2) Задача с 2 циклами, уменьшить с...",
        "full_content": "2024-11-21 05:56:19\n Alexander Morozov -> 2071074234:\n- Компания: X5 Retail group\n- Вакансия: https://hh.ru/vacancy/102827724\n- ЗП: 250к\n- Вопросы: Базовые вопросы про опыт, команду и процессы. \n1) Способы позиционирования элемента по центру, с подробным объяснениям как и почему выбираешь тот или иной способ.\nАльгоритмическая секция: \n1) Провести код ревью компонента, код реализовывал хлебные крошки. Уменьшение сложности, упрощение и повышение читаемости кода. \n2) Задача с 2 циклами, уменьшить соложность алгоритма с O(n^2) до O(n). Задача не сохранилась. \n3) Реализовать рабочий компонент со списком (загрузка, фильтрация, реаализация модального окна через <dialog>)"
      }
    ]
  },
  {
    "company": "Click2Money",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-03 13:00:15",
        "content": "2024-06-03 13:00:15\n Artur -> 2071074234:\nКомпания: Click2Money\nСсылка: https://hh.ru/vacancy/100330907?hhtmFrom=vacancy_search_list\nСсылка на собес: https://disk.yandex.ru/i/du2Id4WROTL4eQ\nЗП: я сказал вроде 150к+\nУровень: Middle\nУспех собеса: ?\n\nВопросы:\n— Типы данных js\n— null и undefined, разница\n— Замыкание\n— Промис\n— Как можно избежать ссылочной зависимости при копировании объекта\n— Деструктуризация массива\n— Event loop\n— Способы хранения данных в браузере\n— Разница session и localstorage\n...",
        "full_content": "2024-06-03 13:00:15\n Artur -> 2071074234:\nКомпания: Click2Money\nСсылка: https://hh.ru/vacancy/100330907?hhtmFrom=vacancy_search_list\nСсылка на собес: https://disk.yandex.ru/i/du2Id4WROTL4eQ\nЗП: я сказал вроде 150к+\nУровень: Middle\nУспех собеса: ?\n\nВопросы:\n— Типы данных js\n— null и undefined, разница\n— Замыкание\n— Промис\n— Как можно избежать ссылочной зависимости при копировании объекта\n— Деструктуризация массива\n— Event loop\n— Способы хранения данных в браузере\n— Разница session и localstorage\n— Как сервер запрещает чтение куки из браузере\n— Virtual DOM\n— React хуки, как работают основные\n— useImperativeHandle что за хук\n— Стратегии оптимизации в React\n— Для чего TS\n— Джейнерики, что это\n\nЗадачи:\n\n1. Что выведет консоль?\n\nconsole.log([...'Lydia']); //\n\n2. Что выведет консоль?\n\nfunction addToList(item, list) {\n   return list.push(item);\n}\nconst result addToList('apple', ['banana']);\n\nconsole.log(result); //\n\n3. Написать функцию, которая преобразует массив в объект\n\nfunction transform(arr) {\n\n}\n\nconst arr = [\n   {name: 'name', value: 'Aнатолий'},\n   {name: 'age', value: '40'}\n]\n\nconsole.log(transform(arr)) // { name: \"Анатолий', age: 40 }"
      }
    ]
  },
  {
    "company": "Триафлай",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-20 10:05:08",
        "content": "2024-10-20 10:05:08\n Artyom Sozykin -> 2071074234:\nКомпания: Триафлай\nВакансия: https://novosibirsk.hh.ru/vacancy/107930772?hhtmFrom=resume\nЗП: 250к\nВопросы:\n1) Какие методы из классовых компонентов реализованы в функциональных в качестве хуков?\n2) Что нельзя сделать на функциональных, что можно делать только в классовых (назвал: наследование, errorBoundary и shouldComponentUpdate)\n3) Вопрос о том как типизировать библиотеки (файлы d.ts declare)\n4) Были вопросы по легенде, о том какие самые слож...",
        "full_content": "2024-10-20 10:05:08\n Artyom Sozykin -> 2071074234:\nКомпания: Триафлай\nВакансия: https://novosibirsk.hh.ru/vacancy/107930772?hhtmFrom=resume\nЗП: 250к\nВопросы:\n1) Какие методы из классовых компонентов реализованы в функциональных в качестве хуков?\n2) Что нельзя сделать на функциональных, что можно делать только в классовых (назвал: наследование, errorBoundary и shouldComponentUpdate)\n3) Вопрос о том как типизировать библиотеки (файлы d.ts declare)\n4) Были вопросы по легенде, о том какие самые сложные или долгие задачи выполнял\n5) Коротко про каждый хук\n6) Eventloop\n7) Для чего нужны промисы\n\nУспех: оффер на 280к✅"
      }
    ]
  },
  {
    "company": "Evercode Lab",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-11 12:47:23",
        "content": "2025-07-11 12:47:23\n Ivan -> 2071074234:\nКомпания: Evercode Lab\nЗП: 250-300+\n\nЭто был первый тех этап с разговорами про опыт. Больше было похоже софтовое интервью. \nЕсли окей, то зовут в свой офис на 2-ю часть. Потом еще финальная с сео/директором тк позиция senior.\nДлилось чуть меньше часа.\n\n1. Про опыт\n2. Про интересную задачу\n3. Про факап и какие сделал выводы из него\n4. Каких задач ждешь, что для тебя развитие?\n5. Какие могут быть проблемы с вебсокетом? Когда вебсокет нужен, а когда не очень...",
        "full_content": "2025-07-11 12:47:23\n Ivan -> 2071074234:\nКомпания: Evercode Lab\nЗП: 250-300+\n\nЭто был первый тех этап с разговорами про опыт. Больше было похоже софтовое интервью. \nЕсли окей, то зовут в свой офис на 2-ю часть. Потом еще финальная с сео/директором тк позиция senior.\nДлилось чуть меньше часа.\n\n1. Про опыт\n2. Про интересную задачу\n3. Про факап и какие сделал выводы из него\n4. Каких задач ждешь, что для тебя развитие?\n5. Какие могут быть проблемы с вебсокетом? Когда вебсокет нужен, а когда не очень?\n6. Как решаешь конфликтные ситуации?\n7. Если тимлид не прав, а ты прав, то как продавить свое решение чтоб прод не упал в итоге?\n8. Есть несколько задач в спринте одинаковых по приоритету, в каком порядке будешь делать и почему?\n9. Клиент зарегистрировался, попал на главную, перешел в личный кабинет. Личный кабинет грузится 30 сек. Что с этим делать? (тут надо задавать больше вопросов потому что это их реальный кейс и там тяжелые ручки на бэке. Вообще не про фронт проблема в итоге оказалась))) )\n10. На какой грейд себя оцениваешь?\n11. Какой оффер выберешь если получишь 2 с одинаковыми условиями (у них онли офис и они очень переживают на этот счет)"
      }
    ]
  },
  {
    "company": "Сибинтек",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-28 06:05:52",
        "content": "2025-03-28 06:05:52\n Андрей Мелицков -> 2071074234:\nКомпания Сибинтек\nЗП 250\n\nтехсобес с двумя специалистами, один чуть заикается. Копают в глубь на понимание рендеров в реакт. Открывают чат в тг и все задачи скидывают туда и просят читать код и рассказывать что делает и как улучшить. Скину задачи ниже:\n\nМожно ли вызывать в ефекте ретурн и как это будет работать, заблочит ли он выполнение функции ниже:\n\nuseEffect(() => {\nif(!visible) return;\n//... \n//...\nshowModal();\n}, [visible])\n\nЧто просиходи...",
        "full_content": "2025-03-28 06:05:52\n Андрей Мелицков -> 2071074234:\nКомпания Сибинтек\nЗП 250\n\nтехсобес с двумя специалистами, один чуть заикается. Копают в глубь на понимание рендеров в реакт. Открывают чат в тг и все задачи скидывают туда и просят читать код и рассказывать что делает и как улучшить. Скину задачи ниже:\n\nМожно ли вызывать в ефекте ретурн и как это будет работать, заблочит ли он выполнение функции ниже:\n\nuseEffect(() => {\nif(!visible) return;\n//... \n//...\nshowModal();\n}, [visible])\n\nЧто просиходит и Как исправить, чтоб не было ошибки при таком выполнении кода\n\nconst [count, setCount] = useState(0)\n\nuseEffect(() => {\n   // код\n   setCount(count + 1)\n\n}, [count, ....])\n\nБудет ли React  воспринимать useCount, как пользовательский хук?\nconst useCount = (cnt) => cnt + 1; \n\nfunction MyComponent() {\n  const count = useCount(0); \n\n  return (\n    <div>\n      <p>Count: {count}</p>\n    </div>\n  );\n}\n\n\nЧто происходит в этом коде, сколько рендеров, как улучшить:\n   const ToggleComponent = () => {\n     const [isVisible, setIsVisible] = useState(false);\n     const inputRef = useRef(null);\n\n     const toggleVisibility = () => {\n       setIsVisible(prev => !prev);\n       if (inputRef.current) {\n         inputRef.current.focus();\n       }\n     };\n\n     return (\n       <>\n         <button onClick={toggleVisibility}>Toggle Input</button>\n         {isVisible && <input ref={inputRef} />}\n       </>\n     );\n   };\n\n\nКриво работает счетчик, как исправить(нужно в setCount(prev => prev + 1))\n   const Counter = () => {\n     const [count, setCount] = useState(0);\n\n     useEffect(() => {\n       const timer = setInterval(() => {\n         setCount(count + 1);\n       }, 1000);\n\n       return () => clearInterval(timer);\n     }, []);\n\n     return <div>Count: {count}</div>;\n   };\n\n\nЧто в этом коде не так, как улучшить(асинхронщина в асинхронном эфекте, нужно вынести отдельную функцию)\n   const DataFetcher = () => {\n     const [data, setData] = useState(null);\n\n     useEffect(async () => {\n       const response = await fetch('/api/data');\n       const jsonData = await response.json();\n       setData(jsonData);\n     }, []);\n\n     return <div>{data ? JSON.stringify(data) : 'Loading...'}</div>;\n   };\n\n\nЧто происходит в коде и как себя ведет здесь рендер и val в дочернем компоненте\nimport React, { useRef, useState, useEffect } from 'react'\n\nconst CountDisplay = (props) =>{\n  const [val] = useState(props.c)\n  return <div>{val}</div>\n}\n\n\nconst App = () => {\n  const [count, setCount] = useState(0)\n\n  const handleClick = () => {\n    setCount(c => c + 1)\n  }\n  \n  return (<div>\n    <button onClick={handleClick}>\n      <span>⚛️</span> {count}\n    </button>\n    <CountDisplay c={count} />\n  </div>\n  )\n}\n\n\nexport default App\n\nЧто за код, что делает, в чем ошибка(я нашел только что не записи новых компонентов в функции в список уже имеющийся, не обьявлен стэйт на верхнем уровне, чтоб в него записывать и по коду возвращаем тот список что вошел)\n\nimport { useState, useEffect } from 'react';\nimport { useInfiniteScroll } from './hooks';\n\nconst App = () => {\n  const [page, setPage] = useState(1);\n\n  const fetchData = async (pageNumber) => {\n    try {\n      const response = await fetch(`https://api.example.com/data?page=${pageNumber}`);\n      if (!response.ok) throw new Error('Network error');\n      const json = await response.json();\n      return json.data;\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const [items, isLoading, error] = useInfiniteScroll(fetchData, page, 10);\n\n  return (\n    <div>\n      {items.map(item => (\n        <div key={item.id}>\n          <p>{item.title}</p>\n        </div>\n      ))}\n      {isLoading && <p>Загрузка...</p>}\n      {error && <p>Ошибка: {error.message}</p>}\n    </div>\n  );\n};\n\nexport default App;\n\n---\n\n**\n\nimport { useState, useRef, useEffect } from 'react';\n\nconst useInfiniteScroll = (fetchMoreItems, items, threshold = 5) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const observer = useRef(null);\n\n  const lastItemElement = useRef(null);\n\n  useEffect(() => {\n    if (observer.current) observer.current."
      }
    ]
  },
  {
    "company": "Restoclub",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-12 17:03:07",
        "content": "2025-03-12 17:03:07\n Nodar -> 2071074234:\nКомпания: Restoclub\nВакансия: https://hh.ru/vacancy/117697420?hhtmFrom=chat\nЗп: 250+\nЗадач не было.\n\nВопросы от pm:\nСпрашивал про опыт в резюме, про проект и  команду, как ставились задачи. Формат разговорный\n\nВопросы от фронта(Формат вопрос-ответ):\nВопрос про архитектуру(fsd), преимущества и недостатки\n\nJS\n1) Типы данных js\n2) function declaration/expression отличия\n3) map/set отличия\n4) cookie,sessionStorage, localStorage для чего, отличия\n5) Функции в...",
        "full_content": "2025-03-12 17:03:07\n Nodar -> 2071074234:\nКомпания: Restoclub\nВакансия: https://hh.ru/vacancy/117697420?hhtmFrom=chat\nЗп: 250+\nЗадач не было.\n\nВопросы от pm:\nСпрашивал про опыт в резюме, про проект и  команду, как ставились задачи. Формат разговорный\n\nВопросы от фронта(Формат вопрос-ответ):\nВопрос про архитектуру(fsd), преимущества и недостатки\n\nJS\n1) Типы данных js\n2) function declaration/expression отличия\n3) map/set отличия\n4) cookie,sessionStorage, localStorage для чего, отличия\n5) Функции высшего порядка(HOF), что это, приведи пример\n6) var,let,const отличия\n7) eventLoop, микро и макротаски, как работает\n8) Промисы, как работают, методы промисов(race,all)\n9) this, что это, как работает в обычных и стрелочных функциях\n10) модули в js (import export es6+),common js(require)\n\nReact\n1) Для чего useEffect, методы жизненного цикла компонента, отличия useEffect от useLayoutEffect\n2) Как реакт понимает когда надо сделать ререндер\n3) Передача пропсов, примитивы и ссылки, что вызовет ререндер(вопрос про useCallback и memo)\n4) Что будет, если поместить тяжелые вычисления в useEffect(будет ли блокировка)\n5) Вопрос про хранение данных в react(useState,state managerы, useRef, context)"
      }
    ]
  },
  {
    "company": "Тензор",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-15 01:56:49",
        "content": "2025-04-15 01:56:49\n Ber -> 2071074234:\n— Название компании: Тензор, 1 этап (технический) в Тензор с командой, после скриннинга\nСобес был в команду, которая заниматься UI-платформой, ищут разработчика UI\n— Ссылка на вакансию: https://spb.hh.ru/vacancy/119226602\n— ЗП: просил от 180 тр на руки\n— Вопросы (все были на устное размышление): \n1) Расскажи о своем опыте? Какой стек используешь?\n2) Почему уходишь с работы?\n3) Есть задача: есть скролл, пользователь скроллит - как сделать так, чтобы при пер...",
        "full_content": "2025-04-15 01:56:49\n Ber -> 2071074234:\n— Название компании: Тензор, 1 этап (технический) в Тензор с командой, после скриннинга\nСобес был в команду, которая заниматься UI-платформой, ищут разработчика UI\n— Ссылка на вакансию: https://spb.hh.ru/vacancy/119226602\n— ЗП: просил от 180 тр на руки\n— Вопросы (все были на устное размышление): \n1) Расскажи о своем опыте? Какой стек используешь?\n2) Почему уходишь с работы?\n3) Есть задача: есть скролл, пользователь скроллит - как сделать так, чтобы при перезагрузке страницы пользователь оказался на том же месте?\n4) Доп условие: а если бэкенд будет отправлять данные чанками? В каком виде будешь согласовывать данные чанка с бэкенд-разработчиком? И как будешь решать задачу из пункта 3)\n5) Есть список данных - как сделать так, что при изменении списка одним пользователем - изменненые данные отображались для всех других пользователей?\nОтвет: надо использовать websocket\n6) Доп вопрос для пункта 5): а если задача такая, что на основе этого списка и еще других данных расчитывается и отрисовывается статистика (графики), то как сделать так, чтобы дополнительные данные подгружались только один раз при условии, например, что у пользователся открыто 5 вкладок?\nТо есть список сам, да, отправляешь ты через socket.io, но при этом не надо подгружать доп данные при каждом изменении списка\nОтвет: ответил, что доп данные для статистики надо загрузить при первом посещении пользователя и сохранить в localStorage или в indexedDB, если тяжелые данные. Компонент статистики сделать дочерним для компонента со списком - то есть при именении списка будет ререндер родительского, а дочерний будет обернут в memo (и будет ререндер дочернего только при изменении данных списка) и внутри дочернего будет проверяться наличие доп данных в localStorage для статистики.\nСобеседующий сказал: да, принимается\n7) Какие принципы ООП?\n8) На примере двух классов раскрой каждый принцип\n9) Какие есть модификаторы в классах? И почему они нужны? Какие именно приниципы ООП они реализовывают?\n10) Что в целом является Interface в парадигме ООП?\n11) Какие конкретно можешь примеры рассказать применения interface в TS? Почему именно он введен в TS? Что он дает относительно ООП? \n12) В чем отличие interface и type в TS? Почему ввели interface, ведь можно же всё делать с type?\n\n— Успех собеса: пока не ответили - ответным сообщением отпишу\n— Фитбек о собесе от HR: пока жду ответ"
      }
    ]
  },
  {
    "company": "Название Компани: Marfatech",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-03-13 15:43:16",
        "content": "2024-03-13 15:43:16\n V -> 2071074234:\nНазвание компани: Marfatech\nВакансия: -\nЗП: 250K\nВопросы (Очень мало тех.вопросов): \n﻿﻿- Как бы ты сравнил react и vue?\n- Знаешь ли как настроить webpack с нуля?\n- Про webpack-module-federation\n- Про тесты\n- Про перфоманс\n- Отличие GET и POST\n- Про enum\n\nЗадаю много вопросов\nЗапись собеседования: https://youtu.be/DjdbhMMTZZM?si=R1yOHDEOHDx6QH9H\nУспех собеседования: ✅ дали оффер\nОтвет HR: У нас очень положительная обратная связь)",
        "full_content": "2024-03-13 15:43:16\n V -> 2071074234:\nНазвание компани: Marfatech\nВакансия: -\nЗП: 250K\nВопросы (Очень мало тех.вопросов): \n﻿﻿- Как бы ты сравнил react и vue?\n- Знаешь ли как настроить webpack с нуля?\n- Про webpack-module-federation\n- Про тесты\n- Про перфоманс\n- Отличие GET и POST\n- Про enum\n\nЗадаю много вопросов\nЗапись собеседования: https://youtu.be/DjdbhMMTZZM?si=R1yOHDEOHDx6QH9H\nУспех собеседования: ✅ дали оффер\nОтвет HR: У нас очень положительная обратная связь)"
      }
    ]
  },
  {
    "company": "Infrakap",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-04 12:58:40",
        "content": "2024-10-04 12:58:40\n Михаил -> 2071074234:\nInfraKAP\nвакансия hh.ru/vacancy/107244672\nв целом видео можно не смотреть, вопросы были из разряда \"пользовался?\"-\"да пользовался\" и немного дополнял что и зачем. в основном разговоры \"за жизнь\"",
        "full_content": "2024-10-04 12:58:40\n Михаил -> 2071074234:\nInfraKAP\nвакансия hh.ru/vacancy/107244672\nв целом видео можно не смотреть, вопросы были из разряда \"пользовался?\"-\"да пользовался\" и немного дополнял что и зачем. в основном разговоры \"за жизнь\""
      }
    ]
  },
  {
    "company": "Alderasoft",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-07 15:19:47",
        "content": "2025-02-07 15:19:47\n Александр Богданов -> 2071074234:\nКомпания ALDERASOFT (г.Томск, аутстаф):\n-по пункту в резюме: «Как скачивание фаилов в pdf реализовал»\n-разница null vs undefined\n-Symbol что такое и зачем\n-пользовался ли var, почему не используем эту переменную\n-можем ли через const поменять свойства объекта\n-можем ли сделать чтобы нельзы было менять своиства объекта(«заморозить...»)\n-замыкание;eventLoop\n-виды функций, контекст, методы сохранения контекста,\n-сказал что я не прав bind/call/a...",
        "full_content": "2025-02-07 15:19:47\n Александр Богданов -> 2071074234:\nКомпания ALDERASOFT (г.Томск, аутстаф):\n-по пункту в резюме: «Как скачивание фаилов в pdf реализовал»\n-разница null vs undefined\n-Symbol что такое и зачем\n-пользовался ли var, почему не используем эту переменную\n-можем ли через const поменять свойства объекта\n-можем ли сделать чтобы нельзы было менять своиства объекта(«заморозить...»)\n-замыкание;eventLoop\n-виды функций, контекст, методы сохранения контекста,\n-сказал что я не прав bind/call/apply можно применить к стрелкам и так делал в классовых компонентах\n-все про промиссы + статичные методы промисса + async/await + избегаем коллбек-хелл_а...\n- методы массива основные\n-немного про абортконтроллер + отмена запросов с аксиос\n- делал ли дженерики и в каких случаях(в кастомных утилитных случаях)\n- разница м/у interface vs type, infer? Any vs unknown vs never\n- все про реакт расскажи кратко\n- способы оптимизации\n- react vs view vs angular\n- хуки реакта\n- Контекст в реакте зачем как работает\n // Написать тип для  multiplyBy2\nconst sum = (a, b) => a + b;\nsum.multiplyBy2 = (a, b) => sum(a, b) * 2;\n// Ответ:\ntype SumWithMultiply = {\n  (a: number, b: number): number; // описание функции sum\n  multiplyBy2?: (a: number, b: number) => number; // свойство multiplyBy2\n};"
      }
    ]
  },
  {
    "company": "- Интеграционные Решения",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-29 17:00:13",
        "content": "2025-04-29 17:00:13\n Максим Соломыкин -> 2071074234:\nКомпания - Интеграционные решения\nЗП - 200 - 300 на руки\nВакансия - hr написал\n\nВопросы:\n1. Кратко про опыт\n2. Что такое батчинг в реакт\n2. Разница интерфейсов и типов\n3. Что такое ref и зачем нужен\n4. Что такое cleanup функция в useEffect\n5. Разница между any / never / unknown\n\nЗадачи:\n\n1. Реализовать метод groupBy\n\nРешение:\nconst data = [\n    { id: 1, type: 'fruit', name: 'apple' },\n    { id: 2, type: 'vegetable', name: 'carrot' },\n    { id:...",
        "full_content": "2025-04-29 17:00:13\n Максим Соломыкин -> 2071074234:\nКомпания - Интеграционные решения\nЗП - 200 - 300 на руки\nВакансия - hr написал\n\nВопросы:\n1. Кратко про опыт\n2. Что такое батчинг в реакт\n2. Разница интерфейсов и типов\n3. Что такое ref и зачем нужен\n4. Что такое cleanup функция в useEffect\n5. Разница между any / never / unknown\n\nЗадачи:\n\n1. Реализовать метод groupBy\n\nРешение:\nconst data = [\n    { id: 1, type: 'fruit', name: 'apple' },\n    { id: 2, type: 'vegetable', name: 'carrot' },\n    { id: 3, type: 'fruit', name: 'banana' },\n];\n\nconst groupBy = (items, key) => {\n    const mapa = {};\n    items.forEach(item => {\n        const groupKey = item[key];\n        if (!mapa[groupKey]) {\n            mapa[groupKey] = [];\n        }\n        mapa[groupKey].push(item);\n    });\n    return mapa;\n};\n\nconsole.log(groupBy(data, 'type'));\n\n2. Реализовать функцию compose\nconst compose = (...func) => {\n}\n\nconst add = (x) => x + 2;\nconst multiply = (x) => x * 3;\nconst subtract = (x) => x - 4;\n\nconst composedFunction = compose(add, multiply, subtract);\n\nconsole.log(composedFunction(5)); // (5 + 2) * 3 - 4 = 17\n\nРешение:\n\nconst compose = (...funcs) => (x) => {\n    return funcs.reduce((acc, fn) => fn(acc), x);\n};\n\nconst add = (x) => x + 2;\nconst multiply = (x) => x * 3;\nconst subtract = (x) => x - 4;\n\nconst composedFunction = compose(add, multiply, subtract);\n\nconsole.log(composedFunction(5)); // (5 + 2) * 3 - 4 = 17\n\n3. Реализовать кастомный хук useDebounce\n\nРешение:\n\nimport { useEffect, useState } from 'react';\n\nexport const useDebounce = (value) => {\n  const [debounceValue, setDebounceValue] = useState(value);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setDebounceValue(value);\n    }, 500);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [value]);\n\n  return debounceValue;\n};"
      }
    ]
  },
  {
    "company": "Prootech",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-21 14:16:15",
        "content": "2025-02-21 14:16:15\n Никита -> 2071074234:\nКомпания: Prootech\nВакансия: писала hr\nЗП: до 300\n1. Сколько может быть header main footer\n2. Специфичность селекторов\n3. id, id + class, id какой стиль применится\n4. Как определяется какой стиль применится(веса)\n5. Почему можно вызвать у примитива методы\n6. Как отсортируется массив, если в sort не передать колбэк\n7. Что такое TS\n8. Когда встретим тип never\n9. Что такое typeof и keyof\n10. let a - какой тип запишет TS (any). Как избавится(прописать прави...",
        "full_content": "2025-02-21 14:16:15\n Никита -> 2071074234:\nКомпания: Prootech\nВакансия: писала hr\nЗП: до 300\n1. Сколько может быть header main footer\n2. Специфичность селекторов\n3. id, id + class, id какой стиль применится\n4. Как определяется какой стиль применится(веса)\n5. Почему можно вызвать у примитива методы\n6. Как отсортируется массив, если в sort не передать колбэк\n7. Что такое TS\n8. Когда встретим тип never\n9. Что такое typeof и keyof\n10. let a - какой тип запишет TS (any). Как избавится(прописать правило в tsconfig)?\n11. Можно ли использовать index к статическому массиву\n12. Через что сделать componentWillMount\n13. Что будет если в useEffect будет пустой массив зависимостей.\n14. Приходит много карточек товара, при скроле нужно показывать новые,  как бы делал ( InterectionObserver и виртуализация)?\n\nЗадача на Promise\n\n\n\n\nconsole.log(1)\n\nsetTimeout(() => console.log(2), 0)\n\nnew Promise((res, rej) => {\nconsole.log(3)\nreject()\n}).then(() => console.log(4))\n.cath(() => console.log(6))\n\nconsole.log(6)\n\n\nУдалить дубликаты\n\n\n\nconst removeDuplicates = (arr) => {\n    let result = [];\n    for (let num of arr) {\n        if (!result.includes(num)) {\n            result.push(num);\n        }\n    }\n    return result;\n};\n\nconsole.log(removeDuplicates([1, 2, 2, 3)]\n\n\n\nНаписать свой flatt\n\n\n\nconst flat = (arr) => {\n    let result = [];\n    for (let item of arr) {\n        if (Array.isArray(item)) {\n            result.push(...flat(item)); // Рекурсивный вызов для вложенных массивов\n        } else {\n            result.push(item);\n        }\n    }\n    return result;\n};\n\nconsole.log(flat([[0, [1, [2]]], [3, [4, 5, 6], 7], [8], 9, [10]]));\n// [0,1,2,3,4,5,6,7,8,9"
      }
    ]
  },
  {
    "company": "Элвис",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-25 17:32:49",
        "content": "2024-11-25 17:32:49\n Артем -> 2071074234:\nКомпания Элвис\nЗП: 200\nВопросы\nспросил про опыт\nEvent loop\n1 3 4 5 2 6",
        "full_content": "2024-11-25 17:32:49\n Артем -> 2071074234:\nКомпания Элвис\nЗП: 200\nВопросы\nспросил про опыт\nEvent loop\n1 3 4 5 2 6"
      }
    ]
  },
  {
    "company": "Pravotech",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-03 09:54:05",
        "content": "2024-10-03 09:54:05\n Михаил -> 2071074234:\nКомпания PravoTech\nвакансия hh.ru/vacancy/107713293\nзп 200к\n\nВопросы:\n1. Написать ToDoList на классах (с добавление и удалением тудушек).\nЧерез 15 минут как начал писать (осталось кнопки добавить) сказал что это очень долго, мидл бы уже все сделал и стили накатил\nПо этому зареджектил собес",
        "full_content": "2024-10-03 09:54:05\n Михаил -> 2071074234:\nКомпания PravoTech\nвакансия hh.ru/vacancy/107713293\nзп 200к\n\nВопросы:\n1. Написать ToDoList на классах (с добавление и удалением тудушек).\nЧерез 15 минут как начал писать (осталось кнопки добавить) сказал что это очень долго, мидл бы уже все сделал и стили накатил\nПо этому зареджектил собес"
      }
    ]
  },
  {
    "company": "Рв-Системс",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-27 15:27:06",
        "content": "2025-06-27 15:27:06\n Daniil Daniil -> 2071074234:\nКомпания РВ-системс\n1 этап, созвон с hr\n\nВначале спрашивает и уточняет по резюме(подробно по крайнему месту работы)\nДальше мини тех скрининг:\n1. Типы данных\n2. Замыкание\n3. Что такое http, из чего состоит, заголовки, методы\n4. Что такое порталы в реакте\n5. Контекст\n6. Куки\n7. web component и из чего состоит. Какие технологии используются\n8. Что такое Прототип\n9. Solid\n10. Set,Map и их младшие братья\nРассказывал максимально подробно, по этому могл...",
        "full_content": "2025-06-27 15:27:06\n Daniil Daniil -> 2071074234:\nКомпания РВ-системс\n1 этап, созвон с hr\n\nВначале спрашивает и уточняет по резюме(подробно по крайнему месту работы)\nДальше мини тех скрининг:\n1. Типы данных\n2. Замыкание\n3. Что такое http, из чего состоит, заголовки, методы\n4. Что такое порталы в реакте\n5. Контекст\n6. Куки\n7. web component и из чего состоит. Какие технологии используются\n8. Что такое Прототип\n9. Solid\n10. Set,Map и их младшие братья\nРассказывал максимально подробно, по этому могла скипнуть некоторые вопросы, так что лучше как можно подробнее рассказывать"
      }
    ]
  },
  {
    "company": "Московский Аэропорт Домодедово",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-29 13:09:54",
        "content": "2024-10-29 13:09:54\n Гасим Мурасов -> 2071074234:\nКомпания: Московский аэропорт Домодедово\nЗП: макс 170к по вакансии\nВакансия: https://hh.ru/vacancy/108795479?hhtmFrom=resume\nИз вопросов:\nспрашивал про опыт и расскажи о себе\nкак попал в ИТ\nЗадача: написать функцию, возвращающую случайное число и симулировать запрос.\nвот код: https://interview.tbank.ru/link/nvzDnNbkn5jK/result",
        "full_content": "2024-10-29 13:09:54\n Гасим Мурасов -> 2071074234:\nКомпания: Московский аэропорт Домодедово\nЗП: макс 170к по вакансии\nВакансия: https://hh.ru/vacancy/108795479?hhtmFrom=resume\nИз вопросов:\nспрашивал про опыт и расскажи о себе\nкак попал в ИТ\nЗадача: написать функцию, возвращающую случайное число и симулировать запрос.\nвот код: https://interview.tbank.ru/link/nvzDnNbkn5jK/result"
      }
    ]
  },
  {
    "company": "Рсхб - Отд.Корп.Аналитики",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-19 11:02:46",
        "content": "2024-06-19 11:02:46\n Tonidevs -> 2071074234:\nРСХБ - отд.корп.аналитики\n— вакансия сами написали\n— ЗП: до 300 думаю, вилку не озвучили\n— успех: чуть душно было в конце, ну так норм по задачам\n\nВОПРОСЫ\n- в основном про опыт и про поболтать, дальше сразу LC\n\nЗАДАЧИ\n- что будет в консоли\nvar a = 1;\nvar b = 1;\nvar c = '1';\nvar d = 1.0;\nvar f = 1.0000000000000001;\n\nconsole.log(a == b);\nconsole.log(a == c);\nconsole.log(a === c);\nconsole.log(a == d);\nconsole.log(a === d);\nconsole.log(a == f);\n\n~~~~~~~~~...",
        "full_content": "2024-06-19 11:02:46\n Tonidevs -> 2071074234:\nРСХБ - отд.корп.аналитики\n— вакансия сами написали\n— ЗП: до 300 думаю, вилку не озвучили\n— успех: чуть душно было в конце, ну так норм по задачам\n\nВОПРОСЫ\n- в основном про опыт и про поболтать, дальше сразу LC\n\nЗАДАЧИ\n- что будет в консоли\nvar a = 1;\nvar b = 1;\nvar c = '1';\nvar d = 1.0;\nvar f = 1.0000000000000001;\n\nconsole.log(a == b);\nconsole.log(a == c);\nconsole.log(a === c);\nconsole.log(a == d);\nconsole.log(a === d);\nconsole.log(a == f);\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nvar a = {k: 0};\nvar b = {k: 0};\nconsole.log(a == b);\nconsole.log(a === b);\n- исправь функцию чтобы было хей арнольд\nconst fn = (person) => {\n  if (person === { name: 'amy' }) {\n    return 'hey amy';\n  }\n  return 'hey arnold';\n};\n\nfn({ name: 'amy' });\n- реши задачу\nКак задать параметр, пропустив предыдущий необязательный\n\nfunction foo(a: string, b: string = 'b', c: string = 'c') { ... }\n\nКак оставить 2-й параметр со значением по умолчанию, а для первого и третьего задать свои значения?\n\nfoo('undefined, 'b', 'c')\n\n- что будет в консоли и почему\nconst _obj = {\n  name: \"Petr\",\n  sayHi: function() {\n    alert(`Hi ${this.name}`);\n  }\n}\n\nfunction stringify(obj) {\n  return JSON.stringify(obj);\n}\n\nfunction parse(str) {\n  return JSON.parse(str);\n}\n\nparse(stringify(_obj)).sayHi();\n\n- как будет работать этот код, каждый \nEvent loop\n// 1\nwhile (1) {}\n\n// 2\nfunction fn() {\n  setTimeout(fn);\n}\nfn();\n\n// 3\nfunction fn() {\n  return Promise.resolve()\n    .then(fn);\n}\nfn();\n\n- накодить компонент Count\n+-----------------------+\n| count: 1              | <- текст \n| +--------------+      |\n| |Update counter|      | <- кнопка\n| +--------------+      |\n|                       |\n+-----------------------+\nобщий цвет фона - синий\nцвет кнопки красный\nзадача со звездочкой - цвет текста на кнопке меняется при нажатии\n\nexport default function App() {\n    const [count, setCount] = useState(0)\n    const [isTextColorChanged, setIsTextColorChanged] = useState(false)\n    \n    const updateCounter = () => {\n        setCount(count + 1)\n        setIsTextColorChanged(!isTextColorChanged)\n    }\n    \n    return (\n        <div style={{backgroundColor:\"blue\"}}>\n        <div>count {count}</div>\n        <button\n        onClick={updateCounter}\n        style={{backgroundColor: 'red', color: isTextColorChanged ? 'black' : 'white'}}\n        >\n            upd\n        </button>\n        </div>\n        )\n}"
      }
    ]
  },
  {
    "company": "АФЛТ Систем",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-07 08:39:41",
        "content": "2025-07-07 08:39:41\n Даниил -> 2071074234:\nАФЛТ СИСТЕМ\nЗП от 230к \nЧто происходит когда вводится url в строку браузера \nЧто такое event-loop\nчто такое this\nкак внутри DOM ведет себя this, на что ссылается \nРассказать про утечку памяти\nразница между SSR, SSG, ISR\nРассказать про SEO, оптимизация, как работает поисковой робот\nЧто такое рекурсия\n  Задача 1\n  \nconst sumOfSquares = (arr) => {\n    return reduce(el, acc => {\n  return el * el + acc\n}, 0, arr)\n}\n  Задача 2 -реализовать класс Subscription\n...",
        "full_content": "2025-07-07 08:39:41\n Даниил -> 2071074234:\nАФЛТ СИСТЕМ\nЗП от 230к \nЧто происходит когда вводится url в строку браузера \nЧто такое event-loop\nчто такое this\nкак внутри DOM ведет себя this, на что ссылается \nРассказать про утечку памяти\nразница между SSR, SSG, ISR\nРассказать про SEO, оптимизация, как работает поисковой робот\nЧто такое рекурсия\n  Задача 1\n  \nconst sumOfSquares = (arr) => {\n    return reduce(el, acc => {\n  return el * el + acc\n}, 0, arr)\n}\n  Задача 2 -реализовать класс Subscription\n    \ntype Subscriber<T> = (value: T) => void;\n\nclass Subscription<T> {\n  private subscribers: Set<Subscriber<T>> = new Set();\n\n  // Добавить подписчика\n  subscribe(callback: Subscriber<T>): void {\n    this.subscribers.add(callback);\n  }\n\n  // Удалить подписчика\n  unsubscribe(callback: Subscriber<T>): void {\n    this.subscribers.delete(callback);\n  }\n\n  // Вызвать всех подписчиков с новым значением\n  next(value: T): void {\n    for (const subscriber of this.subscribers) {\n      subscriber(value);\n    }\n  }\nЗадача 3\nРеализовать классовый компонент - https://stackblitz.com/edit/vitejs-vite-9m23ea5w?file=src%2Fcontainers%2Fuser-container%2Findex.tsx,src%2Fcomponents%2Fempty%2Fstyles.module.css,src%2Fcomponents%2Fempty%2Findex.tsx,src%2Fcontainers%2Fuser-container%2Fstyles.module.css"
      }
    ]
  },
  {
    "company": "Dinord",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-01-24 14:30:51",
        "content": "2024-01-24 14:30:51\n Mr 🐈 -> 2071074234:\nНазвание компании: Dinord\nЗП: до 200к\n\nПроцесс:\nБез камер, теория по базе (JS/TS/React/ эвентлуп) \n\nзадача \nна консоль лог промисы сеттаймауты\n\nзадача\nнужно получить с из a и b\n\nconst a = [{id:1, color: red}]\nconst b = [{id:1, size: 32}]\n\nconst c = [{id:1, color: red, size: 32}]\n\nрешение: const c = a.map(itemA => {\n    const itemB = b.find(itemB => itemB.id === itemA.id);\n    return {...itemA, ...itemB};\n});",
        "full_content": "2024-01-24 14:30:51\n Mr 🐈 -> 2071074234:\nНазвание компании: Dinord\nЗП: до 200к\n\nПроцесс:\nБез камер, теория по базе (JS/TS/React/ эвентлуп) \n\nзадача \nна консоль лог промисы сеттаймауты\n\nзадача\nнужно получить с из a и b\n\nconst a = [{id:1, color: red}]\nconst b = [{id:1, size: 32}]\n\nconst c = [{id:1, color: red, size: 32}]\n\nрешение: const c = a.map(itemA => {\n    const itemB = b.find(itemB => itemB.id === itemA.id);\n    return {...itemA, ...itemB};\n});"
      }
    ]
  },
  {
    "company": "Аласкар",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-26 19:36:32",
        "content": "2024-06-26 19:36:32\n Руслан -> 2071074234:\n— Аласкар технологии\n— Ссылка: https://hh.ru/vacancy/102308591\n— ЗП: 150\n— Задачи:\n/**\n  Есть массив операций.\n  Необходимо операции отсортировать по дате и сгруппировать их по году, а в качестве \n  значений представить массивы c датами в формате MM-DD.\n  Пример результата:\n  result = {\n    \"2017\": [\n      \"07-31\",\n      \"08-22\"\n    ],\n    \"2018\": [\n      \"01-01\"\n      \"02-22\"\n    ]\n  }\n*/\n\nconst operations = [\n    { \"date\": \"2017-07-31\", \"amount\": \"542...",
        "full_content": "2024-06-26 19:36:32\n Руслан -> 2071074234:\n— Аласкар технологии\n— Ссылка: https://hh.ru/vacancy/102308591\n— ЗП: 150\n— Задачи:\n/**\n  Есть массив операций.\n  Необходимо операции отсортировать по дате и сгруппировать их по году, а в качестве \n  значений представить массивы c датами в формате MM-DD.\n  Пример результата:\n  result = {\n    \"2017\": [\n      \"07-31\",\n      \"08-22\"\n    ],\n    \"2018\": [\n      \"01-01\"\n      \"02-22\"\n    ]\n  }\n*/\n\nconst operations = [\n    { \"date\": \"2017-07-31\", \"amount\": \"5422\" },\n    { \"date\": \"2017-06-30\", \"amount\": \"5220\" },\n    { \"date\": \"2017-05-31\", \"amount\": \"5365\" },\n    { \"date\": \"2017-08-31\", \"amount\": \"5451\" },\n    { \"date\": \"2017-09-30\", \"amount\": \"5303\" },\n    { \"date\": \"2018-03-31\", \"amount\": \"5654\" },\n    { \"date\": \"2017-10-31\", \"amount\": \"5509\" },\n    { \"date\": \"2017-12-31\", \"amount\": \"5567\" },\n    { \"date\": \"2018-01-31\", \"amount\": \"5597\" },\n    { \"date\": \"2017-11-30\", \"amount\": \"5359\" },\n    { \"date\": \"2018-02-28\", \"amount\": \"5082\" },\n    { \"date\": \"2018-04-14\", \"amount\": \"2567\" }\n];\n\nfunction sortOperations(operations) {}\n/**\nНапишите функцию, которая найдет все наборы анаграмм в строке. \nАнаграммы - слова, составленные из одного и того же набора букв (рост-сорт-трос)\n*/\n\nconst str = 'адрес карп кума куст мир мука парк рим среда стук рост сорт трос';\n\nfunction getAnagrams(str) {\n  const words = str.split(' ');\n  const anagrams = {};\n  words.forEach(word => {\n    const sortedWord = word.split('').sort().join('');\n    if(!anagrams[sortedWord]) {\n      anagrams[sortedWord] = []\n    }\n    anagrams[sortedWord].push(word)\n  })\n  \n  return Object.values(anagrams)\n}\nВопросы:\n1. Отличие proto - prototype\n2. Как используется super в классах\n3. Отличие useCallback от useMemo\n4. Event loop\n5. Случаи использования кастомных дженериков в проектах\n6. Call, bind, apply\n7. Что такое контекст"
      }
    ]
  },
  {
    "company": "Stream Telecom",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-03-20 13:52:13",
        "content": "2024-03-20 13:52:13\n 5429820319 -> 2071074234:\nНазвание компании: Stream Telecom \nСсылка на вакансию: hr сама написала\nЗП: 160К \nЗадачи: была задача на Палиндром, далее сделать свой Pick и Omit, потом спросили про сложность алгоритмов, было немого базовых вопросов по JS, на все про все меньше часа\nУспех собеса: ❌, сказали что нашли дешевле\n\nСобес был перед 8 марта, ходил ради практики",
        "full_content": "2024-03-20 13:52:13\n 5429820319 -> 2071074234:\nНазвание компании: Stream Telecom \nСсылка на вакансию: hr сама написала\nЗП: 160К \nЗадачи: была задача на Палиндром, далее сделать свой Pick и Omit, потом спросили про сложность алгоритмов, было немого базовых вопросов по JS, на все про все меньше часа\nУспех собеса: ❌, сказали что нашли дешевле\n\nСобес был перед 8 марта, ходил ради практики"
      }
    ]
  },
  {
    "company": "Lady & Gentleman City",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-26 11:11:21",
        "content": "2024-11-26 11:11:21\n Артем -> 2071074234:\nКомпания: lady & gentleman CITY\nВопросы:\n Спросили про опыт\nв массиве ищем элемент по id какая сложность алгоритма(n(1))\nЗадачи:\nПеревернуть строку но не буквы\nfunction reverseWords(sentence) {\n    // Разделяем предложение на слова\n    let words = sentence.split(' ');\n    // Разворачиваем массив слов\n    let reversedWords = words.reverse();\n    // Объединяем слова обратно в строку\n    let reversedSentence = reversedWords.join(' ');\n    return reversedSen...",
        "full_content": "2024-11-26 11:11:21\n Артем -> 2071074234:\nКомпания: lady & gentleman CITY\nВопросы:\n Спросили про опыт\nв массиве ищем элемент по id какая сложность алгоритма(n(1))\nЗадачи:\nПеревернуть строку но не буквы\nfunction reverseWords(sentence) {\n    // Разделяем предложение на слова\n    let words = sentence.split(' ');\n    // Разворачиваем массив слов\n    let reversedWords = words.reverse();\n    // Объединяем слова обратно в строку\n    let reversedSentence = reversedWords.join(' ');\n    return reversedSentence;\n}\nесть upperCase нужно разделить на пробел если заглавная буква \nfunction splitCamelCase(word) {\n    // Находим индекс первой заглавной буквы\n    let index = -1;\n    for (let i = 0; i < word.length; i++) {\n        if (word[i] === word[i].toUpperCase()) {\n            index = i;\n            break;\n        }\n    }\n\n    // Если заглавная буква найдена, разделяем слово и вставляем пробел\n    if (index !== -1) {\n        return word.slice(0, index) + ' ' + word.slice(index);\n    }\n\n    // Если заглавная буква не найдена, возвращаем исходное слово\n    return word;\n}\nдобавить этот метод в прототип стринг\nString.prototype.splitCamelCase = function() {\n    return this.split('').reduce((acc, char, index) => {\n        if (char === char.toUpperCase() && index > 0) {\n            return acc + ' ' + char;\n        }\n        return acc + char;\n    }, '');\n};\n\nlet sss = \"camelCasingNotation\";\n\n// Выводим результат на экран\nconsole.log(sss.splitCamelCase()); // \"camel Casing Notation\"\nПравильно оттепезировать функцию \nimport React from 'react';\n\n// Определяем обобщенный интерфейс Props\ninterface Props<T> {\n    optionList: T[];\n    onSelect: (option: T) => void;\n}\n\n// Определяем тип City\ntype City = {\n    name: string;\n    coordinates: [number, number];\n};\n\n// Пример массива городов\nconst cities: City[] = [{ coordinates: [123456, 654321], name: \"Moscow\" }];\n\n// Обновляем компонент Select, чтобы он принимал обобщенные пропсы\nfunction Select<T>({ optionList, onSelect }: Props<T>) {\n    return (\n        <select onChange={(e) => onSelect(optionList[e.target.selectedIndex])}>\n            {optionList.map((option, index) => (\n                <option key={index} value={index}>\n                    {(option as any).name} {/* Предполагаем, что у всех опций есть свойство name */}\n                </option>\n            ))}\n        </select>\n    );\n}\n\n// Используем компонент Select с типизированным аргументом функции onSelect\nconst App = () => {\n    const handleSelect = (value: City) => {\n        console.log(value);\n    };\n\n    return (\n        <Select<City> optionList={cities} onSelect={handleSelect} />\n    );\n};\n\nexport default App;"
      }
    ]
  },
  {
    "company": "Катюша Принт",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-02 14:53:58",
        "content": "2024-10-02 14:53:58\n Михаил -> 2071074234:\nКатюша Принт\nвакансия hh.ru/vacancy/107700543\nзп 200к\nпосле 01:08 можно не смотреть, т.к. до конца чисто про компанию рассказывает",
        "full_content": "2024-10-02 14:53:58\n Михаил -> 2071074234:\nКатюша Принт\nвакансия hh.ru/vacancy/107700543\nзп 200к\nпосле 01:08 можно не смотреть, т.к. до конца чисто про компанию рассказывает"
      }
    ]
  },
  {
    "company": "Divante",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-06 12:40:28",
        "content": "2024-11-06 12:40:28\n Artem D -> 2071074234:\nКомпания: Divante\nЗП: Не обсуждали\nВакансия: написали в линкед напрямую\nФормат удобен тем, что можно в чатгпт скормить ответы, но из-за таймера на ответ очень нервно. Надеюсь они не отслеживали нажатие ПКМ :D",
        "full_content": "2024-11-06 12:40:28\n Artem D -> 2071074234:\nКомпания: Divante\nЗП: Не обсуждали\nВакансия: написали в линкед напрямую\nФормат удобен тем, что можно в чатгпт скормить ответы, но из-за таймера на ответ очень нервно. Надеюсь они не отслеживали нажатие ПКМ :D"
      }
    ]
  },
  {
    "company": "Aladdin",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-27 17:37:22",
        "content": "2024-11-27 17:37:22\n Daniil -> 2071074234:\nКомпания Aladdin\nВакансия https://hh.ru/vacancy/109907412?hhtmFrom=negotiation_list\nЗП запрашивал 280\nВопросы: \n- Про опыт, спрашивал по конкретной реализации фич на прошлых проектах\n-  Про виртуализацию списков\n- Как можно вызвать ререндер child из parent не прокидывая пропсы в сhild\n- Спрашивал о работе веб-сервера Nginx, что это и зачем вообще надо\n- TS : отличия типов от интерфейса\n- Utility types\n- Методы массивов\n- useEffect , useLayoutEffect\n-  д...",
        "full_content": "2024-11-27 17:37:22\n Daniil -> 2071074234:\nКомпания Aladdin\nВакансия https://hh.ru/vacancy/109907412?hhtmFrom=negotiation_list\nЗП запрашивал 280\nВопросы: \n- Про опыт, спрашивал по конкретной реализации фич на прошлых проектах\n-  Про виртуализацию списков\n- Как можно вызвать ререндер child из parent не прокидывая пропсы в сhild\n- Спрашивал о работе веб-сервера Nginx, что это и зачем вообще надо\n- TS : отличия типов от интерфейса\n- Utility types\n- Методы массивов\n- useEffect , useLayoutEffect\n-  дженерики + спросил можно ли указать дженерик в JSX при рендере компонента. Ответ: можно запись <Child<T> data ={T}/> \n-  useRef, forwardRef + вопрос можно ли реф прокинуть в дочерний компонент просто как пропс. Ответ: можно, но реакт выдаст ошибку что реф пытаетесь прокинуть без forward\nЗадачи: \n1) Написать функцию как каррированную которая аргументами принимает числа, после всех вызовов идет пустой вызов без аргументов, который свидетельствует об окончании работы фк. Если функция сразу вызвана без аргументов то вернет 0. \n2) Задача на EventLoop"
      }
    ]
  },
  {
    "company": "Контур",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-04-04 13:03:08",
        "content": "2024-04-04 13:03:08\n Roman -> 2071074234:\n- Название компании: Контур\n- Ссылка на вакансию: HR сама написала (откликался на портале Контура)\n- ЗП: просил 250-300 тысяч на руки\n- Задачи: Про опыт + какие были задачи + процессы + достижения + дальше техническая часть\nПервая — чтение кода. Это блок про теоретические знания JS. Показывают код и спрашивают, что будет выведено в консольке. \nВторая — написание кода. Это задачка на алгоритмы на JS.\n- Успех собеса: ❌\nФидбэк о собесе: \nПривет! Пришла к те...",
        "full_content": "2024-04-04 13:03:08\n Roman -> 2071074234:\n- Название компании: Контур\n- Ссылка на вакансию: HR сама написала (откликался на портале Контура)\n- ЗП: просил 250-300 тысяч на руки\n- Задачи: Про опыт + какие были задачи + процессы + достижения + дальше техническая часть\nПервая — чтение кода. Это блок про теоретические знания JS. Показывают код и спрашивают, что будет выведено в консольке. \nВторая — написание кода. Это задачка на алгоритмы на JS.\n- Успех собеса: ❌\nФидбэк о собесе: \nПривет! Пришла к тебе с обратной связью после технического интервью.\nХочу сказать тебе спасибо, что уделил нам время.\n\nУ тебя неплохие навыки верстки: ты отличаешь див от спана и маргин от падинга, есть опыт адаптивной верстки на гридах, флексах и медиа запросах. Японский флаг получилось сверстать только флексами и падингами, других вариантов придумать не получилось.\n\nБлок на чтение кода шел долго и тяжело, были нюансы с var, function() {} и со склейкой. При этом, на вопросы по теории ты отвечал правильно.\n\nТы сразу понял, как решить задачу на написание кода. Но долго не получалось придумать, как решать через одномерный массив. Так как времени оставалось немного, ты предложил решить задачу через двумерный массив. С небольшими подсказками Данилы удалось придумать алгоритм. Через 30 минут после встречи было готовое решение. \n\nВ рамках Контура твои тех. скиллы укладываются в грейд Middle. К сожалению, мы не готовы пригласить тебя на следующий этап, так как сейчас команды находится в поиске кандидатов от грейда Middle+ и выше.\nСпасибо тебе еще раз за диалог, желаю удачи в поиске комфортного места работы!\n\n\nТехническая часть:\nВопросы по верстке:\n1. Отличие div и span\n2. Отличие margin и padding\n3. Существуют ли отрицательные паддинги?\n4. Работал ли с семантической версткой?\n5. Знаком ли с адаптивной версткой?\n6. Накидай вариантов, как можно сверстать японский флаг\n7. Накидать варианты создания круга, можно даже самые безумные\n\nЗадачи по чтению кода:\n\n1. \n// Что будет выведено в консоль\n\nvar values = [1, 2, 5, 10];\nvar result = 0;\n\nif (values.every(item => item > 0)) {\n    result += values.filter(item => item > 5).length\n}\n\nif (values.some(item => item > 5)) {\n    values.forEach((item, index) => {\n        if (index > 1 && index < 3){\n            result += item\n        }\n    })\n}\n\nconsole.log(result)\n\n\n2.\n// Что будет выведено в консоль\n\nvar currentCity = \"Екатеринбург\";\n\nfunction sayWelcome() {\n    console.log(\"Welcome to\" + currentCity);\n}\n\nsetTimeout(function(){\n    var currentCity = \"Москва\";\n    sayWelcome()\n}, 1000)\n\n\n3.\n// Что будет выведено в консоль\n\nlet clickCount = 0;\ndocument.addEventListener(\"click\", function() {\n    clickCount++;\n    console.log(\"clicked\", clickCount);\n});\n\nwhile (clickCount !== 5) {\n    console.log(\"wait\");\n}\n\nconsole.log(\"5 clicks!\")\n\n\n4.\n// Что будет выведено в консоль\n\nvar whatIsTruthy = [1, 'dfd', \"0\", {}, '', function() {}, NaN, true, false, 0, [], Infinity, null, undefined];\n\nconsole.log(whatIsTruthy.filter(item => item).length);\n\n\n5.\n// Что будет выведено в консоль\n\nlet a = 1;\na = 2;\nconsole.log(\"a\", a);\n\nconst b = 1;\nb = 2;\nconsole.log(\"b\", b);\n\n\n6.\n// Что будет выведено в консоль\n\nfunction doAsync(x) {\n    return new Promise((resolve, reject) => {\n        if (x) {\n            resolve(2);\n        } else {\n            reject(1)\n        }\n    });\n}\nlet a = 0\n\ndoAsync(false)\n    .then(x => a = x)\n    .then(e => a = e)\n\nconsole.log(a)\n\n\n7.\n// Что будет выведено в консоль\n\nfunction showFullName(firstName, lastName, ...rest) {\n    console.log(\n        `${firstName} ${lastName}${rest.length ? ` - ${rest}` : \"\"}`\n    );\n}\n\nshowFullName(\"Екатерина\", \"II\", \"императрица\", \"Всероссийская\");"
      }
    ]
  },
  {
    "company": "Matrix Systems",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-08-04 09:51:36",
        "content": "2024-08-04 09:51:36\n Максим -> 2071074234:\nMatrix Systems \nВакансия: https://hh.ru/vacancy/102492804?hhtmFrom=resume\nФидбек: настоящий момент не готов выйти с предложением о сотрудничестве,так как есть разные подходы в решении задачи.",
        "full_content": "2024-08-04 09:51:36\n Максим -> 2071074234:\nMatrix Systems \nВакансия: https://hh.ru/vacancy/102492804?hhtmFrom=resume\nФидбек: настоящий момент не готов выйти с предложением о сотрудничестве,так как есть разные подходы в решении задачи."
      }
    ]
  },
  {
    "company": "Facct",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-16 07:16:30",
        "content": "2025-03-16 07:16:30\n Кирилл -> 2071074234:\nКомпания: FACCT \nВакансия: hr написала\nЗП: 250+\n\n1. Виды хранилищ и их отличия (localStorage, sessionStorage, cookie, IndexedDB)\n2. Как удалить cookie? \n3. Как не блокировать рендер при тяжелых операциях? \n4. Виды веб-воркеров и их отличия, ограничения, недостатки\n5.  Почему у веб-воркеров нет доступа к DOM\n6. Как веб-воркеры общаются с приложением? Какие есть ограничения на передачу данных?\n7. Как общаться между 2 приложениями на одной странице без сет...",
        "full_content": "2025-03-16 07:16:30\n Кирилл -> 2071074234:\nКомпания: FACCT \nВакансия: hr написала\nЗП: 250+\n\n1. Виды хранилищ и их отличия (localStorage, sessionStorage, cookie, IndexedDB)\n2. Как удалить cookie? \n3. Как не блокировать рендер при тяжелых операциях? \n4. Виды веб-воркеров и их отличия, ограничения, недостатки\n5.  Почему у веб-воркеров нет доступа к DOM\n6. Как веб-воркеры общаются с приложением? Какие есть ограничения на передачу данных?\n7. Как общаться между 2 приложениями на одной странице без сети? \n8. Как отслеживать изменения в обновляющемся списке DOM? \n9. Расскажи как работает и что возвращают MutationObserver и setInterval\n10. Есть ли гарантия, что setInterval выполнится ровно через delay?\n11. Как часто выполняется requestAnimationFrame? requestAnimationFrame vs setInterval\n12. Расскажи про requestIdleCallback. Будет ли вызываться  requestIdleCallback, если браузер не будет простаивать?\n13. Статические поля класса и чем отличаются от обычных, привести примеры\n14. Как запретить изменения объекта в JS и TS\n15. Как работает Object.freeze под капотом? Как без использования Object.freeze можно запретить изменения объекта в JS?\n16. Какие бывают дескрипторы?\n17. Что такое Proxy?\n18. Как и кем выполняется JS в браузере? \n19. Сборщик мусора как работает\n20. У нас есть рекурсивная функция, будет ли она удалена сборщиком мусора, если внутри этой функции она вызывает саму себя? \n21. Какую проблему решают стейт менеджеры? Зачем нам стейт-менеджеры если мы можем использовать контекст в реакте?\n22. Для чего отделять логику от UI?\n23. Почему нам удобнее тестировать компонент, когда мы отделили логику от UI?\n24.  Как реализовано кеширование в RTK Query?\n25.  Как мы можем сами реализовать кеширование без использования RTK Query?\n26. Чем плох подход, когда мы храним результаты выполнения функции в кеше по ключам? Ситуация, ты выводишь на странице список элементов. Вдруг кто-то из команды разработчиков решил инвалидировать у себя на странице такой же запрос по твоему ключу и у тебя всё сломалось. Насколько было бы удобнее отследить связь, почему это произошло?\n\nЗадача как из поста https://t.me/c/2071074234/489/112616 , но еще попросили прикрутить типизацию\n\n\ntype EventType = \"event_one\" | \"event_two\";\ntype EventCallback = () => void;\ntype EventsMap = {\n  [key in EventType]: EventCallback[];\n};\n\n\nclass Dispatcher {\n    \n    constructor() {\n        this.event = {};\n    }\n  \n    on(event: EventType, callback: EventCallback): void {\n      if (!this.events[event]) {\n        this.events[event] = [];\n      }\n      this.events[event]!.push(callback);\n    }\n  \n    trigger(event: EventType): void {\n      this.events[event]?.forEach((cb) => cb());\n    }\n  \n    off(event: EventType, callback: EventCallback): void {\n      if (this.events[event]) {\n        this.events[event] = this.events[event]!.filter((cb) => cb !== callback);\n      }\n    }\n  }"
      }
    ]
  },
  {
    "company": "Fractall Design",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-26 11:38:36",
        "content": "2025-06-26 11:38:36\n Mark Nikonorov ⚛ -> 2071074234:\nКомпания Fractall Design\n1. Задача отрефакторить конфиг:\nimport { config } from './config';\nconst PORT = Number(process.env.PORT) || 3200;\n\nESBuild.context({\n  ...config\n}).then(ctx => {\n  ctx.serve({\n    servedir: config.outdir,\n    port: PORT\n  })\n  .then(({host, port}) => console.log(`Server started on http://localhost:` + port))\n  .catch(err => console.log(err))\n});\nРешение: \nimport { config } from './config';\nconst PORT = Number(process.e...",
        "full_content": "2025-06-26 11:38:36\n Mark Nikonorov ⚛ -> 2071074234:\nКомпания Fractall Design\n1. Задача отрефакторить конфиг:\nimport { config } from './config';\nconst PORT = Number(process.env.PORT) || 3200;\n\nESBuild.context({\n  ...config\n}).then(ctx => {\n  ctx.serve({\n    servedir: config.outdir,\n    port: PORT\n  })\n  .then(({host, port}) => console.log(`Server started on http://localhost:` + port))\n  .catch(err => console.log(err))\n});\nРешение: \nimport { config } from './config';\nconst PORT = Number(process.env.PORT) || 3200;\n\nESBuild.context({\n  ...config\n}).then(ctx => {\n  return ctx.serve({\n    servedir: config.outdir,\n    port: PORT\n  });\n })\n.then(({port}) => console.log(`Server started on http://localhost: ${port}`))\n.catch(console.log)\n2. Задача оптимизировать компонент:\nexport function InputSection() {\n  const [ text, setText ] = useState('');\n\n  const onClick = () => {\n    console.log('message', text);\n  }\n\n  // Обработчик onChange в TextField имеет сигнатуру (value: text) => void\n  return (\n    <>\n      <Header>Введите текст</Header>\n      <TextField value={text} onChange={setText} />\n      <SendButton onClick={onClick} />\n    </>\n  );\n}\nРешение: \nexport function InputSection() {\n  const [ text, setText ] = useState('');\n\n    const refText = useRef('')\n    refText.current = text\n  const onClick = useCallback(() => {\n    console.log('message', refText.current);\n  }, [])\n\n  // Обработчик onChange в TextField имеет сигнатуру `(value: text) => void`\n  return (\n    <>\n      <Header>Введите текст</Header>\n      <TextField value={text} onChange={setText} />\n      <SendButton onClick={onClick} />\n    </>\n  );\n}\n3. Задача отрефакторить компонент:\nexport function Component(props: { withCounter?: boolean }) {\n  function withCounter() {\n    const [ counter, setCounter ] = useState(0);\n    return (\n      <div onClick={() => setCounter(counter + 1)}>Count: {counter}</div>\n    );\n  }\n\n  const ref = useRef();\n  useEffect(() => {\n    ref.current.addEventListener('click', () => { alert('click'); });\n  }, []);\n\n  return (\n    <>\n      { props.withCounter && withCounter() }\n      <div ref={ref}>click me</div>\n    </>\n  );\n}\nРешение:\nfunction WithCounter() {\n    const [ counter, setCounter ] = useState(0);\n    return (\n      <div onClick={() => setCounter(counter + 1)}>Count: {counter}</div>\n    );\n}\n  \n  interface Component { withCounter?: boolean }\nexport function Component({withCounter}: Component) {\n  return (\n    <>\n      { withCounter && <WithCounter/> }\n      <div onClick={() => { alert('click'); }}>click me</div>\n    </>\n  );\n}\n\n4. Задача на типы\nСкрин условия выше\nРешение: \nfunction Factory<T extends (props: any) => void>(component: T, props: Parameters<T>[0]) {\n  component(props);\n}\n\nfunction ComponentA(props: { value: number }) {\n}\n\nfunction ComponentB(props: string) {\n}\n\nFactory(ComponentA, { value: 22 }); // OK\nFactory(ComponentB, '12'); // OK\nFactory(ComponentA, '22'); // В этой строке должна быть ошибка\nFactory(ComponentA, { value: 22, next: 12 }); // В этой строке должна быть ошибка\nFactory(ComponentB, 12); // В этой строке должна быть ошибка\nFactory(ComponentA, 12); // В этой строке должна быть ошибка"
      }
    ]
  },
  {
    "company": "Molecula",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-28 11:20:10",
        "content": "2024-07-28 11:20:10\n Vladislav -> 2071074234:\n- Molecula\n-ccылка: тг пост вакансии не сохранился\n- зп: 5000$\n- вопросы:\n1) Напиши кастомный hook useState \n\nconst useStateWithCallback = (initialState, callback) => {\n    const [state, setState] = useState(initialState);\n    useEffect(() => callback(state), [state, callback]);\n    return [state, setState];\n};\n\n2) Когда нужно использовать Map , а когда Object.  В чем из разница ?\n\n3) Что выведится в консоль ? \nconst a = {};\nconst b = { key: 'b' };\nc...",
        "full_content": "2024-07-28 11:20:10\n Vladislav -> 2071074234:\n- Molecula\n-ccылка: тг пост вакансии не сохранился\n- зп: 5000$\n- вопросы:\n1) Напиши кастомный hook useState \n\nconst useStateWithCallback = (initialState, callback) => {\n    const [state, setState] = useState(initialState);\n    useEffect(() => callback(state), [state, callback]);\n    return [state, setState];\n};\n\n2) Когда нужно использовать Map , а когда Object.  В чем из разница ?\n\n3) Что выведится в консоль ? \nconst a = {};\nconst b = { key: 'b' };\nconst c = { key: 'c' };\na[b] = 'apple';\na[c] = 'banana';\nconsole.log('Result:', a[b]);\n\n4) Что вернет эта странная функция ? У нее есть два бага, какие они ? (функция должна возвращать разделения между цифрами, на каждые 3)\n\nconst foo = (bar: string, sep: string) => {\n    let acc = '';\n    let i = bar.length - 1;\n    while (i >= 0) {\n        for (let j = 0; j < 3; j += 1) {\n            acc = bar[i - j] + acc;\n        }\n        i -= 3;\n        acc = sep + acc;\n    }\n    return acc;\n};\n\nfoo(\"123456789\", \"_\");\n\n5) В одной комнате три лампочки , в другой три включателя. Находясь в комнате с тремя выключателями можно перейти в комнату с лампочками только один раз. Как перейти в комнату с лампочками и узнать какой выключатель был к какой лампочке ?\n\n6) Если бы пришлось убить бабушку ты бы это сделал бензопилой или лопатой ?"
      }
    ]
  },
  {
    "company": "Unitarius",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-15 19:21:31",
        "content": "2025-01-15 19:21:31\n Сергей -> 2071074234:\n- Unitarius\n- Вакансия: https://ekaterinburg.hh.ru/vacancy/111857661\n- ЗП: с hr сказал от 250к\n- Вопросы:\n- Про опыт работы довольно подробно, с чем работал, какой стек, команда, работал ли с микрофронтами, как обучаюсь\n- Ссылочные типы данных, какие особенности\n- Object.freeze\n- Стрелочные функции, какие отличия от обычных\n- Про вебсокеты\n- Современные подходы к верстке\n- PostMessage\n- Жизненные циклы компонента\n- Какой из циклов нет в функциональном р...",
        "full_content": "2025-01-15 19:21:31\n Сергей -> 2071074234:\n- Unitarius\n- Вакансия: https://ekaterinburg.hh.ru/vacancy/111857661\n- ЗП: с hr сказал от 250к\n- Вопросы:\n- Про опыт работы довольно подробно, с чем работал, какой стек, команда, работал ли с микрофронтами, как обучаюсь\n- Ссылочные типы данных, какие особенности\n- Object.freeze\n- Стрелочные функции, какие отличия от обычных\n- Про вебсокеты\n- Современные подходы к верстке\n- PostMessage\n- Жизненные циклы компонента\n- Какой из циклов нет в функциональном реакте\n- Lazy\n- Способы оптимизации\n- Задачка на что выведется первым(Promise, setTimeout который в промисе)\n- Задача с объектом, нужно удалить все промежуточные объект с типом Group."
      }
    ]
  },
  {
    "company": "Action Tech",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-16 17:18:43",
        "content": "2025-04-16 17:18:43\n Ivan Kulyaev -> 2071074234:\nКомпания: Action tech\nВакансия: на Хабре написали 😑\nЗп: 250-280 на руки \n\nВопросы:\n\n1. Об опыте \n2. Virtual dom\n3. Проп key\n4. Мемоизация в react\n5. Event loop\n6. Что такое fsd, как внедряли его на проект\n7. Виды рендеринга \n8. Минусы / плюсы TS\n9. Generics \n10. Utility types, кастомные утилиты \n11. Как работает браузер \n12. http/https\n\nЗадач не было\n\nРезультат: остановили найм",
        "full_content": "2025-04-16 17:18:43\n Ivan Kulyaev -> 2071074234:\nКомпания: Action tech\nВакансия: на Хабре написали 😑\nЗп: 250-280 на руки \n\nВопросы:\n\n1. Об опыте \n2. Virtual dom\n3. Проп key\n4. Мемоизация в react\n5. Event loop\n6. Что такое fsd, как внедряли его на проект\n7. Виды рендеринга \n8. Минусы / плюсы TS\n9. Generics \n10. Utility types, кастомные утилиты \n11. Как работает браузер \n12. http/https\n\nЗадач не было\n\nРезультат: остановили найм"
      }
    ]
  },
  {
    "company": "Rusiem",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-01 08:01:10",
        "content": "2025-07-01 08:01:10\n Никита -> 2071074234:\nRuSIEM\nHr написала\nЗп от 200\n\nВопросы:\n\nСпрашивал пару вопросов про опыт, тестирование\n\nЗадачи:\n\nЗАДАЧА 1\n\nРеализовать функцию полиндром, он её усложнял 3 раза\n// madam | racecar\nfunction isPalindrome(word) {\n  return word == word.split('').reverse().join('');\n}\n// madam | RaceCar\n// beer\nfunction isPalindrom(word) {\n  let first = 0;\n  let last = word.length - 1;\n\n  while (first < last) {\n    if (word[first].tolowerCase() == word[last].tolowerCase()) {\n...",
        "full_content": "2025-07-01 08:01:10\n Никита -> 2071074234:\nRuSIEM\nHr написала\nЗп от 200\n\nВопросы:\n\nСпрашивал пару вопросов про опыт, тестирование\n\nЗадачи:\n\nЗАДАЧА 1\n\nРеализовать функцию полиндром, он её усложнял 3 раза\n// madam | racecar\nfunction isPalindrome(word) {\n  return word == word.split('').reverse().join('');\n}\n// madam | RaceCar\n// beer\nfunction isPalindrom(word) {\n  let first = 0;\n  let last = word.length - 1;\n\n  while (first < last) {\n    if (word[first].tolowerCase() == word[last].tolowerCase()) {\n      first += 1;\n      last -= 1;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n// madam | ;;;;;;4Rac ecar4\n// beer\n\nfunction isPalindrom(word) {\n\n    let first = 0\n    let last = word.length - 1\n\n    while (first < last){\n        if (!isValid(word[first])){\n            first += 1\n            continue\n        }\n\n        if (!isValid(word[last])){\n            last -= 1\n            continue\n        }\n\n        if (word[first].toLowerCase() == word[last].toLowerCase()){\n            first += 1\n            last -= 1\n        } else {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunction isValid(char){\n    if (/[a-zA-Z0-9]/.test(char)){\n        return true\n    }\n    return false;\n}"
      }
    ]
  },
  {
    "company": "Metatraning",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-09 19:34:47",
        "content": "2025-03-09 19:34:47\n Артем -> 2071074234:\nКомпания: metatraning\n\nВопросы:\nЗамыкание\nнапиши count++ \nрешение: \nfunction CountFunc() {\n    let count = 0;\n    return function() {\n        count++;\n        return count;\n    };\n}\n\nlet s = CountFunc();\nconsole.log(s()); // 1\nconsole.log(s()); // 2\nconsole.log(s()); // 3\n\nlet vs var vs const\nJS - это\neventLoop\nНАписать функция promiseAll\nрешение:\nconst promiseAll = (proms) => {\n  const result = [];\n  let count = 0;\n\n  return new Promise((resolve, reject...",
        "full_content": "2025-03-09 19:34:47\n Артем -> 2071074234:\nКомпания: metatraning\n\nВопросы:\nЗамыкание\nнапиши count++ \nрешение: \nfunction CountFunc() {\n    let count = 0;\n    return function() {\n        count++;\n        return count;\n    };\n}\n\nlet s = CountFunc();\nconsole.log(s()); // 1\nconsole.log(s()); // 2\nconsole.log(s()); // 3\n\nlet vs var vs const\nJS - это\neventLoop\nНАписать функция promiseAll\nрешение:\nconst promiseAll = (proms) => {\n  const result = [];\n  let count = 0;\n\n  return new Promise((resolve, reject) => {\n    proms.forEach((pr, idx) => {\n      pr.then((res) => {\n        result[idx] = res;\n        count += 1;\n        if (count === proms.length) resolve(result);\n      }).catch(reject);\n    });\n  });\n};"
      }
    ]
  },
  {
    "company": "Технократия",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-04 08:40:51",
        "content": "2025-02-04 08:40:51\n Petr Zabrodniy -> 2071074234:\nНазвание компании : Технократия \nСсылка на вакансию : HR сама написала \nЗП : вилка до 350, сказал от 300 \nВопросы : \nБаза по JS, html. CSS, также про особенности PWA, от воркеров до кэширования \nЗадачи :\n\n\n\n// 1 .  В первой задаче реализуется метод findUnique, который находит уникальные элементы массива.\n\nArray.prototype.findUnique = function () {\n  return this.filter((item, _, arr) => arr.filter(el => el === item).length === 1);\n};\n\nconsole.log...",
        "full_content": "2025-02-04 08:40:51\n Petr Zabrodniy -> 2071074234:\nНазвание компании : Технократия \nСсылка на вакансию : HR сама написала \nЗП : вилка до 350, сказал от 300 \nВопросы : \nБаза по JS, html. CSS, также про особенности PWA, от воркеров до кэширования \nЗадачи :\n\n\n\n// 1 .  В первой задаче реализуется метод findUnique, который находит уникальные элементы массива.\n\nArray.prototype.findUnique = function () {\n  return this.filter((item, _, arr) => arr.filter(el => el === item).length === 1);\n};\n\nconsole.log([true, 1, '2', {}, 2, {}, true, 1].findUnique()); // [\"2\", 2, {}, {}]\n\n// 2 . луп\n\n\nconst promise = new Promise((resolve, reject) => {\n  a += 3;\n  console.log(a); \n  resolve(a); \n}).catch(e => {\n  return a;\n});\n\nsetTimeout(() => {\n  console.log(++a);\n});\n\npromise.then(value => {\n  const result = value + 5; \n  console.log(result); \n  return result;\n});\n\nlet a = 1;\nconsole.log(a); \n\n// 1\n// 6\n// 2"
      }
    ]
  },
  {
    "company": "Спросиврача",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-12 09:53:52",
        "content": "2024-06-12 09:53:52\n Roman -> 2071074234:\nНазвание компании: СпросиВрача\nВакансия: hr сам написал, искали разработчика на веб (React, Next.js) и на мобилки (React Native)\nЗП: просил от 300к\nУспех: ❌\nФидбэк:\nПриветствую, Роман\nПолучил ответ от руководителя, на данный момент выбрали финального кандидата на эту должность ждём от него ответа. Спасибо за уделенное время, если ситуация изменится, то вернемся к вашей кандидатуре\n\nЧестно говоря ничего такого, выбрали кандидата из компании конкурента с а...",
        "full_content": "2024-06-12 09:53:52\n Roman -> 2071074234:\nНазвание компании: СпросиВрача\nВакансия: hr сам написал, искали разработчика на веб (React, Next.js) и на мобилки (React Native)\nЗП: просил от 300к\nУспех: ❌\nФидбэк:\nПриветствую, Роман\nПолучил ответ от руководителя, на данный момент выбрали финального кандидата на эту должность ждём от него ответа. Спасибо за уделенное время, если ситуация изменится, то вернемся к вашей кандидатуре\n\nЧестно говоря ничего такого, выбрали кандидата из компании конкурента с аналогичным стекам и задачами и знакомым с продуктом\n\nВопросы:\n1. Перезагрузка функций\n2. Статическая типизация\n3. Дженерики\n4. declare в typescript\n5. Если в useEffect не будет массива зависимостей?\n6. Проблема с контекстом для состояния?\n7. Ключи в реакте\n8. оптимизация в реакте (memo, useCallback, useMemo, виртуализация, lazyLoading и еще какие способы оптимизации)\n9. HOC (memo, forwardRef)\n10. кастомные хуки, писал и для чего?\n11. Next.js - что это и для чего нужен\n12. плюсы Next.js\n13. SSR\n14. как делается роутинг в Next.js?\n15. SSG\n16. Чем лучше и хуже SSR и SSG?\n17. ISR (гибридный подход, сочетающий плюсы SSR и SSG)\n18. Какие есть компоненты в React Native (View, Text, Image, ScrollView, TextInput)\n19. Недостатки React Native\n20. WebSocket\n21. Как обрабатывать ошибки WebSocket\n22. CORS\nЧастично записал, под конец: https://t.me/c/2071074234/485/19503"
      }
    ]
  },
  {
    "company": "Hyperus",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-12-13 07:00:18",
        "content": "2024-12-13 07:00:18\n Egor -> 2071074234:\nHyperus\nВакансия: https://hh.ru/vacancy/108354058?hhtmFrom=negotiation_list\nЗп: просил около 300к\nУспех: дали оффер 315к без учета налога\nЗапись: https://www.youtube.com/watch?v=dAcYYQBoCAs",
        "full_content": "2024-12-13 07:00:18\n Egor -> 2071074234:\nHyperus\nВакансия: https://hh.ru/vacancy/108354058?hhtmFrom=negotiation_list\nЗп: просил около 300к\nУспех: дали оффер 315к без учета налога\nЗапись: https://www.youtube.com/watch?v=dAcYYQBoCAs"
      }
    ]
  },
  {
    "company": "pro-test.Studio",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-29 08:15:56",
        "content": "2024-10-29 08:15:56\n Артем -> 2071074234:\nКомпания: pro-test.Studio\nЗП: 250\nВакансия: -\nВопросы:\nEventLoop\nКак заблокировать страницу\nТипы данных в js\nПодробнее про Symbol \nVar let const\nЧто будет ечли обьявим переменную без var let const\nThis\nРабота prototype\nЧто такое явное наследование\nКлассы\nФункцци для работы с классами\nЧто такое super\nReact смысл\nReact плюсы\nСостояния реакт\nХуки\nTs дженерики",
        "full_content": "2024-10-29 08:15:56\n Артем -> 2071074234:\nКомпания: pro-test.Studio\nЗП: 250\nВакансия: -\nВопросы:\nEventLoop\nКак заблокировать страницу\nТипы данных в js\nПодробнее про Symbol \nVar let const\nЧто будет ечли обьявим переменную без var let const\nThis\nРабота prototype\nЧто такое явное наследование\nКлассы\nФункцци для работы с классами\nЧто такое super\nReact смысл\nReact плюсы\nСостояния реакт\nХуки\nTs дженерики"
      }
    ]
  },
  {
    "company": "Iga Tech",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-01 12:31:03",
        "content": "2024-11-01 12:31:03\n memphis -> 2071074234:\nКомпания: Iga tech\nЗП: 230\nвакансия: https://vlasiha.hh.ru/vacancy/109236243?hhtmFrom=employer_vacancies\nвидео: https://youtu.be/8dk8nC82CSU\nстатус: оффер 🟢",
        "full_content": "2024-11-01 12:31:03\n memphis -> 2071074234:\nКомпания: Iga tech\nЗП: 230\nвакансия: https://vlasiha.hh.ru/vacancy/109236243?hhtmFrom=employer_vacancies\nвидео: https://youtu.be/8dk8nC82CSU\nстатус: оффер 🟢"
      }
    ]
  },
  {
    "company": "Angie",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-22 11:59:08",
        "content": "2024-11-22 11:59:08\n Timofei Syromiatnikov -> 2071074234:\n— Компания: Angie\n— Вакансия: написала hr\n— ЗП: 250-280к\n— Вопросы:\n1) Расскажи про свои сложные задачи\n2) Представь что возникла ошибка на странице в UI например, как бы ты решал эту проблему? Например ошибка в внешней библиотеке, как бы ты решал в этом случае проблему?\n3) Что такое JavaScript? \n4) JS интерпретируемый или компилируемый ЯП?\n5) В чем отличие интерпретируемого ЯП от компилируемого?\n6) Что из последнего читал из новостей ста...",
        "full_content": "2024-11-22 11:59:08\n Timofei Syromiatnikov -> 2071074234:\n— Компания: Angie\n— Вакансия: написала hr\n— ЗП: 250-280к\n— Вопросы:\n1) Расскажи про свои сложные задачи\n2) Представь что возникла ошибка на странице в UI например, как бы ты решал эту проблему? Например ошибка в внешней библиотеке, как бы ты решал в этом случае проблему?\n3) Что такое JavaScript? \n4) JS интерпретируемый или компилируемый ЯП?\n5) В чем отличие интерпретируемого ЯП от компилируемого?\n6) Что из последнего читал из новостей статей о технологиях, что возможно использовал в работе\n7) Что такое ECMAScript?\n8) Что такое CORS? Как настроить CORS?\n9) Как работает JS в браузере? С помощью чего он работает там?\n10) Как работает EventLoop?\n11) Что такое стек вызовов и как он работает?\n12) В чем отличие var, let, const?\n13) Что такое this и как работает?\n14) Какие хранилища данных ты знаешь в браузере и в чем их отличие? Назови различия между localStorage и cookies в сценариях использования.\n15) Из чего состоит HTTP запрос?\n15) Что такое заголовки в HTTP запросе, их правила, зачем они нужны, и почему мы не можем просто передавать заголовки в body например?\n16) Как сделать так чтобы при нажатии на ссылку у нас скачивался файл? А теперь как сделать так, чтобы при переходе по урлу у нас сразу скачивался файл?\n17) Что такое browser object model и что туда входит?\nЗадачи:\n1) \n// Что выведется в консоль, и как исправить чтобы выводился контекст \"inner obj\"\nfunction logContext() {\n  var hello, obj, fn;\n\n  hello= () => { console.log(this) }\n  obj = {\n    name: \"inner obj\",\n    hello: hello,\n  }\n  fn = obj.hello;\n\n  fn();\n}\n\nvar obj = {\n  name: 'outer obj',\n  hello: logContext,\n}\n\nobj.hello()\n2) \n// Отрефакторь код\n\nimport React from \"react\"\nfunction fetchUsers() {\nreturn fetch(`${process.env.BACKEND_GETWAY}/users`) .then(response => response.json());\n}\n\nfunction Users() {\nconst [userName, setUserName] = useState(\"\");\nconst [users, setUsers] = useState([]);\n\nuseEffect(function() {\n  fetchUsers().then(setUsers)\n}, [])\n\nfunction handleUserName (event) {\n  setUserName (event.target.value)\n};\n\nfunction handleSubmit (event) {\n  fetch(`${process.env.BACKEND_GETWAY}/users`, { method: \"PATCH\", body: userName })\n};\n\nreturn ( <div>\n<ul>\n{users.map(user => <li>{user.name}</li>)}\n</ul>\n<form onSumbit={handleSubmit}>\n<label>\nName <input type=\"text\" onChange={handleUserName}> </label>\n<button type=\"submit\">Save</button>\n</form>\n</div>\n);\n}\n3) \n// Что выйдет в консоли?\nsetTimeout(() => { console.log(1) }, 0)\n\nconst p = new Promise((res, rej) => {\n  console.log(2)\n  res()\n})\n\np.then(() => { console.log(3) })\n\nconsole.log(4)"
      }
    ]
  },
  {
    "company": "Центр Авиа",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-07 14:39:40",
        "content": "2025-02-07 14:39:40\n Артем -> 2071074234:\nКомпания: Центр Авиа\nВопросы \nКакие паттерны используешь\nкак бы создал систему уведомления(вот такой вопрос был без каких вводных)\nКак бы ты создал систему публикаций(Вот просто такой вопрос без вводных данных думаю имел ввиду про бэк потомучто все вопросы задавл по бэку)\nОпределить наступления события в node\nХолодный vs горячий кэш в node\nкак прогреть кэш\nдля чего нужна node\nwebworker\nwebSocket\nАвторизация vs Аунтификация\nкак сделать авторизацию для 1 у...",
        "full_content": "2025-02-07 14:39:40\n Артем -> 2071074234:\nКомпания: Центр Авиа\nВопросы \nКакие паттерны используешь\nкак бы создал систему уведомления(вот такой вопрос был без каких вводных)\nКак бы ты создал систему публикаций(Вот просто такой вопрос без вводных данных думаю имел ввиду про бэк потомучто все вопросы задавл по бэку)\nОпределить наступления события в node\nХолодный vs горячий кэш в node\nкак прогреть кэш\nдля чего нужна node\nwebworker\nwebSocket\nАвторизация vs Аунтификация\nкак сделать авторизацию для 1 устройства\nJWT"
      }
    ]
  },
  {
    "company": "Trendtech",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-10 15:00:57",
        "content": "2024-07-10 15:00:57\n Artur -> 2071074234:\nTrendTech, тех.собес\n\n— Вакансия: https://spb.hh.ru/vacancy/102454931?from=employer&hhtmFrom=employer\n— ЗП: сказал 150к+, комфортно 180к или 190к (требуется от 1 до 3 лет опыта и у них вроде вилка ограничена была)\n\nВопросы:\n— какая команда, процессы\n— как работал с чатами, какие проблемы были\n— что улучшил в команде\n— что привнес новое в проект\n— как тебе redux\n— какие еще стейтменджеры щупал\n— как ui кит разрабатывал\n— какая архитектура была\n— как с веб...",
        "full_content": "2024-07-10 15:00:57\n Artur -> 2071074234:\nTrendTech, тех.собес\n\n— Вакансия: https://spb.hh.ru/vacancy/102454931?from=employer&hhtmFrom=employer\n— ЗП: сказал 150к+, комфортно 180к или 190к (требуется от 1 до 3 лет опыта и у них вроде вилка ограничена была)\n\nВопросы:\n— какая команда, процессы\n— как работал с чатами, какие проблемы были\n— что улучшил в команде\n— что привнес новое в проект\n— как тебе redux\n— какие еще стейтменджеры щупал\n— как ui кит разрабатывал\n— какая архитектура была\n— как с вебпаком работал\n— есть ли опыт с module federation\n— какие тесты писал\n— какие способы копирования объекта знаешь\n— как фиксить перерендеры\n— разница void и never\n— utility types\n— как отследить клик по кнопке из одного модуля в другом через микрофронты\n— Event Bus это, как решать проблему с утечкой памяти\n— какие еще ui киты готовые знаешь\n— как оптимизировать сайт чтобы быстро грузил\n— были ли проблемы с памятью при использовании redux\n\nЗадача:\n\n// Написать функцию, которая принимает на вход массив элементов и возвращает кол-во уникальных элементов, протипизировать\n\nconst func = (arr: (string | number | object)[]): number => {\n  const uniq = new Set(arr);\n  return uniq.size;\n};\n\nconsole.log(func([\"a\", \"b\", 1, { c: 3 }, { c: 3 }, \"a\"]));"
      }
    ]
  },
  {
    "company": "Enot io",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-25 14:44:15",
        "content": "2024-10-25 14:44:15\n Sergey Chizhikov -> 2071074234:\n-Компания:  Enot io\n-зп: 200к\n-вакансия: нет\n\nВопросы:\n+Виды функций и их отличия\n+Ссылочные типы\n+Рекурсия\n+Асинхронность в js\n+Задача на асинхронность с console.log\n+Принципы ООП и SOLID\n+Сборщик мусора\n+расскажи про React\n+жизненный цикл компонента\n+Хуки React\n+useEffect и useLayoutEffect\n+проблема useLayoutEffect\n+useCallback useMemo\n+HOC\n+context\n+Чем лучше state мэнеджеры в сравнении с context\n+база по TypeScript\n+задачка на типизацию\n\nЗ...",
        "full_content": "2024-10-25 14:44:15\n Sergey Chizhikov -> 2071074234:\n-Компания:  Enot io\n-зп: 200к\n-вакансия: нет\n\nВопросы:\n+Виды функций и их отличия\n+Ссылочные типы\n+Рекурсия\n+Асинхронность в js\n+Задача на асинхронность с console.log\n+Принципы ООП и SOLID\n+Сборщик мусора\n+расскажи про React\n+жизненный цикл компонента\n+Хуки React\n+useEffect и useLayoutEffect\n+проблема useLayoutEffect\n+useCallback useMemo\n+HOC\n+context\n+Чем лучше state мэнеджеры в сравнении с context\n+база по TypeScript\n+задачка на типизацию\n\nЗадача:\nИзначально была строка, состоящая из одинаковых символов. Над ней производилось некоторое количество операций вставки символа. Очередной символ можно вставить только между любыми двумя одинаковыми символами.\n\nВам дана строка s, состоящая из латинских символов как нижнего, так и верхнего регистра. Определите, могла ли эта строка получиться после некоторого количества таких операций над ней."
      }
    ]
  },
  {
    "company": "Сибентек",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-09 19:14:58",
        "content": "2025-03-09 19:14:58\n Артем -> 2071074234:\nКомпания: Сибентек\nЗП: от 250 000K\n\nВопросы: \nДля чего нужен реакт\nчто такое кастомный хук \nкакие есть правила у хука\nКак работает рендер компонентов\nДали код надо его оптимизировать \nрешение:\n\n```\nimport { useState, useEffect, useMemo } from \"react\";\n\nconst ComplexComponent = ({ data }) => {\n    const [computedResult, setComputedResult] = useState([]);\n\n    useEffect(() => {\n        const worker = new Worker(new URL(\"./worker.js\", import.meta.url));\n   ...",
        "full_content": "2025-03-09 19:14:58\n Артем -> 2071074234:\nКомпания: Сибентек\nЗП: от 250 000K\n\nВопросы: \nДля чего нужен реакт\nчто такое кастомный хук \nкакие есть правила у хука\nКак работает рендер компонентов\nДали код надо его оптимизировать \nрешение:\n\n```\nimport { useState, useEffect, useMemo } from \"react\";\n\nconst ComplexComponent = ({ data }) => {\n    const [computedResult, setComputedResult] = useState([]);\n\n    useEffect(() => {\n        const worker = new Worker(new URL(\"./worker.js\", import.meta.url));\n        worker.postMessage(\"start\");\n        worker.onmessage = (e) => setComputedResult(e.data);\n        return () => worker.terminate();\n    }, [data]); // Пересчет при изменении data\n\n    return (\n        <div>\n            <h1>Результат сложных вычислений:</h1>\n            {computedResult.map((item, index) => (\n                <p key={index}>{item}</p>\n            ))}\n        </div>\n    );\n};\n\nКак отипизировать функцию чтоыб возвращался string\nрешение:\n\n// Вариант 1: Прямое указание типа при объявлении\nconst toUpperCase: (input: string) => string = (input) => {\n    return input.toUpperCase();\n};\n\n// Вариант 2: Использование псевдонима типа\ntype StringFunction = (str: string) => string;\n\nconst reverseString: StringFunction = (str) => {\n    return str.split('').reverse().join('');\n};"
      }
    ]
  },
  {
    "company": "Ренессанс Страхование",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-18 18:27:19",
        "content": "2024-10-18 18:27:19\n Mike -> 2071074234:\nКомпания: Ренессанс Страхование\nВакансия:https://hh.ru/vacancy/107180106\nЗП:250к\nВопросы:\n0.Много по работе(код ревью делал ли, как таски получал)\n1.кодить это инженерная или творческая работа\n2.принипы KISS, DRY, YAGNI\n3.SOLID расшифровать\n4.Хуки, которые чаще всего использовал и немного расскаажи про них\n5.как отловить ошибки\n6.отмена запроса при размонтировании\n7.юзал ли тесты и какие \n8.HOC\n9.Portal что такое и зачем\n10.JS однопоточный или многопоточн...",
        "full_content": "2024-10-18 18:27:19\n Mike -> 2071074234:\nКомпания: Ренессанс Страхование\nВакансия:https://hh.ru/vacancy/107180106\nЗП:250к\nВопросы:\n0.Много по работе(код ревью делал ли, как таски получал)\n1.кодить это инженерная или творческая работа\n2.принипы KISS, DRY, YAGNI\n3.SOLID расшифровать\n4.Хуки, которые чаще всего использовал и немного расскаажи про них\n5.как отловить ошибки\n6.отмена запроса при размонтировании\n7.юзал ли тесты и какие \n8.HOC\n9.Portal что такое и зачем\n10.JS однопоточный или многопоточный и как добиться многопоточности\n11.Eventloop / WebWorkers\n12.задача 1, сделать сортировку на кноке по возрастанию/убыванию массива имен\n13.задача2,  реализовать функцию debounced - платина"
      }
    ]
  },
  {
    "company": "Домклие",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-09-05 14:25:46",
        "content": "2024-09-05 14:25:46\n Александр Птицын -> 2071074234:\n- Домклие\n- Вакансия:   https://whispering-fuel-f46.notion.site/Frontend-6d3377e2b7164fb1963cbf4cd222b26a \n- ЗП - 320к на руки\n1.Как работает метод map, мутирует ли исходный массив\n 2. Как работает метод filter, мутирует ли исходный массив\n 3. Фазы события подробно про всплытие, погружение\n 4. Отличие currentTarget от target\n 5. async/await для чего, что возвращает async функция\n 6. Что за флаги i, g в регулярках\n 7. Что такое /d в регулярках\n...",
        "full_content": "2024-09-05 14:25:46\n Александр Птицын -> 2071074234:\n- Домклие\n- Вакансия:   https://whispering-fuel-f46.notion.site/Frontend-6d3377e2b7164fb1963cbf4cd222b26a \n- ЗП - 320к на руки\n1.Как работает метод map, мутирует ли исходный массив\n 2. Как работает метод filter, мутирует ли исходный массив\n 3. Фазы события подробно про всплытие, погружение\n 4. Отличие currentTarget от target\n 5. async/await для чего, что возвращает async функция\n 6. Что за флаги i, g в регулярках\n 7. Что такое /d в регулярках\n 8. Методы test, match отличия\n 9. Метод replace подробно\n 10. Что такое блочная модель\n 11. Про особенности box-sizing: border-box\n 12. Вес селекторов\n 13. Про свойство position и его значения\n 14. Про псевдоэлементы\n 15. Псевдоклассы подробно\n 16. Через какие свойства работаем с маркерами списков\n 17. Как поменять цвет маркера списка\n 18. Свойство transition и из чего состоит его значение\n 19. Как делать анимации через keyframes и как их применять их к элементам\n 20. Чем плох transition: all\n 21. Свойство will-change подробно, что будет если добавить его для всех элементов\n 22. grid-template-columns\n 23. repeat в гридах\n 24. Как задать промежутки между колонками или строками\n 25. grid-template-areas\n 26. Как отловить прогрузку HTML, отличие DOMContentLoaded от load\n 27. Как понять, что страница все еще грузится (document.readyState)\n 28. localStorage vs cookie\n 29. Спросил про preload атрибуты\n 30. Про prefetch? preconnect\n 31. Дефолтные скрипты vs async vs defer vs module\n 32. Фрагменты в React, можно ли им проставить атрибут key\n 33. Что будет, если задать списку один и тот же key\n 34. Что такое useRef, useMemo, memo\n 35. react.lazy для чего\n 36. Что такое Redux, single source of truth в его контексте\n\nЗадача 1 . Функция принимает на вход число, а возвращает отсортированные цифры по убыванию, что делает маесимальное число из входящего\nмое решение\n\nconst descendingOrder = (n) =>   Number(String(n).split('').sort((a, b) => b - a).join(''))\n\n\nЗадача 2. \n\n/*\nПреобразуйте массив таким образом, чтобы на выходе получилась строка с диапазоном чисел.\nДиапазон начинается с трех и более идущих подряд чисел, все остальные числа выводятся отдельно.\n*/\n \nfunction rangeExtraction(list) {\n  // твой код здесь\n}\n \nconst range = [-10, -9, -8, -7, -3, -2, -1, 0, 1, 3, 4, 5, 14, 15, 17, 18, 19, 20];\n \nconsole.info(rangeExtraction(range) === \"-10--7,-3-1,3-5,14,15,17-20\");\n\nя не решил"
      }
    ]
  },
  {
    "company": "Рокет-Тех",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-11 11:21:44",
        "content": "2024-06-11 11:21:44\n Александр Горохов -> 2071074234:\nНазвание компании: Рокет-тех\nЗП: 200\n\n     Что конкретно ты сделал на проекте?\nКак работал с тех-долгом?\nПо какой системе версий работал?\nДелал кастомные компоненты? Какие?\nКакие стейт менеджеры знаешь?\n Раскажи про FSD архи тектуру\nВопрос про подгружение/всплытие/таргет\nДинамическая/статическая типизация.\n Что такое VDOM?\nКакие хуки знаешь?\nЧто знаешь про классовые компоненты?\n Как оптимизировать приложения, как понять что ты оптимизировал, ...",
        "full_content": "2024-06-11 11:21:44\n Александр Горохов -> 2071074234:\nНазвание компании: Рокет-тех\nЗП: 200\n\n     Что конкретно ты сделал на проекте?\nКак работал с тех-долгом?\nПо какой системе версий работал?\nДелал кастомные компоненты? Какие?\nКакие стейт менеджеры знаешь?\n Раскажи про FSD архи тектуру\nВопрос про подгружение/всплытие/таргет\nДинамическая/статическая типизация.\n Что такое VDOM?\nКакие хуки знаешь?\nЧто знаешь про классовые компоненты?\n Как оптимизировать приложения, как понять что ты оптимизировал, какие метрики использовал?\nМето ды защиты от xss\nПлюсы SSR\nЧто такое CI/CD"
      }
    ]
  },
  {
    "company": "ITL.Team",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-10 13:43:54",
        "content": "2025-07-10 13:43:54\n .пуша L ✞ -> 2071074234:\nКомпания: ITL.Team (проект Лига Ставок)\nСначала спросили про опыт, чем занимался, немного уточняющих вопросов по реализации технологий\nРассказали о себе, о команде, про процессы\n\nТолько задача на рефакторинг:\nimport { useEffect, useLayoutEffect, useState } from 'react';\nimport './style.css';\n\ninterface Product {\n    description: string;\n    id: string;\n    info: string;\n    name: string;\n}\n\ntype Shop = {\n    coordinate: number[];\n    id: string;\n    ...",
        "full_content": "2025-07-10 13:43:54\n .пуша L ✞ -> 2071074234:\nКомпания: ITL.Team (проект Лига Ставок)\nСначала спросили про опыт, чем занимался, немного уточняющих вопросов по реализации технологий\nРассказали о себе, о команде, про процессы\n\nТолько задача на рефакторинг:\nimport { useEffect, useLayoutEffect, useState } from 'react';\nimport './style.css';\n\ninterface Product {\n    description: string;\n    id: string;\n    info: string;\n    name: string;\n}\n\ntype Shop = {\n    coordinate: number[];\n    id: string;\n    name: string;\n    priceList: Record<string, string>;\n};\n\n/*test*/\n\n\nexport const AppTimer = () => {\n    let currency = ' $';\n    const [timer, setTimer] = useState(10);\n\n    const onDecrease = () => {\n        if (counter > 0) {\n            counter--;\n            setTimer(counter);\n        }\n    };\n\n    useLayoutEffect(() => {\n        if (!started) {\n            setInterval(onDecrease, 1000);\n        }\n\n        started = true;\n    });\n\n    return (\n        <div>\n            <div className=\"Controls\">{timer}</div>\n            {/* @ts-ignore */}\n            <ProductList currency={currency} />\n        </div>\n    );\n};\n\nconst ProductList = ({ currency, error = false }: any) => {\n\n    /*let counter = 10;\n    var started = false;*/\n\n    const [products, setProducts] = useState<Product[]>([]);\n    const [shops, setShops] = useState<Array<Shop>>([]);\n\n    if (error) {\n        return;\n    }\n\n    // @ts-ignore\n    useEffect(async () => {\n        const productsResponse = await fetch(\n            'https://my-json-server.typicode.com/cyberwalrus/demo/products'\n        );\n        const productsJson = await productsResponse.json();\n\n        setProducts(productsJson);\n    }, [setProducts, setShops]);\n\n    const getShops = (id: string) => {\n        let array: any[] = [];\n\n        for (var i = 0; i < shops.length; i++) {\n            const shop = shops[i];\n\n            if (shop.priceList[id]) {\n                array = [...array, shop];\n            }\n        }\n\n        return array;\n    };\n\n    useLayoutEffect(() => {\n        fetch('https://my-json-server.typicode.com/cyberwalrus/demo/shops')\n            .then((res) => res.json())\n            .then((res) => setShops(res));\n    }, []);\n\n    return (\n        <div className=\"productsWrapper\">\n            {/* render products */}\n            {products.map(({ name, description, id }) => (\n                <main className=\"products\">\n                    <h1 className=\"products-Item_green\">{name}</h1>\n                    <h5>{description}</h5>\n                    <hr />\n                    {/* render shops list */}\n                    <ul className=\"postList\">\n                        {(getShops(id) as Shop[]).map(({ name, priceList }) => (\n                            <div className=\"post__header\">\n                                {name} -{' '}\n                                {\n                                    Object.entries(priceList).find(\n                                        ([key]) => id === key\n                                    )?.[1]\n                                }\n                                {currency}\n                            </div>\n                        ))}\n                    </ul>\n                </main>\n            ))}\n        </div>\n    );\n};"
      }
    ]
  },
  {
    "company": "Деливери",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-23 19:43:41",
        "content": "2024-07-23 19:43:41\n Ramis Mubarakov -> 2071074234:\n— Сравни, финал с деливери команды\n— Ссылка на вакансию: hr сам написал, https://hh.ru/vacancy/97044312\n— Озвученная мной ЗП: 250k+\n— Вопросы:\n\n1) Расскажи коротко про свой опыт без углубления в технические моменты.\n2) Почему решили пилить свой UI-Kit?\n3) Что тебе больше всего понравилось в рамках работы над проектами? Что тебя драйвит?\n4) Как подходил к решению конфликтов?\n5) Что делаешь помимо работы?\n6) С чем в процессе работы не хотел бы ст...",
        "full_content": "2024-07-23 19:43:41\n Ramis Mubarakov -> 2071074234:\n— Сравни, финал с деливери команды\n— Ссылка на вакансию: hr сам написал, https://hh.ru/vacancy/97044312\n— Озвученная мной ЗП: 250k+\n— Вопросы:\n\n1) Расскажи коротко про свой опыт без углубления в технические моменты.\n2) Почему решили пилить свой UI-Kit?\n3) Что тебе больше всего понравилось в рамках работы над проектами? Что тебя драйвит?\n4) Как подходил к решению конфликтов?\n5) Что делаешь помимо работы?\n6) С чем в процессе работы не хотел бы сталкиваться?"
      }
    ]
  },
  {
    "company": "ITLab",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-11 13:13:51",
        "content": "2025-07-11 13:13:51\n Sodnom Tyksheev -> 2071074234:\nКомпания: ITLab\nПроект: Букмекерка\n2 этап тех интервью\n\nВопросы:\n\n1.Какие хуки знаешь, с какими работал?Про каждый рассказать\n2.Расскажи про virtual DOM ? Какую он решает проблему?\n3.В чем разница между классовыми и функциональными компонентами?\n4.Как можно изменить значение из дочернего в родительском компоненте?\n5.Когда стоит юзать локальное состояние и когда глобальное?\n6.Расскажи какими стейт менеджерами работал? В чем их различия, плюсы и ...",
        "full_content": "2025-07-11 13:13:51\n Sodnom Tyksheev -> 2071074234:\nКомпания: ITLab\nПроект: Букмекерка\n2 этап тех интервью\n\nВопросы:\n\n1.Какие хуки знаешь, с какими работал?Про каждый рассказать\n2.Расскажи про virtual DOM ? Какую он решает проблему?\n3.В чем разница между классовыми и функциональными компонентами?\n4.Как можно изменить значение из дочернего в родительском компоненте?\n5.Когда стоит юзать локальное состояние и когда глобальное?\n6.Расскажи какими стейт менеджерами работал? В чем их различия, плюсы и минусу и какая архитектура у них(типо FLUX)\n7.Какие архитектурные решения есть в реакте?(FSD,Atomic,Module)\n\n// вывести данные о юзерах <https://jsonplaceholder.typicode.com/users> и \n// все это типизировать\n\nexport function App(props) {\n  const [users, setUsers] = useState<User[]>([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const res = await fetch('<https://jsonplaceholder.typicode.com/users>');\n        if (!res.ok) {\n          throw new Error('error');\n        }\n        const data = await res.json();\n        setUsers(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  if (isLoading) return <div>loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div className='App'>\n      <ul>\n        {users.map(el => (\n          <li key={el.id}>{el.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}"
      }
    ]
  },
  {
    "company": "Infowatch",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-10 14:18:12",
        "content": "2025-02-10 14:18:12\n Михаил Барыкин -> 2071074234:\nКомпания: InfoWatch \nСсылка на вакансию: Написал HR \nЗП: Просил от 250к \nВопросы: \n- прошлись по резюме, что использовал, какой стек\n- git merge vs git rebase \n- git pull для чего\n- git stash \n- unknown vs never vs void\n- Дженерики для чего \n- T extends number | string - для чего extends\n- Литеральные типы что это \n- Capitalize\n- про utility types typescript \nЗадачи: \n1)  \ntypescript \n//Нужно вернуть result из массива numbers + типизировать, \n//...",
        "full_content": "2025-02-10 14:18:12\n Михаил Барыкин -> 2071074234:\nКомпания: InfoWatch \nСсылка на вакансию: Написал HR \nЗП: Просил от 250к \nВопросы: \n- прошлись по резюме, что использовал, какой стек\n- git merge vs git rebase \n- git pull для чего\n- git stash \n- unknown vs never vs void\n- Дженерики для чего \n- T extends number | string - для чего extends\n- Литеральные типы что это \n- Capitalize\n- про utility types typescript \nЗадачи: \n1)  \ntypescript \n//Нужно вернуть result из массива numbers + типизировать, \n//чтобы каждое число было только цифрой, и чтобы длина \n//массива была равна 9: \n// numbers -> [1, 2, 3, 4, 5, 6, 7, 8, 9] \n// result -> \"(123) 456-789\" \n \ntype Union = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9; \ntype FixedArray9 = Union[] & {length: 9} \n \n// result -> \"(123) 456-789\" \nfunction createPhoneNumber(numbers: FixedArray9): string { \n return `(${numbers[0]}${numbers[1]}${numbers[2]}) ${numbers[3]}${numbers[4]}${numbers[5]}-${numbers[6]}${numbers[7]}${numbers[8]}` \n} \n \nconsole.log(createPhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9]))  \n \n2)  \ntypescript \nconst StyledInput = styled(Input)<{ $color: string }>`color: ${(props) => props.$color}`; \n \nexport const Parent = () => { \nconst spanRef = useRef<HTMLSpanElement>(null) \n \nconst handleClick = () => { \n  if (spanRef.current) { \n    const inputElement = spanRef.current.querySelector(\"input\") as HTMLInputElement; \n \n  if (inputElement) { \n    alert(`Input value: $(inputElement.value)`) \n  } \n}  \n \nreturn ( \n  <div> \n    <StyledInput ref={spanRef} /> \n    <button onClick={handleClick)>Получить данные</button> \n  </div> \n  ) \n}"
      }
    ]
  },
  {
    "company": "Perfect Panel",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-12 14:27:56",
        "content": "2024-11-12 14:27:56\n Егор -> 2071074234:\nКомпания : Perfect Panel\nВакансия: https://hh.ru/vacancy/109570071\nЗП: 180к+\nВопросы:\n- расскажи про свое последнее место работы\n- какие тесты писали\n- что такое вебсокеты\n- cors\n- как получать инфу между вкладками (никак, политика безопасности)\n- local storage, session storage\n- семантическая верстка\n- forEach\n- promise\n- var let const \n- область видимости\n- опыт с react, как себя оцениваешь в react\n- зачем нужен typescript\n- generic",
        "full_content": "2024-11-12 14:27:56\n Егор -> 2071074234:\nКомпания : Perfect Panel\nВакансия: https://hh.ru/vacancy/109570071\nЗП: 180к+\nВопросы:\n- расскажи про свое последнее место работы\n- какие тесты писали\n- что такое вебсокеты\n- cors\n- как получать инфу между вкладками (никак, политика безопасности)\n- local storage, session storage\n- семантическая верстка\n- forEach\n- promise\n- var let const \n- область видимости\n- опыт с react, как себя оцениваешь в react\n- зачем нужен typescript\n- generic"
      }
    ]
  },
  {
    "company": "Актион",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-05 22:42:43",
        "content": "2025-02-05 22:42:43\n Артем -> 2071074234:\nКомпания: Актион \nиз чего состоит HTML\nasync defer в HTML\nСемантическая верстка\nz-index\nmedia запросы\nметоды массива\nPromise\neventLoop\nuseEffect\nЖизненный цикл компонента\nДекомпозируй блок с датой\n\nЗадача: \nОтрефактори код",
        "full_content": "2025-02-05 22:42:43\n Артем -> 2071074234:\nКомпания: Актион \nиз чего состоит HTML\nasync defer в HTML\nСемантическая верстка\nz-index\nmedia запросы\nметоды массива\nPromise\neventLoop\nuseEffect\nЖизненный цикл компонента\nДекомпозируй блок с датой\n\nЗадача: \nОтрефактори код"
      }
    ]
  },
  {
    "company": "Dodo Brands",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-14 06:24:18",
        "content": "2024-10-14 06:24:18\n Алмас -> 2071074234:\nКомпания: Dodo Brands\nВакансия: сама написала\nЗП: от 300\n\n-У нас есть таймауты, таймеры, интервалы и тд. Мы запустили таймаут, хотим какое то отложенное действие, но пользователь уходит со страницы, не дождался нашего таймоута и нам нужно таймаут как то отменить. Каким образом мы можем это сделать? \n-А еще какой нибудь способ знаешь? Как можно сделать это без метода?\n-Расскажи про контекст у стрелочной функции?\n-А как нибудь в контекст мы можем передать ...",
        "full_content": "2024-10-14 06:24:18\n Алмас -> 2071074234:\nКомпания: Dodo Brands\nВакансия: сама написала\nЗП: от 300\n\n-У нас есть таймауты, таймеры, интервалы и тд. Мы запустили таймаут, хотим какое то отложенное действие, но пользователь уходит со страницы, не дождался нашего таймоута и нам нужно таймаут как то отменить. Каким образом мы можем это сделать? \n-А еще какой нибудь способ знаешь? Как можно сделать это без метода?\n-Расскажи про контекст у стрелочной функции?\n-А как нибудь в контекст мы можем передать в стрелочную функцию?\n-Что нужно сделать, чтобы юзефект сработал один раз? \n-А что нам нужно сделать, чтобы юзефект сработал только на дидапдейт, без монтирования\n-Запросы get передаются query параметрами, а можем сделать тоже самое методом post?\n-Работал с ts? Типы из тайпскрипта у нас просачиваются в рантайм? \n-Может быть знаешь, что все таки из ts просачивается в build, в рантайм? что в итоговом бандле, что то из ts может быть. ( ответ: enums )\n-Что мы можем сделать, чтобы наши обработчики не пересоздавались лишний раз при рендере?\n-Типы данных в js?\n-Почему на реакте начал писать, а не на чем то другом? \n-С какими сборщиками работал? \n-Сi/cd?"
      }
    ]
  },
  {
    "company": "Fatzoom",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-10 15:56:26",
        "content": "2025-03-10 15:56:26\n Ильдус Гизетдинов -> 2071074234:\nКомпания: Fatzoom(Этап 1)\nВакансия: Hr сама написала\nЗп: не известно\n\nРаскажи про себя, про реакт, команду\nВопросы:\n1)Cors\n2)Почему что то браузер кэширует, а что то нет\n3)Стратегия кэширования, какие заголовки бывают\n4)Как диагностировать проблему с быстродействием\n5)Нужно делать запросы раз в 10 секунд, как это сделать, потом почему может приходить вместо ожидаемых 100 запросов получаем 700\n6)Когда нужно отписывать от событий\n7)Как сделать ...",
        "full_content": "2025-03-10 15:56:26\n Ильдус Гизетдинов -> 2071074234:\nКомпания: Fatzoom(Этап 1)\nВакансия: Hr сама написала\nЗп: не известно\n\nРаскажи про себя, про реакт, команду\nВопросы:\n1)Cors\n2)Почему что то браузер кэширует, а что то нет\n3)Стратегия кэширования, какие заголовки бывают\n4)Как диагностировать проблему с быстродействием\n5)Нужно делать запросы раз в 10 секунд, как это сделать, потом почему может приходить вместо ожидаемых 100 запросов получаем 700\n6)Когда нужно отписывать от событий\n7)Как сделать так что бы запрос был только с активной вкладки\n8)Как делать запросы не находясь во вкладке\n9)как увеличить скорость обработки гигантского массива\n10)Что такое flex-basis\n11)Context\n12)Критерии выбора какой либо либы"
      }
    ]
  },
  {
    "company": "Sok Studio",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-15 15:18:41",
        "content": "2024-11-15 15:18:41\n Артем -> 2071074234:\nКомпания: Sok Studio\nЗП: 250\nВопросы: \n{} === {}\n1 == '1'\nЛексическое окружения\nevent loop\nМетоды промиса\nuseEffect vs useLauotEffect\nwhile(true) что будет\nчто выведеться там промисы setTimeiot\nuseMemo useCallback\nкак useMemo превратить useCallback\nReact.memo\nreact.memo с кастомной функциией\nчто выведеться на скрине\nnext middlware\nпапки как страница \n[id] vs [...id]",
        "full_content": "2024-11-15 15:18:41\n Артем -> 2071074234:\nКомпания: Sok Studio\nЗП: 250\nВопросы: \n{} === {}\n1 == '1'\nЛексическое окружения\nevent loop\nМетоды промиса\nuseEffect vs useLauotEffect\nwhile(true) что будет\nчто выведеться там промисы setTimeiot\nuseMemo useCallback\nкак useMemo превратить useCallback\nReact.memo\nreact.memo с кастомной функциией\nчто выведеться на скрине\nnext middlware\nпапки как страница \n[id] vs [...id]"
      }
    ]
  },
  {
    "company": "Азот-Взрыв",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-13 12:29:56",
        "content": "2024-07-13 12:29:56\n Руслан -> 2071074234:\nАзот-взрыв\n—зп: сказал 260к, ответили, что 230 максимум\n— вакансия: https://hh.ru/vacancy/101949185\n— Вопросы:\n1. http и вебсокеты отличия\n2. Особенности https протокола по сравнению с http\n3. Про самоподписные и сертификаты и выданные удостоверяющим центром",
        "full_content": "2024-07-13 12:29:56\n Руслан -> 2071074234:\nАзот-взрыв\n—зп: сказал 260к, ответили, что 230 максимум\n— вакансия: https://hh.ru/vacancy/101949185\n— Вопросы:\n1. http и вебсокеты отличия\n2. Особенности https протокола по сравнению с http\n3. Про самоподписные и сертификаты и выданные удостоверяющим центром"
      }
    ]
  },
  {
    "company": "Квинсдевелопмент",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-05-30 06:54:24",
        "content": "2024-05-30 06:54:24\n Александр Птицын -> 2071074234:\nНазвание компании: #КвинсДевелопмент\n- Вакансия: https://hh.ru/vacancy/99580707\n- ЗП: вилка 3-5к$\n\nЭто стартап по крипте. Технических вопросов не было. Нужно было рассказать как много ты знаешь библиотек и как ты это все будешь использовать в их проекте. Проще посмотреть видео)",
        "full_content": "2024-05-30 06:54:24\n Александр Птицын -> 2071074234:\nНазвание компании: #КвинсДевелопмент\n- Вакансия: https://hh.ru/vacancy/99580707\n- ЗП: вилка 3-5к$\n\nЭто стартап по крипте. Технических вопросов не было. Нужно было рассказать как много ты знаешь библиотек и как ты это все будешь использовать в их проекте. Проще посмотреть видео)"
      }
    ]
  },
  {
    "company": "Holyweb",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-23 06:02:45",
        "content": "2025-03-23 06:02:45\n Кирилл -> 2071074234:\nКомпания: HolyWeb\nВакансия: https://spb.hh.ru/vacancy/117478356?hhtmFrom=employer_vacancies\n\nВопросы:\n1. Вопросы по опыту\n2. Расскажи как работает redux\n3. Когда websocket теряет соединение, то он сам его восстанавливает или нет\n4. Redux vs Redux Toolkit\n5. Как можно сохранить состояние в redux, чтобы при перезагрузке данные не терялись\n6. Этапы рендера страницы\n7. Расскажи что такое FSD и как организовывали на проекте\n8. Что такое поток документа и как...",
        "full_content": "2025-03-23 06:02:45\n Кирилл -> 2071074234:\nКомпания: HolyWeb\nВакансия: https://spb.hh.ru/vacancy/117478356?hhtmFrom=employer_vacancies\n\nВопросы:\n1. Вопросы по опыту\n2. Расскажи как работает redux\n3. Когда websocket теряет соединение, то он сам его восстанавливает или нет\n4. Redux vs Redux Toolkit\n5. Как можно сохранить состояние в redux, чтобы при перезагрузке данные не терялись\n6. Этапы рендера страницы\n7. Расскажи что такое FSD и как организовывали на проекте\n8. Что такое поток документа и как на него влияет position\n9. Что такое конструктор в классах\n10. Разница между статик и обычными методами \n11. Состояния промиса\n12. Статические методы промиса\n13. Сборщик мусора как работает\n14. Расскажи как работает eventloop\n15. Как отменить стандартное поведение формы, чтобы при отправки у нас не перезагружалась страница\n16. Как остановить всплытие события\n17. async vs defer\n18. unknown vs any\n19. Что такое дженерики \n20. Перегрузка функций что это и для чего\n21. Какие утилити тайпы знаешь\n22. Что такое VDOM\n23. Что такое React Fiber\n24. useRef vs useState\n25. Правила написала хуков\n26. Что такое lazy и suspanse \n27. Как перехватывать ошибки в react\n28. Что такое вебворкеры \n29. Как писали тесты на проекте, как мокали данные для тестов\n30. polling vs long polling"
      }
    ]
  },
  {
    "company": "Компания T2",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-29 06:24:58",
        "content": "2024-11-29 06:24:58\n Mikhail Sorokin -> 2071074234:\nКомпания T2\nИз-за технических проблем решили только одну задачу, еще будет один собес с одной задачей\nЗадача — транспонировать матрицу(использовать только один цикл, не мутировать исходную матрицу)\nРешение:\nconst matrix = [\n  [1, 2, 3, 4, 5],\n  [6, 7, 8, 9, 10],\n  [11, 12, 13, 14, 15],\n  [16, 17, 18, 19, 20],\n  [21, 22, 23, 24, 25],\n];\n\nconst getTransposedMatrix = (matrix) => {\n  const result = [];\n  const rowCount = matrix.length;\n  const colC...",
        "full_content": "2024-11-29 06:24:58\n Mikhail Sorokin -> 2071074234:\nКомпания T2\nИз-за технических проблем решили только одну задачу, еще будет один собес с одной задачей\nЗадача — транспонировать матрицу(использовать только один цикл, не мутировать исходную матрицу)\nРешение:\nconst matrix = [\n  [1, 2, 3, 4, 5],\n  [6, 7, 8, 9, 10],\n  [11, 12, 13, 14, 15],\n  [16, 17, 18, 19, 20],\n  [21, 22, 23, 24, 25],\n];\n\nconst getTransposedMatrix = (matrix) => {\n  const result = [];\n  const rowCount = matrix.length;\n  const colCount = matrix[0].length;\n  let newArr = [];\n  let currentCol = 0\n  let currentRow = rowCount - 1\n\n  /** писать ниже этой строки*/\n  for (let i = 0; i < (rowCount * colCount); i++) {\n    newArr.push(matrix[currentRow][currentCol]);\n    if (currentRow === 0) {\n      currentRow = rowCount;\n      currentCol ++\n      result.push(newArr);\n      newArr = [];\n    }\n    currentRow--\n  }\n  return result;\n};\n\n\nconsole.log(matrix);\nconsole.log(\"============================\");\nconsole.log(getTransposedMatrix(matrix))"
      }
    ]
  },
  {
    "company": "Crtex",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-02-08 16:17:08",
        "content": "2024-02-08 16:17:08\n Александр Молодов -> 2071074234:\nНазвание компании: CRTEX\nПервый этап - теория + задача\nЗарплата: от 250т.р.\nРезультат: скорее всего отрицательный (затупил с задачей, обработал не все варианты), завтра отпишу итоговый \nРЕД ФЛАГ: ПОЛИГРАФ от СБ в ОФИСЕ\n\nПо теории:\nОценил себя как мидл+ сразу попросили пояснить за грейд)\nКакую архитектуру используешь на проекте, какие знаешь?\nЧто такое функциональное программирование?\nВ какой парадигме пишут на JS?\nЧто такое браузер зачем он н...",
        "full_content": "2024-02-08 16:17:08\n Александр Молодов -> 2071074234:\nНазвание компании: CRTEX\nПервый этап - теория + задача\nЗарплата: от 250т.р.\nРезультат: скорее всего отрицательный (затупил с задачей, обработал не все варианты), завтра отпишу итоговый \nРЕД ФЛАГ: ПОЛИГРАФ от СБ в ОФИСЕ\n\nПо теории:\nОценил себя как мидл+ сразу попросили пояснить за грейд)\nКакую архитектуру используешь на проекте, какие знаешь?\nЧто такое функциональное программирование?\nВ какой парадигме пишут на JS?\nЧто такое браузер зачем он нужен?\nЧто такое EventLoop? \nКак работает async await ?\nСпособы оптимизации?\nЧто такое мемоизация и почему она не всегда нужна?\nВроде всё, если и были ещё какие-то вопросы, то максимально базовые\n\nЗадача\nconst data = [\n  \"index.ts\",\n  {\n    src: [\n      \"index.ts\",\n      {\n        ui: [\n          \"index.ts\",\n          {\n            cards: [\"cards.tsx\", \"index.ts\"],\n            wallets: [\"index.ts\", \"all-wallets.tsx\"],\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction myFlat(arr){\n//реализация\n}\n\nmyFlat(data)\n\n// [\n//   \"index.ts\",\n//   \"src/index.ts\",\n//   \"src/ui/index.ts\",\n//   \"src/ui/cards/cards.tsx\",\n//   \"src/ui/cards/index.ts\",\n//   \"src/ui/wallets/index.ts\",\n//   \"src/ui/wallets/all-wallets.tsx\"\n// ]\n\n\n\nUPD: оценили мидл, готовы дать 200к\nUPD: сказали готовы поднимать зп так как понравился, но на созвон с командой не пойду"
      }
    ]
  },
  {
    "company": "Findsport",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-04 14:34:22",
        "content": "2024-10-04 14:34:22\n Максим -> 2071074234:\nFindSport\n- Вакансия: https://hh.ru/vacancy/106647901?hhtmFrom=chat\n- Зп: 120-140к\n\nВакансию кинули в архив, возможно чуть позже снова откроют. Ищут 2х человек. Лайвкодинга не было, вопросики так чисто за опыт и технологии. Проводят в два этапа. Второй этап разговор с лидом по вопросам как работают, как трудоустраивают и тд",
        "full_content": "2024-10-04 14:34:22\n Максим -> 2071074234:\nFindSport\n- Вакансия: https://hh.ru/vacancy/106647901?hhtmFrom=chat\n- Зп: 120-140к\n\nВакансию кинули в архив, возможно чуть позже снова откроют. Ищут 2х человек. Лайвкодинга не было, вопросики так чисто за опыт и технологии. Проводят в два этапа. Второй этап разговор с лидом по вопросам как работают, как трудоустраивают и тд"
      }
    ]
  },
  {
    "company": "Название Компании Appmaster",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-04-09 06:44:46",
        "content": "2024-04-09 06:44:46\n Санжар -> 2071074234:\n- Название компании AppMaster\n- Ссылка на вакансию: hr скинул текст в личку в телеге\n- ЗП: минимум 330к, комфорт 380к \n- Успех: ❌\n- Фидбек: был блиц опрос, на который отведено 20 минут, интервьюер сказал, что вопросы будут строго по их стеку, предупредил, что мало кто его проходит. Я протянул 10 мин. В какой-то момент, судя по реакции интервьювера на мои ответы, показалось, что цель собеседования - это самоутвердиться за счет отсутствия у кандидата глуб...",
        "full_content": "2024-04-09 06:44:46\n Санжар -> 2071074234:\n- Название компании AppMaster\n- Ссылка на вакансию: hr скинул текст в личку в телеге\n- ЗП: минимум 330к, комфорт 380к \n- Успех: ❌\n- Фидбек: был блиц опрос, на который отведено 20 минут, интервьюер сказал, что вопросы будут строго по их стеку, предупредил, что мало кто его проходит. Я протянул 10 мин. В какой-то момент, судя по реакции интервьювера на мои ответы, показалось, что цель собеседования - это самоутвердиться за счет отсутствия у кандидата глубоких знаний локальных тем.\n\nВопросы:\n- способы шифровки данных в js\n- отличия cjs от ejs\n- как происходит работа в webworkers\n- какие ограничения есть в webworkers\n- как общаться между iframe (без shared webworkers)\n- какие есть способы организации микросервисной архитектуры\n- для чего нужен rxjs во vue3\n- как определить утечку памяти в браузере\n- что лучше, один чанк или много чанков. Назови правило, определяющее самое оптимальное решение\n- как влияет http1 http2 http3 на загрузку чанков"
      }
    ]
  },
  {
    "company": "Irlix",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-03 13:43:32",
        "content": "2025-03-03 13:43:32\n Алексей ... -> 2071074234:\nКомпания: IRLIX\nВакансия: написала hr в тг\nЗП: от 180к (аутстаф)\n\nВопросы:\n1. На каких проектах работал?\n2. Стек технологий на проектах\n3. Состав команды\n4. Что такое замыкание?\n5. Что такое event loop?\n6. Какие существуют методы у промисов?\n7. Как работает всплытие и погружение?\n8. Отличие deffer/assync\n9. Что быстрее .find или .some?\n10. Зачем нужен React\n11. С какими хуками работал\n12. Отличие useEffect от useLayoutEffect\n13. Способы оптимизации...",
        "full_content": "2025-03-03 13:43:32\n Алексей ... -> 2071074234:\nКомпания: IRLIX\nВакансия: написала hr в тг\nЗП: от 180к (аутстаф)\n\nВопросы:\n1. На каких проектах работал?\n2. Стек технологий на проектах\n3. Состав команды\n4. Что такое замыкание?\n5. Что такое event loop?\n6. Какие существуют методы у промисов?\n7. Как работает всплытие и погружение?\n8. Отличие deffer/assync\n9. Что быстрее .find или .some?\n10. Зачем нужен React\n11. С какими хуками работал\n12. Отличие useEffect от useLayoutEffect\n13. Способы оптимизации реакт приложения\n14. Когда нужно оборачивать функцию в useCallback?\n15. Зачем нужны keys в реакте, почему нельзя использовать индексы?\n16. Что такое батчинг? \n17. Что такое дженерики?\n18. Что такое utility types, какие знаешь?\n19. Что такое type guard? \n20. Работал ли с jwt? \n \nБез лайвкодинга"
      }
    ]
  },
  {
    "company": "Катюшапринт",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-31 17:38:58",
        "content": "2025-01-31 17:38:58\n Владислав -> 2071074234:\nкомпания: КатюшаПринт\nвакансия: https://hh.ru/vacancy/115264604?from=share_ios\nзп: до 250 000\n\nВопросы: \n1. Что будет, когда вводим в браузере url и нажимаем Enter?\n2. Рассказать какие знаю Utility types\n\nЗадачи:\n1. Написать свой Readonly\nReadonly<Type>: делает все свойства типа Type доступными только для чтения.\n\nРешение: \ntype MyReadonly<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\nЗадача 2\nУсловие: Есть enum Animals, в котором указаны животные. Н...",
        "full_content": "2025-01-31 17:38:58\n Владислав -> 2071074234:\nкомпания: КатюшаПринт\nвакансия: https://hh.ru/vacancy/115264604?from=share_ios\nзп: до 250 000\n\nВопросы: \n1. Что будет, когда вводим в браузере url и нажимаем Enter?\n2. Рассказать какие знаю Utility types\n\nЗадачи:\n1. Написать свой Readonly\nReadonly<Type>: делает все свойства типа Type доступными только для чтения.\n\nРешение: \ntype MyReadonly<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\nЗадача 2\nУсловие: Есть enum Animals, в котором указаны животные. Нужно написать свой тип, который проходит по всем ключам enum и проверяет есть ли такой тип:\nenum Animals = {\n  DOG,\n  CAT,\n}\n\nРешение: \ntype MySupperType<T> = {\n  [K in keyof typeof Animals]: T;\n};\n\nЗадача 3\n Условие: Дана древовидная структура, нужно сделать вывод всех элементов вложенности. Также каждому уровню вложенности нужно добавить отступ больше чем у родительского.\nimport React, { useState } from 'react';\n\nconst App = () => {\n    const [treeData] = useState({\n        id: 1,\n        name: 'test',\n        children: [\n            {\n                id: 2,\n                name: 'test2',\n                children: [\n                    {\n                        id: 3,\n                        name: 'test3',\n                        children: [],\n                    },\n                ],\n            },\n            {\n                id: 4,\n                name: 'test4',\n                children: [],\n            },\n        ],\n    });\n\n    return (\n        <div>\n            <h1>Дерево</h1>\n        </div>\n    );\n};\n\nexport default App;\n\nРешение:\nimport React, { useState } from 'react';\n\nconst Block = (props) => {\n    const {id, name, children, margin} = props;\n    return (\n        <div style={{ marginLeft: `${margin}px` }}>\n            <div>{name}</div>\n            {children && children.length > 0 && (\n                <div>\n                    {children.map(child => (\n                        <Block key={child.id} {...child} magrin={margin + 1} />\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst App = () => {\n    const [treeData] = useState({\n        id: 1,\n        name: 'test',\n        children: [\n            {\n                id: 2,\n                name: 'test2',\n                children: [\n                    {\n                        id: 3,\n                        name: 'test3',\n                        children: [],\n                    },\n                ],\n            },\n            {\n                id: 4,\n                name: 'test4',\n                children: [],\n            },\n        ],\n    });\n\n    return (\n        <div>\n            <h1>Дерево</h1>\n            <Block {...treeData} margin={1} />\n        </div>\n    );\n};\n\nexport default App;\n\nЗадача 4\nУсловие: сделать такой результат\nconst obj = {\n    a: {\n        b: {\n            c: 1\n        },\n        d: {\n            e: 2\n        },\n        f: 3\n    },\n    g: 1\n} \n\n// { 'a.b.c': 1, 'a.d.e': 2. 'a.f': 3, g: 1 }\n\nРешение: \nfunction renderObj (obj, prefix = '') {\n    let result = {};\n    \n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            const newKey = prefix ? `${prefix}.${key}` : key;\n            \n            if (typeof obj[key] === 'object' && obj[key] !== null) {\n                Object.assign(result, renderObj(obj[key], newKey));\n            } else {\n                result[newKey] = obj[key];\n            }\n        }\n    }\n    \n    return result\n}\n\nconsole.log(renderObj(obj))"
      }
    ]
  },
  {
    "company": "65Apps",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-17 09:04:18",
        "content": "2025-01-17 09:04:18\n Артем -> 2071074234:\nКомпания 65Apps\nВопросы: \nclass vs id\nмодули в JS\nКакие бывают бандлеры\nКак оптимизировать бандл\nООП\nSolid\nJWT\nЧто храниться на бэки для авторизации\nЗадача\nfunction flat(arr) {\n    return arr.reduce((acc, val) => \n        Array.isArray(val) \n            ? [...acc, ...flat(val)]  // Если элемент - массив, рекурсивно обрабатываем его\n            : [...acc, val],          // Если элемент - не массив, добавляем как есть\n        []\n    );\n}\n\n// Тест\nconsole.l...",
        "full_content": "2025-01-17 09:04:18\n Артем -> 2071074234:\nКомпания 65Apps\nВопросы: \nclass vs id\nмодули в JS\nКакие бывают бандлеры\nКак оптимизировать бандл\nООП\nSolid\nJWT\nЧто храниться на бэки для авторизации\nЗадача\nfunction flat(arr) {\n    return arr.reduce((acc, val) => \n        Array.isArray(val) \n            ? [...acc, ...flat(val)]  // Если элемент - массив, рекурсивно обрабатываем его\n            : [...acc, val],          // Если элемент - не массив, добавляем как есть\n        []\n    );\n}\n\n// Тест\nconsole.log(flat([1, [2, [3, [4,5]]]])); // => [1, 2, 3, 4, 5]"
      }
    ]
  },
  {
    "company": "Ah Group",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-12-03 22:57:16",
        "content": "2024-12-03 22:57:16\n Артем -> 2071074234:\nAH Group тех собес\nВакансия hr написала\nзп 250 \nвопросы:\nвсе точно такаже\nhttps://t.me/c/2071074234/489/74336",
        "full_content": "2024-12-03 22:57:16\n Артем -> 2071074234:\nAH Group тех собес\nВакансия hr написала\nзп 250 \nвопросы:\nвсе точно такаже\nhttps://t.me/c/2071074234/489/74336"
      }
    ]
  },
  {
    "company": "Eq Lab",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-21 10:12:25",
        "content": "2025-03-21 10:12:25\n Timofei Syromiatnikov -> 2071074234:\nКомпания: EQ Lab\nЗП: 300-450к\nВопросов не было\n\nЗадачи:\n1) \n//Что выведет в консоль\ndocument.body.id = 1\nconsole.log(document.body.id === 1)\n2) \nconst instance = {id: \"1\"}\ninstance.id = 2\n\nconsole.log(typeof instance.id) // Как сделать так чтобы выводилось string. (Тема дескрипторов)\n3) \n// event loop\nconsole.log(\"1\")\nconst p1 = new Promise(resolve => {\nconsole.log(\"3\")\nsetTimeout(() => console.log(\"4\"))\nresolve()\n})\n\np1.then(() => {conso...",
        "full_content": "2025-03-21 10:12:25\n Timofei Syromiatnikov -> 2071074234:\nКомпания: EQ Lab\nЗП: 300-450к\nВопросов не было\n\nЗадачи:\n1) \n//Что выведет в консоль\ndocument.body.id = 1\nconsole.log(document.body.id === 1)\n2) \nconst instance = {id: \"1\"}\ninstance.id = 2\n\nconsole.log(typeof instance.id) // Как сделать так чтобы выводилось string. (Тема дескрипторов)\n3) \n// event loop\nconsole.log(\"1\")\nconst p1 = new Promise(resolve => {\nconsole.log(\"3\")\nsetTimeout(() => console.log(\"4\"))\nresolve()\n})\n\np1.then(() => {console.log(\"5\")})\n\nPromise.resolve().then(() => { console.log(\"6\") })\n\nconsole.log(\"2\")\n4) \n// Допиши нужный функционал для работы новостной ленты\nimport { useEffect, useRef, useState } from \"react\";\n\ninterface User {\n  id: number;\n  username: string;\n  avatar: string;\n}\n\ninterface PostResponse {\n  id: number;\n  userId: number;\n  content: string;\n  timestamp: Date;\n}\n\n// Имитация методов API\nasync function getPosts(): Promise<PostResponse[]> {}\nasync function getUser(id: number): Promise<User> {}\nasync function send(message: string): Promise<PostResponse> {}\n\n// Компонент Feed\nexport const Feed = () => {\n  return (\n    <div>\n      <h1>Feed</h1>\n      <div>\n        <textarea placeholder=\"What's happening?\" />\n        <button>Add post</button>\n      </div>\n      <div>\n        {posts.map((post) => (\n          <div>\n            <div>\n              <img src={post.user?.avatar} alt=\"Avatar\" />\n              <h3>{post.user?.username}</h3>\n            </div>\n            <p>{post.content}</p>\n            <small>{post.timestamp.toLocaleString()}</small>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};"
      }
    ]
  },
  {
    "company": "Эремейч Рус",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-17 14:25:45",
        "content": "2025-06-17 14:25:45\n Ильдус Гизетдинов -> 2071074234:\nЭремейч рус\nВакансия https://kazan.hh.ru/vacancy/120833470?hhtmFrom=chat\nВопросы:\nНемного о себе\nПочему ищешь работу\nДелаешь запрос на серв и получаешь ошибку, твои действия\nВ где брал задачи\nНа чем был бек\nЧто такое html\nСемантические теги\nДля чего doctype\nПриведи примеры блочных и строчных тегов и чем отличаются\nКак можно стилизовать элемент\nСпецифичность селекторов\nКакие position есть\nRelative и absolute\nОтносительно чего можно позициониро...",
        "full_content": "2025-06-17 14:25:45\n Ильдус Гизетдинов -> 2071074234:\nЭремейч рус\nВакансия https://kazan.hh.ru/vacancy/120833470?hhtmFrom=chat\nВопросы:\nНемного о себе\nПочему ищешь работу\nДелаешь запрос на серв и получаешь ошибку, твои действия\nВ где брал задачи\nНа чем был бек\nЧто такое html\nСемантические теги\nДля чего doctype\nПриведи примеры блочных и строчных тегов и чем отличаются\nКак можно стилизовать элемент\nСпецифичность селекторов\nКакие position есть\nRelative и absolute\nОтносительно чего можно позиционировать absolute\nПреимущества SCSS\nЧто такое миксины\nКакая типизация в js\nЧто такое js\nКакие типы данных бывают\nСравнение примитивов и ссылочных типов\nОтличие var let const\nВсплытие \n// Как сделать что бы a была доступна \nvar a = 10\nfunction(){\nconsole.log(a)\n}\nconsole.log('' || {}); // {} (пустой объект)\nconsole.log('0' && 2); // 2\nconsole.log('' ?? {}); // '' (пустая строка)\nКак изменить контекст\ncall apply bind\nВиды функций и их разница\nЧто такое this"
      }
    ]
  },
  {
    "company": "Aggregate Digital",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-07 10:52:15",
        "content": "2024-11-07 10:52:15\n Sergey F -> 2071074234:\nКомпания:  Aggregate Digital\nЗП: не обсуждали\nВакансия: https://tver.hh.ru/vacancy/109230359?hhtmFrom=vacancy_search_list\n\nВопросы:\nJS\n- Что такое чистая функция\n- Что такое замыкание (привести кейс замыкания)\n- Как выполняется отрисовка в браузере\n- Когда подключится js\n- Event Loop\n\nReact/redux/effector\n- Что такое VDOM\n- useState, колбек функция стейта\n- Отличия useEffect от useLayoutEffect\n- Что такое key, зачем нужен\n- Что нового в React 18\n- Rea...",
        "full_content": "2024-11-07 10:52:15\n Sergey F -> 2071074234:\nКомпания:  Aggregate Digital\nЗП: не обсуждали\nВакансия: https://tver.hh.ru/vacancy/109230359?hhtmFrom=vacancy_search_list\n\nВопросы:\nJS\n- Что такое чистая функция\n- Что такое замыкание (привести кейс замыкания)\n- Как выполняется отрисовка в браузере\n- Когда подключится js\n- Event Loop\n\nReact/redux/effector\n- Что такое VDOM\n- useState, колбек функция стейта\n- Отличия useEffect от useLayoutEffect\n- Что такое key, зачем нужен\n- Что нового в React 18\n- React.memo, что такое, как юзать, как аргументы\n- FLUX - че такое\n- Что не нравится в эффекторе, какие минусы видишь\n\nTS\n- Отличия типа от интерфейса\n- Есть ли перегрузка в тсе?\n- Что такое satisfies, отличия от as\n- Декораторы"
      }
    ]
  },
  {
    "company": "Тех Тпп Лаб",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-03 20:41:38",
        "content": "2024-07-03 20:41:38\n Tonidevs -> 2071074234:\nТЕХ ТПП ЛАБ\n— ссылка: сама написала\n— ЗП: до 200\n\nВОПРОСЫ\n- с какими хуками работаешь и расскажи про них (useRef, useLayoutEffect)\n- разница между строгим равенством и не строгим === и ==\n- что такое DOM и VDOM в чем разница\n- что такое Portal в реакте\n- какими HTTP методами пользовался и в чем у них разница\n- можем ли мы обновить объект с помощью метода GET\n- можем ли мы создать сущность с помощью метода GET\n- работал ли с авторизацией и на чем\n- что...",
        "full_content": "2024-07-03 20:41:38\n Tonidevs -> 2071074234:\nТЕХ ТПП ЛАБ\n— ссылка: сама написала\n— ЗП: до 200\n\nВОПРОСЫ\n- с какими хуками работаешь и расскажи про них (useRef, useLayoutEffect)\n- разница между строгим равенством и не строгим === и ==\n- что такое DOM и VDOM в чем разница\n- что такое Portal в реакте\n- какими HTTP методами пользовался и в чем у них разница\n- можем ли мы обновить объект с помощью метода GET\n- можем ли мы создать сущность с помощью метода GET\n- работал ли с авторизацией и на чем\n- что такое JWT токен и зачем нужен\n- какие параметры можно передать в полезной нагрузке помимо жизни токена JWT\n- сталкивался ли с ролевой моделью (администратор, клиент, менеджер)\n- последний блок JWT токена подпись(signature) - зачем нужна\n- если мы поменяем paylod в подписи (вместо роли менеджера запишем роль администратора) то будет ли такой токен работать\n- \nЗАДАЧИ\n- рефактор компонента\n// Задачи:\n// 1) При нажатии кнопки значение первого элемента массива на экране должно измениться на \"1\"\n// 2) Исправить ошибки в коде\n\nconst initList = () => {\n  return Array.from({ length: 10 }, (elem, index) => ({ value: Math.random(), label: `row ${index + 1}` }))\n}\n\nexport default function AppTest1() {\n  const [list] = useState(initList());\n\n  const handleUpdate = () => {\n    list[0].value = 1;\n  };\n\n  return (\n    <div>\n      <h1>List test</h1>\n      <Button onClick={handleUpdate}>Update 1 row</Button>\n      {\n        list.map(({ label, value }) => (<Row label={label} value={value} />))\n      }\n    </div>\n  )\n}\n\nfunction Button(props: any) {\n  const { children, onClick } = props;\n  return <button onClick={onClick}>{children}</button>\n}\n\nfunction Row(props: any) {\n  // console.log('Render')\n  const { label, value } = props;\n  return <div>{label}: {value}</div>\n}\n\n- отправка запроса\nimport React, { useEffect, useState } from \"react\";\n\n// Задачи:\n// 1) При каждом вводе нового значения в инпут необходимо запрашивать данные по API jsonplaceholder соответствующего комментария\n// 2) Что делать, если мы хотим на время загрузки отображать лоадер\n// 3) Есть ли проблемы при таком взаимодействии с бэкендом, пути решения\n\ninterface IComment {\n  \"name\": string,\n  \"body\": string\n}\n                                                            //MAX===500;\nconst URL = \"https://jsonplaceholder.typicode.com/comments/\" //+{id} \n\nexport default function AppTest2() {\n  const [value, setValue] = useState('');\n  const [comment, setComment] = useState<IComment>();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value)\n  };\n\n  return (\n    <div>\n      <h1>Input test</h1>\n      <input\n        value={value}\n        onChange={handleChange}\n        type='number'\n      />\n      <div>Текущее значение: {value}</div>\n       <Comment comment={comment} />\n    </div>\n  )\n}\n\ninterface CommentProps {\n  loading?: boolean;\n  comment?: IComment\n}\nfunction Comment({ comment, loading }: CommentProps) {\n  return (\n    <div\n      style={{ borderTop: '1px solid  gray', marginTop: '20px' }}\n    >\n      <h3>Комментарий</h3>\n      <p>Заголовок: {comment?.name}</p>\n      <p>Текст: {comment?.body}</p>\n    </ div>)\n}"
      }
    ]
  },
  {
    "company": "Alfabit",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-02-21 17:48:32",
        "content": "2024-02-21 17:48:32\n DenT -> 2071074234:\n- Компания: Alfabit\n- ссылка на вакансию: hh.ru/vacancy/93338482\n- ЗП: У них две вакансии на фронта, на первой вилка 120-200, на второй 200-250, я сказал, что рассматриваю от 150\n- Был 1 этап собеса с HR, но в конце были вопросы от тим лида на которые нужно было ответить:\n\n- Вопросы:\n1. Какие способы оптимизации ты использовал в своём приложении.\n2. Тебе нужно выполнить объёмную операцию, которая займёт продолжительное время, что нужно сделать, чтобы брау...",
        "full_content": "2024-02-21 17:48:32\n DenT -> 2071074234:\n- Компания: Alfabit\n- ссылка на вакансию: hh.ru/vacancy/93338482\n- ЗП: У них две вакансии на фронта, на первой вилка 120-200, на второй 200-250, я сказал, что рассматриваю от 150\n- Был 1 этап собеса с HR, но в конце были вопросы от тим лида на которые нужно было ответить:\n\n- Вопросы:\n1. Какие способы оптимизации ты использовал в своём приложении.\n2. Тебе нужно выполнить объёмную операцию, которая займёт продолжительное время, что нужно сделать, чтобы браузер не тормозил, не завис.\n3. Утечка памяти. Как ты с ней борешься и какие инструменты используешь.\n4. Бывает, что страница прыгает при отрисовке, как этого избежать.\n5. Какие методы защиты ты используешь для своего приложения.\n6. Синхронные и асинхронные функции.\n7. Есть сайт, где продают кроссовки. Что будет происходить при его запросе, если использовать SSR и SPA\n8. Способы оптимизации vue приложений\n9. Зачем использовать Pinia, если можно обойтись ref.\n\nФитбек пока не дали, все мои ответы hr записала на аудио, завтра отдаст лиду, он прослушает и скажет фитбек. Работют по ГПХ, удалёнка."
      }
    ]
  },
  {
    "company": "Automated Communication Solutions",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-03 08:20:03",
        "content": "2025-06-03 08:20:03\n Kamil -> 2071074234:\nКомпания: Automated Communication Solutions\nВакансия: https://hh.ru/vacancy/120802955\nЗП: 1800$\n\nВопросы:\n1. Готовы перейти на другой JS фреймворк?\n2. Какие задачи были за последний год и чем они отличались от задач других разработчиков?\n3. На сколько большой проект был на фронте: сколько было репозиторий на фронте?\n4. Какого рода были связи между репозиториями?\n5. Использовались ли какие-нибудь общие компоненты?\n6. На базе чего писали вёрстку?\n7. Почему...",
        "full_content": "2025-06-03 08:20:03\n Kamil -> 2071074234:\nКомпания: Automated Communication Solutions\nВакансия: https://hh.ru/vacancy/120802955\nЗП: 1800$\n\nВопросы:\n1. Готовы перейти на другой JS фреймворк?\n2. Какие задачи были за последний год и чем они отличались от задач других разработчиков?\n3. На сколько большой проект был на фронте: сколько было репозиторий на фронте?\n4. Какого рода были связи между репозиториями?\n5. Использовались ли какие-нибудь общие компоненты?\n6. На базе чего писали вёрстку?\n7. Почему на проекте использовали RTK а не другие решения, как thunk?\n8. Рассказать про сокет в проекте.\n9. Какие методы использовались чтобы не было утечек памяти?\n10. Какие приёмы оптимизации использовались на проекте?\n11. Сколько весил проект под конец билда?\n12. Были ли компоненты, которые использовали ленивую загрузку?\n13. С кем больше приходилось взаимодействовать в команде, помимо фронтендеров?\n14.  Какие таски больше всего нравились, а какие меньше всего?\n15. Что означает i18n?\n16. Как у вас происходит ход мыслей, если стоит задача сделать визуально 5 сервисов одинаково, а вы представить одной из 5 команд и у вас у всех визуально разный фронт."
      }
    ]
  },
  {
    "company": "Data World",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-12 20:52:29",
        "content": "2024-11-12 20:52:29\n Camp -> 2071074234:\nНазвание компании: Data World\nСсылка на вакансию:https://hh.ru/vacancy/109746882?hhtmFrom=chat\nЗП: 170 - 220\nВопросы:\n1. Что происходит в браузере, когда мы пишем в адресной строке и нажимаем Enter\n2. Что происходит от этого момента до момента отрисовки на экране нашей страницы.\n3. Мы сделали какой-то запрос и получили на него ответ? а что это за протокол\nи вообще из чего он состоит, какие части этого протокола есть?\n4. У всех ли методов есть body\n5. Как ...",
        "full_content": "2024-11-12 20:52:29\n Camp -> 2071074234:\nНазвание компании: Data World\nСсылка на вакансию:https://hh.ru/vacancy/109746882?hhtmFrom=chat\nЗП: 170 - 220\nВопросы:\n1. Что происходит в браузере, когда мы пишем в адресной строке и нажимаем Enter\n2. Что происходит от этого момента до момента отрисовки на экране нашей страницы.\n3. Мы сделали какой-то запрос и получили на него ответ? а что это за протокол\nи вообще из чего он состоит, какие части этого протокола есть?\n4. У всех ли методов есть body\n5. Как мы можем оптимизировать скорость загрузки страницы\n6. Расскажи, какие механизмы встроенные браузере есть для хранения данных\n7. var let const\n9. Что такое область видимости и какие есть\n10. Что такое замыкание\n11. Из чего состоит лексическое окружение\n12. Что такое this, какие бывают контексты исполнения. Как его менять\n13. Что такое Call, apply, bind\n14. Расскажи про Eventloop\n15. Что такое виртуальный дом?\n16. Что такое хуки, с какими приходилось работать \n17. Расскажи про useEffect\n\nЗадачи: \n\n1. Чему будет равен counter:\nlet counter = 0;\n\nfunction foo() {\n    const str = Current value is ${counter};\n\n    function inc() {\n        ++counter;\n    }\n\n    function log() {\n        console.log(str);\n    }\n\n    return[inc, log];\n}\n\nconst [inc, log] = foo();\n\ninc();\ninc();\ninc();\n\nlog();\n\n2. В каком порядке выведутся логи:\nconsole.log(1);\n\nfunction foo() {\n    console.log(2);\n\n    setTimeout(() => {\n        console.log(3);\n\n        new Promise((resolve) => {\n            console.log(4)\n            resolve();\n        })\n    }, 0);\n}\n\nfoo();\n\nconsole.log(5);\n3. Отрефакторить код:\nimport React, { useState, memo } from 'react';\n\n// Компонент для отображения отдельной задачи\n\nconst TodoItem = ({ task, onToggle, onDelete }) => {\n    console.log(`Rendering: ${task.text}`);\n    return (\n        <li>\n            <span\n                style={{textDecoration: task.completed ? `line-through` : `none` }}\n                onClick={onToggle}\n                >\n                    {task.text}\n                </span>\n                <button onClick={onDelete}>Delete</button>\n        </li>\n    );\n};\n\nconst TodoList = () => {\n    const [tasks, setTasks] = useState([]);\n    const [taskInput, setTaskInput] = useState(``);\n\n    const addTask = () => {\n        if (taskInput) {\n            setTasks([...tasks, { id: Date.now(), text: taskInput, completed: false }]);\n            setTaskInput(``);\n        }\n    };\n\n    const toggleTask = (id) => {\n        setTasks(tasks.map(task => task.id === id ? {...task, completed: !task.completed } : task));\n    };\n\n    const deleteTask = (id) => {\n        setTasks(tasks.filter(task => task.id !== id));\n    };\n\n    return (\n        <div>\n            <h1>Todo List</h1>\n\n            <input\n                value={taskInput}\n                onChange={(e) => setTaskInput(e.target.value)}\n                placeholder=\"Add new task\"\n            />\n\n            <button onClick={addTask}>Add</button>\n\n            <ul>\n                {tasks.map(task => (\n                    <TodoItem\n                    task={task}\n                    onToggle={() => toggleTask(task.id)}\n                    onDelete={() => deleteTask(task.id)}\n                    />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default TodoList;"
      }
    ]
  },
  {
    "company": "Lady & Gentalmens",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-12-02 12:30:40",
        "content": "2024-12-02 12:30:40\n Артем -> 2071074234:\nКомпания lady & gentalmens\nзп 180\nВопросы\nочень странный собес \nспросил про опыт\nкак учусь\nчто изучаю\nкак рзвиваюсь \nдальше я поспрашивал \nи все",
        "full_content": "2024-12-02 12:30:40\n Артем -> 2071074234:\nКомпания lady & gentalmens\nзп 180\nВопросы\nочень странный собес \nспросил про опыт\nкак учусь\nчто изучаю\nкак рзвиваюсь \nдальше я поспрашивал \nи все"
      }
    ]
  },
  {
    "company": "Merlion Tech",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-24 16:59:12",
        "content": "2025-04-24 16:59:12\n Артур Виноградов -> 2071074234:\nMerlion Tech\nВакансия: https://spb.hh.ru/vacancy/118989695\nЗП: 300\n\nВопросы:\nПро интересные задачи и проекты\nПодробно про мессенджер (челу лишь бы задать какие-то вопросы по ощущению)\nПодробно про опыт\nServer Side Rendering был ли опыт\nКакие есть ограничения в компонентах в SSR\nПро graphQL и Rest\nГде бы применял graphQL\nКак оценишь себя в TS от 0 до 10\nCookie vs localStorage\nЗамыкания, где применял на работе, использовал ли в React.\nПро Event ...",
        "full_content": "2025-04-24 16:59:12\n Артур Виноградов -> 2071074234:\nMerlion Tech\nВакансия: https://spb.hh.ru/vacancy/118989695\nЗП: 300\n\nВопросы:\nПро интересные задачи и проекты\nПодробно про мессенджер (челу лишь бы задать какие-то вопросы по ощущению)\nПодробно про опыт\nServer Side Rendering был ли опыт\nКакие есть ограничения в компонентах в SSR\nПро graphQL и Rest\nГде бы применял graphQL\nКак оценишь себя в TS от 0 до 10\nCookie vs localStorage\nЗамыкания, где применял на работе, использовал ли в React.\nПро Event Loop.\nКак сделать настоящую асинхроность, можно ли стартовать новый поток?\nПро стейт менеджеры, какой бы выбрал на новом проекте?\nКакие ограничения на использование хуков в реакт?\nРазница между useState, useRef\nРазница между useEffect, useLayoutEffect\nМемоизация, зачем нужна, чек-лист когда использовать?\nПо каким признакам понять что не хватает мемоизации?\nБыли ли задачи по оптимизации?\nКак оценишь себя в работе с гитом от 0 до 10?\nКакой бы делал стек на новом проекте?\nКак саморазвиваешься?\nЧто ищешь на новом месте и почему уходишь со старого?\n\nЗадачи:\n// Выведет ли данный код что-то и почему\n// откуда toString\nclass Animal {}\nconst dog = new Animal();\nconsole.log(dog.toString()):\nОтвет: выведет \"[Object object]\"\ntoString из-за наследования от объекта\n\n// будет ли этот код работать\nclass A {}\nclass B {}\nclass Animal extends A, B {} \n\n// Как можно реализовать N чтобы\n// следующий код вывел в консоль \"3\"?\nconsole.log(new N(1) + new N(2));\n\nответ\nclass N {\n  constructor(val) {\n    this.val = val;\n  }\n\n  valueOf() {\n     return this.val;\n  }\n}\n\n// когда выведется hello\nsetTimeout(() => console.log(\"hello\"), 200):\nconst start = Date.now();\nwhile (Date.now() < start + 5000) {\n // что-то выполняем\n}\n\nОтвет: через 5 сек\n\n// в чем проблема кода? кейсы где можно применять?\ntype Item<T> = {\n id: string;\n value: T;\n};\n\nfunction arrayToKeyValue<T>(items: Item<T>[]): Record<string, T> {\n  return items.reduce((acc, it) => {\n    return Object.assign({}, acc, {\n      [it.id]: it.value,\n    });\n  }, {});\n}\n\nответ:  Каждый раз создаёт новый объект и засоряет память\nнадо переписать так\ntype Item<T> = {\n id: string;\n value: T;\n};\n\nfunction arrayToKeyValue<T>(items: Item<T>[]): Record<string, T> {\n  return items.reduce((acc, it) => {\n    acc[it.id] = it.value;\n    return acc;\n  }, {});\n}"
      }
    ]
  },
  {
    "company": "Спринтерра",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-18 09:02:32",
        "content": "2025-03-18 09:02:32\n Nikolai -> 2071074234:\nКомпания: Спринтерра\nЗП до 290 gross\n\nВопросы:\n1. Какая роль в команде?\n2. Команда 13 человек - прямо выделенная команда? Сколько митинги время занимали?\n3. Как часто релизы были?\n4. Бэкенд и фронтенд все вместе вшли в релизах?\n5. Кто знаимался CI/CD? Был ли опыт по настройке?\n6. Опыт тестов End-to-End, cypress, playwright, selenium, функциональных?\n7. Кто ими занимался? Как были устроены тесты?\n8. Плюсы JS и TS сравнение.\n9. Работал ли с accessability...",
        "full_content": "2025-03-18 09:02:32\n Nikolai -> 2071074234:\nКомпания: Спринтерра\nЗП до 290 gross\n\nВопросы:\n1. Какая роль в команде?\n2. Команда 13 человек - прямо выделенная команда? Сколько митинги время занимали?\n3. Как часто релизы были?\n4. Бэкенд и фронтенд все вместе вшли в релизах?\n5. Кто знаимался CI/CD? Был ли опыт по настройке?\n6. Опыт тестов End-to-End, cypress, playwright, selenium, функциональных?\n7. Кто ими занимался? Как были устроены тесты?\n8. Плюсы JS и TS сравнение.\n9. Работал ли с accessability?\n10. По архитектуре приложение монолит?\n11. Какая организация организация структуры была? FSD или плоская структура или atomic?\n12. Опыта работы с мобильными приложениями не было?\n13. Как было организована работа с сокетами?\n14. На чем был бэк?\n15. На сколько высоконагруженная была система? Порядок юзеров.\n16. Приложение\n17. Приходилось ли сталкиваться с поддержкой продакшена? Приходили запросы от клинетов и приходилось с этими запросами работать?\n18. Опыт экстремального программирования? TDD? \n19. Задачи падали резжеванные, все прописано было?\n20. Аналитики ближе к айти были или из разряда по госту?\n\nЗадачи:\n// Требуется сказать что будет выведено в консоль и почему так и как поправить\n\nlet count = 0;\nfunction createCounter() {\n    return {\n        increment: () => {\n            count++;\n        },\n        getCount: () => {\n            return count;\n        },\n    };\n}\n\nconst counter1 = createCounter();\ncounter1.increment();\ncounter1.increment();\nconst counter2 = createCounter();\ncounter2.increment();\nconsole.log(counter1.getCount()); // ожидается 2\nconsole.log(counter2.getCount()); // ожидается 1\n\n________________________________________________________________\n\n/**\n * 1. Что будет в результате выполнения этого кода? /\n * 2. Как это исправить? */\nfunction fetchUserData(userId) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (userId > 0) {\n                resolve({ id: userId, name: `User ${userId}` });\n            } else {\n                reject(new Error(\"Invalid user ID\"));\n            }\n        }, 1000);\n    });\n}\n\nconst userIds = [1, 2, -3, 4];\nPromise.all(userIds.map(fetchUserData))\n    .then(users => {\n        console.log(\"All users:\", users);\n    })\n    .catch(error => {\n        console.error(\"Error fetching users:\", error.message);\n    });\n\n______________________________________________________________________\n\nКакие логи будут, и допущение что у нас промис может принимать не только строку, что будет и как поправить?\n\nfunction fetchData() {\n    return new Promise((resolve) => {\n        setTimeout(() => resolve(\"Data\"), 1000);\n    });\n}\n\nfetchData()\n    .then((data) => {\n        console.log(data);\n        return data.toUpperCase();\n    })\n    .then((uppercasedData) => {\n        console.log(uppercasedData);\n    })\n    .catch((error) => {\n        console.error(\"Error:\", error.message);\n    });\n\n______________________________________________________________\n\nкакая последовательность логов?\n\nconsole.log(\"Start\");\nsetTimeout(() => {\n    console.log(\"Timeout 1\");\n    Promise.resolve().then(() => {\n        console.log(\"Promise inside Timeout 1\");\n    });\n}, 0);\nPromise.resolve()\n    .then(() => {\n        console.log(\"Promise 1\");\n        setTimeout(() => {\n            console.log(\"Timeout inside Promise 1\");\n        }, 0);\n    })\n    .then(() => {\n        console.log(\"Promise 2\");\n    });\nsetTimeout(() => {\n    console.log(\"Timeout 2\");\n}, 0);\nconsole.log(\"End\");\n\n______________________________________________________________\n\nКакие ошибки здесь?\n\ntype ApiResponse<T> = {\n  data: T | null;\n  error: string | null;\n};\n\nfunction fetchData<T>(url: string): ApiResponse<T> {\n  try {\n    const response = fetch(url); // Предположим, что fetch возвращает данные\n    return { data: response.json(), error: null };\n  } catch (err) {\n    return { data: null, error: err.message };\n  }\n}\n\nconst result = fetchData<{ id: number; name: string }>(\n  \"https://api.example.com/user\"\n);\nconsole.log(result.data.id);"
      }
    ]
  },
  {
    "company": "Издательство Национальное Образование",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-28 11:49:16",
        "content": "2025-06-28 11:49:16\n Илья -> 2071074234:\nИздательство Национальное Образование\nReact native\nЗп 250к\n\nЛегкий собес был. Спрашивали за опыт, можно просто по легенде пройтись. Спрашивали по жизни, что тебе нравится. За математику разговаривали. Спрашивал объясни простому человеку, как работает стейт менеджер))) Он ничего не понял, потом в техническом плане спросил как работает. \nПотом спросил про паттерны проектирования(синглтон, observer, builder, decorator, фасад)\nИ про паттерны программирования ...",
        "full_content": "2025-06-28 11:49:16\n Илья -> 2071074234:\nИздательство Национальное Образование\nReact native\nЗп 250к\n\nЛегкий собес был. Спрашивали за опыт, можно просто по легенде пройтись. Спрашивали по жизни, что тебе нравится. За математику разговаривали. Спрашивал объясни простому человеку, как работает стейт менеджер))) Он ничего не понял, потом в техническом плане спросил как работает. \nПотом спросил про паттерны проектирования(синглтон, observer, builder, decorator, фасад)\nИ про паттерны программирования (dry, kiss, yagni, solid)"
      }
    ]
  },
  {
    "company": "Kamaz Digital",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-07 17:15:07",
        "content": "2024-11-07 17:15:07\n Гасим Мурасов -> 2071074234:\nкомпания: kamaz digital\nзп: 320к просил\nвакансия: https://hh.ru/vacancy/108984552?hhtmFrom=vacancy_search_list\nвидео: https://www.youtube.com/watch?v=vw2h3lLCXl0\n\nтехсобес, но без лайвкодинг\nangular/cesium Js",
        "full_content": "2024-11-07 17:15:07\n Гасим Мурасов -> 2071074234:\nкомпания: kamaz digital\nзп: 320к просил\nвакансия: https://hh.ru/vacancy/108984552?hhtmFrom=vacancy_search_list\nвидео: https://www.youtube.com/watch?v=vw2h3lLCXl0\n\nтехсобес, но без лайвкодинг\nangular/cesium Js"
      }
    ]
  },
  {
    "company": "RTSoft",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-06 07:03:08",
        "content": "2025-06-06 07:03:08\n Василий -> 2071074234:\nКомпания RTSoft(РТсофт)\n\n1)Что  в консоли\nfunction hoist() {\n  console.log(c)\n  a = 20\n  var b = 100\n  var c = 50\n}\n\nhoist()\nconsole.log(a)\nconsole.log(b)\n\n//Решение:\n//undefined 20 referenceError\nsetTimeout(function timeout() {\n  console.log(1);\n}, 0);\n\nlet p = new Promise(function(resolve, reject) {\n  console.log(2);\n  resolve();\n});\n\np.then(function() {\n  console.log(4);\n});\n\nqueueMicrotask(() => console.log(3));\n\nconsole.log(5);\n\n//Решение:\n//2 5 3...",
        "full_content": "2025-06-06 07:03:08\n Василий -> 2071074234:\nКомпания RTSoft(РТсофт)\n\n1)Что  в консоли\nfunction hoist() {\n  console.log(c)\n  a = 20\n  var b = 100\n  var c = 50\n}\n\nhoist()\nconsole.log(a)\nconsole.log(b)\n\n//Решение:\n//undefined 20 referenceError\nsetTimeout(function timeout() {\n  console.log(1);\n}, 0);\n\nlet p = new Promise(function(resolve, reject) {\n  console.log(2);\n  resolve();\n});\n\np.then(function() {\n  console.log(4);\n});\n\nqueueMicrotask(() => console.log(3));\n\nconsole.log(5);\n\n//Решение:\n//2 5 3 4 1\nPromise.resolve(1)\n  .then(x => x + 1)\n  .then(x => {\n    throw x\n  })\n  .then(x => console.log(x))\n  .catch(err => {\n    console.log(err)\n  }) //тут 2\n  .then(x => Promise.resolve(1))\n  .catch(err => console.log(err))\n  .then(x => console.log(x)) //тут 1\n\n//Решение: 2, 1\n2) Методы all и allSettled в чем разница?\n3) Что происходит после введения url в адресную строку?\n4) Все способы оптимизации приложения\n5) Какие есть ограничения у WebWorkers\n6) Расскажи про объект Proxy\n7) Разница между for in и for of\n8) Отличие interfece от type\n9) Utility types – Pick, Omit, Exclude в чем разница\n10) Все TypeGuardes\n11) Как извлечь тип, который возвращает функция ReturnType\n\n12) Рефактор кода, это мой исправленный вариант\nimport { useEffect, useState, useMemo } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './style.css';\n\n// 1. Выносим все типы в отдельные интерфейсы ====================\ninterface Product {\n  description: string;\n  id: string;\n  info: string;\n  name: string;\n}\n\ninterface Shop {\n  coordinate: number[];\n  id: string;\n  name: string;\n  priceList: Record<string, string>;\n}\n\n// Конфигурация\nconst CONFIG = {\n  CURRENCY: '$',\n  API_URL: 'https://my-json-server.typicode.com/cyberwalrus/demo'\n};\n\n// Кастомный хук для получения данных\nconst useFetchData = <T,>(endpoint: string) => {\n  const [data, setData] = useState<T[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`${CONFIG.API_URL}/${endpoint}`);\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const json = await response.json();\n        setData(json);\n      } catch (err) {\n        setError(err as Error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [endpoint]);\n\n  return { data, loading, error };\n};\n\ninterface TimerProps {\n  initial?: number;\n}\n\n// 2. Используем TimerProps для пропсов ============================\nconst Timer = ({ initial = 10 }: TimerProps) => {\n  const [time, setTime] = useState(initial);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTime(prev => prev > 0 ? prev - 1 : 0);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return <div className=\"Controls\">{time}</div>;\n};\n\ninterface ShopsItemsProps {\n  productId: string;\n}\n// 3. Используем ShopsItemsProps для пропсов =======================\nconst ShopsItems = ({ productId }: ShopsItemsProps) => {\n  const { data: shops, loading, error } = useFetchData<Shop>('shops');\n\n  const filteredShops = useMemo(() =>\n    shops.filter(shop => shop.priceList[productId]),\n    [shops, productId]\n  );\n\n  if (loading) return <div>Loading shops...</div>;\n  if (error) return <div>Error loading shops: {error.message}</div>;\n\n  return (\n    <ul className=\"postList\">\n      {filteredShops.map(({ name, priceList, id: shopId }) => (\n        <li className=\"post__header\" key={shopId}>\n          {name} - {priceList[productId]}{CONFIG.CURRENCY}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst ProductList = () => {\n  const { data: products, loading, error } = useFetchData<Product>('products');\n\n  if (loading) return <div>Loading products...</div>;\n  if (error) return <div>Error loading products: {error.message}</div>;"
      }
    ]
  },
  {
    "company": "Gitverse",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-09-24 16:40:33",
        "content": "2024-09-24 16:40:33\n Александр -> 2071074234:\nКомпания: GitVerse\nВакансия: HR сама написал \nЗП: 250к\nВопросы:\n- Расскажи про свой опыт\n- Расскажи про проекты \n- Расскажи про флоу который был\n- Собираюсь идти дальше в разработчики или собираюсь уходить в тимлиды \n- Расскажи был ли опыт работы с Next.Js\n\nСобес был очень коротки около получаса, на некст не позвали",
        "full_content": "2024-09-24 16:40:33\n Александр -> 2071074234:\nКомпания: GitVerse\nВакансия: HR сама написал \nЗП: 250к\nВопросы:\n- Расскажи про свой опыт\n- Расскажи про проекты \n- Расскажи про флоу который был\n- Собираюсь идти дальше в разработчики или собираюсь уходить в тимлиды \n- Расскажи был ли опыт работы с Next.Js\n\nСобес был очень коротки около получаса, на некст не позвали"
      }
    ]
  },
  {
    "company": "Ооо Мобайлдевелопмент",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-24 08:17:08",
        "content": "2024-10-24 08:17:08\n Camp -> 2071074234:\n-Название компании: ООО МобайлДевелопмент (IceRock Development)\n-Ссылка на вакансию: https://hh.ru/vacancy/108309644?hhtmFrom=chat\n-ЗП: 170-220 Middle +  \nВопросы:\nВ чем разница между блочными и строчными элементами.\nКак можно задать элементу тип гибридный, чтобы он комбинировал свойства, блочных и строчных.\nКакие могут быть проблемы связанных с поддержкой разных браузеров\nКакие типы данных в js\nКакие нововведения в ES6 появились\nОтличие var, let const\nчт...",
        "full_content": "2024-10-24 08:17:08\n Camp -> 2071074234:\n-Название компании: ООО МобайлДевелопмент (IceRock Development)\n-Ссылка на вакансию: https://hh.ru/vacancy/108309644?hhtmFrom=chat\n-ЗП: 170-220 Middle +  \nВопросы:\nВ чем разница между блочными и строчными элементами.\nКак можно задать элементу тип гибридный, чтобы он комбинировал свойства, блочных и строчных.\nКакие могут быть проблемы связанных с поддержкой разных браузеров\nКакие типы данных в js\nКакие нововведения в ES6 появились\nОтличие var, let const\nчто такое EventLoop\nпромисы,  как они работают, как с ними работают\nSet Map Автобоксинг\nкак реакт управляет состоянием\nчем отличаются функциональные отклассовых компонентов?\nкак работает useEffect\nкак пропсы в реакт работают\nмемоизация, какие способы\nкакие основные преимущества у TypeScript\nЧем интерфейсы отличаются от типов.\n\nЧто выведет в консоль:\n (2).plus(3).minus(1)\n \nОтрефакторить код:\n\nimport React, { useState, useEffect } from 'react';\n\nexport interface User {\n    id: number\n    email: string\n    first_name: string\n    last_name: string\n    avatar: string\n}\n\nexport interface Response {\n    page: number\n    per_page: number\n    total: number\n    total_pages: number\n    data: User[]\n}\n\nconst UserList: React.FC = () => {\n    const [users, setUsers] = useState < User[] > ([]);\n    const [loading, setLoading] = useState < boolean > (false);\n    const [filter, setFilter] = useState < string > ('');\n  const [search, setSearch] = useState<string> ('');\n  \n  useEffect (() => {\n    setLoading(true);\n    fetch('https: //reqres.in/api/users')\n      .then(response => response.json())\n      .then(data => {\n                setUsers(data.data);\n                setLoading(false);\n            })\n            .catch(() => {\n                console.error('Error fetching users');\n                setLoading(false);\n            });\n  }, []);\n      \n  const handleSearch = () => {\n    setFilter(search);\n  };\n  \n  const filteredUsers = users.filter(\n    user => user.first_name.includes(filter) || user.last_name.includes(filter)\n  );\n  \n  return (\n    <div>\n      <h1>User List</h1>\n      <input type = \"text\" value = {search} onChange = {(e) => setSearch(e.target.value)}/>\n      <button onClick={handleSearch}>Search</button>\n      {loading ? (\n        <p> Loading... </p>\n      ) : (\n        <ul>\n          {filteredUsers.length > 0 ? (\n            <ul>\n              {filteredUsers.map(user => (\n                <li>\n                  <p>{user.first_name} {user.last_name} ({user.email})</p>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>No users found</p> // Сообщение об отсутствии пользователей\n          )}\n        </ul>\n      )}\n    </div>\n  )\n};\n          \nexport default UserList;\n\n1. Написать счетчик, типизировать состояние счетчика с помощью TypeScript\n\n2. Переделать счетчик в таймер, начинать отсчет с 10\nКаждую секунду уменьшать на 1, в конце вывести сообщение \"Время вышло\" и остановить таймер"
      }
    ]
  },
  {
    "company": "Loyalty Labs, Hr Созвон С Тех Вопросами",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-10 18:11:08",
        "content": "2024-07-10 18:11:08\n Artur -> 2071074234:\nLoyalty labs, hr созвон с тех вопросами\n\n— Вакансия: https://hh.ru/vacancy/101880669?from=share_android\n— ЗП: сказал 200к+\n\nВопросы:\nстандартные для hr, лень перечислять)\n\nЗадачи:\n1) что выведет\n\nsetTimeout(function timeout() {\n    console.log('Таймаут');\n}, 0);\n\nlet p = new Promise(function(resolve, reject) {\n    console.log('Создание промиса');\n    resolve();\n});\n\np.then(function() {\n    console.log('Обработка промиса');\n});\n\nconsole.log('Конец скрипта...",
        "full_content": "2024-07-10 18:11:08\n Artur -> 2071074234:\nLoyalty labs, hr созвон с тех вопросами\n\n— Вакансия: https://hh.ru/vacancy/101880669?from=share_android\n— ЗП: сказал 200к+\n\nВопросы:\nстандартные для hr, лень перечислять)\n\nЗадачи:\n1) что выведет\n\nsetTimeout(function timeout() {\n    console.log('Таймаут');\n}, 0);\n\nlet p = new Promise(function(resolve, reject) {\n    console.log('Создание промиса');\n    resolve();\n});\n\np.then(function() {\n    console.log('Обработка промиса');\n});\n\nconsole.log('Конец скрипта');\n\n\n2) что выведет\n\nfunction add(x: string, y: string): string;\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\nadd('1', '2');\n\n3) какой цвет будет\n<div class=\"App\">\n    <div id=\"box\" class=\"box\"></div>\n</div>\n\n<style>\n#box {\n    background-color: green;\n}\n\n.App .box {\n    background-color: blue;\n}\n\n.box {\n    width: 50px;\n    height: 50px;\n    background-color: red;\n}\n</style>\n\n\n4) Составь интерфейс X, наследующий интерфейс Y, но со всеми необязательными свойствами.\nДобавь в этот интерфейс свойство props в виде объекта, в котором ключом будет один из ключей интерфейса Y, а значением - boolean.\nСоздай дженерик Z, состоящий из динамического поля data. В изначальном интерфейсе должно быть поле с любым типом, использующее этот дженерик\n\ninterface Y {\n  optionalProperty?: number;\n}\n\ninterface X extends Partial<Y> {\n  props: { [K in keyof Y]?: boolean };\n}\n\ntype Z<T> {\n  data: T\n}\n\ninterface InitialInterface {\n  field: Z<any>\n}"
      }
    ]
  },
  {
    "company": "Heropayments",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-20 15:06:03",
        "content": "2024-11-20 15:06:03\n Timofei Syromiatnikov -> 2071074234:\n— Компания: Heropayments\n— Вакансия: написала hr\n— ЗП: 280к\n— Вопросы (очень много копающих вопросов было про контекст и область видимости, как это все работает в нативном JS):\n1) Значешь что такое bind? Для чего он нужен, что в себя принимает, первым и вторым третим и т.д. аргументами.\n2) Можем ли мы использовать bind на стрелочной функции и будет ли он работать? Если будет то какие особенности, как мы можем передать стрелочной функции н...",
        "full_content": "2024-11-20 15:06:03\n Timofei Syromiatnikov -> 2071074234:\n— Компания: Heropayments\n— Вакансия: написала hr\n— ЗП: 280к\n— Вопросы (очень много копающих вопросов было про контекст и область видимости, как это все работает в нативном JS):\n1) Значешь что такое bind? Для чего он нужен, что в себя принимает, первым и вторым третим и т.д. аргументами.\n2) Можем ли мы использовать bind на стрелочной функции и будет ли он работать? Если будет то какие особенности, как мы можем передать стрелочной функции нужные данные через bind?\n3) Из чего состоит класс в нативном JS?\n4) Как объявить переменные в классе?\n5) Для чего нужен конструктор?\n6) Можем ли мы использовать асинхронный синтаксис в конструкторе? По типу перед конструктором написать async и внутри this.data = await getData()\n7) Назови все случаи перерендера компонента в React?\n8) Как работает замыкание в JS? И где мы можем его применить на практике?\n9) Что такое область видимости в JS?\n10) С помощью чего можно закешировать данные в React? И расскажи различие в каких случаях что использовать\n11) Как реакт понимает что что то изменилось и это надо перерендерить, как это работает под капотом?"
      }
    ]
  },
  {
    "company": "Match",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-26 13:36:31",
        "content": "2025-02-26 13:36:31\n Artem -> 2071074234:\nКомпания: Match\nВакансия: Написала hr\n\nВопросы:\n1) Много вопросов по опыту работы\n2) Что происходит когда человек в водит адрес в адресную строку\n3) Как оптимизировать приложение\n4) Что такое дженерики\n5) Отличие interface от Type\n6) async/defer\n7) В чем минус websocket \n8) Какие методы адаптивной верстки знаешь\n9) CORS\n\nБез лайвкодинга",
        "full_content": "2025-02-26 13:36:31\n Artem -> 2071074234:\nКомпания: Match\nВакансия: Написала hr\n\nВопросы:\n1) Много вопросов по опыту работы\n2) Что происходит когда человек в водит адрес в адресную строку\n3) Как оптимизировать приложение\n4) Что такое дженерики\n5) Отличие interface от Type\n6) async/defer\n7) В чем минус websocket \n8) Какие методы адаптивной верстки знаешь\n9) CORS\n\nБез лайвкодинга"
      }
    ]
  },
  {
    "company": "Bnd Llc",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-21 13:22:17",
        "content": "2024-10-21 13:22:17\n Никита -> 2071074234:\nКомпания BND LLC\nВакансия https://hh.ru/vacancy/107854068?hhtmFrom=employer_vacancies\nзп: не говорили\nвопросы:\nочень много про опыт\n1 что такое react?\n2 подробнее про vdom\n3 что такое условный рендеринг\n4 как асинхронность реализуется в js\n5 какие хуки используешь\n6 подробнее про useRef, зачем он нужен?\n7 зачем нужен ts?\n8 \nconsole.log('start')\nconst promise1 = new Promise((res,rej)=>{\nconsole.log(1)\nres(2)\n})\n\npromise1.then(res=>{\nconsole.log(res)\n})\nc...",
        "full_content": "2024-10-21 13:22:17\n Никита -> 2071074234:\nКомпания BND LLC\nВакансия https://hh.ru/vacancy/107854068?hhtmFrom=employer_vacancies\nзп: не говорили\nвопросы:\nочень много про опыт\n1 что такое react?\n2 подробнее про vdom\n3 что такое условный рендеринг\n4 как асинхронность реализуется в js\n5 какие хуки используешь\n6 подробнее про useRef, зачем он нужен?\n7 зачем нужен ts?\n8 \nconsole.log('start')\nconst promise1 = new Promise((res,rej)=>{\nconsole.log(1)\nres(2)\n})\n\npromise1.then(res=>{\nconsole.log(res)\n})\nconsole.log('end')"
      }
    ]
  },
  {
    "company": "Онлайн Решения",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-05-22 10:15:11",
        "content": "2025-05-22 10:15:11\n Иван Горюнов -> 2071074234:\nОнлайн Решения\nЗапросил 230к\nвакансия (https://penza.hh.ru/vacancy/120573024?hhtmFromLabel=employer_vacancy_tab&hhtmFrom=employer)\n- Про работу с сервером (HTTP/WebSocket)\n- Тело HTTP запроса\n- Авторизация/Аутентификация\n- CORS\n- ООП\n- Прототипное наследование\n- hasOwnProperty/in отличия\n- arrow function/ function declaration отличия\n- почему typeof Array === object/ Как проверить что это массив\n- Async/await как работает\n- Что такое Promise\n- Any...",
        "full_content": "2025-05-22 10:15:11\n Иван Горюнов -> 2071074234:\nОнлайн Решения\nЗапросил 230к\nвакансия (https://penza.hh.ru/vacancy/120573024?hhtmFromLabel=employer_vacancy_tab&hhtmFrom=employer)\n- Про работу с сервером (HTTP/WebSocket)\n- Тело HTTP запроса\n- Авторизация/Аутентификация\n- CORS\n- ООП\n- Прототипное наследование\n- hasOwnProperty/in отличия\n- arrow function/ function declaration отличия\n- почему typeof Array === object/ Как проверить что это массив\n- Async/await как работает\n- Что такое Promise\n- Any/unknown отличия\n- Свойства display\n- Селекоры какие бывают\n- Специфичность селекторов\n- Зачем нужен Talwind\n- Какие бандлеры бывают, зачем они нужны\n- Зачем нужен key в React?\n- Что такое реляционная модель\n- Вопросы по Git\n(git reset, fit rebase, squash)\n- Работал ли с Node.js\n- Работал ли с Линуксом\n- Какая у тебя IDE?"
      }
    ]
  },
  {
    "company": "Huntit",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-12-28 16:03:09",
        "content": "2024-12-28 16:03:09\n Damir -> 2071074234:\nКомпания: HuntIT\nВакансия: hr написала\nЗп: 250k\n\nВопросы:\n- по резюме от и до, про все места работы \n- почему фронт, а не что-то другое\n- самая сложная интересная задача\n\n1) Критический путь рендера\n2) Как браузер понимает, что пришел именно html - Content type: text-html\n3) Блокирующие скрипты, неблокирующие\n4) Оптимизация фронта (не в контексте реакта)  (загружается сайт - белый экран, шо буишь делать)\n5) Блокирующий css, как оптимизировать\n6) Тесты - ...",
        "full_content": "2024-12-28 16:03:09\n Damir -> 2071074234:\nКомпания: HuntIT\nВакансия: hr написала\nЗп: 250k\n\nВопросы:\n- по резюме от и до, про все места работы \n- почему фронт, а не что-то другое\n- самая сложная интересная задача\n\n1) Критический путь рендера\n2) Как браузер понимает, что пришел именно html - Content type: text-html\n3) Блокирующие скрипты, неблокирующие\n4) Оптимизация фронта (не в контексте реакта)  (загружается сайт - белый экран, шо буишь делать)\n5) Блокирующий css, как оптимизировать\n6) Тесты - какие писал, какие знаешь? \n7) Шрифты, иконки - как они грузятся \n\n- Чуть про ssr было, но это я туда загнул чисто поболтать \n\nЗадачки: \n\n\n// Вывести значения переменной i в консоль,\n// между выводами должна быть задержка в 1 секунду.\n// Вывод должен отображать значение переменной\n// на каждой итерации.\nfor (let i = []; i.length < 3; i.push(1)) {\n  setTimeout(\n    function (i) {\n      console.log(i);\n    },\n    i.length * 1000,\n    [...i]\n  );\n}\n\n\n\n\n\n\nconst mockRequestTimer = () => {\n  // console.log(\"outside promise\");\n  return new Promise((res) => {\n    // console.log(\"inside promise\");\n\n    setTimeout(() => {\n      // console.log(\"timer resolve\");\n\n      res(\"data without timer\");\n    }, 0);\n  });\n};\n\nconst asyncFunc = async () => {\n  // console.log(\"check 01\");\n\n  const timerResult = await mockRequestTimer();\n\n  // console.log(\"check 02\");\n  // console.log(\"timerResult\", timerResult);\n};\n\n// console.log(\"prepare\");\n\nasyncFunc();\n\n// console.log(\"after\");\n\n/*\n  \n*/"
      }
    ]
  },
  {
    "company": "Центральный Банк Рф",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-05-31 14:44:56",
        "content": "2024-05-31 14:44:56\n Artur -> 2071074234:\nКомпания: Центральный Банк РФ\nСсылка на вакансию: сами позвонили\nСсылка на собес: https://disk.yandex.ru/i/h6dSEmIpvJAWkQ\nЗП: неизвестно\nУровень: неизвестно\nУспех собеса: ?\n\nВопросы:\n— Как задачи разбивались, кто за что отвечал, как ревью происходил\n— Стейт и пропс, разница\n— Жизненные циклы компонента\n— При изменения стейта будет ли рендеринг\n— Как изменить пропс в родительском компоненте\n— Canvas и SVG, разница\n— DOM что это\n— Методы запросов, GET и PO...",
        "full_content": "2024-05-31 14:44:56\n Artur -> 2071074234:\nКомпания: Центральный Банк РФ\nСсылка на вакансию: сами позвонили\nСсылка на собес: https://disk.yandex.ru/i/h6dSEmIpvJAWkQ\nЗП: неизвестно\nУровень: неизвестно\nУспех собеса: ?\n\nВопросы:\n— Как задачи разбивались, кто за что отвечал, как ревью происходил\n— Стейт и пропс, разница\n— Жизненные циклы компонента\n— При изменения стейта будет ли рендеринг\n— Как изменить пропс в родительском компоненте\n— Canvas и SVG, разница\n— DOM что это\n— Методы запросов, GET и POST, разница в виде формата, как в GET формируется строка запроса\n— Redux, что это, для чего он, как появился\n— Что нужно сделать, чтобы подключить стор\n— С какими БД работал\n— Препроцессоры, зачем и какие плюсы\n— npm, что это, какие у него проблемы\n— JSON, что это, какие правила \n— Что такое XML, XSD"
      }
    ]
  },
  {
    "company": "Компэл",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-10 22:32:39",
        "content": "2025-04-10 22:32:39\n Ostrov Ostrov -> 2071074234:\nКомпания: Компэл (1 этап)\nЗП - 250k\n📢 Вакансия - https://hh.ru/vacancy/118654791?hhtmFrom=employer_vacancies\n\n❓ Вопросы от hr:\n\n1)Что драйвит в своем деле? Чем нравится заниматься? \n2)Расскажи про последнее место работы?\n3)Почему уходишь с работы?\n4)Расскажи про первое место работы?\n5)А что вам не нравится делать в работе?\n6)Сколько человек в команде?\n7)Сложно ли переходить с работы по одной теме на работу в совершенно другое направление? (из маг...",
        "full_content": "2025-04-10 22:32:39\n Ostrov Ostrov -> 2071074234:\nКомпания: Компэл (1 этап)\nЗП - 250k\n📢 Вакансия - https://hh.ru/vacancy/118654791?hhtmFrom=employer_vacancies\n\n❓ Вопросы от hr:\n\n1)Что драйвит в своем деле? Чем нравится заниматься? \n2)Расскажи про последнее место работы?\n3)Почему уходишь с работы?\n4)Расскажи про первое место работы?\n5)А что вам не нравится делать в работе?\n6)Сколько человек в команде?\n7)Сложно ли переходить с работы по одной теме на работу в совершенно другое направление? (из магазина в банковское приложение)\n8)Почему ушли с первого места работы на второе?\n9)Как выбираете компанию, в которой хотите работать? Что важно в работодателе?\n10)Какие предпочтения по технологиям? С чем бы не хотели работать?\n11)Если у нас с вами все хорошо сложится, в течении какого времени готовы выйти на работу?\n\n❓Тех вопросы:\n\n1)Расскажи про свой стек. Какие либы знаешь? Что нравится, что не нравится?\n2)Используете ли на проекте линтеры? Делал ли сам конфиги? Или использовал базовую настройку? Писали ли свои правила?\n3)Как следите за качеством кода? За его семантикой?\n4)Работал ли с классовыми компонентами в реакте?\n5)Как относишься к легаси коду?\n6)Расскажи про тайпскрипт? Насколько ты погружен в типизацию?\n7)Приходилось ли тебе работать с оптимизацией? Какие инструменты для этого использовал? (React profiler, API React Profiler)\n8)Как отловить ошибки? (console.log, errorBoundary, sentry)\n9)Знаешь ли ты как под капотом работает React? Приходилось анализировать как он устроен? Что такое react-fiber, reconcillation? Как работает обновление состояния?\nКак биндятся event’ы?\n10)Как принудительно перендерить компонет? (forceUpdate для классовых, для функциональных написать свой)\n11)Как конектить sentry c React?\n12)Ты добавлял ли в uikit компоненты?\n13)Использовал ли ты storybook?\n14)Как в uikit тестировал компоненты?\n15)Делал ли ты на проекте интернационализацию, если да, то как? Пользовались ли ICU форматом? \n16)Насколько ты погружен в moduleFederation? Что такое микрофронтенд?\n17)Каким образом происходит деплой на миркофронтах?"
      }
    ]
  },
  {
    "company": "Сател",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-11 07:46:05",
        "content": "2025-07-11 07:46:05\n Евгений Гусев -> 2071074234:\nКомпания: САТЕЛ, Группа компаний\nВакансия: https://sergiev-posad.hh.ru/vacancy/122467147?hhtmFrom=employer_vacancies\nВопросы:\n1. Рассказать про опыт работы, какие было сложные задачи.\n2. Рассказать про Redux какие у меня плюсы и минусы.\n3. Рассказать про RTK Query.\n4. Рассказать как бы написал код если протух токен (interception написать).\n5. Какие есть способы оптимизировать загрузку страницы, если она долго загружается.\n6. Способы общение бэка ...",
        "full_content": "2025-07-11 07:46:05\n Евгений Гусев -> 2071074234:\nКомпания: САТЕЛ, Группа компаний\nВакансия: https://sergiev-posad.hh.ru/vacancy/122467147?hhtmFrom=employer_vacancies\nВопросы:\n1. Рассказать про опыт работы, какие было сложные задачи.\n2. Рассказать про Redux какие у меня плюсы и минусы.\n3. Рассказать про RTK Query.\n4. Рассказать как бы написал код если протух токен (interception написать).\n5. Какие есть способы оптимизировать загрузку страницы, если она долго загружается.\n6. Способы общение бэка с фронтом (Http, WebSocket,), хотел услышать про Polling.\n7. Рассказать для чего нужен WebSocket и как огранизаовать его работу."
      }
    ]
  },
  {
    "company": "07 Точка Маркетплейсы",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-26 13:03:59",
        "content": "2024-07-26 13:03:59\n Alehandro¯\\_(ツ)_/¯ -> 2071074234:\n26.07 Точка Маркетплейсы\n- зп: вилка до 250 к\n- вакансия: Hr написала сама",
        "full_content": "2024-07-26 13:03:59\n Alehandro¯\\_(ツ)_/¯ -> 2071074234:\n26.07 Точка Маркетплейсы\n- зп: вилка до 250 к\n- вакансия: Hr написала сама"
      }
    ]
  },
  {
    "company": "Kt.Team",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-29 06:40:56",
        "content": "2025-06-29 06:40:56\n Кирилл Бутов -> 2071074234:\nКомпания kt.team\nЗапросил 200-250к\nПо рефералке на собес попал\nСобеседование проводил руководитель разработки, который код писал только на бэкенде, а фронт не знает\n\nВопросы:\n\n1. Рассказать о себе. О своих проектах. Какая команда была на последнем месте. Как происходило вливание ветки на проекте.  Как настраивал CI\n2. Что такое замыкание? Написать пример;\n3. Что такое всплытие и погружение;\n4. JS однопоточный, но как мы делаем тогда приложения? Хо...",
        "full_content": "2025-06-29 06:40:56\n Кирилл Бутов -> 2071074234:\nКомпания kt.team\nЗапросил 200-250к\nПо рефералке на собес попал\nСобеседование проводил руководитель разработки, который код писал только на бэкенде, а фронт не знает\n\nВопросы:\n\n1. Рассказать о себе. О своих проектах. Какая команда была на последнем месте. Как происходило вливание ветки на проекте.  Как настраивал CI\n2. Что такое замыкание? Написать пример;\n3. Что такое всплытие и погружение;\n4. JS однопоточный, но как мы делаем тогда приложения? Хотел услышать про eventLoop, Service Workers, Web Workers;\n\n1 задача\nНаписать замыкание\n\nconst func = () => {\nlet num = 0;\nreturn () => {\nconsole.log(num)\n}\n}\n\nconst test = func()\ntest()\n\n2 задача\n\nconst arr = [1, 2, 3];\nconst func = (arr) => {\nconst sorted = [...arr].sort((a, b) => a - b)\n\nfor(let i = 0; i < sorted.length; i++) {\n    if(sorted[i + 1] !== sorted[i] + 1) {\n        return sorted[i] + 1\n    }\n}\n}\n\nconsole.log(func(arr))"
      }
    ]
  },
  {
    "company": "Код Открытия",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-31 17:16:52",
        "content": "2025-01-31 17:16:52\n Wanderer -> 2071074234:\nКомпания: Код Открытия\nСсылка на вакансию: Написала HR\nЗП: Вилка от 250   \nВопросы: \n- Про прошлый опыт в резюме. С чем работал?  \n- В чем преимущество тех технология которые использовали?\n- Почему FSD? Расскажи про паттерны FSD?\n- ООП основные принципы? Рассказать и пересечение паттернов FSD и ООП\n- Почему Zustand лучше подходит для FSD?\n\nЗадачи: Смотри ниже",
        "full_content": "2025-01-31 17:16:52\n Wanderer -> 2071074234:\nКомпания: Код Открытия\nСсылка на вакансию: Написала HR\nЗП: Вилка от 250   \nВопросы: \n- Про прошлый опыт в резюме. С чем работал?  \n- В чем преимущество тех технология которые использовали?\n- Почему FSD? Расскажи про паттерны FSD?\n- ООП основные принципы? Рассказать и пересечение паттернов FSD и ООП\n- Почему Zustand лучше подходит для FSD?\n\nЗадачи: Смотри ниже"
      }
    ]
  },
  {
    "company": "Caltat",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-12 14:24:24",
        "content": "2024-11-12 14:24:24\n Егор -> 2071074234:\nКомпания : caltat\nВакансия: https://hh.ru/vacancy/110265247?hhtmFrom=favorite_vacancy_list\nЗП: 150к+\nВопросы:\n- Расскажи про свой опыт\n- Как была устроена авторизация\n- flex vs grid\n- var let const\n- === и ==\n- Как сравнить объекты\n - Хуки\n\n <style>\n  .outer {\n    position: relative;\n    height: 5em;\n    border: 1px solid blue;\n  }\n\n  .inner {\n    position: absolute;\n    top: 50%;\n    margin-top: -0.625em;\n    border: 1px solid red;\n  }\n</style>",
        "full_content": "2024-11-12 14:24:24\n Егор -> 2071074234:\nКомпания : caltat\nВакансия: https://hh.ru/vacancy/110265247?hhtmFrom=favorite_vacancy_list\nЗП: 150к+\nВопросы:\n- Расскажи про свой опыт\n- Как была устроена авторизация\n- flex vs grid\n- var let const\n- === и ==\n- Как сравнить объекты\n - Хуки\n\n <style>\n  .outer {\n    position: relative;\n    height: 5em;\n    border: 1px solid blue;\n  }\n\n  .inner {\n    position: absolute;\n    top: 50%;\n    margin-top: -0.625em;\n    border: 1px solid red;\n  }\n</style>"
      }
    ]
  },
  {
    "company": "Оптимакрос",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-30 16:05:09",
        "content": "2024-10-30 16:05:09\n Artyom Sozykin -> 2071074234:\nОптимакрос\nЗП: 250к\nВакансия: https://saratov.hh.ru/vacancy/108179839?hhtmFrom=resume",
        "full_content": "2024-10-30 16:05:09\n Artyom Sozykin -> 2071074234:\nОптимакрос\nЗП: 250к\nВакансия: https://saratov.hh.ru/vacancy/108179839?hhtmFrom=resume"
      }
    ]
  },
  {
    "company": "Вендорteamf",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-07 14:33:11",
        "content": "2025-02-07 14:33:11\n Артем -> 2071074234:\nКомпания: ВендорTeamF\nВопросы:\nЧто используешь для тестировани\nСемантическая вертка\nz-index\ndisplay\ncss in js\nу какого тега в html inline-block\npromise\nasync/await\nEvent Loop\nГде там RequiestAnimationFrame\nСтатический мето vs метод экземпляра\nза счет чего работает наслеодование\nuseEffect\nКакие хуки занешь\nМемоизация в react\nкак можно менять состояния\nвсплытие события \n\nЗадача: создать метод Map\nРешение: \nArray.prototype.map = function(callback, thisArg) ...",
        "full_content": "2025-02-07 14:33:11\n Артем -> 2071074234:\nКомпания: ВендорTeamF\nВопросы:\nЧто используешь для тестировани\nСемантическая вертка\nz-index\ndisplay\ncss in js\nу какого тега в html inline-block\npromise\nasync/await\nEvent Loop\nГде там RequiestAnimationFrame\nСтатический мето vs метод экземпляра\nза счет чего работает наслеодование\nuseEffect\nКакие хуки занешь\nМемоизация в react\nкак можно менять состояния\nвсплытие события \n\nЗадача: создать метод Map\nРешение: \nArray.prototype.map = function(callback, thisArg) {\n        if (this == null) {\n            throw new TypeError(\"Array.prototype.map called on null or undefined\");\n        }\n        if (typeof callback !== \"function\") {\n            throw new TypeError(callback + \" is not a function\");\n        }\n\n        const arr = Object(this);\n        const len = arr.length >>> 0; // Преобразуем длину к числу\n        const result = new Array(len);\n\n        for (let i = 0; i < len; i++) {\n            if (i in arr) {\n                result[i] = callback.call(thisArg, arr[i], i, arr);\n            }\n        }\n\n        return result;"
      }
    ]
  },
  {
    "company": "Датаджайл",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-08 12:54:17",
        "content": "2024-10-08 12:54:17\n Михаил -> 2071074234:\nДатаджайл\nвакансия hh.ru/vacancy/50184098\nзп 200к",
        "full_content": "2024-10-08 12:54:17\n Михаил -> 2071074234:\nДатаджайл\nвакансия hh.ru/vacancy/50184098\nзп 200к"
      }
    ]
  },
  {
    "company": "ФАККТ",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-12 19:41:35",
        "content": "2025-03-12 19:41:35\n Лёша -> 2071074234:\nКомпания: ФАККТ техсобес\nзп: просил 300 net\nгибрид Москва 1 день\nвакансия: hr написал\nфидбек: реджект\nощущение: я сосал, меня ебали (что-то душное)\n\nВопросы:\nРасскажи про свой опыт.\nВиды хранилищ и их отличия (localstorage, session storage, cookie, indexdb).\nКак оптимизировать сложные задачи, которые блокируют рендер (вебворкеры).\nВиды вебворкеров.\nКак общаться между воркером и основным тредом.\nПочему у воркеров нет доступа к DOM.\nКак общаться между 2 при...",
        "full_content": "2025-03-12 19:41:35\n Лёша -> 2071074234:\nКомпания: ФАККТ техсобес\nзп: просил 300 net\nгибрид Москва 1 день\nвакансия: hr написал\nфидбек: реджект\nощущение: я сосал, меня ебали (что-то душное)\n\nВопросы:\nРасскажи про свой опыт.\nВиды хранилищ и их отличия (localstorage, session storage, cookie, indexdb).\nКак оптимизировать сложные задачи, которые блокируют рендер (вебворкеры).\nВиды вебворкеров.\nКак общаться между воркером и основным тредом.\nПочему у воркеров нет доступа к DOM.\nКак общаться между 2 приложениями на одной странице не используя нетворк (window.dispatchEvent, localstorage, broadcast chanel).\nwindow.sharedData - какие минусы (безопасность)\nКак отлеживать изменение в обновляющемся списке (mutationObserver, setInterval).\nЧто возвращает setInterval.\nЕсть ли какая-то гарантия, что у нас пройдет делей в setInterval и какая эта гарантия.\nКак гарантировать, что у нас пройдет ровно столько delay, сколько указано в delay, а не больше.\nСтатические поля класса.\nЕсть ли у метода static доступ к this.\nКакие есть способы запретить изменение объекта (Object.freeze, symbol, прокси)?\nЧто используется в Object.freeze под капотом (дескрипторы)?\nКакие дескрипторы знаешь?\nКакие есть методы оптимизации сборки?\nКак работает treeshaking?\nVite и его 2 вида сборщика.\nМодули и CommonJS.\n\nЧто такое VDOM?\nНа какой структуре данных работает VDOM и это коцепт или объект?\nВ чем особенность fiber? (fiber и ссылки на альтернативные деревья в этом fiber)\nПодробнее про эвристический алгоритм, какая суть, почему сложность O(n).\nКак строиться VDOM, откуда появляется.\nПодробней, во что превращается JSX, на каком этапе.\n\nКакую проблему решают стейтменеджеры?\nЗачем нам стейтменеджеры, если мы можем использовать нативный context.\nЗачем нам отделять ui от логики?\nКакие есть бенефиты при тестировании при использовании стейт менеджеров?\n\nЛайвкодинг:\n// Задача: Реализовать объект, который позволяет задавать и вызывать пользовательские события (Диспетчер). Пример интерфейса:\n\nclass Dispatcher {\n    //code...\n}\n\nconst dispatcher = new Dispatcher();\n\ndispatcher.on('event_one', function () {\n    console.warn(\"message 1\");\n});\n\ndispatcher.on('event_one', function () {\n    console.warn(\"message 2\");\n});\n\ndispatcher.on('event_two', function () {\n    console.warn(\"message 3\");\n});\n\ndispatcher.trigger('event_one'); // Вызываем событие event_one\n\n// Ожидаемый вывод:\n// message 1\n// message 2\n\nРешение:\nclass Dispatcher {\n  constructor() {\n    this.events = {};\n  }\n\n  on(event, callback) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  off(event, callback){\n    if(this.events[event]){\n      this.events[event] = this.events[event].filter(fn => fn !== callback)\n    }\n  }\n\n  trigger(event) {\n    if (this.events[event]) {\n      this.events[event].forEach(callback => callback());\n    }\n  }\n}\n\n\nЕще вопросы:\nMap и Set, что такое, какая структура данных под капотом(хеш таблица)."
      }
    ]
  },
  {
    "company": "Максбитсолюшен",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-04 11:18:11",
        "content": "2024-11-04 11:18:11\n Вадим -> 2071074234:\nКомпания: Максбитсолюшен(2 этап)\nВакансия : https://rabota.by/vacancy/108686392\nЗП: не обсуждали\nВопросы: \nУ него был набросок проекта\nЕсть сервер - есть браузер \n1) какие слои на мой взгляд должен обладать приложение?\n2) какая архитектура папок должна быть в этом проекте? \n3) как бы я организовал и настроил папки? \nИ все это делал и писал на доске и вокруг этого общались. Нужны знания по архитектуре.",
        "full_content": "2024-11-04 11:18:11\n Вадим -> 2071074234:\nКомпания: Максбитсолюшен(2 этап)\nВакансия : https://rabota.by/vacancy/108686392\nЗП: не обсуждали\nВопросы: \nУ него был набросок проекта\nЕсть сервер - есть браузер \n1) какие слои на мой взгляд должен обладать приложение?\n2) какая архитектура папок должна быть в этом проекте? \n3) как бы я организовал и настроил папки? \nИ все это делал и писал на доске и вокруг этого общались. Нужны знания по архитектуре."
      }
    ]
  },
  {
    "company": "Lanit Bpm",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-08-04 16:59:21",
        "content": "2024-08-04 16:59:21\n Максим -> 2071074234:\nLanit BPM\nВакансия: https://spb.hh.ru/vacancy/104026317?hhtmFrom=employer_vacancies\nФидбек: К сожалению, вакансию закрыли, тут нас опередил ВТБ. поэтому пока не можем сделать предложение о следующем этапе на данный момент.\nВопросы которые запомнил: \n 1. Как ты понимаешь понятие функциональное программирование?\n 2. Можно ли использовать await без async  ? \n 3. Утилитарные типы в TS?\n 4. Что такое type guard ?\n 5. В чем отличие классовых компонентов от фу...",
        "full_content": "2024-08-04 16:59:21\n Максим -> 2071074234:\nLanit BPM\nВакансия: https://spb.hh.ru/vacancy/104026317?hhtmFrom=employer_vacancies\nФидбек: К сожалению, вакансию закрыли, тут нас опередил ВТБ. поэтому пока не можем сделать предложение о следующем этапе на данный момент.\nВопросы которые запомнил: \n 1. Как ты понимаешь понятие функциональное программирование?\n 2. Можно ли использовать await без async  ? \n 3. Утилитарные типы в TS?\n 4. Что такое type guard ?\n 5. В чем отличие классовых компонентов от функциональных?\n 6. Что такое package-lock.json, что хранится в package.josn ?\n 7. Какие минусы у npm?\n 8. Как работает webpack module federation?\n 9. Что такое Ngnx ?\n 10. Как обрабатывали ошибки в rtk query ( К примеру не авторизованный пользователь)? \n 11. Сколько создавали сторов?\n 12. От куда узнаешь новости frontenda ?\n 13. Что интересного в React 19?\n 14. Способы авторизации"
      }
    ]
  },
  {
    "company": "VegaSoft",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-07 19:01:39",
        "content": "2025-07-07 19:01:39\n Tima Pakholkov -> 2071074234:\nКомпания: VegaSoft\nЗП: от 170 000 до 220 000 р. на руки\nhr: @Olga_team_for_IT\nФормат: удалёнка\n\nОбщие вопросы:\n- расскажи про свой опыт 5–7 минут\n- что такое http/https\n- REST API\n- Чем отличаются get, post, put, patch, delete\n- Какие ещё знаешь протоколы\n- Расскажи про WebSocket\n- CORS\n- Что такое preflight-запросы, http метод OPTIONS\n- Критический путь рендера\n\nTS: \n- any, unknown, never, void\n- тайпгарды\n- тип и интерфейс\n\nReact: \n- Преимущес...",
        "full_content": "2025-07-07 19:01:39\n Tima Pakholkov -> 2071074234:\nКомпания: VegaSoft\nЗП: от 170 000 до 220 000 р. на руки\nhr: @Olga_team_for_IT\nФормат: удалёнка\n\nОбщие вопросы:\n- расскажи про свой опыт 5–7 минут\n- что такое http/https\n- REST API\n- Чем отличаются get, post, put, patch, delete\n- Какие ещё знаешь протоколы\n- Расскажи про WebSocket\n- CORS\n- Что такое preflight-запросы, http метод OPTIONS\n- Критический путь рендера\n\nTS: \n- any, unknown, never, void\n- тайпгарды\n- тип и интерфейс\n\nReact: \n- Преимущества и недостатки React\n- React.memo, useMemo, useCallback\n\nЗадачи:\n1. Написать debounce на js\n\n2.\n\nconst tree = {\n  value: 1,\n  children: [\n    {\n      value: 2,\n      children: [{ value: 3 }]\n    },\n    {\n      value: 4,\n      children: [{ value: 5 }, { value: 6 }]\n    }\n  ]\n};\n\nfunction getTreeValues(tree) {\n  // закончи функцию\n  const result = []\n\n  function recurse(item) {\n    result.push(item.value)\n\n    if (item.children) {\n      for (let key of item.children) {\n        recurse(key)\n      }\n    }\n  }\n\n  recurse(tree)\n\n  return result\n}\n\nconsole.log(getTreeValues(tree)); // => [1, 2, 3, 4, 5, 6];\n3.\n\nconst UserItem = ({ user, isSelected, onClick }) => {\n  return (\n    <div onClick={onClick}>\n      <h3>{user.name}</h3>\n      {isSelected && <p>Текущий пользователь</p>}\n    </div>\n  )\n}\n\nconst UsersList = ({ users }) => {\n  const [selectedUser, setSelectedUser] = useState(null)\n\n  const toggleSelectedUser = (user) => {\n    // Логика выбора пользователя\n  }\n\n  return (\n    <div>\n      {users.map((user) => (\n        <UserItem\n          user={user}\n          isSelected={selectedUser?.id === user.id}\n          onClick={() => toggleSelectedUser(user)}\n        />\n      ))}\n    </div>\n  )\n}\nСделать так, чтобы при клику по юзеру рамка подсвечивалась, но у других юзеров пропадала\n\nЧто делать, если карточек очень много и подсветка карточки занимает много времени — как оптимизировать?"
      }
    ]
  },
  {
    "company": "06 Иц-Айтеко",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-05 09:51:20",
        "content": "2025-06-05 09:51:20\n Stepan Tugarev -> 2071074234:\n05.06 ИЦ-айтеко(проект сбера)\nЗП: до 200\nВакансия: hr написала\n\nТоже самое что и тут: https://t.me/c/2071074234/489/118265\n\nБыла еще 1 задача на консоль логи:\nsetTimeout(()=> console.log(\"setTimeout\"), 0);\n console.log(\"scriptstart\"); \ntry {  Promise.resolve()\n  .then(()=> { console.log(1); throw new Error('err'); console.log(100); })  .then(()=> console.log(2))\n  .then(()=> console.log(3))} catch(e)\n{  console.log(e)\n}\nХочет услышать про: Первы...",
        "full_content": "2025-06-05 09:51:20\n Stepan Tugarev -> 2071074234:\n05.06 ИЦ-айтеко(проект сбера)\nЗП: до 200\nВакансия: hr написала\n\nТоже самое что и тут: https://t.me/c/2071074234/489/118265\n\nБыла еще 1 задача на консоль логи:\nsetTimeout(()=> console.log(\"setTimeout\"), 0);\n console.log(\"scriptstart\"); \ntry {  Promise.resolve()\n  .then(()=> { console.log(1); throw new Error('err'); console.log(100); })  .then(()=> console.log(2))\n  .then(()=> console.log(3))} catch(e)\n{  console.log(e)\n}\nХочет услышать про: Первый then выводит 1, затем выбрасывается ошибка Error: err.После ошибки выполнение этого then прекращается, а следующие then в цепочке не вызываются .\nНо поскольку ошибка не перехвачена в этой цепочке, она попадает в unhandledrejection (если нет catch в конце цепочки).Блок try...catch не ловит ошибки из промисов , потому что это асинхронный код.  try...catch работает только для синхронных ошибок.\n\nДалее проверили задачу, спросил, как можно отрефакторить(вынести таблицу, вынести логику запроса)\nПосле задачи были вопросы по реакту:\n1.Зачем нужен реакт(декларативность, VDOM, reconcilation), почему не могу через dom api поменять текст в элементе и все2.Умный/глупый компонент\n3.Методы жиз. цикла, useEffect4.Что такое замыкание, покажи пример замыкания в задаче(setState внутри useEffect)\n5.key в реакт6.правила хуков, почему\n7.что такое jsx, можно ли без него"
      }
    ]
  },
  {
    "company": "Калина Софт",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-19 13:26:09",
        "content": "2025-06-19 13:26:09\n Zurab -> 2071074234:\nКомпания: Калина Софт\nТип: Техническое интервью\nДлительность: 45-60мин \n\nВопросы\n\nОбщие:\nГде работаешь, расскажи про компанию?\nКакие процессы? По какой методологии работаешь?\nКакой Git Flow?\nСколько чел в команде?\n\nТеория:\n\nJs\nHosting \nPromise\nСинхронный и ассихронный код \nEvent Loop\nКакие типы бывают?\nКлассы (private, public, and protected)\n\nTs\nКакие типы существуют?\nЕсть ли разница между типами? Распределяются ли они по подкатегориям?\nUtilityTypes\n\nRea...",
        "full_content": "2025-06-19 13:26:09\n Zurab -> 2071074234:\nКомпания: Калина Софт\nТип: Техническое интервью\nДлительность: 45-60мин \n\nВопросы\n\nОбщие:\nГде работаешь, расскажи про компанию?\nКакие процессы? По какой методологии работаешь?\nКакой Git Flow?\nСколько чел в команде?\n\nТеория:\n\nJs\nHosting \nPromise\nСинхронный и ассихронный код \nEvent Loop\nКакие типы бывают?\nКлассы (private, public, and protected)\n\nTs\nКакие типы существуют?\nЕсть ли разница между типами? Распределяются ли они по подкатегориям?\nUtilityTypes\n\nReact \nPropsDrilling \nUseEffect Vs UseLayoutEffect \nHOC\nErrorBoudery\nМемоизация - зачем нужны?\nРассказать как оптимизировать загрузку списка большого ( throttle, denounce, виртуализация )\nSuspense\n\nЗадачи:\n\n// Написать функцию, которая из массива значений, оставит только уникальные числа расположив их по возрастанию важно учитывать, что числа записанные в виде строк тоже должны попадать в финальную выборку\n\n\n// const arr = ['a',0,4,'4','0',5,'d',7,0,'8',7,10,'s',1,3,'9',10,3,1,9,'u',6,5,'2'];\n\n// const getUniqDigits = (arr) => {\n//   const nums = arr\n//   .map(el => Number(el))\n//   .filter(num => !isNaN(num) && Number.isInteger(num))\n  \n//   const uniqNums = [...new Set(nums)].sort((a,b) => a - b)\n  \n//   return uniqNums\n// }\n\n// console.log(getUniqDigits(arr)); // output [0,1,2,3,4,5,6,7,8,9,10]\n\n\n// Написать функцию, которая проверяет входящий массив значений:\n// - если в массиве присутствуют не числа возвращает строку \"входящие данные не удовлетворяют требованиям\"\n// - если входные параметры корректны, то необходимо получить разность суммы чисел кратных 7 и максимального значения из входного массива\n\n// const arr = [1, NaN, 21, 40, 50, 35, 2, NaN, 16, 17, NaN, 98, 77, 49];\n// const arr1 = [true];\n// const arr2 = ['smth'];\n// const arr3 = [1, 11, 21, 40, 50, 35, 2, 6, 16, 17, 63, 98, 77, 49];\n\n\n\n// const checkAndCalculate = (array) => {\n//   for(const item of array) {\n//     if(typeof item !== 'number' || isNaN(item)){\n//       return 'входящие данные не удовлетворяют требованиям'\n//     }\n//   }\n  \n//   const sumMultipOf7 = array\n//   .filter(num => num % 7 ===0)\n//   .reduce((acc, val) =>acc + val, 0)\n  \n//   const maxValue = Math.max(...array)\n  \n//   return sumMultipOf7 - maxValue\n// }\n\n// console.log(checkAndCalculate(arr))\n// console.log(checkAndCalculate(arr1))\n// console.log(checkAndCalculate(arr2))\n// console.log(checkAndCalculate(arr3))\n\n\n\n// Написать функцию, которая на вход принимает некоторое число и возвращает новое число (максимально возможное), которое можно составить из цифр первоначального числа.\n\n// getBigger(6291) // 9621\n// getBigger(417)  // 741\n// getBigger(3814) // 8431\n\n\n\nconst getBigger = (number) => {\n  return Number(String(number)\n  .split('')\n  .sort((a, b) => b - a)\n  .join('')\n  )\n}\n\nconsole.log(getBigger(6291))\nconsole.log(getBigger(417))\nconsole.log(getBigger(3814))"
      }
    ]
  },
  {
    "company": "Аv.By",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-02 17:04:08",
        "content": "2025-06-02 17:04:08\n Kirill -> 2071074234:\nаv.by\nзп: 2200$\n\nвопросы:\n1)расскажие о себе \n2) что такое spread опреатор\n3) что такое промисы\n4) какие состояния есть у промисов \n5)  что такое eventLoop\n6) какой порядок в консоли будет\nconsole.log(1)\nsetTimeout(()=>console.log(2))\nPromise.resolve().then(()=> console.log(3))\nconsole.log(4)\n7)у кого больше приоритет: микро или макро таски\n8)какие правила использования хуков знаешь\n9) жк\n10)как орагизован роутинг в next js\n11) как сделать динамические ...",
        "full_content": "2025-06-02 17:04:08\n Kirill -> 2071074234:\nаv.by\nзп: 2200$\n\nвопросы:\n1)расскажие о себе \n2) что такое spread опреатор\n3) что такое промисы\n4) какие состояния есть у промисов \n5)  что такое eventLoop\n6) какой порядок в консоли будет\nconsole.log(1)\nsetTimeout(()=>console.log(2))\nPromise.resolve().then(()=> console.log(3))\nconsole.log(4)\n7)у кого больше приоритет: микро или макро таски\n8)какие правила использования хуков знаешь\n9) жк\n10)как орагизован роутинг в next js\n11) как сделать динамические роуты\n12) задача\n\n\nimport React, { Fragment, useEffect, useRef, useState, useCallback } from 'react';\nimport Dashboard from './Dashboard';\nimport PropTypes from 'prop-types';\n\nconst Root = ({ dashboardIds, rootId }) => {\n\n  const [activeDashboardId, setId] = useState();\n  \n  const count = useRef(0);\n  \n  useEffect( () => {\n    count.current +=1;\n  });\n  \n  \n    if (!rootId || !dashboardIds) {\n    return null;\n  }\n  \n  const setDashboardId = useCallback((id)=>{\n        setId(id)\n  },[id])\n\n  \n  return (\n    <>\n      <h2>Active dashboard: {activeDashboardId ?? 'not choosen' }</h2>\n      <span>Rerender count: {count}</span>\n      {dashboardIds.map(id => (\n        rootId && <Dashboard\n                      key={id}\n                      dashboardId={id}\n                      onClick={(id) => setDashboardId(id)} \n                      rootId={rootId}\n                      />\n      ))}\n    </>\n  );\n};\n\nRoot.propTypes = {\n  dashboardIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  rootId: PropTypes.number,\n};\n\nRoot.defaultProps = {\n  \n};\n\nexport default Root;\n\n/**\nУсловия:\nНужно исправить ошибки и отрефакторить компонент Root.\n\nОграничения:\nНельзя менять propTypes, считать, что о валидации пропсов позаботился вызывающий код, и контракт взаимодействия соблюден.\nНет возможности изменить интерфейс пропсов дочерних компонентов.\n\nИнформация:\nActive dashboard: {activeDashboardId}\n- показывает id активного Dashboard или 'not chosen', если активного нет.\n\nRerender count: {count} - показывает количество рендеров компонента\n\nDashboard - по клику дергает callback onClick, в который передает свой id\n*/"
      }
    ]
  },
  {
    "company": "Quеen Intеraсtive",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-12-11 12:24:59",
        "content": "2024-12-11 12:24:59\n Андрей -> 2071074234:\nКомпания: Quеen Intеraсtive\nВакансия: -\nЗП: Не обсуждали\n\nСразу перешли к задачам:\n// Написать sum\nMath.sum(1, 2, 3, 4); // 10\n\n// Написать toNumber\n\"123\".toNumber() // 123\n\n\n// Что выведется\nlet a = 1;\n\nconst fn = () => {\n    console.log(a);\n}\n\nsetTimeout(fn, 1000);\n\na = 2;\n\n// Написать тип\ntype Type = ...\n\nconst a: Type = { status: \"active\" };\nconst b: Type = { status: \"finished\" };\n\na.body = \"123\"; // ok\nb.body = \"123\"; // not exists\n\n\n// Реализовать...",
        "full_content": "2024-12-11 12:24:59\n Андрей -> 2071074234:\nКомпания: Quеen Intеraсtive\nВакансия: -\nЗП: Не обсуждали\n\nСразу перешли к задачам:\n// Написать sum\nMath.sum(1, 2, 3, 4); // 10\n\n// Написать toNumber\n\"123\".toNumber() // 123\n\n\n// Что выведется\nlet a = 1;\n\nconst fn = () => {\n    console.log(a);\n}\n\nsetTimeout(fn, 1000);\n\na = 2;\n\n// Написать тип\ntype Type = ...\n\nconst a: Type = { status: \"active\" };\nconst b: Type = { status: \"finished\" };\n\na.body = \"123\"; // ok\nb.body = \"123\"; // not exists\n\n\n// Реализовать компонент таймер\nimport React, { useEffect, useRef } from 'react';\n\nconst Time = () => {\n    const timeRef = useRef(new Date().toLocaleTimeString()); // Инициализация текущего времени\n    const [time, setTime] = React.useState(timeRef.current); // Состояние для отображения времени\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            timeRef.current = new Date().toLocaleTimeString(); // Обновляем текущее время в ref\n            setTime(timeRef.current); // Обновляем состояние для отображения времени\n        }, 1000);\n\n        return () => clearInterval(interval); // Очищаем интервал при размонтировании\n    }, []);\n\n    return (\n        <div>\n            <h1>{time}</h1> {/* Отображаем текущее время */}\n        </div>\n    );\n};\n\nexport default Time;"
      }
    ]
  },
  {
    "company": "Лаборатория Безопасных Систем",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-15 11:33:28",
        "content": "2024-11-15 11:33:28\n Егор -> 2071074234:\nКомпания: Лаборатория безопасных систем\nВакансия: https://hh.ru/vacancy/110792643\nЗП: 180+\nВопросы:\nСпрашивали про опыт, с чем работал, про авторизацию как была устроена. \nСпрашивали про docker, умение настраивать CI/CD.\nТехнических вопросов не было, т.к. им нужен Angular, хотя в вакансии это не указано, а также чтобы кандидат умел и что-то на бэкенде делать. Поэтому вакансия для fullstack подходит.",
        "full_content": "2024-11-15 11:33:28\n Егор -> 2071074234:\nКомпания: Лаборатория безопасных систем\nВакансия: https://hh.ru/vacancy/110792643\nЗП: 180+\nВопросы:\nСпрашивали про опыт, с чем работал, про авторизацию как была устроена. \nСпрашивали про docker, умение настраивать CI/CD.\nТехнических вопросов не было, т.к. им нужен Angular, хотя в вакансии это не указано, а также чтобы кандидат умел и что-то на бэкенде делать. Поэтому вакансия для fullstack подходит."
      }
    ]
  },
  {
    "company": "Компани: Медиа Сервис",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-12 10:01:44",
        "content": "2025-02-12 10:01:44\n Артем -> 2071074234:\nКомпани: Медиа Сервис\nЗП: 180r\nВопросы:\nDebounce vs Trottle\nlet const vs var\nЗамыкание\nАссинхронность\nasync/await что будет если использовать без try catch\nФункции генераторы\nReact жизненные циклы компонента\nuseMemo vs useState vs useRef\nПорталы в react\nReact.memo\nRedux vs redux-toolkit vs RTK query\nnext смысл\nSSR vs SSG\nКакие виды тестов знаешь\nКак тестировать запросы в Jest(Моки)\nScss как транспелируеться в чем примущество",
        "full_content": "2025-02-12 10:01:44\n Артем -> 2071074234:\nКомпани: Медиа Сервис\nЗП: 180r\nВопросы:\nDebounce vs Trottle\nlet const vs var\nЗамыкание\nАссинхронность\nasync/await что будет если использовать без try catch\nФункции генераторы\nReact жизненные циклы компонента\nuseMemo vs useState vs useRef\nПорталы в react\nReact.memo\nRedux vs redux-toolkit vs RTK query\nnext смысл\nSSR vs SSG\nКакие виды тестов знаешь\nКак тестировать запросы в Jest(Моки)\nScss как транспелируеться в чем примущество"
      }
    ]
  },
  {
    "company": "Компания Иннова",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-04 13:14:05",
        "content": "2025-02-04 13:14:05\n Александр Богданов -> 2071074234:\n-Компания ИННОВА(1 этап собеса-была теория)\n- топик: https://t.me/c/2071074234/100998 \n- скидываю аудио -т.к лайв-кодинга не было",
        "full_content": "2025-02-04 13:14:05\n Александр Богданов -> 2071074234:\n-Компания ИННОВА(1 этап собеса-была теория)\n- топик: https://t.me/c/2071074234/100998 \n- скидываю аудио -т.к лайв-кодинга не было"
      }
    ]
  },
  {
    "company": "Магнит",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-16 12:29:22",
        "content": "2025-07-16 12:29:22\n Александр -> 2071074234:\nКомпания: Магнит\nСсылка на вакансию: нет (по рефеке)\nЗП: Называл от 400\n\nВопросы:\nРассказать про eventLoop\nЧто уходит в микротаски/макротаски\nЗачем реакт и чем он хорош\nПодробнее про реконсиляцию\n\nЗадачи не сохранились\nТам просто на понимание useCallback и когда он нужен (оборачивать ли функцию, если передаем в небольшой компонет)\nНаписать свой хук, в котором колбэк сработает 1 раз \n\nНа этом все вопросы и задачи закончились, так как отвечал быстро и ...",
        "full_content": "2025-07-16 12:29:22\n Александр -> 2071074234:\nКомпания: Магнит\nСсылка на вакансию: нет (по рефеке)\nЗП: Называл от 400\n\nВопросы:\nРассказать про eventLoop\nЧто уходит в микротаски/макротаски\nЗачем реакт и чем он хорош\nПодробнее про реконсиляцию\n\nЗадачи не сохранились\nТам просто на понимание useCallback и когда он нужен (оборачивать ли функцию, если передаем в небольшой компонет)\nНаписать свой хук, в котором колбэк сработает 1 раз \n\nНа этом все вопросы и задачи закончились, так как отвечал быстро и уверенно"
      }
    ]
  },
  {
    "company": "Dataworks",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-20 06:23:58",
        "content": "2024-11-20 06:23:58\n Стас Тихомиров -> 2071074234:\nКомпания: DataWorks\nВакансия: https://novosibirsk.hh.ru/vacancy/109140057?hhtmFrom=resume\nЗП: не обсуждали\n\nТак же было только знакомство, никаких лайв кодингов\n\nВопросы: \n-Что конкретно делал\n-Что такое SOLID\n-Паттерны проектирования\n-Чистая функция\n-Отличие стрелочных функций от обычных\n- spread rest\n- Хуки какие знаешь",
        "full_content": "2024-11-20 06:23:58\n Стас Тихомиров -> 2071074234:\nКомпания: DataWorks\nВакансия: https://novosibirsk.hh.ru/vacancy/109140057?hhtmFrom=resume\nЗП: не обсуждали\n\nТак же было только знакомство, никаких лайв кодингов\n\nВопросы: \n-Что конкретно делал\n-Что такое SOLID\n-Паттерны проектирования\n-Чистая функция\n-Отличие стрелочных функций от обычных\n- spread rest\n- Хуки какие знаешь"
      }
    ]
  },
  {
    "company": "Unirest",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-20 14:55:20",
        "content": "2024-10-20 14:55:20\n Vildan Khabibov -> 2071074234:\nUnirest (Rostic's)\nВакансия: hr написала\nЗп: 250к\nВопросы:\n\n1-ый этап. Тех. интервью.\n- FSD. Рассказать о ней. Рекомендовал почитать про чистую архитектуру. \n- Вопрос из резюме. Что за плагины приходилось писать для eslint, babel.\n- Какое место занимал место в команде. Как происходило взаимодействие с другими разрабами?\n- Как было устроено ревью кода? \n- Какие знаешь технологии которые применяются для написания стилей?\n- Какие минусы есть у под...",
        "full_content": "2024-10-20 14:55:20\n Vildan Khabibov -> 2071074234:\nUnirest (Rostic's)\nВакансия: hr написала\nЗп: 250к\nВопросы:\n\n1-ый этап. Тех. интервью.\n- FSD. Рассказать о ней. Рекомендовал почитать про чистую архитектуру. \n- Вопрос из резюме. Что за плагины приходилось писать для eslint, babel.\n- Какое место занимал место в команде. Как происходило взаимодействие с другими разрабами?\n- Как было устроено ревью кода? \n- Какие знаешь технологии которые применяются для написания стилей?\n- Какие минусы есть у подхода css in js? \n- С какими библиотеками UI работал, приходилось ли писать свой UI Kit? \n- Какие линтеры знаешь? \n- Про тестирование. Какие виды тестов знаешь? Чуть подробнее про unit и e2e\n- Про CI. Что запускалось во время запуска. Sentry - что такое для чего нужен.\n- Хуки в реакт. Про useCallback, React.memo, useMemo, useEffect, useLayoutEffect\n- Классовые компонеты приходилось ли работать? \n- Какие стадии отрисовки в браузере знаешь?\n- Fibers, reconcliation, эвристический подход, для чего нужны ключи?\n- Какие библиотеки для работы с формами знаешь? Что больше нравится?\n- RTK Query для чего нужен? \n- СSS. Какой position по умолчанию у элемента? Какие вообще есть position и как работают?\n- Отличие Flex от Grid? \n- Если по умолчанию используем flex то относительно чего выравнивание произойдет с align-items: center? \n- А что делает align-self?\n- Для чего нужно flex-grow?\n- Какие способы есть анимирования в css? Что более производительнее и в каких случаях что лучше использовать? \n- Local storage, cookie\n- Какие образом куки попадают в запрос? \n- HTTP. 401, 403 - что значат эти коды ошибок и чем отличаются? \n- Какие виды редиректов ты знаешь? чем они отличаются? \n- Options в запросе для чего нужны? Про CORS \n- В какой последовательность будут вызваны функции?\nawait f1()\nawait f2()\n- Как их вызвать параллельно? Про Promise.all, Promise.allSettled(), Promise.race(), Promise.race()\n- Как передать f1 и f2 в Promise.all?\nPromise.all([f1(), f2()])\n- Что такое SOLID, Подроне про D (Принцип инверсии зависимостей)\n- Приведи примеры использования этого принципа\n- Расскажи какие утилити тайпы знаешь\n- Тпизизируй функцию\nfunction map<T, U>(array: T[], f: (item: T, index: number, array: T[]) => U): U[] {\n    return array.map(f);\n}\n\n- Какие стейт менеджеы знаешь? От чего бы отталкивлся если выбирал стейт менеджер на новый проект?\n- Какие задачи решает redux toolkit? \n- Какие есть способы для работы с запросами в redux? \n- GraphQL - что такое, какую проблему решают?\n- Какие frontend фреймворки знаешь? \n- SSR - какая идея? Гидрация. Есть ли опытработы с Next ? \n- SSG - что такое?\n- Какие-нибудь слышал фреймворки для ssr кроме Next?\n- За счет чего при копировании ссылки в месседжер появляется дополнительная информация в виде превью и описания?\n\n2-ой этап. Общением с лидом.\n- Есть ли опыт на Vue?\n- Чуть подробнее про FSD. Были ли каке-то разделение вью от бизнес сущностей.\n- Как было реализовано тестирование компонентов?\n- Взаимодействие  с бэкэндом какое было? (rest и.т.д.)\n- Accessibility. Был ли опыт улучшения страниц в этом направлении?\n- Есть ли опыт работы с браузерным API. Приходилось ли использовать worker'ы или может быть bluetooth? \n- Dependency injection. Можешь привести пример? \n- BFF. Что это такое и для чего он нужен? \n- Приходилось ли писать бэкенды? Есть ли опыт работы с редисом, кафкой? \n- Как развиваешь? Что смотришь, что читаешь?"
      }
    ]
  },
  {
    "company": "Мосгосэкспертиза",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-18 14:36:39",
        "content": "2025-06-18 14:36:39\n Александр -> 2071074234:\nМосгосэкспертиза\nВакансия - https://hh.ru/vacancy/121128628?hhtmFrom=vacancy_edit\nОни ищут кандидата на VUE 3 \n(я им сказал,что я на reacte,он сказал ничего страшного,типо нет ли у меня желания переучиться)\nВопросы были\n1.Promies\n2.Рассказать про Redux\n3.Cookie\n4.Про авторизацию(Я сказал что у нас на jwt и он про это спросил),если вдруг сказать, про другую может за другое спросит\n5.И был такой вопрос не использую ли я слишком ЗАУМНЫЕ ДЖЕНЕРИКИ.\nИ у н...",
        "full_content": "2025-06-18 14:36:39\n Александр -> 2071074234:\nМосгосэкспертиза\nВакансия - https://hh.ru/vacancy/121128628?hhtmFrom=vacancy_edit\nОни ищут кандидата на VUE 3 \n(я им сказал,что я на reacte,он сказал ничего страшного,типо нет ли у меня желания переучиться)\nВопросы были\n1.Promies\n2.Рассказать про Redux\n3.Cookie\n4.Про авторизацию(Я сказал что у нас на jwt и он про это спросил),если вдруг сказать, про другую может за другое спросит\n5.И был такой вопрос не использую ли я слишком ЗАУМНЫЕ ДЖЕНЕРИКИ.\nИ у них есть 2ой этап, после 1го этапа они дают ТЕСТОВОЕ задания как раз для VUE 3 отрисовать табличку"
      }
    ]
  },
  {
    "company": "Hrp, Проект Техзор",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-13 15:05:01",
        "content": "2024-07-13 15:05:01\n Руслан -> 2071074234:\nhrp, проект техзор\n—вакансия: https://hh.ru/vacancy/102175909\nЗп: 230к\nЗадачи:\nРевью и рефакторинг кода, также необходимо было добавить сохранение кол-ва лайков в каждом посте. Хотел, чтобы я сделал через indexeddb, но сказал, что через localStorage тоже норм\n/* eslint-disable */\n// @ts-nocheck\n\nimport {ReactNode, memo, useCallback, useEffect, useState} from 'react';\nimport './App.css';\n\ninterface IPost {\n  userId: number;\n  id: number;\n  title: string;...",
        "full_content": "2024-07-13 15:05:01\n Руслан -> 2071074234:\nhrp, проект техзор\n—вакансия: https://hh.ru/vacancy/102175909\nЗп: 230к\nЗадачи:\nРевью и рефакторинг кода, также необходимо было добавить сохранение кол-ва лайков в каждом посте. Хотел, чтобы я сделал через indexeddb, но сказал, что через localStorage тоже норм\n/* eslint-disable */\n// @ts-nocheck\n\nimport {ReactNode, memo, useCallback, useEffect, useState} from 'react';\nimport './App.css';\n\ninterface IPost {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\nfunction App() {\n  const [posts, setPosts] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getPosts = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(\n        \"https://jsonplaceholder.typicode.com/posts\"\n      );\n      const newPosts = await response.json();\n      setPosts(newPosts as unknown as IPost[]);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  useEffect(() => {\n    getPosts();\n  }, [getPosts]);\n\n  if (isLoading) {\n    return <div>Посты загружаются</div>;\n  }\n\n  return (\n    <div className='app'>\n      {posts.map((post, i) => (\n        <Post post={post} key={i} />\n      ))}\n    </div>\n  );\n}\n\nconst Post = memo(({post}: {post: IPost}) => {\n  const [likes, setLikes] = useState();\n  const icon = (\n    <div>\n      <div>💖</div>\n      {likes}\n    </div>\n  );\n\n  const handleLike = useCallback(() => {\n    const newLikes = likes + 1;\n    setLikes(newLikes);\n  }, []);\n\n  return (\n    <div className='post'>\n      <div className=\"container\">\n        <div className='title'>{post.title}</div>\n        <div className='body'>{post.body}</div>\n      </div>\n      <div className=\"container\">\n        <Button icon={icon} onClick={handleLike}/>\n      </div>\n    </div>\n  );\n});\n\nconst Button = ({icon, onClick}: {icon: ReactNode, onClick: () => void}) => (\n  <button className=\"button\" onClick={onClick}>\n    {icon}\n  </button>\n);\n\nexport default App;"
      }
    ]
  },
  {
    "company": "Vk Workspace",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-30 11:25:08",
        "content": "2025-04-30 11:25:08\n Артур Виноградов -> 2071074234:\nVK WorkSpace\nВакансия - https://team.vk.company/vacancy/41448/\nЗП: 300\nВсё точно также как здесь https://t.me/c/2071074234/489/117022\n\nВопросы: \n- Различие между обычными функциями и стрелочными?\nconst counter = {\n value: 0,\n next() {\n   this.value++;\n   console.log(this.value);\n }\n}\n// Что выведет и как решить\n- Про bind, call, apply\n\nfunction foo(n) {\n  return n > 3 ? foo(n-1) + foo(n-4) : 1;\n}\n\nfoo(10) - ok\nfoo(1000) - zavislo\n// почему 10 ...",
        "full_content": "2025-04-30 11:25:08\n Артур Виноградов -> 2071074234:\nVK WorkSpace\nВакансия - https://team.vk.company/vacancy/41448/\nЗП: 300\nВсё точно также как здесь https://t.me/c/2071074234/489/117022\n\nВопросы: \n- Различие между обычными функциями и стрелочными?\nconst counter = {\n value: 0,\n next() {\n   this.value++;\n   console.log(this.value);\n }\n}\n// Что выведет и как решить\n- Про bind, call, apply\n\nfunction foo(n) {\n  return n > 3 ? foo(n-1) + foo(n-4) : 1;\n}\n\nfoo(10) - ok\nfoo(1000) - zavislo\n// почему 10 - ок, а 1000 - зависло, как решать\n\n- В чём разница между preventDefault и stopPropagation\n- Есть список с элементами, у элемента есть кнопка \"Ещё\", по её нажатию появляется менюшка. у списка висит обработчик клика и у кнопки \"Ещё\" висит обработчик клика.\nНо у кнопки стоит stopPropagation. Прилетает задача, что нужно отсылать аналитику о клике в списке, а кнопка ещё не отправляет событие клика. что будешь делать? P.s лучше посмотреть в видосе как он объясняет её\n- Как удалить элемент из массива. По индексу, а затем просто элемент.\n- Как быстро вставить элемент в отсортированный массив чисел\n- Как отловить js ошибки на странице (не try catch, и не errorBoundary)\n- В чем разница throw 'message' и throw new Error('message')\n- 1) Приходишь в офис, решаешь воспользоваться почтой (проект, который вы разрабатываете), открываешь свой продукт будучи разработчиком и видишь белый экран, что будешь делать?\n2) если там видишь a undefined и b undefined\n- Произошла проблема в продакшене, выкатилась задача с багом, юзеры видели белый экран в течении 30 минут. Кто виноват и что делать по итогам такой проблемы?\n- В чем проблема данного кода ? \nwindow.addEventListener('scroll', () => {\n const el = document.querySelector(\"#navbar\");\n const {top} = el.getBoundingClientRect();\nel.style.top = top <= 0 ? \"0px\" : \"auto\";\nel.style.position = top <= 0 ? \"fixed\" : \"static\";\n});\n- странный баг и непонятно откуда взялся. какие инструменты по отладке будешь использовать?\n- для чего ServiceWorker\n- виды синхронного кода в js. (про промисы, await)\n- Как отменить выполнение fetch запроса\n- почему в 3 промисе мы видим Third Error\nconst first = new Promise(() => {\n throw 'First error'\n})\n\nconst second = new Promise(() => {\n throw 'Second error'\n})\nsecond.catch(() => {})\n\nconst third = new Promise(() => {\n throw 'Third error'\n})\nthird.catch(() => {})\nthird.finally(() => console.log('Third ✅'))\n\n// Third ✅\n// Uncaught (in promise) First error\n// Uncaught (in promise) Third error\n- Хотим получать информацию в реальном времени. Что для этого использовать?\nесть LongPolling MiddlePolling ShortPolling\n- Как можно отцентровать div\n- что должно быть в описании задачи, чтобы ты посчитал её готовым к тому, чтобы взять в работу\n- посчитал задачу готовой, но в процессе понял что компонент не подходит по дизайну и ты не укладываешься в срок, если будешь переделывать, что будешь делать?\n- что такое Virtual DOM\n- если меняю opacity элементу, что будет происходить со страницей\n- библиотека и фреймворк, в чём разница, как выбирать что использовать? почему реакт это библиотека\n- что такое стейт менеджер\n- Props drilling, useContext, state manager, что лучше, в чём проблема useContext\n - перехват ошибок в реакте\n- инструменты профилирования ошибок в реакте\n- как понять что проект запущен в Iframe, что сделать чтобы это запретить или выбраться  из iframe\n- как вставить произвольную строку в HTML не боясь XSS\n- что ты сделаешь если найдёшь XSS в своём проекте\n- тебе доверили написать библиотеку компонентов. в проекте будет участвовать несколько человек. что нужно сделать для организации совместной работы и какие практики и инструменты нужны.\n- какие тесты бы добавил в библиотеку компонентов."
      }
    ]
  },
  {
    "company": "Datanomica",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-28 10:03:12",
        "content": "2025-01-28 10:03:12\n Владислав -> 2071074234:\n- компания: Datanomica\n- вакансия: https://zheleznodorozhniy50.hh.ru/vacancy/115753897?from=employer&hhtmFrom=employer\n- зп: не обсуждалось\n\nВопросы: \nСпрашивал исключительно по резюме, что я описывал: \n - архитектура FSD (какие есть слои, что каждый слой может использовать и что не может, про то, как реализовывал роутинг)\n - валидация форм, с помощью React-hook-form (в чем преимущество, что такое touched, dirty) \n - про стили (какие библиотеки испоз...",
        "full_content": "2025-01-28 10:03:12\n Владислав -> 2071074234:\n- компания: Datanomica\n- вакансия: https://zheleznodorozhniy50.hh.ru/vacancy/115753897?from=employer&hhtmFrom=employer\n- зп: не обсуждалось\n\nВопросы: \nСпрашивал исключительно по резюме, что я описывал: \n - архитектура FSD (какие есть слои, что каждый слой может использовать и что не может, про то, как реализовывал роутинг)\n - валидация форм, с помощью React-hook-form (в чем преимущество, что такое touched, dirty) \n - про стили (какие библиотеки испозьвал, про css-modules говорили)\n - кеширование данных (также говорили про браузерные хранилища, их размер, как записывать, как работают)\n - нормализация данных \n - правила использования хуков (где нельзя использовать и вызывать) \n - useEffect\n - useRef (для чего и в чем разница от useState)\n - тестирование (как писал тесты)\n - что такое jest.fn()\n - beforeEach(), afterEach()\n - паттерны проектирования\n - хоки\n - AbortController"
      }
    ]
  },
  {
    "company": "CSSSR",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-18 20:26:10",
        "content": "2024-11-18 20:26:10\n Андрей -> 2071074234:\nCSSSR техсобес\nУспех: ?\nЗП: запросил 300\nВакансия: эйчарка написала.\nВопросы:\nОбщение было в основном за опыт и все вопросы вытекали уже из него. Чем пользовался кроме реакта/редакса, какие плюсы/минусы. При oAuth авторизации где хранить токены и как передавать. \nЗадачи:\n#1 Пройтись по дереву произвольной вложенности и достать все value (сложить их в массив и вернуть)\n\n#2 Написать функцию мемоизации для других функций (декоратор)",
        "full_content": "2024-11-18 20:26:10\n Андрей -> 2071074234:\nCSSSR техсобес\nУспех: ?\nЗП: запросил 300\nВакансия: эйчарка написала.\nВопросы:\nОбщение было в основном за опыт и все вопросы вытекали уже из него. Чем пользовался кроме реакта/редакса, какие плюсы/минусы. При oAuth авторизации где хранить токены и как передавать. \nЗадачи:\n#1 Пройтись по дереву произвольной вложенности и достать все value (сложить их в массив и вернуть)\n\n#2 Написать функцию мемоизации для других функций (декоратор)"
      }
    ]
  },
  {
    "company": "10 Бсс",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-18 18:36:20",
        "content": "2024-10-18 18:36:20\n Mike -> 2071074234:\n16.10 БСС\nВакансия:https://hh.ru/vacancy/108321405\nЗП:250к\n1.Как задача прилетала в бэклог флоу\n2.this \n3.call/bind/apply\n4.Замыкание\n5.EventLoop\n6.что относится  к микротаскам\n7.async/await\n8.DOM\n9.почему не можем юзать HTML вместо дома(js только через DOM работает)\n10.Всплытие/Погружение подробно\n11.stopPropagation & preventDefault\n12.3 хука, с которыми чаще всего работал\n13.useRef\n14.useEffect как может себя вести(уберем зависимости или вообще не напиш...",
        "full_content": "2024-10-18 18:36:20\n Mike -> 2071074234:\n16.10 БСС\nВакансия:https://hh.ru/vacancy/108321405\nЗП:250к\n1.Как задача прилетала в бэклог флоу\n2.this \n3.call/bind/apply\n4.Замыкание\n5.EventLoop\n6.что относится  к микротаскам\n7.async/await\n8.DOM\n9.почему не можем юзать HTML вместо дома(js только через DOM работает)\n10.Всплытие/Погружение подробно\n11.stopPropagation & preventDefault\n12.3 хука, с которыми чаще всего работал\n13.useRef\n14.useEffect как может себя вести(уберем зависимости или вообще не напишем их)\n15.HOC\n16.useMemo vs useCallback\n17.redux\n18.middleware\n19.HOC(HOF)\n20.HTTP vs HTTPS\n21.Открытый/закрытый ключ\n22.Как настроить кэширование в браузере\n23.session vs localStorage\n24.задача 1: написать палиндром + как можно его оптимизировать\n25.задача 2: проверить совпадают ли скобоки(\"((()))\") и как можно оптимизировать решение\n26.задачв 3: привести к такой записи строку (9999/9999)"
      }
    ]
  },
  {
    "company": "Lada Цифра",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-05 07:24:31",
        "content": "2025-02-05 07:24:31\n Сергей -> 2071074234:\nКомпания: Lada цифра\nВакансия: hr Написала\nВопросы:\nМасимально душный собес, толком вопросов нет, общение\nна понимание твоих знаний. На один ответ в ответ идет еще\nдва вопроса)\n- Задача с SetTimeout и бесконечным циклом, просят\nсказать что выведется в консоли(ответ с бесконечным\nциклом неверный, задача исходная не осталась)\nИсправленная\nfunction getCookiesCount(callback) {\n    let cookies = 0;\n\n   const interval = setInterval(()=> {\n       cookies++;\n  ...",
        "full_content": "2025-02-05 07:24:31\n Сергей -> 2071074234:\nКомпания: Lada цифра\nВакансия: hr Написала\nВопросы:\nМасимально душный собес, толком вопросов нет, общение\nна понимание твоих знаний. На один ответ в ответ идет еще\nдва вопроса)\n- Задача с SetTimeout и бесконечным циклом, просят\nсказать что выведется в консоли(ответ с бесконечным\nциклом неверный, задача исходная не осталась)\nИсправленная\nfunction getCookiesCount(callback) {\n    let cookies = 0;\n\n   const interval = setInterval(()=> {\n       cookies++;\n    }\n   \n    setTimeout(()=> {\n        clearInterval(interval);\n        callback(cookies);\n    }, 2000);\n}\n\ngetCookiesCount(result => {\n    console.log(result)\n})\n\n- Хостинг\n- Почему var поднимается\n- Что такое callback Hell\n- Что будет если подсунуть исходники в Source`ы\n- Как работает debugger\n- Компиляция\n- Инициализация\n- Куда попадает var, почему оно хостится\n- Для чего придумали async/await\n- Что будет если подсовывать исходники в source\n- Способы оптимизации страницы\n- Что такое чистая функция\n- Что такое RUM для чего нужен\n- В каких компонентах и какие тесты писали\n- Задача на область видимости\nconst arrUnSort = [1, 4, 26, 9, 2];\nconst arrSort = []:\n\narraySorted(arrUnSort, arrSort);\n\nfunction arraySorted(arrUnSort, arrSort) {\n    arrSort = arrUnSort.sort();\n}\n\nconsole.log(arrSort);\nconsole.log(arrUnSort);"
      }
    ]
  },
  {
    "company": "Doubletapp",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-14 20:33:41",
        "content": "2024-11-14 20:33:41\n Стас Тихомиров -> 2071074234:\nКомпания: Doubletapp разговор с HR\nВакансия: https://spb.hh.ru/vacancy/109662867?hhtmFrom=employer_vacancies\nЗП: 200к\nВопросы:\n- Причины ухода\n- Расскажи о предыдущем месте\n- какие ожидания от места работы\n- Чем занимался\n- 2 задачи\n function countCharacters(inputString) {\n    const charCount = {};\n    \n    for (const char of inputString) {\n        if (charCount[char]) {\n            charCount[char] += 1;\n        } else {\n            charCount[ch...",
        "full_content": "2024-11-14 20:33:41\n Стас Тихомиров -> 2071074234:\nКомпания: Doubletapp разговор с HR\nВакансия: https://spb.hh.ru/vacancy/109662867?hhtmFrom=employer_vacancies\nЗП: 200к\nВопросы:\n- Причины ухода\n- Расскажи о предыдущем месте\n- какие ожидания от места работы\n- Чем занимался\n- 2 задачи\n function countCharacters(inputString) {\n    const charCount = {};\n    \n    for (const char of inputString) {\n        if (charCount[char]) {\n            charCount[char] += 1;\n        } else {\n            charCount[char] = 1;\n        }\n    }\n    \n    return charCount;\n}\n\n// Пример использования\nconst inputStr = \"aabbccaaab\";\nconst result = countCharacters(inputStr);\nconsole.log(result);  // Вывод: { a: 5, b: 3, c: 2 }\nвывести все значения values в массив\n// Пример дерева\nconst tree = {\n    value: 1,\n    children: [\n        {\n            value: 2,\n            children: [\n                {\n                    value: 4,\n                    children: null\n                },\n                {\n                    value: 5,\n                    children: null\n                }\n            ]\n        },\n        {\n            value: 3,\n            children: null\n        }\n    ]\n};\n function traverseTree(node) {\n    let values = [node.value];\n    if (node.children) {\n        node.children.forEach(child => {\n      values = values.concat(traverseTree(child));\n});\n    }\n    return values;\n}\n\nconst result = traverseTree(tree);\nconsole.log(result); // [1, 2, 3, 4, 5]"
      }
    ]
  },
  {
    "company": "Леруа Мерлен",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-02 03:16:58",
        "content": "2024-11-02 03:16:58\n Никита -> 2071074234:\n(Лемана ПРО) Леруа Мерлен\nзп 250k \nвакансия https://telegra.ph/Frontend-developer-React-Leroy-Merlin-09-25-2",
        "full_content": "2024-11-02 03:16:58\n Никита -> 2071074234:\n(Лемана ПРО) Леруа Мерлен\nзп 250k \nвакансия https://telegra.ph/Frontend-developer-React-Leroy-Merlin-09-25-2"
      }
    ]
  },
  {
    "company": "Кокос.Group",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-10 14:28:32",
        "content": "2024-07-10 14:28:32\n Artur -> 2071074234:\nКокос.Group\n\n— Вакансия: https://nn.hh.ru/vacancy/102380926?hhtmFrom=vacancy_responses\n— ЗП: говорил 180к+\n\nВопросы:\n— какие проблемы решают вебсокеты\n— какие еще методы знаешь кроме вебсокетов\n— как под капотом работает next/dynamic, как происходит что страница загрузится быстрее\n— почему next.js на проекте выбрали\n— что такое гидрация\n\nЗадачи: \n\n1) реализовать получение информации и пагинацию\n\n// Task: Fetch and Display Posts with Pagination\n\n// Object...",
        "full_content": "2024-07-10 14:28:32\n Artur -> 2071074234:\nКокос.Group\n\n— Вакансия: https://nn.hh.ru/vacancy/102380926?hhtmFrom=vacancy_responses\n— ЗП: говорил 180к+\n\nВопросы:\n— какие проблемы решают вебсокеты\n— какие еще методы знаешь кроме вебсокетов\n— как под капотом работает next/dynamic, как происходит что страница загрузится быстрее\n— почему next.js на проекте выбрали\n— что такое гидрация\n\nЗадачи: \n\n1) реализовать получение информации и пагинацию\n\n// Task: Fetch and Display Posts with Pagination\n\n// Objective:\n// Create a React application that fetches posts from the JSONPlaceholder API\n// and displays them with pagination.\n\n// Requirements:\n// 1. Fetch Posts:\n//    - Fetch posts from `https://jsonplaceholder.typicode.com/posts?_page=1&_limit=10`.\n//    - Display the posts in a list format.\n// 2. Pagination:\n//    - Implement pagination to navigate through the list of posts.\n// 3. Loading State:\n//    - Show a loading indicator while fetching the posts.\n// 4. Error Handling:\n//    - Display an error message if the fetch request fails.\n\nimport \"./styles.css\";\nimport { useState, useEffect } from \"react\";\n\n// const POSTS_API_URL =\n//   \"https://jsonplaceholder.typicode.com/posts?_page=1&_limit=10\";\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(10);\n\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const res = await fetch(\n          `https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=10`\n        );\n        const postsData = await res.json();\n        setPosts(postsData);\n      } catch (err) {\n        setError(err.message);\n        setPosts([]);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [page]);\n\n  const hadlePrevPage = () => {\n    setPage((prevPage) => Math.max(prevPage - 1, 1));\n    console.log(page);\n  };\n\n  const hadleNextPage = () => {\n    setPage((prevPage) => Math.min(prevPage + 1, totalPages));\n    console.log(page);\n  };\n\n  return (\n    <div>\n      {loading && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      <ul>\n        {posts.map((post) => {\n          return <li key={post.id}>{post.title}</li>;\n        })}\n      </ul>\n      <div className=\"pagination\">\n        <button onClick={hadlePrevPage}>Prev</button>\n        <button onClick={hadleNextPage}>Next</button>\n      </div>\n    </div>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <h1>Posts</h1>\n      </header>\n\n      <Posts />\n    </div>\n  );\n}\n\n\n2) решить задачу с числами Фибоначчи, по индексу вывести число\n\nfunction fibonacci(n) {\n    if (n <= 1) return n;\n\n    let a = 0, b = 1, temp;\n\n    for (let i = 2; i <= n; i++) {\n        temp = a + b;\n        a = b;\n        b = temp;\n    }\n\n    return b;\n}\n\n// Пример использования:\nconsole.log(fibonacci(10)); // Вывод: 55"
      }
    ]
  },
  {
    "company": "Centicore Solutions На Проект Go Invest",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-20 20:28:33",
        "content": "2024-06-20 20:28:33\n Руслан -> 2071074234:\nКомпания: Centicore Solutions на проект Go Invest\nСсылка: hr сама написала\nЗП:  280к\nУровень: middle\nУспех собеса: ?\n\nВопросы от hr:\n1. как создать кастомный хук в реакт\n2. сложность алгоритма пузырьковой сортировки\n3. как передаются куки с клиента на сервер\n4. что такое cors, для чего используется\n5. самый эффективный способ глубокого клонирования объектов в js",
        "full_content": "2024-06-20 20:28:33\n Руслан -> 2071074234:\nКомпания: Centicore Solutions на проект Go Invest\nСсылка: hr сама написала\nЗП:  280к\nУровень: middle\nУспех собеса: ?\n\nВопросы от hr:\n1. как создать кастомный хук в реакт\n2. сложность алгоритма пузырьковой сортировки\n3. как передаются куки с клиента на сервер\n4. что такое cors, для чего используется\n5. самый эффективный способ глубокого клонирования объектов в js"
      }
    ]
  },
  {
    "company": "Ротек",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-11 12:49:30",
        "content": "2024-11-11 12:49:30\n Егор -> 2071074234:\nКомпания: РОТЕК\nВакансия: https://hh.ru/vacancy/109140892\nЗП: 180+\nВопросы:\n- Расскажите о себе\n- Твои слабые сильные стороны\n- Как развиваешься\n- Что последнее изучал\n- Каких бы задач хотелось избежать\n- Почему ищешь новое место работы\n\nТех. вопросы:\n- Event-loop\n- CORS\n- Http vs Https\n- var let const\n- типы данных в js\n- promise\n- promise.race\n- bind call apply\n- this\n- стрелочная функция и обычная отличия\n- React в чем смысл\n- key зачем нужен\n- Хуки, п...",
        "full_content": "2024-11-11 12:49:30\n Егор -> 2071074234:\nКомпания: РОТЕК\nВакансия: https://hh.ru/vacancy/109140892\nЗП: 180+\nВопросы:\n- Расскажите о себе\n- Твои слабые сильные стороны\n- Как развиваешься\n- Что последнее изучал\n- Каких бы задач хотелось избежать\n- Почему ищешь новое место работы\n\nТех. вопросы:\n- Event-loop\n- CORS\n- Http vs Https\n- var let const\n- типы данных в js\n- promise\n- promise.race\n- bind call apply\n- this\n- стрелочная функция и обычная отличия\n- React в чем смысл\n- key зачем нужен\n- Хуки, пояснить за те что знаешь\n- Generic\n- Untility Types\n\nЗадачи:\nФункция подсчёта символов в строке \n\n``` function countCharacters(string) {\n    const charCount = {};\n\n    for (let char of string) {\n        if (charCount[char]) {\n            charCount[char]++;\n        } else {\n            charCount[char] = 1;\n        }\n    }\n\n    return charCount;\n}\nconst inputString = \"Пример строки\";\nconst result = countCharacters(inputString);\n\nconsole.log(\"Количество вхождений каждого символа:\");\nfor (let char in result) {\n    console.log(${char}: ${result[char]});\n}  \n```"
      }
    ]
  },
  {
    "company": "Dogma",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-02-13 14:02:25",
        "content": "2024-02-13 14:02:25\n Aziz Gaynetdinov -> 2071074234:\nКомпания: Dogma\nСсылка на вакансию: https://krasnodar.hh.ru/vacancy/92590179?hhtmFrom=chat\nЗП: 160\nЗадачи: \n1. Сверстать нянкэт (позиционирование элементов)\n2. \n// 1. Написать функцию, которая будет суммировать все значения из values\n\nconst values = [\n  {\n    value: 2,\n    children: [\n      {\n        value: 5,\n        children: [\n          {\n            value: 8,\n            children: [],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    va...",
        "full_content": "2024-02-13 14:02:25\n Aziz Gaynetdinov -> 2071074234:\nКомпания: Dogma\nСсылка на вакансию: https://krasnodar.hh.ru/vacancy/92590179?hhtmFrom=chat\nЗП: 160\nЗадачи: \n1. Сверстать нянкэт (позиционирование элементов)\n2. \n// 1. Написать функцию, которая будет суммировать все значения из values\n\nconst values = [\n  {\n    value: 2,\n    children: [\n      {\n        value: 5,\n        children: [\n          {\n            value: 8,\n            children: [],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 5,\n    children: [],\n  },\n  {\n    value: 10,\n    children: [\n      {\n        value: 90,\n        children: [],\n      },\n    ],\n  },\n]\n\nconst getAllValues = values => {\n  let allValues = 0\n\n  for (const el of values) {\n    if (el.children) {\n      allValues += getAllValues(el.children)\n    }\n    allValues += el.value\n  }\n\n  return allValues\n}\n\nconsole.log(getAllValues(values))\n\nЗапись: https://youtu.be/im5E-xj2zI0\nУспех:  ✅\nФитбек о собесе от HR: Всё супер \n\nОт себя: до финального этапа не говорю что я без военника и приписного, мб после оффера смогут по ИП"
      }
    ]
  },
  {
    "company": "Харош",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-09-18 13:48:27",
        "content": "2024-09-18 13:48:27\n Daniil Max -> 2071074234:\nХарош \nНадо туда попасть \nПодготовься плз к поведенческому интервью \nВсе зависит тут осмотри\nПлюс видос по поведенческому от меня",
        "full_content": "2024-09-18 13:48:27\n Daniil Max -> 2071074234:\nХарош \nНадо туда попасть \nПодготовься плз к поведенческому интервью \nВсе зависит тут осмотри\nПлюс видос по поведенческому от меня"
      }
    ]
  },
  {
    "company": "AEX Soft",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-30 11:39:37",
        "content": "2025-04-30 11:39:37\n Захар -> 2071074234:\nAEX Soft\nЗП: 170к\nВакансия: https://spb.hh.ru/vacancy/118983339\nВопросы: \n- Кратко про опыт работы\n- Axios или Fetch? Что сейчас лучше использовать?\n- Any vs unknown\n- что такое as const?\n- что такое infer?\n- что такое замыкание?\n- что такое reconciliation в React?\n- что такое EventLoop?\n- React.memo?\nЗадачи: \n//Задача на анаграммы\nconst groupAnagrams = (arr) => {\n  const mapa = {};\n\n  arr.forEach((el) => {\n    const sorted = el.toLowerCase().split(\"\").s...",
        "full_content": "2025-04-30 11:39:37\n Захар -> 2071074234:\nAEX Soft\nЗП: 170к\nВакансия: https://spb.hh.ru/vacancy/118983339\nВопросы: \n- Кратко про опыт работы\n- Axios или Fetch? Что сейчас лучше использовать?\n- Any vs unknown\n- что такое as const?\n- что такое infer?\n- что такое замыкание?\n- что такое reconciliation в React?\n- что такое EventLoop?\n- React.memo?\nЗадачи: \n//Задача на анаграммы\nconst groupAnagrams = (arr) => {\n  const mapa = {};\n\n  arr.forEach((el) => {\n    const sorted = el.toLowerCase().split(\"\").sort().join(\"\");\n\n    if (!mapa[sorted]) mapa[sorted] = [];\n\n    mapa[sorted].push(el);\n  });\n\n  return Object.values(mapa);\n};\n\nconsole.log(groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"])); // [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\nНаписать функцию для поиска числа, которое встречается ровно 2 раза в массиве\n\nconst ololo = (arr) => {\n    // Создаем объект для подсчета количества каждого числа\n    const counter = {};\n    \n    // Подсчитываем количество каждого числа в массиве\n    for (const num of arr) {\n        counter[num] = (counter[num] || 0) + 1;\n    }\n    \n    // Ищем число, которое встречается ровно 2 раза\n    for (const num in counter) {\n        if (counter[num] === 2) {\n            return Number(num); // Преобразуем ключ обратно в число\n        }\n    }\n    \n    return null; // Если такого числа нет\n};\n\n// Тест функции\nconsole.log(ololo([1,3,4,2,2])); // 2\n\n//Задача на уникальную строку\nfunction isUnique(strings) {\n  const set1 = new Set();\n\n  for (const str of strings) {\n    if (set1.has(str)) {\n      return false;\n    }\n    set1.add(str);\n  }\n\n  return true;\n}\nЗадача на React, сделать 30 инпутов и вынести компонент: \nimport { useState } from 'react';\n\n// Вынесенный компонент прямо в этом же файле\nfunction InputField({ value, onChange }) {\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  );\n}\n\nfunction App() {\n  const [values, setValues] = useState(Array(30).fill(''));\n\n  const handleChange = (index) => (e) => {\n    const newValues = [...values];\n    newValues[index] = e.target.value;\n    setValues(newValues);\n  };\n\n  return (\n    <>\n      {values.map((value, index) => (\n        <InputField\n          key={index}\n          value={value}\n          onChange={handleChange(index)}\n        />\n      ))}\n    </>\n  );\n}\n\nexport default App;"
      }
    ]
  },
  {
    "company": "ФГАОУ ВО МИИТ",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-18 17:07:54",
        "content": "2025-07-18 17:07:54\n Aintripin -> 2071074234:\nКомпания: ФГАОУ ВО МИИТ (18.07.2025)\nВакансия: Frontend разработчик\n\nЗП: выяснилось, что нанимают от джунов до мидлов. Выудил вилку, получается от 60к до 200к\n\nВопросы:\n\n1. Рассказать про себя\n2. Рассказать про самый интересный проект/фичу, что вообще самое интересное делал\n3. Рассказать про архитектуру на проекте\n4. Монолит vs микрофронты: что такое первое, что такое второе. В чём разница между ними? Что лучше? Если у тя монолит, то рассказать, что ...",
        "full_content": "2025-07-18 17:07:54\n Aintripin -> 2071074234:\nКомпания: ФГАОУ ВО МИИТ (18.07.2025)\nВакансия: Frontend разработчик\n\nЗП: выяснилось, что нанимают от джунов до мидлов. Выудил вилку, получается от 60к до 200к\n\nВопросы:\n\n1. Рассказать про себя\n2. Рассказать про самый интересный проект/фичу, что вообще самое интересное делал\n3. Рассказать про архитектуру на проекте\n4. Монолит vs микрофронты: что такое первое, что такое второе. В чём разница между ними? Что лучше? Если у тя монолит, то рассказать, что не нравится, что хотелось бы изменить в монолите?\n\n5. У нас есть два приложения: скажем, корзина и счёты. С точки зрения пользователя, как сохранить состояние? Именно UI-состояние? Как сохранить то состояние, где пользователь в последний раз был? С точки зрения монолита и микрофронтов.\n(В монолите для каждого из этих разделов можем хранить в redux-slice'ах. В микрофронтендах, там у нас каждый из может хранить своё состояние независимо. У каждого свой redux store. Если какие-то глобальные сценарии, то просто в event bus мы можем пушить или shared storage можно использовать. Можно отдельный state-manager подключить для взаимодействия между микрофронтами)\n\n6. Вопрос по микрофронтам: у нас есть два разных веб-приложения: карты и дашборд. Если будем кликать по ним, то на деле это redirect от одного приложения на другое и происходит перезагрузка страницы. И мы видим либо белый, либо чёрный экран загрузки. Как сделать бесшовный redirect?\nОтвет: можем сделать оболочку (shell app), она всегда загруженная остаётся, а микрофронты уже динамически подгружаются. В webpack есть Module Federation, его можно использовать. Ещё можно скелетоны сделать во время загрузки. Или просто при наведении на что-то подгружать заранее контент\n\n7. Допустим, что у нас нет оболочки: как мы можем начать прогружать другое веб приложение заранее? Отслеживая event мышки, например, при наведении на эту новую \"вкладку\".\nprefetch через\n<link rel=\"prefetch\">\nможно сделать. Т.е. у нас грузится при наведении, а когда кликаем, то уже в кеше есть часть ресурсов\n\n8. API first vs UI first подходы: что это и в чём разница?\n\n9. API first vs UI first: вопрос в контрактности. Приходит новая фича, её должны взять и бэкенд разрабы и фронт разрабы. Как у вас шла работа? Был ли опыт UI first? Был ли опыт API first? Что тебе ближе? С чем бы работал?\n\n10. Вопрос по ИИ: чем пользуешься? Чё нравится? \n\n11. Почему ушёл с последнего места работы?\n\n12. Нет ли отторжения к вёрстке?\n\n13. У нас офис. Тебе норм?\n\n14. У нас Vue3. Как долго вы пересаживаетесь с фреймворка на фреймворк?\n\n15. С какими методологиями ведения проекта работали? Как происходит взаимодействие в команде? (Тут про Scrum рассказывал)\n\n16. Есть ли опыт работы с картами? Если есть, то надо рассказать чё за карты, как оно происходит, чё отображали, как общались с бэком\n\nДалее был блок вопросов с моей стороны по проекту и вакансии"
      }
    ]
  },
  {
    "company": "Восточная Горнорудная",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-01-18 08:03:15",
        "content": "2024-01-18 08:03:15\n Настя BAGIRA -> 2071074234:\n- Компания: Восточная Горнорудная Компания-ВГК\n- Важность: Практика\n- Ссылка на вакансию: hr сама написала\n- Middle 150-180к\n\nВопросы:\nВопросы про разницу interface и type, дженерики, вопрос на знание что ts не работает в рантайме\nЗамыкание, стадии создания контекста\nВопросы про websocet и http, также про знание как работает интернет (образно что происходит как мы забили урл в адрес строку)\nJwt , cors, про токены и для чего нужен каждый из (access...",
        "full_content": "2024-01-18 08:03:15\n Настя BAGIRA -> 2071074234:\n- Компания: Восточная Горнорудная Компания-ВГК\n- Важность: Практика\n- Ссылка на вакансию: hr сама написала\n- Middle 150-180к\n\nВопросы:\nВопросы про разницу interface и type, дженерики, вопрос на знание что ts не работает в рантайме\nЗамыкание, стадии создания контекста\nВопросы про websocet и http, также про знание как работает интернет (образно что происходит как мы забили урл в адрес строку)\nJwt , cors, про токены и для чего нужен каждый из (access и refresh), где хранить и зачем\nТакже долго общались за архитектуру, тк указывала это в резюме, просил рассказать какие использовала, почему применяла сначала одну, потом другую, плюсы минусы, про ddd было еще что-то, не помню\nОтличия vue 2 vue 3, рассказать про composition и option api, различия, преимущества того или иного, про хуки жизненного цикла что происходит на каждом этапе, отличия methods от computed и watchers,  effectScope , что-то про trigger ( не запомнила точно, тк первый раз слышу про это)\n\nУспех собеса: ✅ пригласили на след этап \nФидбек от собеседующего: все отлично 🔥\n\nМой комментарий: классный не душный собес, приятный собеседующий, понравилось. Зп немного не по вилке мне, но проект понравился, сложный , думаю прокачаюсь там. Сначала думала практика собес, сейчас думаю возможно согласиться подвинувшись по вилке (хотя посмотрим че предложат, вилку свою озвучивала)\n\n#вгк #восточная_горнорудная_компания"
      }
    ]
  },
  {
    "company": "Дивергент Зп До 150К",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-04 16:04:34",
        "content": "2025-04-04 16:04:34\n Равиль Васильев -> 2071074234:\nДивергент ЗП до 150к\n\n📢 Вакансия - https://hh.ru/vacancy/118126656?from=share_ios\n\n📌 Задачи:\n\n// Напишите функцию retryPromise(fn, retries, delay), которая принимает:\n\n    // fn – функция, возвращающую промис,\n    // retries – количество попыток повторного вызова, если промис отклонён,\n    // delay – задержку между попытками в миллисекундах.\n    // Функция должна вызывать fn(). Если промис разрешается – возвращать его результат,\n    // если отк...",
        "full_content": "2025-04-04 16:04:34\n Равиль Васильев -> 2071074234:\nДивергент ЗП до 150к\n\n📢 Вакансия - https://hh.ru/vacancy/118126656?from=share_ios\n\n📌 Задачи:\n\n// Напишите функцию retryPromise(fn, retries, delay), которая принимает:\n\n    // fn – функция, возвращающую промис,\n    // retries – количество попыток повторного вызова, если промис отклонён,\n    // delay – задержку между попытками в миллисекундах.\n    // Функция должна вызывать fn(). Если промис разрешается – возвращать его результат,\n    // если отклоняется – ждать заданное время и повторять вызов, пока не исчерпаются попытки.\n    //Если после всех попыток промис так и не разрешался, функция должна отклониться с последней ошибкой.\n\n\n//Решение\n\nfunction retryPromise(fn, retries, delay) {\n  return new Promise((resolve, reject) => {\n    function attempt() {\n      fn()\n        .then(resolve)\n        .catch((error) => {\n          if (retries <= 0) {\n            reject(error);\n          } else {\n            retries--;\n            setTimeout(attempt, delay);\n          }\n        });\n    }\n    attempt();\n  });\n}\n\n// Пример использования:\nlet attemptCount = 0;\nfunction unstableTask() {\n  return new Promise((resolve, reject) => {\n    attemptCount++;\n    console.log(`Попытка ${attemptCount}`);\n    if (attemptCount < 3) {\n      reject(`Ошибка на попытке ${attemptCount}`);\n    } else {\n      resolve(`Успех на попытке ${attemptCount}`);\n    }\n  });\n}\n\nretryPromise(unstableTask, 5, 1000)\n  .then(result => console.log(result))\n  .catch(err => console.error(err));\n\n// Функция, реализующая реверс строки\nfunction reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconsole.log(reverseString('reverse')); // Выведет: \"esrever\"\nconsole.log(reverseString('hello'));   // Выведет: \"olleh\""
      }
    ]
  },
  {
    "company": "Queen Games",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-14 17:35:16",
        "content": "2025-03-14 17:35:16\n Максим Соломыкин -> 2071074234:\nКомпания: Queen Games\nВакансия: https://krasnoyarsk.hh.ru/vacancy/117479806?hhtmFrom=resume\nЗП: 3000 - 3500$\n\nВопросы:\n1. Как пробрасывали переменные из env в vite\n2. Про опыт предыдущий\n3. Что такое замыкание\n4. Как использовал замыкание\n5. Что такое throttle и что такое debounce\n6. Как с помощью throttle предотвратить Ddos атаку\n7. Что такое прототип\n8. Какой контекст у стрелочной функции\n9. Атрибуты async и defer для чего нужны и в чем разн...",
        "full_content": "2025-03-14 17:35:16\n Максим Соломыкин -> 2071074234:\nКомпания: Queen Games\nВакансия: https://krasnoyarsk.hh.ru/vacancy/117479806?hhtmFrom=resume\nЗП: 3000 - 3500$\n\nВопросы:\n1. Как пробрасывали переменные из env в vite\n2. Про опыт предыдущий\n3. Что такое замыкание\n4. Как использовал замыкание\n5. Что такое throttle и что такое debounce\n6. Как с помощью throttle предотвратить Ddos атаку\n7. Что такое прототип\n8. Какой контекст у стрелочной функции\n9. Атрибуты async и defer для чего нужны и в чем разница\n10. CSS will change зачем нужен\n11. Как скрыть элемент со страницы\n12. В чем разница между display: none и visibility: hidden\n13. Как можно пробрасывать пропсы между компонентами, без Redux и useContext\n14. Как пробросить ref между компонентами через props\n15. Что за паттерн Compound Components\n16. Render Props\n17. Что такое декораторы в NestJS\n\nШарил экран с задачей,я попросил скинуть, если пришлет, то добавлю сюда"
      }
    ]
  },
  {
    "company": "А2Code",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-11 17:01:16",
        "content": "2025-02-11 17:01:16\n Александр Богданов -> 2071074234:\nкомпания:  А2code(А2КОД)\nвакансия:  hr сама написала\nЗП просил: 270к\nЗадачи:  все как тут:https://t.me/c/2071074234/489/44814",
        "full_content": "2025-02-11 17:01:16\n Александр Богданов -> 2071074234:\nкомпания:  А2code(А2КОД)\nвакансия:  hr сама написала\nЗП просил: 270к\nЗадачи:  все как тут:https://t.me/c/2071074234/489/44814"
      }
    ]
  },
  {
    "company": "Umbrella It",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-31 15:45:15",
        "content": "2025-01-31 15:45:15\n Ivan -> 2071074234:\nКомпания: umbrella it\nЗП: 200\nСпрашивали за опыт\nкакие были задачи , как реализовывал \nмикрофронты, как работают , как реаилизовать\nпеременные js\nEventloop\nЧто происходит в браузере когда мы вводим url\nЗачем нужны key в React\nVirtual Dom\nСпособы оптимизации\nМетрики производительности \nReact.memo\n\nЗадача : \nЧто будет в консоли ?\nsetTimeout(0 => {\nconsole.log('timer1')\nPromise.resolve)\nthen(( => console.log('prom8'))\n}, 0)\nPromise.resolve)\nthen(() => consol...",
        "full_content": "2025-01-31 15:45:15\n Ivan -> 2071074234:\nКомпания: umbrella it\nЗП: 200\nСпрашивали за опыт\nкакие были задачи , как реализовывал \nмикрофронты, как работают , как реаилизовать\nпеременные js\nEventloop\nЧто происходит в браузере когда мы вводим url\nЗачем нужны key в React\nVirtual Dom\nСпособы оптимизации\nМетрики производительности \nReact.memo\n\nЗадача : \nЧто будет в консоли ?\nsetTimeout(0 => {\nconsole.log('timer1')\nPromise.resolve)\nthen(( => console.log('prom8'))\n}, 0)\nPromise.resolve)\nthen(() => console.log('prom1'))\nthen(() => console.log(prom2'))\nsetTimeout() => (\nconsole.log(timer2)\n3, 0)\nPromise.resolve().then(()=>console.log('prom1')).then(()=>console.log('prom2'))\nsetTimeout(()=>{console.log('timer2')},0)\nPromise.resolve().then(()=>console.log('prom3')).then(()=>console.log('prom4'))\nsetTimeout(()=>{console.log('timer3')},0)\nnew Promise(()=> console.log('prom5'))\nconsole.log('end')"
      }
    ]
  },
  {
    "company": "Группа Астра",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-07 10:11:58",
        "content": "2025-02-07 10:11:58\n twomadd -> 2071074234:\nкомпания Группа Астра\nВакансия: hr написала\n\nВопросы:\n1. Какой максимальный размер команды был в которой работал?\n2. Когда работал над одной задачей , максимум со сколькими людьми тебе приходилось работать? И кто это?\n3. Если работал с аналитиком , то требования в каком виде от него приходили, в чем ?\n4. С каким gitflow ты работал? Как велись ветки ?\n5. Сколько в среднем жили фича бренчи ?\n6. Когда вливали ветку , какие проверки вообще проходит фича ве...",
        "full_content": "2025-02-07 10:11:58\n twomadd -> 2071074234:\nкомпания Группа Астра\nВакансия: hr написала\n\nВопросы:\n1. Какой максимальный размер команды был в которой работал?\n2. Когда работал над одной задачей , максимум со сколькими людьми тебе приходилось работать? И кто это?\n3. Если работал с аналитиком , то требования в каком виде от него приходили, в чем ?\n4. С каким gitflow ты работал? Как велись ветки ?\n5. Сколько в среднем жили фича бренчи ?\n6. Когда вливали ветку , какие проверки вообще проходит фича ветка \n7. Кто тебе ставил задачи ?\n8. В чем ты оценивал задачи? Если в поинтах , то чему был равен 1 поинт ?\n9. На твой взгляд , когда задача считается выполненной и закрытой ?\n10. Какими анализаторами когда ты пользуешься ?\n11. Если писал тесты , то на чем ?\n12. E2E-тесты писал?\n13. с Docker работал?\n14. За счет чего в JS имплементируется полиморфизм ?\n15. Что такое нотация О большое ?\n16. Хэш-таблица. \n17. Что такое замыкание ?\n18. Разница между стрелочной функцией и обычной \n19.Что такое Promise и какую проблему он решает ?\n20.Что такое React portal ?\n21. Как передать данные между компонентами вверх и вниз по иерархии\n22. useEffect и useLayoutEffect в чем разница ?"
      }
    ]
  },
  {
    "company": "Consaltica",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-20 06:14:17",
        "content": "2024-11-20 06:14:17\n Стас Тихомиров -> 2071074234:\nКомпания: Consaltica\nВакансия: написала hr\nЗП: не обсуждали\n\nВопросы за опыт, что делал, какие технологии знаешь. Было просто знакомство.\n\n- Что такое type guards\n- Что такое Discriminated Unions",
        "full_content": "2024-11-20 06:14:17\n Стас Тихомиров -> 2071074234:\nКомпания: Consaltica\nВакансия: написала hr\nЗП: не обсуждали\n\nВопросы за опыт, что делал, какие технологии знаешь. Было просто знакомство.\n\n- Что такое type guards\n- Что такое Discriminated Unions"
      }
    ]
  },
  {
    "company": "Дарвин",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-18 18:30:43",
        "content": "2024-10-18 18:30:43\n Mike -> 2071074234:\nКомпания:Дарвин\nВакансия:https://hh.ru/vacancy/106915153\nЗП:250к\nВопросы:\n1.REST какие правила у него\n2.какие апдейты в ts вышли, может знаешь\n3.+/- ts\n4.Vite vs Webpack\n5.FSD подробно(из чего состоит, какое разделение помимо слоев)\n6.БЭМ\n7.Public api что такое и зачем\n8.как избежать коллизию имен в css\n9.что такое css in js\n10.Virtual Dom \n11.Fiber\n12.Reconsalation\n13.useEffect что такое, какие варианты поведения у него, если не укажем/укажем массив зави...",
        "full_content": "2024-10-18 18:30:43\n Mike -> 2071074234:\nКомпания:Дарвин\nВакансия:https://hh.ru/vacancy/106915153\nЗП:250к\nВопросы:\n1.REST какие правила у него\n2.какие апдейты в ts вышли, может знаешь\n3.+/- ts\n4.Vite vs Webpack\n5.FSD подробно(из чего состоит, какое разделение помимо слоев)\n6.БЭМ\n7.Public api что такое и зачем\n8.как избежать коллизию имен в css\n9.что такое css in js\n10.Virtual Dom \n11.Fiber\n12.Reconsalation\n13.useEffect что такое, какие варианты поведения у него, если не укажем/укажем массив зависимостей\n14.useEffect vs useLayoutEffect\n15. что такое иммутабельность/ммутабельность и с чем работает реакт\n16.useRef \n17.RTK query зачем invalidatesTages\n18.минусы Context \n19.useSyncExternalStore может слышал о хуке\nБез задач"
      }
    ]
  },
  {
    "company": "Vk Инфраструктура",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-16 16:27:38",
        "content": "2025-04-16 16:27:38\n Maxim B. -> 2071074234:\nVK инфраструктура (1 этап)\n\n— ЗП:  270K, middle\n— Задача (одна в конце общения):\nfunction loadImage(src: string): Promise<Image> {\n  // эту функцию описывать не нужно, она уже есть\n}\n\n// чего не хватает в этой функции\nfunction waitForImages(srcs: string[]): Promise<void> {\n  srcs.map(loadImage);\n}\nтут дал ответ, что вторая функция не работает асинхронно, и нужно использовать async/await, либо обработчик then() и обернуть внутрянку в Promise.all (либо ...",
        "full_content": "2025-04-16 16:27:38\n Maxim B. -> 2071074234:\nVK инфраструктура (1 этап)\n\n— ЗП:  270K, middle\n— Задача (одна в конце общения):\nfunction loadImage(src: string): Promise<Image> {\n  // эту функцию описывать не нужно, она уже есть\n}\n\n// чего не хватает в этой функции\nfunction waitForImages(srcs: string[]): Promise<void> {\n  srcs.map(loadImage);\n}\nтут дал ответ, что вторая функция не работает асинхронно, и нужно использовать async/await, либо обработчик then() и обернуть внутрянку в Promise.all (либо allSettled по необходимости).\n\n— Вопросы:\n1) Отличие <div> и <span>\n2) В чем суть \"каскадности\" в css\n3) Что такое \"замыкание\" (привести пример)\n4) Разница type и interface\n5) Разница Union-types и Enum\n6) Псевдо -классы и -элементы (привести пример каждых)\n7) Способы привести к утечки памяти\n8) Браузерные хранилища\n9) Как работает async и defer\n\nРезультат: успех ✅"
      }
    ]
  },
  {
    "company": "Аг-Логистика",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-17 03:06:16",
        "content": "2024-11-17 03:06:16\n Ivan -> 2071074234:\nКомпания: АГ-Логистика\nВакансия: https://hh.ru/vacancy/109743192\nЗП:220+\nВопросы:\nВопросы были базовые, но уходил в глубь (душновато)\nПозиционирование CSS\nFlex, grid\nCSS анимации\nЧто будет после ввода url \nReflow, repaint, composite\nHtttp методы\nHttp ответы \nCORS\nPreflight request \nЗамыкание (var let const )\nЧистая функция \nEventloop\nБыл пример кода с замыканием и нужно было сказать что выводит. Первый раз выводит 10 раз 10\nВопрос был как это исправить(по...",
        "full_content": "2024-11-17 03:06:16\n Ivan -> 2071074234:\nКомпания: АГ-Логистика\nВакансия: https://hh.ru/vacancy/109743192\nЗП:220+\nВопросы:\nВопросы были базовые, но уходил в глубь (душновато)\nПозиционирование CSS\nFlex, grid\nCSS анимации\nЧто будет после ввода url \nReflow, repaint, composite\nHtttp методы\nHttp ответы \nCORS\nPreflight request \nЗамыкание (var let const )\nЧистая функция \nEventloop\nБыл пример кода с замыканием и нужно было сказать что выводит. Первый раз выводит 10 раз 10\nВопрос был как это исправить(поменять var на let)"
      }
    ]
  },
  {
    "company": "Yougile",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-21 21:09:15",
        "content": "2024-11-21 21:09:15\n Артем -> 2071074234:\nКомпания YouGile\nВакансия: https://hh.ru/vacancy/109174559?hhtmFrom=chat\nЗП: от 120\nВопросы: \nЗачем TS если есть юнит тесты\nccs in js\nДальше он такой давай поработаем в паре и там 3 примера решали: \n1 Кнопка при нажатии показывает текст\n2 в инпут нажали enter переместили на другой enter\n3 дал свой API Bitrix24 нужно было вмиесте с ним понять и разобрать как создать запрос \nconst createDeal = async () => {\n  const url = 'https://your-domain.bitrix24.ru/re...",
        "full_content": "2024-11-21 21:09:15\n Артем -> 2071074234:\nКомпания YouGile\nВакансия: https://hh.ru/vacancy/109174559?hhtmFrom=chat\nЗП: от 120\nВопросы: \nЗачем TS если есть юнит тесты\nccs in js\nДальше он такой давай поработаем в паре и там 3 примера решали: \n1 Кнопка при нажатии показывает текст\n2 в инпут нажали enter переместили на другой enter\n3 дал свой API Bitrix24 нужно было вмиесте с ним понять и разобрать как создать запрос \nconst createDeal = async () => {\n  const url = 'https://your-domain.bitrix24.ru/rest/1/your-webhook-key/crm.deal.add';\n  const dealData = {\n    fields: {\n      TITLE: 'Название сделки',\n    },\n  };\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(dealData)\n  });\n\n  const data = await response.json();\n  console.log('Deal created successfully:', data);\n};\nimport React, { useRef } from 'react';\n\nfunction App() {\n  const input1Ref = useRef(null);\n  const input2Ref = useRef(null);\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      input2Ref.current.focus();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <input\n        ref={input1Ref}\n        onKeyPress={handleKeyPress}\n        placeholder=\"Press Enter to focus the second input\"\n      />\n      <input\n        ref={input2Ref}\n        placeholder=\"Second input\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n \nfunction App() {\n  const [isTextVisible, setIsTextVisible] = useState(false);\n\n  const toggleText = () => {\n    setIsTextVisible(!isTextVisible);\n  };\n\n  return (\n    <div className=\"App\">\n      <button onClick={toggleText}>\n        {isTextVisible ? 'Скрыть текст' : 'Показать текст'}\n      </button>\n      {isTextVisible && <p>Это скрытый текст.</p>}\n    </div>\n  );\n}"
      }
    ]
  },
  {
    "company": "Pizzasoft",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-05-23 13:58:48",
        "content": "2025-05-23 13:58:48\n Max -> 2071074234:\nPizzaSoft\nзп: 160 т.р.\nтеории не было\nЗадачи: \n// написать ф-ию которая ограничивает вызовы\nfunction createLimitedCaller(callback) {\n    let callCount = 0;\n    const MAX_CALLS = 3;\n\n    return function(...args) {\n        if (callCount < MAX_CALLS) {\n            callCount++;\n            return callback(...args);\n        } else {\n            console.warn('Превышено максимальное количество вызовов (3)');\n            // Можно выбросить ошибку:\n            // t...",
        "full_content": "2025-05-23 13:58:48\n Max -> 2071074234:\nPizzaSoft\nзп: 160 т.р.\nтеории не было\nЗадачи: \n// написать ф-ию которая ограничивает вызовы\nfunction createLimitedCaller(callback) {\n    let callCount = 0;\n    const MAX_CALLS = 3;\n\n    return function(...args) {\n        if (callCount < MAX_CALLS) {\n            callCount++;\n            return callback(...args);\n        } else {\n            console.warn('Превышено максимальное количество вызовов (3)');\n            // Можно выбросить ошибку:\n            // throw new Error('Превышен лимит вызовов');\n            return undefined;\n        }\n    };\n}\n\n//написать функцию get \n// const obj = { value1: { value2: \"Test\" }}\n\n// get(obj, \"value1.value2\", null) // \"Test\"\n// get(obj, \"value1.value2.value3\", null) // null\n\nconst get = (obj, path, defaultVal = null) => {\n    const keys = path.split('.')\n    let result = obj\n\n    for (const key of keys) {\n        if( typeof result == 'object' ){\n            result = result[key]\n           }\n        }\n        else if( result != undefined ){\n            return result\n             }\n           }\n        }\n        return defaultVal\n    return result\n}\n///////////////////////////////////////////////////////////////////////////////\n// исправить компонент\nconst CustomProvider: FC<PropsWithChildren> = ({ children }) => {\n  const [state, setState] = useState(0);\n\n  const increment = useCallback(() => {\n    setState((state) => state + 1);\n  }, []); // добавить useCallback\n\n  const decrement = useCallback(() => {\n    setState((state) => state - 1);\n  }, []); // добавить useCallback\n\n  const actions = useMemo(() => ({ increment, decrement }), [increment, decrement]); // добавить useMemo\n\n  console.log(\"CustomProvider\");\n\n  return (\n    <CounterContext.Provider value={state}>\n      <ActionsContext.Provider value={actions}> // в value передать actions\n        {children}\n      </ActionsContext.Provider>\n    </CounterContext.Provider>\n  );\n};\n// написать todo по шаблону\nimport React, { useState } from \"react\";\n\nexport default function TodoList() {\n  const [tasks, setTasks] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [filter, setFilter] = useState(\"all\"); // 'all' | 'completed' | 'active'\n\n  // ✅ Добавление задачи\n  const handleAdd = () => {\n    if (inputValue.trim() === \"\") return;\n    const newTask = {\n      id: Date.now(),\n      text: inputValue,\n      completed: false,\n    };\n    setTasks([...tasks, newTask]);\n    setInputValue(\"\"); // очистка поля\n  };\n\n  // ✅ Переключение статуса задачи\n  const handleToggle = (id) => {\n    setTasks((prevTasks) =>\n      prevTasks.map((task) =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      )\n    );\n  };\n\n  // ✅ Фильтрация по выбранному фильтру\n  const filteredTasks = tasks.filter((task) => {\n    if (filter === \"completed\") return task.completed;\n    if (filter === \"active\") return !task.completed;\n    return true; // 'all'\n  });\n\n  return (\n    <div>\n      <h1>Список задач</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Новая задача\"\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n      />\n      <button onClick={handleAdd}>Добавить</button>\n\n      <div>\n        <button onClick={() => setFilter(\"all\")}>Все</button>\n        <button onClick={() => setFilter(\"active\")}>Активные</button>\n        <button onClick={() => setFilter(\"completed\")}>Выполненные</button>\n      </div>\n\n      <ul>\n        {filteredTasks.map((task) => (\n          <li key={task.id}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={task.completed}\n                onChange={() => handleToggle(task.id)}\n              />\n              {task.text}\n            </label>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}"
      }
    ]
  },
  {
    "company": "Intelsy",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-04 15:27:47",
        "content": "2025-07-04 15:27:47\n Эмир -> 2071074234:\nIntelsy\nЗП 210к\nВопросы\nДля чего нужен key?\nчто такое virtual dom?\nчто нужно использовать внутри key?\nчто такое useLayoutEffect что такое?\nasync defer\nкоды ошибок http\nчто такое cors?",
        "full_content": "2025-07-04 15:27:47\n Эмир -> 2071074234:\nIntelsy\nЗП 210к\nВопросы\nДля чего нужен key?\nчто такое virtual dom?\nчто нужно использовать внутри key?\nчто такое useLayoutEffect что такое?\nasync defer\nкоды ошибок http\nчто такое cors?"
      }
    ]
  },
  {
    "company": "Транснефть",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-09-25 03:03:12",
        "content": "2024-09-25 03:03:12\n Алмас -> 2071074234:\nКомпания Транснефть\nВакансия: https://t.me/c/2071074234/616/62937\nзп: от 300\n1. Как были организованы процессы? от кого получали задачи\n2. Задачи в каком трекере велись? как то документироали?\n3. В чем заключались технические улучшения добавление  Jest и React Testing Library в проект?\n4. Для чего использовали reselect?\n5. У нас есть стор в нем user, в usere есть id, соответственно мы можем получить user.id и зачем нам нужен reselect?\n6. У нас есть тег s...",
        "full_content": "2024-09-25 03:03:12\n Алмас -> 2071074234:\nКомпания Транснефть\nВакансия: https://t.me/c/2071074234/616/62937\nзп: от 300\n1. Как были организованы процессы? от кого получали задачи\n2. Задачи в каком трекере велись? как то документироали?\n3. В чем заключались технические улучшения добавление  Jest и React Testing Library в проект?\n4. Для чего использовали reselect?\n5. У нас есть стор в нем user, в usere есть id, соответственно мы можем получить user.id и зачем нам нужен reselect?\n6. У нас есть тег span как не меняя его св-ва display поменять высоту спана?\n7. Расскажи про вес селекторов?\n8. Замыкание?\n9. Как можно скопировать объект?\n10. Каррирование?\n11. Какие перебирающие методы массивов знаете?\n12. Какие методы мутируют а какие нет? \n13. Какой метод наподобие sort есть, который не будет мутировать исх массив? (ответ: toSorted() - новые метод 2023 года)\n14. Что мы можем сделать через цикл for, но не можем сделать через forEach?\n15. Что будет если сложить 0.1 и 0.2\n\n//нужно убрать кружки отступы у ul и html body , потом добавить бордер для li, далее растянуть ul на всю высоту экрана\n<ul class=\"list\">\n  <li>2</li>\n  <li class=\"maxHeight\">3</li>\n  <li>3</li>\n</ul>\n// у нас есть interface Props и нам нужно написать свой собственный тип куда мы пробросим это св-во, которое делает одно из св-в этого интерфейса необязательным\ninterface Props {\n  error: string;\n  message: string;\n}\n\nconst a: FilteredPartial<Props, 'error'> = { message: 'xxx' }; // error стал необязательным\nconst b: FilteredPartial<Props, 'error'> = { message: 'xxx', error: 'yyy' }; // error присутствует, но не обязателен\n//у нас есть некий массив и нам нужно найти в этом массиве подмассив сумма элементов которого даст максимальное число и вывести это число на экран\n// [-2,-1,1,2]//3\n// [2,-1,2,3,-9]//6\n// [-1,-2,-3] //0"
      }
    ]
  },
  {
    "company": "Spacebit",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-10 20:11:21",
        "content": "2024-07-10 20:11:21\n Руслан -> 2071074234:\nSpaceBit\n— Ссылка: hr сама написала\n— Зп: 250 \n— Вопросы:\n1. Какие хуки использовал\n2. useImperativeHandle использовал ли и для чего\n3. Чем отличается hoc от хука\n4. Как понимал, когда нужно использовать useCallBack\n5. Для чего раньше использовали IIFE\n— Задачи:\nСмрджить два массива, чтобы остались уникальные значения\n1/ // [1,3,4,6] + [1,3,7,9] = [1,3,4,6,7,9] - сделал через Set, потом спросили, как можно сделать по другому.\n2. По вебсокетам приходят к...",
        "full_content": "2024-07-10 20:11:21\n Руслан -> 2071074234:\nSpaceBit\n— Ссылка: hr сама написала\n— Зп: 250 \n— Вопросы:\n1. Какие хуки использовал\n2. useImperativeHandle использовал ли и для чего\n3. Чем отличается hoc от хука\n4. Как понимал, когда нужно использовать useCallBack\n5. Для чего раньше использовали IIFE\n— Задачи:\nСмрджить два массива, чтобы остались уникальные значения\n1/ // [1,3,4,6] + [1,3,7,9] = [1,3,4,6,7,9] - сделал через Set, потом спросили, как можно сделать по другому.\n2. По вебсокетам приходят кусочки одного большого Json, через некоторое количество полученных кусков нужно как-то понять, что из пришедших кусков можно собрать полностью весь json. Каждый json нужно как-то идентифицировать по уникальному значению, так как может прийти тот же json по сокетам через некоторое время, и в таком случае его данные не нужно отображать.\nОтвет\nСтек для парсинга json: Используйте стек для отслеживания\nоткрытых и закрытых скобок {} и [. При получении символа {\nили [ добавляйте его в стек, при получении } или ] —\nизвлекайте из стека. Это поможет определить, когда объект\nили массив полностью завершен.\nДля определения уникальности объекта в json можно\nиспользовать несколько методов, в зависимости от контекста\nи требований. Вот несколько подходов:\nХэш-функции позволяют создать уникальный идентификатор\nдля каждого объекта. Вы можете использовать хэш-функцию,\nтакую как МD5 или SНА-256, чтобы получить уникальный\nхэш-код для каждого json-объекта."
      }
    ]
  },
  {
    "company": "SoftJet",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-05-24 09:21:09",
        "content": "2024-05-24 09:21:09\n Виталий Цыганок -> 2071074234:\n— Название компании: SoftJet\n— Вакансия: https://izhevsk.hh.ru/vacancy/98816293\n— ЗП: от 230к, Middle+\n— Успех собеса: ❓ (после собеса нужно еще выполнить тестовое, я забил)\n\nВопросы:\n— Про свой опыт\n— Каково отношение TypeScript к JavaScript?\n— Что такое JSX?\n— Как можно компилировать TypeScript в JavaScript?\n— Сколько областей видимости доступно в TypeScript?\n— Как в JavaScript передается параметр в функцию - по ссылке или по значению?\n— Каки...",
        "full_content": "2024-05-24 09:21:09\n Виталий Цыганок -> 2071074234:\n— Название компании: SoftJet\n— Вакансия: https://izhevsk.hh.ru/vacancy/98816293\n— ЗП: от 230к, Middle+\n— Успех собеса: ❓ (после собеса нужно еще выполнить тестовое, я забил)\n\nВопросы:\n— Про свой опыт\n— Каково отношение TypeScript к JavaScript?\n— Что такое JSX?\n— Как можно компилировать TypeScript в JavaScript?\n— Сколько областей видимости доступно в TypeScript?\n— Как в JavaScript передается параметр в функцию - по ссылке или по значению?\n— Какие есть особенности проверки равенств в JavaScript?\n— В чем различие использования функций-конструкторов от классов? Где появляется разница в использовании?\n— Приведи примеры приведения к логическому типу значений, не относящихся к этому типу, то есть когда значения всегда true, а когда false\n— Знакомо ли понятие \"Временная мертвая зона\"?\n— Каким способом можно обеспечить глубокую заморозку объекта? Object.freeze()\n— В чем отличие между const и Object.freeze?\n— Расскажи про концепцию поднятия переменных\n— Для чего используется метод bind?\n— Какие есть отличия методов массивов forEach и map, какой предпочтительнее использовать?\n— Коллекции Map, Set \n— Что такое Hash Map и что такое хэш-функция?\n— Может ли быть ситуация, когда в хэш-мапе будет хранится и ключ, и значение null:null?\n— Какова сложность вычислений у хэш-мапы?\n— Какие основные паттерны проектирования знаешь, с какими работал?\n— Как работает event loop?\n— Писал ли тесты? Как? Использовал ли Selenium?\n— Какой опыт работы с Docker?\n— Умеешь ли настраивать Swagger? Работал ли с Postman?\n— На каком языке пишут тесты?\n— С какими работал фреймворками (React, Vue, Angular), в чем преимущество React?\n— Что нового есть в React 18, по сравнению с 17 и 16 версиями?\n— Для чего нужен AJAX?\n— Работал ли с GraphQL?\n— Что такое Virtual DOM?\n— setState синхронный или асинхронный?\n— В чем отличие memo от useMemo?\n— Что такое чистые компоненты (pure components) и для чего они нужны?\n— Какие знаешь стейт-менеджеры, с какими работал?\n— Каковы особенности использования useContext и useReduсer от Редакса?\n— Что такое HOC?\n— Как организуется сетевое взаимодействие? Связь фронта и бека?\n— Знаком ли с технологией WebView?\n— Какой опыт работы с Jira, Trello?\n— Настраивал ли CI/CD?\n— Чем merge отличается от rebase в GIT? Что лучше использовать и почему?\n\nЗадачи:\nВ конце собеса дал домашнее задание с дедлайном 1 день. Задание обязательно к выполнению.\nНеобходимо разработать одностраничный сайт. Предметная область (тема сайта) - интернет-магазин запчастей автомобилей.\n\nРабота должна быть загружена в виде ссылки на GitHub-Pages или Vercel.\n\nНеобходимо выводить на страницу информацию о товарах из API (можно создать в mockapi).\n\nТовары должны иметь поля: заголовок, картинка, описание, цена.\nПроект должен содержать: header, фото-слайдер, вывод товаров, footer. \n\nСайт должен содержать:  \n\n1) Header (содержит название магазина)\n2) Карусель с фотографиями (слайдер)\n3) Вывод товаров (название, фото, цена, описание)\n4) Footer"
      }
    ]
  },
  {
    "company": "Авиационные Интерьеры",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-05 20:11:04",
        "content": "2025-06-05 20:11:04\n Лёша -> 2071074234:\nКомпания: Авиационные интерьеры.\nЗп: 260? (не помню)\n\nВсе началось с 15 минутного монолога ПМа с рассказами про проект.\n\nВопросы:\n\nРасскажи про опыт, причины увольнения.\nКогда готов выйди на работу?👀\n\nВы кто по грейду?\nУдобно ли будет взять половину работы, как QA?\n\nРасскажи про самую интересную задачу.\nРасскажи про sse-eventы.\nРасскажи про next.js\nРасскажи про redux, mobx.\nЧто такое webpack.\nРасскажи про тесты.\nРасскажи про ci-cd.\nКак с linux?\nDRY KISS S...",
        "full_content": "2025-06-05 20:11:04\n Лёша -> 2071074234:\nКомпания: Авиационные интерьеры.\nЗп: 260? (не помню)\n\nВсе началось с 15 минутного монолога ПМа с рассказами про проект.\n\nВопросы:\n\nРасскажи про опыт, причины увольнения.\nКогда готов выйди на работу?👀\n\nВы кто по грейду?\nУдобно ли будет взять половину работы, как QA?\n\nРасскажи про самую интересную задачу.\nРасскажи про sse-eventы.\nРасскажи про next.js\nРасскажи про redux, mobx.\nЧто такое webpack.\nРасскажи про тесты.\nРасскажи про ci-cd.\nКак с linux?\nDRY KISS SOLID.\nЧистая архетиктура.\nПриходилось ли пилить ui-кит?\n\nКакие книжки по программированию читаешь?🤡 \n\nДальше мы душевно поговорили про сплит клавиатуры, конфиги для nvim, легаси, (книжки, которые мне посоветовали почитать)."
      }
    ]
  },
  {
    "company": "Медлайнсофт",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-30 19:11:01",
        "content": "2025-04-30 19:11:01\n Max -> 2071074234:\nМедлайнсофт\nЗП: 220\nHr написала \nВопросы:\n1. Расскажи про себя\n2. подробно спрашивал про резюме/проект\n3. отличие type от interface\n4. правила хуков\n5. Знаешь почему нельзя вызвать хуки в условиях? \n6. Promise.all и Promise.allSettled\nЗадачи:\nРеализовать хук useDebounce, потом типизировать\nimport { useState, useEffect } from 'react';\n\nfunction useDebounce<T>(value: T, delay: number): T {\n  const [debounced, setDebounced] = useState<T>(value);\n\n  useEffect(...",
        "full_content": "2025-04-30 19:11:01\n Max -> 2071074234:\nМедлайнсофт\nЗП: 220\nHr написала \nВопросы:\n1. Расскажи про себя\n2. подробно спрашивал про резюме/проект\n3. отличие type от interface\n4. правила хуков\n5. Знаешь почему нельзя вызвать хуки в условиях? \n6. Promise.all и Promise.allSettled\nЗадачи:\nРеализовать хук useDebounce, потом типизировать\nimport { useState, useEffect } from 'react';\n\nfunction useDebounce<T>(value: T, delay: number): T {\n  const [debounced, setDebounced] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebounced(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debounced;\n}\n\nexport default useDebounce;\n\nРеализовать функцию handlePromise\nasync function handlePromises(promises) {\n  // allSettled вернёт нужный массив объектов\n  const results = await Promise.allSettled(promises);\n  return results;\n}\n\n// Пример:\nhandlePromises(promises).then(console.log);\n/*\n[\n  { status: 'fulfilled', value: 1 },\n  { status: 'rejected',  reason: 'error' },\n  { status: 'fulfilled', value: 3 }\n]\n*/\nВ какой последовательности? \nasync function foo() {\n    console.log('1')\n    await bar()\n    console.log('2')\n}\nasync function bar() {\n    console.log('3')\n}\nfoo()\nconsole.log('4')\n// 1 3 4 2 \nРеализовать функцию, которая обрабатывает 2 промиса одновременно и возвращает результат\nasync function getData(promise1, promise2) {\n  // стартуем оба «горячих» промиса сразу же\n  const p1 = promise1();\n  const p2 = promise2();\n\n  // а теперь ждём их по отдельности\n  const result1 = await p1;\n  const result2 = await p2;\n\n  return [ result1, result2 ];\n}"
      }
    ]
  },
  {
    "company": "Главгоэкспертиза",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-07 15:44:18",
        "content": "2025-04-07 15:44:18\n Гладких Александр -> 2071074234:\nГлавгоэкспертиза\nзп - 250 \nвакансия https://hh.ru/vacancy/118337686?hhtmFrom=chat&customDomain=1\n\nвопросы \n- какие плюсы React-а \n- как можно нативно реализовать динамическую подгрузку данных в таблицах\n- что такое intersectionObserver\n- что такое debaunce\n- что такое хэш мап\n- чем fetch отличается от pull\n- что такое websocket чем отличается от http\n- что такое localStorage и что там можно хранить\n- зачем нужен Redux\n- что такое Docker зачем...",
        "full_content": "2025-04-07 15:44:18\n Гладких Александр -> 2071074234:\nГлавгоэкспертиза\nзп - 250 \nвакансия https://hh.ru/vacancy/118337686?hhtmFrom=chat&customDomain=1\n\nвопросы \n- какие плюсы React-а \n- как можно нативно реализовать динамическую подгрузку данных в таблицах\n- что такое intersectionObserver\n- что такое debaunce\n- что такое хэш мап\n- чем fetch отличается от pull\n- что такое websocket чем отличается от http\n- что такое localStorage и что там можно хранить\n- зачем нужен Redux\n- что такое Docker зачем нужен и работал ли\n- работал ли с Postgress какие команды знаешь\n- работал с командной строкой баш\n\nбыли в основном по резюме                                                                                                                                                                            \n- как проводил рефакторинг\n- как оптимизировал работу с большими списками и таблицами (за какими метриками следил)\n- как реализовывал дрэг энд дроп\n- как реализовывали модуль для работы Yandex Maps\n\nзадача \n- написан кастомный хук просто рассказать что он делает шаг за шагом\n ( хук занимается фильтрованием данных для таблицы ), много вложенных условий\nметодов массива циклов рекурсии и тд"
      }
    ]
  },
  {
    "company": "Отп Банк В Какую То Команду Из Daily Banking, Которая Занимается Микрофронтами",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-26 13:15:53",
        "content": "2025-06-26 13:15:53\n Egor -> 2071074234:\nОТП Банк в какую то команду из daily banking, которая занимается микрофронтами\nЗП: от 350 на руки\nВакансия: нет\n\nВопросы: \nСпросил про опыт, про интересные задачи\nТехнические вопросы:\nEvent loop\nзамыкание\nПочему используем react\nVirtual dom\nСпособы оптимизации реакт приложения\n\nУ тебя есть таблица, удаляешь один элемент и при удалении появляется таймер, как в тг, с кнопкой \"вернуть\". Как это реализовать, учитывая что пользователь может уйти куда то на дру...",
        "full_content": "2025-06-26 13:15:53\n Egor -> 2071074234:\nОТП Банк в какую то команду из daily banking, которая занимается микрофронтами\nЗП: от 350 на руки\nВакансия: нет\n\nВопросы: \nСпросил про опыт, про интересные задачи\nТехнические вопросы:\nEvent loop\nзамыкание\nПочему используем react\nVirtual dom\nСпособы оптимизации реакт приложения\n\nУ тебя есть таблица, удаляешь один элемент и при удалении появляется таймер, как в тг, с кнопкой \"вернуть\". Как это реализовать, учитывая что пользователь может уйти куда то на другую страницу и может обновить ее?\n\nУ тебя есть страница, на ней модули обернутые в react.lazy, нужно их отобразить по порядку, как это сделать?\n\nУ тебя есть html файл(хост приложение) и у тебя есть микрофронт, состоящий из конфигурируемых форм и стилей, нужно отобразить в этом html функционал и учесть, что у условного админа может быть несколько инстансов этого приложения с его настройками, пользователь же ничего настраивать не может. Как построить такое приложение, как реализовать эти конфигурации и как выстроить архитектуру самого микрофронта?"
      }
    ]
  },
  {
    "company": "Стеллар",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-17 11:27:20",
        "content": "2025-03-17 11:27:20\n Nodar -> 2071074234:\nКомпания: Стеллар\nВакансия: https://rostov.hh.ru/vacancy/117701034?hhtmFrom=employer_vacancies\nЗП: 250+\nСобеседование с фронтом одной из команд, проекта еще нет, набирают в новую команду.\nВопросы про опыт на последнем проекте, стэк проекта и команду\nТеория:\n1) Отличия примитивов от ссылочных данных\n2) Почему можно вызвать методы у примитива через точку. Как это работает в js\n3) Евентлуп, как работает(теория + задача)\nexport default function App() {\n  con...",
        "full_content": "2025-03-17 11:27:20\n Nodar -> 2071074234:\nКомпания: Стеллар\nВакансия: https://rostov.hh.ru/vacancy/117701034?hhtmFrom=employer_vacancies\nЗП: 250+\nСобеседование с фронтом одной из команд, проекта еще нет, набирают в новую команду.\nВопросы про опыт на последнем проекте, стэк проекта и команду\nТеория:\n1) Отличия примитивов от ссылочных данных\n2) Почему можно вызвать методы у примитива через точку. Как это работает в js\n3) Евентлуп, как работает(теория + задача)\nexport default function App() {\n  console.log(1);\n\n  setTimeout(() => {\n    console.log(5);\n  }, 0);\n\n  const promise = Promise.resolve(6).then(console.log);\n\n  useEffect(() => {\n    console.log(2);\n  }, []);\n\n  return <Child />;\n}\n\nfunction Child() {\n  console.log(3);\n\n  useEffect(() => {\n    console.log(4);\n  }, []);\n\n  return \"Logs3\";\n}\n4) useEffect, методы жизненного цикла реакт компонента\n5) классовые компоненты, чего нет в функциональных(вопрос про ErrorBoundary)\n6) useCallback, для чего нужен\n7) VirtualDom в реакте, его особенности.\n8) Анимации в js, как лучше выполнять анимации, через margin или transform"
      }
    ]
  },
  {
    "company": "Альфа Лизинг",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-08-25 12:26:50",
        "content": "2024-08-25 12:26:50\n Vildan Khabibov -> 2071074234:\nАльфа Лизинг \nссылка: https://hh.ru/vacancy/105725129\nзп: не обсуждали\nуспех: ?\n\nВопросы и задача:\n1. Event loop\nsetTimeout(() => console.log('1'), 0);\nconsole.log('2');\nPromise.resolve()\n.then(() => console.log('3'))\n.then(console.log('4'))\n.catch(() => console.log('5'));\nsetTimeout(() => console.log('6'), 0);\nconsole.log('7');\nОтвет: 2 4 7 3 1 6\n\n2. Область видимости \nvar i = 10;\nvar a = [];\nwhile (i--) {\na.push(\nfunction () { return i * i;\n}...",
        "full_content": "2024-08-25 12:26:50\n Vildan Khabibov -> 2071074234:\nАльфа Лизинг \nссылка: https://hh.ru/vacancy/105725129\nзп: не обсуждали\nуспех: ?\n\nВопросы и задача:\n1. Event loop\nsetTimeout(() => console.log('1'), 0);\nconsole.log('2');\nPromise.resolve()\n.then(() => console.log('3'))\n.then(console.log('4'))\n.catch(() => console.log('5'));\nsetTimeout(() => console.log('6'), 0);\nconsole.log('7');\nОтвет: 2 4 7 3 1 6\n\n2. Область видимости \nvar i = 10;\nvar a = [];\nwhile (i--) {\na.push(\nfunction () { return i * i;\n}\n);\n}\nconsole.log(a[0]());\nconsole.log(a[!]());\nОтвет:\nconsole.log(a[0]()); // -1\nconsole.log(a[1]()); // -1\n* Как отрефакторить?\nvar a = [];\nfor (let i = 10; i--;) {\n    a.push(() => i);\n}\n\nconsole.log(a[0]()); // 9\nconsole.log(a[1]()); // 8\nvar i = 10;\nvar a = [];\nwhile (i--) {\n    (function(value) {\n        a.push(function() {\n            return value;\n        });\n    })(i);\n}\n\nconsole.log(a[0]()); // 9\nconsole.log(a[1]()); // 8\n3. Преобразование типов \n// 1. \"\" + 1 + 0\nconsole.log(\"\" + 1 + 0); // '10'\n\n// 2. '\"' - 1 + 0\nconsole.log('\"' - 1 + 0); // -1\n\n// 3. true + false\nconsole.log(true + false); // 1\n\n// 4. 6 / \"3\"\nconsole.log(6 / \"3\"); // 2\n\n// 5. \"2\" * \"3\"\nconsole.log(\"2\" * \"3\"); // 6\n\n// 6. 4 + 5 + \"px\"\nconsole.log(4 + 5 + \"px\"); // '9px'\n\n// 7. \"$\" + 4 + 5\nconsole.log(\"$\" + 4 + 5); // '$45'\n\n// 8. \"4\" - 2\nconsole.log(\"4\" - 2); // 2\n\n// 9. \"4px\" - 2\nconsole.log(\"4px\" - 2); // NaN\n\n// 10. 7 / 0\nconsole.log(7 / 0); // Infinity\n\n// 11. \" -9\\n\" + 5\nconsole.log(\" -9\\n\" + 5); // \" -9\\n5\"\n\n// 12. \" -9\\n\" - 5\nconsole.log(\" -9\\n\" - 5); // -14\n\n// 13. 5 && 2\nconsole.log(5 && 2); // 2\n\n// 14. 2 && 5\nconsole.log(2 && 5); // 5\n\n// 15. 5 || 0\nconsole.log(5 || 0); // 5\n\n// 16. 0 || 5\nconsole.log(0 || 5); // 5\n\n// 17. null + 1\nconsole.log(null + 1); // 1\n\n// 18. undefined + 1\nconsole.log(undefined + 1); // NaN\n\n// 19. \"2\" > \"12\"\nconsole.log(\"2\" > \"12\"); // true\n4. Что происходит, когда пользователь ввел название сайта в адрессную строку браузера.\n5. Основные принципы ООП\n6. Основные принципы Redux\n7. Задачка на React\n - В компоненте есть примитивная кнопка, при нажатии увеличивает значение счетчика\n - Начальное значение счетчик получает через пропс\n - Значение счетчика может измениться через пропс\n - Значение счетчика выводится в div/span элемент (это не существенно)\n - Значение счетчика отправляется на фиктивный API один раз в момент размонтирования\n - Задание надо выполнить с наименьшим количеством  ререндеров\n \n const Comp = ({counter}) => {\n   const [count, setCount] = useState(counter);\n   const val = useRef(counter)  \n   \n   useEffect(() => {\n     setCount(counter)\n     val.current = counter\n   }, [counter])\n   \n    useEffect(() => {\n      return () => {\n        fetch('blabla', {\n          method: 'POST',\n          body: {\n            JSON.strignify({count: val.current})\n          }\n        })\n      }\n    }, [])\n    \n\n   const handleSetCount = () => {\n     setCount(prev => {\n          val.current = prev + 1\n       return prev + 1\n     })\n  \n   }\n   \n   \n   return (\n     <>\n       <span>{count}</span>\n       <button onClick={handleSetCount}>Increment</button>\n      </>\n   )\n }"
      }
    ]
  },
  {
    "company": "Псб Банк",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-09 15:15:20",
        "content": "2024-10-09 15:15:20\n Михаил -> 2071074234:\nПСБ Банк\nвакансия hh.ru/vacancy/106962131\nзп 200к\nочень душный 2-х часовой собес с кучей теории",
        "full_content": "2024-10-09 15:15:20\n Михаил -> 2071074234:\nПСБ Банк\nвакансия hh.ru/vacancy/106962131\nзп 200к\nочень душный 2-х часовой собес с кучей теории"
      }
    ]
  },
  {
    "company": "F6 - Команда Кибербезопасности",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-23 17:11:53",
        "content": "2025-06-23 17:11:53\n Василий -> 2071074234:\nF6 - команда кибербезопасности - техничка\n\n1) Расскажи про все способы хранения данных в браузере\n2) Особенности работы с index.db\n3) Web worker, подробно как отправляем туда данные и как получаем\n4) Service worker\n5) Особенности поведения eventloop, рассказать про requestAnimationFrame и requestIdeCallback\n6) Все способы обмена данными между микрофронтами\n7) Как встроить одну страницу в другую, iframe\n8) Как обмениваться данными между микрофронтами че...",
        "full_content": "2025-06-23 17:11:53\n Василий -> 2071074234:\nF6 - команда кибербезопасности - техничка\n\n1) Расскажи про все способы хранения данных в браузере\n2) Особенности работы с index.db\n3) Web worker, подробно как отправляем туда данные и как получаем\n4) Service worker\n5) Особенности поведения eventloop, рассказать про requestAnimationFrame и requestIdeCallback\n6) Все способы обмена данными между микрофронтами\n7) Как встроить одну страницу в другую, iframe\n8) Как обмениваться данными между микрофронтами через localstorage\n9) Как сделать подписку на обновление DOM дерева MutationObserver\n10)  Есть ли в node.js eventloop?\n11) Все методы запретить изменения объекта, freez seal defineProperties\n12) Чем отличается MOBX от Redux, Proxy обертка\n13) Подробно про MAP SET WEAKMAP WEAKSET особенности каждого\n14) Зачем нужен webpack\n15) Почему Vite быстрее webpack\n16) Как настроить webpack так чтобы он приблизился по скорости к vite\n17) написать eventemmiter\nclass Dispatcher {\n  constructor() {\n    this.events = {};\n  }\n\n  // Добавление обработчика события\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = [];\n    }\n    this.events[eventName].push(callback);\n  }\n\n  // Вызов всех обработчиков для события\n  trigger(eventName) {\n    const handlers = this.events[eventName];\n    if (handlers) {\n      handlers.forEach((handler) => handler());\n    }\n  }\n}\n\n// Пример использования\nconst dispatcher = new Dispatcher();\n\ndispatcher.on('event_one', function () {\n  console.log('message 1');\n});\n\ndispatcher.on('event_one', function () {\n  console.log('message 2');\n});\n\ndispatcher.on('event_two', function () {\n  console.log('message 3');\n});\n\ndispatcher.trigger('event_one');\n// message 1\n// message 2\n\ndispatcher.trigger('event_two');\n// message 3\n\n\nОсобенности: очень глубоко копают, как что работает, видимо ищут синьера"
      }
    ]
  },
  {
    "company": "Компания Sapiens Solution",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-27 17:27:36",
        "content": "2025-01-27 17:27:36\n Александр Богданов -> 2071074234:\n- Компания Sapiens solution(вилка 250-350)\n- Вопросы:\n- самые сложные задачи что запомнились, как код-ревью проходило,\nкакие библиот.CSS-in-JS использовали, почему Radix UI вместо Материал UI использовали на проекте\n- как взаимодеиствие с дизаинером было\n- Теория: типы данных,прототип,чем interface отл.от type, виртуалДОМ что такое + Fiber\nevent_loop,key в Реакте, useState как работает,почему вызов сетера стеита синхронен?Батчинг?\nCORS\n- зад...",
        "full_content": "2025-01-27 17:27:36\n Александр Богданов -> 2071074234:\n- Компания Sapiens solution(вилка 250-350)\n- Вопросы:\n- самые сложные задачи что запомнились, как код-ревью проходило,\nкакие библиот.CSS-in-JS использовали, почему Radix UI вместо Материал UI использовали на проекте\n- как взаимодеиствие с дизаинером было\n- Теория: типы данных,прототип,чем interface отл.от type, виртуалДОМ что такое + Fiber\nevent_loop,key в Реакте, useState как работает,почему вызов сетера стеита синхронен?Батчинг?\nCORS\n- задача на евент-луп:\nsetInterval(() => console.log('setInterval 1'), 1);\nsetTimeout(() => console.log('setTimeout 1'), 1);\nconsole.log('plain log 1');\nPromise.resolve().then(() => console.log('Promise 1'));\nconst promiseTest = new Promise(() => {\nconsole.log('Promise 2');\n});\nsetTimeout(() => console.log('setTimeout 2'), 0);\nconsole.log('plain log 2');\npromiseTest.then(() => console.log('Promise 3'));\n(Ответ: plain log 1 Promise 2 plain log 2 Promise 1 Promise 3 setTimeout 2 setTimeout 1 setInterval 1)\n\nЗадача 2:\n/**\n* Дана функция orderMapper, которая принимает на вход 2 массива: массив объектов типа User: {id: number, name: string, ... # т.д.} и\n* массив объектов типа Order: {userId: number, ...}. Идет по id в объекте User сопоставляет поле userId в объекте Order.\n* На выходе функция orderMapper возвращает массив объектов Order с полем user (расширяет объект Order).\n  */\n\nfunction orderMapper(users, orders) {\n   return orders.map(order => {\n\n   const user = users.find(user => user.id === order.userId);\n   return { ...order, user };\n   });\n}\n// Решение: new Map();\nfunction orderMapper(users, orders) {\nconst userMap = users.reduce((map, user) => {\nmap[user.id] = user;\nreturn map;\n}, {});\n\nreturn orders.map(order => {\nreturn {\n...order,\nuser: userMap[order.userId] || null\n};\n});\n}\nЗадача 3:\n// Что будет в этом коде\nconst Component = () => {\nconst [, setIsRender] = useState(false);\nreturn <>{setIsRender(true)}</>;\n};\n\n// Решение:\n// \"To many renders\" слишком много рендеров - бесконечный цикл\n\nЗадача 4:\nБудет ли лишнии ререндер кнопки при увеличении счетчика и как исправить ререндер если есть?\nimport { useState } from \"react\";\n\nconst Button = ({ onIncrement }) => {\nconsole.log(\"Render\");\nreturn <button onClick={onIncrement}>Increment</button>;\n}\n\nfunction App() {\nconst [count, setCount] = useState(0);\nconst handleIncrement = () => {\nsetCount((prev) => prev + 1);\n};\n\nreturn (\n<div className=\"App\">\n<h1>Count: {count}</h1>\n<Button onIncrement={handleIncrement} />\n</div>\n);\n}"
      }
    ]
  },
  {
    "company": "Zoftify",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-17 16:40:58",
        "content": "2024-06-17 16:40:58\n Valerii Neugomonov -> 2071074234:\nZoftify\n\nВакансия: https://nn.hh.ru/vacancy/101410200\nВилка: неизвестна\nЗП: просил 3к евро\nУспех: фидбек в конце недели\n\nВопросы:\nКак бы реализовал данную на картинке вёрстку? (Это FlatList, numColumns={1}, custom renderItem, в нём манипуляции с width в зависимости от возвращаемого с бека типа итема)\n\nКак работает redux?\n\nreselect lib - юзал ли и знаешь ли?\n\ninterface vs type\n\nкакую авторизацию иплементировал в аппы? через лог+пасс, телефон,...",
        "full_content": "2024-06-17 16:40:58\n Valerii Neugomonov -> 2071074234:\nZoftify\n\nВакансия: https://nn.hh.ru/vacancy/101410200\nВилка: неизвестна\nЗП: просил 3к евро\nУспех: фидбек в конце недели\n\nВопросы:\nКак бы реализовал данную на картинке вёрстку? (Это FlatList, numColumns={1}, custom renderItem, в нём манипуляции с width в зависимости от возвращаемого с бека типа итема)\n\nКак работает redux?\n\nreselect lib - юзал ли и знаешь ли?\n\ninterface vs type\n\nкакую авторизацию иплементировал в аппы? через лог+пасс, телефон, акки аппл андр?\n\nРаботал ли с анимациями?\n\nЧто используешь для апи запросов?\n\nПокажи как выглядит твой актуальный код (транслировал окно с текущим проектом, показал структуру проекта)"
      }
    ]
  },
  {
    "company": "Российский Университет Дружбы Народов",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-12 12:20:20",
        "content": "2024-11-12 12:20:20\n Стас Тихомиров -> 2071074234:\nКомпания: Российский университет дружбы народов (РУДН)\nВакансия: hr написал\nЗП: 190к\nВопросы: \n1. HTML5 что в нем добавилось и почему перешли на HTML5\n2. В чем разница между id и class в css\n3. Адаптивная верстка\n4. Мета теги для чего?\n5. Как  к документу подключить css\n6. Что такое функция?\n7. Чем отличается от обычного объекта функция?\n8. Что такое массивы? и зачем они нам?\n9. Методы массивов\n10. Рассказать подробно про каждую\n11. === и ==\n12....",
        "full_content": "2024-11-12 12:20:20\n Стас Тихомиров -> 2071074234:\nКомпания: Российский университет дружбы народов (РУДН)\nВакансия: hr написал\nЗП: 190к\nВопросы: \n1. HTML5 что в нем добавилось и почему перешли на HTML5\n2. В чем разница между id и class в css\n3. Адаптивная верстка\n4. Мета теги для чего?\n5. Как  к документу подключить css\n6. Что такое функция?\n7. Чем отличается от обычного объекта функция?\n8. Что такое массивы? и зачем они нам?\n9. Методы массивов\n10. Рассказать подробно про каждую\n11. === и ==\n12. Приведение типов ('5'*'2', '5'+'2', 5 +'2')\n13. VDOM\n14. Хуки\n15. useEffect подробно\n16. Зачем нужен TS\n17. Чем interface отличается от type\n18. Redux зачем нужен и что делает, какие еще есть стейт менеджеры\n19. Нам надо получить данные из бека и отобразить. Как бы ты делал, подробно.\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch(url);\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const result = await response.json();\n                setData(result);\n            } catch (error) {\n                setError(error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [url]);\n\n    return { data, loading, error };\n};\n\nexport default useFetch;\nimport React from 'react';\nimport useFetch from './useFetch'; // Путь к вашему хуку\n\nconst DataList = () => {\n    const { data, loading, error } = useFetch('https://jsonplaceholder.typicode.com/posts');\n\n    if (loading) {\n        return <p>Loading...</p>;\n    }\n\n    if (error) {\n        return <p>Error: {error.message}</p>;\n    }\n\n    return (\n        <ul>\n            {data.map(item => (\n                <li key={item.id}>\n                    <h3>{item.title}</h3>\n                    <p>{item.body}</p>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default DataList;"
      }
    ]
  },
  {
    "company": "Luxsoft",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-08-08 16:51:04",
        "content": "2024-08-08 16:51:04\n Artem D -> 2071074234:\n- Luxsoft\n- вакансия: https://career.luxoft.com/jobs/senior-react-developer-6862\n- зп: не обсуждали\n- вопросы:\n1. карирование\n2. CORS\n3. SOLID\n4. Promise\n5. Flex box vs GRID\n6. Unit testing\n7. Suspense\n8. Middleware in Redux\n- задачи:\n// write a function which will return most repeated item in an\n// array with its count\nconst nestedArray = [2, 'A', 2, ['A', 4, ['A', 6, ['A', 8]]]]; // output: {A: 4}\n\nconst getMostRepeatedItem = (arr) => {\n  return arr\n...",
        "full_content": "2024-08-08 16:51:04\n Artem D -> 2071074234:\n- Luxsoft\n- вакансия: https://career.luxoft.com/jobs/senior-react-developer-6862\n- зп: не обсуждали\n- вопросы:\n1. карирование\n2. CORS\n3. SOLID\n4. Promise\n5. Flex box vs GRID\n6. Unit testing\n7. Suspense\n8. Middleware in Redux\n- задачи:\n// write a function which will return most repeated item in an\n// array with its count\nconst nestedArray = [2, 'A', 2, ['A', 4, ['A', 6, ['A', 8]]]]; // output: {A: 4}\n\nconst getMostRepeatedItem = (arr) => {\n  return arr\n}\n\nconsole.log(getMostRepeatedItem(nestedArray))\n\nimport React, { useState } from 'react';\nimport { createRoot } from 'react-dom/client';\n\n// Given:\n// 1. A list of colors composed of \"red\" and \"green\" elements.\n// 2. A \"Square\" component that renders a square of a given color \n//    and executes a click method.\n\n// Implement a parent component named \"App\" that:\n// 1. Uses the given Square component to render all squares from the \"colors\" list\n// 2. Exposes the following functionality:\n//   - click green => change current element to \"red\" + add 1 new \"green\" element\n//     at the end of the list\n//   - click red   => delete current element\n\nconst Square = ({ index, color, handleClick }) => {\n  return (\n    <div\n      style={{ backgroundColor: color, width: \"20px\", height: \"20px\", margin: \"10px\" }}\n      onClick={() => { handleClick(index) }}\n    ></div>\n  );\n}\n\nconst colors = [\"red\", \"green\", \"red\"];\n\nfunction App() {\n  // Candidate must fill in implementation here\n\n  return <div>React coding task</div>;\n}\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(<App />);\n\n\n- Успех: ❌\n- Фидбек: не хватило уровня английского"
      }
    ]
  },
  {
    "company": "Brainshell",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-04 20:49:53",
        "content": "2024-07-04 20:49:53\n Tonidevs -> 2071074234:\nBRAINSHELL крипто-гембла\n— сами написали\n— зп: можно просить сколько хочешь \n— комментарии: не советую, одни беки прогнали по теории, ни дизов ни аналитиков, ни девопс, ни ПМа - нет. Работать придется в соло\n\nВОПРОСЫ\n- использовали ли WebSocket, где и какие нюансы при работе\n- расскажи про react-query, tanstack-query\n- чем пользовался для взаимодействия с api\n- event-loop для чего нужен, как работает\n- что такое замыкание\n- this как работает и какие о...",
        "full_content": "2024-07-04 20:49:53\n Tonidevs -> 2071074234:\nBRAINSHELL крипто-гембла\n— сами написали\n— зп: можно просить сколько хочешь \n— комментарии: не советую, одни беки прогнали по теории, ни дизов ни аналитиков, ни девопс, ни ПМа - нет. Работать придется в соло\n\nВОПРОСЫ\n- использовали ли WebSocket, где и какие нюансы при работе\n- расскажи про react-query, tanstack-query\n- чем пользовался для взаимодействия с api\n- event-loop для чего нужен, как работает\n- что такое замыкание\n- this как работает и какие особенности при работе с ним\n- promise что такое и как работает\n- async await что такое и как работает\n- есть три асинхронных запроса как их объединить и дождаться результата\n- расскажи про Set и Map, WeakSet и WeakMap назови отличия\n- что такое слабая ссылка weak links \n- для чего можно использовать WeakSet и WeakMap\n- что такое контекст в реакте\n- что такое VDOM для чего используется какие преимущества\n- для чего нужен атрибут KEY\n- назови хуки реакта какие основные знаешь и как они работают\n- протокол HTTP что такое и как работает \n- какие есть методы в HTTP и как работают\n- структура HTTP запроса\n- как устанавливается соединение между клиентом и сервером\n- HTTPS что такое и отличие от HTTP\n- как осуществляется шифрование в TLC\n- что такое CORS и как работает, как браузер себя ведет\n- что такое Preflight Requests\n- какие есть основные заголовки CORS\n- расскажи про ООП и как использовал\n- расскажи про SOLID и как использовал\n- расскажи про дженерики\n- какой есть недостаток при типизации в ТС\n- отличие type от interface"
      }
    ]
  },
  {
    "company": "Тетрика Онлайн Школа",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-01 10:52:21",
        "content": "2024-06-01 10:52:21\n Andrei Chirkov -> 2071074234:\nКомпания: Тетрика онлайн школа\nВакансия: https://spb.hh.ru/vacancy/96835804\nЗП: от 250\nУспех собеса: ?\n\nВопросы:\n// Вопрос 1: на проде у одного юзера белый экран? перечисли все способы поиска ошибки. Правильного ответа нет, просто перечислять варианты, но сильно ждали посмотреть в профайлере что с каждым файлом происходит\n// Вопрос 2: куда вынести большие расчеты? в таймаут и воркеры, или делать их на сервере вообще\n// Вопрос 3: паттерны проекти...",
        "full_content": "2024-06-01 10:52:21\n Andrei Chirkov -> 2071074234:\nКомпания: Тетрика онлайн школа\nВакансия: https://spb.hh.ru/vacancy/96835804\nЗП: от 250\nУспех собеса: ?\n\nВопросы:\n// Вопрос 1: на проде у одного юзера белый экран? перечисли все способы поиска ошибки. Правильного ответа нет, просто перечислять варианты, но сильно ждали посмотреть в профайлере что с каждым файлом происходит\n// Вопрос 2: куда вынести большие расчеты? в таймаут и воркеры, или делать их на сервере вообще\n// Вопрос 3: паттерны проектирования: адаптер, фабрика, мост, наблюдатель, синглтон и тд\n\nЗадачи: https://trycode.pw/c/T9BA9\n\nСобеседующие норм, помогают и диалог хороший"
      }
    ]
  },
  {
    "company": "Westlink",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-19 17:19:56",
        "content": "2024-06-19 17:19:56\n Tonidevs -> 2071074234:\nWestLink \n— hr написала\n— ЗП: до 200 вроде\n— успех: нет\n\nВОПРОСЫ\n- почему ищете новую работу\n- как была реализована работа с апи (как вы понимали когда начинать интеграцию с бэком)\n- как выстроен процесс разработки\n- на что обращаете внимание при рефакторинге\n- как определяли что тормозит приложение(какие инструменты использовали)\n\nЗАДАЧИ\n- на флексах или гридах сделай пример, разметку нельзя трогать\n<div class=\"container\">\n        <div class=\"red\" st...",
        "full_content": "2024-06-19 17:19:56\n Tonidevs -> 2071074234:\nWestLink \n— hr написала\n— ЗП: до 200 вроде\n— успех: нет\n\nВОПРОСЫ\n- почему ищете новую работу\n- как была реализована работа с апи (как вы понимали когда начинать интеграцию с бэком)\n- как выстроен процесс разработки\n- на что обращаете внимание при рефакторинге\n- как определяли что тормозит приложение(какие инструменты использовали)\n\nЗАДАЧИ\n- на флексах или гридах сделай пример, разметку нельзя трогать\n<div class=\"container\">\n        <div class=\"red\" style=\"background-color: red;\"></div>\n        <div class=\"blue\" style=\"background-color: blue;\"></div>\n        <div class=\"green\" style=\"background-color: green;\"></div>\n</div>\n.container {\n  width: 300px;\n  height: 200px;\n  border: black 1px solid;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.red,\n.blue {\n  width: 50%;\n  height: 50%;\n}\n\n.green {\n  flex-grow: 1;\n  height: 100%;\n}\n- написать код. При клике на блок, должен показываться цвет блока.\nconst colorBlock = document.querySelector('.container');\n\n// Проверяем, что элемент найден\nif (colorBlock) {\n  // Добавляем обработчик события 'click' на элемент\n  colorBlock.addEventListener('click', (e) => {\n    // Выводим имя класса элемента, на который кликнули\n    console.log(e.target.className);\n  });\n}\n- объясни EventLoop\nconsole.log('start');\n\nconst promise1 = Promise.resolve().then(() => {\n  console.log('promise1');\n  const timer2 = setTimeout(() => {\n    console.log('timer2');\n  }, 0);\n});\n\nconst timer1 = setTimeout(() => {\n  console.log('timer1');\n  const promise2 = Promise.resolve().then(() => {\n    console.log('promise2');\n  });\n}, 0);\n\nconsole.log('end');\n- что будет в консоли\nvar name = \"Kolya\";\nfunction byeOrHello() {\n  if (typeof name === \"undefined\") {\n    var name = \"Vasya\";\n    console.log(`Bye ${name}`);\n  } else {\n    console.log(`Hello ${name}`);\n  }\n}\nbyeOrHello();\n- что будет в консоли\nconst fullname = \"Name1\";\nconst obj = {\n  fullname: \"Name2\",\n  prop: {\n    fullname: \"Name3\",\n    getFullname: function () {\n      return this.fullname;\n    }\n  }\n};\n\nconsole.log(obj.prop.getFullname());\nconst test = obj.prop.getFullname;\nconsole.log(test());\n- написать реакт компонент который при нажатии на кнопку будет выводить элемент с ИД и при нажатии на элемент Ид будет его удалять\nimport ReactDOM from \"react-dom/client\";\nimport React, { useState } from \"react\";\nfunction App() {\n  const [btn, setAddBtn] = useState([]);\n  const addButton = () => {\n    setAddBtn([...btn, btn.length]);\n  };\n  const removeButton = (index) => {\n    setAddBtn(btn.filter((_, i) => i !== index));\n  };\n  return (\n    <section>\n      <h2>Задание №5</h2>\n      <div className=\"wrapper\">\n        <button onClick={addButton}>Add</button>\n        <div className=\"box-wrapper\">\n          {btn.map((number, index) => (\n            <button key={index} onClick={() => removeButton(index)}>\n              {number}\n            </button>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(<App />);"
      }
    ]
  },
  {
    "company": "Юспи Групп",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-12 10:54:53",
        "content": "2024-11-12 10:54:53\n Артем -> 2071074234:\nКомпания: ЮСПИ Групп\nВакансия:  https://hh.ru/vacancy/109307308\nЗП: 180\nВопросы:\nрасскажи про себя\nСемантическая верстка\nтеги для семантической верстки\nCCSOM\nДоступность страницы\nвсплытия событий\nasync await\nчто такое промис\nметоды\nJS Worcer\nwebsocket\nтернарный оператор\ncoocki local storage session storage\nforEach vs map\npositions\nкак модалку на центр поместить\ncss reset\nnormalize\n@madia\ngrid\nreact смысл\nuseEffect vs useLayouteffect\nuseState\nuseRef\nuse m...",
        "full_content": "2024-11-12 10:54:53\n Артем -> 2071074234:\nКомпания: ЮСПИ Групп\nВакансия:  https://hh.ru/vacancy/109307308\nЗП: 180\nВопросы:\nрасскажи про себя\nСемантическая верстка\nтеги для семантической верстки\nCCSOM\nДоступность страницы\nвсплытия событий\nasync await\nчто такое промис\nметоды\nJS Worcer\nwebsocket\nтернарный оператор\ncoocki local storage session storage\nforEach vs map\npositions\nкак модалку на центр поместить\ncss reset\nnormalize\n@madia\ngrid\nreact смысл\nuseEffect vs useLayouteffect\nuseState\nuseRef\nuse memo useCallbakc\nпорталы в React\nВиртуальные списки\nTs\ninterface vs type\nс чем работал какой стетй использовал"
      }
    ]
  },
  {
    "company": "Ceramic3D",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-04 18:28:23",
        "content": "2025-04-04 18:28:23\n Umar -> 2071074234:\nКомпания: Ceramic3d\nВакансия: https://groznyj.hh.ru/vacancy/117077743?hhtmFrom=favorite_vacancy_list\nЗП: 200-270к\n\n1й этап, 30 минут, 2 вопроса + задача\n\n1. Объяснить как решать задачу, описать алгоритм\n\nДан массив строк. Строки в массиве могут повторяться\nНужно получить все строки, у которых больше пяти повторений\n\nОтвет: создаю хэшмапу, прохожусь по массиву добавляя +1 к количеству текущей строки в хэшмапе, возвращаю те строки, которые повторялись больш...",
        "full_content": "2025-04-04 18:28:23\n Umar -> 2071074234:\nКомпания: Ceramic3d\nВакансия: https://groznyj.hh.ru/vacancy/117077743?hhtmFrom=favorite_vacancy_list\nЗП: 200-270к\n\n1й этап, 30 минут, 2 вопроса + задача\n\n1. Объяснить как решать задачу, описать алгоритм\n\nДан массив строк. Строки в массиве могут повторяться\nНужно получить все строки, у которых больше пяти повторений\n\nОтвет: создаю хэшмапу, прохожусь по массиву добавляя +1 к количеству текущей строки в хэшмапе, возвращаю те строки, которые повторялись больше 5 раз\n\n2. Это рабочий код, удовлетворяет ТЗ, бизнес доволен, багов нет.\nЧто будет в result?\n\nconst result = array.reduce((a, c) => ({...a, [c.id]: c}), {});\n\nОтвет: Преобразует массив объектов array в объект result, где:\nключ — c.id, значение — сам объект c\n\n3. Написать рабочий код на TypeScript.\nДан массив строк. Строки могут повторятся\nНужно получить все строки, у которых больше 5 повторений\n\nРешение от чатгпт:\nconst result = Object.entries(\n  strings.reduce<Record<string, number>>((acc, str) => {\n    acc[str] = (acc[str] || 0) + 1;\n    return acc;\n  }, {})\n)\n  .filter(([_, count]) => count > 5)\n  .map(([str]) => str);"
      }
    ]
  },
  {
    "company": "Зарубежная Компания Metricalo",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-26 15:15:15",
        "content": "2025-06-26 15:15:15\n Sergio -> 2071074234:\nЗарубежная компания Metricalo\nЗП 3-5к зелени\nС релокацией\n\nОбщались с HR, общение на английском, она не поняла как у нас работает система платежей, всю вину переложила на меня, поэтому на техничку дальше не пошли. Спрашивала про мой опыт и is it relative to our product. Про меня и мой опыт до конца правда слушать не стала, я спросил могу-ли я продолжать, сказала не надо\n\nВидимо нужен англосакс с native-english",
        "full_content": "2025-06-26 15:15:15\n Sergio -> 2071074234:\nЗарубежная компания Metricalo\nЗП 3-5к зелени\nС релокацией\n\nОбщались с HR, общение на английском, она не поняла как у нас работает система платежей, всю вину переложила на меня, поэтому на техничку дальше не пошли. Спрашивала про мой опыт и is it relative to our product. Про меня и мой опыт до конца правда слушать не стала, я спросил могу-ли я продолжать, сказала не надо\n\nВидимо нужен англосакс с native-english"
      }
    ]
  },
  {
    "company": "Гринатом",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-18 16:21:42",
        "content": "2025-04-18 16:21:42\n Max -> 2071074234:\nКомпания: Гринатом\nЗп: - \nЗадача 1:\nРеализовать в codesandbox небольшое приложение по добавлению и фильтрации пользователей\nРешение: \nimport React, { useState } from 'react';\n\ntype User = {\n    id: number;\n    name: string;\n    email: string;\n    isActive: boolean;\n};\n\nexport default function App() {\n    const [users, setUsers] = useState<User[]>({\n    { id: 1, name: 'Alice', email: 'alice@com.com', isActive: true },\n    { id: 2, name: 'Bob', email: 'bob@c...",
        "full_content": "2025-04-18 16:21:42\n Max -> 2071074234:\nКомпания: Гринатом\nЗп: - \nЗадача 1:\nРеализовать в codesandbox небольшое приложение по добавлению и фильтрации пользователей\nРешение: \nimport React, { useState } from 'react';\n\ntype User = {\n    id: number;\n    name: string;\n    email: string;\n    isActive: boolean;\n};\n\nexport default function App() {\n    const [users, setUsers] = useState<User[]>({\n    { id: 1, name: 'Alice', email: 'alice@com.com', isActive: true },\n    { id: 2, name: 'Bob', email: 'bob@com.com', isActive: false }\n    });\n    const [input, setInput] = useState(\"/);\n    const [emailFilter, setEmailFilter] = useState(\"/);\n\n    const handleAdd = () => {\n    if (!input.trim()) return;\n\n    const emailExists = users.some(user => user.email.toLowerCase)\n    === email);\n    if (emailExists) return;\n\n    const newUser: User = {\n    id: users.length + 1,\n    name: input,\n    email: ${input.toLowerCase()}@com.com,\n    isActive: true\n    };\n    setUsers[...users, newUser]);\n    setInput(\"/);\n};\n\nconst filteredUsers = users.filter(user =>\n    user.email.toLowerCase().includes(emailFilter.toLowerCase())\n    );\n}\nreturn (\n    <div>\n    <h1>Пользователи</h1>\n    <input\n    placeholder=\"Добавить имя\"\n    value={input}\n    onChange={(e) => setInput(e.target.value)}\n    />\n    <button onClick={handleAdd}>Добавить</button>\n\n    <div style={{ marginTop: '1rem' }}>\n    <input\n    placeholder=\"Фильтр по email\"\n    value={emailFilter}\n    onChange={(e) => setEmailFilter(e.target.value)}\n    />\n    </div>\n\n    <ul>\n    {filteredUsers.map(user => {\n    <li key={user.id}>\n    {user.name} -- {user.email} {{user.isActive ? aктивен': 'неактивен'}}\n    </li>\n    });\n    </ul>\n    </div>\n};\n}\nЗадача 2: \nНаписать функцию для пузырковой сортировки\nРешение:\nfunction countingSortDescending(arr) {\n    if (arr.length == 0) return [];\n\n// Находим минимум и максимум\n    let min = arr[0], max = arr[0];\n    for (let num of arr) {\n    if (num < min) min = num;\n    if (num > max) max = num;\n    }\n\n    const count = new Array(max - min + 1).fill(0);\n\n    // Подсчитываем количество каждого числа\n    for (let num of arr) {\n    count[num - min]++;\n    }\n}\n\n// Строим отсортированный массив по убыванию\nconst result = [];\nfor (let i = count.length - 1; i >= 0; i--) {\n    while (count[i] > 0) {\n    result.push(i + min);\n    count[i]--;\n    }\n}\nreturn result;\n}\n\n// Пример:\nconst numbers = [4, 2, 2, 8, 3, 3, 1];\nconsole.log(countingSortDescending(numbers)); // [8, 4, 3, 3, 2, 2, 1]"
      }
    ]
  },
  {
    "company": "БФТ-Холдинг",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-18 08:44:36",
        "content": "2024-07-18 08:44:36\n Alehandro¯\\_(ツ)_/¯ -> 2071074234:\n- компания: БФТ-Холдинг\n- вакансия: hr сам написал\n- зп: 200-220к\n- отзыв: много вопросов на понимание, что будет если так и так, клонили в сторону бэка, первый раз как раз был работал ли с бэком и хотел бы стать фуллстэком",
        "full_content": "2024-07-18 08:44:36\n Alehandro¯\\_(ツ)_/¯ -> 2071074234:\n- компания: БФТ-Холдинг\n- вакансия: hr сам написал\n- зп: 200-220к\n- отзыв: много вопросов на понимание, что будет если так и так, клонили в сторону бэка, первый раз как раз был работал ли с бэком и хотел бы стать фуллстэком"
      }
    ]
  },
  {
    "company": "Intermobility",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-11 12:56:09",
        "content": "2024-11-11 12:56:09\n Егор -> 2071074234:\nКомпания: intermobility\nВакансия: https://hh.ru/vacancy/107251514\nЗП: 200к\nВопросы:\n- Расскажи о себе\nМного спрашивал про прошлое место, что и как было устроено.\n\nтех вопросы :\n - зачем нужен key, и VDOM\n\nДал одну задачу на React:\n import React, { useState } from \"react\";\n/**\n * TODO\n * 1. Добавление любого количества инпутов по кнопке\n * 2. Во время ввода во всех инпутах производить валидацию.\n * Если input value везде \"react\", то кнопка \"Сохранить\"\n * д...",
        "full_content": "2024-11-11 12:56:09\n Егор -> 2071074234:\nКомпания: intermobility\nВакансия: https://hh.ru/vacancy/107251514\nЗП: 200к\nВопросы:\n- Расскажи о себе\nМного спрашивал про прошлое место, что и как было устроено.\n\nтех вопросы :\n - зачем нужен key, и VDOM\n\nДал одну задачу на React:\n import React, { useState } from \"react\";\n/**\n * TODO\n * 1. Добавление любого количества инпутов по кнопке\n * 2. Во время ввода во всех инпутах производить валидацию.\n * Если input value везде \"react\", то кнопка \"Сохранить\"\n * должна стать disabled={false}\n *\n */\n \nconst validate = (item: string) => item === \"react\";\nconst Form = () => {\n\n  const [inputs, setInputs] = useState([\n    { value: \"vue\" },\n    { value: \"angular\" },\n  ]);\n\n  const handleAddInput = () => {\n    setInputs([...inputs, { value: \"\" }]);\n  };\n\n  const handleChangeInput = (index: number, value: string) => {\n    const newInputs = [...inputs];\n    newInputs[index].value = value;\n    setInputs(newInputs);\n  };\n\n  const allValidData = !inputs.every((input) => validate(input.value));\n\n  return (\n    <form>\n      {inputs.map((input, index) => (\n        <input\n          key={index}\n          value={input.value}\n          className=\"input\"\n          onChange={(e) => handleChangeInput(index, e.target.value)}\n        />\n      ))}\n      <div className=\"controls\">\n        <button className=\"button\" type=\"button\" onClick={handleAddInput}>\n          Добавить инпут\n        </button>\n        <button className=\"button\" type=\"button\" disabled={allValidData}>\n          Сохранить\n        </button>\n      </div>\n    </form>\n  );\n};\n\n  \n\nexport { Form };"
      }
    ]
  },
  {
    "company": "Ланит Би Пи Эм",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-14 15:09:27",
        "content": "2025-04-14 15:09:27\n Ильдус Гизетдинов -> 2071074234:\nЛанит Би Пи Эм\nЗп не обсуждалось\nВопросы\nКратко про опыт\n1)Типы данных\n2)Чем примитивы отличаются от ссылочных \n3)Копирование объектов\n4)Мутабильность Иммутабельность\n5)Проверка на массив\n6)Способы объявления функции и разница между ними\n7)call apply bind\n8)Чистая функция\n9)Что такое сайд эффекты\n10)Функции высшего порядка\n11)Привидение типов\n12)Всплытие\n13)Делегирование событий\n14)Замыкание\n15)Ассинхронность\n16)Промисы\n17)Цепочка then\n18)eve...",
        "full_content": "2025-04-14 15:09:27\n Ильдус Гизетдинов -> 2071074234:\nЛанит Би Пи Эм\nЗп не обсуждалось\nВопросы\nКратко про опыт\n1)Типы данных\n2)Чем примитивы отличаются от ссылочных \n3)Копирование объектов\n4)Мутабильность Иммутабельность\n5)Проверка на массив\n6)Способы объявления функции и разница между ними\n7)call apply bind\n8)Чистая функция\n9)Что такое сайд эффекты\n10)Функции высшего порядка\n11)Привидение типов\n12)Всплытие\n13)Делегирование событий\n14)Замыкание\n15)Ассинхронность\n16)Промисы\n17)Цепочка then\n18)event loop\n19)Для чего React\n20)Какие хуки использовал\n21)Правила хуков\n22)Жизненный цикл\n23)UseState и состояние\n24)Ререндр\n25)key\n26)useEffect\n27)Мемоизация\n28)useRef\n29)Утилитарные типы\n30)Литеральные типы\n31)Юнион типы\n32)type и interface\n33)Дженерики\n34)type guard\n35)any unknown\n36) as\n37)Стейт менеджеры чем помогают\n38)Кэш менеджеры\n39)Стейт от Кэш менеджера"
      }
    ]
  },
  {
    "company": "Сапкод",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-12-02 12:31:46",
        "content": "2024-12-02 12:31:46\n Артем -> 2071074234:\nКомпания СапКод\nзп 300\nвопросы\nматериал ui как тему поменять\nработал ли с графиками",
        "full_content": "2024-12-02 12:31:46\n Артем -> 2071074234:\nКомпания СапКод\nзп 300\nвопросы\nматериал ui как тему поменять\nработал ли с графиками"
      }
    ]
  },
  {
    "company": "LiveDigital EdTech",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-19 07:36:13",
        "content": "2025-06-19 07:36:13\n Daniil Max -> 2071074234:\n— Название компании: LiveDigital EdTech\n— ЗП: 250~300К\n— Задачи + Live-Coding: https://youtu.be/gM-NX_mq0Wg?si=TksK3XWHCotkvwlo\n— Успех: да",
        "full_content": "2025-06-19 07:36:13\n Daniil Max -> 2071074234:\n— Название компании: LiveDigital EdTech\n— ЗП: 250~300К\n— Задачи + Live-Coding: https://youtu.be/gM-NX_mq0Wg?si=TksK3XWHCotkvwlo\n— Успех: да"
      }
    ]
  },
  {
    "company": "Цезио",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-05-23 05:19:41",
        "content": "2024-05-23 05:19:41\n stil -> 2071074234:\nНазвание компании: Цезио\nВакансия: https://hh.ru/vacancy/97603710?hhtmFrom=chat\nУспех: запросили тестовое \nЗадачи:\n1. Вопросы:\n- что такое иммутабельность в компонентах\n- как работает virtual dom и алгоритм реакта\n- несколько дефолтных вопросов (эвентлуп и прочее)\n2. Задача:\nЕсть реализация компонента, от которого требуется 2 вещи:\n1) выводить текущее значение вертикального скролла окна (window.scrollY)\n2) после монтирования асинхронно получить число и вы...",
        "full_content": "2024-05-23 05:19:41\n stil -> 2071074234:\nНазвание компании: Цезио\nВакансия: https://hh.ru/vacancy/97603710?hhtmFrom=chat\nУспех: запросили тестовое \nЗадачи:\n1. Вопросы:\n- что такое иммутабельность в компонентах\n- как работает virtual dom и алгоритм реакта\n- несколько дефолтных вопросов (эвентлуп и прочее)\n2. Задача:\nЕсть реализация компонента, от которого требуется 2 вещи:\n1) выводить текущее значение вертикального скролла окна (window.scrollY)\n2) после монтирования асинхронно получить число и вывести его\nНужно найти, объяснить и исправить как можно больше проблем в реализации\nimport React, { useState, useEffect } from 'react'\n\nexport default function App() {\n  return (\n    <div style={{height: 1200}}>\n      <SomeComponent />\n    </div>\n  )\n}\n\n// имитация запроса к серверу. просто получаем число асинхронно\nconst fetchRandomNumber = () => Promise.resolve(Math.random())\n\nconst SomeComponent = () => {\n  const [number, setNumber] = useState()\n  const [scroll, setScroll] = useState()\n\n  useEffect(async () => {\n    setNumber(await fetchRandomNumber())\n\n    window.addEventListener('scroll', () => setScroll(window.scrollY))\n\n    return () => {\n      window.removeEventListener('scroll', () => setScroll(window.scrollY))\n    }\n  })\n\n  return(\n    <div>\n      <div>Number: {number}</div>\n      <div>Scroll: {scroll}</div>\n    </div>\n  )\n}"
      }
    ]
  },
  {
    "company": "Premium IT Solution",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-11 16:21:29",
        "content": "2024-07-11 16:21:29\n Вандал Нестреляй -> 2071074234:\nPremium IT Solution\n— Ссылка: HR сама написала\n— ЗП: от 200\n— Вопросы:\nКакими стейт-менеджерами пользовался?\nОтличия Mobx от Redux?\nВ чём популярность react? Какую проблему он решает?\nИз чего состоит react? Компоненты, пропсы и т.д\nКаким образом можно использовать контекст в функциональных компонентах?\nКакие хуки использовал?\nОтличия useMemo от useCollback?\nЧем события в React отличаются от событий в JS?\nЧто такое порталы в React?\nРаботал ли с...",
        "full_content": "2024-07-11 16:21:29\n Вандал Нестреляй -> 2071074234:\nPremium IT Solution\n— Ссылка: HR сама написала\n— ЗП: от 200\n— Вопросы:\nКакими стейт-менеджерами пользовался?\nОтличия Mobx от Redux?\nВ чём популярность react? Какую проблему он решает?\nИз чего состоит react? Компоненты, пропсы и т.д\nКаким образом можно использовать контекст в функциональных компонентах?\nКакие хуки использовал?\nОтличия useMemo от useCollback?\nЧем события в React отличаются от событий в JS?\nЧто такое порталы в React?\nРаботал ли с SSR?\n\nЗадачи:\n\n // Написать аналог метода .flat()\nfunction flattenArray(arr) {\nreturn arr.reduce((flat, curr) => {\n return flat.concat(Array.isArray(curr) ? flattenArray(curr) : curr)\n }, [])\n }\n // Написать аналог .promiseAll()\n\nfunction newPromiseAll(promises) {\n  \n    if (promises.length === 0){\n    return Promise.resolve([])\n  }\n  \n  return new Promise((resolve, reject) => {\n    let result = [];\n    let allResolved = 0;\n    promises.forEach((curr, i) => {\n      Promise.resolve(curr).then((data) => {\n        result[i] = data;\n        allResolved += 1;\n        if (allResolved === promises.length){\n          resolve(result)\n        }\n      }).catch((error) => reject(error))\n    })\n  })\n\n // Написать компонент - конвертер километров в мили и наоборот\n\nconst KilometrToMilesConverter = () => {\n       const [value, setValue] = useState('')\n       const [converteredValue, setConverteredValue] = useState('')\n       const [conversionType, setConversionType] = useState('kilometr')\n   \n       const handleChangeValue = (e) => {\n       setValue(e.target.value)\n       }\n       \n       const handleSelectChange = (e) => {\n        setConversionType(e.target.value)\n       }\n       \n       const contertValue = () => {\n         if (conversionType === 'kilometr'){\n         const milesValue = +value * 1.6;\n         setConverteredValue(millesValue)\n         } else {\n         const kmValue = +value / 1.6;\n         setConverteredValue(kmValue)\n         }\n       }\n       return (\n           <>\n             <h1>Converter</h1>\n             <label> Enter value <input type='number' value={value} onChange={handleChangeValue}</label>\n             <select onChange={handleSelectChange}>\n             <option value = 'kilometr'>Kilometr</option>\n             <option valie - 'milles'>Milles</option>\n             </select>\n             <button onClick = {convertValue}> Enter </button>\n           </>\n       )\n}"
      }
    ]
  },
  {
    "company": "Selecty",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-04 14:05:38",
        "content": "2025-04-04 14:05:38\n Ivan Kulyaev -> 2071074234:\nКомпания: Selecty\nзп: готовы были дать 250к на руки\nВакансия: написала hr\n\nВопросы:\n\nзачем реакт нужен\nvirtual dom\nhttp статус коды 100 - 500\nв чем безопасность https\nпротокол шифрования TСP\nприоритезация селекторов в css\njwt подробно, части JWT\nrest api\nотправка данных в заголовках, где еще можно данные передавать в них\nметоды http\nавторизация и аутентификация \nвебсокеты\nзащищенность https и незащищеннось http\ncors и его отношение к https\nкак скр...",
        "full_content": "2025-04-04 14:05:38\n Ivan Kulyaev -> 2071074234:\nКомпания: Selecty\nзп: готовы были дать 250к на руки\nВакансия: написала hr\n\nВопросы:\n\nзачем реакт нужен\nvirtual dom\nhttp статус коды 100 - 500\nв чем безопасность https\nпротокол шифрования TСP\nприоритезация селекторов в css\njwt подробно, части JWT\nrest api\nотправка данных в заголовках, где еще можно данные передавать в них\nметоды http\nавторизация и аутентификация \nвебсокеты\nзащищенность https и незащищеннось http\ncors и его отношение к https\nкак скрыть контент на экране у юзера\nособенности стрелочной функции, зачем ее сделали\n\nБыла задачка формата, что будет выводиться в логи в react компоненте"
      }
    ]
  },
  {
    "company": "Рвд Инфосистемы",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-21 18:08:03",
        "content": "2024-06-21 18:08:03\n Tonidevs -> 2071074234:\nРВД ИНФОСИСТЕМЫ\n— вакансия: hr написала\n— ЗП: до 150\n— успех: скорее да\n— комментарии: тех поболтать без LC, уставшие работяги, в соло придется работать за фронта, девопса и ещё того парня, как первый опыт - ок.\n\nВОПРОСЫ\n- работал ли с TS какие преимущества\n- чем проекты собирали\n- каким образом взаимодействовал с бэкендом\n- расскажи про HTTP протокол своими словами из опыта как взаимодействовал на практике как писал запросы\n- из чего состоит URL запр...",
        "full_content": "2024-06-21 18:08:03\n Tonidevs -> 2071074234:\nРВД ИНФОСИСТЕМЫ\n— вакансия: hr написала\n— ЗП: до 150\n— успех: скорее да\n— комментарии: тех поболтать без LC, уставшие работяги, в соло придется работать за фронта, девопса и ещё того парня, как первый опыт - ок.\n\nВОПРОСЫ\n- работал ли с TS какие преимущества\n- чем проекты собирали\n- каким образом взаимодействовал с бэкендом\n- расскажи про HTTP протокол своими словами из опыта как взаимодействовал на практике как писал запросы\n- из чего состоит URL запроса\n- абстрактно: надо отправить запрос чтобы вытащить один товар в карточку что бы использовал как бы сделал эту задачу\n- какие HTTP  методы знаешь с какими работал, расскажи про OPTIONS\n- как CORS - работает и для чего нужен\n- как реализовать механизм обновления товаров в корзине, вытекающий вопрос: если пользователь меняет устройство(делаем авторизацию)\n- сессии и заголовок авторизации, что за префикс (bearer)\n- как реализовать передачу данных котировок в рилтайм\n- куча запросов списков с бека как все собрать, оптимизировать\n- представь, что у нас нет реакта, но мы хотим реализовать хуки, как бы ты реализовал систему хуков"
      }
    ]
  },
  {
    "company": "Страховая Компания Гайде",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-09-23 18:26:36",
        "content": "2024-09-23 18:26:36\n Александр -> 2071074234:\n- страховая компания гайде\n- вилка до 250\n- hr сама позвонила \n- до вопросов не дошли, было отвратительно общение с ведущим, который вначале опоздал, после не смог ответить на вопрос о переработках, сделал вид что не услышал его, после этого посмеялся над тем кто такие фронт-лиды, должен был быть второй собеседующий, но он не пришел поэтому он сказал что надо будет еще с ним собес пройти, как будто запись сделать нельзя и показать ему, после чего я с...",
        "full_content": "2024-09-23 18:26:36\n Александр -> 2071074234:\n- страховая компания гайде\n- вилка до 250\n- hr сама позвонила \n- до вопросов не дошли, было отвратительно общение с ведущим, который вначале опоздал, после не смог ответить на вопрос о переработках, сделал вид что не услышал его, после этого посмеялся над тем кто такие фронт-лиды, должен был быть второй собеседующий, но он не пришел поэтому он сказал что надо будет еще с ним собес пройти, как будто запись сделать нельзя и показать ему, после чего я сказал что об этом речи не шло, дальше он сказал тогда досвидания и вышел из беседы. ОБХОДИТЕ ЭТУ КОМПАНИЮ СТОРОНОЙ!!!\nКомпания переписывает легаси с пхп попутно встраивая фичи, сомневаюсь в том что они хоть что то переписывают, думаю пиздеж"
      }
    ]
  },
  {
    "company": "Mozen",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-25 16:36:33",
        "content": "2024-06-25 16:36:33\n Mummadhan -> 2071074234:\n- Mozen \n-  https://spb.hh.ru/vacancy/98722588?hhtmFrom=employer_vacancies\n- ЗП: от 180к на руки\n- Вопросы:\n1) Что такое чистая функция?\n2) Что такое иммутабельность?\n3) Методы массивов для чего они нужны? Почему нельзя было обойтись просто циклами?\nРассказать про map и forEach, разницу между ними.\n4) Рассказать про hoisting.\n5) Рассказать про облости видимости(scope).\n6) Рассказать про замыкания.\n7) Рассказать про IntersectionObserver API?\n😍 Рассказ...",
        "full_content": "2024-06-25 16:36:33\n Mummadhan -> 2071074234:\n- Mozen \n-  https://spb.hh.ru/vacancy/98722588?hhtmFrom=employer_vacancies\n- ЗП: от 180к на руки\n- Вопросы:\n1) Что такое чистая функция?\n2) Что такое иммутабельность?\n3) Методы массивов для чего они нужны? Почему нельзя было обойтись просто циклами?\nРассказать про map и forEach, разницу между ними.\n4) Рассказать про hoisting.\n5) Рассказать про облости видимости(scope).\n6) Рассказать про замыкания.\n7) Рассказать про IntersectionObserver API?\n😍 Рассказать про способы копирования объектов?\n9)  Рассказать про Промисы? async await?\n10) Что такое полифиллы?\n11) Рассказать про Virtual DOM?\n12) Что такое reconcilation?\n13) Что такое  key?\n14) Для чего нужен React?\n15) Вопросы про Webpack?\n14) Для чего нужны Loaders?\n15) Что такое Tree Shaking?\n16)Разница между Webpack и Vite?\n17) Что такое SPA?\n18) Минусы и плюсы SSR?"
      }
    ]
  },
  {
    "company": "X-Keeper",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-04 08:43:41",
        "content": "2024-06-04 08:43:41\n Александр Горохов -> 2071074234:\nX-Keeper Тех собес (но как-будто не тех)\nЗп:200\n\nМного софт вопросов, нет лайвкодинга.\nЧто такое redux, отличие от context, плюсы минусы.\nЧто такое react, в чем плюсы.\nАрхитектура программирования , какую знаешь.\nЕсли проблемы у пользователя на сайте при отображении страницы(долго грузит и т.д.) что бы делал, как бы искал проблему\nEvent loop, микро/макро. Где ждет макро своего выполнения.\nЧто происходит когда вводишь в адресную строку адрес и...",
        "full_content": "2024-06-04 08:43:41\n Александр Горохов -> 2071074234:\nX-Keeper Тех собес (но как-будто не тех)\nЗп:200\n\nМного софт вопросов, нет лайвкодинга.\nЧто такое redux, отличие от context, плюсы минусы.\nЧто такое react, в чем плюсы.\nАрхитектура программирования , какую знаешь.\nЕсли проблемы у пользователя на сайте при отображении страницы(долго грузит и т.д.) что бы делал, как бы искал проблему\nEvent loop, микро/макро. Где ждет макро своего выполнения.\nЧто происходит когда вводишь в адресную строку адрес и нажимаешь enter.\nКакое тестирование применяли на проектах.\nУмеешь ли работать с докером и аналогами, можешь самостоятельно настроить ?\nДля чего мемоизировать? Нужно ли все оборачивать в мемо? Какие варианты оптимизации знаешь.\nУ нас есть загрузка большого объема данных и когда мы пытаемся его загрузить все ломается, что будешь делать?\nЗнаешь ли сложность алгоритмическую?\nCi CD настраивал?"
      }
    ]
  },
  {
    "company": "Иннополис",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-06 17:14:01",
        "content": "2025-07-06 17:14:01\n Никита -> 2071074234:\nИннополис\nЗП: от 200\n\nВ основном задавал вопросы про опыт и немного общих технических\n\n1. Принцип headless-components?\n2. Какая была архитектура фронта на проекте?\n3. Как общались с бэком?\n4. Что такое BFF, был ли настроен на проекте?\n5. Расскажи всё что знаешь про авторизацию, по какому принципу она была построена у вас на фронте? Использовали библу для jwt токенов?\n6. Как происходит обновление access токена на фронте, опишите алгоритм? (axios intercep...",
        "full_content": "2025-07-06 17:14:01\n Никита -> 2071074234:\nИннополис\nЗП: от 200\n\nВ основном задавал вопросы про опыт и немного общих технических\n\n1. Принцип headless-components?\n2. Какая была архитектура фронта на проекте?\n3. Как общались с бэком?\n4. Что такое BFF, был ли настроен на проекте?\n5. Расскажи всё что знаешь про авторизацию, по какому принципу она была построена у вас на фронте? Использовали библу для jwt токенов?\n6. Как происходит обновление access токена на фронте, опишите алгоритм? (axios interceptors)\n7. У вас было 3 фронта на проекте, как вы распределяли задачи, какие предпочитаете и какие у вас были?\n8. При авторизации внедряли функционал ролей?\n9. Приходите в команду, а там access токен передаётся в query параметрах, ваши действия?\n10. Как работает ивент луп?\n11. Расскажите всё что знаете про промисы, их методы, chaining \n12. Можно ли после catch снова навесить then?\n13. Что такое область видимости, замыкание, лексическое окружение, var let const\n14. Пример использования замыканий в работе\n15. Что такое HOC, назвать пример\n16. Для чего нужен react.memo\n17. Как отслеживать ререндеры в реакте?\n18. Назвать хуки какие знаешь, жизненный цикл компонента\n19. Где мы используем жизненный цикл (useEffect)\n20. Что такое Map, пользовались ли маппингом?\n21. У нас есть 3 группы инпутов по 3 инпута в каждой. При вводе значения в один первый инпут, такое же значение появляется в остальных первых инпутах в других группах. Как избежать данного поведения? (уникальные имена создавать, динамические поля)\n22. Как обрабатывали данные с бэка с помощью TS, какие проблемы были?\n23. Utility types\n24. ООП, принципы\n\nЗадача\n\nimport \"./styles.css\";\n\nconst payload = [\n    { firstName: \"John\", age: 20, company: \"Google\" },\n    { firstName: \"Andrea\", age: 30, company: \"Amazon\" },\n    { firstName: \"Max\", age: 40, company: \"Amazon\" },\n    { firstName: \"Anthony\", age: 15, company: \"FirstClick\" },\n    { firstName: \"Nancy\", age: 25, company: \"FirstClick\" },\n    { firstName: \"Pryan\", age: 20, company: \"Google\" },\n];\n\n// 1. It's taking array of objects with following fields:\n// - firstName: string\n// - age: int\n// - company: string\n// 2. This function should return average age of employees per company.\n// For example, the 'payload' above it should return:\n// {\n//     Google: 20,\n//     Amazon: 35,\n//     FirstClick: 20\n// }\nfunction main(input) {\n}\n\ndocument.getElementById(\"app\").innerHTML = JSON.stringify(\n    main(payload),\n    null,\n    2\n);"
      }
    ]
  },
  {
    "company": "АО ГНИВЦ",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-26 11:45:40",
        "content": "2025-03-26 11:45:40\n twomadd -> 2071074234:\nКомпания: АО ГНИВЦ \nЗП: 230к\nВакансия: hr написал\n\nВопросы:\n1.Спрашивали про бэкграунд , достижения и самые интересные задачи\n2. async и defer , в чем разница\n3. Знаком ли с Web Workers , рассказать про них\n4. Замыкание\n5. Дженерики\n6. Для чего typeof и keyof\n7. Virtual Dom \n8. Для чего key\n9. Разница между useCallback и useMemo \n10. React.memo\n11. Какое сравнение осуществляет React.memo\n12. HOC \n13. Обработчики событий в React\n14. Error Boundaries\n15....",
        "full_content": "2025-03-26 11:45:40\n twomadd -> 2071074234:\nКомпания: АО ГНИВЦ \nЗП: 230к\nВакансия: hr написал\n\nВопросы:\n1.Спрашивали про бэкграунд , достижения и самые интересные задачи\n2. async и defer , в чем разница\n3. Знаком ли с Web Workers , рассказать про них\n4. Замыкание\n5. Дженерики\n6. Для чего typeof и keyof\n7. Virtual Dom \n8. Для чего key\n9. Разница между useCallback и useMemo \n10. React.memo\n11. Какое сравнение осуществляет React.memo\n12. HOC \n13. Обработчики событий в React\n14. Error Boundaries\n15. Если надо отправлять много запросов одновременно через axios , какие способы знаешь ? \n\nЗадача:\nfunction slowCalc(x) {\n  console.log('Вычисляю...');\n  return x * 2;\n}\n\nconst cached = (fn) => {\n  const cache = {}; // Простой объект вместо Map\n  return (x) => {\n    if (x in cache) { // Проверяем наличие ключа в объекте\n      console.log('(из кеша)');\n      return cache[x]; // Возвращаем сохранённое значение\n    }\n    const result = fn(x); // Вычисляем, если нет в кеше\n    cache[x] = result; // Сохраняем результат\n    return result;\n  };\n};\n\nconst cachedCalc = cached(slowCalc);\nconsole.log(cachedCalc(5));  // Вычисляю... → 10\nconsole.log(cachedCalc(5));  // (из кеша) → 10\nconsole.log(cachedCalc(10"
      }
    ]
  },
  {
    "company": "Айкон Про",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-05-09 06:39:27",
        "content": "2025-05-09 06:39:27\n Yuri Trondin -> 2071074234:\nКомпания: Айкон Про\nhttps://hh.ru/vacancy/117261224?hhtmFrom=employer_archived_vacancies\nЗП (называл от 300, вилка 380-460)\nВопросы (задач или кодинга не было):\n1) Разница SSR SSG CSR\n2) методология BFF\n3) getStaticProps getServerSideProps\n4) в каких случаях использвоать SSR SSG CSR\n5) react-query/RTK-query, инвалидация, кэширование, параметры\n6) отложенный рендеринг (lazy, suspense)\n7) плюсы минусы мутабельный и имутабельных данных\n8) TS, зачем н...",
        "full_content": "2025-05-09 06:39:27\n Yuri Trondin -> 2071074234:\nКомпания: Айкон Про\nhttps://hh.ru/vacancy/117261224?hhtmFrom=employer_archived_vacancies\nЗП (называл от 300, вилка 380-460)\nВопросы (задач или кодинга не было):\n1) Разница SSR SSG CSR\n2) методология BFF\n3) getStaticProps getServerSideProps\n4) в каких случаях использвоать SSR SSG CSR\n5) react-query/RTK-query, инвалидация, кэширование, параметры\n6) отложенный рендеринг (lazy, suspense)\n7) плюсы минусы мутабельный и имутабельных данных\n8) TS, зачем нужен как помогает\n9) Type guard/type assertion \n10) Union type/intersection type\n11) Object freeze\n12) unit тесты\n13) snapshot/screenshot тесты\n14) git rebase /cherypeek\n14) module auditor npm\n15) как поднять докер образ\n16) оптимизация загрузки JS/CSS\n17) подходы к кроссбраузерной верстке\n18) фигма (работал или нет)\n19) вэбсокеты (на чем делал)\n20)graphql (работал или нет)\n21) nodeJS (работал или нет)\n22) монорепа (нравится или нет что использовал плюсы минусы)\n23) микрофрнотенды (работал или нет плюсы минусы)\n\nдальше стандарт по мотивации, какие проекты делал и тд. \n\nУспех собеса  ✅ (позвали на сл этап)\n \n Запись увы без моего голоса, сорян. Но если кому будет надо, я залью."
      }
    ]
  },
  {
    "company": "More.tv",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-01-10 08:56:45",
        "content": "2024-01-10 08:56:45\n Daniil Max -> 2071074234:\n— Название компании: More.tv \n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Задачи: теория \n— Запись на ютуб: https://youtu.be/OE4Q3s5lZJE?si=9OEmCoP05iu8yRdj\n— Успех собеса: ✅\n— Фитбек о собесе от HR: огонь\n\n#middle",
        "full_content": "2024-01-10 08:56:45\n Daniil Max -> 2071074234:\n— Название компании: More.tv \n— Ссылка на вакансию: потеряна \n— ЗП: 270К\n— Задачи: теория \n— Запись на ютуб: https://youtu.be/OE4Q3s5lZJE?si=9OEmCoP05iu8yRdj\n— Успех собеса: ✅\n— Фитбек о собесе от HR: огонь\n\n#middle"
      }
    ]
  },
  {
    "company": "Расчетные Решения",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-13 13:53:48",
        "content": "2024-06-13 13:53:48\n Tonidevs -> 2071074234:\nРасчетные Решения\nhr написала\nЗП от 260 просил, можно больше думаю 300+\nВопросы - не было, сразу лайвкод\nУСПЕХ: скорее нет, чем да(больше уверенности).\n\nЗадачи:\n- ПРОМИСЫ\nlog(1); // Вывод: 1\n\nsetTimeout(() => log(2), 0); // Вывод: 2\n\nnew Promise((res, rej) => {\n  log(3); // Вывод: 3\n  res(4); // Вывод: 4\n})\n.then((x) => {\n  log(x); // Вывод: 4\n  throw x; // Выбросит исключение, которое будет перехвачено catch\n})\n.catch(log) // Вывод: 4\n\nlog(5) // Выво...",
        "full_content": "2024-06-13 13:53:48\n Tonidevs -> 2071074234:\nРасчетные Решения\nhr написала\nЗП от 260 просил, можно больше думаю 300+\nВопросы - не было, сразу лайвкод\nУСПЕХ: скорее нет, чем да(больше уверенности).\n\nЗадачи:\n- ПРОМИСЫ\nlog(1); // Вывод: 1\n\nsetTimeout(() => log(2), 0); // Вывод: 2\n\nnew Promise((res, rej) => {\n  log(3); // Вывод: 3\n  res(4); // Вывод: 4\n})\n.then((x) => {\n  log(x); // Вывод: 4\n  throw x; // Выбросит исключение, которое будет перехвачено catch\n})\n.catch(log) // Вывод: 4\n\nlog(5) // Вывод: 5\n\nОТВЕТ: //  1 3 5 4 4 2\n- МЕМОИЗАЦИЯ\n// На вход получает функцию, которую необходимо мемоизировать и возвращает новую функцию\n\nconst memoization = (fn) => {\n  // Создаем карту для хранения результатов вычислений\n  const cache = new Map();\n\n  // Возвращаем новую функцию, которая будет использовать кэш для мемоизации\n  return (...args) => {\n    // Преобразуем аргументы в строку, чтобы использовать их в качестве ключа в карте\n    const str = JSON.stringify(args);\n\n    // Проверяем, есть ли результат вычисления для этих аргументов в кэше\n    if (cache.has(str)) {\n      // Если есть, возвращаем его из кэша\n      return cache.get(str);\n    }\n\n    // Если результата в кэше нет, вычисляем функцию с переданными аргументами\n    const result = fn(...args);\n\n    // Сохраняем результат в кэше\n    cache.set(str, result);\n\n    // Возвращаем результат\n    return result;\n  };\n};\n\n// Пример использования\nconst f = (a, b) => a + b; // Простая функция для примера\nconst f1 = memoization(f); // Мемоизируем функцию f\n\nconsole.log(f1(1, 2)); // 3, вычисляется и сохраняется в кэше\nconsole.log(f1(1, 2)); // 3, берется из кэша\n\n- ПРОМИС ALL | Написать свой Promise.all, не используя Promise.race\nconst promiseAll = (proms) => {\n  // Создаем массив для хранения результатов\n  const result = new Array(proms.length);\n  // Счетчик для отслеживания количества выполненных промисов\n  let count = 0;\n\n  // Возвращаем новый промис\n  return new Promise((resolve, reject) => {\n    // Проходим по массиву промисов\n    proms.forEach((pr, idx) => {\n      // Добавляем обработчики для каждого промиса\n      pr.then(res => {\n        // Сохраняем результат в соответствующую ячейку массива\n        result[idx] = res;\n        // Увеличиваем счетчик выполненных промисов\n        count += 1;\n        // Если все промисы выполнены, разрешаем возвращаемый промис с результатом\n        if (count === proms.length) resolve(result);\n      }).catch(reject); // Если промис отклонен, отклоняем возвращаемый промис\n    });\n  });\n};\n- АНАГРАМА \n// На вход подается массив строк. Необходимо вернуть сгруппированные анаграммы (массив массивов)\nconst getAnagrams = (arr) => {\n  // Создаем объект для хранения групп анаграмм\n  const mapa = {};\n  // Проходим по массиву строк\n  arr.forEach((el) => {\n    // Преобразуем строку в массив символов, сортируем его и объединяем обратно в строку\n    // При этом переводим все символы в нижний регистр, чтобы анаграммы не различались по регистру\n    const sorted = el.split(\"\").sort().join(\"\").toLowerCase();\n    // Если такой ключ (отсортированная строка) уже есть в mapa, добавляем текущую строку в массив\n    if (mapa[sorted]) {\n      mapa[sorted].push(el);\n    } else {\n      // Если такого ключа нет, создаем новый массив с текущей строкой и добавляем его в mapa\n      mapa[sorted] = [el];\n    }\n  });\n  // Возвращаем массив значений из mapa, которые являются группами анаграмм\n  return Object.values(mapa);\n};\n\n// Пример использования функции getAnagrams\nconst words = ['мир', 'Рим', 'сирота', 'Ариост', 'мри', 'пва', 'лор', 'авп'];\nconst anagrams = getAnagrams(words);\n\nconsole.log(anagrams);\n\n// Вывод: [[\"мир\", \"Рим\", \"мри\"], [\"сирота\", \"Ариост\"], [\"пва\", \"авп\"], [\"лор\"]]\n- что выведется в консоль и почему"
      }
    ]
  },
  {
    "company": "Фалт Системс",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-02 14:29:20",
        "content": "2025-07-02 14:29:20\n Евгений -> 2071074234:\nКомпания: ФАЛТ Системс\nПроект: сайт аэрофлота\nЗП: от 230\n\nВопросы:\n1)Что происходит когда вводить url\n2) Eventloop\n3) this \n4) как внутри DOM как ведет себя this\n5) рассказать про утечку памяти \n6) разница между SSR,SSG, ISR \n7) рассказать про SEO, как можно повлиять \n8) Что такое рекурсия\nЗадача 1: \nconst reduce = (callback, initial = [], arr) => {\n  if (arr.length === 0) return initial; // false\n\n  const [first, ...rest] = arr;\n  return callback(firs...",
        "full_content": "2025-07-02 14:29:20\n Евгений -> 2071074234:\nКомпания: ФАЛТ Системс\nПроект: сайт аэрофлота\nЗП: от 230\n\nВопросы:\n1)Что происходит когда вводить url\n2) Eventloop\n3) this \n4) как внутри DOM как ведет себя this\n5) рассказать про утечку памяти \n6) разница между SSR,SSG, ISR \n7) рассказать про SEO, как можно повлиять \n8) Что такое рекурсия\nЗадача 1: \nconst reduce = (callback, initial = [], arr) => {\n  if (arr.length === 0) return initial; // false\n\n  const [first, ...rest] = arr;\n  return callback(first, reduce(callback, initial, rest));\n};\n\nconst sumOfSquares = (arr) => {\n  return reduce((el, acc)=> {\n   return el * el + acc\n  },0, arr) \n};\n\nconst result = sumOfSquares([1, 2, 3]);\n\nconsole.log(result);\n// Ожидаемый результат: 14\n\n// sumOfSquares числа возводит в квадрат\n//\nЗадача 2: \n/**\n * Реализовать класс Subscription.\n * Должны поддерживаться методы subscribe, unsubscribe и next.\n * Все методы должны быть строго типизированы.\n */\ntype HandlerType<T> = (value: T) => void\n\nclass Subscription<T> {\n  subscriber: Set<HandlerType<T>> = new Set()\n  subscribe(handler : HandlerType<T>) {\n    this.subscriber.add(handler)\n    return ()=> this.unsubscribe1(handler)\n  }\n  unsubscribe1(handler: HandlerType<T>) {\n    this.subscriber.delete(handler )\n  }\n  next(value: T) {\n    this.subscriber.forEach(handler => handler(value))\n  }\n}\n\nconst sub = new Subscription<string>();\n\nconst handler1 = (value: string) => {\n  console.log('Handler1 received:', value);\n};\nconst handler2 = (value: string) => {\n  console.log('Handler2 received:', value);\n};\n\nconst unsubscribe1 = sub.subscribe(handler1);\nconst unsubscribe2 = sub.subscribe(handler2);\n\nsub.next('First');\n// Вывод:\n// Handler1 received: First\n// Handler2 received: First\n\nunsubscribe1();\n\nsub.next('Second');\n// Вывод:\n// Handler2 received: Second\nЗадача 3:  задача состоит из разных компонентов, ссылка на весь проект : https://stackblitz.com/edit/vitejs-vite-8orcxekc?file=src%2Fcontainers%2Fuser-container%2Findex.tsx,src%2Fapi%2Findex.ts\n/*\n- Реализовать React-компонент `UserContainer` (из `./containers/user-container/`) в классовом стиле.\n- Реализовать загрузку и обновление пользователя в компоненте используя класс `Api` (из `./api/`).\n- Реализовать отображение компонентов (из `./components/...`) — `<Loader />`, `<Error />` или `<UserCard />` — в зависимости от состояния.\n- Реализовать вызов функции `unmount`, который принимается через `props`, в соответствующем методе жизненного цикла.\n\n---\n\n*/\n\nimport { Component } from 'react';\nimport styles from './styles.module.css';\nimport Loader from \"../../components/loader\"\nimport {Api} from \"../../api\"\n\ninterface Props {\n  userId: number;\n  unmount: () => void;\n}\n\nclass UserContainer extends Component<Props> {  \n  constructor(props) {\n    super(props)\n    this.state = {\n      user: null,\n      isLoading: false, \n      error: null\n    }\n    this.api = new Api()\n  }\n    \n    componentDidMount() {\n      this.loadUser\n    }\n    loadUser = async () => {\n      try {\n        const user = await this.api.getUser(this.props.userId)\n        this.setState({user, isLoading: false})\n      } catch(error : unknown) {\n        this.setState({error: error.message, isLoading: false})\n      }\n    }\n\n  }\n  render() {\n    return <div className={styles.container}></div>;\n  }\n}\n\nexport default UserContainer;"
      }
    ]
  },
  {
    "company": "Algorithmic Brains",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-12 14:51:30",
        "content": "2024-07-12 14:51:30\n Илья -> 2071074234:\nAlgorithmic Brains\n- Вакансия: сами написали\n- до 190к\n\nВопросы:\n- расскажи про опыт\n- var,let,const\n- Cookie,LocalStorage,SessionStorage \n- callback hell, promise, async/await\n- статические методы promise\n- хуки\n\nЗадачи:\n1. Задачи с метом массива что выведет в зависимости от того,какая функция будет(стрелочная или декларейшен)\n2. дан массив с повторяющимися цифрами. Нужно получить объект : значение - количество \nconst result = array.reduce((acc, num) => ...",
        "full_content": "2024-07-12 14:51:30\n Илья -> 2071074234:\nAlgorithmic Brains\n- Вакансия: сами написали\n- до 190к\n\nВопросы:\n- расскажи про опыт\n- var,let,const\n- Cookie,LocalStorage,SessionStorage \n- callback hell, promise, async/await\n- статические методы promise\n- хуки\n\nЗадачи:\n1. Задачи с метом массива что выведет в зависимости от того,какая функция будет(стрелочная или декларейшен)\n2. дан массив с повторяющимися цифрами. Нужно получить объект : значение - количество \nconst result = array.reduce((acc, num) => {\n  if (acc[num]) {\n    acc[num] += 1;\n  } else {\n    acc[num] = 1;\n  }\n  return acc;\n}, {});\n\n3. Задача по ректу,сделать условно свой тудулист \n\nconst [users, setUsers] = useState(usersData);\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  const toggleEditMode = (user) => {\n    setIsEditing(!isEditing);\n    setCurrentUser(user);\n  };\n\n  const deleteUser = (id) => {\n    setUsers(users.filter(user => user.id !== id));\n  };\n\n  const editUser = (id, newUsername) => {\n    setUsers(users.map(user => user.id === id ? { ...user, username: newUsername } : user));\n    setIsEditing(false);\n    setCurrentUser(null);\n  };\n4. Последняя задача с применением Promise.all\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [userResponse, postResponse] = await Promise.all([\n          fetch(userUrl),\n          fetch(postUrl)\n        ]);\n\n        const userData = await userResponse.json();\n        const postData = await postResponse.json();\n\n        setUser(userData);\n        setPost(postData);\n      } catch (error) {\n        setError('Ошибка при загрузке данных');\n        console.error('Ошибка при загрузке данных:', error);\n      }\n    };\n\n    fetchData();\n  }, []);"
      }
    ]
  },
  {
    "company": "Gotbit",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-23 19:56:25",
        "content": "2024-07-23 19:56:25\n Valerii Neugomonov -> 2071074234:\nGotBit\n- Вакансия: https://careers.gotbit.io/jobs/4629252-react-developer\n- Вилка: ~ EUR 4-6k\n- Успех: уверен что мне отказ конечно, но оформил паровозик для товарища, прокнуло, ему завезли приглашение на следующий этап, финальный, знакомство с CTO.\n\n- Вопросы: база по типу приведения типов, методы массивов и их применение... Работают с графиками.\nЗадание: https://t.me/c/2071074234/45026/45301",
        "full_content": "2024-07-23 19:56:25\n Valerii Neugomonov -> 2071074234:\nGotBit\n- Вакансия: https://careers.gotbit.io/jobs/4629252-react-developer\n- Вилка: ~ EUR 4-6k\n- Успех: уверен что мне отказ конечно, но оформил паровозик для товарища, прокнуло, ему завезли приглашение на следующий этап, финальный, знакомство с CTO.\n\n- Вопросы: база по типу приведения типов, методы массивов и их применение... Работают с графиками.\nЗадание: https://t.me/c/2071074234/45026/45301"
      }
    ]
  },
  {
    "company": "СтилСофт",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-08 11:06:04",
        "content": "2025-07-08 11:06:04\n Никита -> 2071074234:\nСтилсофт\nЗП: 200\n\nВопросы\n\nОтличия any unknown в TS?\nКакие знаешь утилити типы?\nЧто такое дженерики?\nНазови причины ререндеров в реакте? Как можем принудительно вызвать ререндер?\nЧто такое key?\nЧто такое useEffect? Какие ещё методы вызывать эффект знаешь?(useInsertionEffect)\nЧто такое useRef?\nПочему нужно обращаться к DOM элементу через ref, а не через querySelector?\nЗнаешь что такое callback ref?\nIntersection Obserever?\nПочему мы не можем хранить струк...",
        "full_content": "2025-07-08 11:06:04\n Никита -> 2071074234:\nСтилсофт\nЗП: 200\n\nВопросы\n\nОтличия any unknown в TS?\nКакие знаешь утилити типы?\nЧто такое дженерики?\nНазови причины ререндеров в реакте? Как можем принудительно вызвать ререндер?\nЧто такое key?\nЧто такое useEffect? Какие ещё методы вызывать эффект знаешь?(useInsertionEffect)\nЧто такое useRef?\nПочему нужно обращаться к DOM элементу через ref, а не через querySelector?\nЗнаешь что такое callback ref?\nIntersection Obserever?\nПочему мы не можем хранить структуры данных типа Map, Date в Redux сторе?\nЧто такое reselect?\nРасскажи про Critical Render Path. Отличия async/defer?\n\nЗадачи\n\n// Исходные данные\n// 1. Необходимо описать данную конструкцию (TypeScript)\n\n\ntype TGroup = {\n    id: number,\n    name: 'route' | 'session' | 'mission'\n}\n\ninterface Tlist = {\n    id: string,\n    revNo: number,\n    group: 1 | 2 | 3\n}\n\nconst group: TGroup[] = [\n    { id: 1, name: \"route\" },\n    { id: 2, name: \"session\" },\n    { id: 3, name: \"mission\" },\n];\n\nconst list: TList[] = [\n    {\n        id: \"R1311\",\n        revNo: 16815,\n        group: 1,\n    },\n    {\n        id: \"R1312\",\n        revNo: 16816,\n        group: 2,\n    },\n    {\n        id: \"R1313\",\n        revNo: 16817,\n        group: 3,\n    },\n    {\n        id: \"R1314\",\n        revNo: 16817,\n        group: 1,\n    },\n    {\n        id: \"R1315\",\n        revNo: 16818,\n        group: 2,\n    },\n];\n\ntype newGroup = Record<number, 'route' | 'session' | 'mission'> \n\n\n// Должно получиться\n// 2. У каждого элемент спика заменить поле group с ID => NAME (groupStatus)\n\nconst newList: TResult = list.map(item =>{\n    const groupName = group.find(groupItem => groupItem.id === item.group)?.name\n    if (groupName) {\n        return {...item, group: groupName}\n    };\n    return;\n})\n\ninterface TResult extends Tlist = {\n    group: 'route' | 'session' | 'mission'\n}\n\nconst result: TResult[] = [\n    {\n        id: \"R1311\",\n        revNo: 16815,\n        group: \"route\",\n    },\n    {\n        id: \"R1312\",\n        revNo: 16816,\n        group: \"session\",\n    },\n    {\n        id: \"R1313\",\n        revNo: 16817,\n        group: \"mission\",\n    },\n    {\n        id: \"R1314\",\n        revNo: 16817,\n        group: \"route\",\n    },\n    {\n        id: \"R1315\",\n        revNo: 16818,\n        group: \"session\",\n    },\n];"
      }
    ]
  },
  {
    "company": "Secure-T",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-01-31 17:31:14",
        "content": "2024-01-31 17:31:14\n Evgeniy -> 2071074234:\n#Secure-T #middle\nКомпания: Secure-T\nВилка: от 200\nСсылка на вакансию: hr написала сама\n\nКрутой собес. Все вопросы были только по реакту, как и лайвкод.\nВопросы:\n- Что добавили в 18 реакте \n- fiber\n- concurrent\n- Хуки useTransition, useDefferedValue\n- useRef\n- Как работает React. Reconciliation.\nБыло что-то еще, забыл\n\nЗадачи:\nРефакторинг кода \nДобавить кнопку которая появляется по скроллу \nНаписать кастомный хук который принимает функцию, ивент и наве...",
        "full_content": "2024-01-31 17:31:14\n Evgeniy -> 2071074234:\n#Secure-T #middle\nКомпания: Secure-T\nВилка: от 200\nСсылка на вакансию: hr написала сама\n\nКрутой собес. Все вопросы были только по реакту, как и лайвкод.\nВопросы:\n- Что добавили в 18 реакте \n- fiber\n- concurrent\n- Хуки useTransition, useDefferedValue\n- useRef\n- Как работает React. Reconciliation.\nБыло что-то еще, забыл\n\nЗадачи:\nРефакторинг кода \nДобавить кнопку которая появляется по скроллу \nНаписать кастомный хук который принимает функцию, ивент и навешивает обработчик на window\n\nКнопка\nimport { useEffect } from \"react\";\nimport React from \"react\";\nimport { useEvent } from \"./useScroll\";\n\nexport const ScrollBtn = () => {\n  const [scrollY, setScrollY] = React.useState(0);\n  const handleScroll = () => {\n    setScrollY(window.scrollY);\n  };\n\n  useEvent(\"scroll\", handleScroll);\n\n  // сделать так, чтобы кнопка появлялась только в том случае, если scrollY > 200\n  const isVisible = scrollY > 200;\n\n  if (!isVisible) return null;\n\n  const scrollToTop = () => {\n    scrollTo({ top: 0 });\n  };\n\n  return (\n    <div style={{ position: \"fixed\", bottom: \"10px\", right: \"10px\" }}>\n      <button onClick={() => scrollToTop()}>Scroll</button>\n    </div>\n  );\n};\n\nКастомный хук\n\nimport React, { useEffect } from \"react\";\n\nexport const useEvent = (event, fn) => {\n  const savedFn = useRef();\n  useEffect(() => {\n    savedFn.current = fn;\n  }, [fn]);\n  useEffect(() => {\n    const eventListener = (event) => fn(event);\n\n    window.addEventListener(event, eventListener);\n\n    return () => {\n      window.removeEventListener(event, eventListener);\n    };\n  }, [fn, event]);\n};\n\nУспех собеса: скорее всего ❌"
      }
    ]
  },
  {
    "company": "Ноунейм Компания С Оплатой В Крипте",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-12-10 08:08:58",
        "content": "2024-12-10 08:08:58\n Igor -> 2071074234:\nНоунейм компания с оплатой в крипте\nhttps://hh.ru/vacancy/90951582?hhtmFrom=employer_vacancies\n\nСобес в формате поговорить, задач не было. Мужик даже не шарил за фронт\n\nЗапись в YouTube\nhttps://youtu.be/bDh4OVny6wA",
        "full_content": "2024-12-10 08:08:58\n Igor -> 2071074234:\nНоунейм компания с оплатой в крипте\nhttps://hh.ru/vacancy/90951582?hhtmFrom=employer_vacancies\n\nСобес в формате поговорить, задач не было. Мужик даже не шарил за фронт\n\nЗапись в YouTube\nhttps://youtu.be/bDh4OVny6wA"
      }
    ]
  },
  {
    "company": "Онлайн Школа-Тетрика",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-30 07:14:14",
        "content": "2024-10-30 07:14:14\n Artyom Sozykin -> 2071074234:\nОнлайн школа-тетрика\nЗП: 250к\n3 задачи\nПровалено ❌",
        "full_content": "2024-10-30 07:14:14\n Artyom Sozykin -> 2071074234:\nОнлайн школа-тетрика\nЗП: 250к\n3 задачи\nПровалено ❌"
      }
    ]
  },
  {
    "company": "Tybbo System",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-14 20:38:12",
        "content": "2024-11-14 20:38:12\n Артем -> 2071074234:\nКомпания: Tybbo System\nВакансия: https://tver.hh.ru/vacancy/109230359?\nЗП: 220\nВопросы: \nСколько информации может в себе хранить 1 бит\nсколько 1 байт\nчто такое чистая функция\nобласть видемости пермеменных\nизменения обьектов \nчто не так с if(0.1 + 0.2 === 0.3)\nпочему так\nпочему нельзя вызывать получения данных синхронно\nprocess.nextTick\nпорядок вывода тасок в node JS\nthis\nbind vs call vs apply\nWeekMap WeekSet \nсборщик мусора\nв чем проблема рекурсии\nкак мо...",
        "full_content": "2024-11-14 20:38:12\n Артем -> 2071074234:\nКомпания: Tybbo System\nВакансия: https://tver.hh.ru/vacancy/109230359?\nЗП: 220\nВопросы: \nСколько информации может в себе хранить 1 бит\nсколько 1 байт\nчто такое чистая функция\nобласть видемости пермеменных\nизменения обьектов \nчто не так с if(0.1 + 0.2 === 0.3)\nпочему так\nпочему нельзя вызывать получения данных синхронно\nprocess.nextTick\nпорядок вывода тасок в node JS\nthis\nbind vs call vs apply\nWeekMap WeekSet \nсборщик мусора\nв чем проблема рекурсии\nкак можно это побороть\nхвостовая рекурсия\nкак происходит рендер страницы\nнабил адрес нажал enter что дальше\nrequestAnimationsFrame для чего\nreact смысл \nkey in react\nuseEffect vs useLayoutEffect"
      }
    ]
  },
  {
    "company": "А2 Код",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-08-31 07:44:00",
        "content": "2024-08-31 07:44:00\n Руслан -> 2071074234:\nа2 код \n— зп: от 270к\n— вакансия: hr написала\n— задачи: один в один https://t.me/c/2071074234/489/44814",
        "full_content": "2024-08-31 07:44:00\n Руслан -> 2071074234:\nа2 код \n— зп: от 270к\n— вакансия: hr написала\n— задачи: один в один https://t.me/c/2071074234/489/44814"
      }
    ]
  },
  {
    "company": "Staff-IT",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-09-18 16:27:46",
        "content": "2024-09-18 16:27:46\n Бахтияр -> 2071074234:\n- Компания: Staff-IT (аутсорс) тех собес (1ч)\n- ЗП: от 250К\n- Вакансия: https://t.me/c/2071074234/616/62704\n- О проекте: маркетплейс для художников и студий\n- вопросы:\nкакая у вас была верстка на проекте \nПриходилось ли делать какие то специальные приколы UIX под мобилку, например с точки зрения инпутов или клавиатуры или какое то действие прожать, или разные картинки.\nНасколько мобильная версия отличался от десктопной \nНасколько отличался лаяут мобилк...",
        "full_content": "2024-09-18 16:27:46\n Бахтияр -> 2071074234:\n- Компания: Staff-IT (аутсорс) тех собес (1ч)\n- ЗП: от 250К\n- Вакансия: https://t.me/c/2071074234/616/62704\n- О проекте: маркетплейс для художников и студий\n- вопросы:\nкакая у вас была верстка на проекте \nПриходилось ли делать какие то специальные приколы UIX под мобилку, например с точки зрения инпутов или клавиатуры или какое то действие прожать, или разные картинки.\nНасколько мобильная версия отличался от десктопной \nНасколько отличался лаяут мобилки \nБыл ли рендер разных картинок\nВ чем дизайнеры готовили макеты \nКакой CSS был \nРаботал ли tailwind как он тебе\nПисали какие тесты кто писал какие либы\nЗнаком ли с unit тестами\nКак деплоили ваш проект \nС чем приходилось сталкиваться (прооблемы при деплое) \nКакой GITFLOW был\nКакие окружения были у тебя \nВ какие дебри приходилось залазить при деплое \nКакая отладка была при продакшене\nКак понимали что у пользователя проблемы\nКак замеряли скорость загрузки страницы\nСобирали аналитику\nРаботал ли Next \nЧто знаешь про Next\nПриходилось ли делать запуск отдельный фичей \nКак это делали \nЧто использовали для этого"
      }
    ]
  },
  {
    "company": "ROGII",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-12 17:15:01",
        "content": "2025-07-12 17:15:01\n Tima Pakholkov -> 2071074234:\nКомпания: ROGII\nЗп: попросил от 230\n\nВопросы:\n1. Расскажи про свой опыт\n2. Вопросы по опыту и резюме \n3. Почему на проект выбрал d3, а не Canvas. Чем различаются.\n4. Дебаунс и тротл. Как работают? Чем различаются?\n5. С сервера приходит 1000 объектов, как нам получить нужные? (рассуждения про фильтрацию, пагинацию, виртуализацию и работу с сервером)\n6. Структуры данных\n7. Чем обычный поиск отличается от бинарного?\n8. Какую сложность имеет find (л...",
        "full_content": "2025-07-12 17:15:01\n Tima Pakholkov -> 2071074234:\nКомпания: ROGII\nЗп: попросил от 230\n\nВопросы:\n1. Расскажи про свой опыт\n2. Вопросы по опыту и резюме \n3. Почему на проект выбрал d3, а не Canvas. Чем различаются.\n4. Дебаунс и тротл. Как работают? Чем различаются?\n5. С сервера приходит 1000 объектов, как нам получить нужные? (рассуждения про фильтрацию, пагинацию, виртуализацию и работу с сервером)\n6. Структуры данных\n7. Чем обычный поиск отличается от бинарного?\n8. Какую сложность имеет find (линейную)\n9. Сложности алгоритмов O(n), O(n2)\n10. Какую сложность имеет бинарный поиск?\n11. Что нам нужно сделать с массивом, чтобы применить на нем бинарный поиск? \n12. Хеш таблица Map\n\nTS:\n1. Дженерики. Зачем нужны? Как применять? Альтернатива?\n2. Тайпгарды. Зачем нужны? Как проверять типы? \n3. unknown, instance of, is\n4. Record, extends"
      }
    ]
  },
  {
    "company": "Darinsoft",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-06 11:31:18",
        "content": "2024-11-06 11:31:18\n Артем -> 2071074234:\nКомпания: DarinSoft\nЗП: 200\nВакансия: -\n\nВопросы: \nКак сделать синхронную операцию в js\nотличия promiseAll promiseAllSet promiseAny\nОтличия TS от JS (плюсы и минусы)\nХуки в react\nотличия useEffect от useLayoutEffect\nкэйс где ты его применя\nжизненный цикл компонента\nVirtual DOM\nReconsaletion\nFiber\nКак оптимизировать инпут\nreact.memo\nFCD(разказать про архитектуру)\nЕсть код писал его джун он там лагает в нем проблема как ты его оптимизируешь и там много шаг...",
        "full_content": "2024-11-06 11:31:18\n Артем -> 2071074234:\nКомпания: DarinSoft\nЗП: 200\nВакансия: -\n\nВопросы: \nКак сделать синхронную операцию в js\nотличия promiseAll promiseAllSet promiseAny\nОтличия TS от JS (плюсы и минусы)\nХуки в react\nотличия useEffect от useLayoutEffect\nкэйс где ты его применя\nжизненный цикл компонента\nVirtual DOM\nReconsaletion\nFiber\nКак оптимизировать инпут\nreact.memo\nFCD(разказать про архитектуру)\nЕсть код писал его джун он там лагает в нем проблема как ты его оптимизируешь и там много шагов"
      }
    ]
  },
  {
    "company": "MOVAVI",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-03-09 13:32:31",
        "content": "2024-03-09 13:32:31\n Kirill N -> 2071074234:\nЗаписи собеседований  \nКомпания: MOVAVI от 26.02 \nhttps://www.youtube.com/watch?v=X8BAWSHpr9g \n \nКомпания: Мой склад 26.02 \nhttps://www.youtube.com/watch?v=I5vdydjkmAE \n \nКомпания: Собес 27.02 \nhttps://www.youtube.com/watch?v=USFqJBmNrW4 \n \nКомпания: Озон 1.03 (1 этап) \nhttps://www.youtube.com/watch?v=-9CTCHiGLtg \n \nКомпания: Озон 05.03 (2 этап) \nhttps://youtu.be/SsOs-mTIiN8 \n \nКомпания: ГПБ 01.03 \nhttps://youtu.be/dn7HsjOcDfk \n \nКомпания: ВК 05.03 \nh...",
        "full_content": "2024-03-09 13:32:31\n Kirill N -> 2071074234:\nЗаписи собеседований  \nКомпания: MOVAVI от 26.02 \nhttps://www.youtube.com/watch?v=X8BAWSHpr9g \n \nКомпания: Мой склад 26.02 \nhttps://www.youtube.com/watch?v=I5vdydjkmAE \n \nКомпания: Собес 27.02 \nhttps://www.youtube.com/watch?v=USFqJBmNrW4 \n \nКомпания: Озон 1.03 (1 этап) \nhttps://www.youtube.com/watch?v=-9CTCHiGLtg \n \nКомпания: Озон 05.03 (2 этап) \nhttps://youtu.be/SsOs-mTIiN8 \n \nКомпания: ГПБ 01.03 \nhttps://youtu.be/dn7HsjOcDfk \n \nКомпания: ВК 05.03 \nhttps://youtu.be/X4T0G_n1jqo \n \nКомпания ВТБ 06.03  \nhttps://youtu.be/3wfKfjohkw0 \n \nКомпания: Сбер технологии 07.03 \nhttps://youtu.be/gt2RcGbzloQ \n \nКомпания: Иннотех 07.03 \nhttps://youtu.be/soujRRxtnC8 \nКомпания: IT ONE 07.03 \nhttps://youtu.be/RaZ-iZOJgDM"
      }
    ]
  },
  {
    "company": "Цифровые Привычки",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-06 15:05:04",
        "content": "2025-06-06 15:05:04\n Никита -> 2071074234:\nЦифровые привычки (аутстафф)\nЗП: от 180 говорил\nСобесился в проект сбера ERP\n\nИтог: Дали оффер 260к + 6% по ИП, отказался\n\nВопросы:\nvar, let, const различия\nЕсли объект в const передаём что будет?\nКак сделать иммутабельный объект? А через typescript?\nКак скопировать объект. Что в работе чаще всего использовал ?\nКак работает сборщик мусора?\nЧто такое слабые ссылки в контексте сборщика мусора?\nЗачем нужен key в реакте?\nКакие способы оптимизации в контекст...",
        "full_content": "2025-06-06 15:05:04\n Никита -> 2071074234:\nЦифровые привычки (аутстафф)\nЗП: от 180 говорил\nСобесился в проект сбера ERP\n\nИтог: Дали оффер 260к + 6% по ИП, отказался\n\nВопросы:\nvar, let, const различия\nЕсли объект в const передаём что будет?\nКак сделать иммутабельный объект? А через typescript?\nКак скопировать объект. Что в работе чаще всего использовал ?\nКак работает сборщик мусора?\nЧто такое слабые ссылки в контексте сборщика мусора?\nЗачем нужен key в реакте?\nКакие способы оптимизации в контексте реакта?\nФункцию обёрнутую в useCallback передаём в дочерний, нужно ли в дочернем что-то делать чтобы корректно работало?\nРендеринг в реакте синхронный или асинхронный?\nuseEffect/useLayoutEffect отличия\nЧто такое react fiber?\nsetState синхронный или нет? Почему?\nЗачем нужен StrictMode?\nКакие есть виды хранилищ в браузере?\nГде бы ты хранил refresh token и почему?\n\nЗадачи:\n// ЗАДАЧА 1\n// написать функцию с числами фибоначи\n// 0, 1, 1, 2, 3, 5, 8, 13 ...\nfunction fibonacci(n){\n  const numbers = [0, 1]\n\n  for (let i = 2; i < n; i++){\n    numbers.push(numbers[i-1] + numbers[i-2])\n  }\n\n  return numbers.pop()\n}\n\nconsole.log(fibonacci(1)) // 0\nconsole.log(fibonacci(2)) // 1\nconsole.log(fibonacci(7)) // 8\n\n// ЗАДАЧА 2 что не так с кодом?\nuseEffect(async ()=>{\n  const getPosts = await posts()\n  const getUsers = await users()\n\n  return ()=>console.log('123')\n},[])\n\n// ЗАДАЧА 3\n// что выведется при клике на div?\n<form onClick={()=>console.log(2)}>\n  <div onClick={()=>console.log(2)}>\n    <p onClick={()=>console.log(3)}></p>\n  </div>\n</form>\n\n// ЗАДАЧА 4\n// написать свой дебаунс\nfunction debounce(fn, ms){\n  return (...args)=>{\n    let timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(()=>fn(args), ms)\n  }\n}\n\nconst callback = debounce(console.log, 100)\ncallback('hello')\n\n// ЗАДАЧА 5\n// Преобразовать в плоский массив\nconst arr = [[9],[[1]],[[2],[8],[3]],[5]]\n\nfunction flattenArr(arr){\n\n}\n\nflattenArr(arr) // [9, 1, 2, 8, 3, 5]"
      }
    ]
  },
  {
    "company": "Rusjet",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-08 15:25:32",
        "content": "2024-07-08 15:25:32\n Вандал Нестреляй -> 2071074234:\nRusJet\n— Ссылка: HR сама написала\n— ЗП: от 200\n— Вопросы:\n- Вопросы по typescript:\nЧто такое generic?\nКакие есть утилитарные типы?\nУ нас есть функция, и мы ожидаем, что на вход придёт объект с бэкенда. Но так получилось, что бэк прислал string. Может ли ts как-нибудь помочь?\n\n- Вопросы по react:\nСамые популярные хуки в React?\nМожно ли вместо кастомного хука создать обычную функцию?\n\n- Вопросы по RTK Query:\nМы получили get-запросом таблицу User...",
        "full_content": "2024-07-08 15:25:32\n Вандал Нестреляй -> 2071074234:\nRusJet\n— Ссылка: HR сама написала\n— ЗП: от 200\n— Вопросы:\n- Вопросы по typescript:\nЧто такое generic?\nКакие есть утилитарные типы?\nУ нас есть функция, и мы ожидаем, что на вход придёт объект с бэкенда. Но так получилось, что бэк прислал string. Может ли ts как-нибудь помочь?\n\n- Вопросы по react:\nСамые популярные хуки в React?\nМожно ли вместо кастомного хука создать обычную функцию?\n\n- Вопросы по RTK Query:\nМы получили get-запросом таблицу Users. В этой таблице есть функционал удаления, добавления и редактирования записей. Какие есть способы перерисовки таблицы?\n\n- Вопросы по MaterialUI:\nКак изменить дизайн кнопки в MUI?\nКак добавить к кнопке дополнительный функционал? Например, сделать состояние loading.\n\nСталкивался ли с микрофронтендом?\nЗнаком с библиотекой react-hook-form?\n\nУспех: К сожалению, на данный момент не готовы сделать предложение. \nРебята отметили, что ты хорошо справился с вопросами на техническом собеседовании."
      }
    ]
  },
  {
    "company": "Itsports",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-15 11:38:33",
        "content": "2024-11-15 11:38:33\n Егор -> 2071074234:\nКомпания: ITSports\nВакансия: https://hh.ru/vacancy/109771605\nЗП: 180к+\nВопросы:\nВопросы про опыт\n-Как были выстроены процессы в команде\n-Как происходила оценка задач\n\nТех. вопросы:\n-redux\n-for vs forEach\n-свойства position\n-семантика\n-ol vs ul\n-препроцессор\n-как центрировать блок\n-next зачем нужен\n\nЗадачи:\nimport React, { useState } from \"react\";\n\nexport const Form = () => {\n    const [userName, setUserName] = useState('');\n\n    const submit = () => {\n   ...",
        "full_content": "2024-11-15 11:38:33\n Егор -> 2071074234:\nКомпания: ITSports\nВакансия: https://hh.ru/vacancy/109771605\nЗП: 180к+\nВопросы:\nВопросы про опыт\n-Как были выстроены процессы в команде\n-Как происходила оценка задач\n\nТех. вопросы:\n-redux\n-for vs forEach\n-свойства position\n-семантика\n-ol vs ul\n-препроцессор\n-как центрировать блок\n-next зачем нужен\n\nЗадачи:\nimport React, { useState } from \"react\";\n\nexport const Form = () => {\n    const [userName, setUserName] = useState('');\n\n    const submit = () => {\n        console.log('Form submitted with username:', userName);\n    };\n\n    const closeForm = () => {\n        console.log('Form closed');\n    };\n\n    return (\n        <form>\n            <label>\n                Имя:\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={userName}\n                    onChange={(e) => setUserName(e.target.value)}\n                />\n            </label>\n            <button type=\"button\" onClick={submit}>Отправить</button>\n            <button type=\"button\" onClick={closeForm}>Закрыть</button>\n        </form>\n    );\n};\nimport React, { useState, useEffect } from \"react\";\n\n// Имитация запроса к серверу. Просто получаем число асинхронно\nconst fetchRandomNumber = () => Promise.resolve(Math.random());\n\nexport const NumberAndScroll = () => {\n    const [number, setNumber] = useState(0);\n    const [scroll, setScroll] = useState(0);\n\n    useEffect(() => {\n        const fetchNumber = async () => {\n            const randomNumber = await fetchRandomNumber();\n            setNumber(randomNumber);\n        };\n\n        fetchNumber();\n\n        const handleScroll = () => {\n            setScroll(window.scrollY);\n        };\n\n        window.addEventListener(\"scroll\", handleScroll);\n\n        return () => {\n            window.removeEventListener(\"scroll\", handleScroll);\n        };\n    }, []);\n\n    return (\n        <div>\n            <div>Number: {number}</div>\n            <div>Scroll: {scroll}</div>\n        </div>\n    );\n};"
      }
    ]
  },
  {
    "company": "Argo Studio",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-05-28 08:46:50",
        "content": "2025-05-28 08:46:50\n Никита -> 2071074234:\nArgo Studio (Арго студио)\nОткликнулся на HH вакансия\nЗП: запросил от 230\n\nВопросы:\nПо твоему опыту, с какими ограничениями реакта столкнулся? Во что упирается производительность?\nКак решать проблему с SEO оптимизацией реакта?\nРасскажи про virtual dom, как вообще это работает (reconciliation, эвристический алгоритм, сравнение узлов)?\nА к чему может привести вот это поведение, при котором старый дом сразу же удаляется, если элементы разные?(он про эвристи...",
        "full_content": "2025-05-28 08:46:50\n Никита -> 2071074234:\nArgo Studio (Арго студио)\nОткликнулся на HH вакансия\nЗП: запросил от 230\n\nВопросы:\nПо твоему опыту, с какими ограничениями реакта столкнулся? Во что упирается производительность?\nКак решать проблему с SEO оптимизацией реакта?\nРасскажи про virtual dom, как вообще это работает (reconciliation, эвристический алгоритм, сравнение узлов)?\nА к чему может привести вот это поведение, при котором старый дом сразу же удаляется, если элементы разные?(он про эвристический алгоритм).\nРасскажи про key в реакте?\nСпрашивает про глубокую работу браузера, как отрисовывает страницу реакт. Глубже чем Critical Render Path.(архитектура Chromium)\nРасскажи что такое Critical render path?\nvisibility: hidden / display: none отличия. Какие стадии отрисовки страницы затрагивают?\nКакие ещё css правила затрагивают изменение layout?\nИспользовал ли какие-то сложные конструкции Typescript?\nПриведи пример использования дженериков. Как бы ты типизировал компонент какой-нибудь, который может разный тип на вход принимать\nБыл ли опыт настройки линтеров, конфигов?\nБыл ли опыт создания своих npm-пакетов? (им нужен ответ ДА)\nРасспрашивает подробно как редачили npm пакеты, где хранили и тд\nКакими свойствами должен обладать хороший unit-тест? \nЕсть процентная метрика покрытия unit тестами проекта. Как думаешь, насколько эта метрика вообще полезна?\nА в каких случаях вот это покрытие тестами может только навредить разработке? Не ускорить, а замедлить?\nПо какому флоу разработки работали в команде? (Git Flow)\nЗнаешь что такое trunk based development?\nКакая у вас архитектура на проекте? Знаком с FSD?\n\nЗадачи:\n\nУСЛОВИЕ\nТипизируй компонент\nconst Select: FC = (value) =>{}\n\nРЕШЕНИЕ\ntype ModelType = 'single' | 'multi';\n\ntype SelectPropsType<T extends ModelType> = {\n    mode: T;\n    value: T extends 'single' ? string : string[];\n};\n\nconst Select = <T extends ModelType>({ mode, value }: SelectPropsType<T>) => <div>;"
      }
    ]
  },
  {
    "company": "Loyality Labs Hr Тех Скриннинг",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-17 10:55:33",
        "content": "2024-07-17 10:55:33\n Руслан -> 2071074234:\nloyality labs hr тех скриннинг\n—зп: 250к\n— вакансия: https://hh.ru/vacancy/101880669\n— Задачи:\n1.\n\"setTimeout(function timeout() {\n console.log('Таймаут');\n }, 0);\n \n\n let p = new Promise(function(resolve, reject) {\n console.log('Создание промиса');\n resolve();\n });\n \n\n p.then(function(){\n console.log('Обработка промиса');\n });\n \n\n console.log('Конец скрипта');\"\n\n2.\nЧто вернёт выражение?\n\"function add(x: string, y: string): string;\n function add(x: numb...",
        "full_content": "2024-07-17 10:55:33\n Руслан -> 2071074234:\nloyality labs hr тех скриннинг\n—зп: 250к\n— вакансия: https://hh.ru/vacancy/101880669\n— Задачи:\n1.\n\"setTimeout(function timeout() {\n console.log('Таймаут');\n }, 0);\n \n\n let p = new Promise(function(resolve, reject) {\n console.log('Создание промиса');\n resolve();\n });\n \n\n p.then(function(){\n console.log('Обработка промиса');\n });\n \n\n console.log('Конец скрипта');\"\n\n2.\nЧто вернёт выражение?\n\"function add(x: string, y: string): string;\n function add(x: number, y: number): number {\n return x + y;\n }\n \n\n add(’1’,’2’);\"\n\n3.\nКакой цвет будет у элемента?\n\"<div class=\"\"App\"\">\n <div id=\"\"box\"\" className=\"\"box\"\"></div>\n </div>\n \n\n <style>\n #box {\n background-color: green;\n }\n \n\n .App .box {\n background-color: blue;\n }\n \n\n .box {\n width: 50px;\n height: 50px;\n background-color: red;\n }\n </style>\"\n\n4.\n\"Составь интерфейс X, наследующий интерфейс Y, но со всеми необязательными свойствами.\nДобавь в этот интерфейс свойство props в виде объекта, в котором ключом будет один из ключей интерфейса Y, а значением - boolean.\nСоздай дженерик Z, состоящий из динамического поля data. В изначальном интерфейсе должно быть поле с любым типом, использующее этот дженерик\""
      }
    ]
  },
  {
    "company": "Газпром Медиа",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-03 17:44:01",
        "content": "2025-04-03 17:44:01\n Максим Соломыкин -> 2071074234:\nКомпания: Газпром Медиа\nВакансия: написала hr\nЗП: от 250 000\n\nВопросы:\n- подробно про опыт\n- ререндер компонентов\n- когда лучше стор, контекст?\n- Context v redux?\n- область видимости\n- почему появился let, const? \n- зачем область видимости?\n- замыкание?\n- хранение данных в браузере\n- приведение типов\n- 1 + \"1\" - 1 что будет?\n- типизация в js?\n- Typescript плюсы и минусы\n- any в TS?\n- Generics\n- как убрать\\скрыть блок ?\n- display: none vs visib...",
        "full_content": "2025-04-03 17:44:01\n Максим Соломыкин -> 2071074234:\nКомпания: Газпром Медиа\nВакансия: написала hr\nЗП: от 250 000\n\nВопросы:\n- подробно про опыт\n- ререндер компонентов\n- когда лучше стор, контекст?\n- Context v redux?\n- область видимости\n- почему появился let, const? \n- зачем область видимости?\n- замыкание?\n- хранение данных в браузере\n- приведение типов\n- 1 + \"1\" - 1 что будет?\n- типизация в js?\n- Typescript плюсы и минусы\n- any в TS?\n- Generics\n- как убрать\\скрыть блок ?\n- display: none vs visibility: hidden?\n- как убрать блок?\n- inline стили?\n- Специфичность селектора\n- !important\n- семантика\n- реализация поиска на фронте \n- debounce\n- Eventloop \n- Promise\n- способы оптимизации"
      }
    ]
  },
  {
    "company": "Сошиал Системс",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-04 15:49:28",
        "content": "2025-02-04 15:49:28\n Ilya -> 2071074234:\nКомпания Сошиал Системс\nзп: до 230 к\n\nВопросы: \n- расскажи как попал фронтэнд\n- про все компании\n- почему уходил \n- Работал ли с next js, ssr в целом. В чем преимущество ssr, когда использовать.\n- как была выстроена коммуникация с бекэндом на проекте  \n- какой состав команды был \n\nзадач не было\n\nnvidia что-то странное с моим голосом сделала",
        "full_content": "2025-02-04 15:49:28\n Ilya -> 2071074234:\nКомпания Сошиал Системс\nзп: до 230 к\n\nВопросы: \n- расскажи как попал фронтэнд\n- про все компании\n- почему уходил \n- Работал ли с next js, ssr в целом. В чем преимущество ssr, когда использовать.\n- как была выстроена коммуникация с бекэндом на проекте  \n- какой состав команды был \n\nзадач не было\n\nnvidia что-то странное с моим голосом сделала"
      }
    ]
  },
  {
    "company": "Чатап",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-05-26 07:36:30",
        "content": "2025-05-26 07:36:30\n Василий -> 2071074234:\nЧатап\n\n1) какие сложные задачи решал, чем горжусь?\n2) почему выбрал компанию?\n3) с каким стеком работал?\n4) как обучаюсь?\n\nДля выхода на следующий этап просят тестовое сД\nтое веб-приложение для управления списком задач (Todo List) с использованием React и Redux Toolkit. Ниже приведены основные требования к приложению: \n \n### Интерфейс пользователя: \n- Должен быть отображен список задач. \n- Пользователь должен иметь возможность добавлять новые задачи. \n...",
        "full_content": "2025-05-26 07:36:30\n Василий -> 2071074234:\nЧатап\n\n1) какие сложные задачи решал, чем горжусь?\n2) почему выбрал компанию?\n3) с каким стеком работал?\n4) как обучаюсь?\n\nДля выхода на следующий этап просят тестовое сД\nтое веб-приложение для управления списком задач (Todo List) с использованием React и Redux Toolkit. Ниже приведены основные требования к приложению: \n \n### Интерфейс пользователя: \n- Должен быть отображен список задач. \n- Пользователь должен иметь возможность добавлять новые задачи. \n- Пользователь должен иметь возможность отмечать задачи как выполненные. \n- Пользователь должен иметь возможность удалять задачи. \n \n### Реализация: \n- Используйте React для создания пользовательского интерфейса. \n- Для управления состоянием используйте Redux Toolkit. \n- Создайте необходимые actions, reducers и store для работы с задачами. \n- Для стилизации компонентов вы можете использовать любой подход на ваш выбор (например, CSS, Styled Components и т. д.). \n \n### Дополнительные требования (опционально): \n- Добавьте возможность редактирования задач. \n- Добавьте возможность фильтрации задач по статусу (выполненные / невыполненные). \n- Используйте TypeScript для статической типизации приложения. \n- Реализуйте функционал перетаскивания задач для изменения их порядка в списке. \n- Добавьте возможность сохранения задач в локальное хранилище браузера для сохранения данных между сеансами. \n \nПримечание: Пожалуйста, следуйте указанным требованиям и инструкциям для успешного выполнения задания."
      }
    ]
  },
  {
    "company": "F6 Кибербезопасность",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-03 17:44:16",
        "content": "2025-07-03 17:44:16\n Илья -> 2071074234:\nf6 кибербезопасность \nзп 250-300к\n\n1. Способы хранения данных в браузере(session/local storage, coockie)\n2. Особенности работы с IndexedDB\n3. Web Worker: отправка и получение данных\n4. Service Worker\n5. Особенности event loop + requestAnimationFrame / requestIdleCallback\n6. Обмен данными между микрофронтами\ncustom events, window.postMessage, shared state, localStorage, BroadcastChannel, EventBus\n7. Как встроить одну страницу в другую – iframe\n8. Обмен чер...",
        "full_content": "2025-07-03 17:44:16\n Илья -> 2071074234:\nf6 кибербезопасность \nзп 250-300к\n\n1. Способы хранения данных в браузере(session/local storage, coockie)\n2. Особенности работы с IndexedDB\n3. Web Worker: отправка и получение данных\n4. Service Worker\n5. Особенности event loop + requestAnimationFrame / requestIdleCallback\n6. Обмен данными между микрофронтами\ncustom events, window.postMessage, shared state, localStorage, BroadcastChannel, EventBus\n7. Как встроить одну страницу в другую – iframe\n8. Обмен через localStorage\nСобытие storage срабатывает в других вкладках\n9. Подписка на изменения DOM – MutationObserver\n10. Запрет изменений объекта\nObject.freeze(obj) – полная иммутабельность.\nObject.seal(obj) – запрет на добавление/удаление свойств.\nObject.defineProperty(obj, 'key', { writable: false }).\n11. MOBX vs Redux + Proxy  в чём отличие\n12. Для чего нужен symbol\n13. Для чего нужен jsx и как он работает\n14. Зачем нужен babel и что он делает\n15. Для чего нужен стейт менеджер и какую проблему решает\n16. Задача\n// Класс Dispatcher реализует паттерн \"издатель-подписчик\"\nclass Dispatcher {\n  constructor() {\n    // Хранилище всех событий и их обработчиков\n    this.events = {};\n  }\n\n  // Метод для подписки на событие\n  on(eventName, callback) {\n    // Если события ещё нет — создаём массив\n    if (!this.events[eventName]) {\n      this.events[eventName] = [];\n    }\n\n    // Добавляем обработчик в список\n    this.events[eventName].push(callback);\n  }\n\n  // Метод для вызова всех обработчиков события\n  trigger(eventName) {\n    const handlers = this.events[eventName];\n    if (handlers) {\n      handlers.forEach((handler) => handler());\n    }\n  }\n}\n\n// Пример использования\nconst dispatcher = new Dispatcher();\n\n// Подписка на событие 'event_one'\ndispatcher.on('event_one', function () {\n  console.log('message 1');\n});\n\ndispatcher.on('event_one', function () {\n  console.log('message 2');\n});\n\n// Подписка на событие 'event_two'\ndispatcher.on('event_two', function () {\n  console.log('message 3');\n});\n\n// Вызов обработчиков для 'event_one'\ndispatcher.trigger('event_one');\n// Вывод:\n// message 1\n// message 2\n\n// Вызов обработчиков для 'event_two'\ndispatcher.trigger('event_two');\n// Вывод:\n// message 3"
      }
    ]
  },
  {
    "company": "Кредит Европа Банк",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-25 17:05:12",
        "content": "2024-06-25 17:05:12\n Artur -> 2071074234:\nКРЕДИТ ЕВРОПА БАНК\n\n— Ссылка: https://hh.ru/vacancy/102454058?from=negotiations_item&hhtmFrom=negotiations_item\n— ЗП: сказал 200к+, вилку не озвучили\n\nВопросы:\n— какие методы оптимизации знаешь\n— useMemo и useCallback, разница\n—  разница пропсов и стейтов\n— реакт, плюсы и минусы\n— ограничения JSX\n— правила хуков\n— какие свои хуки писал",
        "full_content": "2024-06-25 17:05:12\n Artur -> 2071074234:\nКРЕДИТ ЕВРОПА БАНК\n\n— Ссылка: https://hh.ru/vacancy/102454058?from=negotiations_item&hhtmFrom=negotiations_item\n— ЗП: сказал 200к+, вилку не озвучили\n\nВопросы:\n— какие методы оптимизации знаешь\n— useMemo и useCallback, разница\n—  разница пропсов и стейтов\n— реакт, плюсы и минусы\n— ограничения JSX\n— правила хуков\n— какие свои хуки писал"
      }
    ]
  },
  {
    "company": "ZenCode",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-03-30 06:19:14",
        "content": "2024-03-30 06:19:14\n Владимир -> 2071074234:\n— Название Компании: ZenCode (тех собес)\n— Ссылка на вакансию: hr сама написала, https://saratov.hh.ru/vacancy/74254402\n— ЗП: озвучил от 200к\n— Задачи: теория + задачи\n— Запись на ютуб: https://youtu.be/bzcYQLHcEMc (забыл в начале запись поставить)\n— Успех: 👍 предложили оффер 200к, отказался тк выбрал другое предложение\n— Фидбек: https://docs.google.com/document/d/1kIJfZkcppuLspJsQYDq4mNNNYFEpyFdExyzPJeQA9Iw/edit",
        "full_content": "2024-03-30 06:19:14\n Владимир -> 2071074234:\n— Название Компании: ZenCode (тех собес)\n— Ссылка на вакансию: hr сама написала, https://saratov.hh.ru/vacancy/74254402\n— ЗП: озвучил от 200к\n— Задачи: теория + задачи\n— Запись на ютуб: https://youtu.be/bzcYQLHcEMc (забыл в начале запись поставить)\n— Успех: 👍 предложили оффер 200к, отказался тк выбрал другое предложение\n— Фидбек: https://docs.google.com/document/d/1kIJfZkcppuLspJsQYDq4mNNNYFEpyFdExyzPJeQA9Iw/edit"
      }
    ]
  },
  {
    "company": "Solar",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-25 18:14:42",
        "content": "2024-10-25 18:14:42\n Алмас -> 2071074234:\nКомпания: SOLAR\nЗП: от 300\nвакансия: hr написал\nлайвкодинга не было\nВопросы:\nпро опыт\nпочему fsd?\nчего бы хотелось на новом месте?\nкак были выстроены процессы в команде\nкак хотелось бы работать по скраму или канбану?\nчто такое виртуальный дом в реакте? \nкак сравнивается реальный с виртуальным домом? вопрос со звездочкой типо\nключевые отличия классового от функционального компонента\nрасскажи про хуки\nuseState, в чем ее ключевые особенности (хранить значен...",
        "full_content": "2024-10-25 18:14:42\n Алмас -> 2071074234:\nКомпания: SOLAR\nЗП: от 300\nвакансия: hr написал\nлайвкодинга не было\nВопросы:\nпро опыт\nпочему fsd?\nчего бы хотелось на новом месте?\nкак были выстроены процессы в команде\nкак хотелось бы работать по скраму или канбану?\nчто такое виртуальный дом в реакте? \nкак сравнивается реальный с виртуальным домом? вопрос со звездочкой типо\nключевые отличия классового от функционального компонента\nрасскажи про хуки\nuseState, в чем ее ключевые особенности (хранить значение между рендерами и при изменении значений вызывает перерендер)\nuseMemo\nuseCallback (в каких случаях он не избыточен)\nuseRef\nметоды http  запросов\ncors\nc графкуель работал?\nкуки?\nчто для тебя компания мечты? команда мечты ? что тебя тригернет сразу пойти?"
      }
    ]
  },
  {
    "company": "БКХ Еком",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-08 11:13:10",
        "content": "2025-07-08 11:13:10\n Ivan -> 2071074234:\nНазвание компании: БКХ Еком 08.07\nЗП: +-250\n\nЗадач и стандартной теории не было вообще. Собеседование состояло из холивара на разные темы во фронте и около него.\n\n1. Рассказ про текущее место работы и интересные задачи.\n2. Какие были сложности?\n3. Какие направления в разработке интересны?\n4. Про SSR, SSG, ISR\n5. Как оптимизировать кеширование в ISR если на одном сервере запущено много инстансов одного приложения.\n6. Можешь ли справляться с задачами самост...",
        "full_content": "2025-07-08 11:13:10\n Ivan -> 2071074234:\nНазвание компании: БКХ Еком 08.07\nЗП: +-250\n\nЗадач и стандартной теории не было вообще. Собеседование состояло из холивара на разные темы во фронте и около него.\n\n1. Рассказ про текущее место работы и интересные задачи.\n2. Какие были сложности?\n3. Какие направления в разработке интересны?\n4. Про SSR, SSG, ISR\n5. Как оптимизировать кеширование в ISR если на одном сервере запущено много инстансов одного приложения.\n6. Можешь ли справляться с задачами самостоятельно? \n7. Какую роль в команде занимал?\n8. Нетипичные задачи, где пришлось что-то специфичное писать.\n9. Vite vs Webpack vs Turbopack\n10. node vs deno vs bun\n11. eslint/prettier vs biome"
      }
    ]
  },
  {
    "company": "Ниу Вшэ",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-04-11 19:19:29",
        "content": "2024-04-11 19:19:29\n Artem -> 2071074234:\nНазвание компании: НИУ ВШЭ\nСсылка на вакансию: https://t.me/js_rabota/363\nЗП: 170-250\nЗадачи: только теория. \n- оптимизация приложения при больших данных \n- замыкания \n- работа с DOM\n- какие алгоритмы знаешь\n- биг О. Что такое, как считается сложность\n- устная задача: даны три массива неупорядоченных чисел. Вывести числа, которые есть во всех трех массивах. Рассказать, как решить и какая будет сложность.\nПо реакту и ТС ни одного вопроса. \nУспех собеса: ❔",
        "full_content": "2024-04-11 19:19:29\n Artem -> 2071074234:\nНазвание компании: НИУ ВШЭ\nСсылка на вакансию: https://t.me/js_rabota/363\nЗП: 170-250\nЗадачи: только теория. \n- оптимизация приложения при больших данных \n- замыкания \n- работа с DOM\n- какие алгоритмы знаешь\n- биг О. Что такое, как считается сложность\n- устная задача: даны три массива неупорядоченных чисел. Вывести числа, которые есть во всех трех массивах. Рассказать, как решить и какая будет сложность.\nПо реакту и ТС ни одного вопроса. \nУспех собеса: ❔"
      }
    ]
  },
  {
    "company": "Sl Soft",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-31 10:16:32",
        "content": "2024-10-31 10:16:32\n Гладких Александр -> 2071074234:\nКомпания SL Soft \nВакансия https://hh.ru/vacancy/108711305\nЗП не обсуждали\nВопросы\n- расскажи за опыт\n- расскажи про интересные задачи которые приходилось делать\n- почему меняешь место работы\n- ES6 какие штуки привнес про spred и rest\n- что такое DOM\n- Для чего нужен Redux\n- Флоу Redux\n- Какие хуки из Redux используешь\n- Как реализованна асинхронность в JS (колбэки промисы эвент луп)\n- Promise.all\n- Какие хранилища есть в брузере\n- Как React ...",
        "full_content": "2024-10-31 10:16:32\n Гладких Александр -> 2071074234:\nКомпания SL Soft \nВакансия https://hh.ru/vacancy/108711305\nЗП не обсуждали\nВопросы\n- расскажи за опыт\n- расскажи про интересные задачи которые приходилось делать\n- почему меняешь место работы\n- ES6 какие штуки привнес про spred и rest\n- что такое DOM\n- Для чего нужен Redux\n- Флоу Redux\n- Какие хуки из Redux используешь\n- Как реализованна асинхронность в JS (колбэки промисы эвент луп)\n- Promise.all\n- Какие хранилища есть в брузере\n- Как React взаимодействует с DOM\n- useEffect зачем нужен (рассказывай все что знаешь)\n- useState зачем, что можем передать в качестве аргумента\n- Как реализованна авторизация на проекте\n- Был ли опыт настройки проекта (линтеры сборщики выбор архитектуры и тд)"
      }
    ]
  },
  {
    "company": "Avs Consulting",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-20 10:16:06",
        "content": "2024-11-20 10:16:06\n zarina -> 2071074234:\nкомпания avs consulting\n\n180-220k\n\nвакансия https://tula.hh.ru/vacancy/110958893?hhtmFrom=employer_vacancies\n\nвопросы:\nhttp запросы\npreflight запрос(options)\nrest api методы\nооп\nlocalstorage sessionstorage cookie indexedDb\nкорс\nзаголовки корс, куки\n\nlet const\nпримитивные и ссылочные типы данных разница\nconst a = { test: 1};\na.test = 2;\nconst a = []:\na.push(1);\n\nFunction declaration, Expression, стрелочные \nbind call и apply\nthis\nзамыкание\n\nпромис, асинк...",
        "full_content": "2024-11-20 10:16:06\n zarina -> 2071074234:\nкомпания avs consulting\n\n180-220k\n\nвакансия https://tula.hh.ru/vacancy/110958893?hhtmFrom=employer_vacancies\n\nвопросы:\nhttp запросы\npreflight запрос(options)\nrest api методы\nооп\nlocalstorage sessionstorage cookie indexedDb\nкорс\nзаголовки корс, куки\n\nlet const\nпримитивные и ссылочные типы данных разница\nconst a = { test: 1};\na.test = 2;\nconst a = []:\na.push(1);\n\nFunction declaration, Expression, стрелочные \nbind call и apply\nthis\nзамыкание\n\nпромис, асинк эвэйт\nобработка ошибок\n\nтайпскрипт плюсы минусы\nинтерфейс типы разница\nутилити тайпс\nany unknown never\nGeneric"
      }
    ]
  },
  {
    "company": "Nexign",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-20 17:31:28",
        "content": "2025-06-20 17:31:28\n Ivan B -> 2071074234:\nКомпания Nexign (дочка мегафона) \nзапросил 270к\nhr нашла по резюме\nВопросы:\n1. Рассказ о себе. предыдущее место работы\n2. На каких проектах работал, чем приходилось заниматься\n3. С каким стеком работал.\n\nТеория: \n1 Основные типы данных\n2 Что такое стрелочные функции, их особенности\n3 Фазы распространения событий(Погружение, Фаза цели, Всплытие)\n\n/** \n  * 1- В каком порядке выведтся console.log (div2, div1)\n  * 2- как сделать чтоб вывелся сперва div1 (до...",
        "full_content": "2025-06-20 17:31:28\n Ivan B -> 2071074234:\nКомпания Nexign (дочка мегафона) \nзапросил 270к\nhr нашла по резюме\nВопросы:\n1. Рассказ о себе. предыдущее место работы\n2. На каких проектах работал, чем приходилось заниматься\n3. С каким стеком работал.\n\nТеория: \n1 Основные типы данных\n2 Что такое стрелочные функции, их особенности\n3 Фазы распространения событий(Погружение, Фаза цели, Всплытие)\n\n/** \n  * 1- В каком порядке выведтся console.log (div2, div1)\n  * 2- как сделать чтоб вывелся сперва div1 (добавить {capture: true} для div1)\n  * 3- Как сделать чтоб вывелся только div2 (event.stopPropagation)\n*/\n\n<div id=\"div1\" style=\"background: red;\">\n    div1\n    <div id=\"div2\" style=\"background: green;\">\n        div2\n    </div>\n</div>\n\ndocument.getElementById('div1').addEventListener('click', () => console.log('div1'))\ndocument.getElementById('div2').addEventListener('click', () => console.log('div2'))\n\n4  Расскажи про замыкание, что это такое, где используется (трот, дебаунс)\n// Реализовать функцию sum, чтоб можно было вызвать sum(1)(2) = 3\n\nfunction sum(a) {\n  return function(b) {\n    return a + b;\n  };\n}\n\n\n5 Расскажи что такое промисы, для чего нужны\n\n// Реализовать метод delay(ms)\n\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n6 Виды дизайнов (Адаптивный, Отзывчивый), в чем разница\n7 Расскажи про flex\n//как сделать так, что бы div'ы внутри .top расположились равномерно в родительском блоке горизонтально и были отцентрованы(по вертикали)\n\n<div class=\"top\">\n    <div></div>\n    <div></div>\n    <div></div>\n</div>\n\n<style>\n.top {\n        display: flex;\n        justify-content: space-around;\n        align-items: center;\n    }\n</style>\n\n8 Что такое GET/POST запросы, их отличии \n9 Какие данные и в каком объеме можно передавать через GET/POST\n10 Как происходи кэширование, виды кэширование (В брацзере, на сервере)\n11 Как управлять кэшем (спомощью заголовков Cache-Control)\n12 Что такое Websocket, для чего нужен\n13 Как называются приложения, построенные на websoccket'ах\n14 Что такое REST, его принципы\n\n15 Задача по Реакту\n// Когда будет вызываться useEffect (всегда при рендере компонента, нет массива зависимостей)\n// Как сделать что вызывался только при монтировании компонента (добавить пустой массив зависимостей)\n\nuseEffect(() => {\n  console.log('1');\n})\n\n16 Как сделать, чтоб useEffect обрабатывался при размонтировании компонента (cleanup функция)\n17 Что такое мемоизация, для чего нужно, примеры (React.memo, useMemo, useCallback)\n18 Что такое TypeScrip, какие проблемы решает, плюсы и минусы\n19 Что такое Дженерики, для чего нужны\n// Типизируй функцию\n\nconst getLength = (something: any) => {\n  return something.length;\n};\n\n// Ответ\n// const getLength = <T extends { length: number }>(something: T): number => {\n//   return something.length;\n// };\n\n20 Для чего нужны файлы package.json и package.lock.json\n21 Какая между ними разница\n22 Каким пакетным менеджером пользовался"
      }
    ]
  },
  {
    "company": "Portalbilet",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-09-24 16:26:06",
        "content": "2024-09-24 16:26:06\n SQwerty -> 2071074234:\nPortalBilet\nСсылка на вакансию: написала hr\nЗП: 200k\nВопросы:\nВопросы по опыту. Какими задачами гордишься? Спрашивал про множество технологий, с какими работал.\nКакие типы есть в js? В чем особенность стрелочной функции? \nБаза по Promise, EventLoop, async/await. Методы массивов.",
        "full_content": "2024-09-24 16:26:06\n SQwerty -> 2071074234:\nPortalBilet\nСсылка на вакансию: написала hr\nЗП: 200k\nВопросы:\nВопросы по опыту. Какими задачами гордишься? Спрашивал про множество технологий, с какими работал.\nКакие типы есть в js? В чем особенность стрелочной функции? \nБаза по Promise, EventLoop, async/await. Методы массивов."
      }
    ]
  },
  {
    "company": "Компания Абк",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-24 09:52:11",
        "content": "2025-04-24 09:52:11\n Ostrov Ostrov -> 2071074234:\nКомпания АБК (дочка сбера)\n💰 Зп - 250\n📢 Вакансия - https://hh.ru/vacancy/119021200\n❓Вопросы как здесь - https://t.me/c/2071074234/489/117755",
        "full_content": "2025-04-24 09:52:11\n Ostrov Ostrov -> 2071074234:\nКомпания АБК (дочка сбера)\n💰 Зп - 250\n📢 Вакансия - https://hh.ru/vacancy/119021200\n❓Вопросы как здесь - https://t.me/c/2071074234/489/117755"
      }
    ]
  },
  {
    "company": "Noname",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-18 06:18:05",
        "content": "2025-03-18 06:18:05\n Сергей -> 2071074234:\nКомпания: NOName(Typescript разработчик)\nкомпания занимается разработкой виджета для треканья времени, название под НДА\n\nЗП:350+\nРезультат:оффер\n\nВопросы:\nКак скрыть элементы для рендера используя виртуализацию? visible:hidden\nЧто такое eventLoop\nЧто такое замыкание\nСпецифичность селекторов\nРасскажи самые сложны задачи на проекте\nСтадии рендера страницы\nРасскажи все что знаешь про тС, его плюсы и минусы\nразличие типов и интерфейсов\n\nФидбек: собес полный...",
        "full_content": "2025-03-18 06:18:05\n Сергей -> 2071074234:\nКомпания: NOName(Typescript разработчик)\nкомпания занимается разработкой виджета для треканья времени, название под НДА\n\nЗП:350+\nРезультат:оффер\n\nВопросы:\nКак скрыть элементы для рендера используя виртуализацию? visible:hidden\nЧто такое eventLoop\nЧто такое замыкание\nСпецифичность селекторов\nРасскажи самые сложны задачи на проекте\nСтадии рендера страницы\nРасскажи все что знаешь про тС, его плюсы и минусы\nразличие типов и интерфейсов\n\nФидбек: собес полный кал, 30 минут длился, собесил скуф какой-то, в итоге я им отказал, т к все там скуфяры)"
      }
    ]
  },
  {
    "company": "Нильсен",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-01 07:59:57",
        "content": "2025-07-01 07:59:57\n Никита -> 2071074234:\nНильсен\nЗП: 200 с ежеквартальными премиями\n\nГде работаешь, почему решил уйти?\nПро опыт спрашивала\nБыл ли опыт разработки без дизайн-макета? Как ты к этому относишься сейчас?\nПроявлял ли инициативу при распределении задач на спринт?\nПредлагал ли свою задачу, свои решения внедрять в проект?\nКак ты будешь действовать, если не можешь решить задачу?\nКак ты относился к критике во время код-ревью?\nРаботал ли с легаси кодом?\nКак бы ты переписывал легаси код на ...",
        "full_content": "2025-07-01 07:59:57\n Никита -> 2071074234:\nНильсен\nЗП: 200 с ежеквартальными премиями\n\nГде работаешь, почему решил уйти?\nПро опыт спрашивала\nБыл ли опыт разработки без дизайн-макета? Как ты к этому относишься сейчас?\nПроявлял ли инициативу при распределении задач на спринт?\nПредлагал ли свою задачу, свои решения внедрять в проект?\nКак ты будешь действовать, если не можешь решить задачу?\nКак ты относился к критике во время код-ревью?\nРаботал ли с легаси кодом?\nКак бы ты переписывал легаси код на реакт?\nЧто для тебя хороший код?\nПисали тесты?\nКак ты видишь своё будущее развитие как разработчика? Хочешь двигаться вертикально по должности, или уйти в другую сферу?\nКак обучаешься в свободное время, какие ресурсы используешь?\nЧто бы ты не хотел видеть на новом месте работы, что тебя демотивирует?\nТы берешь задачу в работу, с какого момента ты перестаёшь за неё отвечать, то есть ответственность за неё уже не на тебе?\n\nЗадач не было\n\nP.S. Ищут разраба для работы с легаси кодом, разработка своего приложения по скриншотам, то есть не будет макета, всё на глаз. Есть переработки, т.к. быстрый темп разработки"
      }
    ]
  },
  {
    "company": "- Знакомство С Менеджерами",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-17 09:07:43",
        "content": "2024-10-17 09:07:43\n Михаил -> 2071074234:\n2 этап - знакомство с менеджерами\nпо факту HR'ы просто час рассказывали что и как у них - ничего принципиально нового нет, корпоративы/техника/пересмотр зп и т.д.\nсоц пакет и всякие плюшки на достаточно высоком уровне\nвыкладывать запись не вижу смысла",
        "full_content": "2024-10-17 09:07:43\n Михаил -> 2071074234:\n2 этап - знакомство с менеджерами\nпо факту HR'ы просто час рассказывали что и как у них - ничего принципиально нового нет, корпоративы/техника/пересмотр зп и т.д.\nсоц пакет и всякие плюшки на достаточно высоком уровне\nвыкладывать запись не вижу смысла"
      }
    ]
  },
  {
    "company": "Продамус",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-08-24 13:32:27",
        "content": "2024-08-24 13:32:27\n Kirill Anikeev -> 2071074234:\nназвание компании: Продамус\nссылка: https://hh.ru/vacancy/105798067\nзп: 270\nуспех: жду фитбек\nВопросы:\nмного вопросов про опыт по типу, а с этим работал, расскажи подробнее\nчто такое nginx, пригципы его работы\nсто такое cdn\nрассказать про процессы диплоя проекта, про опыт\nрассказать про опыт с микрофронтами\nспособы оптимизации \nтри шейкинг\nsourse map\nчто такое iframe\nЗадачи:\n1) заменить ref на state\n\nimport React, { useState } from \"react\";\n\nexp...",
        "full_content": "2024-08-24 13:32:27\n Kirill Anikeev -> 2071074234:\nназвание компании: Продамус\nссылка: https://hh.ru/vacancy/105798067\nзп: 270\nуспех: жду фитбек\nВопросы:\nмного вопросов про опыт по типу, а с этим работал, расскажи подробнее\nчто такое nginx, пригципы его работы\nсто такое cdn\nрассказать про процессы диплоя проекта, про опыт\nрассказать про опыт с микрофронтами\nспособы оптимизации \nтри шейкинг\nsourse map\nчто такое iframe\nЗадачи:\n1) заменить ref на state\n\nimport React, { useState } from \"react\";\n\nexport const Main = () => {\n  const [value, setValue] = useState(Math.random());\n\n  const handeChangeValue = () => {\n    setValue(Math.random());\n  };\n\n  return (\n    <section>\n      <Child value={value} />\n      <button type=\"button\" onClick={handeChangeValue}>\n        Btn\n      </button>\n    </section>\n  );\n};\n\nconst Child = ({ value }) => {\n  return <p>{value}</p>;\n};\n2) задачи на ts типизировать компонент\n// Объявляем интерфейс для smartCaptcha\ninterface SmartCaptcha {\n  execute: () => void;\n  // Другие методы и свойства, если они есть\n}\n\n// Расширяем глобальный интерфейс Window\ndeclare global {\n  interface Window {\n    smartCaptcha: SmartCaptcha;\n  }\n}\n\nfunction App() {\n  const handleSignUp = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    // Теперь TypeScript знает о существовании window.smartCaptcha\n    window.smartCaptcha.execute();\n  };\n\n  return (\n    <form className=\"container\" onSubmit={handleSignUp}>\n      <input placeholder=\"Email...\" disabled />\n      <input placeholder=\"Pass...\" disabled />\n      <button type=\"submit\">Sign up!</button>\n    </form>\n  );\n}\n\nexport default App;\n3) типизировать ошибку \nexport type AppProps = {\n  error: unknown;\n};\n\nexport default function App({ error }: AppProps) {\n  // Сужение типа, проверяем, является ли error объектом с нужными свойствами\n  if (typeof error === \"object\" && error !== null) {\n    const errorObj = error as { code?: number; message?: string }; // делаем приведение типов\n\n    if (errorObj.code === 404) {\n      return <p>Not found!</p>;\n    }\n\n    return <p>{errorObj.message || \"Unknown error\"}</p>; // выводим сообщение об ошибке или \"Unknown error\"\n  }\n\n  return <p>Unknown error</p>; // если error не объект\n}"
      }
    ]
  },
  {
    "company": "Альдера Софт",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-09 19:17:01",
        "content": "2025-03-09 19:17:01\n Артем -> 2071074234:\nКомпания: Альдера СОФТ\nзп 180К\n\nВопросы:\nSpread vs rest\nметоды массива какие знаешь\nОсобенности SSR\nSOLID -",
        "full_content": "2025-03-09 19:17:01\n Артем -> 2071074234:\nКомпания: Альдера СОФТ\nзп 180К\n\nВопросы:\nSpread vs rest\nметоды массива какие знаешь\nОсобенности SSR\nSOLID -"
      }
    ]
  },
  {
    "company": "Детский Мир",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-01-10 05:10:09",
        "content": "2024-01-10 05:10:09\n Daniil Max -> 2071074234:\n— Название компании: Детский Мир\n— Ссылка на вакансию: утеряна\n— ЗП: 270К\n— Задачи: теория + лайвкодинг\n— Запись на ютуб: https://youtu.be/T0u95rYWheY\n— Комментарий: классный собес с классными техническими вопросами.\n— Успех собеса: ❌\n— Фитбек о собесе от HR: не было \n\n#детский_мир #middle",
        "full_content": "2024-01-10 05:10:09\n Daniil Max -> 2071074234:\n— Название компании: Детский Мир\n— Ссылка на вакансию: утеряна\n— ЗП: 270К\n— Задачи: теория + лайвкодинг\n— Запись на ютуб: https://youtu.be/T0u95rYWheY\n— Комментарий: классный собес с классными техническими вопросами.\n— Успех собеса: ❌\n— Фитбек о собесе от HR: не было \n\n#детский_мир #middle"
      }
    ]
  },
  {
    "company": "Mobile Up Mts Тех Скриннинг",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-08-11 17:39:03",
        "content": "2024-08-11 17:39:03\n Руслан -> 2071074234:\nMobile up mts тех скриннинг\n— зп: 260к\n— вакансия: hr написала\n— вопросы:\n1. big o notation\n2. способы центрирования элементов\n3. теги семантической верстки\n4. почему у примитивов в s есть методы\n5. интерфейсы vs типы\n6. как работают зависимости в useEffect\n7. зачем возвращать новый стор в редакс",
        "full_content": "2024-08-11 17:39:03\n Руслан -> 2071074234:\nMobile up mts тех скриннинг\n— зп: 260к\n— вакансия: hr написала\n— вопросы:\n1. big o notation\n2. способы центрирования элементов\n3. теги семантической верстки\n4. почему у примитивов в s есть методы\n5. интерфейсы vs типы\n6. как работают зависимости в useEffect\n7. зачем возвращать новый стор в редакс"
      }
    ]
  },
  {
    "company": "Мостранспорт",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-05 12:39:04",
        "content": "2025-03-05 12:39:04\n Vsevolod -> 2071074234:\nМосТранспорт\nhr написала\nЗП: 200к\n\nВопросы:\n1. Прописываем сайт в адресную строку, что дальше происходит\n2.  Какие есть свойства position в CSS, как сделать так чтобы элемент со свойством absolute отцентровался? растянуть на всю ширину родительского блока?\n3. Отличие CSR и SSR\n4. Гидрация что такое\n5. Дали большой макет дизайна, как ты бы спроектировал веб-приложение по нему\n6. FSD что такое, где лучше соединить бэк и фронт (entities?)\n\nЗадачи: \nJS:\nc...",
        "full_content": "2025-03-05 12:39:04\n Vsevolod -> 2071074234:\nМосТранспорт\nhr написала\nЗП: 200к\n\nВопросы:\n1. Прописываем сайт в адресную строку, что дальше происходит\n2.  Какие есть свойства position в CSS, как сделать так чтобы элемент со свойством absolute отцентровался? растянуть на всю ширину родительского блока?\n3. Отличие CSR и SSR\n4. Гидрация что такое\n5. Дали большой макет дизайна, как ты бы спроектировал веб-приложение по нему\n6. FSD что такое, где лучше соединить бэк и фронт (entities?)\n\nЗадачи: \nJS:\nconst foo = async (data: any, timeout: number) => {\n  // Создаем промис, который выполнится через timeout миллисекунд\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(data); // Возвращаем те же данные, что получили\n    }, timeout);\n  });\n};\nReact:\n// В файле App.tsx\n\nexport default function App() {\n  // Используем useState для управления списком элементов\n  const [elems, setElems] = useState(generatedElems);\n  // Состояние для toggle (показать/скрыть список)\n  const [showList, setShowList] = useState(true);\n  \n  // Функция для удаления элемента\n  const handleDelete = (idToDelete) => {\n    setElems(elems.filter(id => id !== idToDelete));\n  };\n  \n  return (\n    <div className=\"App\">\n      <button onClick={() => setShowList(!showList)}>toggle</button>\n      {showList && <List elems={elems} onDelete={handleDelete} />}\n    </div>\n  );\n}\n\n// Обновляем List компонент для передачи функции удаления\nfunction List({ elems, onDelete }) {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 16,\n        overflow: \"hidden\",\n      }}\n    >\n      {elems.map((id) => (\n        <ListElem key={id} id={id} onDelete={() => onDelete(id)} />\n      ))}\n    </div>\n  );\n}\n\n// Обновляем ListElem для обработки события нажатия на кнопку\nfunction ListElem({ id, onDelete }) {\n  return (\n    <div style={{ display: \"flex\", gap: 8 }}>\n      <div>{`${id}`}</div>\n      <button onClick={onDelete}>Удалить</button>\n    </div>\n  );\n}\nРеализовать toggle для развертывания и скрытия списка, реализовать кнопку delete чтобы удалять элементы списка"
      }
    ]
  },
  {
    "company": "Евротехкилмат",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-11 04:36:44",
        "content": "2024-10-11 04:36:44\n Stepan Ch. -> 2071074234:\nКомпания: ЕВРОТЕХКИЛМАТ\nВакансия: hr сама написала\nЗп: 280 net\nВОпросы:\n1. useMemo, useCallback\n2. оптимизация проекта\n3. Reconcellation\n4. Virtual DOM\n5. Интерспетор что это?\n6. Расскажи подробно про Redux\n7. Action?\n8. middlware\n\nfunction reformatDate(dateStr, currentFormat, targetFormat) {\n    // Создаем объект для хранения позиций дня, месяца и года\n    const formatPositions = {\n        'dd': 0,\n        'mm': 1,\n        'yyyy': 2\n    };\n\n    // ...",
        "full_content": "2024-10-11 04:36:44\n Stepan Ch. -> 2071074234:\nКомпания: ЕВРОТЕХКИЛМАТ\nВакансия: hr сама написала\nЗп: 280 net\nВОпросы:\n1. useMemo, useCallback\n2. оптимизация проекта\n3. Reconcellation\n4. Virtual DOM\n5. Интерспетор что это?\n6. Расскажи подробно про Redux\n7. Action?\n8. middlware\n\nfunction reformatDate(dateStr, currentFormat, targetFormat) {\n    // Создаем объект для хранения позиций дня, месяца и года\n    const formatPositions = {\n        'dd': 0,\n        'mm': 1,\n        'yyyy': 2\n    };\n\n    // Разделяем текущий формат и строку даты\n    const currentFormatParts = currentFormat.split(/[^a-zA-Z]/);\n    const dateParts = dateStr.split(/\\D/);\n\n    // Создаем объект для хранения значений дня, месяца и года\n    const dateValues = {};\n    currentFormatParts.forEach((part, index) => {\n        dateValues[part] = dateParts[index];\n    });\n\n    // Разделяем целевой формат\n    const targetFormatParts = targetFormat.split(/[^a-zA-Z]/);\n\n    // Формируем новую строку даты в целевом формате\n    const newDateParts = targetFormatParts.map(part => dateValues[part]);\n\n    // Определяем новый разделитель из целевого формата\n    const newSeparator = targetFormat.match(/[^a-zA-Z]/)[0];\n\n    // Возвращаем новую строку даты\n    return newDateParts.join(newSeparator);\n}\n\nconst str = '03.10.2024';\nconst currentFormat = 'dd.mm.yyyy';\nconst targetFormat = 'yyyy-mm-dd';\nconst newDateStr = reformatDate(str, currentFormat, targetFormat);\nconsole.log(newDateStr); // Вывод: 2024-10-03"
      }
    ]
  },
  {
    "company": "Start X",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-24 05:02:20",
        "content": "2024-07-24 05:02:20\n Ярослав Мудрый -> 2071074234:\n- Start X\n- ссылка: https://tver.hh.ru/vacancy/103611855?hhtmFrom=employer_vacancies\n- зп: 250+\n- вопросы:\n- intersection/mutation observer\n- Proxy объект\n- Service worker\n- Web worker\n- как улучшить производительность (lighthouse)",
        "full_content": "2024-07-24 05:02:20\n Ярослав Мудрый -> 2071074234:\n- Start X\n- ссылка: https://tver.hh.ru/vacancy/103611855?hhtmFrom=employer_vacancies\n- зп: 250+\n- вопросы:\n- intersection/mutation observer\n- Proxy объект\n- Service worker\n- Web worker\n- как улучшить производительность (lighthouse)"
      }
    ]
  },
  {
    "company": "Kvando",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-31 15:38:47",
        "content": "2025-01-31 15:38:47\n Ivan -> 2071074234:\nКомпания: kvando\nВакансия : написал he\nЗП: 150\nВопросы :\nОпыт работы\nКакие были задачи, интересные задачи\nSOLID KISS DRY\nHTTP HTTPS\nВиды ответов (100, 200, 300, 400, 500)\nРазница стрелочной и обычной функции\nПро контекст\nProto и prototype\nInterface и type\nGeneric\nПринципы redux\nПро реакт рассказать\nVirtual dom\n\nЗадача:\nНаписать функцию палиндром, которая принимает на вход строку и проверяет её\nС галочкой попробовать реализовать без использования метода ма...",
        "full_content": "2025-01-31 15:38:47\n Ivan -> 2071074234:\nКомпания: kvando\nВакансия : написал he\nЗП: 150\nВопросы :\nОпыт работы\nКакие были задачи, интересные задачи\nSOLID KISS DRY\nHTTP HTTPS\nВиды ответов (100, 200, 300, 400, 500)\nРазница стрелочной и обычной функции\nПро контекст\nProto и prototype\nInterface и type\nGeneric\nПринципы redux\nПро реакт рассказать\nVirtual dom\n\nЗадача:\nНаписать функцию палиндром, которая принимает на вход строку и проверяет её\nС галочкой попробовать реализовать без использования метода массивов\nfunction isPalindrome(str) {\n    // Преобразуем слово в нижний регистр для устранения влияния регистра\n    const cleanedWord = str.toLowerCase();\n    // Сравниваем слово с его перевёрнутой версией\n    return cleanedWord === cleanedWord.split('').reverse().join('');\n}"
      }
    ]
  },
  {
    "company": "Орнитех",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-29 12:02:09",
        "content": "2024-10-29 12:02:09\n Qimm -> 2071074234:\nКомпания: ОрниТех\nВакансия: по ссылке недоступна, в архиве\nВопросы:\n1)  Имплементация TypeScript\n2)  Для чего резать на slice\n3)  DevServer\n4)  CORS\n5)  http, https, websoket (разница)\n6)  Что обеспечивает сертификат\n7)  ErrorBoundry\n8)  Жизненный цикл компонента\n9)  UseEffect \n10)  UseState, как вернуться к предыдущему значению\n11)  useRef/ forwardRef\n12)  redux – для чего\n13)  useMemo, useCallback, React.Memo\n14)   eventLoop(порядок микро, макро)\n15)  П...",
        "full_content": "2024-10-29 12:02:09\n Qimm -> 2071074234:\nКомпания: ОрниТех\nВакансия: по ссылке недоступна, в архиве\nВопросы:\n1)  Имплементация TypeScript\n2)  Для чего резать на slice\n3)  DevServer\n4)  CORS\n5)  http, https, websoket (разница)\n6)  Что обеспечивает сертификат\n7)  ErrorBoundry\n8)  Жизненный цикл компонента\n9)  UseEffect \n10)  UseState, как вернуться к предыдущему значению\n11)  useRef/ forwardRef\n12)  redux – для чего\n13)  useMemo, useCallback, React.Memo\n14)   eventLoop(порядок микро, макро)\n15)  Поверхностное копирование\n16)  Спред оператор. Деструктуризация\n17)  React.createContext()\n18)  Promise.allSettles"
      }
    ]
  },
  {
    "company": "Геоюна",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-25 18:27:19",
        "content": "2025-02-25 18:27:19\n Артем -> 2071074234:\nКомпания: Геоюна\nЗп: до 180к\n\nВопросы:\nПоговорили детально про опыт\nВ каких случаях можно обойтись useCotext без Redux\nЗадача:\n\nОтрефакторить react компонет\n\nРешение:\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport sendData from \"data\";\nimport bigComputations from \"bigComputations\";\n\nimport webp from \"./car.webp\";\nimport gif from \"./car.gif\";\nimport png from \"./car.png\";\n\nconst ReviewCarousel = (props) => {\n  const [data, setData...",
        "full_content": "2025-02-25 18:27:19\n Артем -> 2071074234:\nКомпания: Геоюна\nЗп: до 180к\n\nВопросы:\nПоговорили детально про опыт\nВ каких случаях можно обойтись useCotext без Redux\nЗадача:\n\nОтрефакторить react компонет\n\nРешение:\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport sendData from \"data\";\nimport bigComputations from \"bigComputations\";\n\nimport webp from \"./car.webp\";\nimport gif from \"./car.gif\";\nimport png from \"./car.png\";\n\nconst ReviewCarousel = (props) => {\n  const [data, setData] = useState(bigComputations(props.argument));\n  const [items] = useState([{ id: 1 }, { id: 2 }, { id: 3 }]);\n\n  useEffect(() => {\n    const handleClick = () => {\n      setData((prevData) => prevData * 5);\n    };\n\n    document.addEventListener(\"click\", handleClick);\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, []);\n\n  const handleClick = useCallback((id) => {\n    sendData(data, id);\n  }, [data]);\n\n  return (\n    <>\n      {items.map((item) => (\n        <img\n          key={item.id}\n          src={webp}\n          alt={`Item ${item.id}`}\n          onClick={() => handleClick(item.id)}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default ReviewCarousel;"
      }
    ]
  },
  {
    "company": "Boomerang",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-05-23 14:03:03",
        "content": "2025-05-23 14:03:03\n Kirill -> 2071074234:\nBoomerang\nhr написала \nзп-не обсуждали\n1) какие виды display знаешь\n2) что такое display:inline-block\n3) какие position бывают \n4) чем отличается sticky от fixex\n5) чем отличается type от interface\n6)что такое gereci\n7) как сделать так, чтобы gereic принимал объект, но чтобы у объекта была обязательно поле id (тут он про extend хотел услышать)\n8) что такое type guard\n9)что такое is \n10) как сделать ключ в интерфейсе не обязательным \n11)  key: string  | ...",
        "full_content": "2025-05-23 14:03:03\n Kirill -> 2071074234:\nBoomerang\nhr написала \nзп-не обсуждали\n1) какие виды display знаешь\n2) что такое display:inline-block\n3) какие position бывают \n4) чем отличается sticky от fixex\n5) чем отличается type от interface\n6)что такое gereci\n7) как сделать так, чтобы gereic принимал объект, но чтобы у объекта была обязательно поле id (тут он про extend хотел услышать)\n8) что такое type guard\n9)что такое is \n10) как сделать ключ в интерфейсе не обязательным \n11)  key: string  | undefined и key?: string | undefined это одно и то же \n12) есть компонент, у него есть стейт и вложенные компоненты, как получить в последнем компоненте самый верхний стейт (тут про контекст и редакс хотел услышать)\n13) useCallback, useMemo для чего\n14) какие есть способы получить html элемент (хотел услышать, что у элемента в реф передавать колбэк)\n15) какие есть способы перерендерить компонент \n16) как с нуля сделать проект с 5 роутами, какой стек, архитектура и как ты будешь делать"
      }
    ]
  },
  {
    "company": "Quantum Art",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-03-28 18:36:01",
        "content": "2024-03-28 18:36:01\n RL -> 2071074234:\n— Название компании: Quantum Art\n— Ссылка на вакансию: https://spb.hh.ru/vacancy/94093842?hhtmFrom=resume\n— ЗП: от 180\n— Уровень собеса: хороший собес с интересными вопросами, но не для первой работы\n— Важность собеса: практика\n— Задачи: теория + лайвкодинг\n***\nflexbox & grid\nселекторы >, +, ~\nem, rem\nмедиазапросы\nБЭМ \nмодульные стили, css-in-js\nкак подключить шрифты\nновые фичи CSS какие знаешь\nТипы данных в js\nработала ли с symbol и bigInt\nоткуда пустой об...",
        "full_content": "2024-03-28 18:36:01\n RL -> 2071074234:\n— Название компании: Quantum Art\n— Ссылка на вакансию: https://spb.hh.ru/vacancy/94093842?hhtmFrom=resume\n— ЗП: от 180\n— Уровень собеса: хороший собес с интересными вопросами, но не для первой работы\n— Важность собеса: практика\n— Задачи: теория + лайвкодинг\n***\nflexbox & grid\nселекторы >, +, ~\nem, rem\nмедиазапросы\nБЭМ \nмодульные стили, css-in-js\nкак подключить шрифты\nновые фичи CSS какие знаешь\nТипы данных в js\nработала ли с symbol и bigInt\nоткуда пустой объект берет метод toString в строке кода ({}).toString() \nкак узнать, принадлежит ли ключ объекта этому объекту? \nчто такое промисы, статические методы промисов\nдля чего нужны MutationObserver, IntersectionObserver\nчто такое this, как работает, где использовала \nчем хорош аксиос? \nдженерики, что это, какие знаешь\nрассказать про классы типа private\nплюсы и минусы реакт\nдля чего нужен портал\nкак можно использовать useRef\nчто такое редакс, как работает, нравится ли\n-------------------------\n\nconst numbers = [0, 1, 2, 2, 0, 1, 1, 0, 2];\n// [2, 2, 2, 1, 1, 1, 0, 0, 0];\n\n\nfunction reorder(arr) {\n    const result = [...arr].sort((a, b) => b - a);\n    //toSorted();\n    return result\n}\n\n-------------------------\n// что будет в консоли? (10 раз по 10) как вывести от 0 до 9? (заменить Var на let)\n\nfor (var i = 0; i < 10; i++) {\n  setTimeout(function() {\n      console.log(i);\n  })\n}\n\n-----------------------\n// что будет в консоли? (А, В) как вывести только А? (stopPropagation)\n\n  <div onClick={() => console.log(\"B\")}>\n    <button onClick={console.log(\"А\")}>Button A</button>\n  </div>\n\n-----------------------\n// какой цвет у кнопок? у обеих синий\n\n    <div class=\"red blue\">\n        <button>Button A</button>\n    </div>\n    <div class=\"blue red\">\n      <button>Button B</button>\n    </div>\n\n\n-----------------------\n\nsetTimeout(() => console.log(1))\nnew Promise(function (resolve, reject) {\n    resolve(21);\n  })\n  .then(a => a + 21)\n  .then(a => a / 2)\n  .catch(a => { console.log(\"err\"); return a; })\n  .then(a => console.log(a))\n  .then(a => { throw 500 })\n  .catch(a => a + 1)\n  .then(console.log);\nconsole.log(5);\n\n\n// 5, 21, 501, 1\n\n--------------------------\n// задача как сделать так, чтобы в Parent работало переключение темы. Ответ: подключить контекст. Ответила устно, сказали, что можно не писать код для этого.\n\nfunction ThemeContainer() {\n  const [theme, setTheme] = useState(\"dark\");\n\n  return <Parent />;\n}\n\nfunction Parent() {\n  return <Child />;\n}\n\nfunction Child() {\n  return <div>{theme}</div>\n}\n\n\n// const ThemeProvider = ({children}) => {\n//    return <Context.Provider value={{theme}}>{children}</Context.Provider>\n// }\n\n------------------------\n\nconst persons = [\n  { name: 'Alex', age: 20 },\n  { name: 'Lena', age: 25 },\n  { name: 'Pavel', age: 20 }\n]\n\nfunction groupBy(arr, prop) {\n    \n    return arr.reduce((acc, item) => {\n        if(acc[item[prop]]) {\n            acc[item[prop]].push(item)\n        } else {\n            acc[item[prop]] = item;\n        }\n        \n        return acc;\n    }, {})\n}\n\n// groupBy(persons, \"age\")\n//\n// {\n//   20: [{ name: 'Alex', age: 20 }, { name: 'Pavel', age: 20 } ],\n//   25: [{ name: 'Lena', age: 25 }]\n// }\n\n\n— Дата собеса: 27 марта\n— Успех: ✅\n— Фидбек от HR: дали оффер на 210 \n— Комментарий: первый в жизни собес в IT после продолжительной подготовки с нуля, очень сильно волновалась, но когда собеседование началось, волнение ушло, полностью сосредоточилась на ведении разговора, отыгрывании своей роли. Собесили два парня, доброжелательные, разговорчивые. Хорошо рассказала легенду, немного спросили вглубь про проект. Задала много встречных вопросов по процессам, команде, стеку, проекту, проблемам. Собес продлился около двух часов, ответила на все вопросы, иногда с паузой вначале, поэтому собеседующие начинали подсказывать. Думаю, этот момент не очень хорошее впечатление оставляет, надо быстрее соображать и давать ответ) В целом очень понравилось, хочу еще) Огромное спасибо Даниилу @danimaxi54 за помощь во время собеса ❤️"
      }
    ]
  },
  {
    "company": "Синхро",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-09 19:32:34",
        "content": "2025-03-09 19:32:34\n Артем -> 2071074234:\nКомпания: Синхро\n\nВопросы:\n[] == []\n![] == ![]\n![] !== ![] что выведеться в консоль\n\nvar vs let vs const \nprototype\nOmit vs Pick vs Partial\nПерегрузка функции\nКонтекст в реакт\nесли ограничение на компонент ErrorBoundary\nHTTP\ncockie vs localStorage vs SasionStorage\nhttp only",
        "full_content": "2025-03-09 19:32:34\n Артем -> 2071074234:\nКомпания: Синхро\n\nВопросы:\n[] == []\n![] == ![]\n![] !== ![] что выведеться в консоль\n\nvar vs let vs const \nprototype\nOmit vs Pick vs Partial\nПерегрузка функции\nКонтекст в реакт\nесли ограничение на компонент ErrorBoundary\nHTTP\ncockie vs localStorage vs SasionStorage\nhttp only"
      }
    ]
  },
  {
    "company": "Ртлабс",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-25 19:06:35",
        "content": "2025-02-25 19:06:35\n Максим Соломыкин -> 2071074234:\nКомпания: РТЛабс(Госуслуги)\nВакансия: https://hh.ru/vacancy/116765835?hhtmFrom=employer_vacancies\nЗП: от 200К\n\n1. Предыдущий опыт работы\n2. Как хранятся данные в браузере\n3. Разница между localStorage и Cookies\n4. Что такое IndexedDB\n5. Когда нужно использовать localStorage, а когда Cookies\n6. Способы взаимодействия между клиентом и сервером\n7. Что такое WebSocket и как работает\n8. Методы HTTP запросов\n9. Для чего каждый из них используется\n10...",
        "full_content": "2025-02-25 19:06:35\n Максим Соломыкин -> 2071074234:\nКомпания: РТЛабс(Госуслуги)\nВакансия: https://hh.ru/vacancy/116765835?hhtmFrom=employer_vacancies\nЗП: от 200К\n\n1. Предыдущий опыт работы\n2. Как хранятся данные в браузере\n3. Разница между localStorage и Cookies\n4. Что такое IndexedDB\n5. Когда нужно использовать localStorage, а когда Cookies\n6. Способы взаимодействия между клиентом и сервером\n7. Что такое WebSocket и как работает\n8. Методы HTTP запросов\n9. Для чего каждый из них используется\n10. Что такое цепочка прототипов\n11. Прототипное наследование, что это и как работает\n12. У каких объектов есть proto\n13. Что такое super, зачем нужен\n14. Зачем нужно вызывать конструктор у родительского класса\n15. Что такое промисы\n16. Какие есть состояния у промисов\n17. Для чего нужен этап fulfilled и какое состояние его вызывает\n18. Когда в React компонент уходит на ререндер\n19. Как создать чистый компонент в классе\n20. Что такое VDOM\n21. Что такое эвритический алгоритм\n22. Механизм Reconciliation\n23. Для чего нужен key\n24. Почему key и ref находятся отдельно от объекта properties \n25. Что такое батчинг"
      }
    ]
  },
  {
    "company": "Marpla",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-09-25 13:58:25",
        "content": "2024-09-25 13:58:25\n Михаил -> 2071074234:\n- MarPla\n- 200к\n- вакансия: hh.ru/vacancy/106608875\n- в задаче ошибка, в IF должно быть ===, а я написал =",
        "full_content": "2024-09-25 13:58:25\n Михаил -> 2071074234:\n- MarPla\n- 200к\n- вакансия: hh.ru/vacancy/106608875\n- в задаче ошибка, в IF должно быть ===, а я написал ="
      }
    ]
  },
  {
    "company": "Sky Capital",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-20 13:42:06",
        "content": "2025-02-20 13:42:06\n Лёша -> 2071074234:\nКомпания: Sky Capital\nСсылка на вакансию: написал hr\nЗп: еще не обсуждали\n\nВопросы:\nС какими проблемами сталкивался?\nРасскажи про ваш стек.\nРазница RTK-query и tanstack-query.\nVersion Skew.\nПроблема передачи env-переменных в Nextjs (не генерится ssg).\nApp Router в Nextjs.\n\nCritical rendering path.\nCode splitting css.\nComposition и relayout.\nAsync и defer, что это такое.\nЧто такое event loop.\n\nReact:\nМеханизм recancelation.\nЧто такое react fiber?\nЭтапы рен...",
        "full_content": "2025-02-20 13:42:06\n Лёша -> 2071074234:\nКомпания: Sky Capital\nСсылка на вакансию: написал hr\nЗп: еще не обсуждали\n\nВопросы:\nС какими проблемами сталкивался?\nРасскажи про ваш стек.\nРазница RTK-query и tanstack-query.\nVersion Skew.\nПроблема передачи env-переменных в Nextjs (не генерится ssg).\nApp Router в Nextjs.\n\nCritical rendering path.\nCode splitting css.\nComposition и relayout.\nAsync и defer, что это такое.\nЧто такое event loop.\n\nReact:\nМеханизм recancelation.\nЧто такое react fiber?\nЭтапы рендера в Reactе.\nuseEffect и useLayoutEffect, чем отличаются.\nuseTransition и useSyncExternalStore.\nЧто такое мемоизация в React и как мы ее используем.\nHigh-Order Component, что это такое.\n\nTypeScript:\nЗачем мы его используем?\nРазница типов и интерфейсов.\nМожем ли мы использовать типы вместо интерфейсов.\nТипы данных в typescript.\nЧто такое enum и отличие от const enum.\nЧто такое дженерики и infer.\nПерегрузка функций.\nutility types(pick, omit, record).\nIntersection в typescript.\n\nЛайвкодинг:\nРеализовать хук useList, который возвращает три значения:\ndata - данные, полученные асинхронно. В рамках задачи - полученные из функции lib/getList\nisLoading - флаг, отвечающий за статус загрузки.\nisError - флаг, отвечающий за статус ошибки.\nЗначения должны быть реактивны.\nРешение на картинках"
      }
    ]
  },
  {
    "company": "Yadro Тераплан",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-08-15 12:13:57",
        "content": "2024-08-15 12:13:57\n Руслан -> 2071074234:\nYADRO тераплан\n— вакансия: https://spb.hh.ru/vacancy/103675701\n— зп: от 260к\n— вопросы:\n1. крайне душные вопросы о причине смены работ, заняло почти пол собеса\n2. отличие wesokets от sse\n3. сложность пузырьковой сортировки\n4. зачем нужны сборщики webpack и т.д.",
        "full_content": "2024-08-15 12:13:57\n Руслан -> 2071074234:\nYADRO тераплан\n— вакансия: https://spb.hh.ru/vacancy/103675701\n— зп: от 260к\n— вопросы:\n1. крайне душные вопросы о причине смены работ, заняло почти пол собеса\n2. отличие wesokets от sse\n3. сложность пузырьковой сортировки\n4. зачем нужны сборщики webpack и т.д."
      }
    ]
  },
  {
    "company": "Tecius",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-16 20:07:26",
        "content": "2024-07-16 20:07:26\n Руслан -> 2071074234:\nTecius\n—зп: 350к\n— вакансия: hr написал\n— Вопросы:\n1. Расскажи про интересные задачи в опыте\n2. Какие html теги знаешь, для чего нужны\n3. Почему верстать только дивами плохая практика\n4. фрагмент vs div\n5. типы позиционирования эл-в и их особенности\n6. Какие свойства для контейнера стики элемента обязательно нужно соблюсти\n7. Селекторы css, как согласуются\n8. Как повысить приоритет селектора - important\n9. Типы данных в js\n10. Объекты - что это своими с...",
        "full_content": "2024-07-16 20:07:26\n Руслан -> 2071074234:\nTecius\n—зп: 350к\n— вакансия: hr написал\n— Вопросы:\n1. Расскажи про интересные задачи в опыте\n2. Какие html теги знаешь, для чего нужны\n3. Почему верстать только дивами плохая практика\n4. фрагмент vs div\n5. типы позиционирования эл-в и их особенности\n6. Какие свойства для контейнера стики элемента обязательно нужно соблюсти\n7. Селекторы css, как согласуются\n8. Как повысить приоритет селектора - important\n9. Типы данных в js\n10. Объекты - что это своими словами, особенности\n11. Как сравнить объекты \n12. Что такое промисы\n13. Отличие типизации js  и ts\n14.Что такое дженерики\n15. Какими utility types использовал\n16. расскажи про record\n17. какие типы можно указывать первым аргументом для record\n18. react - что это и зачем\n19. Расскажи про реконсиляцию \n20. userRef для чего нужен\n21. Способы оптимизации ререндеров\n22. Как сравниваются пропсы в хоке мемо\n23. как изменить сравнение пропсов в хоке мемо - использовать вторым аргуметов коллбэк\n24. В какиз ситуациях происходит ререндер\n25. Минусы redux\n26. Когда использовать стейт менеджер а когда локальный стейт\n27. Как мутировать стейт в зустанде - юзать иммер\n28.в чем особенность react query\n29. альтернативы react query\n30. какие проблемы могут возникнуть при попытке интегрировать 3d графику с вебсокетами - указал на производительность, вроде зашло\n31. Как замерять производительность работы приложения - lighthouse, как можно ускорить сайт\n32. Как реализовать адаптивность - брейкпойнты, мета тег вьюпорт\n33. Мета теги - какие бывают, для чего нужны\n34. Как убрать индексацию сайта- robots.txt\n35. способы хранения данных на клиенте\n36. с какими видами авторизации работал\n37. протокол работы jwt\n38. какие уязвимости бывают\n39. что конкретно шифруется в рамках https протокола\n40. по каким критериям будешь отбирать либу в проект"
      }
    ]
  },
  {
    "company": "Tilda Тильда",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-05 16:33:06",
        "content": "2024-07-05 16:33:06\n Tonidevs -> 2071074234:\nTILDA ТИЛЬДА\n— сами написали\n— зп: от опыта и рез-та тех собеса\n— коменты: крутой позитивный собес был\n\n\nВОПРОСЫ\n-  есть массив на выходе const arrayWithDuplicates = [1, 2, 2, 3, 4, 4, 5];  надо получить массив без дубликатов, как бы делал, как сделать без SET(какая сложность алгоритма будет), будет ли сет работать с объектами\n- какая сложность вставки в объект\n- расскажи как бы ты делала задачу что тебе надо один раз только при входе пользователя пок...",
        "full_content": "2024-07-05 16:33:06\n Tonidevs -> 2071074234:\nTILDA ТИЛЬДА\n— сами написали\n— зп: от опыта и рез-та тех собеса\n— коменты: крутой позитивный собес был\n\n\nВОПРОСЫ\n-  есть массив на выходе const arrayWithDuplicates = [1, 2, 2, 3, 4, 4, 5];  надо получить массив без дубликатов, как бы делал, как сделать без SET(какая сложность алгоритма будет), будет ли сет работать с объектами\n- какая сложность вставки в объект\n- расскажи как бы ты делала задачу что тебе надо один раз только при входе пользователя показать попап, как через 5 сек показать попап\n- для чего используется куки и различия у local, session сторадж\n- как подключается скрипт к странице, где лучше его подгружать какие есть атрибуты и расскажи про их разницу\n- если у нас SPA где лучше подключить script\n- как делать анимации, какие свойства рекомендуется менять, а какие нет (если мы хотим сместить  квадратик сверху в низ) - что лучше использовать\nЗАДАЧИ\n- задача на верстку, опиши словами, что тут будет (размер блоков ,цвет бордеров, что будет если ещё два ребенка добавить)\n<div class=\"outer\">\n  <div class=\"inner\"></div>\n</div>\n\n<style>\n  .outer {\n    border: 1px solid red;\n  }\n\n  .inner {\n    border: 1px solid green;\n    width: 100px;\n    height: 100px;\n  }\n</style>\n\n\n- что будет в консоли и почему, если будет не двойное а тройное равно, какое равно приводит типы\n// {a:1} === {a:1} => false\n// {a:1} === {b:1} => false\n- написать замыкание\nfunction createCounter() {\n    let count = 0;\n\n    return function() {\n        count += 1;\n        console.log(count);\n    };\n}\n\nconst incrementCounter = createCounter();\n\n// Пример использования функции\nincrementCounter(); // 1\nincrementCounter(); // 2\nincrementCounter(); // 3\n\n- что делает эта строка, расскажи как работает \n* { box-sizing: border-box; }"
      }
    ]
  },
  {
    "company": "Кб-12",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-29 11:49:09",
        "content": "2024-10-29 11:49:09\n Mike -> 2071074234:\nКомпания: КБ-12\nЗП:200к\nВакансия:https://hh.ru/vacancy/107759607\nВопросы:\n1.SOLID \n2.SSR vs SPA \n3.PWA \n4.VDOM \n5.git checkout \n6.useCallback/useMemo \n7.Если можешь решить 1 задачу разными способами(Set,filter,цикл) \nУсловие: Напишите функцию removeDuplicates(arr), которая удаляет все дубликаты из массива.\n Пример: removeDuplicates([1, 2, 3, 2, 4, 1, 5]); // [1, 2, 3, 4, 5] \n8.Просто решить\nНапишите функцию findLongestWord(str), которая принимает строку и...",
        "full_content": "2024-10-29 11:49:09\n Mike -> 2071074234:\nКомпания: КБ-12\nЗП:200к\nВакансия:https://hh.ru/vacancy/107759607\nВопросы:\n1.SOLID \n2.SSR vs SPA \n3.PWA \n4.VDOM \n5.git checkout \n6.useCallback/useMemo \n7.Если можешь решить 1 задачу разными способами(Set,filter,цикл) \nУсловие: Напишите функцию removeDuplicates(arr), которая удаляет все дубликаты из массива.\n Пример: removeDuplicates([1, 2, 3, 2, 4, 1, 5]); // [1, 2, 3, 4, 5] \n8.Просто решить\nНапишите функцию findLongestWord(str), которая принимает строку и возвращает самое длинное слово в этой строке. \nЕсли несколько слов имеют одинаковую максимальную длину, функция должна вернуть первое из них.      \nПример:    \n findLongestWord(\"The quick brown fox jumped over the lazy dog\"); // \"jumped\"\nfindLongestWord(\"Hello world\"); // \"Hello\""
      }
    ]
  },
  {
    "company": "Soft Media Group",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-31 17:53:15",
        "content": "2025-01-31 17:53:15\n Владислав -> 2071074234:\nкомпания: Soft Media Group\nвакансия: https://zheleznodorozhniy50.hh.ru/vacancy/113764071?hhtmFrom=employer_vacancies\nзп: до 140 000\n\nВопросы: \n - что такое Solid\n - паттерны проектирования\n - EventLoop (что, для чего, как работает)\n - Promise\n - async await\n - что будет если  { a: 1} === { a: 1}\n - оператор in\n - как сделать копию объекта\n - что такое Prototype\n - что будет на \"самом низу\" Prototype\n\n - какие Utility types знаю\n - как работает Omit\n ...",
        "full_content": "2025-01-31 17:53:15\n Владислав -> 2071074234:\nкомпания: Soft Media Group\nвакансия: https://zheleznodorozhniy50.hh.ru/vacancy/113764071?hhtmFrom=employer_vacancies\nзп: до 140 000\n\nВопросы: \n - что такое Solid\n - паттерны проектирования\n - EventLoop (что, для чего, как работает)\n - Promise\n - async await\n - что будет если  { a: 1} === { a: 1}\n - оператор in\n - как сделать копию объекта\n - что такое Prototype\n - что будет на \"самом низу\" Prototype\n\n - какие Utility types знаю\n - как работает Omit\n - что такое Generic\n - как работают декораторы\n - что такое keyof, typeof\n\n - какие хуки знаю\n - отличие useEffect от useLayoutEffect\n - мемоизация\n - отличие useCallback от useMemo\n\n - какие GIT команды знаю\n - отличие merge от rebase\n\n - чем свойство translate отличается от translate3D \n - какими свойствами лучше создавать анимацию и почему"
      }
    ]
  },
  {
    "company": "Polydev",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-07 15:04:20",
        "content": "2025-02-07 15:04:20\n Артем -> 2071074234:\nКомпания: polydev\n\nВопросы\n\nПочему css > css in js\nMap Set\nFlexBox Grid\nintersection Observer Api\nDebounce vs Trottle\nlocalStorage\nBroadcastChannel\nTS \nomit patrial pick\nany vs never vs unknown\nReturn TYpe\nenum\nКакие state manager узаешь\nМинусы redux\nVDom зачем нужен\nreact suspens\nreact LAzy\nrequire vs import \nreact-hook-form, formik\nuseEffect vs useLauoutEffect как будут рендериться в компонентах и в родителях\nkey\nReact.memo\nmiddleware для чего\naggregat...",
        "full_content": "2025-02-07 15:04:20\n Артем -> 2071074234:\nКомпания: polydev\n\nВопросы\n\nПочему css > css in js\nMap Set\nFlexBox Grid\nintersection Observer Api\nDebounce vs Trottle\nlocalStorage\nBroadcastChannel\nTS \nomit patrial pick\nany vs never vs unknown\nReturn TYpe\nenum\nКакие state manager узаешь\nМинусы redux\nVDom зачем нужен\nreact suspens\nreact LAzy\nrequire vs import \nreact-hook-form, formik\nuseEffect vs useLauoutEffect как будут рендериться в компонентах и в родителях\nkey\nReact.memo\nmiddleware для чего\naggregate in Mongo\nMongoDB\n\nЗадача отрефакторить код\n\nimport React, { useEffect, useState, useCallback } from 'react'; // Не забудьте импортировать необходимые хуки  \n\nexport function Component(props) {  \n  const [count, setCount] = useState(0); // Инициализируйте счетчик  \n  const [data, setData] = useState(null); // Инициализируйте данные  \n  const items = [\"Item 1\", \"Item 2\", \"Item 3\"]; // Замените на массив строк  \n\n  useEffect(() => {  \n    const fetchData = async () => { // Создайте функцию внутри useEffect  \n      try {  \n        const response = await fetch(\"/api/data\");  \n        const result = await response.json();  \n        setData(result); // Сохраните полученные данные  \n      } catch (error) {  \n        console.error(\"Error fetching data:\", error);  \n      }  \n    };  \n\n    fetchData(); // Вызовите функцию для получения данных  \n  }, []); // Зависимости целесообразно оставить пустыми  \n\n  const handleIncrement = useCallback(() => {  \n    setCount(prevCount => prevCount + 1); // Используйте предыдущее состояние  \n  }, []);  \n\n  return (  \n    <div>  \n      <h1>{props.title}</h1>  \n      <p>Count: {count}</p>  \n      <button onClick={handleIncrement}>Increment</button>  \n      <ul>  \n        {items.map((item, index) => (  \n          <li key={index}>{item}</li> // Обязательно указывайте уникальный ключ  \n        ))}  \n      </ul>  \n    </div>  \n  );  \n}"
      }
    ]
  },
  {
    "company": "Broniboy Тех Скриннинг",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-08-16 12:26:09",
        "content": "2024-08-16 12:26:09\n Maria -> 2071074234:\nBroniboy тех скриннинг\n-зп: не обсуждали\n-вакансия: https://hh.ru/vacancy/105747583 \n-вопросы:\n\n1.Как работает контекст в React (React Context API)? \n2.Что такое useEffect в React?\n3.Рассказать про асинхронные запросы в JavaScript\n4.Что такое Webpack и как его используешь?\n5. Какие преимущества и недостатки использования Styled Components или Emotion, по сравнению с традиционными методами?\n6.Как реализую авторизацию и аутентификацию в веб-приложениях?",
        "full_content": "2024-08-16 12:26:09\n Maria -> 2071074234:\nBroniboy тех скриннинг\n-зп: не обсуждали\n-вакансия: https://hh.ru/vacancy/105747583 \n-вопросы:\n\n1.Как работает контекст в React (React Context API)? \n2.Что такое useEffect в React?\n3.Рассказать про асинхронные запросы в JavaScript\n4.Что такое Webpack и как его используешь?\n5. Какие преимущества и недостатки использования Styled Components или Emotion, по сравнению с традиционными методами?\n6.Как реализую авторизацию и аутентификацию в веб-приложениях?"
      }
    ]
  },
  {
    "company": "Unisender",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-30 16:19:21",
        "content": "2024-06-30 16:19:21\n Tonidevs -> 2071074234:\nUnisender\n- ссылка: сами написали\n- ЗП: край 250 по-моему\n- комментарии: интервью прошло за 15 минут, быстро поговорили, фидбек положительный\n\nВОПРОСЫ\n- базовые типы в JS\n- что такое ES5 ES6 итд\n- писали ли на классах\n- что такое прототип в JS\n- для чего нужны async await\n- рассказать как работает механизм всплытия в JS\n- какие есть стадии во всплытии\n- во что компилируется interface в TypeScript\n- для чего нужен infer в TypeScript\n- назови плагины We...",
        "full_content": "2024-06-30 16:19:21\n Tonidevs -> 2071074234:\nUnisender\n- ссылка: сами написали\n- ЗП: край 250 по-моему\n- комментарии: интервью прошло за 15 минут, быстро поговорили, фидбек положительный\n\nВОПРОСЫ\n- базовые типы в JS\n- что такое ES5 ES6 итд\n- писали ли на классах\n- что такое прототип в JS\n- для чего нужны async await\n- рассказать как работает механизм всплытия в JS\n- какие есть стадии во всплытии\n- во что компилируется interface в TypeScript\n- для чего нужен infer в TypeScript\n- назови плагины Webpack для работы со стилями\n- цикл for of в JS какие критерии к объекту\n- какой интерфейс должен реализовывать for of в Typescript\n- что такое VDOM и как ты считаешь почему он обновляется быстрее чем DOM\n- useMemo для чего нужен, что такое мемоизация\n- с какими стейтменеджерами работал\n- расскажи о Redux-Toolkit, для чего нужны слайсы\n- что такое BEM, для чего используется\nЗАДАЧА\n- написать в чате асинхронную ф-цию запроса на бек\nasync function fetchDataWithDelay(url) {\n  // Выполняем запрос на бэкенд\n  const response = await fetch(url);\n  const data = await response.json();\n  // Создаем промис, который завершится через одну секунду\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  // Возвращаем данные после задержки\n  return data;\n}\n// Пример использования функции\nfetchDataWithDelay('https://api.example.com/data')\n  .then(data => console.log(data))\n  .catch(error => console.error('Ошибка:', error));"
      }
    ]
  },
  {
    "company": "Kikimora.Tech",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-30 13:04:04",
        "content": "2025-01-30 13:04:04\n Dan -> 2071074234:\nКомпания: Kikimora.tech \nВакансия: JS Jobs\n\nЗадача: \n1)На первой странице вывести карточки юзеров.\nВ карточке id, name, username, email\n2) На второй странице вывести карточки юзеров с постами.\nВ карточке вывести юзера, title, body из поста\n\nДо вопросов не дошел 😁\n\nUsersWithPostPage.tsx\nimport React, { useEffect, useState } from \"react\";\nimport { fetchUsers } from \"../utils/fetchUsers\";\nimport { fetchPosts } from \"../utils/fetchPosts\";\nimport UserCard from ...",
        "full_content": "2025-01-30 13:04:04\n Dan -> 2071074234:\nКомпания: Kikimora.tech \nВакансия: JS Jobs\n\nЗадача: \n1)На первой странице вывести карточки юзеров.\nВ карточке id, name, username, email\n2) На второй странице вывести карточки юзеров с постами.\nВ карточке вывести юзера, title, body из поста\n\nДо вопросов не дошел 😁\n\nUsersWithPostPage.tsx\nimport React, { useEffect, useState } from \"react\";\nimport { fetchUsers } from \"../utils/fetchUsers\";\nimport { fetchPosts } from \"../utils/fetchPosts\";\nimport UserCard from \"../components/UserCard\";\nimport PostCard from \"../components/PostCard\";\n\nconst Page2 = () => {\n  const [users, setUsers] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setLoading(true);\n        const [usersData, postsData] = await Promise.all([fetchUsers(), fetchPosts()]);\n\n        const usersWithPosts = usersData.map(user => ({\n          ...user,\n          posts: postsData.filter(post => post.userId === user.id)\n        }));\n\n        setUsers(usersWithPosts);\n      } catch (err) {\n        console.error(\"Ошибка загрузки данных:\", err);\n        setError(\"Ошибка загрузки данных. Попробуйте позже.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  if (loading) {\n    return <p style={{ color: \"blue\" }}>Загрузка...</p>;\n  }\n\n  if (error) {\n    return <p style={{ color: \"red\" }}>{error}</p>;\n  }\n\n  return (\n    <div>\n      <h2>Пользователи с их постами</h2>\n      {users.map((user) => (\n        <div key={user.id} style={{ border: \"1px solid #ddd\", marginBottom: 20, padding: 10 }}>\n          <UserCard id={user.id} name={user.name} username={user.username} email={user.email} />\n          <h4>Посты:</h4>\n          {user.posts.length > 0 ? (\n            user.posts.map((post) => <PostCard key={post.id} title={post.title} body={post.body} />)\n          ) : (\n            <p>Нет постов</p>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Page2;\nPostCards.tsx\nimport React from \"react\";\n\ninterface PostCardProps {\n  title: string;\n  body: string;\n}\n\nconst PostCard: React.FC<PostCardProps> = ({ title, body }) => {\n  return (\n    <div style={{ border: \"1px solid #ccc\", padding: 10, marginTop: 5 }}>\n      <h4>{title}</h4>\n      <p>{body}</p>\n    </div>\n  );\n};\n\nexport default PostCard;\nUserCard.tsx\nimport React from \"react\";\n\ninterface UserCardProps {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n}\n\nconst UserCard: React.FC<UserCardProps> = ({ id, name, username, email }) => {\n  return (\n    <div style={{ border: \"1px solid #ddd\", padding: 10, margin: 10 }}>\n      <h3>{name} (@{username})</h3>\n      <p>Email: {email}</p>\n      <p>ID: {id}</p>\n    </div>\n  );\n};\n\nexport default UserCard;\nUsersPage.tsx\nimport React, { useEffect, useState } from \"react\";\nimport { fetchUsers } from \"../utils/fetchUsers\";\nimport UserCard from \"../components/UserCard\";\n\nconst UsersPage = () => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    fetchUsers().then(setUsers);\n  }, []);\n\n  return (\n    <div>\n      <h2>Список пользователей</h2>\n      {users.map((user) => (\n        <UserCard key={user.id} {...user} />\n      ))}\n    </div>\n  );\n};\n\nexport default UsersPage;"
      }
    ]
  },
  {
    "company": "Умный Сервис",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-16 19:48:09",
        "content": "2025-01-16 19:48:09\n Артем -> 2071074234:\nКомпания: Умный Сервис\nВопросы: \nКакие конструкции в JS знаешь\n== vs ===\nhttp\nиз чего состоит url\nАрбуз 10 кг в нем жидкости на 99% после просушки жидкости стало 98% сколько весит арбуз?\nВ комнате 100 человек 99% левшей сколько человек должно выйти из комнаты чтобы левшей было 98%\njoin vs union в SQL\nЧто представляет из себя этот запрос",
        "full_content": "2025-01-16 19:48:09\n Артем -> 2071074234:\nКомпания: Умный Сервис\nВопросы: \nКакие конструкции в JS знаешь\n== vs ===\nhttp\nиз чего состоит url\nАрбуз 10 кг в нем жидкости на 99% после просушки жидкости стало 98% сколько весит арбуз?\nВ комнате 100 человек 99% левшей сколько человек должно выйти из комнаты чтобы левшей было 98%\njoin vs union в SQL\nЧто представляет из себя этот запрос"
      }
    ]
  },
  {
    "company": "Petrastudio",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-03-18 13:04:08",
        "content": "2024-03-18 13:04:08\n 5429820319 -> 2071074234:\nНазвание компании: PetraStudio\nСсылка на вакансию: hr сама написала\nЗП: 120К \nЗадачи: Полтора часа дрючили базой с learn javascript, глубоко спрашивали про eventloop и про то как работает браузер после ввода адреса. Дали кусок кода на реакте чтобы я его отвевьюил, потом надо было написать юнит тест на компонент псевдокодом. Алгосов не было\nУспех собеса: видимо ❌ (пропали без объяснения причин)\n\nСобес был в конце февраля\n\nХодил с целью попрактиковать...",
        "full_content": "2024-03-18 13:04:08\n 5429820319 -> 2071074234:\nНазвание компании: PetraStudio\nСсылка на вакансию: hr сама написала\nЗП: 120К \nЗадачи: Полтора часа дрючили базой с learn javascript, глубоко спрашивали про eventloop и про то как работает браузер после ввода адреса. Дали кусок кода на реакте чтобы я его отвевьюил, потом надо было написать юнит тест на компонент псевдокодом. Алгосов не было\nУспех собеса: видимо ❌ (пропали без объяснения причин)\n\nСобес был в конце февраля\n\nХодил с целью попрактиковаться"
      }
    ]
  },
  {
    "company": "Сфера",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-06 13:51:11",
        "content": "2024-07-06 13:51:11\n Ярослав Мудрый -> 2071074234:\nGoInvest знакомство с командой:\n- сами написали\n- зп: 300к\n\n Вопросы:\n- интересна ли тебе сфера финансов\n- занимался ли инвестированием\n- какие сложные архитектурные решения реализовывал\n- занимался ли менторингом, делал ли код ревью\n- какая структура команды \n- какие процессы\n- что для тебя идеальная команда\n- чего бы не хотелось видеть на новом месте",
        "full_content": "2024-07-06 13:51:11\n Ярослав Мудрый -> 2071074234:\nGoInvest знакомство с командой:\n- сами написали\n- зп: 300к\n\n Вопросы:\n- интересна ли тебе сфера финансов\n- занимался ли инвестированием\n- какие сложные архитектурные решения реализовывал\n- занимался ли менторингом, делал ли код ревью\n- какая структура команды \n- какие процессы\n- что для тебя идеальная команда\n- чего бы не хотелось видеть на новом месте"
      }
    ]
  },
  {
    "company": "Газпром Нефть",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-06 14:35:04",
        "content": "2025-06-06 14:35:04\n Дарья -> 2071074234:\nКомпания: Газпром Нефть\nЗп: 230\n\nВопросы:\n1) Уточнял каждую строчку резюме, какая была команда, как строились процессы, как проводилось ревью кода,\n2) Все основные команды гита, как с ним работала,\n3) Submodules,\n4) Замыкания,\n5) Контекст, \n6) Принципы солид с примерами,\n7) Глубокое и поверхностное копирование,\n8) Чистая функция,\n9) Редьюс,\n10) Лонг полинг, шорт полинг,\n11) Все о промисах,\n12) Эвент луп,\n13) Прототипы,\n14) Отличие типа от интерфейса в ТС...",
        "full_content": "2025-06-06 14:35:04\n Дарья -> 2071074234:\nКомпания: Газпром Нефть\nЗп: 230\n\nВопросы:\n1) Уточнял каждую строчку резюме, какая была команда, как строились процессы, как проводилось ревью кода,\n2) Все основные команды гита, как с ним работала,\n3) Submodules,\n4) Замыкания,\n5) Контекст, \n6) Принципы солид с примерами,\n7) Глубокое и поверхностное копирование,\n8) Чистая функция,\n9) Редьюс,\n10) Лонг полинг, шорт полинг,\n11) Все о промисах,\n12) Эвент луп,\n13) Прототипы,\n14) Отличие типа от интерфейса в ТС,\n15) Все типы в ТС с примерами использования,\n16) Аs const для чего, пример использования,\n17) Как работает инференция типов в ТС под капотом,\n18) Тайп гуард,\n19) Keyof,\n20) Жизненный цикл компонента, методы жизненного цикла,\n21) Подробно про хуки юс эффект, юс колбек, юс мемо, юс контекст, юс реф, юс редьюсер,\n22) HOK, примеры,\n23) Паттерны проектирования, примеры использования, \n24) Методология флакс,\n25) Как работает редакс,\n26) Хуки реакт квери, примеры использования в своем проекте,\n27) Версии библиотек на проекте (реакт, ТС, редакс, некст), почему именно они"
      }
    ]
  },
  {
    "company": "Гарда",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-09-01 13:03:13",
        "content": "2024-09-01 13:03:13\n Руслан -> 2071074234:\nГарда\n— зп: от 250к\n— вакансия: https://hh.ru/vacancy/105670259\n— вопросы: \n1. какой опыт работы с ui-kit был\n2. css vs css-in-js\n3. ts vs js\n4. про дженерики, приходилось ли писать\n5. перегрузка в ts\n6. чем можно заменить enum\n7. рекурсия, проблемы\n8. что важнее читаемость или производительность кода и почему\n9. Какие хуки юзал, для чего.\n10. Какие кастомные хуки писал\n11. нужно подписаться на событие, сейчас не важно какое, не для текущих элементов ко...",
        "full_content": "2024-09-01 13:03:13\n Руслан -> 2071074234:\nГарда\n— зп: от 250к\n— вакансия: https://hh.ru/vacancy/105670259\n— вопросы: \n1. какой опыт работы с ui-kit был\n2. css vs css-in-js\n3. ts vs js\n4. про дженерики, приходилось ли писать\n5. перегрузка в ts\n6. чем можно заменить enum\n7. рекурсия, проблемы\n8. что важнее читаемость или производительность кода и почему\n9. Какие хуки юзал, для чего.\n10. Какие кастомные хуки писал\n11. нужно подписаться на событие, сейчас не важно какое, не для текущих элементов компонента, а более глобально, к window или document. каким образом это делается ?\nКакие могут быть проблемы после подписки на то или иное событие(нужна отписка при размонтировании)\n12. Нужно ли всегда использовать хуки useMemo, useCallback и почему\n13. reconciliation\n14. SOLID в реакте\n15. специфичность в цсс\n16. grid vs flexbox\n17. какие тесты писал\n18.  работал ли с аст"
      }
    ]
  },
  {
    "company": "Сибур",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-03-14 14:59:29",
        "content": "2024-03-14 14:59:29\n Данил -> 2071074234:\nНазвание компании: Сибур \nвакансия - https://hh.ru/vacancy/94059285\nЗП: 250-280к\nВопросы - их не было, сразу к лайфкодингу с шарингом экрана. В начале распросили про опыт, особо не вдаваясь в детали \n\n\nЗадачи:\n1. палиндром\n2. алгоритмы (1 из 2 на выбор): \nconsole.clear();\n\n/*\n * Задачка\n */\n\n/*\nconst arr = \n[\n    [ 1, 2, 3, 4, 5],\n    [14,15,16,17, 6],\n    [13,20,19,18, 7],\n    [12,11,10, 9, 8]\n]\n */\n\nconst arr1 = [\n  [1, 2, 3, 4, 5],\n  [14, 15, 16, 17, ...",
        "full_content": "2024-03-14 14:59:29\n Данил -> 2071074234:\nНазвание компании: Сибур \nвакансия - https://hh.ru/vacancy/94059285\nЗП: 250-280к\nВопросы - их не было, сразу к лайфкодингу с шарингом экрана. В начале распросили про опыт, особо не вдаваясь в детали \n\n\nЗадачи:\n1. палиндром\n2. алгоритмы (1 из 2 на выбор): \nconsole.clear();\n\n/*\n * Задачка\n */\n\n/*\nconst arr = \n[\n    [ 1, 2, 3, 4, 5],\n    [14,15,16,17, 6],\n    [13,20,19,18, 7],\n    [12,11,10, 9, 8]\n]\n */\n\nconst arr1 = [\n  [1, 2, 3, 4, 5],\n  [14, 15, 16, 17, 6],\n  [13, 20, 19, 18, 7],\n  [12, 11, 10, 9, 8],\n];\n\nconst getSpiraledFlatArray = () => {\n  console.log(arr1);\n};\n\nconsole.log(getSpiraledFlatArray(arr1));\n\n// ===================\n\n/*\nconst arr = \n[\n    1,\n    [\n        [\n            20, \n            1,\n            [\n                101\n            ]\n        ],\n        2\n    ],\n    [\n        [\n            -2\n        ],\n        [\n            [\n                102,\n                100\n            ]\n        ]\n    ]\n]\n*/\n\nconst arr2 = [1, [[20, 1, [101]], 2], [[-2], [[102, 100]]]];\n\nfunction findDeepestMinElement(array) {}\n\n// console.log(findDeepestMinElement(arr2)); // [3, 100]\n\n        1) нужно из спиральной матрицы вывести значения по порядку\n        2) нужно посчитать максимальный уровень вложенности и               вывести минимальный элемент на последнем уровне вложенности\n\n3. задача на рефакторинг\nimport { useEffect, useState } from \"react\";\n\nexport default function App() {\n  const [counter, setCounter] = useState(0);\n\n  const increment = () => {\n    setCounter(counter + 1);\n  };\n\n  const decrement = () => {\n    setCounter(counter - 1);\n  };\n\n  const clear = () => {\n    setCounter(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <CounterView counter={counter} />\n      <Actions increment={increment} decrement={decrement} clear={clear} />\n    </div>\n  );\n}\n\nconst CounterView = ({ counter }) => {\n  return <div>Current value: {counter}</div>;\n};\n\nconst Actions = ({ increment, decrement, clear }) => {\n  useEffect(() => {\n    document.addEventListener(\"keydown\", (e) => {\n      console.log(e);\n      if (e.key === \"Escape\") clear();\n    });\n  });\n\n  return (\n    <div>\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n      <p>\n        <small>\n          Press <kbd>Esc</kbd> to reset counter.\n        </small>\n      </p>\n    </div>\n  );\n};\n \n\nНужно найти что не так в этом коде"
      }
    ]
  },
  {
    "company": "Melon Fashion Group",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-08-14 19:13:41",
        "content": "2024-08-14 19:13:41\n Руслан -> 2071074234:\nMelon Fashion Group\n— зп: 250к\n— вакансия: https://spb.hh.ru/vacancy/105385231?hhtmFrom=employer_vacancy_responses\n— задачи:\n/*\nЗадача - реализовать товарный листинг интернет-магазина\n1) Получить список товаров\n2) Отобразить заголовок листинга, полученный по апи\n3) При клике на товар - открывать в новой вкладке\n*/\n\nimport \"./styles.css\";\nimport { clickOnTitle } from \"./utils/clickOnTitle\";\n\nimport React, { useEffect, useState } from \"react\";\n\nconst Comp...",
        "full_content": "2024-08-14 19:13:41\n Руслан -> 2071074234:\nMelon Fashion Group\n— зп: 250к\n— вакансия: https://spb.hh.ru/vacancy/105385231?hhtmFrom=employer_vacancy_responses\n— задачи:\n/*\nЗадача - реализовать товарный листинг интернет-магазина\n1) Получить список товаров\n2) Отобразить заголовок листинга, полученный по апи\n3) При клике на товар - открывать в новой вкладке\n*/\n\nimport \"./styles.css\";\nimport { clickOnTitle } from \"./utils/clickOnTitle\";\n\nimport React, { useEffect, useState } from \"react\";\n\nconst Component = (props: any) => {\n  return <h7>{props.n}</h7>;\n};\n\nexport default function App() {\n  const [s, set] = React.useState(null);\n\n  const [product, setProduct] = useState(null);\n\n  const onPress = async (article) => {\n    window.open(`https://befree.ru/zhenskaya/product/${article}`, \"_blank\");\n  };\n\n  async function getTovari() {\n    let headersList = {\n      Accept: \"*/*\",\n      \"Content-Type\": \"application/json\",\n    };\n\n    let bodyContent = JSON.stringify({\n      gender: \"female\",\n    });\n\n    let response = await fetch(\n      \"https://catalog.befree.ru/public/v2/compilations/zen-sale-dzinsy\",\n      {\n        method: \"POST\",\n        body: bodyContent,\n        headers: headersList,\n      }\n    );\n\n    const res = response.json();\n\n    set(res.data);\n  }\n\n  useEffect(() => {\n    getTovari();\n\n    const title = document.getElementById(\"title\");\n\n    title.addEventListener(\"click\", clickOnTitle);\n  });\n\n  // убрать товары с ценой 0\n  const filteredList = s?.items.filter(\n    (item, index) => item.calculated_price >= 0\n  );\n\n  return (\n    <span>\n      <div className=\"title\" id=\"title\">\n        <Component n={s.public_title} data={filteredList} id=\"title\" />\n      </div>\n\n      {filteredList?.map((item) => (\n        <span onClick={() => onPress(item.article)}>\n          <div style={{ fontSize: \"33px\" }}>{item.title}</div>\n          <div>{item.calculated_price} р</div>\n          <img\n            width={100}\n            src={`https://imgcdn.befree.ru/rest/V1/images/768/${item.images[0]}`}\n          />\n        </span>\n      ))}\n    </span>\n  );\n}\n\n/*\n1) Отобразить список по 4 карточки в ряд\n2) Для экранов ниже 768px выводить список по 1 карточке в ряд\n3) При наведении на изображение увеличивать его в рамках контейнера\n   (пример https://befree.ru/zhenskaya \"ПОПУЛЯРНЫЕ КАТЕГОРИИ\")\n4) При наведени на текст подчеркнуть его, при клике - поменять цвет\n*/\n\n.App {\n  font-family: sans-serif;\n  text-align: center;\n}\n\n.title {\n  font-size: 30px;\n  padding: 20px 0;\n}"
      }
    ]
  },
  {
    "company": "Justice It",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-08 12:54:28",
        "content": "2024-10-08 12:54:28\n Михаил -> 2071074234:\nJustice IT\nвакансия hh.ru/vacancy/107749683\nзп 200к",
        "full_content": "2024-10-08 12:54:28\n Михаил -> 2071074234:\nJustice IT\nвакансия hh.ru/vacancy/107749683\nзп 200к"
      }
    ]
  },
  {
    "company": "Омнитек",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-17 12:46:55",
        "content": "2024-06-17 12:46:55\n Artur -> 2071074234:\nКомпания: Омнитек\nСсылка: нашел в тг\nЗП: сказал 200к+\nУровень: Middle\nУспех собеса: ?\n\nВопросы:\n- над какой комплексной задачей работал\n- какие проблемы были\n- локалсторадж, его минусы, разница локалсторадж и индекс дб\n- какие ui компоненты верстал\n- где хранятся объекты в js, что из себя представляют, как оптимизировать накладные расходы на ключи\n- минусы хуков в реакте, почему их ввели, почему перешли на них, причины важности порядка хуков\n- плюсы и ми...",
        "full_content": "2024-06-17 12:46:55\n Artur -> 2071074234:\nКомпания: Омнитек\nСсылка: нашел в тг\nЗП: сказал 200к+\nУровень: Middle\nУспех собеса: ?\n\nВопросы:\n- над какой комплексной задачей работал\n- какие проблемы были\n- локалсторадж, его минусы, разница локалсторадж и индекс дб\n- какие ui компоненты верстал\n- где хранятся объекты в js, что из себя представляют, как оптимизировать накладные расходы на ключи\n- минусы хуков в реакте, почему их ввели, почему перешли на них, причины важности порядка хуков\n- плюсы и минусы вебпака и вайта, в чем особенности вайта\n- es modules и require, разница, как работают, как тут связан вайт\n- отличия абстрактного класса от интерфейса в тс\n- декораторы\n- логика связи пользователь - сервер, что происходит после отправки запроса"
      }
    ]
  },
  {
    "company": "Bitrix24",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-04-16 11:09:28",
        "content": "2024-04-16 11:09:28\n Санжар -> 2071074234:\n- Название компании: bitrix24\n- Ссылка на вакансию: https://careers.bitrix24.ru/jobs/development/Javascript-senior/\n- ЗП: запросил 330к-380к\n- Задачи: ревью кода - https://gist.github.com/vovkabelov/9f91c9361a08e94669ee2f0b3c85a354\n- Успех:❌\n- Фидбек: интервью прошло комфортно. Во время ревью говорили про принципы разработки, ооп и безопасность (XSS уязвимости и тд). Через 2 дня HR вернулась с обратной связью: \"Благодарим за участие в отборе, хотим сооб...",
        "full_content": "2024-04-16 11:09:28\n Санжар -> 2071074234:\n- Название компании: bitrix24\n- Ссылка на вакансию: https://careers.bitrix24.ru/jobs/development/Javascript-senior/\n- ЗП: запросил 330к-380к\n- Задачи: ревью кода - https://gist.github.com/vovkabelov/9f91c9361a08e94669ee2f0b3c85a354\n- Успех:❌\n- Фидбек: интервью прошло комфортно. Во время ревью говорили про принципы разработки, ооп и безопасность (XSS уязвимости и тд). Через 2 дня HR вернулась с обратной связью: \"Благодарим за участие в отборе, хотим сообщить, что в данный момент ищем кандидата с другими специфическими навыками\". В проекте у них нативный js с flow типизацией"
      }
    ]
  },
  {
    "company": "Ростелком Ит",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-25 11:07:24",
        "content": "2025-06-25 11:07:24\n Евгений -> 2071074234:\nКомпания: Ростелком ИТ \nзп 230\n\nБольшую часть времени гоняли по резюме, спрашивали про технологии и как решал определенные задачи и между делом задавали вопросы по теории\nВопросы:\n1. Какие есть способы взаимодействия с сервером кроме websocket\n2. Как можно отлавливать ошибки на websocket \n3. Как отловить лаги? (речь про вкладку perfomance, react profiler)\n4. Мемоизация (хуки)\n5. Были лаги в работе? (как я понял вопрос фановый) хотят услышать что в наст...",
        "full_content": "2025-06-25 11:07:24\n Евгений -> 2071074234:\nКомпания: Ростелком ИТ \nзп 230\n\nБольшую часть времени гоняли по резюме, спрашивали про технологии и как решал определенные задачи и между делом задавали вопросы по теории\nВопросы:\n1. Какие есть способы взаимодействия с сервером кроме websocket\n2. Как можно отлавливать ошибки на websocket \n3. Как отловить лаги? (речь про вкладку perfomance, react profiler)\n4. Мемоизация (хуки)\n5. Были лаги в работе? (как я понял вопрос фановый) хотят услышать что в настоящей разработке бывают косяки \n6. С какими стейт менеджментами работал\n7. Зачем нужен redux \n8. Как бы сам сделал useSelector"
      }
    ]
  },
  {
    "company": "Моеvideo",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-30 10:15:02",
        "content": "2025-01-30 10:15:02\n Матвей Захаров -> 2071074234:\nКомпания: МоеVideo\nЗапись: https://youtu.be/JNq6PmMoVKY \nВакансия: https://spb.hh.ru/vacancy/115948605?hhtmFrom=chat\n\nВопросы: \n- что такое http, какие методы у него есть, Rest API \n- CORS, preflight запросы, как обойти \n- коды ответов http, 403 ошибка, чем её можно заменить\n- Symbol, его особенности\n- как добавить в примитив метод без использования String.prototype\n- Особенности функционального программирования\n-  сложность алгоритмов",
        "full_content": "2025-01-30 10:15:02\n Матвей Захаров -> 2071074234:\nКомпания: МоеVideo\nЗапись: https://youtu.be/JNq6PmMoVKY \nВакансия: https://spb.hh.ru/vacancy/115948605?hhtmFrom=chat\n\nВопросы: \n- что такое http, какие методы у него есть, Rest API \n- CORS, preflight запросы, как обойти \n- коды ответов http, 403 ошибка, чем её можно заменить\n- Symbol, его особенности\n- как добавить в примитив метод без использования String.prototype\n- Особенности функционального программирования\n-  сложность алгоритмов"
      }
    ]
  },
  {
    "company": "Метр Квадратный",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-11-02 03:11:00",
        "content": "2024-11-02 03:11:00\n Никита -> 2071074234:\nМетр квадратный \nзп 250k \nвакансия https://hh.ru/vacancy/108405006 \nвидео https://disk.yandex.ru/d/YdLjWz3Mk28-Wg",
        "full_content": "2024-11-02 03:11:00\n Никита -> 2071074234:\nМетр квадратный \nзп 250k \nвакансия https://hh.ru/vacancy/108405006 \nвидео https://disk.yandex.ru/d/YdLjWz3Mk28-Wg"
      }
    ]
  },
  {
    "company": "Sibintek",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-05-30 14:33:29",
        "content": "2025-05-30 14:33:29\n Василий -> 2071074234:\nSibintek техничка\n\n1) Написать reduce\narr.reduce((acc, curNum) => acc += curNum , 0)\n2) Можно ли использовать такую конструкцию?\n\nuseEffect(() => {\nif(!visible) return;\n//... \n//...\nshowModal();\n}, [visible])\n\n3) Будет ли React  воспринимать useCount, как пользовательский хук?\nconst useCount = (cnt) => cnt + 1; \n\nfunction MyComponent() {\n  const count = useCount(0); \n\n  return (\n    <div>\n      <p>Count: {count}</p>\n    </div>\n  );\n}\n\n4) Что происходит...",
        "full_content": "2025-05-30 14:33:29\n Василий -> 2071074234:\nSibintek техничка\n\n1) Написать reduce\narr.reduce((acc, curNum) => acc += curNum , 0)\n2) Можно ли использовать такую конструкцию?\n\nuseEffect(() => {\nif(!visible) return;\n//... \n//...\nshowModal();\n}, [visible])\n\n3) Будет ли React  воспринимать useCount, как пользовательский хук?\nconst useCount = (cnt) => cnt + 1; \n\nfunction MyComponent() {\n  const count = useCount(0); \n\n  return (\n    <div>\n      <p>Count: {count}</p>\n    </div>\n  );\n}\n\n4) Что происходит, как поправить? Я предложил вынести в useEffect c зависимостью isVisible\n   const ToggleComponent = () => {\n     const [isVisible, setIsVisible] = useState(false);\n     const inputRef = useRef(null);\n\n     const toggleVisibility = () => {\n       setIsVisible(prev => !prev);\n       if (inputRef.current) {\n         inputRef.current.focus();\n       }\n     };\n\n     return (\n       <>\n         <button onClick={toggleVisibility}>Toggle Input</button>\n         {isVisible && <input ref={inputRef} />}\n       </>\n     );\n   };\n\n5) Что будет в консоли, как поправить?\n   const Counter = () => {\n     const [count, setCount] = useState(0);\n\n     useEffect(() => {\n       const timer = setInterval(() => {\n         setCount(count + 1);\n       }, 1000);\n\n       return () => clearInterval(timer);\n     }, []);\n\n     return <div>Count: {count}</div>;\n   };\n\n6) Будет ли меняться val(нет). Как исправить? прокинуть key\nimport React, { useRef, useState, useEffect } from 'react'\n\nconst CountDisplay = (props) =>{\n  const [val] = useState(props.c)\n  return <div>{val}</div>\n}\n\n\nconst App = () => {\n  const [count, setCount] = useState(0)\n\n  const handleClick = () => {\n    setCount(c => c + 1)\n  }\n  \n  return (<div>\n    <button onClick={handleClick}>\n      <span>⚛️</span> {count}\n    </button>\n    <CountDisplay c={count} />\n  </div>\n  )\n}\n\n\nexport default App\n\n7)Что тут реализовано? \nimport { useState, useEffect } from 'react';\nimport { useInfiniteScroll } from './hooks';\n\nconst App = () => {\n  const [page, setPage] = useState(1);\n\n  const fetchData = async (pageNumber) => {\n    try {\n      const response = await fetch(`https://api.example.com/data?page=${pageNumber}`);\n      if (!response.ok) throw new Error('Network error');\n      const json = await response.json();\n      return json.data;\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const [items, isLoading, error] = useInfiniteScroll(fetchData, page, 10);\n\n  return (\n    <div>\n      {items.map(item => (\n        <div key={item.id}>\n          <p>{item.title}</p>\n        </div>\n      ))}\n      {isLoading && <p>Загрузка...</p>}\n      {error && <p>Ошибка: {error.message}</p>}\n    </div>\n  );\n};\n\nexport default App;\n\n8) Как оптимизировать большое ожидание на исполнение функции heavyComputation и долгий рендер страницы\nimport { useState, useEffect } from 'react';\n\nconst ComplexComponent = ({ data }) => {\n  const [stateValue, setStateValue] = useState(null);\n\n  // Этот метод выполняет тяжелые вычисления\n  const heavyComputation = () => {\n    let result = [];\n    for (let i = 0; i < 1000000; i++) {\n      result.push(i * Math.random());\n    }\n    return result;\n  };\n\n  useEffect(() => {\n    const computedResult = heavyComputation();\n    setStateValue(computedResult);\n  }, [data]);\n\n  return (\n    <div>\n      <h1>Результат сложных вычислений:</h1>\n      {stateValue && stateValue.map((item, index) => (\n        <p key={index}>{item}</p>\n      ))}\n    </div>\n  );\n};\n\nexport default ComplexComponent;"
      }
    ]
  },
  {
    "company": "Стрим Лабс",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-04-24 13:19:46",
        "content": "2025-04-24 13:19:46\n Лёша -> 2071074234:\nКомпания: Стрим Лабс\nЗп: 330 net\nВопросы: \n1000 вопросов по легенде, очень глубоко копали (последние 2 таски, и очень подробно про каждый проект).\n\nТехвопросы:\nДелал ли какую-то оптимизацию на фронте.\nКак сделать пагинация(подробно).\nКак работал с графиками.\nКак работал с module federation.\n\nЗаметка: Очень хорошо нужно легенду проработать.",
        "full_content": "2025-04-24 13:19:46\n Лёша -> 2071074234:\nКомпания: Стрим Лабс\nЗп: 330 net\nВопросы: \n1000 вопросов по легенде, очень глубоко копали (последние 2 таски, и очень подробно про каждый проект).\n\nТехвопросы:\nДелал ли какую-то оптимизацию на фронте.\nКак сделать пагинация(подробно).\nКак работал с графиками.\nКак работал с module federation.\n\nЗаметка: Очень хорошо нужно легенду проработать."
      }
    ]
  },
  {
    "company": "Гк Авилон, Айтикит",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-12-03 13:26:15",
        "content": "2024-12-03 13:26:15\n Aleks Vi -> 2071074234:\nНазвание компании: ГК Авилон, АйТиКит\nВакансия: https://hh.ru/vacancy/111948431?hhtmFrom=employer_vacancies\nТип собеседования: Устное интервью с тех лидом и hr\nЗП: 174 000 на руки\nУспех собеса: нет\nЧто спрашивали: \nПро опыт работы, почему ищешь новую, знаешь ли что-то про маркетинг. \nFSD, \nApp router, \nReact-Hook-Forms, \nКак реализовывали авторизацию (подробно по шагам, что происходит), \nДелал ли UI-KIT (показать примеры), \nSCSS - миксины, \nДелал ли N...",
        "full_content": "2024-12-03 13:26:15\n Aleks Vi -> 2071074234:\nНазвание компании: ГК Авилон, АйТиКит\nВакансия: https://hh.ru/vacancy/111948431?hhtmFrom=employer_vacancies\nТип собеседования: Устное интервью с тех лидом и hr\nЗП: 174 000 на руки\nУспех собеса: нет\nЧто спрашивали: \nПро опыт работы, почему ищешь новую, знаешь ли что-то про маркетинг. \nFSD, \nApp router, \nReact-Hook-Forms, \nКак реализовывали авторизацию (подробно по шагам, что происходит), \nДелал ли UI-KIT (показать примеры), \nSCSS - миксины, \nДелал ли NPM-пакеты\nПодробно про SEO"
      }
    ]
  },
  {
    "company": "Промышленные инновации",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-25 12:12:42",
        "content": "2024-10-25 12:12:42\n Гасим Мурасов -> 2071074234:\n-компания: Промышленные инновации\n-зп: попросил  250к\n-вакансия: https://hh.ru/vacancy/83342652\n-задач не было просто общались о процессах\n\nкак была устроена разработка?\nкакой был процесс разработки, сколько членов в команде?\nЧто делал в последней компании на проекте?\nЧто делал в первой компании на проекте,как был устроен процесс разработки там(и сколько человек в команде)?\nКак себя вижу через несколько лет?\nГотов ли к офисному формату работы?",
        "full_content": "2024-10-25 12:12:42\n Гасим Мурасов -> 2071074234:\n-компания: Промышленные инновации\n-зп: попросил  250к\n-вакансия: https://hh.ru/vacancy/83342652\n-задач не было просто общались о процессах\n\nкак была устроена разработка?\nкакой был процесс разработки, сколько членов в команде?\nЧто делал в последней компании на проекте?\nЧто делал в первой компании на проекте,как был устроен процесс разработки там(и сколько человек в команде)?\nКак себя вижу через несколько лет?\nГотов ли к офисному формату работы?"
      }
    ]
  },
  {
    "company": "Эпик Дей",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-05-04 20:07:32",
        "content": "2025-05-04 20:07:32\n Василий -> 2071074234:\nЭпик дей\nзп: 150\n\nКомпания из 3 человек. 1 собес задавали вопросы только по опыту, смогу ли работать один. \n\n2 собес скинули задачку на час времени. \nФильтрация и сортировка списка товаров (Product List)\n• Задача: реализовать компонент, отображающий список товаров и позволяющий фильтровать их по категории и сортировать по цене.\n\nФункциональность:\n• Отображение списка товаров (название, цена, категория).\n• Селект (dropdown) для выбора категории (фильтра...",
        "full_content": "2025-05-04 20:07:32\n Василий -> 2071074234:\nЭпик дей\nзп: 150\n\nКомпания из 3 человек. 1 собес задавали вопросы только по опыту, смогу ли работать один. \n\n2 собес скинули задачку на час времени. \nФильтрация и сортировка списка товаров (Product List)\n• Задача: реализовать компонент, отображающий список товаров и позволяющий фильтровать их по категории и сортировать по цене.\n\nФункциональность:\n• Отображение списка товаров (название, цена, категория).\n• Селект (dropdown) для выбора категории (фильтрация).\n• Селект (dropdown) для выбора типа сортировки (по цене: возрастанию/убыванию).\n• Предоставить готовый массив товаров (JSON).\n\nТехнические требования:\n• React (функциональные компоненты, хуки).\n• TypeScript.\n• Использование useState для управления состоянием.\n• Правильная обработка событий onChange для селектов.\n• Эффективная фильтрация и сортировка данных.\n\nОжидаемый результат:\n• Рабочий список товаров с возможностью фильтрации по категории и сортировки по цене.\n• Чистый и понятный код. \nimport React, { useState } from 'react';\n\n// Определение интерфейса для структуры товара\ninterface Product {\n  id: number;\n  name: string;\n  price: number;\n  category: string;\n}\n\n// Готовый массив товаров\nconst initialProducts: Product[] = [\n  { id: 1, name: 'Книга \"React для начинающих\"', price: 29.99, category: 'Книги' },\n  { id: 2, name: 'Смартфон XYZ', price: 199.99, category: 'Электроника' },\n  { id: 3, name: 'Ноутбук ABC', price: 899.99, category: 'Электроника' },\n  { id: 4, name: 'Книга \"Углубленный React\"', price: 39.99, category: 'Книги' },\n  { id: 5, name: 'Наушники', price: 59.99, category: 'Аксессуары' }\n]; \nconst ProductList: React.FC = () => {\n  // Состояние выбранной категории. Начальное значение \"All\" (все категории)\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n  // Состояние выбранного типа сортировки: \"asc\" (по возрастанию) или \"desc\" (по убыванию)\n  const [sortOption, setSortOption] = useState<'asc' | 'desc'>('asc');\n\n  // Получаем список уникальных категорий, включая вариант \"All\"\n  const categories = ['All', ...Array.from(new Set(initialProducts.map(product => product.category)))];\n\n  // Фильтрация товаров в зависимости от выбранной категории\n  const filteredProducts = initialProducts.filter(product =>\n    selectedCategory === 'All' ? true : product.category === selectedCategory\n  );\n\n  // Копируем отфильтрованный массив и сортируем по цене\n  const sortedProducts = [...filteredProducts].sort((a, b) => {\n    return sortOption === 'asc' ? a.price - b.price : b.price - a.price;\n  });\n\n  // Обработчики изменения значений селектов\n  const handleCategoryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedCategory(e.target.value);\n  };\n\n  const handleSortChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = e.target.value as 'asc' | 'desc';\n    setSortOption(value);\n  };\n return (\n    <div>\n      <h2>Список товаров</h2>\n\n      {/* Селект для фильтрации по категории */}\n      <div>\n        <label htmlFor=\"categoryFilter\">Фильтр по категории: </label>\n        <select id=\"categoryFilter\" value={selectedCategory} onChange={handleCategoryChange}>\n          {categories.map((cat, idx) => (\n            <option key={idx} value={cat}>\n              {cat}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Селект для выбора типа сортировки */}\n      <div>\n        <label htmlFor=\"sortOption\">Сортировка по цене: </label>\n        <select id=\"sortOption\" value={sortOption} onChange={handleSortChange}>\n          <option value=\"asc\">Возрастание</option>\n          <option value=\"desc\">Убывание</option>\n        </select>\n      </div>\n\n      {/* Отображение списка товаров */}\n      <ul>\n        {sortedProducts.map(product => (\n          <li key={product.id}>\n            <strong>{product.name}</strong> - ${product.price.toFixed(2)} - <em>{product.category}</em>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};"
      }
    ]
  },
  {
    "company": "Eesee, Крипта",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-12-10 08:08:58",
        "content": "2024-12-10 08:08:58\n Igor -> 2071074234:\nНазвание компании: Eesee, крипта\nСсылка на вакансию: сообщение от эйчара\nЗп: 3-5к usdt\nФидбек: оффер 4.5 на испыталку, 5к после\nЗапись: грузится\n\nВопросы:\n\n1. Event loop\n2. Написать свой PromiseAll\n3. Отличие типа от интерфейса\n4. Utility types\n5. Написать свой Exclude, Readonly\n6. Рефакторинг реакт компонента, вызок компонента как функцию\n7. Реакт как работает, батчинг, reconciliation\n8. Оптимизация реакт приложения\n9. Сервис воркеры\n\nЗадачи\n\n// Реализов...",
        "full_content": "2024-12-10 08:08:58\n Igor -> 2071074234:\nНазвание компании: Eesee, крипта\nСсылка на вакансию: сообщение от эйчара\nЗп: 3-5к usdt\nФидбек: оффер 4.5 на испыталку, 5к после\nЗапись: грузится\n\nВопросы:\n\n1. Event loop\n2. Написать свой PromiseAll\n3. Отличие типа от интерфейса\n4. Utility types\n5. Написать свой Exclude, Readonly\n6. Рефакторинг реакт компонента, вызок компонента как функцию\n7. Реакт как работает, батчинг, reconciliation\n8. Оптимизация реакт приложения\n9. Сервис воркеры\n\nЗадачи\n\n// Реализовать собственный Promise.all\n\nasync function myPromiseAll(promises) {\n}\n\n/******************/\n// Test Cases\nmyPromiseAll(\n  [\n    Promise.resolve('1'),\n    Promise.resolve('2')\n  ]\n)\n  .then(console.log) // Output: ['1', '2']\n\nmyPromiseAll(\n  [\n    Promise.resolve('1'),\n    Promise.resolve('2'),\n    Promise.reject('error')\n  ]\n)\n  .catch(console.log) // Output: 'error'\n\n\n// 1. Exclude\ntype MyExclude<T, U> = T extends U ? never : T;\n\n// Test Case\ntype ExcludableValues = MyExclude<'a' | 'b' | 'c', 'a'> // -> 'b' | 'c'\n\n// ===========\n\n// 2. Readonly\ntype MyReadonly<T extends object> = {\n  readonly [P in keyof T]: T[P]\n}\n\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n  author: string\n}\n// 1. Как перебрать ключи ?\n// Test Case\ntype ReadonlyTodo = MyReadonly<Todo>\n/* -> \n  {\n    readonly title: string;\n    readonly description: string;\n    readonly completed: boolean;\n    readonly author: string;\n  }\n*/\n\n// ===========\n\n// 3. Parameters\ntype MyParameters<T extends (...args: any[]) => any> = any\n\n// Test Case\nconst foo = (arg1: string, arg2: number): void => {}\n\ntype FooParameters = MyParameters<typeof foo> // -> [string, number]\n\n// App.tsx\nimport { useState } from 'react';\n\nconst MyCounter = () => {\n  const [count, setCount] = useState(0)\n\n  return (\n    \n    <div>\n       <button onClick={() => setCount(prev => prev - 1)}>decrement</button>\n     <span>{count}</span>\n       <button onClick={() => setCount(prev => prev + 1)}>increment</button>\n     </div>\n  )\n}\n\nexport const App = () => {\n  const [showCounter, setShowCounter] = useState(true)\n\n  if(showCounter) {\n    const [count, setCount] = useState(0)\n  }\n\n  return (\n    <div>\n      {showCounter && <MyCounter />}\n<!--       // vs -->\n       {showCounter && MyCounter()} \n      \n      <button onClick={() => setShowCounter((prev) => !prev)}>Toggle counter</button>\n    </div>\n  )\n}"
      }
    ]
  },
  {
    "company": "Agima",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-17 14:28:33",
        "content": "2025-03-17 14:28:33\n Vyacheslav -> 2071074234:\nAGIMA \nHR сама написала \nПроект сбера (беспилотное такси), гибрид\nЗП: сказал комфорт 250\nСначала задача, потом теория\nЗадача: отрисовать шахматную доску. Управлять королем. Может ходить только на соседние 8 клеток. Закрасить возможные ходы. \nРешение (удивлен что решил на самом деле)\nimport { useState } from 'react'\nimport './test.scss'\n\nconst arr = [[[],[],[],[],[],[],[],[]],\n            [[],[],[],[],[],[],[],[]],\n            [[],[],[],[],[],[],[],[...",
        "full_content": "2025-03-17 14:28:33\n Vyacheslav -> 2071074234:\nAGIMA \nHR сама написала \nПроект сбера (беспилотное такси), гибрид\nЗП: сказал комфорт 250\nСначала задача, потом теория\nЗадача: отрисовать шахматную доску. Управлять королем. Может ходить только на соседние 8 клеток. Закрасить возможные ходы. \nРешение (удивлен что решил на самом деле)\nimport { useState } from 'react'\nimport './test.scss'\n\nconst arr = [[[],[],[],[],[],[],[],[]],\n            [[],[],[],[],[],[],[],[]],\n            [[],[],[],[],[],[],[],[]],\n            [[],[],[],[],[],[],[],[]],\n            [[],[],[],[],[],[],[],[]],\n            [[],[],[],[],[],[],[],[]],\n            [[],[],[],[],[],[],[],[]],\n            [[],[],[],[],[],[],[],[]],]\n\nexport default function Test(){\n    const [cell, setCell] = useState('K')\n    const [kRow, setKRow] = useState(2)\n    const [kColumn, setKColumn] = useState(2)\n    console.log(arr)\n    const handler =(row, column)=>{\n        console.log(row, column)\n        if (Math.abs(row-kRow)<=1 && Math.abs(column-kColumn)<=1){\n            setKRow(row)\n            setKColumn(column)\n        }\n\n    }\n    const nearK = (row, column)=>{\n        if (Math.abs(row-kRow)<=1 && Math.abs(column-kColumn)<=1) return true\n        return false \n    }\n    return (\n        <div>\n            {arr.map((item, index)=>{\n\n                return <div  key={index}  \n                            className='row'>\n                            {item.map((inItem, index2)=>\n                                <div onClick={()=>handler(index, index2)} className={`cell ${nearK(index, index2)?'kcellnear':''}`}>{(index2===kColumn && kRow===index)?'K':''}</div>\n                    )}</div>\n            })}\n        </div>\n    )\n}\n\nfunction Cell({})\n+css для него\n.row{\n    display: flex;\n    &:nth-child(2n) .cell:nth-child(2n){\n        background-color: green;\n    } \n    &:nth-child(2n+1) .cell:nth-child(2n+1){\n        background-color: green;\n    }      \n}\n\n.cell{\n    border: solid 1px; \n    width: 100px;\n    height: 100px;\n}\n\n.kcellnear{\n    background-color: bisque !important;\n}\nВопросы по теории были по чеклисту, вопрос-ответ\n- Как попал в айти и фронтенд\n- про задачи на текущей работе и продукт рассказать\n- React.memo, useCallback\n- Работал ли с Next.js\n- работал ли с 3d графикой в js (Three.js?)\n\nP.S. решение задачи может показаться странной местами, т.к. делалась поэтапно (отрисовать доску. А теперь добавь коня. итд)\nP.S.S. Можно было бы и без nth-child, сумма row+column%2 === 0 -> backgroundColor и пошло поехало"
      }
    ]
  },
  {
    "company": "Dcloud",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-10 12:05:29",
        "content": "2024-06-10 12:05:29\n Александр Птицын -> 2071074234:\n- #DCloud\n- Вакансия: https://novokuznetsk.hh.ru/vacancy/95431413\n- Задачи:\nhttps://stackblitz.com/edit/vitejs-vite-n3bjhj?file=src%2FApp.tsx\n- Вопросы: про хостинг, про ТС, про реакт, базовые вопросы\n- Успех: ?",
        "full_content": "2024-06-10 12:05:29\n Александр Птицын -> 2071074234:\n- #DCloud\n- Вакансия: https://novokuznetsk.hh.ru/vacancy/95431413\n- Задачи:\nhttps://stackblitz.com/edit/vitejs-vite-n3bjhj?file=src%2FApp.tsx\n- Вопросы: про хостинг, про ТС, про реакт, базовые вопросы\n- Успех: ?"
      }
    ]
  },
  {
    "company": "Сквад Squad Https:",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-12-13 14:28:42",
        "content": "2024-12-13 14:28:42\n Tonidevs -> 2071074234:\nсквад squad https://squadsec.ru/\nЗП: 120-170к\nВакансия: https://kazan.hh.ru/vacancy/111854577\nСтартап \nУспех: нет\n\n\nвопросы:\n- про опыт (по каждой букве в резюме)\n- про асинхронность, ивент луп\nзадачи:\nреши задачу \nЧисла Фибоначчи\nF0 = 0\nF1 = 1\nFn = Fn-1 + Fn-2\n\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711\n\n\n\nданные приходят с БЭКА что будет если у нас 1 000 000 элементов в массиве (клонили в с...",
        "full_content": "2024-12-13 14:28:42\n Tonidevs -> 2071074234:\nсквад squad https://squadsec.ru/\nЗП: 120-170к\nВакансия: https://kazan.hh.ru/vacancy/111854577\nСтартап \nУспех: нет\n\n\nвопросы:\n- про опыт (по каждой букве в резюме)\n- про асинхронность, ивент луп\nзадачи:\nреши задачу \nЧисла Фибоначчи\nF0 = 0\nF1 = 1\nFn = Fn-1 + Fn-2\n\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711\n\n\n\nданные приходят с БЭКА что будет если у нас 1 000 000 элементов в массиве (клонили в сторону эвент лупа и разбития на чанки)\nfunction response(data) {\n    res = res.concat(\n        data.map(function (val) {\n            return val * 2;\n        })\n    );\n}"
      }
    ]
  },
  {
    "company": "Umnico Юмнико",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-18 17:36:24",
        "content": "2025-07-18 17:36:24\n Ivan -> 2071074234:\nКомпания: Umnico Юмнико\nЗП: 160К\n\n1. Какую сложную задачу последнюю решал?\n2. Задача на контекст вызова\n3. Про строгий режим\n4. Глубокое копирование объектов. Копирование функций.\n5. Задача на рефакторинг функции. Убрать все лишнее, чтоб функция стала чистой. \n6. Задача на рефакторинг React компоеннта. (клинап функции, хуки в условиях, useEffect( async () => {} ),  try catch для запроса, завести состояние под ошибку, массив зависимостей)\n7. Задача на поря...",
        "full_content": "2025-07-18 17:36:24\n Ivan -> 2071074234:\nКомпания: Umnico Юмнико\nЗП: 160К\n\n1. Какую сложную задачу последнюю решал?\n2. Задача на контекст вызова\n3. Про строгий режим\n4. Глубокое копирование объектов. Копирование функций.\n5. Задача на рефакторинг функции. Убрать все лишнее, чтоб функция стала чистой. \n6. Задача на рефакторинг React компоеннта. (клинап функции, хуки в условиях, useEffect( async () => {} ),  try catch для запроса, завести состояние под ошибку, массив зависимостей)\n7. Задача на порядок работы эффектов в реакт.\nimport {useState, useEffect, useLayoutEffect} from 'react'\n\nfunction App() {\n\n    const [count, setCount] = useState(0);\n\n    console.log(\"AP2\");\n\n    useEffect(() => {\n        console.log(\"useEffect 1\");\n        return () => console.log(\"cleanup useEffect 1\");\n    }, [count]);\n\n    useLayoutEffect(() => {\n        console.log(\"uselayoutEffect\");\n        return () => console.log(\"cleanup uselayoutEffect\");\n    }, [count]);\n\n    useEffect(() => {\n        console.log(\"useEffect 2\");\n        return () => console.log(\"cleanup useEffect 2\");\n    }, [count]);\n\n    return <button onClick={() => setCount((c) => c + 1)}>Click {count}</button>;\n\n}\n\nexport default App"
      }
    ]
  },
  {
    "company": "Syntellect",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-05-29 08:58:38",
        "content": "2025-05-29 08:58:38\n Ivan Kulyaev -> 2071074234:\nSyntellect\nВакансия — https://hh.ru/vacancy/120882639?query=frontend+developer&hhtmFrom=vacancy_search_list\nЗП — 270 000 ₽\n\nВопросы\n\n- Рассказать про опыт\n- Как искать по id в массиве объектов\n- Зачем нужен WeakMap и когда он лучше Map\n- Как связать состояние и URL-параметры\n- Как работают генераторы и где применяются\n- Как типизировать вложенные объекты в TS\n- structuredClone vs JSON.stringify\n- Как сделать бесконечный скролл\n- Как работать с зав...",
        "full_content": "2025-05-29 08:58:38\n Ivan Kulyaev -> 2071074234:\nSyntellect\nВакансия — https://hh.ru/vacancy/120882639?query=frontend+developer&hhtmFrom=vacancy_search_list\nЗП — 270 000 ₽\n\nВопросы\n\n- Рассказать про опыт\n- Как искать по id в массиве объектов\n- Зачем нужен WeakMap и когда он лучше Map\n- Как связать состояние и URL-параметры\n- Как работают генераторы и где применяются\n- Как типизировать вложенные объекты в TS\n- structuredClone vs JSON.stringify\n- Как сделать бесконечный скролл\n- Как работать с зависимостями в useEffect, если передаётся массив\n- Как реализовать groupBy вручную (чисто словами описать идею)\n- Где применял WebSoket?\n- Как безопасно менять вложенное поле в объекте\n- git команды, merge, commit, rebase и тд\n- что такое докер\n- разница видов рендеринга в next.js\n- FSD на примерах\n- отличие Promise.all от Promise.race\n- все о хуках\n\n\n// про фибоначчи\n\nfunction fib(n, memo = {}) {\n  if (n <= 1) return n;\n  if (memo[n]) return memo[n];\n  memo[n] = fib(n - 1, memo) + fib(n - 2, memo);\n  return memo[n];\n}\nconsole.log(fib(10)); // ?\n\n// группировка по полю\n\nconst users = [\n  { id: 1, group: 'admin' },\n  { id: 2, group: 'guest' },\n  { id: 3, group: 'admin' },\n];\nconst grouped = users.reduce((acc, user) => {\n  acc[user.group] = acc[user.group] || [];\n  acc[user.group].push(user);\n  return acc;\n}, {});\nconsole.log(grouped); // ?\n\n// сортировка по id\n\nconst base = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst extra = [\n  { id: 1, age: 30 },\n  { id: 2, age: 25 },\n];\nconst merged = base.map((item) => ({\n  ...item,\n  ...extra.find((e) => e.id === item.id),\n}));\nconsole.log(merged); // ?"
      }
    ]
  },
  {
    "company": "Исходный Код",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-03-10 14:43:46",
        "content": "2025-03-10 14:43:46\n Максим Соломыкин -> 2071074234:\nКомпания: Исходный код\nВакансия: https://hh.ru/vacancy/117822377\nЗП: 220 на руки\n\nВопросы:\n\n1. Отличия HTML 4 от HTML 5\n2. Какой тег можно использовать для навигации страницы вместо nav\n3. Как создать боковую панель\n\nЗадача:\n.wrapper {\n  position: relative;\n}\n\n.red, .green, .blue {\n  position: absolute;\n  width: 120px;\n  height: 120px;\n}\n\n.green, .blue {\n  top: 40px;\n  left: 40px;\n}\n\n.red {\n  background-color: red;\n  z-index: 2;\n}\n\n.green {\n  ...",
        "full_content": "2025-03-10 14:43:46\n Максим Соломыкин -> 2071074234:\nКомпания: Исходный код\nВакансия: https://hh.ru/vacancy/117822377\nЗП: 220 на руки\n\nВопросы:\n\n1. Отличия HTML 4 от HTML 5\n2. Какой тег можно использовать для навигации страницы вместо nav\n3. Как создать боковую панель\n\nЗадача:\n.wrapper {\n  position: relative;\n}\n\n.red, .green, .blue {\n  position: absolute;\n  width: 120px;\n  height: 120px;\n}\n\n.green, .blue {\n  top: 40px;\n  left: 40px;\n}\n\n.red {\n  background-color: red;\n  z-index: 2;\n}\n\n.green {\n  background-color: green;\n  z-index: 1;\n}\n\n.blue {\n  background-color: blue;\n  z-index: 3;\n}\n\n<div class=\"wrapper\">\n  <div class=\"red\"></div>\n  <div class=\"green\">\n    <div class=\"blue\"></div>\n  </div>\n</div>\n\nкак будут расположены квадраты\n\nРешение:\nКартинка 1\n\n5. Отличия var от let\n6. \nconsole.log(a); // ?\nvar a;\na = 5;\nconsole.log(a); // ?\nvar a;\nconsole.log(a); // ?\n\nРешение:\nundefined, 5, 5\n7.  Написать рекурсивную функцию counter\nfunction createCounter() {\n  let count = 0;  // Переменная count, которая будет сохранять состояние\n\n  return function() {  // Возвращаем функцию, которая является замыканием\n    count++;  // Увеличиваем count на 1\n    console.log(count);  // Выводим текущее значение count\n  };\n}\n\nconst increment = createCounter();  // Создаём инкрементатор\nincrement();  // 1\nincrement();  // 2\nincrement();  // 3\n8. Написать функцию debounce\nfunction debounce(func, delay) {\n  let timer;\n  \n  return function(...args) {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, delay);\n  };\n}\n9. Прототипное наследование\n10. Что находиться вверху цепочки прототипов\n11. Тезисно что такое TS и зачем надо\n12. Что такое дженерики и зачем нужны\n13. Реализовать ObjectKeys\ntype RandomObject = {\n  a: number;\n  b: string;\n  c: boolean;\n}\n\n// type RandomObjectKeys = ObjectKeys<RandomObject>\ntype ObjectKeys \n\nРешение:\ntype ObjectKeys<T extends Object> = keyof T \n14. Как принудительно вызвать ререндер компонента\n15. Что будет в консоли и как исправить\nconst [counter, setCounter] = useState(0)\nconst handleClick = () => {\n  setCounter(counter++);\n  setCounter(++counter);\n  console.log(counter);\n};\n\n<button type=\"button\" onClick={handleClick}>increment</button>\n16. Сделать так, чтобы компонент был в фокусе \nconst headerRef = useRef();\n\n<h1 ref={headerRef}>3aronoBok</h1>\n\nРешение:\n\nconst headerRef = useRef();\nuseEffect(() => {\n  if (headerRef.current) {\n    headerRef.current.focus();\n  }\n});\n\n<h1 ref={headerRef} tabIndex='-1'>3aronoBok</h1>\n17. Сделай так чтобы работало корректно\nconst headerRef = useRef();\nuseEffect(() => {\n  if (headerRef.current) {\n    headerRef.current.focus();\n  }\n});\n\nif (isLoading) {\n  return <Loader />;\n}\n\n<h1 ref={headerRef} tabIndex='-1'>{article.header}</h1>\n\nРешение:\n\nconst headerRef = useRef();\nuseEffect(() => {\n  if (!article.header && headerRef.current) {\n    headerRef.current.focus();\n  }\n}, [isLoading]);\n\nif (isLoading) {\n  return <Loader />;\n}\n\n<h1 ref={headerRef} tabIndex='-1'>{article.header}</h1>"
      }
    ]
  },
  {
    "company": "Hitch By Red_Mad_Robot",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-08-29 08:42:58",
        "content": "2024-08-29 08:42:58\n Руслан -> 2071074234:\nhitch by red_mad_robot\n— зп: от 270к\n— вакансия: hr написала\n— Вопросы: \n1. Про solid\n2. Какие паттерны знаешь, использовал в проектах\n3. Как была устроена авторизация в проекте, про jwt\n4. FSD плюсы минусы. сравнение с модульной архитектурой\n4. Типы тестирования, для чего каждый\n5. гриды и флексы\n6. Как бы ты реализовывал страницу регистрации с логином и паролем, полем повторить пароль, вплоть до поверхностного описания кода. + страница авторизации есл...",
        "full_content": "2024-08-29 08:42:58\n Руслан -> 2071074234:\nhitch by red_mad_robot\n— зп: от 270к\n— вакансия: hr написала\n— Вопросы: \n1. Про solid\n2. Какие паттерны знаешь, использовал в проектах\n3. Как была устроена авторизация в проекте, про jwt\n4. FSD плюсы минусы. сравнение с модульной архитектурой\n4. Типы тестирования, для чего каждый\n5. гриды и флексы\n6. Как бы ты реализовывал страницу регистрации с логином и паролем, полем повторить пароль, вплоть до поверхностного описания кода. + страница авторизации если юзер зарегистрирован. Без библиотек, на какие подзадачи разбивал бы, где хранил бы логин и пароль, как бы их отправлял.\n7. Описать базовые хуки.\n8. useTransition\n9. useDefferedValue\n10. функции в зависимостях useEffect, какие проблемы тут есть\n11. ленивы компоненты\n12. может ли useReducer заменить глобальный стор и почему\n13. функция shallow из редакса, вопрос про проблему бесконечных ререндеров приложения\n14. как поймать ошибки в реакт приложении, несколько вариантов накинуть\n15. про стрикт мод в реакте, особенности, для чего\n— задачи:\n1. отрефачить компонен"
      }
    ]
  },
  {
    "company": "Ао Ниимэ",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-10-25 20:25:29",
        "content": "2024-10-25 20:25:29\n Mike -> 2071074234:\nКомпания: АО НИИМЭ\nзп: до 250к\nВакансия:https://hh.ru/vacancy/108141209\n1. var/let/const \n2. Замыкание \n3. EventLoop \n4. Promise/async-await \n5. Class vs Function React \n6. Хуки \n7. useEffect \n8. Тесты юзал ли на проекте \n9. Docker  \n10. React profiler \n11. Написать счетчик  \n12. Сделать фильтрацию - платина \n13. На время написать кастомный хук для работы с localStorage",
        "full_content": "2024-10-25 20:25:29\n Mike -> 2071074234:\nКомпания: АО НИИМЭ\nзп: до 250к\nВакансия:https://hh.ru/vacancy/108141209\n1. var/let/const \n2. Замыкание \n3. EventLoop \n4. Promise/async-await \n5. Class vs Function React \n6. Хуки \n7. useEffect \n8. Тесты юзал ли на проекте \n9. Docker  \n10. React profiler \n11. Написать счетчик  \n12. Сделать фильтрацию - платина \n13. На время написать кастомный хук для работы с localStorage"
      }
    ]
  },
  {
    "company": "Infinet Wireless",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-03-24 08:28:47",
        "content": "2024-03-24 08:28:47\n DenT -> 2071074234:\nНазвание компании: Infinet wireless\nВакансия:https://hh.ru/vacancy/94537327\nВилка:140-220\nБыл ознакомительный собес. На собесе был проджект, бек, фронт, hr. Поговорили за технологии, спрашивали про мой опыт, отличие фреймворков, ООП, протоколы, тесты, gRPC, линукс и какие команды часто использую. \nФидбек от hr: приятный парень, но не подходит по хардам. \nУ них три проекта, два это легаси на классах реакта, третий на хуках.",
        "full_content": "2024-03-24 08:28:47\n DenT -> 2071074234:\nНазвание компании: Infinet wireless\nВакансия:https://hh.ru/vacancy/94537327\nВилка:140-220\nБыл ознакомительный собес. На собесе был проджект, бек, фронт, hr. Поговорили за технологии, спрашивали про мой опыт, отличие фреймворков, ООП, протоколы, тесты, gRPC, линукс и какие команды часто использую. \nФидбек от hr: приятный парень, но не подходит по хардам. \nУ них три проекта, два это легаси на классах реакта, третий на хуках."
      }
    ]
  },
  {
    "company": "Major Ассистанс",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-02-13 11:36:22",
        "content": "2025-02-13 11:36:22\n Александр Богданов -> 2071074234:\n1) Компания:  Major Ассистанс (HR сама написала в телегу..)\n2) Вопросы:\n- SSR, SSG, SSG + ISR – разница,отличия когда что использовать\n- вопросы про опыт,почему ушел,расскажи про последнее место работы,\n- расскажи про await что делает,почему код останавливается,как на промисах блокировать интерпретатор\n- если back выдачу данных поэтапно делает,как карточки поэтапно отрисовывать чтобы юзер видел их поэтапно — способы оптимизации, как хранить ...",
        "full_content": "2025-02-13 11:36:22\n Александр Богданов -> 2071074234:\n1) Компания:  Major Ассистанс (HR сама написала в телегу..)\n2) Вопросы:\n- SSR, SSG, SSG + ISR – разница,отличия когда что использовать\n- вопросы про опыт,почему ушел,расскажи про последнее место работы,\n- расскажи про await что делает,почему код останавливается,как на промисах блокировать интерпретатор\n- если back выдачу данных поэтапно делает,как карточки поэтапно отрисовывать чтобы юзер видел их поэтапно — способы оптимизации, как хранить оптимально эти карточки на клиенте\n-  как реализовал бы чат общения + группу чатов для общения,какие библы нужны? Как кэшировать данные чатов,чата?\n- как взаимодеитсвие с дизаинерами было?\n- СЕО + метатэги расскажи в Реакт как делал\n- лайв-кодинга не было"
      }
    ]
  },
  {
    "company": "Smartvisor",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-06-16 20:01:57",
        "content": "2025-06-16 20:01:57\n Kamil -> 2071074234:\nКомпания \"Smartvisor\".\nСсылки на вакансию нет, т.к. сами со мной связались (@Smartvisor_itrend)\nЗП не обсуждали.\n\n\nВопросы были по резюме.\n1) много спрашивали про процесс авторизации и аутентификации ЛК:\naccess, refresh, какой код ответа приходит и какие статусы приходят(200, 201, 401);\n2) event loop;\n3) websocket;\n4) i18n.\n\nЗадача\nРасшарить весь экран и выполнить задачу на реакте:\nРеализовать компонент SmartList, который получает список строк и фильтруе...",
        "full_content": "2025-06-16 20:01:57\n Kamil -> 2071074234:\nКомпания \"Smartvisor\".\nСсылки на вакансию нет, т.к. сами со мной связались (@Smartvisor_itrend)\nЗП не обсуждали.\n\n\nВопросы были по резюме.\n1) много спрашивали про процесс авторизации и аутентификации ЛК:\naccess, refresh, какой код ответа приходит и какие статусы приходят(200, 201, 401);\n2) event loop;\n3) websocket;\n4) i18n.\n\nЗадача\nРасшарить весь экран и выполнить задачу на реакте:\nРеализовать компонент SmartList, который получает список строк и фильтрует их по введённому пользователем поисковому запросу. Показывать только те элементы, что содержат подстроку."
      }
    ]
  },
  {
    "company": "Belitsoft",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-05-16 21:34:47",
        "content": "2025-05-16 21:34:47\n Kirill -> 2071074234:\nКомпания: BelitSoft\nЗп: не говорили\n\n1) расскажи про себя, про опыт\n2) рассказть про unit test, react-testing library\n3) работал ли с tailwind\n4) работал ли с react-hook-form\n5) что такое setValue, setError в  react-hook-form\n6) работал ли с zod\n7) приходилось ли написать валидатор на ункальность при помощи zod\n что такое refine в zod\n9) как сделать валидацию поля, чтобы оно зависило от друго поля \n10) что такое union в zod\n11 ) что такое shouldValidate...",
        "full_content": "2025-05-16 21:34:47\n Kirill -> 2071074234:\nКомпания: BelitSoft\nЗп: не говорили\n\n1) расскажи про себя, про опыт\n2) рассказть про unit test, react-testing library\n3) работал ли с tailwind\n4) работал ли с react-hook-form\n5) что такое setValue, setError в  react-hook-form\n6) работал ли с zod\n7) приходилось ли написать валидатор на ункальность при помощи zod\n что такое refine в zod\n9) как сделать валидацию поля, чтобы оно зависило от друго поля \n10) что такое union в zod\n11 ) что такое shouldValidate и как он работает  в react-hook-form\n12)что такое react-query\n13) как засатвить рефечнуть данные, если мы добавили новый элемент в массив в redux-toolit или react-query\n14)какие хуки знаешь \n15)что такое virtual Dom\n16) useCallback и React.memo когда нужно использовать и когда можно его не использовать\n17) что такое key в реакт\n18) что произойдет, если key изменился\n19)что такое замыкание и зачем нам доступ к переменным из вышестоящего скоуп\n20)разница между примитивами и объектами\n21) Знаешь ли способ, чтобы нельзя было поменять свойства объекта\n22) что такое event loop\n23) как подгружаются скрипты в js, async, defer\n24) что знаешь про http кеширование \n25) как кешируется get запрос, как его инвалидировать и какие заголовки для этого есть \n26) что будет если мы поставили картинке кешируемость 1 день. Тут надо было рассказать про тег в виде строки \n27) Какие методы http методы знаешь и зачем они нужны"
      }
    ]
  },
  {
    "company": "Wmt, Короткий Созвон С Командой Заказчика",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-07-10 14:41:32",
        "content": "2024-07-10 14:41:32\n Artur -> 2071074234:\nWMT, короткий созвон с командой заказчика\n\n— Вакансия: написали в тг сами\n— ЗП: говорил 200к+\n\nВопросы:\n— расскажи про свой опыт, команду\n— что было прорывное у тебя, какие задачи сложные закрывал\n— как работал с картами\n— чем в свободное время занимаешься\n— как ui кит разрабатывал",
        "full_content": "2024-07-10 14:41:32\n Artur -> 2071074234:\nWMT, короткий созвон с командой заказчика\n\n— Вакансия: написали в тг сами\n— ЗП: говорил 200к+\n\nВопросы:\n— расскажи про свой опыт, команду\n— что было прорывное у тебя, какие задачи сложные закрывал\n— как работал с картами\n— чем в свободное время занимаешься\n— как ui кит разрабатывал"
      }
    ]
  },
  {
    "company": "Arbihunter",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-05-16 08:23:13",
        "content": "2025-05-16 08:23:13\n Василий -> 2071074234:\nArbiHunter 2 этап\n\nОбсудили сайт\nРассказали про компанию\nРассказал о себя\n\nВпечатление: скам контора",
        "full_content": "2025-05-16 08:23:13\n Василий -> 2071074234:\nArbiHunter 2 этап\n\nОбсудили сайт\nРассказали про компанию\nРассказал о себя\n\nВпечатление: скам контора"
      }
    ]
  },
  {
    "company": "Топ Системы",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-01-11 19:40:19",
        "content": "2025-01-11 19:40:19\n Артем -> 2071074234:\nКомпания: Топ Системы(Им нужен 3д Разработчик)\nЗП 220К\nВопросы:\nКак реализовывал UI виджиты в Three.js\nThree.js\nКак делала анимацияю\nКак создать шар\nКак создать Камеру\nкак направить камеру на шар\nтонкости в системе координат в браузере\nWebGL\nООП",
        "full_content": "2025-01-11 19:40:19\n Артем -> 2071074234:\nКомпания: Топ Системы(Им нужен 3д Разработчик)\nЗП 220К\nВопросы:\nКак реализовывал UI виджиты в Three.js\nThree.js\nКак делала анимацияю\nКак создать шар\nКак создать Камеру\nкак направить камеру на шар\nтонкости в системе координат в браузере\nWebGL\nООП"
      }
    ]
  },
  {
    "company": "Jsa-Group",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-12-11 12:07:07",
        "content": "2024-12-11 12:07:07\n Mikhail Sorokin -> 2071074234:\nJSA-group\nВакансия — https://hh.ru/vacancy/110877207\nЗп — на тот момент не обсуждалось, я называл желаемую сумму от 300 000 на руки\n\n- что для меня значит \"хороший руоводитель\"?\n- критично ли для меня сейчас выполнять именно функции лида?\n- я хочу сейчас долгий или краткосрочный проект?\n- как занимаюсь самообразованием\n- сколько работал лидом, какие функции выполнял\n- работал ли по скраму\n- примеры, где я проявлял инициативу\n\n\n- Какие хуки есть...",
        "full_content": "2024-12-11 12:07:07\n Mikhail Sorokin -> 2071074234:\nJSA-group\nВакансия — https://hh.ru/vacancy/110877207\nЗп — на тот момент не обсуждалось, я называл желаемую сумму от 300 000 на руки\n\n- что для меня значит \"хороший руоводитель\"?\n- критично ли для меня сейчас выполнять именно функции лида?\n- я хочу сейчас долгий или краткосрочный проект?\n- как занимаюсь самообразованием\n- сколько работал лидом, какие функции выполнял\n- работал ли по скраму\n- примеры, где я проявлял инициативу\n\n\n- Какие хуки есть в реакт, для чего нужны?\n- Зачем нужны стейт менеджеры, если есть контекст\n- Как работает React, reconcillation, зачем нужны ключи\n- что будет если поменяется key\n- какими инструментами отладки пользуюсь\n- как имитировать медленную работу интернета в инструментах разработчика?\n- брейкпойнты в дом дереве как использовать\n- как отслеживать утечки памяти\n- как работают замыкания, к чему они могут привести в функциональных компонентах\n- что такое промисы, что такое async/await, как работает?\n- рассказать про event loop\n- перечислить как можно больше способов\n- как создать отдельный поток\n- что такое мемоизация\n\nЗадача\n/*\nЧемпионат по шагам.\nНеобходимо определить userIds участников, которые прошли наибольшее количество шагов steps за все дни, не пропустив ни одного дня соревнований.\n\n# Пример 1\n# ввод\nstatistics = [\n        [{ userId: 1, steps: 1000 }, { userId: 2, steps: 1500 }],\n        [{ userId: 2, steps: 1000 }]\n]\n\n# вывод\nchampions = { userIds: [2], steps: 2500 }\n\n# Пример 2\nstatistics = [\n        [{ userId: 1, steps: 2000 }, { userId: 2, steps: 1500 }],\n        [{ userId: 2, steps: 4000 }, { userId: 1, steps: 3500 }]\n]\n\n# вывод\nchampions = { userIds: [1, 2], steps: 5500 }\n\nМое решение\nfunction countSteps(statistics) {\n  const statisticItems = statistics.flat();\n  const obj = {};\n  let max = 0;\n  const results = [];\n\n  statisticItems.forEach((item) => {\n    const steps = obj[item.userId];\n    if (!steps) {\n      obj[item.userId] = { steps: item.steps, days: 1 };\n    } else {\n      obj[item.userId] = {\n        steps: steps.steps + item.steps,\n        days: steps.days + 1,\n      };\n    }\n    if (obj[item.userId].steps >= max) {\n      max = obj[item.userId].steps;\n    }\n  });\n  for (let item in obj) {\n    if (obj[item].steps === max && obj[item].days === statistics.length) {\n      results.push({ userId: item, steps: obj[item] });\n    }\n  }\n  return results;\n}\n\nconst statistics = [\n  [\n    { userId: 1, steps: 2500 },\n    { userId: 2, steps: 1500 },\n  ],\n  [{ userId: 2, steps: 1000 }],\n];\n\nconsole.log(countSteps(statistics));"
      }
    ]
  },
  {
    "company": "Lofty",
    "count": 1,
    "records": [
      {
        "timestamp": "2024-06-07 10:04:57",
        "content": "2024-06-07 10:04:57\n Данил Красный -> 2071074234:\n- Название компании: Lofty\n- Ссылка на вакансию: https://hh.ru/vacancy/101289845\n- зп: просил от 250\n\nВопросы и задача:\n1. Типы свойства display и их разница\n2. Специфичность и селектор с нулевой специфичностью\n3. Способы организации css в проекте\n4. Стандартные вопросы про асинхронность\n5. https://leetcode.com/problems/valid-parentheses\n6. requestanimationframe\n7. Критический путь рендеринга веб страницы\n8. Отличия vuex и pinia и что больше нрав...",
        "full_content": "2024-06-07 10:04:57\n Данил Красный -> 2071074234:\n- Название компании: Lofty\n- Ссылка на вакансию: https://hh.ru/vacancy/101289845\n- зп: просил от 250\n\nВопросы и задача:\n1. Типы свойства display и их разница\n2. Специфичность и селектор с нулевой специфичностью\n3. Способы организации css в проекте\n4. Стандартные вопросы про асинхронность\n5. https://leetcode.com/problems/valid-parentheses\n6. requestanimationframe\n7. Критический путь рендеринга веб страницы\n8. Отличия vuex и pinia и что больше нравится"
      }
    ]
  },
  {
    "company": "Igaming",
    "count": 1,
    "records": [
      {
        "timestamp": "2025-07-01 18:45:59",
        "content": "2025-07-01 18:45:59\n Sergio -> 2071074234:\nIgaming (Конкретное название под NDA) 01.07\nТехничка\nИщут ещё одного senior для команд из всех сеньоров\n1.Как внедрял FSD в Next, если Next.js не очень метчится с FSD архитектурой. Есть же атомарная которая больше подходит под некст\n2.Зачем использовался и React Query и Zustand, если они оба являются стейт-менеджерами (useQuery из react query для race condition запросов, чтобы не было множественных запросов. Также для решения проблем с перерендерами лиш...",
        "full_content": "2025-07-01 18:45:59\n Sergio -> 2071074234:\nIgaming (Конкретное название под NDA) 01.07\nТехничка\nИщут ещё одного senior для команд из всех сеньоров\n1.Как внедрял FSD в Next, если Next.js не очень метчится с FSD архитектурой. Есть же атомарная которая больше подходит под некст\n2.Зачем использовался и React Query и Zustand, если они оба являются стейт-менеджерами (useQuery из react query для race condition запросов, чтобы не было множественных запросов. Также для решения проблем с перерендерами лишними, если меняется 1 ключ, чтобы не перерендеривались все компоненты которые на него подписаны).\n3. Зачем использовали headless UI и как правки вносили (делал npm link на локалке себе и после этого уже на стенд деплоили)\n4. Отличие next build --standalone от next build обычного (в первом случае генерится ещё папка ./next/standalone, встроенные зависимости - часть node_modules, автономная версия приложения, отдельная папка с ассетами - .next/static и также размер деплоя в 10-20 раз меньше, т.к. не требует node_modules на сервере, зависимости в билд встроены)\n5. С какими сталкивался проблемами при билде на турбопаке (next/image проблемы, \n6. Как делал offline-first PWA (service worker, workbox build, indexedDB)\n7. Разница между Object, Map, Set\n\n\nВ основном были вопросы конкретно по моему опыту, типичные вопросы а-ля (отличие http 1.1 от http 2.0) не спрашивали))\n\n— Задачи:\n1. Отсортировать список по словам, состоящим из одинаковых букв:\n ['ab', 'ac', 'ba', 'ca'] --> [['ab','ac'], ['ac', 'ca']]\n\n// Решение\nconst startArray = ['ab', 'ac', 'ba', 'ca'];\n\nconst groupWords = (words) => {\n    const groups = {}\n\n    words.forEach(word => {\n        const normalized = [...word].sort().join('');\n        if (!groups[normalized]) \n            groups[normalized] = []\n        \n        groups[normalized].push(word)\n    })\n    return Object.values(groups)\n}\n\ngroupWords(startArray)\n// Затипизировать Throttle чтобы убрать все ошибки TS\nconst throttle: Throttle = (func, delay) => {\n  let timer: NodeJS.Timeout | null = null;\n  return (...args) => {\n    if (!timer) {\n      func(...args);\n      timer = setTimeout(() => {\n        timer = null;\n      }, delay);\n    }\n  };\n};\n\n// usage example\nconst onMove = (x: number, y: number): void => {\n  console.log(x, y);\n};\n\n//const throttledOnMove: (...args: number[]) => void\nconst throttledOnMove = throttle(onMove, 50);\n\n\nРешение:\n \ntype Throttle<T extends (...args: []) => void> = (\nfunc: T,\ndelay: number\n) => (...args: Parameters<T>) => void;\n————————————————————\n//Реализуйте кнопку и таймер, которые будут начинаться с 10 и заканчиваться на 0, \n// также отслеживать счетчик до истечения времени таймера, \n// кнопка должна исчезать после истечения времени таймера.\n\nimport React, { useRef } from \"https://esm.sh/react@18\";\nimport ReactDOM from \"https://esm.sh/react-dom@18\";\n\nconst App = () => {\n  const [count, setCount] = React.useState(0)\n  const [timeLeft, setTimeLeft] = React.useState(10)\n  const id = React.useRef(null)\n  \n  return (\n    <div className=\"App\">\n      <h1>{count}</h1>\n      <h3>Time left: {timeLeft} seconds</h3>\n      {timeLeft === 0 ? null : \n        <button onClick={() => setCount((c) => c + 1)}>\n          +\n        </button>}\n    </div>\n  );\n}\n\nРешение:\nuseEffect(() => {\n    const timerID = setInterval(() => {\n    setTimeLeft((prev) => {\n        if (prev <= 1) {\n            clearInterval(timerID);\n            return 0;    \n        }\n        return prev - 1;\n        })\n    }, 1000)\nreturn () => clearInterval(timerID);\n}, [])"
      }
    ]
  }
]